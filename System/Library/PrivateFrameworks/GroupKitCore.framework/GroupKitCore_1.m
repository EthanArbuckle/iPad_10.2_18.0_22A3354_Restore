uint64_t *outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = a1[2];
  v7 = a1[3];
  outlined copy of Data._Representation(v6, v7);
  a2[2] = v6;
  a2[3] = v7;
  v8 = a1[4];
  v9 = a1[5];
  outlined copy of Data._Representation(v8, v9);
  a2[4] = v8;
  a2[5] = v9;
  v10 = a1[6];
  v11 = a1[7];
  outlined copy of Data._Representation(v10, v11);
  a2[6] = v10;
  a2[7] = v11;
  v12 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() + 32);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v12, (char *)a1 + v12);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.encode(to:)(a1);
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "currentGroupAdminSignature";
  *(_QWORD *)(v3 + 8) = 26;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "previousGroupAdminSignature";
  *(_QWORD *)(v3 + 32) = 27;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "currentGroupMemberSignature";
  *(_QWORD *)(v3 + 56) = 27;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currentGroupAdminSignature", 0x1AuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("previousGroupAdminSignature", 0x1BuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("currentGroupMemberSignature", 0x1BuLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  char *v0;

  return GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[2];
  char v37;
  _QWORD v38[2];
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  _QWORD *v42;
  char *v43;

  v19 = a1;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys>);
  v20 = *(_QWORD *)(v29 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v8 - v21;
  v43 = (char *)v8 - v21;
  v42 = v2;
  v41 = v1;
  v22 = v2[3];
  v23 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v22);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  v31 = v40;
  v40[0] = v26;
  v40[1] = v27;
  v28 = &v39;
  v39 = 0;
  v3 = lazy protocol witness table accessor for type Data and conformance Data();
  v4 = v30;
  v32 = v3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v33 = v4;
  v34 = v4;
  if (v4)
  {
    v9 = v34;
    outlined destroy of Data((uint64_t)v40);
    result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    v10 = v9;
  }
  else
  {
    outlined destroy of Data((uint64_t)v40);
    v15 = v25[4];
    v16 = v25[5];
    outlined copy of Data._Representation(v15, v16);
    v5 = v33;
    v38[0] = v15;
    v38[1] = v16;
    v37 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v5;
    v18 = v5;
    if (v5)
    {
      v8[1] = v18;
      outlined destroy of Data((uint64_t)v38);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    }
    else
    {
      outlined destroy of Data((uint64_t)v38);
      v11 = v25[2];
      v12 = v25[3];
      outlined copy of Data._Representation(v11, v12);
      v6 = v17;
      v36[0] = v11;
      v36[1] = v12;
      v35 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v13 = v6;
      v14 = v6;
      if (v6)
        v8[0] = v14;
      outlined destroy of Data((uint64_t)v36);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;

  v38 = a2;
  v47 = a1;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys>);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v48 = (char *)v25 - v41;
  v73 = (char *)v25 - v41;
  v43 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() - 8) + 64);
  v42 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v45 = (char *)v25 - v42;
  v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)v25 - v44;
  v72 = (char *)v25 - v44;
  v71 = v3;
  GKCrypto_GroupBlob.GroupBlobSignatures.init()(v4);
  outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v45, v46);
  v50 = v47[3];
  v51 = v47[4];
  __swift_project_boxed_opaque_existential_1(v47, v50);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
  v5 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v5;
  v53 = v5;
  if (v5)
  {
    v29 = v53;
LABEL_16:
    v25[1] = v29;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    return outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v46);
  }
  v34 = &v68;
  v68 = 0;
  v6 = lazy protocol witness table accessor for type Data and conformance Data();
  v7 = v52;
  v35 = v6;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v36 = v7;
  v37 = v7;
  if (v7)
  {
    v28 = v37;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v39);
    v29 = v28;
    goto LABEL_16;
  }
  v8 = v46;
  v9 = v70;
  v10 = *(_QWORD *)v46;
  v11 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v8 + 1) = v9;
  outlined consume of Data._Representation(v10, v11);
  v12 = v36;
  v63 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v32 = v12;
  v33 = v12;
  if (v12)
  {
    v27 = v33;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v39);
    v29 = v27;
    goto LABEL_16;
  }
  v61 = v64;
  v62 = v65;
  if ((v65 & 0xF000000000000000) == 0xF000000000000000)
  {
    v66 = Data.init()();
    v67 = v13;
    outlined destroy of Data?((uint64_t)&v61);
  }
  else
  {
    v66 = v61;
    v67 = v62;
  }
  v14 = v46;
  v15 = v67;
  v16 = *((_QWORD *)v46 + 2);
  v17 = *((_QWORD *)v46 + 3);
  *((_QWORD *)v46 + 2) = v66;
  *((_QWORD *)v14 + 3) = v15;
  outlined consume of Data._Representation(v16, v17);
  v18 = v32;
  v56 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v30 = v18;
  v31 = v18;
  if (v18)
  {
    v26 = v31;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v39);
    v29 = v26;
    goto LABEL_16;
  }
  v54 = v57;
  v55 = v58;
  if ((v58 & 0xF000000000000000) == 0xF000000000000000)
  {
    v59 = Data.init()();
    v60 = v19;
    outlined destroy of Data?((uint64_t)&v54);
  }
  else
  {
    v59 = v54;
    v60 = v55;
  }
  v20 = v46;
  v21 = v60;
  v22 = *((_QWORD *)v46 + 4);
  v23 = *((_QWORD *)v46 + 5);
  *((_QWORD *)v46 + 4) = v59;
  *((_QWORD *)v20 + 5) = v21;
  outlined consume of Data._Representation(v22, v23);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v39);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t *)v46, v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  return outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v46);
}

char *outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a2 + 2) = *((_OWORD *)a1 + 2);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t *outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = a1[2];
  v7 = a1[3];
  outlined copy of Data._Representation(v6, v7);
  a2[2] = v6;
  a2[3] = v7;
  v8 = a1[4];
  v9 = a1[5];
  outlined copy of Data._Representation(v8, v9);
  a2[4] = v8;
  a2[5] = v9;
  v10 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v10, (char *)a1 + v10);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.encode(to:)(a1);
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "randomizedVerificationKey";
  *(_QWORD *)(v3 + 32) = 25;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "ciphertextOfKeyShare";
  *(_QWORD *)(v3 + 56) = 20;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_RSVPResponse.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomizedVerificationKey", 0x19uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ciphertextOfKeyShare", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_RSVPResponse.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_RSVPResponse.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_RSVPResponse.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVPResponse.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_RSVPResponse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_RSVPResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  char *v0;

  return GKCrypto_RSVPResponse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_RSVPResponse.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVPResponse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  return GKCrypto_RSVPResponse.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_RSVPResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVPResponse.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_RSVPResponse.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];
  char v35;
  _QWORD v36[2];
  char v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;

  v22 = a1;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_RSVPResponse.CodingKeys>);
  v23 = *(_QWORD *)(v29 - 8);
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)v8 - v24;
  v40 = (char *)v8 - v24;
  v39 = v2;
  v38 = v1;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v30;
  v37 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v31 = v3;
  v32 = v3;
  if (v3)
  {
    v9 = v32;
    result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    v10 = v9;
  }
  else
  {
    v15 = v28[1];
    v16 = v28[2];
    outlined copy of Data._Representation(v15, v16);
    v18 = v36;
    v36[0] = v15;
    v36[1] = v16;
    v17 = &v35;
    v35 = 1;
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v5 = v31;
    v19 = v4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v20 = v5;
    v21 = v5;
    if (v5)
    {
      v8[1] = v21;
      outlined destroy of Data((uint64_t)v36);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    }
    else
    {
      outlined destroy of Data((uint64_t)v36);
      v11 = v28[3];
      v12 = v28[4];
      outlined copy of Data._Representation(v11, v12);
      v6 = v20;
      v34[0] = v11;
      v34[1] = v12;
      v33 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v13 = v6;
      v14 = v6;
      if (v6)
        v8[0] = v14;
      outlined destroy of Data((uint64_t)v34);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse.CodingKeys, &type metadata for GKCrypto_RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse.CodingKeys, &type metadata for GKCrypto_RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse.CodingKeys, &type metadata for GKCrypto_RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse.CodingKeys, &type metadata for GKCrypto_RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse.CodingKeys, &type metadata for GKCrypto_RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GKCrypto_RSVPResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;

  v32 = a2;
  v41 = a1;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_RSVPResponse.CodingKeys>);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v42 = (char *)&v19 - v35;
  v57 = (char *)&v19 - v35;
  v37 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_RSVPResponse() - 8) + 64);
  v36 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v41);
  v39 = (uint64_t)&v19 - v36;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v40 = (uint64_t)&v19 - v38;
  v56 = (char *)&v19 - v38;
  v55 = v3;
  GKCrypto_RSVPResponse.init()(v4);
  outlined init with take of GKCrypto_RSVPResponse(v39, v40);
  v44 = v41[3];
  v45 = v41[4];
  __swift_project_boxed_opaque_existential_1(v41, v44);
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
  v5 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v46 = v5;
  v47 = v5;
  if (v5)
  {
    v22 = v47;
  }
  else
  {
    v54 = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v29 = 0;
    v30 = v6;
    v31 = 0;
    *(_DWORD *)v40 = v6;
    v25 = &v51;
    v51 = 1;
    v7 = lazy protocol witness table accessor for type Data and conformance Data();
    v8 = v29;
    v26 = v7;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v27 = v8;
    v28 = v8;
    if (v8)
    {
      v21 = v28;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v33);
      v22 = v21;
    }
    else
    {
      v9 = v40;
      v10 = v53;
      v11 = *(_QWORD *)(v40 + 8);
      v12 = *(_QWORD *)(v40 + 16);
      *(_QWORD *)(v40 + 8) = v52;
      *(_QWORD *)(v9 + 16) = v10;
      outlined consume of Data._Representation(v11, v12);
      v13 = v27;
      v48 = 2;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v23 = v13;
      v24 = v13;
      if (!v13)
      {
        v14 = v40;
        v15 = v50;
        v16 = *(_QWORD *)(v40 + 24);
        v17 = *(_QWORD *)(v40 + 32);
        *(_QWORD *)(v40 + 24) = v49;
        *(_QWORD *)(v14 + 32) = v15;
        outlined consume of Data._Representation(v16, v17);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v33);
        outlined init with copy of GKCrypto_RSVPResponse(v40, v32);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        return outlined destroy of GKCrypto_RSVPResponse(v40);
      }
      v20 = v24;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v33);
      v22 = v20;
    }
  }
  v19 = v22;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return outlined destroy of GKCrypto_RSVPResponse(v40);
}

uint64_t outlined init with take of GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v4 = *(int *)(type metadata accessor for GKCrypto_RSVPResponse() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t outlined destroy of GKCrypto_RSVPResponse(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v3 = *(int *)(type metadata accessor for GKCrypto_RSVPResponse() + 28);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined init with copy of GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  v8 = *(int *)(type metadata accessor for GKCrypto_RSVPResponse() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v8, a1 + v8);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_RSVPResponse@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GKCrypto_RSVPResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_RSVPResponse(uint64_t a1)
{
  return GKCrypto_RSVPResponse.encode(to:)(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RSVPResponseBlobEnvelope.rsvpResponses.getter()
{
  swift_bridgeObjectRetain();
}

GroupKitCore::RSVPResponseBlobEnvelope __swiftcall RSVPResponseBlobEnvelope.init(rsvpResponses:)(Swift::OpaquePointer rsvpResponses)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined destroy of RSVPResponseBlobEnvelope();
  return (GroupKitCore::RSVPResponseBlobEnvelope)rsvpResponses._rawValue;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of RSVPResponseBlobEnvelope()
{
  swift_bridgeObjectRelease();
}

uint64_t static RSVPResponseBlobEnvelope.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t RSVPResponseBlobEnvelope.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL RSVPResponseBlobEnvelope.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponses", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t RSVPResponseBlobEnvelope.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t RSVPResponseBlobEnvelope.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope.CodingKeys, &type metadata for RSVPResponseBlobEnvelope.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope.CodingKeys, &type metadata for RSVPResponseBlobEnvelope.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope.CodingKeys, &type metadata for RSVPResponseBlobEnvelope.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope.CodingKeys, &type metadata for RSVPResponseBlobEnvelope.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope.CodingKeys, &type metadata for RSVPResponseBlobEnvelope.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPResponseBlobEnvelope.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RSVPResponseBlobEnvelope.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponses", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  return static RSVPResponseBlobEnvelope.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  return RSVPResponseBlobEnvelope.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  return RSVPResponseBlobEnvelope.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPResponseBlobEnvelope.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  return RSVPResponseBlobEnvelope.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance RSVPResponseBlobEnvelope.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = RSVPResponseBlobEnvelope.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  return RSVPResponseBlobEnvelope.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPResponseBlobEnvelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPResponseBlobEnvelope.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPResponseBlobEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPResponseBlobEnvelope.encode(to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v13 = a2;
  v22 = 0;
  v21 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPResponseBlobEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v6 - v9;
  v22 = v2;
  v21 = v3;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v17 = &v20;
  v20 = v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_RSVPResponse]);
  lazy protocol witness table accessor for type [GKCrypto_RSVPResponse] and conformance <A> [A]();
  v4 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v4;
  v19 = v4;
  if (v4)
    v6 = v19;
  outlined destroy of [GKCrypto_RSVPResponse]();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_RSVPResponse] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_RSVPResponse]);
    v4 = lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_RSVPResponse]);
    v4 = lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_RSVPResponse] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse)
  {
    v0 = type metadata accessor for GKCrypto_RSVPResponse();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPResponse, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GKCrypto_RSVPResponse]()
{
  swift_bridgeObjectRelease();
}

uint64_t RSVPResponseBlobEnvelope.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v14 = a1;
  v25 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPResponseBlobEnvelope.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v5 - v17;
  v25 = v1;
  v20 = v1[3];
  v21 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v20);
  lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
  v2 = v19;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v22 = v2;
  v23 = v2;
  if (v2)
  {
    v7 = v23;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_RSVPResponse]);
    lazy protocol witness table accessor for type [GKCrypto_RSVPResponse] and conformance <A> [A]();
    v3 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v24;
      swift_bridgeObjectRetain();
      v8 = &v26;
      v26 = v9;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      __swift_destroy_boxed_opaque_existential_1(v14);
      outlined destroy of RSVPResponseBlobEnvelope();
      return v9;
    }
    v6 = v13;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v7 = v6;
  }
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v10;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPResponseBlobEnvelope@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = RSVPResponseBlobEnvelope.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPResponseBlobEnvelope(uint64_t a1)
{
  uint64_t *v1;

  return RSVPResponseBlobEnvelope.encode(to:)(a1, *v1);
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "rsvp";
  *(_QWORD *)(v3 + 32) = 4;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "signature";
  *(_QWORD *)(v3 + 56) = 9;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_SignedRSVP.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvp", 4uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_SignedRSVP.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_SignedRSVP.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_SignedRSVP.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_SignedRSVP.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_SignedRSVP.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_SignedRSVP.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  char *v0;

  return GKCrypto_SignedRSVP.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_SignedRSVP.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_SignedRSVP.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  return GKCrypto_SignedRSVP.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_SignedRSVP.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_SignedRSVP.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SignedRSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_SignedRSVP.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];
  _BYTE v35[2];
  uint64_t v36;
  _QWORD *v37;
  char *v38;

  v22 = a1;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v19 = type metadata accessor for GKCrypto_RSVP();
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)v7 - v20;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_SignedRSVP.CodingKeys>);
  v23 = *(_QWORD *)(v29 - 8);
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)v7 - v24;
  v38 = (char *)v7 - v24;
  v37 = v2;
  v36 = v1;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v30;
  v35[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v31 = v3;
  v32 = v3;
  if (v3)
  {
    v8 = v32;
    result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    v9 = v8;
  }
  else
  {
    GKCrypto_SignedRSVP.rsvp.getter(v21);
    v16 = v35;
    v35[0] = 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
    v4 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v4;
    v18 = v4;
    if (v4)
    {
      v7[1] = v18;
      outlined destroy of GKCrypto_RSVP(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    }
    else
    {
      outlined destroy of GKCrypto_RSVP(v21);
      v10 = *(_QWORD *)(v28 + 8);
      v11 = *(_QWORD *)(v28 + 16);
      outlined copy of Data._Representation(v10, v11);
      v13 = v34;
      v34[0] = v10;
      v34[1] = v11;
      v12 = &v33;
      v33 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      v5 = v17;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v14 = v5;
      v15 = v5;
      if (v5)
        v7[0] = v15;
      outlined destroy of Data((uint64_t)v34);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v29);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP.CodingKeys, &type metadata for GKCrypto_SignedRSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP.CodingKeys, &type metadata for GKCrypto_SignedRSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP.CodingKeys, &type metadata for GKCrypto_SignedRSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP.CodingKeys, &type metadata for GKCrypto_SignedRSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP.CodingKeys, &type metadata for GKCrypto_SignedRSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP)
  {
    v0 = type metadata accessor for GKCrypto_RSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP and conformance GKCrypto_RSVP);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of GKCrypto_RSVP(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v3 = *(int *)(type metadata accessor for GKCrypto_RSVP() + 36);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t GKCrypto_SignedRSVP.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[2];
  uint64_t v51;
  char *v52;
  char *v53;

  v27 = a2;
  v40 = a1;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v31 = 0;
  v28 = type metadata accessor for GKCrypto_RSVP();
  v29 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (uint64_t)v14 - v29;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_SignedRSVP.CodingKeys>);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v41 = (char *)v14 - v34;
  v53 = (char *)v14 - v34;
  v36 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_SignedRSVP() - 8) + 64);
  v35 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v38 = (uint64_t)v14 - v35;
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v39 = (uint64_t)v14 - v37;
  v52 = (char *)v14 - v37;
  v51 = v3;
  GKCrypto_SignedRSVP.init()(v4);
  outlined init with take of GKCrypto_SignedRSVP(v38, v39);
  v43 = v40[3];
  v44 = v40[4];
  __swift_project_boxed_opaque_existential_1(v40, v43);
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
  v5 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v45 = v5;
  v46 = v5;
  if (v5)
  {
    v17 = v46;
  }
  else
  {
    v50[1] = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v24 = 0;
    v25 = v6;
    v26 = 0;
    *(_DWORD *)v39 = v6;
    v21 = v50;
    v50[0] = 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
    v7 = v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v22 = v7;
    v23 = v7;
    if (v7)
    {
      v16 = v23;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v32);
      v17 = v16;
    }
    else
    {
      GKCrypto_SignedRSVP.rsvp.setter(v30);
      v18 = &v47;
      v47 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v22;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v19 = v8;
      v20 = v8;
      if (!v8)
      {
        v9 = v39;
        v10 = v49;
        v11 = *(_QWORD *)(v39 + 8);
        v12 = *(_QWORD *)(v39 + 16);
        *(_QWORD *)(v39 + 8) = v48;
        *(_QWORD *)(v9 + 16) = v10;
        outlined consume of Data._Representation(v11, v12);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v32);
        outlined init with copy of GKCrypto_SignedRSVP(v39, v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
        return outlined destroy of GKCrypto_SignedRSVP(v39);
      }
      v15 = v20;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v32);
      v17 = v15;
    }
  }
  v14[1] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  return outlined destroy of GKCrypto_SignedRSVP(v39);
}

uint64_t outlined init with take of GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v9 = type metadata accessor for GKCrypto_SignedRSVP();
  v5 = *(int *)(v9 + 24);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a2 + v5, a1 + v5);
  v10 = *(int *)(v9 + 28);
  v12 = type metadata accessor for GKCrypto_RSVP();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(a1 + v10, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a2 + v10), (const void *)(a1 + v10), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = a2 + v10;
    *(_DWORD *)v4 = *(_DWORD *)(a1 + v10);
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + v10 + 8);
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(a1 + v10 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + v10 + 24);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + v10 + 40);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a1 + v10 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t))v8)(a2 + v10 + *(int *)(v12 + 36), a1 + v10 + *(int *)(v12 + 36), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2 + v10, 0, 1, v12);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_SignedRSVP(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v6 = type metadata accessor for GKCrypto_SignedRSVP();
  v3 = *(int *)(v6 + 24);
  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1 + v3);
  v7 = *(int *)(v6 + 28);
  v9 = type metadata accessor for GKCrypto_RSVP();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + v7, 1))
  {
    v2 = a1 + v7;
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a1 + v7 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    ((void (*)(uint64_t, uint64_t))v5)(a1 + v7 + *(int *)(v9 + 36), v4);
  }
  return a1;
}

uint64_t outlined init with copy of GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v12;
  v17 = type metadata accessor for GKCrypto_SignedRSVP();
  v13 = *(int *)(v17 + 24);
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(a2 + v13, a1 + v13);
  v18 = *(int *)(v17 + 28);
  v20 = type metadata accessor for GKCrypto_RSVP();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v21 + 48))(a1 + v18, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a2 + v18), (const void *)(a1 + v18), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v10 = a2 + v18;
    *(_DWORD *)v10 = *(_DWORD *)(a1 + v18);
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(a1 + v18 + 8);
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(a1 + v18 + 16);
    v4 = *(_QWORD *)(a1 + v18 + 24);
    v5 = *(_QWORD *)(a1 + v18 + 32);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(v10 + 24) = v4;
    *(_QWORD *)(v10 + 32) = v5;
    v6 = *(_QWORD *)(a1 + v18 + 40);
    v7 = *(_QWORD *)(a1 + v18 + 48);
    outlined copy of Data._Representation(v6, v7);
    *(_QWORD *)(v10 + 40) = v6;
    *(_QWORD *)(v10 + 48) = v7;
    v8 = *(_QWORD *)(a1 + v18 + 56);
    v9 = *(_QWORD *)(a1 + v18 + 64);
    outlined copy of Data._Representation(v8, v9);
    *(_QWORD *)(v10 + 56) = v8;
    *(_QWORD *)(v10 + 64) = v9;
    ((void (*)(uint64_t, uint64_t, uint64_t))v16)(a2 + v18 + *(int *)(v20 + 36), a1 + v18 + *(int *)(v20 + 36), v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(a2 + v18, 0, 1, v20);
  }
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_SignedRSVP@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GKCrypto_SignedRSVP.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_SignedRSVP(uint64_t a1)
{
  return GKCrypto_SignedRSVP.encode(to:)(a1);
}

uint64_t GKCrypto_RSVP.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "response";
  *(_QWORD *)(v3 + 32) = 8;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "nonceHint";
  *(_QWORD *)(v3 + 56) = 9;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "groupIdHint";
  *(_QWORD *)(v3 + 80) = 11;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "verificationKey";
  *(_QWORD *)(v3 + 104) = 15;
  *(_BYTE *)(v3 + 112) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_12:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_12;
    case 2:
      v8 = 2;
      goto LABEL_12;
    case 3:
      v8 = 3;
      goto LABEL_12;
    case 4:
      v8 = 4;
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t GKCrypto_RSVP.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_RSVP.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 5)
    return 5;
  else
    return v6;
}

uint64_t GKCrypto_RSVP.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t GKCrypto_RSVP.CodingKeys.intValue.getter()
{
  return 0;
}

void GKCrypto_RSVP.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3B579C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

void GKCrypto_RSVP.CodingKeys.stringValue.getter(char a1)
{
  GKCrypto_RSVP.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_RSVP.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVP.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_RSVP.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GKCrypto_RSVP.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_RSVP.CodingKeys()
{
  char *v0;

  GKCrypto_RSVP.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_RSVP.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVP.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_RSVP.CodingKeys()
{
  return GKCrypto_RSVP.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_RSVP.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_RSVP.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_RSVP.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_RSVP.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[2];
  char v49;
  _QWORD v50[2];
  char v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;

  v36 = a1;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_RSVP.CodingKeys>);
  v37 = *(_QWORD *)(v43 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v41 = (char *)v12 - v38;
  v59 = (char *)v12 - v38;
  v58 = v2;
  v57 = v1;
  v39 = v2[3];
  v40 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v39);
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v44;
  v56 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v45 = v3;
  v46 = v3;
  if (v3)
  {
    v15 = v46;
    result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v41, v43);
    v16 = v15;
  }
  else
  {
    v4 = *(_QWORD *)(v42 + 8);
    v5 = *(_BYTE *)(v42 + 16);
    v33 = &v54;
    v54 = v4;
    v55 = v5 & 1;
    v32 = &v53;
    v53 = 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
    v6 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v34 = v6;
    v35 = v6;
    if (v6)
    {
      v14 = v35;
      result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v41, v43);
      v16 = v14;
    }
    else
    {
      v25 = *(_QWORD *)(v42 + 24);
      v26 = *(_QWORD *)(v42 + 32);
      outlined copy of Data._Representation(v25, v26);
      v28 = v52;
      v52[0] = v25;
      v52[1] = v26;
      v27 = &v51;
      v51 = 2;
      v7 = lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v34;
      v29 = v7;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v30 = v8;
      v31 = v8;
      if (v8)
      {
        v13 = v31;
        outlined destroy of Data((uint64_t)v52);
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v41, v43);
        v16 = v13;
      }
      else
      {
        outlined destroy of Data((uint64_t)v52);
        v21 = *(_QWORD *)(v42 + 40);
        v22 = *(_QWORD *)(v42 + 48);
        outlined copy of Data._Representation(v21, v22);
        v9 = v30;
        v50[0] = v21;
        v50[1] = v22;
        v49 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v23 = v9;
        v24 = v9;
        if (v9)
        {
          v12[2] = v24;
          outlined destroy of Data((uint64_t)v50);
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v41, v43);
        }
        else
        {
          outlined destroy of Data((uint64_t)v50);
          v17 = *(_QWORD *)(v42 + 56);
          v18 = *(_QWORD *)(v42 + 64);
          outlined copy of Data._Representation(v17, v18);
          v10 = v23;
          v48[0] = v17;
          v48[1] = v18;
          v47 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v19 = v10;
          v20 = v10;
          if (v10)
            v12[1] = v20;
          outlined destroy of Data((uint64_t)v48);
          return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v41, v43);
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.CodingKeys, &type metadata for GKCrypto_RSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.CodingKeys, &type metadata for GKCrypto_RSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.CodingKeys, &type metadata for GKCrypto_RSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.CodingKeys, &type metadata for GKCrypto_RSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.CodingKeys, &type metadata for GKCrypto_RSVP.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVP.Response, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response);
    return v0;
  }
  return v2;
}

uint64_t GKCrypto_RSVP.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;

  v47 = a2;
  v56 = a1;
  v78 = 0;
  v77 = 0;
  v76 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_RSVP.CodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v57 = (char *)&v27 - v50;
  v78 = (char *)&v27 - v50;
  v52 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_RSVP() - 8) + 64);
  v51 = (v52 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v54 = (uint64_t)&v27 - v51;
  v53 = (v52 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v55 = (uint64_t)&v27 - v53;
  v77 = (char *)&v27 - v53;
  v76 = v3;
  GKCrypto_RSVP.init()(v4);
  outlined init with take of GKCrypto_RSVP(v54, v55);
  v59 = v56[3];
  v60 = v56[4];
  __swift_project_boxed_opaque_existential_1(v56, v59);
  lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
  v5 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v61 = v5;
  v62 = v5;
  if (v5)
  {
    v32 = v62;
  }
  else
  {
    v75 = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v44 = 0;
    v45 = v6;
    v46 = 0;
    *(_DWORD *)v55 = v6;
    v41 = &v72;
    v72 = 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
    v7 = v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = v7;
    v43 = v7;
    if (v7)
    {
      v31 = v43;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v48);
      v32 = v31;
    }
    else
    {
      v8 = v55;
      v9 = v74;
      *(_QWORD *)(v55 + 8) = v73;
      *(_BYTE *)(v8 + 16) = v9 & 1;
      v37 = &v69;
      v69 = 2;
      v10 = lazy protocol witness table accessor for type Data and conformance Data();
      v11 = v42;
      v38 = v10;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v39 = v11;
      v40 = v11;
      if (v11)
      {
        v30 = v40;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v48);
        v32 = v30;
      }
      else
      {
        v12 = v55;
        v13 = v71;
        v14 = *(_QWORD *)(v55 + 24);
        v15 = *(_QWORD *)(v55 + 32);
        *(_QWORD *)(v55 + 24) = v70;
        *(_QWORD *)(v12 + 32) = v13;
        outlined consume of Data._Representation(v14, v15);
        v16 = v39;
        v66 = 3;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v35 = v16;
        v36 = v16;
        if (v16)
        {
          v29 = v36;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v48);
          v32 = v29;
        }
        else
        {
          v17 = v55;
          v18 = v68;
          v19 = *(_QWORD *)(v55 + 40);
          v20 = *(_QWORD *)(v55 + 48);
          *(_QWORD *)(v55 + 40) = v67;
          *(_QWORD *)(v17 + 48) = v18;
          outlined consume of Data._Representation(v19, v20);
          v21 = v35;
          v63 = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v33 = v21;
          v34 = v21;
          if (!v21)
          {
            v22 = v55;
            v23 = v65;
            v24 = *(_QWORD *)(v55 + 56);
            v25 = *(_QWORD *)(v55 + 64);
            *(_QWORD *)(v55 + 56) = v64;
            *(_QWORD *)(v22 + 64) = v23;
            outlined consume of Data._Representation(v24, v25);
            (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v48);
            outlined init with copy of GKCrypto_RSVP(v55, v47);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
            return outlined destroy of GKCrypto_RSVP(v55);
          }
          v28 = v34;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v57, v48);
          v32 = v28;
        }
      }
    }
  }
  v27 = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return outlined destroy of GKCrypto_RSVP(v55);
}

uint64_t outlined init with take of GKCrypto_RSVP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  v4 = *(int *)(type metadata accessor for GKCrypto_RSVP() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t outlined init with copy of GKCrypto_RSVP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v9;
  v10 = *(int *)(type metadata accessor for GKCrypto_RSVP() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v10, a1 + v10);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_RSVP@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GKCrypto_RSVP.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_RSVP(uint64_t a1)
{
  return GKCrypto_RSVP.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GKCrypto_SeedBlob.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "ciphertext";
  *(_QWORD *)(v3 + 32) = 10;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "signature";
  *(_QWORD *)(v3 + 56) = 9;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "keyHint";
  *(_QWORD *)(v3 + 80) = 7;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "seedVersion";
  *(_QWORD *)(v3 + 104) = 11;
  *(_BYTE *)(v3 + 112) = 2;
  *(_QWORD *)(v3 + 120) = "role";
  *(_QWORD *)(v3 + 128) = 4;
  *(_BYTE *)(v3 + 136) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_14:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_14;
    case 2:
      v8 = 2;
      goto LABEL_14;
    case 3:
      v8 = 3;
      goto LABEL_14;
    case 4:
      v8 = 4;
      goto LABEL_14;
    case 5:
      v8 = 5;
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t GKCrypto_SeedBlob.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_SeedBlob.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 6)
    return 6;
  else
    return v6;
}

uint64_t GKCrypto_SeedBlob.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t GKCrypto_SeedBlob.CodingKeys.intValue.getter()
{
  return 0;
}

void GKCrypto_SeedBlob.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3B6CF8()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

void GKCrypto_SeedBlob.CodingKeys.stringValue.getter(char a1)
{
  GKCrypto_SeedBlob.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_SeedBlob.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_SeedBlob.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_SeedBlob.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GKCrypto_SeedBlob.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_SeedBlob.CodingKeys()
{
  char *v0;

  GKCrypto_SeedBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_SeedBlob.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_SeedBlob.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_SeedBlob.CodingKeys()
{
  return GKCrypto_SeedBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_SeedBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_SeedBlob.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_SeedBlob.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  _QWORD v56[2];
  char v57;
  _QWORD v58[2];
  char v59;
  _QWORD v60[2];
  char v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;

  v40 = a1;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_SeedBlob.CodingKeys>);
  v41 = *(_QWORD *)(v47 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)v13 - v42;
  v64 = (char *)v13 - v42;
  v63 = v2;
  v62 = v1;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v48;
  v61 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v49 = v3;
  v50 = v3;
  if (v3)
  {
    v17 = v50;
    result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
    v18 = v17;
  }
  else
  {
    v33 = *(_QWORD *)(v46 + 8);
    v34 = *(_QWORD *)(v46 + 16);
    outlined copy of Data._Representation(v33, v34);
    v36 = v60;
    v60[0] = v33;
    v60[1] = v34;
    v35 = &v59;
    v59 = 1;
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v5 = v49;
    v37 = v4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v38 = v5;
    v39 = v5;
    if (v5)
    {
      v16 = v39;
      outlined destroy of Data((uint64_t)v60);
      result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
      v18 = v16;
    }
    else
    {
      outlined destroy of Data((uint64_t)v60);
      v29 = *(_QWORD *)(v46 + 24);
      v30 = *(_QWORD *)(v46 + 32);
      outlined copy of Data._Representation(v29, v30);
      v6 = v38;
      v58[0] = v29;
      v58[1] = v30;
      v57 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v31 = v6;
      v32 = v6;
      if (v6)
      {
        v15 = v32;
        outlined destroy of Data((uint64_t)v58);
        result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
        v18 = v15;
      }
      else
      {
        outlined destroy of Data((uint64_t)v58);
        v25 = *(_QWORD *)(v46 + 40);
        v26 = *(_QWORD *)(v46 + 48);
        outlined copy of Data._Representation(v25, v26);
        v7 = v31;
        v56[0] = v25;
        v56[1] = v26;
        v55 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v27 = v7;
        v28 = v7;
        if (v7)
        {
          v14 = v28;
          outlined destroy of Data((uint64_t)v56);
          result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          v18 = v14;
        }
        else
        {
          outlined destroy of Data((uint64_t)v56);
          v8 = v27;
          v54 = 4;
          KeyedEncodingContainer.encode(_:forKey:)();
          v23 = v8;
          v24 = v8;
          if (v8)
          {
            v13[1] = v24;
            return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          }
          else
          {
            v9 = *(_QWORD *)(v46 + 64);
            v10 = *(_BYTE *)(v46 + 72);
            v20 = &v52;
            v52 = v9;
            v53 = v10 & 1;
            v19 = &v51;
            v51 = 5;
            lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
            v11 = v23;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v21 = v11;
            v22 = v11;
            if (v11)
              v13[0] = v22;
            return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob.CodingKeys, &type metadata for GKCrypto_SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob.CodingKeys, &type metadata for GKCrypto_SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob.CodingKeys, &type metadata for GKCrypto_SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob.CodingKeys, &type metadata for GKCrypto_SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob.CodingKeys, &type metadata for GKCrypto_SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role, &type metadata for GKCrypto_Role);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role and conformance GKCrypto_Role);
    return v0;
  }
  return v2;
}

uint64_t GKCrypto_SeedBlob.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char *v87;
  char *v88;

  v56 = a2;
  v65 = a1;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_SeedBlob.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v57);
  v66 = (char *)&v32 - v59;
  v88 = (char *)&v32 - v59;
  v61 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_SeedBlob() - 8) + 64);
  v60 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v63 = (uint64_t)&v32 - v60;
  v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v64 = (uint64_t)&v32 - v62;
  v87 = (char *)&v32 - v62;
  v86 = v3;
  GKCrypto_SeedBlob.init()(v4);
  outlined init with take of GKCrypto_SeedBlob(v63, v64);
  v68 = v65[3];
  v69 = v65[4];
  __swift_project_boxed_opaque_existential_1(v65, v68);
  lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
  v5 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v70 = v5;
  v71 = v5;
  if (v5)
  {
    v38 = v71;
  }
  else
  {
    v85 = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v53 = 0;
    v54 = v6;
    v55 = 0;
    *(_DWORD *)v64 = v6;
    v49 = &v82;
    v82 = 1;
    v7 = lazy protocol witness table accessor for type Data and conformance Data();
    v8 = v53;
    v50 = v7;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v51 = v8;
    v52 = v8;
    if (v8)
    {
      v37 = v52;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
      v38 = v37;
    }
    else
    {
      v9 = v64;
      v10 = v84;
      v11 = *(_QWORD *)(v64 + 8);
      v12 = *(_QWORD *)(v64 + 16);
      *(_QWORD *)(v64 + 8) = v83;
      *(_QWORD *)(v9 + 16) = v10;
      outlined consume of Data._Representation(v11, v12);
      v13 = v51;
      v79 = 2;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v47 = v13;
      v48 = v13;
      if (v13)
      {
        v36 = v48;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
        v38 = v36;
      }
      else
      {
        v14 = v64;
        v15 = v81;
        v16 = *(_QWORD *)(v64 + 24);
        v17 = *(_QWORD *)(v64 + 32);
        *(_QWORD *)(v64 + 24) = v80;
        *(_QWORD *)(v14 + 32) = v15;
        outlined consume of Data._Representation(v16, v17);
        v18 = v47;
        v76 = 3;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v45 = v18;
        v46 = v18;
        if (v18)
        {
          v35 = v46;
          (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
          v38 = v35;
        }
        else
        {
          v19 = v64;
          v20 = v78;
          v21 = *(_QWORD *)(v64 + 40);
          v22 = *(_QWORD *)(v64 + 48);
          *(_QWORD *)(v64 + 40) = v77;
          *(_QWORD *)(v19 + 48) = v20;
          outlined consume of Data._Representation(v21, v22);
          v23 = v45;
          v75 = 4;
          v24 = KeyedDecodingContainer.decode(_:forKey:)();
          v42 = v23;
          v43 = v24;
          v44 = v23;
          if (v23)
          {
            v34 = v44;
            (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
            v38 = v34;
          }
          else
          {
            *(_DWORD *)(v64 + 56) = v43;
            v39 = &v72;
            v72 = 5;
            lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
            v25 = v42;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v40 = v25;
            v41 = v25;
            if (!v25)
            {
              v26 = v64;
              v27 = v57;
              v28 = v66;
              v29 = v58;
              v30 = v74;
              *(_QWORD *)(v64 + 64) = v73;
              *(_BYTE *)(v26 + 72) = v30 & 1;
              (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v27);
              outlined init with copy of GKCrypto_SeedBlob(v64, v56);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
              return outlined destroy of GKCrypto_SeedBlob(v64);
            }
            v33 = v41;
            (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v57);
            v38 = v33;
          }
        }
      }
    }
  }
  v32 = v38;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  return outlined destroy of GKCrypto_SeedBlob(v64);
}

uint64_t outlined init with take of GKCrypto_SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  v4 = *(int *)(type metadata accessor for GKCrypto_SeedBlob() + 40);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t outlined destroy of GKCrypto_SeedBlob(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v3 = *(int *)(type metadata accessor for GKCrypto_SeedBlob() + 40);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined init with copy of GKCrypto_SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v9;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  v10 = *(int *)(type metadata accessor for GKCrypto_SeedBlob() + 40);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v10, a1 + v10);
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_SeedBlob@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GKCrypto_SeedBlob.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_SeedBlob(uint64_t a1)
{
  return GKCrypto_SeedBlob.encode(to:)(a1);
}

uint64_t GKCrypto_Role.ServerValue.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  char v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "Administrator";
  *(_QWORD *)(v3 + 8) = 13;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "Member";
  *(_QWORD *)(v3 + 32) = 6;
  *(_BYTE *)(v3 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  if (v7 == 1)
  {
    v8 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GKCrypto_Role.ServerValue.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Administrator", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_Role.ServerValue@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_Role.ServerValue.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_Role.ServerValue@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_Role.ServerValue.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_Role.ServerValue()
{
  lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GKCrypto_Role.encode(to:)(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[5];
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t countAndFlagsBits;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;

  v40 = a2;
  v44 = a3;
  v47 = 0;
  v53 = a1;
  v51 = a2;
  v52 = a3 & 1;
  v43 = a1[3];
  v42 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v43);
  dispatch thunk of Encoder.singleValueContainer()();
  if ((v44 & 1) == 0)
  {
    v39 = v40;
    v11[4] = v40;
    v47 = v40;
    v19 = 0;
    v24 = type metadata accessor for EncodingError();
    v17 = 1;
    v26 = swift_allocError();
    v23 = v3;
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v5 = v40;
    v6 = v23;
    v18 = (char *)v23 + *(int *)(v4 + 48);
    v23[3] = MEMORY[0x24BEE1768];
    *v6 = v5;
    v25 = &v48;
    v15 = v49;
    v13 = v50;
    __swift_project_boxed_opaque_existential_1(&v48, v49);
    v14 = *(_QWORD *)(v15 - 8);
    v7 = *(_QWORD *)(v14 + 64);
    v22 = v11;
    v12 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
    v8 = MEMORY[0x24BDAC7A8](v11);
    v16 = (char *)v11 - v12;
    (*(void (**)(char *, double))(v9 + 16))((char *)v11 - v12, v8);
    v20 = MEMORY[0x2426350B4](v15, v13);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v15);
    countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid value for GKCrypto_Role", 0x1FuLL, v17 & 1)._countAndFlagsBits;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v24 - 8) + 104))(v23, *MEMORY[0x24BEE2728]);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    result = v26;
    v27 = v26;
    return result;
  }
  if (v40)
  {
    v36 = &v45;
    v45 = 0;
    v34 = v49;
    v35 = v50;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v48, v49);
    lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    v37 = v41;
    v38 = v41;
    if (!v41)
    {
      v33 = v37;
LABEL_9:
      v11[3] = v33;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    v27 = v38;
  }
  else
  {
    v30 = &v46;
    v46 = 1;
    v28 = v49;
    v29 = v50;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v48, v49);
    lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    v31 = v41;
    v32 = v41;
    if (!v41)
    {
      v33 = 0;
      goto LABEL_9;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role.ServerValue, &type metadata for GKCrypto_Role.ServerValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role.ServerValue, &type metadata for GKCrypto_Role.ServerValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role.ServerValue, &type metadata for GKCrypto_Role.ServerValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue;
  if (!lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Role.ServerValue, &type metadata for GKCrypto_Role.ServerValue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue);
    return v0;
  }
  return v2;
}

BOOL GKCrypto_Role.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v5;
  char v6;
  _QWORD v7[6];
  _BOOL8 v8;
  char v9;

  v7[5] = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v5)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v2;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v8 = (v6 & 1) == 0;
    v9 = 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    v3 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v3;
  }
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupHandle.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupHandle.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupHandle.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse.CodingKeys and conformance GKCrypto_RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SignedRSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SignedRSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_SignedRSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP.CodingKeys and conformance GKCrypto_SignedRSVP.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_RSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_RSVP.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.CodingKeys and conformance GKCrypto_RSVP.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GKCrypto_SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob.CodingKeys and conformance GKCrypto_SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_Role.ServerValue()
{
  return lazy protocol witness table accessor for type GKCrypto_Role.ServerValue and conformance GKCrypto_Role.ServerValue();
}

BOOL protocol witness for Decodable.init(from:) in conformance GKCrypto_Role@<W0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BOOL8 result;
  char v4;

  result = GKCrypto_Role.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v4 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_Role(_QWORD *a1)
{
  uint64_t v1;

  return GKCrypto_Role.encode(to:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8) & 1);
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupBlob.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupBlob.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupBlob.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupBlob.CodingKeys()
{
  return &type metadata for GKCrypto_GroupBlob.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupHandle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupHandle.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupHandle.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupHandle.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupHandle.CodingKeys()
{
  return &type metadata for GKCrypto_GroupHandle.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  return &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  return &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  return &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys()
{
  return &type metadata for GKCrypto_GroupBlob.GroupBlobSignatures.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVPResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_RSVPResponse.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_RSVPResponse.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_RSVPResponse.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_RSVPResponse.CodingKeys()
{
  return &type metadata for GKCrypto_RSVPResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for RSVPResponseBlobEnvelope()
{
  return &type metadata for RSVPResponseBlobEnvelope;
}

uint64_t getEnumTagSinglePayload for RSVPResponseBlobEnvelope.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPResponseBlobEnvelope.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for RSVPResponseBlobEnvelope.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for RSVPResponseBlobEnvelope.CodingKeys()
{
  return &type metadata for RSVPResponseBlobEnvelope.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SignedRSVP.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_SignedRSVP.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_SignedRSVP.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_SignedRSVP.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_SignedRSVP.CodingKeys()
{
  return &type metadata for GKCrypto_SignedRSVP.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVP.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_RSVP.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_RSVP.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_RSVP.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_RSVP.CodingKeys()
{
  return &type metadata for GKCrypto_RSVP.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SeedBlob.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_SeedBlob.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_SeedBlob.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_SeedBlob.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_SeedBlob.CodingKeys()
{
  return &type metadata for GKCrypto_SeedBlob.CodingKeys;
}

uint64_t getEnumTagSinglePayload for GKCrypto_Role.ServerValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GKCrypto_Role.ServerValue(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_Role.ServerValue(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GKCrypto_Role.ServerValue(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_Role.ServerValue()
{
  return &type metadata for GKCrypto_Role.ServerValue;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPResponseBlobEnvelope.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPResponseBlobEnvelope.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPResponseBlobEnvelope.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseBlobEnvelope.CodingKeys and conformance RSVPResponseBlobEnvelope.CodingKeys();
}

uint64_t DaemonService.__allocating_init(client:builder:groupManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return DaemonService.init(client:builder:groupManager:)(a1, a2, a3);
}

uint64_t DaemonService.init(client:builder:groupManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v8;
  _BYTE v9[40];
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  v12 = a2;
  v11 = a3;
  v10 = v3;
  outlined init with copy of Client(a1, (uint64_t)v9);
  outlined init with take of Client(v9, v3 + 2);
  swift_retain();
  v3[7] = a2;
  swift_retain();
  v3[9] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageDispatcher<Data, Data>);
  type metadata accessor for XPCEncoder();
  XPCEncoder.__allocating_init()();
  type metadata accessor for XPCDecoder();
  XPCDecoder.__allocating_init()();
  *(_QWORD *)(v8 + 64) = MessageDispatcher.__allocating_init<A, B>(encoder:decoder:)();
  DaemonService.registerGroupOperations()();
  DaemonService.registerInvitationOperations()();
  DaemonService.registerUserOperations()();
  DaemonService.registerCryptoOperations()();
  DaemonService.registerGroupKeysOperations()();
  DaemonService.registerAccountOperations()();
  DaemonService.registerCLIOperations()();
  DaemonService.registerEventOperations()();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t DaemonService.registerGroupOperations()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t GroupsXPCMessage;
  uint64_t GroupXPCMessage;
  uint64_t updated;
  uint64_t v10;
  uint64_t v11;
  uint64_t refreshed;

  GroupsXPCMessage = type metadata accessor for FetchGroupsXPCMessage();
  v0 = lazy protocol witness table accessor for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(GroupsXPCMessage, (uint64_t)&async function pointer to closure #1 in DaemonService.registerGroupOperations(), 0, GroupsXPCMessage, v0);
  GroupXPCMessage = type metadata accessor for CreateGroupXPCMessage();
  v1 = lazy protocol witness table accessor for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(GroupXPCMessage, (uint64_t)&async function pointer to closure #2 in DaemonService.registerGroupOperations(), 0, GroupXPCMessage, v1);
  updated = type metadata accessor for UpdateGroupXPCMessage();
  v2 = lazy protocol witness table accessor for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(updated, (uint64_t)&async function pointer to closure #3 in DaemonService.registerGroupOperations(), 0, updated, v2);
  v10 = type metadata accessor for MembershipXPCMessage();
  v3 = lazy protocol witness table accessor for type MembershipXPCMessage and conformance MembershipXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(v10, (uint64_t)&async function pointer to closure #4 in DaemonService.registerGroupOperations(), 0, v10, v3);
  v11 = type metadata accessor for DeleteGroupXPCMessage();
  v4 = lazy protocol witness table accessor for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(v11, (uint64_t)&async function pointer to closure #5 in DaemonService.registerGroupOperations(), 0, v11, v4);
  refreshed = type metadata accessor for GroupRefreshMessage();
  v5 = lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage();
  return DaemonService.registerHandler<A>(for:_:)(refreshed, (uint64_t)&async function pointer to closure #6 in DaemonService.registerGroupOperations(), 0, refreshed, v5);
}

uint64_t DaemonService.registerInvitationOperations()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for RSVPXPCMessage();
  v0 = lazy protocol witness table accessor for type RSVPXPCMessage and conformance RSVPXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(v3, (uint64_t)&async function pointer to closure #1 in DaemonService.registerInvitationOperations(), 0, v3, v0);
  v4 = type metadata accessor for DeleteInvitation();
  v1 = lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation();
  return DaemonService.registerHandler<A>(for:_:)(v4, (uint64_t)&async function pointer to closure #2 in DaemonService.registerInvitationOperations(), 0, v4, v1);
}

uint64_t DaemonService.registerUserOperations()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AllUsersMessage;

  v6 = type metadata accessor for RegisterSelfMessage();
  v0 = lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage();
  DaemonService.registerHandler<A>(for:_:)(v6, (uint64_t)&async function pointer to closure #1 in DaemonService.registerUserOperations(), 0, v6, v0);
  v7 = type metadata accessor for KeyDistributionRequestMessage();
  v1 = lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage();
  DaemonService.registerHandler<A>(for:_:)(v7, (uint64_t)&async function pointer to closure #2 in DaemonService.registerUserOperations(), 0, v7, v1);
  v8 = type metadata accessor for CheckKeyRegistrationMessage();
  v2 = lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage();
  DaemonService.registerHandler<A>(for:_:)(v8, (uint64_t)&async function pointer to closure #3 in DaemonService.registerUserOperations(), 0, v8, v2);
  v9 = type metadata accessor for CheckAvailabilityMessage();
  v3 = lazy protocol witness table accessor for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage();
  DaemonService.registerHandler<A>(for:_:)(v9, (uint64_t)&async function pointer to closure #4 in DaemonService.registerUserOperations(), 0, v9, v3);
  AllUsersMessage = type metadata accessor for FetchAllUsersMessage();
  v4 = lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage();
  return DaemonService.registerHandler<A>(for:_:)(AllUsersMessage, (uint64_t)&async function pointer to closure #5 in DaemonService.registerUserOperations(), 0, AllUsersMessage, v4);
}

uint64_t DaemonService.registerGroupKeysOperations()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t MemberKeyXPCMessage;
  uint64_t GroupKeyXPCMessage;

  MemberKeyXPCMessage = type metadata accessor for FetchMemberKeyXPCMessage();
  v0 = lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(MemberKeyXPCMessage, (uint64_t)&async function pointer to closure #1 in DaemonService.registerGroupKeysOperations(), 0, MemberKeyXPCMessage, v0);
  GroupKeyXPCMessage = type metadata accessor for FetchGroupKeyXPCMessage();
  v1 = lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage();
  return DaemonService.registerHandler<A>(for:_:)(GroupKeyXPCMessage, (uint64_t)&async function pointer to closure #2 in DaemonService.registerGroupKeysOperations(), 0, GroupKeyXPCMessage, v1);
}

uint64_t DaemonService.registerAccountOperations()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t PrimaryAccountMessage;
  uint64_t AccountAliasesMessage;
  uint64_t PreferredHandleMessage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  PrimaryAccountMessage = type metadata accessor for FetchPrimaryAccountMessage();
  v0 = lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage();
  DaemonService.registerHandler<A>(for:_:)(PrimaryAccountMessage, (uint64_t)&async function pointer to closure #1 in DaemonService.registerAccountOperations(), 0, PrimaryAccountMessage, v0);
  AccountAliasesMessage = type metadata accessor for FetchAccountAliasesMessage();
  v1 = lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage();
  DaemonService.registerHandler<A>(for:_:)(AccountAliasesMessage, (uint64_t)&async function pointer to closure #2 in DaemonService.registerAccountOperations(), 0, AccountAliasesMessage, v1);
  PreferredHandleMessage = type metadata accessor for FetchPreferredHandleMessage();
  v2 = lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage();
  DaemonService.registerHandler<A>(for:_:)(PreferredHandleMessage, (uint64_t)&async function pointer to closure #3 in DaemonService.registerAccountOperations(), 0, PreferredHandleMessage, v2);
  v10 = type metadata accessor for SetPreferredHandleMessage();
  v3 = lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage();
  DaemonService.registerHandler<A>(for:_:)(v10, (uint64_t)&async function pointer to closure #4 in DaemonService.registerAccountOperations(), 0, v10, v3);
  v11 = type metadata accessor for AccountNotificationMessage();
  v4 = lazy protocol witness table accessor for type AccountNotificationMessage and conformance AccountNotificationMessage();
  DaemonService.registerHandler<A>(for:_:)(v11, (uint64_t)&async function pointer to closure #5 in DaemonService.registerAccountOperations(), 0, v11, v4);
  v12 = type metadata accessor for ProfileInformationXPCMessage();
  v5 = lazy protocol witness table accessor for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage();
  return DaemonService.registerHandler<A>(for:_:)(v12, (uint64_t)&async function pointer to closure #6 in DaemonService.registerAccountOperations(), 0, v12, v5);
}

uint64_t DaemonService.registerCLIOperations()()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t RSVPQueueMessage;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  inited = type metadata accessor for InitCKSchemasMessage();
  v0 = lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage();
  DaemonService.registerHandler<A>(for:_:)(inited, (uint64_t)&async function pointer to closure #1 in DaemonService.registerCLIOperations(), 0, inited, v0);
  v6 = type metadata accessor for DeleteAllContentMessage();
  v1 = lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage();
  DaemonService.registerHandler<A>(for:_:)(v6, (uint64_t)&async function pointer to closure #2 in DaemonService.registerCLIOperations(), 0, v6, v1);
  v7 = type metadata accessor for PingMessage();
  v2 = lazy protocol witness table accessor for type PingMessage and conformance PingMessage();
  DaemonService.registerHandler<A>(for:_:)(v7, (uint64_t)&async function pointer to closure #3 in DaemonService.registerCLIOperations(), 0, v7, v2);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue>);
  RSVPQueueMessage = lazy protocol witness table accessor for type GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue> and conformance GroupKitServerRequestMessage<A, B>();
  return DaemonService.registerHandler<A>(for:_:)(v8, (uint64_t)&async function pointer to closure #4 in DaemonService.registerCLIOperations(), 0, v8, RSVPQueueMessage);
}

uint64_t DaemonService.registerEventOperations()()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t started;
  uint64_t v4;
  uint64_t v5;

  started = type metadata accessor for StartBroadcastMessage();
  v0 = lazy protocol witness table accessor for type StartBroadcastMessage and conformance StartBroadcastMessage();
  DaemonService.registerHandler<A>(for:_:)(started, (uint64_t)&async function pointer to closure #1 in DaemonService.registerEventOperations(), 0, started, v0);
  v4 = type metadata accessor for MetricsXPCMessage();
  swift_retain();
  v1 = lazy protocol witness table accessor for type MetricsXPCMessage and conformance MetricsXPCMessage();
  DaemonService.registerHandler<A>(for:_:)(v4, (uint64_t)&async function pointer to partial apply for closure #2 in DaemonService.registerEventOperations(), v5, v4, v1);
  return swift_release();
}

uint64_t DaemonService.sendMessage(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[16] = v2;
  v3[15] = a2;
  v3[14] = a1;
  v3[8] = v3;
  v3[2] = 0;
  v3[3] = 0;
  v3[9] = 0;
  v3[12] = 0;
  v3[13] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[17] = v4;
  v3[18] = *(_QWORD *)(v4 - 8);
  v3[19] = swift_task_alloc();
  v3[2] = a1;
  v3[3] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.sendMessage(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *);

  v4 = v0[19];
  v3 = v0[18];
  v5 = v0[17];
  v6 = v0[16];
  v8 = v0[15];
  v7 = v0[14];
  v0[8] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handling async message", 0x16uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[20] = *(_QWORD *)(v6 + 64);
  swift_retain();
  v0[6] = v7;
  v0[7] = v8;
  v10 = (uint64_t (*)(uint64_t, _QWORD *))(MEMORY[0x24BDFC568] + (int)*MEMORY[0x24BDFC568]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 168) = v1;
  *v1 = *(_QWORD *)(v9 + 64);
  v1[1] = DaemonService.sendMessage(with:);
  return v10(v9 + 32, v0 + 6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;

  v0[8] = v0;
  v2 = v0[4];
  v3 = v0[5];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[8] + 8))(v2, v3);
}

{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;

  v10 = (void *)v0[22];
  v0[8] = v0;
  swift_release();
  v1 = v10;
  v0[10] = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = *(id *)(v9 + 176);
    v8 = *(id *)(v9 + 88);
    *(_QWORD *)(v9 + 104) = v8;
    v2 = v8;
    swift_willThrow();

  }
  else
  {
    v6 = *(id *)(v9 + 176);

    v3 = v6;
    *(_QWORD *)(v9 + 96) = v6;
    v4 = v6;
    InternalError.__allocating_init(_:)();
    swift_willThrow();

  }
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v9 + 64) + 8))();
}

uint64_t @objc closure #1 in DaemonService.sendMessage(with:)(void *a1, const void *a2, uint64_t a3)
{
  _QWORD *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[4] = a3;
  v3[3] = a1;
  v3[2] = v3;
  v4 = a1;
  v3[5] = _Block_copy(a2);
  swift_retain();
  v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v5;
  v3[6] = v11;
  v3[7] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 64) = v6;
  *v6 = *(_QWORD *)(v9 + 16);
  v6[1] = @objc closure #1 in DaemonService.sendMessage(with:);
  return DaemonService.sendMessage(with:)(v11, v10);
}

_QWORD *@objc closure #1 in DaemonService.sendMessage(with:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v6;
  id v7;
  void (**v8)(void *, _QWORD);
  Class isa;
  void (**aBlock)(void);
  id v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v12 = (_QWORD *)(v4 + 16);
  v13 = (_QWORD *)(v4 + 16);
  swift_task_dealloc();
  if (v2)
  {
    v8 = (void (**)(void *, _QWORD))v12[3];
    v7 = (id)_convertErrorToNSError(_:)();
    v8[2](v8, 0);

    _Block_release(v8);
  }
  else
  {
    aBlock = (void (**)(void))v12[3];
    isa = Data._bridgeToObjectiveC()().super.isa;
    aBlock[2]();

    _Block_release(aBlock);
    outlined consume of Data._Representation(a1, a2);
  }
  v6 = (void *)v12[1];
  outlined consume of Data._Representation(v12[4], v12[5]);

  swift_release();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v13 + 8))(v13);
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;

  v17 = a1;
  v16 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v23 = (char *)&v14 - v15;
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v23, 1);
  v18 = 48;
  v19 = 7;
  v4 = swift_allocObject();
  v5 = v16;
  v6 = (_QWORD *)v4;
  v7 = v17;
  v22 = v6;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v7;
  v6[5] = v5;
  v20 = v6[2];
  v21 = v6[3];
  swift_unknownObjectRetain();
  v8 = swift_allocObject();
  v9 = v21;
  v10 = v22;
  v11 = (_QWORD *)v8;
  v12 = (uint64_t)v23;
  v11[2] = v20;
  v11[3] = v9;
  v11[4] = &_sIeghH_IeAgH_TRTATu;
  v11[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v12, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v11);
  return swift_release();
}

uint64_t DaemonService.sendMessageAndWaitForReply(with:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t countAndFlagsBits;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *object;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, unint64_t);
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v15 = a1;
  v14 = a2;
  v29 = a3;
  v32 = a4;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v30 = 0;
  v27 = type metadata accessor for InternalErrorCode();
  v26 = *(_QWORD *)(v27 - 8);
  v13 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v28 = (char *)&v12 - v13;
  v23 = type metadata accessor for LogSubsystem();
  v21 = *(_QWORD *)(v23 - 8);
  v16 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v22 = (uint64_t)&v12 - v16;
  v36 = v5;
  v37 = v6;
  v34 = v7;
  v35 = v8;
  v33 = v4;
  v17 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handling blocking message", 0x19uLL, 1);
  countAndFlagsBits = v9._countAndFlagsBits;
  object = v9._object;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, v17 & 1);
  v20 = v10._countAndFlagsBits;
  v24 = v10._object;
  v19 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  type metadata accessor for InternalError();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BE3DE88], v27);
  v31 = (id)InternalError.__allocating_init(_:internalInfo:)();
  v29(v30, 0xF000000000000000);

  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v4;
  uint64_t v5;
  void *v6;
  Class isa;
  Class v8;

  outlined copy of Data?(a1, a2);
  if ((a2 & 0xF000000000000000) == 0xF000000000000000)
  {
    v8 = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(a1, a2);
    v8 = isa;
  }
  v4 = a3;
  if (a3)
  {
    v5 = _convertErrorToNSError(_:)();

    v6 = (void *)v5;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v8);

}

uint64_t DaemonService.registerHandler<A>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  swift_retain();
  v11 = swift_allocObject();
  swift_retain();
  swift_weakInit();
  swift_release();
  swift_retain();
  swift_retain();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a5;
  v10[4] = v11;
  v10[5] = a2;
  v10[6] = a3;
  dispatch thunk of MessageDispatcher.registerHandler<A>(for:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DaemonService.registerHandler<A>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[15] = a5;
  v5[14] = a4;
  v5[13] = a3;
  v5[12] = a2;
  v5[11] = a1;
  v5[7] = v5;
  v5[8] = 0;
  v5[9] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v5[10] = 0;
  v6 = type metadata accessor for InternalErrorCode();
  v5[16] = v6;
  v5[17] = *(_QWORD *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  v5[19] = v7;
  v5[20] = *(_QWORD *)(v7 - 8);
  v5[21] = swift_task_alloc();
  v5[8] = a2;
  v5[9] = a3 + 16;
  v5[5] = a4;
  v5[6] = a5;
  swift_getAssociatedTypeWitness();
  return swift_task_switch();
}

uint64_t closure #1 in DaemonService.registerHandler<A>(for:_:)()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)(v0 + 56) = v0;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 176) = Strong;
  v13 = Strong;
  swift_endAccess();
  if (v13)
  {
    v10 = (int *)v12[14];
    v12[10] = v13;
    swift_retain();
    v11 = (int *)((char *)v10 + *v10);
    v2 = (_QWORD *)swift_task_alloc();
    v12[23] = v2;
    *v2 = v12[7];
    v2[1] = closure #1 in DaemonService.registerHandler<A>(for:_:);
    return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))v11)(v12[11], v13, v12[12]);
  }
  else
  {
    v5 = v12[21];
    v4 = v12[20];
    v6 = v12[19];
    v9 = v12[18];
    v7 = v12[17];
    v8 = v12[16];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Daemon service doesn't exist", 0x1CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DCE0], v8);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v12[7] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #1 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerGroupOperations();
  return DaemonService.handleFetchGroupsMessage(message:)(a3);
}

_QWORD *closure #1 in DaemonService.registerGroupOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #1 in DaemonService.registerGroupOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage()
{
  uint64_t GroupsXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage)
  {
    GroupsXPCMessage = type metadata accessor for FetchGroupsXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E038], GroupsXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupsXPCMessage and conformance FetchGroupsXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchGroupsMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = v1;
  v2[10] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchGroupsMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 96) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleFetchGroupsMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Groups;

  v3 = v0[11];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[14] = *(_QWORD *)(v3 + 72);
  swift_retain();
  Groups = FetchGroupsXPCMessage.request.getter();
  v0[15] = Groups;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v1;
  *v1 = *(_QWORD *)(v4 + 56);
  v1[1] = DaemonService.handleFetchGroupsMessage(message:);
  return DaemonGroupManager.fetchGroups(with:)(Groups);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

_QWORD *DaemonService.handleFetchGroupsMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v6 = (_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_release();
  swift_release();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t closure #2 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerGroupOperations();
  return DaemonService.handleCreateGroupMessage(message:)(a3);
}

_QWORD *closure #2 in DaemonService.registerGroupOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #2 in DaemonService.registerGroupOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage()
{
  uint64_t GroupXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage)
  {
    GroupXPCMessage = type metadata accessor for CreateGroupXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D6E0], GroupXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CreateGroupXPCMessage and conformance CreateGroupXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleCreateGroupMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = v1;
  v2[10] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleCreateGroupMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 96) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleCreateGroupMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Group;

  v3 = v0[11];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[14] = *(_QWORD *)(v3 + 72);
  swift_retain();
  Group = CreateGroupXPCMessage.request.getter();
  v0[15] = Group;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v1;
  *v1 = *(_QWORD *)(v4 + 56);
  v1[1] = DaemonService.handleCreateGroupMessage(message:);
  return DaemonGroupManager.createNewGroup(with:)(Group);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

_QWORD *DaemonService.handleCreateGroupMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v6 = (_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_release();
  swift_release();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t closure #3 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #3 in DaemonService.registerGroupOperations();
  return DaemonService.handleUpdateGroupMessage(message:)(a3);
}

_QWORD *closure #3 in DaemonService.registerGroupOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #3 in DaemonService.registerGroupOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage)
  {
    updated = type metadata accessor for UpdateGroupXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D710], updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UpdateGroupXPCMessage and conformance UpdateGroupXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleUpdateGroupMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = v1;
  v2[10] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleUpdateGroupMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 96) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleUpdateGroupMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;

  v3 = v0[11];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[14] = *(_QWORD *)(v3 + 72);
  swift_retain();
  updated = UpdateGroupXPCMessage.request.getter();
  v0[15] = updated;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v1;
  *v1 = *(_QWORD *)(v4 + 56);
  v1[1] = DaemonService.handleUpdateGroupMessage(message:);
  return DaemonGroupManager.updateGroup(with:)(updated);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

_QWORD *DaemonService.handleUpdateGroupMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v6 = (_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_release();
  swift_release();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t closure #4 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #4 in DaemonService.registerGroupOperations();
  return DaemonService.handleMembershipMessage(message:)(a3);
}

_QWORD *closure #4 in DaemonService.registerGroupOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #4 in DaemonService.registerGroupOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type MembershipXPCMessage and conformance MembershipXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage;
  if (!lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage)
  {
    v0 = type metadata accessor for MembershipXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E020], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipXPCMessage and conformance MembershipXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleMembershipMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[11] = v1;
  v2[10] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v3 = type metadata accessor for GPKMembershipRequest();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleMembershipMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 120) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleMembershipMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = v0[11];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[17] = *(_QWORD *)(v3 + 72);
  swift_retain();
  MembershipXPCMessage.request.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v4[18] = v1;
  *v1 = v4[7];
  v1[1] = DaemonService.handleMembershipMessage(message:);
  return DaemonGroupManager.updateMembership(with:)(v4[14]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[14];
  v2 = v0[13];
  v3 = v0[12];
  v0[7] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[7] + 8))();
}

_QWORD *DaemonService.handleMembershipMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;

  v3 = (_QWORD *)*v2;
  v3[7] = *v2;
  v3 += 7;
  v6 = v3 - 5;
  v7 = v3;
  v3[12] = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  (*(void (**)(void))(v6[11] + 8))();
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t closure #5 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #5 in DaemonService.registerGroupOperations();
  return DaemonService.handleDeleteGroupMessage(message:)(a1, a3);
}

_QWORD *closure #5 in DaemonService.registerGroupOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage;
  if (!lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage)
  {
    v0 = type metadata accessor for DeleteGroupXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D6F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteGroupXPCMessage and conformance DeleteGroupXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleDeleteGroupMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = v2;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v3[8] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleDeleteGroupMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 104) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleDeleteGroupMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v0[12];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[15] = *(_QWORD *)(v3 + 72);
  swift_retain();
  v5 = DeleteGroupXPCMessage.request.getter();
  v0[16] = v5;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 136) = v1;
  *v1 = *(_QWORD *)(v4 + 56);
  v1[1] = DaemonService.handleDeleteGroupMessage(message:);
  return DaemonGroupManager.delete(with:)(v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  NoReply.init()();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #6 in DaemonService.registerGroupOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #6 in DaemonService.registerGroupOperations();
  return DaemonService.handleGroupRefreshMessage(message:)(a3);
}

_QWORD *closure #6 in DaemonService.registerGroupOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #6 in DaemonService.registerGroupOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type GroupRefreshMessage and conformance GroupRefreshMessage()
{
  uint64_t refreshed;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage;
  if (!lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage)
  {
    refreshed = type metadata accessor for GroupRefreshMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D8E8], refreshed);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupRefreshMessage and conformance GroupRefreshMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleGroupRefreshMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[12] = v1;
  v2[11] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[13] = v3;
  v2[14] = *(_QWORD *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[7] = *v2;
  v3 += 7;
  v5 = v3 - 5;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v5[12] + 8))(v5[13], v5[11]);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[7] = *v2;
  v3 += 7;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t DaemonService.handleGroupRefreshMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleGroupRefreshMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = v0[12];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[18] = *(_QWORD *)(v3 + 72);
  swift_retain();
  GroupRefreshMessage.groupID.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v4[19] = v1;
  *v1 = v4[7];
  v1[1] = DaemonService.handleGroupRefreshMessage(message:);
  return DaemonGroupManager.refreshGroupWithServer(groupID:)(v4[15]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = v0[20];
  v2 = v0[12];
  v0[7] = v0;
  v0[10] = v1;
  v0[22] = *(_QWORD *)(v2 + 72);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v5[23] = v3;
  *v3 = v5[7];
  v3[1] = DaemonService.handleGroupRefreshMessage(message:);
  return DaemonGroupManager.performMemberRequests(for:)(v5[20]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 192));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[15];
  v2 = v0[14];
  v3 = v0[13];
  v0[7] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[7] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #1 in DaemonService.registerInvitationOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerInvitationOperations();
  return DaemonService.handleRSVPMessage(message:)(a3);
}

_QWORD *closure #1 in DaemonService.registerInvitationOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #1 in DaemonService.registerInvitationOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type RSVPXPCMessage and conformance RSVPXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage;
  if (!lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage)
  {
    v0 = type metadata accessor for RSVPXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DB88], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPXPCMessage and conformance RSVPXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleRSVPMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = v1;
  v2[10] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleRSVPMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 96) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleRSVPMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v0[11];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[14] = *(_QWORD *)(v3 + 72);
  swift_retain();
  v5 = RSVPXPCMessage.request.getter();
  v0[15] = v5;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v1;
  *v1 = *(_QWORD *)(v4 + 56);
  v1[1] = DaemonService.handleRSVPMessage(message:);
  return DaemonGroupManager.rsvp(request:)(v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

_QWORD *DaemonService.handleRSVPMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = *v2;
  v6 = (_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_release();
  swift_release();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v6 + 8))(v6, a1);
}

uint64_t closure #2 in DaemonService.registerInvitationOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerInvitationOperations();
  return DaemonService.handleDeleteInvitation(message:)(a1, a3);
}

_QWORD *closure #2 in DaemonService.registerInvitationOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type DeleteInvitation and conformance DeleteInvitation()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation;
  if (!lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation)
  {
    v0 = type metadata accessor for DeleteInvitation();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DBE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteInvitation and conformance DeleteInvitation);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleDeleteInvitation(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[66] = v2;
  v3[65] = a2;
  v3[64] = a1;
  v3[61] = v3;
  v3[62] = 0;
  v3[63] = 0;
  bzero(v3 + 2, 0x188uLL);
  v4 = type metadata accessor for UUID();
  v3[67] = v4;
  v3[68] = *(_QWORD *)(v4 - 8);
  v3[69] = swift_task_alloc();
  v3[62] = a2;
  v3[63] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleDeleteInvitation(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[61] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[54];
  v5 = v0[55];
  __swift_project_boxed_opaque_existential_1(v0 + 51, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 560) = v2;
  *v2 = *(_QWORD *)(v4 + 488);
  v2[1] = DaemonService.handleDeleteInvitation(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 568) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[71];
  v7 = v0[66];
  v0[61] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  swift_retain();
  outlined init with copy of Client(v7 + 16, (uint64_t)(v0 + 56));
  ServiceBuilder.commandLineService(for:)((uint64_t)(v0 + 56), (uint64_t)(v0 + 2));
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v6 + 56));
    swift_release();
  }
  else
  {
    v5 = v6[69];
    v3 = v6[68];
    v4 = v6[67];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v6 + 56));
    swift_release();
    DeleteInvitation.invitationID.getter();
    CommandLineService.deleteInvitation(with:)(v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
    NoReply.init()();
    outlined destroy of CommandLineService((uint64_t)(v6 + 2));
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v6[61] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 408);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

uint64_t closure #1 in DaemonService.registerUserOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerUserOperations();
  return DaemonService.handleRegisterSelfMessage(message:)(a1, a3);
}

_QWORD *closure #1 in DaemonService.registerUserOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type RegisterSelfMessage and conformance RegisterSelfMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage;
  if (!lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage)
  {
    v0 = type metadata accessor for RegisterSelfMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DFB8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RegisterSelfMessage and conformance RegisterSelfMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleRegisterSelfMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[18] = v2;
  v3[17] = a2;
  v3[16] = a1;
  v3[12] = v3;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = a2;
  v3[14] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleRegisterSelfMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[12] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 152) = v2;
  *v2 = *(_QWORD *)(v4 + 96);
  v2[1] = DaemonService.handleRegisterSelfMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[20];
  v8 = v0[18];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_retain();
  outlined init with copy of Client(v8 + 16, (uint64_t)(v0 + 7));
  v9 = ServiceBuilder.keyDistributionService(for:)((uint64_t)(v0 + 7));
  v0[21] = v9;
  outlined destroy of Client?((uint64_t)(v7 + 7));
  swift_release();
  if (v1)
    return (*(uint64_t (**)(void))(v7[12] + 8))();
  v7[15] = v9;
  v6 = RegisterSelfMessage.forceKeyRoll.getter();
  v4 = RegisterSelfMessage.skipServerCheck.getter();
  v5 = RegisterSelfMessage.skipLocalCheck.getter();
  v2 = (_QWORD *)swift_task_alloc();
  v7[22] = v2;
  *v2 = v7[12];
  v2[1] = DaemonService.handleRegisterSelfMessage(message:);
  return KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(v6 & 1, v4 & 1, v5 & 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  NoReply.init()();
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

uint64_t closure #2 in DaemonService.registerUserOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerUserOperations();
  return DaemonService.handleKeyDistributionRequestMessage(message:)(a1, a3);
}

_QWORD *closure #2 in DaemonService.registerUserOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage;
  if (!lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage)
  {
    v0 = type metadata accessor for KeyDistributionRequestMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E258], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionRequestMessage and conformance KeyDistributionRequestMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleKeyDistributionRequestMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[69] = v2;
  v3[68] = a2;
  v3[67] = a1;
  v3[64] = v3;
  v3[65] = 0;
  v3[66] = 0;
  bzero(v3 + 2, 0x188uLL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v3[70] = swift_task_alloc();
  v3[65] = a2;
  v3[66] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleKeyDistributionRequestMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[64] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[54];
  v5 = v0[55];
  __swift_project_boxed_opaque_existential_1(v0 + 51, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 568) = v2;
  *v2 = *(_QWORD *)(v4 + 512);
  v2[1] = DaemonService.handleKeyDistributionRequestMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 512) = *v1;
  *(_QWORD *)(v2 + 576) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0[72];
  v18 = v0[69];
  v0[64] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  swift_retain();
  outlined init with copy of Client(v18 + 16, (uint64_t)(v0 + 56));
  ServiceBuilder.commandLineService(for:)((uint64_t)(v0 + 56), (uint64_t)(v0 + 2));
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v17 + 56));
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v17[64] + 8))();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v17 + 56));
    swift_release();
    if ((KeyDistributionRequestMessage.requestType.getter() & 1) != 0)
    {
      v16 = KeyDistributionRequestMessage.altDSID.getter();
      v10 = v4;
      v17[78] = v4;
      KeyDistributionRequestMessage.gpkUserID.getter();
      v11 = KeyDistributionRequestMessage.email.getter();
      v12 = v5;
      v17[79] = v5;
      v13 = KeyDistributionRequestMessage.emailHash.getter();
      v14 = v6;
      v17[80] = v6;
      v15 = KeyDistributionRequestMessage.phoneNumber.getter();
      v17[81] = v7;
      KeyDistributionRequestMessage.phoneNumberHash.getter();
      v17[82] = v8;
      v9 = (_QWORD *)swift_task_alloc();
      v17[83] = v9;
      *v9 = v17[64];
      v9[1] = DaemonService.handleKeyDistributionRequestMessage(message:);
      return CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(v16, v10, v17[70], v11, v12, v13, v14, v15);
    }
    else
    {
      v2 = (_QWORD *)swift_task_alloc();
      v17[73] = v2;
      *v2 = v17[64];
      v2[1] = DaemonService.handleKeyDistributionRequestMessage(message:);
      return CommandLineService.fetchCurrentUserPublicKey()();
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[77];
  v2 = v0[76];
  v3 = v0[75];
  v0[64] = v0;
  v0[61] = v3;
  v0[62] = v2;
  v0[63] = v1;
  swift_bridgeObjectRetain();
  KeyDistributionRequestMessage.KeyDistributionResponse.init(code:body:)();
  outlined destroy of (code: Int, body: String)();
  outlined destroy of CommandLineService((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[64] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[87];
  v2 = v0[86];
  v3 = v0[85];
  v0[64] = v0;
  v0[61] = v3;
  v0[62] = v2;
  v0[63] = v1;
  swift_bridgeObjectRetain();
  KeyDistributionRequestMessage.KeyDistributionResponse.init(code:body:)();
  outlined destroy of (code: Int, body: String)();
  outlined destroy of CommandLineService((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[64] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 512) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 408);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 512) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 512) = v0;
  outlined destroy of CommandLineService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 512) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 512) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GPKUserID?(v2);
  swift_bridgeObjectRelease();
  outlined destroy of CommandLineService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 512) + 8))();
}

uint64_t DaemonService.handleKeyDistributionRequestMessage(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v6 = (_QWORD *)*v4;
  v6[64] = *v4;
  v6[74] = v3;
  v6[75] = a1;
  v6[76] = a2;
  v6[77] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v8 = (_QWORD *)*v4;
  v7 = *v4 + 16;
  v8[64] = *v4;
  v8[84] = v3;
  v8[85] = a1;
  v8[86] = a2;
  v8[87] = a3;
  swift_task_dealloc();
  if (!v3)
  {
    v6 = *(_QWORD *)(v7 + 544);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of GPKUserID?(v6);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t closure #3 in DaemonService.registerUserOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #3 in DaemonService.registerUserOperations();
  return DaemonService.handleCheckKeyRegistrationMessage(message:)(a3);
}

_QWORD *closure #3 in DaemonService.registerUserOperations()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_BYTE *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #3 in DaemonService.registerUserOperations()()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = *(_BYTE **)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v0;
  *v2 = v1 & 1;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

unint64_t lazy protocol witness table accessor for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage;
  if (!lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage)
  {
    v0 = type metadata accessor for CheckKeyRegistrationMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E178], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CheckKeyRegistrationMessage and conformance CheckKeyRegistrationMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleCheckKeyRegistrationMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[16] = v1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleCheckKeyRegistrationMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[12] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 136) = v2;
  *v2 = *(_QWORD *)(v4 + 96);
  v2[1] = DaemonService.handleCheckKeyRegistrationMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[18];
  v5 = v0[16];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_retain();
  outlined init with copy of Client(v5 + 16, (uint64_t)(v0 + 7));
  v6 = ServiceBuilder.userLookupService(for:)((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_1(v4 + 56);
  swift_release();
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 96) + 8))(v4 & 1);
  *(_QWORD *)(v4 + 120) = v6;
  v3 = GroupKitUserLookupManager.isKeyRegistered.getter();
  swift_release();
  return (*(uint64_t (**)(BOOL))(*(_QWORD *)(v4 + 96) + 8))(v3);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 96) & 1);
}

uint64_t closure #4 in DaemonService.registerUserOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #4 in DaemonService.registerUserOperations();
  return DaemonService.handleCheckAvailabilityMessage(message:)(a3);
}

_QWORD *closure #4 in DaemonService.registerUserOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #4 in DaemonService.registerUserOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage;
  if (!lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage)
  {
    v0 = type metadata accessor for CheckAvailabilityMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E0E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CheckAvailabilityMessage and conformance CheckAvailabilityMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleCheckAvailabilityMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[17] = v1;
  v2[16] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 96) = *v2;
  v3 += 96;
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t DaemonService.handleCheckAvailabilityMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[12] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 144) = v2;
  *v2 = *(_QWORD *)(v4 + 96);
  v2[1] = DaemonService.handleCheckAvailabilityMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[19];
  v6 = v0[17];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_retain();
  outlined init with copy of Client(v6 + 16, (uint64_t)(v0 + 7));
  v7 = ServiceBuilder.userLookupService(for:)((uint64_t)(v0 + 7));
  v0[20] = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 7));
  swift_release();
  if (v1)
    return (*(uint64_t (**)())(v5[12] + 8))();
  v5[15] = v7;
  v4 = CheckAvailabilityMessage.handles.getter();
  v5[21] = v4;
  v2 = (_QWORD *)swift_task_alloc();
  v5[22] = v2;
  *v2 = v5[12];
  v2[1] = DaemonService.handleCheckAvailabilityMessage(message:);
  return GroupKitUserLookupManager.checkAvailability(for:)(v4);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 184));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 96) + 8))();
}

uint64_t closure #5 in DaemonService.registerUserOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #5 in DaemonService.registerUserOperations();
  return DaemonService.handleFetchAllUsersMessage(message:)(a3);
}

_QWORD *closure #5 in DaemonService.registerUserOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #5 in DaemonService.registerUserOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type FetchAllUsersMessage and conformance FetchAllUsersMessage()
{
  uint64_t AllUsersMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage;
  if (!lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage)
  {
    AllUsersMessage = type metadata accessor for FetchAllUsersMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DFC8], AllUsersMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchAllUsersMessage and conformance FetchAllUsersMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchAllUsersMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[10] = v1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchAllUsersMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 88) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleFetchAllUsersMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  v4 = DaemonGroupManager.fetchAllUsers()();
  swift_release();
  if (v1)
    return (*(uint64_t (**)())(*(_QWORD *)(v3 + 56) + 8))();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 8))(v4);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #1 in DaemonService.registerGroupKeysOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerGroupKeysOperations();
  return DaemonService.handleMemberKeyMessage(message:)(a1, a3);
}

_QWORD *closure #1 in DaemonService.registerGroupKeysOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage()
{
  uint64_t MemberKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage)
  {
    MemberKeyXPCMessage = type metadata accessor for FetchMemberKeyXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E0F8], MemberKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchMemberKeyXPCMessage and conformance FetchMemberKeyXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleMemberKeyMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = v2;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v4 = type metadata accessor for GPKMemberKeyRequest();
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleMemberKeyMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleMemberKeyMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = v0[12];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[18] = *(_QWORD *)(v3 + 72);
  swift_retain();
  FetchMemberKeyXPCMessage.request.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v4[19] = v1;
  *v1 = v4[7];
  v1[1] = DaemonService.handleMemberKeyMessage(message:);
  return DaemonGroupManager.fetchMemberKey(with:)(v4[10], v4[15]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[15];
  v2 = v0[14];
  v3 = v0[13];
  v0[7] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[7] + 8))();
}

_QWORD *DaemonService.handleMemberKeyMessage(message:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)*v1;
  v2[7] = *v1;
  v2 += 7;
  v4 = v2 - 5;
  v5 = v2;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  (*(void (**)(void))(v4[12] + 8))();
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
}

uint64_t closure #2 in DaemonService.registerGroupKeysOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerGroupKeysOperations();
  return DaemonService.handleGroupKeyMessage(message:)(a1, a3);
}

_QWORD *closure #2 in DaemonService.registerGroupKeysOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage()
{
  uint64_t GroupKeyXPCMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage;
  if (!lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage)
  {
    GroupKeyXPCMessage = type metadata accessor for FetchGroupKeyXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D6A8], GroupKeyXPCMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchGroupKeyXPCMessage and conformance FetchGroupKeyXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleGroupKeyMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[12] = v2;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v4 = type metadata accessor for GPKGroupKeyRequest();
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[8] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleGroupKeyMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 128) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleGroupKeyMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = v0[12];
  v0[7] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[18] = *(_QWORD *)(v3 + 72);
  swift_retain();
  FetchGroupKeyXPCMessage.request.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v4[19] = v1;
  *v1 = v4[7];
  v1[1] = DaemonService.handleGroupKeyMessage(message:);
  return DaemonGroupManager.fetchGroupKey(with:)(v4[10], v4[15]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[15];
  v2 = v0[14];
  v3 = v0[13];
  v0[7] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[7] + 8))();
}

_QWORD *DaemonService.handleGroupKeyMessage(message:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)*v1;
  v2[7] = *v1;
  v2 += 7;
  v4 = v2 - 5;
  v5 = v2;
  v2[13] = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  (*(void (**)(void))(v4[12] + 8))();
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
}

uint64_t closure #1 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerAccountOperations();
  return DaemonService.handleFetchPrimaryAccountMessage(message:)(a3);
}

_QWORD *closure #1 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)*v3;
  v4[2] = *v3;
  v6 = v4 + 2;
  v4[7] = a1;
  v4[8] = a2;
  swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #1 in DaemonService.registerAccountOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  v2 = v0[7];
  v3 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v3 = v2;
  v3[1] = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage()
{
  uint64_t PrimaryAccountMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage;
  if (!lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage)
  {
    PrimaryAccountMessage = type metadata accessor for FetchPrimaryAccountMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E148], PrimaryAccountMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchPrimaryAccountMessage and conformance FetchPrimaryAccountMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchPrimaryAccountMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[10] = v1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchPrimaryAccountMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 88) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleFetchPrimaryAccountMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  ServiceBuilder.accountManager()();
  swift_release();
  v1 = DaemonAccountManager.accountPrimaryIdentifier()();
  swift_release();
  if (v2)
    return (*(uint64_t (**)())(*(_QWORD *)(v4 + 56) + 8))();
  else
    return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)(v4 + 56) + 8))(v1._countAndFlagsBits, v1._object);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #2 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerAccountOperations();
  return DaemonService.handleFetchAccountAliasesMessage(message:)(a3);
}

_QWORD *closure #2 in DaemonService.registerAccountOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #2 in DaemonService.registerAccountOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage()
{
  uint64_t AccountAliasesMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage;
  if (!lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage)
  {
    AccountAliasesMessage = type metadata accessor for FetchAccountAliasesMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E138], AccountAliasesMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchAccountAliasesMessage and conformance FetchAccountAliasesMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchAccountAliasesMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[10] = v1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchAccountAliasesMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 88) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleFetchAccountAliasesMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  ServiceBuilder.accountManager()();
  swift_release();
  v4 = DaemonAccountManager.allAccountHandles()();
  swift_release();
  if (v1)
    return (*(uint64_t (**)())(*(_QWORD *)(v3 + 56) + 8))();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 8))(v4);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #3 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #3 in DaemonService.registerAccountOperations();
  return DaemonService.handleFetchPreferredHandleMessage(message:)(a3);
}

_QWORD *closure #3 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)*v3;
  v4[2] = *v3;
  v6 = v4 + 2;
  v4[7] = a1;
  v4[8] = a2;
  swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #3 in DaemonService.registerAccountOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  v2 = v0[7];
  v3 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v3 = v2;
  v3[1] = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage()
{
  uint64_t PreferredHandleMessage;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage)
  {
    PreferredHandleMessage = type metadata accessor for FetchPreferredHandleMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E188], PreferredHandleMessage);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchPreferredHandleMessage and conformance FetchPreferredHandleMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchPreferredHandleMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[10] = v1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchPreferredHandleMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 88) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleFetchPreferredHandleMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  ServiceBuilder.accountManager()();
  swift_release();
  v1 = DaemonAccountManager.preferredHandle()();
  swift_release();
  if (v2)
    return (*(uint64_t (**)())(*(_QWORD *)(v4 + 56) + 8))();
  else
    return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)(v4 + 56) + 8))(v1._countAndFlagsBits, v1._object);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #4 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #4 in DaemonService.registerAccountOperations();
  return DaemonService.handleSetPreferredHandleMessage(message:)(a1, a3);
}

_QWORD *closure #4 in DaemonService.registerAccountOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage;
  if (!lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage)
  {
    v0 = type metadata accessor for SetPreferredHandleMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E110], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SetPreferredHandleMessage and conformance SetPreferredHandleMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleSetPreferredHandleMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = v2;
  v3[11] = a2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v3[8] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleSetPreferredHandleMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 104) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleSetPreferredHandleMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  Swift::String_optional v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  ServiceBuilder.accountManager()();
  swift_release();
  v1.value._countAndFlagsBits = SetPreferredHandleMessage.handle.getter();
  DaemonAccountManager.setPreferredHandle(_:)(v1);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2)
    NoReply.init()();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t closure #5 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #5 in DaemonService.registerAccountOperations();
  return DaemonService.handleAccountNotificationMessage(message:)(a1, a3);
}

_QWORD *closure #5 in DaemonService.registerAccountOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type AccountNotificationMessage and conformance AccountNotificationMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage;
  if (!lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage)
  {
    v0 = type metadata accessor for AccountNotificationMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E128], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AccountNotificationMessage and conformance AccountNotificationMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleAccountNotificationMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 1352) = v2;
  *(_QWORD *)(v3 + 1344) = a1;
  *(_QWORD *)(v3 + 1280) = v3;
  *(_QWORD *)(v3 + 1288) = 0;
  *(_QWORD *)(v3 + 1296) = 0;
  *(_QWORD *)(v3 + 1304) = 0;
  memset((void *)(v3 + 1096), 0, 0x60uLL);
  *(_QWORD *)(v3 + 1248) = 0;
  *(_QWORD *)(v3 + 1256) = 0;
  *(_BYTE *)(v3 + 1440) = 0;
  *(_QWORD *)(v3 + 1328) = 0;
  v4 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v3 + 1360) = v4;
  *(_QWORD *)(v3 + 1368) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1376) = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 1384) = v5;
  *(_QWORD *)(v3 + 1392) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 1400) = swift_task_alloc();
  *(_QWORD *)(v3 + 1288) = a2;
  *(_QWORD *)(v3 + 1296) = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleAccountNotificationMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v0[160] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessCheckerForSignOut()(v1);
  swift_release();
  v3 = v0[152];
  v4 = v0[153];
  __swift_project_boxed_opaque_existential_1(v0 + 149, v3);
  v5 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + **(int **)(v4 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  v0[176] = v6;
  *v6 = v0[160];
  v6[1] = DaemonService.handleAccountNotificationMessage(message:);
  return v5(v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 1280) = *v1;
  *(_QWORD *)(v2 + 1416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t string;
  NSString string_8;
  id v35;
  id v36;
  id v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  unsigned __int8 v55;
  _QWORD *v56;
  uint64_t v57;

  v1 = *(void **)(v0 + 1416);
  *(_QWORD *)(v0 + 1280) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1192);
  swift_retain();
  ServiceBuilder.accountNotificationService()(v0 + 976);
  if (!v1)
  {
    swift_release();
    v56 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v57 + 1424) = v56;
    *v56 = *(_QWORD *)(v57 + 1280);
    v56[1] = DaemonService.handleAccountNotificationMessage(message:);
    return AccountNotificationService.signOut()();
  }
  swift_release();
  v23 = *(_QWORD *)(v57 + 1400);
  v22 = *(_QWORD *)(v57 + 1392);
  v24 = *(_QWORD *)(v57 + 1384);
  v25 = *(_QWORD *)(v57 + 1352);
  v4 = v1;
  *(_QWORD *)(v57 + 1304) = v1;
  *(_QWORD *)(v57 + 1232) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v57 + 1240) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to clear cache during signout: ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v57 + 1312) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
  gpklog(_:type:fileID:line:subsystem:)();
  v49 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v49(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to delete all db files...", 0x24uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
  gpklog(_:type:fileID:line:subsystem:)();
  v49(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v26 + 16, v57 + 16);
  swift_release();
  v27 = *(_QWORD *)(v57 + 104);
  v44 = *(_QWORD *)(v57 + 112);
  string = *(_QWORD *)(v57 + 120);
  v8 = *(void **)(v57 + 128);
  v9 = *(_QWORD *)(v57 + 136);
  v45 = *(_QWORD *)(v57 + 144);
  v28 = *(_QWORD *)(v57 + 152);
  v46 = *(_QWORD *)(v57 + 160);
  v29 = *(_BYTE *)(v57 + 168);
  v30 = *(_QWORD *)(v57 + 176);
  v31 = *(_QWORD *)(v57 + 184);
  v32 = *(_QWORD *)(v57 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of Dependencies((id *)(v57 + 16));
  *(_QWORD *)(v57 + 1096) = v27;
  *(_QWORD *)(v57 + 1104) = v44;
  *(_QWORD *)(v57 + 1112) = string;
  *(_QWORD *)(v57 + 1120) = v8;
  *(_QWORD *)(v57 + 1128) = v9;
  *(_QWORD *)(v57 + 1136) = v45;
  *(_QWORD *)(v57 + 1144) = v28;
  *(_QWORD *)(v57 + 1152) = v46;
  *(_BYTE *)(v57 + 1160) = v29 & 1;
  *(_QWORD *)(v57 + 1168) = v30;
  *(_QWORD *)(v57 + 1176) = v31;
  *(_QWORD *)(v57 + 1184) = v32;
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = string;
  v10._object = v8;
  string_8 = NSString.__allocating_init(string:)(v10);
  v35 = objc_msgSend(string_8, sel_stringByDeletingLastPathComponent);
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v51 = v11;
  *(_QWORD *)(v57 + 1248) = v50;
  *(_QWORD *)(v57 + 1256) = v11;

  *(_BYTE *)(v57 + 1440) = 0;
  v37 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v36 = (id)MEMORY[0x2426348B0](v50, v51);
  swift_bridgeObjectRelease();
  v38 = objc_msgSend(v37, sel_fileExistsAtPath_, v36);

  if ((v38 & 1) != 0)
  {
    v54 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    swift_bridgeObjectRetain();
    v53 = (void *)MEMORY[0x2426348B0](v50, v51);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v57 + 1320) = 0;
    v55 = objc_msgSend(v54, sel_removeItemAtPath_error_, v53, v57 + 1320);
    v52 = *(void **)(v57 + 1320);
    v3 = v52;

    if ((v55 & 1) == 0)
    {
      v16 = *(_QWORD *)(v57 + 1400);
      v17 = *(_QWORD *)(v57 + 1384);
      v20 = *(_QWORD *)(v57 + 1376);
      v18 = *(_QWORD *)(v57 + 1368);
      v19 = *(_QWORD *)(v57 + 1360);
      v21 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      v12 = v21;
      *(_QWORD *)(v57 + 1328) = v21;
      *(_QWORD *)(v57 + 1264) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v57 + 1272) = v13;
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to delete DB files: ", 0x1BuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v57 + 1336) = v21;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
      gpklog(_:type:fileID:line:subsystem:)();
      v49(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x24BE3DE48], v19);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_11;
    }
    v47 = *(_QWORD *)(v57 + 1400);
    v48 = *(_QWORD *)(v57 + 1384);
    *(_BYTE *)(v57 + 1440) = 1;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files deleted", 0x10uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v47);
    gpklog(_:type:fileID:line:subsystem:)();
    v49(v47, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v57 + 1440) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    NoReply.init()();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v57 + 1280) + 8))();
  }
  v39 = *(_QWORD *)(v57 + 1400);
  v40 = *(_QWORD *)(v57 + 1384);
  v43 = *(_QWORD *)(v57 + 1376);
  v41 = *(_QWORD *)(v57 + 1368);
  v42 = *(_QWORD *)(v57 + 1360);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files not delete", 0x13uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v39);
  gpklog(_:type:fileID:line:subsystem:)();
  v49(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v43, *MEMORY[0x24BE3DCF0], v42);
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v57 + 1280) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 976;
  *(_QWORD *)(v2 + 1280) = *v1;
  *(_QWORD *)(v2 + 1432) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of AccountNotificationService(v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1280) = v0;
  NoReply.init()();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1280) + 8))();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  id v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  unsigned __int8 v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  unsigned __int8 v56;

  *(_QWORD *)(v0 + 1280) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1192);
  v32 = *(id *)(v0 + 1416);
  v34 = *(_QWORD *)(v0 + 1400);
  v33 = *(_QWORD *)(v0 + 1392);
  v35 = *(_QWORD *)(v0 + 1384);
  v37 = *(_QWORD *)(v0 + 1352);
  v1 = v32;
  *(_QWORD *)(v0 + 1304) = v32;
  *(_QWORD *)(v0 + 1232) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 1240) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to clear cache during signout: ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1312) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
  gpklog(_:type:fileID:line:subsystem:)();
  v36 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v36(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to delete all db files...", 0x24uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
  gpklog(_:type:fileID:line:subsystem:)();
  v36(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v37 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v38 + 16, v0 + 16);
  swift_release();
  v39 = *(_QWORD *)(v0 + 104);
  v40 = *(_QWORD *)(v0 + 112);
  v49 = *(_QWORD *)(v0 + 120);
  v5 = *(void **)(v0 + 128);
  v41 = *(_QWORD *)(v0 + 136);
  v42 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 160);
  v45 = *(_BYTE *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 184);
  v48 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of Dependencies((id *)(v0 + 16));
  *(_QWORD *)(v0 + 1096) = v39;
  *(_QWORD *)(v0 + 1104) = v40;
  *(_QWORD *)(v0 + 1112) = v49;
  *(_QWORD *)(v0 + 1120) = v5;
  *(_QWORD *)(v0 + 1128) = v41;
  *(_QWORD *)(v0 + 1136) = v42;
  *(_QWORD *)(v0 + 1144) = v43;
  *(_QWORD *)(v0 + 1152) = v44;
  *(_BYTE *)(v0 + 1160) = v45 & 1;
  *(_QWORD *)(v0 + 1168) = v46;
  *(_QWORD *)(v0 + 1176) = v47;
  *(_QWORD *)(v0 + 1184) = v48;
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v49;
  v6._object = v5;
  v50 = NSString.__allocating_init(string:)(v6);
  v51 = objc_msgSend(v50, sel_stringByDeletingLastPathComponent);
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v7;
  *(_QWORD *)(v0 + 1248) = v52;
  *(_QWORD *)(v0 + 1256) = v7;

  *(_BYTE *)(v0 + 1440) = 0;
  v55 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v54 = (void *)MEMORY[0x2426348B0](v52, v53);
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v55, sel_fileExistsAtPath_, v54);

  if ((v56 & 1) != 0)
  {
    v29 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    swift_bridgeObjectRetain();
    v28 = (id)MEMORY[0x2426348B0](v52, v53);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 1320) = 0;
    v30 = objc_msgSend(v29, sel_removeItemAtPath_error_, v28, v31 + 1320);
    v27 = *(void **)(v31 + 1320);
    v8 = v27;

    if ((v30 & 1) == 0)
    {
      v14 = *(_QWORD *)(v31 + 1400);
      v15 = *(_QWORD *)(v31 + 1384);
      v18 = *(_QWORD *)(v31 + 1376);
      v16 = *(_QWORD *)(v31 + 1368);
      v17 = *(_QWORD *)(v31 + 1360);
      v19 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      v10 = v19;
      *(_QWORD *)(v31 + 1328) = v19;
      *(_QWORD *)(v31 + 1264) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v31 + 1272) = v11;
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to delete DB files: ", 0x1BuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v31 + 1336) = v19;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
      gpklog(_:type:fileID:line:subsystem:)();
      v36(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BE3DE48], v17);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_8;
    }
    v25 = *(_QWORD *)(v31 + 1400);
    v26 = *(_QWORD *)(v31 + 1384);
    *(_BYTE *)(v31 + 1440) = 1;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files deleted", 0x10uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v25);
    gpklog(_:type:fileID:line:subsystem:)();
    v36(v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v31 + 1440) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    NoReply.init()();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v31 + 1280) + 8))();
  }
  v20 = *(_QWORD *)(v31 + 1400);
  v21 = *(_QWORD *)(v31 + 1384);
  v24 = *(_QWORD *)(v31 + 1376);
  v22 = *(_QWORD *)(v31 + 1368);
  v23 = *(_QWORD *)(v31 + 1360);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files not delete", 0x13uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v36(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v24, *MEMORY[0x24BE3DCF0], v23);
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v31 + 1280) + 8))();
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  id v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  unsigned __int8 v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  unsigned __int8 v56;

  *(_QWORD *)(v0 + 1280) = v0;
  outlined destroy of AccountNotificationService(v0 + 976);
  v32 = *(id *)(v0 + 1432);
  v34 = *(_QWORD *)(v0 + 1400);
  v33 = *(_QWORD *)(v0 + 1392);
  v35 = *(_QWORD *)(v0 + 1384);
  v37 = *(_QWORD *)(v0 + 1352);
  v1 = v32;
  *(_QWORD *)(v0 + 1304) = v32;
  *(_QWORD *)(v0 + 1232) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 1240) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to clear cache during signout: ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1312) = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
  gpklog(_:type:fileID:line:subsystem:)();
  v36 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v36(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to delete all db files...", 0x24uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
  gpklog(_:type:fileID:line:subsystem:)();
  v36(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v37 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v38 + 16, v0 + 16);
  swift_release();
  v39 = *(_QWORD *)(v0 + 104);
  v40 = *(_QWORD *)(v0 + 112);
  v49 = *(_QWORD *)(v0 + 120);
  v5 = *(void **)(v0 + 128);
  v41 = *(_QWORD *)(v0 + 136);
  v42 = *(_QWORD *)(v0 + 144);
  v43 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 160);
  v45 = *(_BYTE *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 184);
  v48 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of Dependencies((id *)(v0 + 16));
  *(_QWORD *)(v0 + 1096) = v39;
  *(_QWORD *)(v0 + 1104) = v40;
  *(_QWORD *)(v0 + 1112) = v49;
  *(_QWORD *)(v0 + 1120) = v5;
  *(_QWORD *)(v0 + 1128) = v41;
  *(_QWORD *)(v0 + 1136) = v42;
  *(_QWORD *)(v0 + 1144) = v43;
  *(_QWORD *)(v0 + 1152) = v44;
  *(_BYTE *)(v0 + 1160) = v45 & 1;
  *(_QWORD *)(v0 + 1168) = v46;
  *(_QWORD *)(v0 + 1176) = v47;
  *(_QWORD *)(v0 + 1184) = v48;
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v49;
  v6._object = v5;
  v50 = NSString.__allocating_init(string:)(v6);
  v51 = objc_msgSend(v50, sel_stringByDeletingLastPathComponent);
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v7;
  *(_QWORD *)(v0 + 1248) = v52;
  *(_QWORD *)(v0 + 1256) = v7;

  *(_BYTE *)(v0 + 1440) = 0;
  v55 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  swift_bridgeObjectRetain();
  v54 = (void *)MEMORY[0x2426348B0](v52, v53);
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v55, sel_fileExistsAtPath_, v54);

  if ((v56 & 1) != 0)
  {
    v29 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    swift_bridgeObjectRetain();
    v28 = (id)MEMORY[0x2426348B0](v52, v53);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 1320) = 0;
    v30 = objc_msgSend(v29, sel_removeItemAtPath_error_, v28, v31 + 1320);
    v27 = *(void **)(v31 + 1320);
    v8 = v27;

    if ((v30 & 1) == 0)
    {
      v14 = *(_QWORD *)(v31 + 1400);
      v15 = *(_QWORD *)(v31 + 1384);
      v18 = *(_QWORD *)(v31 + 1376);
      v16 = *(_QWORD *)(v31 + 1368);
      v17 = *(_QWORD *)(v31 + 1360);
      v19 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      v10 = v19;
      *(_QWORD *)(v31 + 1328) = v19;
      *(_QWORD *)(v31 + 1264) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v31 + 1272) = v11;
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to delete DB files: ", 0x1BuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v31 + 1336) = v19;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
      gpklog(_:type:fileID:line:subsystem:)();
      v36(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BE3DE48], v17);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_8;
    }
    v25 = *(_QWORD *)(v31 + 1400);
    v26 = *(_QWORD *)(v31 + 1384);
    *(_BYTE *)(v31 + 1440) = 1;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files deleted", 0x10uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v25);
    gpklog(_:type:fileID:line:subsystem:)();
    v36(v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v31 + 1440) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    NoReply.init()();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v31 + 1280) + 8))();
  }
  v20 = *(_QWORD *)(v31 + 1400);
  v21 = *(_QWORD *)(v31 + 1384);
  v24 = *(_QWORD *)(v31 + 1376);
  v22 = *(_QWORD *)(v31 + 1368);
  v23 = *(_QWORD *)(v31 + 1360);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DB files not delete", 0x13uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v36(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v24, *MEMORY[0x24BE3DCF0], v23);
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v31 + 1280) + 8))();
}

uint64_t closure #6 in DaemonService.registerAccountOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #6 in DaemonService.registerAccountOperations();
  return DaemonService.handleProfileInformationMessage(message:)(a3);
}

_QWORD *closure #6 in DaemonService.registerAccountOperations()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #6 in DaemonService.registerAccountOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage;
  if (!lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage)
  {
    v0 = type metadata accessor for ProfileInformationXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E1E8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ProfileInformationXPCMessage and conformance ProfileInformationXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleProfileInformationMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[31] = v1;
  v2[30] = a1;
  v2[27] = v2;
  v2[28] = 0;
  v2[29] = 0;
  memset(v2 + 2, 0, 0x78uLL);
  v3 = type metadata accessor for GPKProfileInformationRequest();
  v2[32] = v3;
  v2[33] = *(_QWORD *)(v3 - 8);
  v2[34] = swift_task_alloc();
  v2[28] = a1;
  v2[29] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[27] = *v2;
  v3 += 27;
  v5 = v3 - 25;
  v3[11] = a1;
  v3[12] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[31] + 8))(v5[32], v5[30]);
  return swift_task_switch();
}

uint64_t DaemonService.handleProfileInformationMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[27] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[20];
  v5 = v0[21];
  __swift_project_boxed_opaque_existential_1(v0 + 17, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 280) = v2;
  *v2 = *(_QWORD *)(v4 + 216);
  v2[1] = DaemonService.handleProfileInformationMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  *(_QWORD *)(v2 + 288) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 216) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_retain();
  outlined init with copy of Client(v3 + 16, v0 + 176);
  ServiceBuilder.profileService(for:)(v0 + 176, v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  swift_release();
  ProfileInformationXPCMessage.request.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v4[37] = v1;
  *v1 = v4[27];
  v1[1] = DaemonService.handleProfileInformationMessage(message:);
  return ProfileService.fetchProfileInformation(with:)(v4[34]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of ProfileService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 216) + 8))(*(_QWORD *)(v2 + 304));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 216) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[34];
  v2 = v0[33];
  v3 = v0[32];
  v0[27] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of ProfileService((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[27] + 8))();
}

uint64_t closure #1 in DaemonService.registerCLIOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerCLIOperations();
  return DaemonService.handleInitCKSchemaMessage(message:)(a1, a3);
}

_QWORD *closure #1 in DaemonService.registerCLIOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type InitCKSchemasMessage and conformance InitCKSchemasMessage()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage;
  if (!lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage)
  {
    inited = type metadata accessor for InitCKSchemasMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E010], inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitCKSchemasMessage and conformance InitCKSchemasMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleInitCKSchemaMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[131] = v2;
  v3[130] = a1;
  v3[127] = v3;
  v3[128] = 0;
  v3[129] = 0;
  v3[128] = a2;
  v3[129] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleInitCKSchemaMessage(message:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 1048);
  *(_QWORD *)(v0 + 1016) = v0;
  v3 = *(_QWORD *)(v1 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v3 + 16, v0 + 16);
  swift_release();
  outlined init with copy of Store(v0 + 200, v0 + 976);
  outlined destroy of Dependencies((id *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 1000);
  v4 = *(_QWORD *)(v0 + 1008);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 976), v5);
  (*(void (**)(uint64_t))(v4 + 72))(v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 976);
  NoReply.init()();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1016) + 8))();
}

uint64_t closure #2 in DaemonService.registerCLIOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #2 in DaemonService.registerCLIOperations();
  return DaemonService.handleDeleteAllContentMessage(message:)(a1, a3);
}

_QWORD *closure #2 in DaemonService.registerCLIOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type DeleteAllContentMessage and conformance DeleteAllContentMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage;
  if (!lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage)
  {
    v0 = type metadata accessor for DeleteAllContentMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E0D0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DeleteAllContentMessage and conformance DeleteAllContentMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleDeleteAllContentMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[65] = v2;
  v3[64] = a1;
  v3[61] = v3;
  v3[62] = 0;
  v3[63] = 0;
  bzero(v3 + 2, 0x188uLL);
  v3[62] = a2;
  v3[63] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleDeleteAllContentMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[61] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[54];
  v5 = v0[55];
  __swift_project_boxed_opaque_existential_1(v0 + 51, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 528) = v2;
  *v2 = *(_QWORD *)(v4 + 488);
  v2[1] = DaemonService.handleDeleteAllContentMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 536) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[67];
  v5 = v0[65];
  v0[61] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  swift_retain();
  outlined init with copy of Client(v5 + 16, (uint64_t)(v0 + 56));
  ServiceBuilder.commandLineService(for:)((uint64_t)(v0 + 56), (uint64_t)(v0 + 2));
  __swift_destroy_boxed_opaque_existential_1(v4 + 448);
  swift_release();
  if (v1)
    return (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 488) + 8))();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 544) = v2;
  *v2 = *(_QWORD *)(v4 + 488);
  v2[1] = DaemonService.handleDeleteAllContentMessage(message:);
  return CommandLineService.deleteAllInvitations()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 488);
  *(_QWORD *)(v6 + 488) = *v1;
  *(_QWORD *)(v6 + 552) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 544) = v2;
  *v2 = *v5;
  v2[1] = DaemonService.handleDeleteAllContentMessage(message:);
  return CommandLineService.deleteAllGroups()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *v1;
  v4 = *v1 + 16;
  v5 = (_QWORD *)(*v1 + 488);
  *(_QWORD *)(v6 + 488) = *v1;
  *(_QWORD *)(v6 + 568) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 560) = v2;
  *v2 = *v5;
  v2[1] = DaemonService.handleDeleteAllContentMessage(message:);
  return CommandLineService.deleteAllUsers()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 584) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  NoReply.init()();
  outlined destroy of CommandLineService(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 408);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  outlined destroy of CommandLineService(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  outlined destroy of CommandLineService(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  outlined destroy of CommandLineService(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

uint64_t closure #3 in DaemonService.registerCLIOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #3 in DaemonService.registerCLIOperations();
  return DaemonService.handlePingMessage(message:)(a3);
}

_QWORD *closure #3 in DaemonService.registerCLIOperations()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)*v3;
  v4[2] = *v3;
  v6 = v4 + 2;
  v4[7] = a1;
  v4[8] = a2;
  swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v6 + 8))(v6);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #3 in DaemonService.registerCLIOperations()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  v2 = v0[7];
  v3 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v3 = v2;
  v3[1] = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

unint64_t lazy protocol witness table accessor for type PingMessage and conformance PingMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type PingMessage and conformance PingMessage;
  if (!lazy protocol witness table cache variable for type PingMessage and conformance PingMessage)
  {
    v0 = type metadata accessor for PingMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DA78], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type PingMessage and conformance PingMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handlePingMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[15] = v1;
  v2[14] = a1;
  v2[11] = v2;
  v2[12] = 0;
  v2[13] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[16] = v3;
  v2[17] = *(_QWORD *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[12] = a1;
  v2[13] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handlePingMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[11] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 152) = v2;
  *v2 = *(_QWORD *)(v4 + 88);
  v2[1] = DaemonService.handlePingMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = *v1;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = v0[18];
  v7 = v0[17];
  v8 = v0[16];
  v0[11] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[8] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Ping message received: ", 0x17uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[9] = PingMessage.messageText.getter();
  v0[10] = v3;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonService.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Hello world!\nI am groupkitd. How can I help you?\"", 0x31uLL, 1);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, void *))(v0[11] + 8))(v5._countAndFlagsBits, v5._object);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 88) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 88) + 8))();
}

uint64_t closure #4 in DaemonService.registerCLIOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #4 in DaemonService.registerCLIOperations();
  return DaemonService.handleFetchRSVPQueueMessage(message:)(a1, a3);
}

_QWORD *closure #4 in DaemonService.registerCLIOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue> and conformance GroupKitServerRequestMessage<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue> and conformance GroupKitServerRequestMessage<A, B>;
  if (!lazy protocol witness table cache variable for type GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue> and conformance GroupKitServerRequestMessage<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D950], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue> and conformance GroupKitServerRequestMessage<A, B>);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleFetchRSVPQueueMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t RSVPQueueMessagePayload;

  v3[66] = v2;
  v3[65] = a2;
  v3[64] = a1;
  v3[61] = v3;
  v3[62] = 0;
  v3[63] = 0;
  bzero(v3 + 2, 0x188uLL);
  v4 = type metadata accessor for GPKGroupID();
  v3[67] = v4;
  v3[68] = *(_QWORD *)(v4 - 8);
  v3[69] = swift_task_alloc();
  RSVPQueueMessagePayload = type metadata accessor for FetchRSVPQueueMessagePayload();
  v3[70] = RSVPQueueMessagePayload;
  v3[71] = *(_QWORD *)(RSVPQueueMessagePayload - 8);
  v3[72] = swift_task_alloc();
  v3[62] = a2;
  v3[63] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleFetchRSVPQueueMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[61] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[54];
  v5 = v0[55];
  __swift_project_boxed_opaque_existential_1(v0 + 51, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 584) = v2;
  *v2 = *(_QWORD *)(v4 + 488);
  v2[1] = DaemonService.handleFetchRSVPQueueMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 592) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = v0[74];
  v8 = v0[66];
  v0[61] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  swift_retain();
  outlined init with copy of Client(v8 + 16, (uint64_t)(v0 + 56));
  ServiceBuilder.commandLineService(for:)((uint64_t)(v0 + 56), (uint64_t)(v0 + 2));
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v7 + 56));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v7[61] + 8))();
  }
  else
  {
    v5 = v7[72];
    v4 = v7[71];
    v6 = v7[70];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v7 + 56));
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupKitServerRequestMessage<FetchRSVPQueueMessagePayload, RSVPQueue>);
    GroupKitServerRequestMessage.payload.getter();
    FetchRSVPQueueMessagePayload.groupID.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    v2 = (_QWORD *)swift_task_alloc();
    v7[75] = v2;
    *v2 = v7[61];
    v2[1] = DaemonService.handleFetchRSVPQueueMessage(message:);
    return CommandLineService.fetchRSVPQueue(for:lastKnownSequenceNumber:)(v7[64], v7[69], 0);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 608) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[66] + 8))(v4[67], v4[65]);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  outlined destroy of CommandLineService(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 408);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[69];
  v2 = v0[68];
  v3 = v0[67];
  v0[61] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of CommandLineService((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[61] + 8))();
}

uint64_t closure #1 in DaemonService.registerEventOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[3] = a2;
  v3[4] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 40) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = closure #1 in DaemonService.registerEventOperations();
  return DaemonService.handleStartBroadcastMessage(message:)(a1, a3);
}

_QWORD *closure #1 in DaemonService.registerEventOperations()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t lazy protocol witness table accessor for type StartBroadcastMessage and conformance StartBroadcastMessage()
{
  uint64_t started;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage;
  if (!lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage)
  {
    started = type metadata accessor for StartBroadcastMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E078], started);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type StartBroadcastMessage and conformance StartBroadcastMessage);
    return v1;
  }
  return v3;
}

uint64_t DaemonService.handleStartBroadcastMessage(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[11] = v2;
  v3[10] = a1;
  v3[7] = v3;
  v3[8] = 0;
  v3[9] = 0;
  v3[8] = a2;
  v3[9] = v2;
  return swift_task_switch();
}

uint64_t DaemonService.handleStartBroadcastMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[7] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 96) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = DaemonService.handleStartBroadcastMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_retain();
  DaemonGroupManager.startClientBroadcast()();
  swift_release();
  NoReply.init()();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t closure #2 in DaemonService.registerEventOperations()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  v4[6] = a1;
  v4[2] = v4;
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 56) = v5;
  *v5 = *(_QWORD *)(v7 + 16);
  v5[1] = closure #2 in DaemonService.registerEventOperations();
  return DaemonService.handleMetricsMessage(message:)(a3);
}

_QWORD *closure #2 in DaemonService.registerEventOperations()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_BYTE *)(v3 + 64) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #2 in DaemonService.registerEventOperations()()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(_BYTE **)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v0;
  *v2 = v1 & 1;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t partial apply for closure #2 in DaemonService.registerEventOperations()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = partial apply for closure #2 in DaemonService.registerEventOperations();
  return closure #2 in DaemonService.registerEventOperations()(a1, a2, a3, v8);
}

uint64_t partial apply for closure #2 in DaemonService.registerEventOperations()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

unint64_t lazy protocol witness table accessor for type MetricsXPCMessage and conformance MetricsXPCMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage;
  if (!lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage)
  {
    v0 = type metadata accessor for MetricsXPCMessage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DEC0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MetricsXPCMessage and conformance MetricsXPCMessage);
    return v1;
  }
  return v3;
}

uint64_t sub_23D3CBDC8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in DaemonService.sendMessage(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  const void *v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = (void *)v0[2];
  v4 = (const void *)v0[3];
  v5 = v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = partial apply for @objc closure #1 in DaemonService.sendMessage(with:);
  return ((uint64_t (*)(void *, const void *, uint64_t))((char *)&async function pointer to @objc closure #1 in DaemonService.sendMessage(with:)
                                                                + async function pointer to @objc closure #1 in DaemonService.sendMessage(with:)))(v6, v4, v5);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D3CBF20()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSData?, @unowned NSError?) -> ()(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_23D3CBF64()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23D3CBFA0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DaemonService.registerHandler<A>(for:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = partial apply for closure #1 in DaemonService.registerHandler<A>(for:_:);
  return closure #1 in DaemonService.registerHandler<A>(for:_:)(a1, a2, v7, v8, v9);
}

uint64_t partial apply for closure #1 in DaemonService.registerHandler<A>(for:_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t outlined destroy of CommandLineService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  __swift_destroy_boxed_opaque_existential_1(a1 + 240);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304));
  __swift_destroy_boxed_opaque_existential_1(a1 + 312);
  __swift_destroy_boxed_opaque_existential_1(a1 + 352);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of (code: Int, body: String)()
{
  swift_bridgeObjectRelease();
}

uint64_t DaemonService.handleMetricsMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[172] = v1;
  v2[171] = a1;
  v2[168] = v2;
  v2[169] = 0;
  v2[170] = 0;
  memset(v2 + 122, 0, 0xCAuLL);
  v3 = type metadata accessor for GPKMetricsRequest();
  v2[173] = v3;
  v2[174] = *(_QWORD *)(v3 - 8);
  v2[175] = swift_task_alloc();
  v2[169] = a1;
  v2[170] = v1;
  return swift_task_switch();
}

uint64_t DaemonService.handleMetricsMessage(message:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[168] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[151];
  v5 = v0[152];
  __swift_project_boxed_opaque_existential_1(v0 + 148, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 1408) = v2;
  *v2 = *(_QWORD *)(v4 + 1344);
  v2[1] = DaemonService.handleMetricsMessage(message:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 1344) = *v1;
  *(_QWORD *)(v2 + 1416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1416);
  v7 = *(_QWORD *)(v0 + 1376);
  *(_QWORD *)(v0 + 1344) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1184);
  v8 = *(_QWORD *)(v7 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v8 + 16, v0 + 16);
  swift_release();
  outlined init with copy of Store(v0 + 200, v0 + 1264);
  outlined destroy of Dependencies((id *)(v0 + 16));
  v10 = *(_QWORD *)(v0 + 1288);
  v9 = *(_QWORD *)(v0 + 1296);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 1264), v10);
  (*(void (**)(uint64_t))(v9 + 64))(v10);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v6 + 1264);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 1344) + 8))(v6 & 1);
  }
  else
  {
    v4 = *(_QWORD *)(v6 + 1400);
    v3 = *(_QWORD *)(v6 + 1376);
    __swift_destroy_boxed_opaque_existential_1(v6 + 1264);
    swift_retain();
    outlined init with copy of Client(v3 + 16, v6 + 1304);
    ServiceBuilder.metrics(client:)((_QWORD *)(v6 + 1304), (_WORD *)(v6 + 976));
    outlined destroy of Client?(v6 + 1304);
    swift_release();
    MetricsXPCMessage.request.getter();
    v5 = Metrics.log(request:groupStore:)(v4, (_QWORD *)(v6 + 1224));
    (*(void (**)(void))(*(_QWORD *)(v6 + 1392) + 8))();
    outlined destroy of Metrics(v6 + 976);
    __swift_destroy_boxed_opaque_existential_1(v6 + 1224);
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 1344) + 8))(v5 & 1);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1344) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1184);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 1344) + 8))(*(_QWORD *)(v0 + 1344) & 1);
}

uint64_t outlined destroy of AccountNotificationService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return a1;
}

uint64_t outlined destroy of ProfileService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return a1;
}

uint64_t outlined init with copy of Store(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t DaemonService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t DaemonService.__deallocating_deinit()
{
  DaemonService.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonService()
{
  return objc_opt_self();
}

uint64_t method lookup function for DaemonService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DaemonService.__allocating_init(client:builder:groupManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  *(_QWORD *)(v3 + 16) = v3;
  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return v6();
}

uint64_t _sIeghH_IeAgH_TRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D3CC990()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 16) = v1;
  v6 = v0[2];
  v4 = v0[3];
  v5 = (int *)v0[4];
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = _sIeghH_IeAgH_TRTATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v6, v4, v5);
}

uint64_t _sIeghH_IeAgH_TRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = v4;
  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = _sIeAgH_ytIeAgHr_TRTQ0_;
  return v7();
}

uint64_t _sIeAgH_ytIeAgHr_TRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D3CCBC8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = (int *)v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sIeAgH_ytIeAgHr_TRTATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v5, v6, v7);
}

uint64_t _sIeAgH_ytIeAgHr_TRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  v5 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v5)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D3CD034()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t NetworkRequest.httpMethod.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("POST", 4uLL, 1)._countAndFlagsBits;
}

uint64_t NetworkRequest.contentType.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("application/json", 0x10uLL, 1)._countAndFlagsBits;
}

_QWORD *NetworkResponse.request.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of NetworkRequest?(v1, a1);
}

_QWORD *outlined init with copy of NetworkRequest?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t NetworkResponse.response.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t NetworkResponse.statusCode.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t NetworkResponse.init(request:response:statusCode:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v13;

  outlined init with take of NetworkRequest?(a1, a6);
  v13 = type metadata accessor for NetworkResponse(0, a4, a5, v6);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a6[*(int *)(v13 + 36)], a2);
  result = v13;
  *(_QWORD *)&a6[*(int *)(v13 + 40)] = a3;
  return result;
}

void *outlined init with take of NetworkRequest?(const void *a1, void *a2)
{
  memcpy(a2, a1, 0x28uLL);
  return a2;
}

uint64_t type metadata accessor for NetworkResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NetworkResponse);
}

uint64_t dispatch thunk of NetworkRequest.urlBagKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of NetworkRequest.httpMethod.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of NetworkRequest.bodyContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of NetworkRequest.contentType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata instantiation function for NetworkResponse()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for NetworkResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for NetworkResponse(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v10;

  v10 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v10 & 0x20000) != 0)
  {
    v5 = *a2;
    swift_retain();
    *a1 = v5;
    return *a1 + ((v10 + 16) & ~(unint64_t)v10);
  }
  else
  {
    if (a2[3])
    {
      v3 = a2[3];
      a1[3] = v3;
      a1[4] = a2[4];
      (**(void (***)(void))(v3 - 8))();
    }
    else
    {
      memcpy(a1, a2, 0x28uLL);
    }
    (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))((char *)a1 + *(int *)(a3 + 36), (char *)a2 + *(int *)(a3 + 36));
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
    return (unint64_t)a1;
  }
}

uint64_t destroy for NetworkResponse(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 36));
}

_QWORD *initializeWithCopy for NetworkResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;

  if (a2[3])
  {
    v3 = a2[3];
    a1[3] = v3;
    a1[4] = a2[4];
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    memcpy(a1, a2, 0x28uLL);
  }
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))((char *)a1 + *(int *)(a3 + 36), (char *)a2 + *(int *)(a3 + 36));
  result = a1;
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 40));
  return result;
}

_QWORD *assignWithCopy for NetworkResponse(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;

  if (a1[3])
  {
    if (a2[3])
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t)a1, a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      memcpy(a1, a2, 0x28uLL);
    }
  }
  else if (a2[3])
  {
    v3 = a2[3];
    a1[3] = v3;
    a1[4] = a2[4];
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    memcpy(a1, a2, 0x28uLL);
  }
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))((char *)a1 + *(int *)(a3 + 36), (char *)a2 + *(int *)(a3 + 36));
  result = a1;
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 40));
  return result;
}

char *initializeWithTake for NetworkResponse(char *a1, char *a2, uint64_t a3)
{
  char *result;

  memcpy(a1, a2, 0x28uLL);
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))(&a1[*(int *)(a3 + 36)], &a2[*(int *)(a3 + 36)]);
  result = a1;
  *(_QWORD *)&a1[*(int *)(a3 + 40)] = *(_QWORD *)&a2[*(int *)(a3 + 40)];
  return result;
}

_QWORD *assignWithTake for NetworkResponse(_QWORD *a1, char *a2, uint64_t a3)
{
  _QWORD *result;

  if (a1[3])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    memcpy(a1, a2, 0x28uLL);
  }
  else
  {
    memcpy(a1, a2, 0x28uLL);
  }
  (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))((char *)a1 + *(int *)(a3 + 36), &a2[*(int *)(a3 + 36)]);
  result = a1;
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)&a2[*(int *)(a3 + 40)];
  return result;
}

uint64_t getEnumTagSinglePayload for NetworkResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3CDAC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (a2 == 2147483646)
  {
    v8 = -1;
    if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
      v8 = *(_QWORD *)(a1 + 24);
    v3 = v8 - 1;
    if (v8 - 1 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (a2 == *(_DWORD *)(v6 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + *(int *)(a3 + 36), a2, v5);
    else
      __break(1u);
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for NetworkResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3CDBE0(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    v4 = *(_QWORD *)(a4 + 16);
    v5 = *(_QWORD *)(v4 - 8);
    if (a3 == *(_DWORD *)(v5 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(result + *(int *)(a4 + 36), a2, a2, v4);
    else
      __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of NetworkRequesting.clientIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NetworkRequesting.clientIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of NetworkRequesting.clientIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of NetworkRequesting.send<A>(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 32)
                                                                                     + **(int **)(a6 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of NetworkRequesting.send<A>(request:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of NetworkRequesting.send<A>(request:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of EventHandle.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EventHandle.complete()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EventSource.register(identifier:queue:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t MetricsLog.payload.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MetricsLog.category.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 8);
}

uint64_t MetricsLog.rtcType.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 10);
}

uint64_t MetricsLog.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = v3;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v13;
  return result;
}

uint64_t MetricsLog.init(payload:category:rtcType:configuration:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, __int16 a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = *a4;
  v9 = a4[1];
  v10 = *((_BYTE *)a4 + 16);
  v11 = a4[3];
  v12 = a4[4];
  v13 = a4[5];
  v14 = a4[6];
  v15 = a4[7];
  v16 = a4[8];
  v17 = a4[9];
  *(_QWORD *)a5 = a1;
  *(_WORD *)(a5 + 8) = a2;
  *(_WORD *)(a5 + 10) = a3;
  *(_QWORD *)(a5 + 16) = result;
  *(_QWORD *)(a5 + 24) = v9;
  *(_BYTE *)(a5 + 32) = v10 & 1;
  *(_QWORD *)(a5 + 40) = v11;
  *(_QWORD *)(a5 + 48) = v12;
  *(_QWORD *)(a5 + 56) = v13;
  *(_QWORD *)(a5 + 64) = v14;
  *(_QWORD *)(a5 + 72) = v15;
  *(_QWORD *)(a5 + 80) = v16;
  *(_QWORD *)(a5 + 88) = v17;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MetricsLog(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for MetricsLog()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MetricsLog(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_WORD *)(a1 + 10) = *((_WORD *)a2 + 5);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  v4 = a2[7];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = a2[8];
  v5 = a2[9];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = a2[10];
  v8 = a2[11];
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 88) = v8;
  return result;
}

uint64_t assignWithCopy for MetricsLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v3;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_WORD *)(a1 + 10) = *((_WORD *)a2 + 5);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = a2[4] & 1;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = a2[6];
  v4 = a2[7];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = a2[8];
  v5 = a2[9];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = a2[10];
  v7 = a2[11];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MetricsLog(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32) & 1;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsLog(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsLog(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsLog()
{
  return &type metadata for MetricsLog;
}

uint64_t dispatch thunk of DateFactory.now()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DateFactory.serverFriendlyTime(date:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t GKCrypto_Role.init()()
{
  return 0;
}

uint64_t GKCrypto_Role.init(rawValue:)(uint64_t a1)
{
  if (!a1)
    return 0;
  if (a1 == 1)
    return 1;
  return a1;
}

BOOL GKCrypto_Role.rawValue.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1 != 0;
  else
    return a1;
}

uint64_t protocol witness for Enum.init() in conformance GKCrypto_Role@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v2;

  result = GKCrypto_Role.init()();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance GKCrypto_Role@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = GKCrypto_Role.init(rawValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4 & 1;
  return result;
}

BOOL protocol witness for Enum.rawValue.getter in conformance GKCrypto_Role()
{
  uint64_t v0;

  return GKCrypto_Role.rawValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8) & 1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_Role@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = GKCrypto_Role.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4 & 1;
  return result;
}

BOOL protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_Role@<W0>(_BOOL8 *a1@<X8>)
{
  uint64_t v1;
  _BOOL8 result;

  result = GKCrypto_Role.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8) & 1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_Role()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_Role()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_Role()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_Role()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return == infix<A>(_:_:)() & 1;
}

uint64_t one-time initialization function for allCases()
{
  uint64_t result;
  uint64_t v1;

  result = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
  *(_QWORD *)(v1 + 16) = 1;
  *(_BYTE *)(v1 + 24) = 1;
  _finalizeUninitializedArray<A>(_:)();
  static GKCrypto_Role.allCases = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
  *(_QWORD *)(v1 + 16) = 1;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 2;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 3;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 4;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 5;
  *(_BYTE *)(v1 + 88) = 1;
  _finalizeUninitializedArray<A>(_:)();
  static GKCrypto_RSVP.Response.allCases = result;
  return result;
}

{
  _QWORD *v0;
  __int128 *v1;
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *updated;
  __int128 *v9;
  __int128 *Group;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *Seed;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;

  v24 = _allocateUninitializedArray<A>(_:)();
  v23 = v0;
  v1 = URLBagKey.initRegisterUserKeyInfo.unsafeMutableAddressor();
  outlined init with copy of String(v1, v23);
  v2 = URLBagKey.completeRegisterUserKeyInfo.unsafeMutableAddressor();
  outlined init with copy of String(v2, v23 + 2);
  v3 = URLBagKey.fetchUserKeyInfo.unsafeMutableAddressor();
  outlined init with copy of String(v3, v23 + 4);
  v4 = URLBagKey.lookupUserKeyInfo.unsafeMutableAddressor();
  outlined init with copy of String(v4, v23 + 6);
  v5 = URLBagKey.lookupMultiUserKeyInfo.unsafeMutableAddressor();
  outlined init with copy of String(v5, v23 + 8);
  v6 = URLBagKey.initCreateGroup.unsafeMutableAddressor();
  outlined init with copy of String(v6, v23 + 10);
  v7 = URLBagKey.completeCreateGroup.unsafeMutableAddressor();
  outlined init with copy of String(v7, v23 + 12);
  updated = URLBagKey.initUpdateGroup.unsafeMutableAddressor();
  outlined init with copy of String(updated, v23 + 14);
  v9 = URLBagKey.completeUpdateGroup.unsafeMutableAddressor();
  outlined init with copy of String(v9, v23 + 16);
  Group = URLBagKey.initFetchGroupBlob.unsafeMutableAddressor();
  outlined init with copy of String(Group, v23 + 18);
  v11 = URLBagKey.completeFetchGroupBlob.unsafeMutableAddressor();
  outlined init with copy of String(v11, v23 + 20);
  v12 = URLBagKey.initRSVP.unsafeMutableAddressor();
  outlined init with copy of String(v12, v23 + 22);
  v13 = URLBagKey.completeRSVP.unsafeMutableAddressor();
  outlined init with copy of String(v13, v23 + 24);
  v14 = URLBagKey.initFetchRSVPQueue.unsafeMutableAddressor();
  outlined init with copy of String(v14, v23 + 26);
  v15 = URLBagKey.completeFetchRSVPQueue.unsafeMutableAddressor();
  outlined init with copy of String(v15, v23 + 28);
  Seed = URLBagKey.initFetchSeedHistory.unsafeMutableAddressor();
  outlined init with copy of String(Seed, v23 + 30);
  v17 = URLBagKey.completeFetchSeedHistory.unsafeMutableAddressor();
  outlined init with copy of String(v17, v23 + 32);
  v18 = URLBagKey.initFetchMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v18, v23 + 34);
  v19 = URLBagKey.completeFetchMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v19, v23 + 36);
  v20 = URLBagKey.initUpdateMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v20, v23 + 38);
  v21 = URLBagKey.completeUpdateMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v21, v23 + 40);
  result = v24;
  _finalizeUninitializedArray<A>(_:)();
  static URLBagKey.allCases = v24;
  return result;
}

uint64_t *GKCrypto_Role.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static GKCrypto_Role.allCases;
}

uint64_t static GKCrypto_Role.allCases.getter()
{
  uint64_t *v1;
  uint64_t v2;

  v1 = GKCrypto_Role.allCases.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t static GKCrypto_Role.allCases.setter(uint64_t a1)
{
  uint64_t *v2;

  v2 = GKCrypto_Role.allCases.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *v2 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*static GKCrypto_Role.allCases.modify())()
{
  GKCrypto_Role.allCases.unsafeMutableAddressor();
  swift_beginAccess();
  return static GKCrypto_Role.allCases.modify;
}

uint64_t static GKCrypto_Role.allCases.modify()
{
  return swift_endAccess();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance GKCrypto_Role@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static GKCrypto_Role.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.ephemeralKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.ephemeralKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupHandle.ephemeralKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.ephemeralKey.modify())()
{
  return GKCrypto_GroupHandle.ephemeralKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.nonce()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_GroupHandle.nonce.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.nonce.modify())()
{
  return GKCrypto_GroupHandle.nonce.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.ciphertexts()
{
  type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupHandle.CiphertextAndTag;
  if (!type metadata singleton initialization cache for GKCrypto_GroupHandle.CiphertextAndTag)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupHandle.ciphertexts.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GKCrypto_GroupHandle.ciphertexts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 32) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GKCrypto_GroupHandle.ciphertexts.modify())()
{
  return GKCrypto_GroupHandle.ciphertexts.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupHandle.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupHandle() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_GroupHandle()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupHandle;
  if (!type metadata singleton initialization cache for GKCrypto_GroupHandle)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupHandle.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupHandle();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupHandle.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupHandle();
  return GKCrypto_GroupHandle.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.CiphertextAndTag.publicKeyHash()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.publicKeyHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.publicKeyHash.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.CiphertextAndTag.publicKeyHash.modify())()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.publicKeyHash.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.CiphertextAndTag.ciphertext()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.ciphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.ciphertext.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.CiphertextAndTag.ciphertext.modify())()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.ciphertext.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.CiphertextAndTag.tag()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.tag.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.tag.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.CiphertextAndTag.tag.modify())()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.tag.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.CiphertextAndTag.keyShareHint()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.keyShareHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.keyShareHint.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupHandle.CiphertextAndTag.keyShareHint.modify())()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.keyShareHint.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupHandle.CiphertextAndTag.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag() + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 32), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  return GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.modify;
}

char *GKCrypto_GroupHandle.CiphertextAndTag.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v18 = a1;
  v19 = 0;
  v16 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  v15 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (char *)&v14 - v15;
  v19 = (char *)&v14 - v15;
  v1 = Data.init()();
  v2 = v17;
  *(_QWORD *)v17 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v17;
  *((_QWORD *)v17 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  v7 = Data.init()();
  v8 = v17;
  *((_QWORD *)v17 + 4) = v7;
  *((_QWORD *)v8 + 5) = v9;
  v10 = Data.init()();
  v11 = v17;
  *((_QWORD *)v17 + 6) = v10;
  *((_QWORD *)v11 + 7) = v12;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupHandle.CiphertextAndTag(v17, v18);
}

uint64_t GKCrypto_GroupHandle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;

  v11 = a1;
  v12 = 0;
  v8[1] = 0;
  v9 = type metadata accessor for GKCrypto_GroupHandle();
  v8[0] = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v10 = (_QWORD *)((char *)v8 - v8[0]);
  v12 = (char *)v8 - v8[0];
  v1 = Data.init()();
  v2 = v10;
  *v10 = v1;
  v2[1] = v3;
  v4 = Data.init()();
  v5 = v10;
  v10[2] = v4;
  v5[3] = v6;
  type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  v10[4] = _allocateUninitializedArray<A>(_:)();
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupHandle((uint64_t)v10, v11);
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.version()
{
  return 0;
}

uint64_t GKCrypto_GroupBlob.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupBlob.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupBlob.version.modify())()
{
  return GKCrypto_GroupBlob.version.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.groupHandle()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.groupHandle.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupBlob.groupHandle.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.groupHandle.modify())()
{
  return GKCrypto_GroupBlob.groupHandle.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.aegroupBlobCiphertext()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.aegroupBlobCiphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_GroupBlob.aegroupBlobCiphertext.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.aegroupBlobCiphertext.modify())()
{
  return GKCrypto_GroupBlob.aegroupBlobCiphertext.modify;
}

char *GKCrypto_GroupBlob.randomizedVerificationKeys.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t *)(v1 + *(int *)(v3 + 32)), v10);
  v4 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v10, v7);
  GKCrypto_GroupBlob.RandomizedVerificationKeys.init()(v7);
  return (char *)outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_GroupBlob()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupBlob;
  if (!type metadata singleton initialization cache for GKCrypto_GroupBlob)
    return swift_getSingletonMetadata();
  return v1;
}

_QWORD *outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v11 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    swift_bridgeObjectRetain();
    *a2 = v5;
    v7 = (char *)a2 + *(int *)(v10 + 20);
    v6 = (char *)a1 + *(int *)(v10 + 20);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v7, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  return a2;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!type metadata singleton initialization cache for GKCrypto_GroupBlob.RandomizedVerificationKeys)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_GroupBlob.randomizedVerificationKeys : GKCrypto_GroupBlob@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupBlob(v2, (uint64_t)v4 - v7);
  GKCrypto_GroupBlob.randomizedVerificationKeys.getter(v8);
  outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v8, v9);
  return outlined destroy of GKCrypto_GroupBlob(v10);
}

uint64_t key path setter for GKCrypto_GroupBlob.randomizedVerificationKeys : GKCrypto_GroupBlob(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys(v1, (char *)&v3 - v5);
  return GKCrypto_GroupBlob.randomizedVerificationKeys.setter(v6);
}

uint64_t GKCrypto_GroupBlob.randomizedVerificationKeys.setter(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_QWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys(v2, (char *)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.RandomizedVerificationKeys?(v7, (_QWORD *)(v1 + *(int *)(v4 + 32)));
  return outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys(v8);
}

char *GKCrypto_GroupBlob.RandomizedVerificationKeys.init()@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;

  v6 = a1;
  v7 = 0;
  v2 = 0;
  v4 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v3 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v5 = (char *)&v2 - v3;
  v7 = (char *)&v2 - v3;
  *(_QWORD *)v5 = _allocateUninitializedArray<A>(_:)();
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v5, v6);
}

uint64_t outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(v5 + 20);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

_QWORD *outlined assign with take of GKCrypto_GroupBlob.RandomizedVerificationKeys?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD *, uint64_t, uint64_t);

  v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v14 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v15)(a2, 1))
  {
    if (v15(a1, 1, v13))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      v8 = (char *)a2 + *(int *)(v13 + 20);
      v7 = (char *)a1 + *(int *)(v13 + 20);
      v4 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(v8, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
    }
  }
  else if (v15(a1, 1, v13))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)a2);
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    swift_bridgeObjectRelease();
    v10 = (char *)a2 + *(int *)(v13 + 20);
    v9 = (char *)a1 + *(int *)(v13 + 20);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 40))(v10, v9);
  }
  return a2;
}

void (*GKCrypto_GroupBlob.randomizedVerificationKeys.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupBlob.randomizedVerificationKeys.getter(v5);
  return GKCrypto_GroupBlob.randomizedVerificationKeys.modify;
}

void GKCrypto_GroupBlob.randomizedVerificationKeys.modify(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(char **)(a1 + 16);
    v3 = *(char **)(a1 + 8);
    outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys(v2, v3);
    GKCrypto_GroupBlob.randomizedVerificationKeys.setter((uint64_t)v3);
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupBlob.randomizedVerificationKeys.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupBlob.hasRandomizedVerificationKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t *)(v0 + *(int *)(v2 + 32)), v10);
  v3 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupBlob.clearRandomizedVerificationKeys()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _QWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_QWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.RandomizedVerificationKeys?(v5, (_QWORD *)(v0 + *(int *)(v3 + 32)));
}

char *GKCrypto_GroupBlob.groupBlobPublicKeys.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t *)(v1 + *(int *)(v3 + 36)), v10);
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v10, v7);
  GKCrypto_GroupBlob.GroupBlobPublicKeys.init()(v7);
  return (char *)outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v10);
}

_QWORD *outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v17;
  uint64_t v18;

  v17 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    outlined copy of Data._Representation(*a1, v6);
    *a2 = v5;
    a2[1] = v6;
    v7 = a1[2];
    v8 = a1[3];
    outlined copy of Data._Representation(v7, v8);
    a2[2] = v7;
    a2[3] = v8;
    v9 = a1[4];
    v10 = a1[5];
    outlined copy of Data._Representation(v9, v10);
    a2[4] = v9;
    a2[5] = v10;
    v11 = a1[6];
    v12 = a1[7];
    outlined copy of Data._Representation(v11, v12);
    a2[6] = v11;
    a2[7] = v12;
    v14 = (char *)a2 + *(int *)(v17 + 32);
    v13 = (char *)a1 + *(int *)(v17 + 32);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v14, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(a2, 0, 1, v17);
  }
  return a2;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!type metadata singleton initialization cache for GKCrypto_GroupBlob.GroupBlobPublicKeys)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_GroupBlob.groupBlobPublicKeys : GKCrypto_GroupBlob@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupBlob(v2, (uint64_t)v4 - v7);
  GKCrypto_GroupBlob.groupBlobPublicKeys.getter(v8);
  outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v8, v9);
  return outlined destroy of GKCrypto_GroupBlob(v10);
}

uint64_t key path setter for GKCrypto_GroupBlob.groupBlobPublicKeys : GKCrypto_GroupBlob(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys(v1, (uint64_t *)((char *)&v3 - v5));
  return GKCrypto_GroupBlob.groupBlobPublicKeys.setter(v6);
}

uint64_t GKCrypto_GroupBlob.groupBlobPublicKeys.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_OWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys(v2, (_QWORD *)((char *)v6 - v6[0]));
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.GroupBlobPublicKeys?(v7, (_OWORD *)(v1 + *(int *)(v4 + 36)));
  return outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys(v8);
}

char *GKCrypto_GroupBlob.GroupBlobPublicKeys.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v18 = a1;
  v19 = 0;
  v16 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v15 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (char *)&v14 - v15;
  v19 = (char *)&v14 - v15;
  v1 = Data.init()();
  v2 = v17;
  *(_QWORD *)v17 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v17;
  *((_QWORD *)v17 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  v7 = Data.init()();
  v8 = v17;
  *((_QWORD *)v17 + 4) = v7;
  *((_QWORD *)v8 + 5) = v9;
  v10 = Data.init()();
  v11 = v17;
  *((_QWORD *)v17 + 6) = v10;
  *((_QWORD *)v11 + 7) = v12;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v17, v18);
}

uint64_t outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v3 = a1 + *(int *)(v5 + 32);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

_OWORD *outlined assign with take of GKCrypto_GroupBlob.GroupBlobPublicKeys?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(_OWORD *, uint64_t, uint64_t);

  v25 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v27)(a2, 1))
  {
    if (v27(a1, 1, v25))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      a2[1] = a1[1];
      a2[2] = a1[2];
      a2[3] = a1[3];
      v20 = (char *)a2 + *(int *)(v25 + 32);
      v19 = (char *)a1 + *(int *)(v25 + 32);
      v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v16 - 8) + 32))(v20, v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a2, 0, 1, v25);
    }
  }
  else if (v27(a1, 1, v25))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)a2);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    *((_QWORD *)a2 + 1) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
    *((_QWORD *)a2 + 3) = v5;
    outlined consume of Data._Representation(v6, v7);
    v8 = *((_QWORD *)a1 + 5);
    v9 = *((_QWORD *)a2 + 4);
    v10 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
    *((_QWORD *)a2 + 5) = v8;
    outlined consume of Data._Representation(v9, v10);
    v11 = *((_QWORD *)a1 + 7);
    v12 = *((_QWORD *)a2 + 6);
    v13 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 6) = *((_QWORD *)a1 + 6);
    *((_QWORD *)a2 + 7) = v11;
    outlined consume of Data._Representation(v12, v13);
    v22 = (char *)a2 + *(int *)(v25 + 32);
    v21 = (char *)a1 + *(int *)(v25 + 32);
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 40))(v22, v21);
  }
  return a2;
}

void (*GKCrypto_GroupBlob.groupBlobPublicKeys.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupBlob.groupBlobPublicKeys.getter(v5);
  return GKCrypto_GroupBlob.groupBlobPublicKeys.modify;
}

void GKCrypto_GroupBlob.groupBlobPublicKeys.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = *(uint64_t **)(a1 + 8);
    outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys(v2, v3);
    GKCrypto_GroupBlob.groupBlobPublicKeys.setter((uint64_t)v3);
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupBlob.groupBlobPublicKeys.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupBlob.hasGroupBlobPublicKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t *)(v0 + *(int *)(v2 + 36)), v10);
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupBlob.clearGroupBlobPublicKeys()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _OWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_OWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.GroupBlobPublicKeys?(v5, (_OWORD *)(v0 + *(int *)(v3 + 36)));
}

char *GKCrypto_GroupBlob.groupBlobSignatures.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t *)(v1 + *(int *)(v3 + 40)), v10);
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v10, v7);
  GKCrypto_GroupBlob.GroupBlobSignatures.init()(v7);
  return (char *)outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v10);
}

_QWORD *outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    outlined copy of Data._Representation(*a1, v6);
    *a2 = v5;
    a2[1] = v6;
    v7 = a1[2];
    v8 = a1[3];
    outlined copy of Data._Representation(v7, v8);
    a2[2] = v7;
    a2[3] = v8;
    v9 = a1[4];
    v10 = a1[5];
    outlined copy of Data._Representation(v9, v10);
    a2[4] = v9;
    a2[5] = v10;
    v12 = (char *)a2 + *(int *)(v15 + 28);
    v11 = (char *)a1 + *(int *)(v15 + 28);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v12, v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
  }
  return a2;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!type metadata singleton initialization cache for GKCrypto_GroupBlob.GroupBlobSignatures)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_GroupBlob.groupBlobSignatures : GKCrypto_GroupBlob@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupBlob(v2, (uint64_t)v4 - v7);
  GKCrypto_GroupBlob.groupBlobSignatures.getter(v8);
  outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v8, v9);
  return outlined destroy of GKCrypto_GroupBlob(v10);
}

uint64_t key path setter for GKCrypto_GroupBlob.groupBlobSignatures : GKCrypto_GroupBlob(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures(v1, (uint64_t *)((char *)&v3 - v5));
  return GKCrypto_GroupBlob.groupBlobSignatures.setter(v6);
}

uint64_t GKCrypto_GroupBlob.groupBlobSignatures.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_OWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures(v2, (_QWORD *)((char *)v6 - v6[0]));
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.GroupBlobSignatures?(v7, (_OWORD *)(v1 + *(int *)(v4 + 40)));
  return outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures(v8);
}

char *GKCrypto_GroupBlob.GroupBlobSignatures.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;

  v15 = a1;
  v16 = 0;
  v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v12 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v14 = (char *)&v11 - v12;
  v16 = (char *)&v11 - v12;
  v1 = Data.init()();
  v2 = v14;
  *(_QWORD *)v14 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v14;
  *((_QWORD *)v14 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  v7 = Data.init()();
  v8 = v14;
  *((_QWORD *)v14 + 4) = v7;
  *((_QWORD *)v8 + 5) = v9;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v14, v15);
}

uint64_t outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v3 = a1 + *(int *)(v5 + 28);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

_OWORD *outlined assign with take of GKCrypto_GroupBlob.GroupBlobSignatures?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_OWORD *, uint64_t, uint64_t);

  v22 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v23 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v24)(a2, 1))
  {
    if (v24(a1, 1, v22))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      a2[1] = a1[1];
      a2[2] = a1[2];
      v17 = (char *)a2 + *(int *)(v22 + 28);
      v16 = (char *)a1 + *(int *)(v22 + 28);
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32))(v17, v16);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(a2, 0, 1, v22);
    }
  }
  else if (v24(a1, 1, v22))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)a2);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    *((_QWORD *)a2 + 1) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
    *((_QWORD *)a2 + 3) = v5;
    outlined consume of Data._Representation(v6, v7);
    v8 = *((_QWORD *)a1 + 5);
    v9 = *((_QWORD *)a2 + 4);
    v10 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
    *((_QWORD *)a2 + 5) = v8;
    outlined consume of Data._Representation(v9, v10);
    v19 = (char *)a2 + *(int *)(v22 + 28);
    v18 = (char *)a1 + *(int *)(v22 + 28);
    v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))(v19, v18);
  }
  return a2;
}

void (*GKCrypto_GroupBlob.groupBlobSignatures.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupBlob.groupBlobSignatures.getter(v5);
  return GKCrypto_GroupBlob.groupBlobSignatures.modify;
}

void GKCrypto_GroupBlob.groupBlobSignatures.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = *(uint64_t **)(a1 + 8);
    outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures(v2, v3);
    GKCrypto_GroupBlob.groupBlobSignatures.setter((uint64_t)v3);
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupBlob.groupBlobSignatures.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupBlob.hasGroupBlobSignatures.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t *)(v0 + *(int *)(v2 + 40)), v10);
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupBlob.clearGroupBlobSignatures()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _OWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_OWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupBlob();
  outlined assign with take of GKCrypto_GroupBlob.GroupBlobSignatures?(v5, (_OWORD *)(v0 + *(int *)(v3 + 40)));
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupBlob.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupBlob.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupBlob();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupBlob.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupBlob();
  return GKCrypto_GroupBlob.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.RandomizedVerificationKeys.randomizedVerificationKeys()
{
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.randomizedVerificationKeys.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.randomizedVerificationKeys.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRetain();
  *v1 = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GKCrypto_GroupBlob.RandomizedVerificationKeys.randomizedVerificationKeys.modify())()
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.randomizedVerificationKeys.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 20), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobPublicKeys.groupVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.groupVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.groupVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobPublicKeys.groupVerificationKey.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.groupVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobPublicKeys.adminVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.adminVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.adminVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobPublicKeys.adminVerificationKey.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.adminVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobPublicKeys.groupPublicEncryptionKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.groupPublicEncryptionKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.groupPublicEncryptionKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobPublicKeys.groupPublicEncryptionKey.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.groupPublicEncryptionKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobPublicKeys.adminPublicEncryptionKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.adminPublicEncryptionKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.adminPublicEncryptionKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobPublicKeys.adminPublicEncryptionKey.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.adminPublicEncryptionKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 32), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobSignatures.currentGroupAdminSignature()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.currentGroupAdminSignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.currentGroupAdminSignature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobSignatures.currentGroupAdminSignature.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.currentGroupAdminSignature.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobSignatures.previousGroupAdminSignature()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.previousGroupAdminSignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.previousGroupAdminSignature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobSignatures.previousGroupAdminSignature.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.previousGroupAdminSignature.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobSignatures.currentMemberSignature()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.currentMemberSignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.currentMemberSignature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobSignatures.currentMemberSignature.modify())()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.currentMemberSignature.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  return GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.modify;
}

uint64_t GKCrypto_GroupBlob.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v19 = a1;
  v20 = 0;
  v15 = 0;
  v14 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v11 = (*(_QWORD *)(*((_QWORD *)v14 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (uint64_t)&v11 - v11;
  v20 = (char *)&v11 - v11;
  *(_DWORD *)v18 = 0;
  v1 = Data.init()();
  v2 = v18;
  *(_QWORD *)(v18 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v18;
  *(_QWORD *)(v18 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  UnknownStorage.init()();
  v12 = v14[8];
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys()
                                                           - 8)
                                               + 56);
  v17 = 1;
  v7(v18 + v12, 1);
  v13 = v14[9];
  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 8) + 56))(v18 + v13, v17);
  v16 = v14[10];
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 8) + 56))(v18 + v16, v17);
  return outlined init with take of GKCrypto_GroupBlob(v18, v19);
}

uint64_t variable initialization expression of GKCrypto_GroupBlob._randomizedVerificationKeys@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_GroupBlob._groupBlobPublicKeys@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_GroupBlob._groupBlobSignatures@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_AdminGroupBlob.adminGroupHandleBlob()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminGroupBlob.adminGroupHandleBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_AdminGroupBlob.adminGroupHandleBlob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminGroupBlob.adminGroupHandleBlob.modify())()
{
  return GKCrypto_AdminGroupBlob.adminGroupHandleBlob.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminGroupBlob.adminGroupAeblobCiphertext()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminGroupBlob.adminGroupAeblobCiphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_AdminGroupBlob.adminGroupAeblobCiphertext.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminGroupBlob.adminGroupAeblobCiphertext.modify())()
{
  return GKCrypto_AdminGroupBlob.adminGroupAeblobCiphertext.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminGroupBlob.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_AdminGroupBlob.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_AdminGroupBlob() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_AdminGroupBlob()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_AdminGroupBlob;
  if (!type metadata singleton initialization cache for GKCrypto_AdminGroupBlob)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_AdminGroupBlob.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_AdminGroupBlob();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_AdminGroupBlob.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_AdminGroupBlob();
  return GKCrypto_AdminGroupBlob.unknownFields.modify;
}

char *GKCrypto_AdminGroupBlob.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (char *)&v8 - v9;
  v13 = (char *)&v8 - v9;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)v11 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v11;
  *((_QWORD *)v11 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_AdminGroupBlob(v11, v12);
}

char *outlined init with take of GKCrypto_AdminGroupBlob(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  v4 = *(int *)(type metadata accessor for GKCrypto_AdminGroupBlob() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_VersionedSeed.groupVersion()
{
  return 0;
}

uint64_t GKCrypto_VersionedSeed.groupVersion.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_VersionedSeed.groupVersion.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_VersionedSeed.groupVersion.modify())()
{
  return GKCrypto_VersionedSeed.groupVersion.modify;
}

uint64_t variable initialization expression of GKCrypto_VersionedSeed.seed()
{
  return Data.init()();
}

uint64_t GKCrypto_VersionedSeed.seed.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_VersionedSeed.seed.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_VersionedSeed.seed.modify())()
{
  return GKCrypto_VersionedSeed.seed.modify;
}

uint64_t variable initialization expression of GKCrypto_VersionedSeed.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_VersionedSeed.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_VersionedSeed() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_VersionedSeed()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_VersionedSeed;
  if (!type metadata singleton initialization cache for GKCrypto_VersionedSeed)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_VersionedSeed.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_VersionedSeed.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_VersionedSeed();
  return GKCrypto_VersionedSeed.unknownFields.modify;
}

uint64_t GKCrypto_VersionedSeed.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v9 = a1;
  v10 = 0;
  v7 = type metadata accessor for GKCrypto_VersionedSeed();
  v6 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v8 = (uint64_t)&v5 - v6;
  v10 = (char *)&v5 - v6;
  *(_DWORD *)v8 = 0;
  v1 = Data.init()();
  v2 = v8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_VersionedSeed(v8, v9);
}

uint64_t outlined init with take of GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(int *)(type metadata accessor for GKCrypto_VersionedSeed() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.version()
{
  return 0;
}

uint64_t GKCrypto_UserKeys.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_UserKeys.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_UserKeys.version.modify())()
{
  return GKCrypto_UserKeys.version.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.encryptionKey()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.encryptionKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_UserKeys.encryptionKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.encryptionKey.modify())()
{
  return GKCrypto_UserKeys.encryptionKey.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.verificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_UserKeys.verificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.verificationKey.modify())()
{
  return GKCrypto_UserKeys.verificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.encryptionKeySignature()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.encryptionKeySignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_UserKeys.encryptionKeySignature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.encryptionKeySignature.modify())()
{
  return GKCrypto_UserKeys.encryptionKeySignature.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.verificationKeySelfSignature()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.verificationKeySelfSignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_UserKeys.verificationKeySelfSignature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.verificationKeySelfSignature.modify())()
{
  return GKCrypto_UserKeys.verificationKeySelfSignature.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.verificationKeyExternalSignatures()
{
  type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!type metadata singleton initialization cache for GKCrypto_UserKeys.SignatureVerificationKeyPair)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_UserKeys.verificationKeyExternalSignatures.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GKCrypto_UserKeys.verificationKeyExternalSignatures.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 72) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GKCrypto_UserKeys.verificationKeyExternalSignatures.modify())()
{
  return GKCrypto_UserKeys.verificationKeyExternalSignatures.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.metadata()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.metadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t GKCrypto_UserKeys.metadata.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.metadata.modify())()
{
  return GKCrypto_UserKeys.metadata.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_UserKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_UserKeys() + 44);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_UserKeys()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_UserKeys;
  if (!type metadata singleton initialization cache for GKCrypto_UserKeys)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_UserKeys.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_UserKeys();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 44), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_UserKeys.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_UserKeys();
  return GKCrypto_UserKeys.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.SignatureVerificationKeyPair.verificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.verificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.SignatureVerificationKeyPair.verificationKey.modify())()
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.verificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.SignatureVerificationKeyPair.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_UserKeys.SignatureVerificationKeyPair.signature.modify())()
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.modify;
}

char *GKCrypto_UserKeys.SignatureVerificationKeyPair.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (char *)&v8 - v9;
  v13 = (char *)&v8 - v9;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)v11 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v11;
  *((_QWORD *)v11 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_UserKeys.SignatureVerificationKeyPair(v11, v12);
}

char *outlined init with take of GKCrypto_UserKeys.SignatureVerificationKeyPair(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  v4 = *(int *)(type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t GKCrypto_UserKeys.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v20 = a1;
  v21 = 0;
  v17[1] = 0;
  v18 = type metadata accessor for GKCrypto_UserKeys();
  v17[0] = (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v19 = (uint64_t)v17 - v17[0];
  v21 = (char *)v17 - v17[0];
  *(_DWORD *)v19 = 0;
  v1 = Data.init()();
  v2 = v19;
  *(_QWORD *)(v19 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v19;
  *(_QWORD *)(v19 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = Data.init()();
  v8 = v19;
  *(_QWORD *)(v19 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v9;
  v10 = Data.init()();
  v11 = v19;
  *(_QWORD *)(v19 + 56) = v10;
  *(_QWORD *)(v11 + 64) = v12;
  type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  *(_QWORD *)(v19 + 72) = _allocateUninitializedArray<A>(_:)();
  v13 = Data.init()();
  v14 = v19;
  *(_QWORD *)(v19 + 80) = v13;
  *(_QWORD *)(v14 + 88) = v15;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_UserKeys(v19, v20);
}

uint64_t outlined init with take of GKCrypto_UserKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  v4 = *(int *)(type metadata accessor for GKCrypto_UserKeys() + 44);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.users()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.User();
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.User()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAETextToSign.User;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAETextToSign.User)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupAETextToSign.users.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GKCrypto_GroupAETextToSign.users.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRetain();
  *v1 = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GKCrypto_GroupAETextToSign.users.modify())()
{
  return GKCrypto_GroupAETextToSign.users.modify;
}

uint64_t GKCrypto_GroupAETextToSign.preliminarySeed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (uint64_t *)((char *)&v6 - v8);
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v1 + *(int *)(v3 + 24)), v10);
  v4 = type metadata accessor for GKCrypto_VersionedSeed();
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_VersionedSeed((uint64_t)v10, v7);
  GKCrypto_VersionedSeed.init()(v7);
  return outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAETextToSign;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAETextToSign)
    return swift_getSingletonMetadata();
  return v1;
}

_QWORD *outlined init with copy of GKCrypto_VersionedSeed?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for GKCrypto_VersionedSeed();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v12 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)a1;
    v5 = a1[1];
    v6 = a1[2];
    outlined copy of Data._Representation(v5, v6);
    a2[1] = v5;
    a2[2] = v6;
    v8 = (char *)a2 + *(int *)(v11 + 24);
    v7 = (char *)a1 + *(int *)(v11 + 24);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v8, v7);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_VersionedSeed?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_VersionedSeed();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v3 = a1 + *(int *)(v5 + 24);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t key path getter for GKCrypto_GroupAETextToSign.preliminarySeed : GKCrypto_GroupAETextToSign@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupAETextToSign(v2, (char *)v4 - v7);
  GKCrypto_GroupAETextToSign.preliminarySeed.getter(v8);
  outlined init with take of GKCrypto_VersionedSeed(v8, v9);
  return outlined destroy of GKCrypto_GroupAETextToSign(v10);
}

uint64_t key path setter for GKCrypto_GroupAETextToSign.preliminarySeed : GKCrypto_GroupAETextToSign(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_VersionedSeed(v1, (uint64_t)&v3 - v5);
  return GKCrypto_GroupAETextToSign.preliminarySeed.setter(v6);
}

uint64_t GKCrypto_GroupAETextToSign.preliminarySeed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_DWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_VersionedSeed(v2, (uint64_t)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined assign with take of GKCrypto_VersionedSeed?(v7, (_DWORD *)(v1 + *(int *)(v4 + 24)));
  return outlined destroy of GKCrypto_VersionedSeed(v8);
}

uint64_t outlined init with copy of GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(int *)(type metadata accessor for GKCrypto_VersionedSeed() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v6, a1 + v6);
  return a2;
}

_DWORD *outlined assign with take of GKCrypto_VersionedSeed?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_DWORD *, uint64_t, uint64_t);

  v16 = type metadata accessor for GKCrypto_VersionedSeed();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v18)(a2, 1))
  {
    if (v18(a1, 1, v16))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
      v11 = (char *)a2 + *(int *)(v16 + 24);
      v10 = (char *)a1 + *(int *)(v16 + 24);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32))(v11, v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, v16);
    }
  }
  else if (v18(a1, 1, v16))
  {
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)a2);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = *((_QWORD *)a1 + 2);
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
    *((_QWORD *)a2 + 2) = v2;
    outlined consume of Data._Representation(v3, v4);
    v13 = (char *)a2 + *(int *)(v16 + 24);
    v12 = (char *)a1 + *(int *)(v16 + 24);
    v5 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 40))(v13, v12);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_VersionedSeed(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = *(int *)(type metadata accessor for GKCrypto_VersionedSeed() + 24);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

void (*GKCrypto_GroupAETextToSign.preliminarySeed.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  void *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupAETextToSign.preliminarySeed.getter((uint64_t)v5);
  return GKCrypto_GroupAETextToSign.preliminarySeed.modify;
}

void GKCrypto_GroupAETextToSign.preliminarySeed.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 16);
    v3 = *(void **)(a1 + 8);
    outlined init with copy of GKCrypto_VersionedSeed((uint64_t)v2, (uint64_t)v3);
    GKCrypto_GroupAETextToSign.preliminarySeed.setter((uint64_t)v3);
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupAETextToSign.preliminarySeed.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupAETextToSign.hasPreliminarySeed.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v0 + *(int *)(v2 + 24)), v10);
  v3 = type metadata accessor for GKCrypto_VersionedSeed();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupAETextToSign.clearPreliminarySeed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _DWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_DWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined assign with take of GKCrypto_VersionedSeed?(v5, (_DWORD *)(v0 + *(int *)(v3 + 24)));
}

char *GKCrypto_GroupAETextToSign.groupAssociatedData.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t *)(v1 + *(int *)(v3 + 28)), v10);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(v10, v7);
  GKCrypto_GroupAETextToSign.GroupAssociatedData.init()(v7);
  return (char *)outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v10);
}

_QWORD *outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *);
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;

  v21 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v22 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v9 = *a1;
    v10 = a1[1];
    outlined copy of Data._Representation(*a1, v10);
    *a2 = v9;
    a2[1] = v10;
    v12 = (char *)a2 + *(int *)(v21 + 20);
    v11 = (char *)a1 + *(int *)(v21 + 20);
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 16);
    v14(v12, v11);
    v15 = (_QWORD *)((char *)a2 + *(int *)(v21 + 24));
    v16 = (uint64_t *)((char *)a1 + *(int *)(v21 + 24));
    v17 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 48))(v16, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      v5 = *v16;
      v6 = v16[1];
      outlined copy of Data._Representation(*v16, v6);
      *v15 = v5;
      v15[1] = v6;
      v7 = v16[2];
      v8 = v16[3];
      outlined copy of Data._Representation(v7, v8);
      v15[2] = v7;
      v15[3] = v8;
      ((void (*)(char *, char *, uint64_t))v14)((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(a2, 0, 1, v21);
  }
  return a2;
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAETextToSign.GroupAssociatedData)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_GroupAETextToSign.groupAssociatedData : GKCrypto_GroupAETextToSign@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char *v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupAETextToSign(v2, (char *)v4 - v7);
  GKCrypto_GroupAETextToSign.groupAssociatedData.getter(v8);
  outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(v8, v9);
  return outlined destroy of GKCrypto_GroupAETextToSign(v10);
}

uint64_t key path setter for GKCrypto_GroupAETextToSign.groupAssociatedData : GKCrypto_GroupAETextToSign(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v1, (uint64_t *)((char *)&v3 - v5));
  return GKCrypto_GroupAETextToSign.groupAssociatedData.setter(v6);
}

uint64_t GKCrypto_GroupAETextToSign.groupAssociatedData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_QWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v2, (_QWORD *)((char *)v6 - v6[0]));
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined assign with take of GKCrypto_GroupAETextToSign.GroupAssociatedData?(v7, (_QWORD *)(v1 + *(int *)(v4 + 28)));
  return outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v8);
}

char *GKCrypto_GroupAETextToSign.GroupAssociatedData.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v9 = 0;
  v8 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v7 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v6 - v7;
  v13 = (char *)&v6 - v7;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)v11 = v1;
  *((_QWORD *)v2 + 1) = v3;
  UnknownStorage.init()();
  v10 = *(int *)(v8 + 24);
  v4 = type metadata accessor for GKCrypto_AdminGroupBlob();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(&v11[v10], 1);
  return outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(v11, v12);
}

uint64_t outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v2 = a1 + *(int *)(v8 + 20);
    v3 = type metadata accessor for UnknownStorage();
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v4(v2);
    v5 = a1 + *(int *)(v8 + 24);
    v6 = type metadata accessor for GKCrypto_AdminGroupBlob();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      ((void (*)(uint64_t, uint64_t))v4)(v5 + *(int *)(v6 + 24), v3);
    }
  }
  return a1;
}

char *outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(char *a1, char *a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(char *, char *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v9 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v5 = *(int *)(v9 + 20);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32);
  v8(&a2[v5], &a1[v5]);
  v10 = *(int *)(v9 + 24);
  v12 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(&a1[v10], 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy(&a2[v10], &a1[v10], *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = &a2[v10];
    *(_OWORD *)v4 = *(_OWORD *)&a1[v10];
    *((_OWORD *)v4 + 1) = *(_OWORD *)&a1[v10 + 16];
    ((void (*)(char *, char *, uint64_t))v8)(&a2[v10 + *(int *)(v12 + 24)], &a1[v10 + *(int *)(v12 + 24)], v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(&a2[v10], 0, 1, v12);
  }
  return a2;
}

uint64_t *outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, char *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v9 = *a1;
  v10 = a1[1];
  outlined copy of Data._Representation(*a1, v10);
  *a2 = v9;
  a2[1] = v10;
  v15 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v11 = *(int *)(v15 + 20);
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 16);
  v14((char *)a2 + v11, (char *)a1 + v11);
  v16 = *(int *)(v15 + 24);
  v18 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))((char *)a1 + v16, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy((char *)a2 + v16, (char *)a1 + v16, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = *(uint64_t *)((char *)a1 + v16);
    v5 = *(uint64_t *)((char *)a1 + v16 + 8);
    outlined copy of Data._Representation(v4, v5);
    v8 = (uint64_t *)((char *)a2 + v16);
    *v8 = v4;
    v8[1] = v5;
    v6 = *(uint64_t *)((char *)a1 + v16 + 16);
    v7 = *(uint64_t *)((char *)a1 + v16 + 24);
    outlined copy of Data._Representation(v6, v7);
    v8[2] = v6;
    v8[3] = v7;
    ((void (*)(char *, char *, uint64_t))v14)((char *)a2 + v16 + *(int *)(v18 + 24), (char *)a1 + v16 + *(int *)(v18 + 24), v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))((char *)a2 + v16, 0, 1, v18);
  }
  return a2;
}

_QWORD *outlined assign with take of GKCrypto_GroupAETextToSign.GroupAssociatedData?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *);
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *);
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(_OWORD *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(_QWORD *, uint64_t, uint64_t);

  v37 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v39)(a2, 1))
  {
    if (v39(a1, 1, v37))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      v18 = (char *)a2 + *(int *)(v37 + 20);
      v17 = (char *)a1 + *(int *)(v37 + 20);
      v19 = type metadata accessor for UnknownStorage();
      v20 = *(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 32);
      v20(v18, v17);
      __dst = (_OWORD *)((char *)a2 + *(int *)(v37 + 24));
      __src = (_OWORD *)((char *)a1 + *(int *)(v37 + 24));
      v23 = type metadata accessor for GKCrypto_AdminGroupBlob();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v24 + 48))(__src, 1))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        *__dst = *__src;
        __dst[1] = __src[1];
        ((void (*)(char *, char *, uint64_t))v20)((char *)__dst + *(int *)(v23 + 24), (char *)__src + *(int *)(v23 + 24), v19);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(a2, 0, 1, v37);
    }
  }
  else if (v39(a1, 1, v37))
  {
    outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)a2);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v2 = a1[1];
    v3 = *a2;
    v4 = a2[1];
    *a2 = *a1;
    a2[1] = v2;
    outlined consume of Data._Representation(v3, v4);
    v26 = (char *)a2 + *(int *)(v37 + 20);
    v25 = (char *)a1 + *(int *)(v37 + 20);
    v27 = type metadata accessor for UnknownStorage();
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(void (**)(char *, char *))(v28 + 40);
    v29(v26, v25);
    v31 = (_OWORD *)((char *)a2 + *(int *)(v37 + 24));
    v30 = (_OWORD *)((char *)a1 + *(int *)(v37 + 24));
    v32 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v34)(v31, 1))
    {
      if (v34(v30, 1, v32))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(v31, v30, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        *v31 = *v30;
        v31[1] = v30[1];
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)v31 + *(int *)(v32 + 24), (char *)v30 + *(int *)(v32 + 24), v27);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v32);
      }
    }
    else if (v34(v30, 1, v32))
    {
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v31);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(v31, v30, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v5 = *((_QWORD *)v30 + 1);
      v6 = *(_QWORD *)v31;
      v7 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v30;
      *((_QWORD *)v31 + 1) = v5;
      outlined consume of Data._Representation(v6, v7);
      v8 = *((_QWORD *)v30 + 3);
      v9 = *((_QWORD *)v31 + 2);
      v10 = *((_QWORD *)v31 + 3);
      *((_QWORD *)v31 + 2) = *((_QWORD *)v30 + 2);
      *((_QWORD *)v31 + 3) = v8;
      outlined consume of Data._Representation(v9, v10);
      ((void (*)(char *, char *, uint64_t))v29)((char *)v31 + *(int *)(v32 + 24), (char *)v30 + *(int *)(v32 + 24), v27);
    }
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_AdminGroupBlob(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v3 = *(int *)(type metadata accessor for GKCrypto_AdminGroupBlob() + 24);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v2 = *(int *)(v5 + 20);
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1 + v2);
  v6 = *(int *)(v5 + 24);
  v8 = type metadata accessor for GKCrypto_AdminGroupBlob();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + v6, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v6), *(_QWORD *)(a1 + v6 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v6 + 16), *(_QWORD *)(a1 + v6 + 24));
    ((void (*)(uint64_t, uint64_t))v4)(a1 + v6 + *(int *)(v8 + 24), v3);
  }
  return a1;
}

void (*GKCrypto_GroupAETextToSign.groupAssociatedData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData() - 8)
                     + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupAETextToSign.groupAssociatedData.getter(v5);
  return GKCrypto_GroupAETextToSign.groupAssociatedData.modify;
}

void GKCrypto_GroupAETextToSign.groupAssociatedData.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = *(uint64_t **)(a1 + 8);
    outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v2, v3);
    GKCrypto_GroupAETextToSign.groupAssociatedData.setter((uint64_t)v3);
    outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupAETextToSign.groupAssociatedData.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupAETextToSign.hasGroupAssociatedData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t *)(v0 + *(int *)(v2 + 28)), v10);
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupAETextToSign.clearGroupAssociatedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _QWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_QWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined assign with take of GKCrypto_GroupAETextToSign.GroupAssociatedData?(v5, (_QWORD *)(v0 + *(int *)(v3 + 28)));
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAETextToSign.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupAETextToSign.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 20), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAETextToSign.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAETextToSign();
  return GKCrypto_GroupAETextToSign.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.User.groupKitID()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAETextToSign.User.groupKitID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupAETextToSign.User.groupKitID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAETextToSign.User.groupKitID.modify())()
{
  return GKCrypto_GroupAETextToSign.User.groupKitID.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.User.userKeysBlob()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAETextToSign.User.userKeysBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_GroupAETextToSign.User.userKeysBlob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAETextToSign.User.userKeysBlob.modify())()
{
  return GKCrypto_GroupAETextToSign.User.userKeysBlob.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.User.role()
{
  return 0;
}

uint64_t GKCrypto_GroupAETextToSign.User.role.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t GKCrypto_GroupAETextToSign.User.role.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*GKCrypto_GroupAETextToSign.User.role.modify())()
{
  return GKCrypto_GroupAETextToSign.User.role.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.User.keyShare()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAETextToSign.User.keyShare.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t GKCrypto_GroupAETextToSign.User.keyShare.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAETextToSign.User.keyShare.modify())()
{
  return GKCrypto_GroupAETextToSign.User.keyShare.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.User.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAETextToSign.User.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign.User() + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupAETextToSign.User.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 32), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAETextToSign.User.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.User();
  return GKCrypto_GroupAETextToSign.User.unknownFields.modify;
}

uint64_t GKCrypto_GroupAETextToSign.User.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;

  v15 = a1;
  v16 = 0;
  v13 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
  v12 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v14 = (uint64_t *)((char *)&v11 - v12);
  v16 = (char *)&v11 - v12;
  v1 = Data.init()();
  v2 = v14;
  *v14 = v1;
  v2[1] = v3;
  v4 = Data.init()();
  v5 = v14;
  v14[2] = v4;
  v5[3] = v6;
  v5[4] = 0;
  *((_BYTE *)v5 + 40) = 1;
  v7 = Data.init()();
  v8 = v14;
  v14[6] = v7;
  v8[7] = v9;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupAETextToSign.User((uint64_t)v14, v15);
}

uint64_t outlined init with take of GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign.User() + 32);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.GroupAssociatedData.originatorID()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.originatorID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.originatorID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAETextToSign.GroupAssociatedData.originatorID.modify())()
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.originatorID.modify;
}

char *GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined init with copy of GKCrypto_AdminGroupBlob?((uint64_t *)(v1 + *(int *)(v3 + 24)), v10);
  v4 = type metadata accessor for GKCrypto_AdminGroupBlob();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_AdminGroupBlob(v10, v7);
  GKCrypto_AdminGroupBlob.init()(v7);
  return (char *)outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v10);
}

_QWORD *outlined init with copy of GKCrypto_AdminGroupBlob?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v13;
  uint64_t v14;

  v13 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v14 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    outlined copy of Data._Representation(*a1, v6);
    *a2 = v5;
    a2[1] = v6;
    v7 = a1[2];
    v8 = a1[3];
    outlined copy of Data._Representation(v7, v8);
    a2[2] = v7;
    a2[3] = v8;
    v10 = (char *)a2 + *(int *)(v13 + 24);
    v9 = (char *)a1 + *(int *)(v13 + 24);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v10, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_AdminGroupBlob?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_AdminGroupBlob();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    v3 = a1 + *(int *)(v5 + 24);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t key path getter for GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob : GKCrypto_GroupAETextToSign.GroupAssociatedData@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminGroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v2, (_QWORD *)((char *)v4 - v7));
  GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.getter(v8);
  outlined init with take of GKCrypto_AdminGroupBlob(v8, v9);
  return outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData(v10);
}

uint64_t key path setter for GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob : GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminGroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_AdminGroupBlob(v1, (uint64_t *)((char *)&v3 - v5));
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.setter(v6);
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_OWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_AdminGroupBlob(v2, (_QWORD *)((char *)v6 - v6[0]));
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_AdminGroupBlob();
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined assign with take of GKCrypto_AdminGroupBlob?(v7, (_OWORD *)(v1 + *(int *)(v4 + 24)));
  return outlined destroy of GKCrypto_AdminGroupBlob(v8);
}

uint64_t *outlined init with copy of GKCrypto_AdminGroupBlob(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = a1[2];
  v7 = a1[3];
  outlined copy of Data._Representation(v6, v7);
  a2[2] = v6;
  a2[3] = v7;
  v8 = *(int *)(type metadata accessor for GKCrypto_AdminGroupBlob() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v8, (char *)a1 + v8);
  return a2;
}

_OWORD *outlined assign with take of GKCrypto_AdminGroupBlob?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_OWORD *, uint64_t, uint64_t);

  v19 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v21)(a2, 1))
  {
    if (v21(a1, 1, v19))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      a2[1] = a1[1];
      v14 = (char *)a2 + *(int *)(v19 + 24);
      v13 = (char *)a1 + *(int *)(v19 + 24);
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v10 - 8) + 32))(v14, v13);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(a2, 0, 1, v19);
    }
  }
  else if (v21(a1, 1, v19))
  {
    outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)a2);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    *((_QWORD *)a2 + 1) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
    *((_QWORD *)a2 + 3) = v5;
    outlined consume of Data._Representation(v6, v7);
    v16 = (char *)a2 + *(int *)(v19 + 24);
    v15 = (char *)a1 + *(int *)(v19 + 24);
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 40))(v16, v15);
  }
  return a2;
}

void (*GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminGroupBlob() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.getter(v5);
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.modify;
}

void GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = *(uint64_t **)(a1 + 8);
    outlined init with copy of GKCrypto_AdminGroupBlob(v2, v3);
    GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.setter((uint64_t)v3);
    outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupAETextToSign.GroupAssociatedData.adminGroupBlob.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupAETextToSign.GroupAssociatedData.hasAdminGroupBlob.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined init with copy of GKCrypto_AdminGroupBlob?((uint64_t *)(v0 + *(int *)(v2 + 24)), v10);
  v3 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupAETextToSign.GroupAssociatedData.clearAdminGroupBlob()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _OWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_OWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_AdminGroupBlob();
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined assign with take of GKCrypto_AdminGroupBlob?(v5, (_OWORD *)(v0 + *(int *)(v3 + 24)));
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 20), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign.GroupAssociatedData._adminGroupBlob@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_AdminGroupBlob();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

char *GKCrypto_GroupAETextToSign.init()@<X0>(char *a1@<X8>)
{
  void (*v1)(char *, uint64_t);
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v8 = 0;
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign();
  v5 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v11 = (char *)&v4 - v5;
  v13 = (char *)&v4 - v5;
  type metadata accessor for GKCrypto_GroupAETextToSign.User();
  *(_QWORD *)v11 = _allocateUninitializedArray<A>(_:)();
  UnknownStorage.init()();
  v6 = *(int *)(v7 + 24);
  v1 = *(void (**)(char *, uint64_t))(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8)
                                              + 56);
  v10 = 1;
  v1(&v11[v6], 1);
  v9 = *(int *)(v7 + 28);
  v2 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(&v11[v9], v10);
  return outlined init with take of GKCrypto_GroupAETextToSign(v11, v12);
}

char *outlined init with take of GKCrypto_GroupAETextToSign(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *__dst;
  char *__src;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(char *, char *);
  int *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v19 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign();
  v15 = v19[5];
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 32);
  v18(&a2[v15], &a1[v15]);
  v20 = v19[6];
  v22 = type metadata accessor for GKCrypto_VersionedSeed();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v23 + 48))(&a1[v20], 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a2[v20], &a1[v20], *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v14 = &a2[v20];
    *(_DWORD *)v14 = *(_DWORD *)&a1[v20];
    *(_OWORD *)(v14 + 8) = *(_OWORD *)&a1[v20 + 8];
    ((void (*)(char *, char *, uint64_t))v18)(&a2[v20 + *(int *)(v22 + 24)], &a1[v20 + *(int *)(v22 + 24)], v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(&a2[v20], 0, 1, v22);
  }
  v10 = &a2[v19[7]];
  v11 = &a1[v19[7]];
  v12 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(v11, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
    ((void (*)(char *, char *, uint64_t))v18)(&v10[*(int *)(v12 + 20)], &v11[*(int *)(v12 + 20)], v17);
    __dst = &v10[*(int *)(v12 + 24)];
    __src = &v11[*(int *)(v12 + 24)];
    v8 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(__src, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
      ((void (*)(char *, char *, uint64_t))v18)(&__dst[*(int *)(v8 + 24)], &__src[*(int *)(v8 + 24)], v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign._preliminarySeed@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_VersionedSeed();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_GroupAETextToSign._groupAssociatedData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_GroupAEDataToEncrypt.version()
{
  return 0;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupAEDataToEncrypt.version.modify())()
{
  return GKCrypto_GroupAEDataToEncrypt.version.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAEDataToEncrypt.groupAetextToSignBlob()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAEDataToEncrypt.groupAetextToSignBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.groupAetextToSignBlob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAEDataToEncrypt.groupAetextToSignBlob.modify())()
{
  return GKCrypto_GroupAEDataToEncrypt.groupAetextToSignBlob.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAEDataToEncrypt.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAEDataToEncrypt.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAEDataToEncrypt.signature.modify())()
{
  return GKCrypto_GroupAEDataToEncrypt.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAEDataToEncrypt.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAEDataToEncrypt.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_GroupAEDataToEncrypt()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAEDataToEncrypt;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAEDataToEncrypt)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAEDataToEncrypt.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
  return GKCrypto_GroupAEDataToEncrypt.unknownFields.modify;
}

uint64_t GKCrypto_GroupAEDataToEncrypt.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)&v8 - v9;
  v13 = (char *)&v8 - v9;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v11;
  *(_QWORD *)(v11 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupAEDataToEncrypt(v11, v12);
}

uint64_t outlined init with take of GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_AdminMetaData.administratorID()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminMetaData.administratorID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_AdminMetaData.administratorID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminMetaData.administratorID.modify())()
{
  return GKCrypto_AdminMetaData.administratorID.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminMetaData.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_AdminMetaData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_AdminMetaData() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_AdminMetaData()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_AdminMetaData;
  if (!type metadata singleton initialization cache for GKCrypto_AdminMetaData)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_AdminMetaData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_AdminMetaData();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 20), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_AdminMetaData.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_AdminMetaData();
  return GKCrypto_AdminMetaData.unknownFields.modify;
}

char *GKCrypto_AdminMetaData.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;

  v9 = a1;
  v10 = 0;
  v7 = type metadata accessor for GKCrypto_AdminMetaData();
  v6 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v8 = (char *)&v5 - v6;
  v10 = (char *)&v5 - v6;
  v1 = Data.init()();
  v2 = v8;
  *(_QWORD *)v8 = v1;
  *((_QWORD *)v2 + 1) = v3;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_AdminMetaData(v8, v9);
}

char *outlined init with take of GKCrypto_AdminMetaData(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v4 = *(int *)(type metadata accessor for GKCrypto_AdminMetaData() + 20);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t GKCrypto_AdminPlainText.adminPreliminarySeed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (uint64_t *)((char *)&v6 - v8);
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v1 + *(int *)(v3 + 24)), v10);
  v4 = type metadata accessor for GKCrypto_VersionedSeed();
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_VersionedSeed((uint64_t)v10, v7);
  GKCrypto_VersionedSeed.init()(v7);
  return outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_AdminPlainText()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_AdminPlainText;
  if (!type metadata singleton initialization cache for GKCrypto_AdminPlainText)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_AdminPlainText.adminPreliminarySeed : GKCrypto_AdminPlainText@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminPlainText() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_AdminPlainText(v2, (_QWORD *)((char *)v4 - v7));
  GKCrypto_AdminPlainText.adminPreliminarySeed.getter(v8);
  outlined init with take of GKCrypto_VersionedSeed(v8, v9);
  return outlined destroy of GKCrypto_AdminPlainText(v10);
}

uint64_t key path setter for GKCrypto_AdminPlainText.adminPreliminarySeed : GKCrypto_AdminPlainText(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_VersionedSeed(v1, (uint64_t)&v3 - v5);
  return GKCrypto_AdminPlainText.adminPreliminarySeed.setter(v6);
}

uint64_t GKCrypto_AdminPlainText.adminPreliminarySeed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_DWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_VersionedSeed(v2, (uint64_t)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined assign with take of GKCrypto_VersionedSeed?(v7, (_DWORD *)(v1 + *(int *)(v4 + 24)));
  return outlined destroy of GKCrypto_VersionedSeed(v8);
}

void (*GKCrypto_AdminPlainText.adminPreliminarySeed.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  void *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = malloc(__size);
  a1[2] = v5;
  GKCrypto_AdminPlainText.adminPreliminarySeed.getter((uint64_t)v5);
  return GKCrypto_AdminPlainText.adminPreliminarySeed.modify;
}

void GKCrypto_AdminPlainText.adminPreliminarySeed.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 16);
    v3 = *(void **)(a1 + 8);
    outlined init with copy of GKCrypto_VersionedSeed((uint64_t)v2, (uint64_t)v3);
    GKCrypto_AdminPlainText.adminPreliminarySeed.setter((uint64_t)v3);
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_AdminPlainText.adminPreliminarySeed.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_AdminPlainText.hasAdminPreliminarySeed.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v0 + *(int *)(v2 + 24)), v10);
  v3 = type metadata accessor for GKCrypto_VersionedSeed();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_AdminPlainText.clearAdminPreliminarySeed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _DWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_DWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined assign with take of GKCrypto_VersionedSeed?(v5, (_DWORD *)(v0 + *(int *)(v3 + 24)));
}

char *GKCrypto_AdminPlainText.metaData.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (char *)&v6 - v8;
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_AdminMetaData?((uint64_t *)(v1 + *(int *)(v3 + 28)), v10);
  v4 = type metadata accessor for GKCrypto_AdminMetaData();
  if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_AdminMetaData(v10, v7);
  GKCrypto_AdminMetaData.init()(v7);
  return (char *)outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v10);
}

_QWORD *outlined init with copy of GKCrypto_AdminMetaData?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for GKCrypto_AdminMetaData();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v12 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    outlined copy of Data._Representation(*a1, v6);
    *a2 = v5;
    a2[1] = v6;
    v8 = (char *)a2 + *(int *)(v11 + 20);
    v7 = (char *)a1 + *(int *)(v11 + 20);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v8, v7);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_AdminMetaData?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_AdminMetaData();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v3 = a1 + *(int *)(v5 + 20);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t key path getter for GKCrypto_AdminPlainText.metaData : GKCrypto_AdminPlainText@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminMetaData() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (char *)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminPlainText() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_AdminPlainText(v2, (_QWORD *)((char *)v4 - v7));
  GKCrypto_AdminPlainText.metaData.getter(v8);
  outlined init with take of GKCrypto_AdminMetaData(v8, v9);
  return outlined destroy of GKCrypto_AdminPlainText(v10);
}

uint64_t key path setter for GKCrypto_AdminPlainText.metaData : GKCrypto_AdminPlainText(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminMetaData() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_AdminMetaData(v1, (uint64_t *)((char *)&v3 - v5));
  return GKCrypto_AdminPlainText.metaData.setter(v6);
}

uint64_t GKCrypto_AdminPlainText.metaData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_QWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_AdminMetaData(v2, (_QWORD *)((char *)v6 - v6[0]));
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_AdminMetaData();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined assign with take of GKCrypto_AdminMetaData?(v7, (_QWORD *)(v1 + *(int *)(v4 + 28)));
  return outlined destroy of GKCrypto_AdminMetaData(v8);
}

uint64_t *outlined init with copy of GKCrypto_AdminMetaData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = *(int *)(type metadata accessor for GKCrypto_AdminMetaData() + 20);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v6, (char *)a1 + v6);
  return a2;
}

_QWORD *outlined assign with take of GKCrypto_AdminMetaData?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);

  v16 = type metadata accessor for GKCrypto_AdminMetaData();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v18)(a2, 1))
  {
    if (v18(a1, 1, v16))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      v11 = (char *)a2 + *(int *)(v16 + 20);
      v10 = (char *)a1 + *(int *)(v16 + 20);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32))(v11, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, v16);
    }
  }
  else if (v18(a1, 1, v16))
  {
    outlined destroy of GKCrypto_AdminMetaData((uint64_t)a2);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v2 = a1[1];
    v3 = *a2;
    v4 = a2[1];
    *a2 = *a1;
    a2[1] = v2;
    outlined consume of Data._Representation(v3, v4);
    v13 = (char *)a2 + *(int *)(v16 + 20);
    v12 = (char *)a1 + *(int *)(v16 + 20);
    v5 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 40))(v13, v12);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_AdminMetaData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v3 = *(int *)(type metadata accessor for GKCrypto_AdminMetaData() + 20);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

void (*GKCrypto_AdminPlainText.metaData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  char *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_AdminMetaData() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = (char *)malloc(__size);
  a1[2] = v5;
  GKCrypto_AdminPlainText.metaData.getter(v5);
  return GKCrypto_AdminPlainText.metaData.modify;
}

void GKCrypto_AdminPlainText.metaData.modify(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(uint64_t **)(a1 + 16);
    v3 = *(uint64_t **)(a1 + 8);
    outlined init with copy of GKCrypto_AdminMetaData(v2, v3);
    GKCrypto_AdminPlainText.metaData.setter((uint64_t)v3);
    outlined destroy of GKCrypto_AdminMetaData((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_AdminPlainText.metaData.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_AdminPlainText.hasMetaData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_AdminMetaData?((uint64_t *)(v0 + *(int *)(v2 + 28)), v10);
  v3 = type metadata accessor for GKCrypto_AdminMetaData();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_AdminPlainText.clearMetaData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _QWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_QWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_AdminMetaData();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined assign with take of GKCrypto_AdminMetaData?(v5, (_QWORD *)(v0 + *(int *)(v3 + 28)));
}

uint64_t variable initialization expression of GKCrypto_AdminPlainText.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminPlainText.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_AdminPlainText.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminPlainText.signature.modify())()
{
  return GKCrypto_AdminPlainText.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminPlainText.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_AdminPlainText.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_AdminPlainText() + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_AdminPlainText.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_AdminPlainText();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 20), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_AdminPlainText.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_AdminPlainText();
  return GKCrypto_AdminPlainText.unknownFields.modify;
}

char *GKCrypto_AdminPlainText.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void (*v4)(char *, uint64_t);
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;

  v15 = a1;
  v16 = 0;
  v11 = 0;
  v10 = type metadata accessor for GKCrypto_AdminPlainText();
  v8 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v7 - v8;
  v16 = (char *)&v7 - v8;
  v1 = Data.init()();
  v2 = v14;
  *(_QWORD *)v14 = v1;
  *((_QWORD *)v2 + 1) = v3;
  UnknownStorage.init()();
  v9 = *(int *)(v10 + 24);
  v4 = *(void (**)(char *, uint64_t))(*(_QWORD *)(type metadata accessor for GKCrypto_VersionedSeed() - 8)
                                              + 56);
  v13 = 1;
  v4(&v14[v9], 1);
  v12 = *(int *)(v10 + 28);
  v5 = type metadata accessor for GKCrypto_AdminMetaData();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v5 - 8) + 56))(&v14[v12], v13);
  return outlined init with take of GKCrypto_AdminPlainText(v14, v15);
}

char *outlined init with take of GKCrypto_AdminPlainText(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *__dst;
  char *__src;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(char *, char *);
  int *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v14 = (int *)type metadata accessor for GKCrypto_AdminPlainText();
  v10 = v14[5];
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *))(*(_QWORD *)(v12 - 8) + 32);
  v13(&a2[v10], &a1[v10]);
  v15 = v14[6];
  v17 = type metadata accessor for GKCrypto_VersionedSeed();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v18 + 48))(&a1[v15], 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a2[v15], &a1[v15], *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v9 = &a2[v15];
    *(_DWORD *)v9 = *(_DWORD *)&a1[v15];
    *(_OWORD *)(v9 + 8) = *(_OWORD *)&a1[v15 + 8];
    ((void (*)(char *, char *, uint64_t))v13)(&a2[v15 + *(int *)(v17 + 24)], &a1[v15 + *(int *)(v17 + 24)], v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(&a2[v15], 0, 1, v17);
  }
  __dst = &a2[v14[7]];
  __src = &a1[v14[7]];
  v7 = type metadata accessor for GKCrypto_AdminMetaData();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    ((void (*)(char *, char *, uint64_t))v13)(&__dst[*(int *)(v7 + 20)], &__src[*(int *)(v7 + 20)], v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
  }
  return a2;
}

uint64_t variable initialization expression of GKCrypto_AdminPlainText._adminPreliminarySeed@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_VersionedSeed();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_AdminPlainText._metaData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_AdminMetaData();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_Invite.inviteeID()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.inviteeID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_Invite.inviteeID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.inviteeID.modify())()
{
  return GKCrypto_Invite.inviteeID.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.groupID()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.groupID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_Invite.groupID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.groupID.modify())()
{
  return GKCrypto_Invite.groupID.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.randomizedVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.randomizedVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t GKCrypto_Invite.randomizedVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.randomizedVerificationKey.modify())()
{
  return GKCrypto_Invite.randomizedVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.keyOffset()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.keyOffset.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t GKCrypto_Invite.keyOffset.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.keyOffset.modify())()
{
  return GKCrypto_Invite.keyOffset.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.metadata()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.metadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 72));
  return v2;
}

uint64_t GKCrypto_Invite.metadata.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.metadata.modify())()
{
  return GKCrypto_Invite.metadata.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.inviterID()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.inviterID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t GKCrypto_Invite.inviterID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.inviterID.modify())()
{
  return GKCrypto_Invite.inviterID.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.rsvpResponseDigest()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.rsvpResponseDigest.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 96);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 104));
  return v2;
}

uint64_t GKCrypto_Invite.rsvpResponseDigest.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.rsvpResponseDigest.modify())()
{
  return GKCrypto_Invite.rsvpResponseDigest.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.groupVersionWhenInvited()
{
  return 0;
}

uint64_t GKCrypto_Invite.groupVersionWhenInvited.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 112);
}

uint64_t GKCrypto_Invite.groupVersionWhenInvited.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 112) = result;
  return result;
}

uint64_t (*GKCrypto_Invite.groupVersionWhenInvited.modify())()
{
  return GKCrypto_Invite.groupVersionWhenInvited.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.inviterKeyHint()
{
  return Data.init()();
}

uint64_t GKCrypto_Invite.inviterKeyHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 120);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 128));
  return v2;
}

uint64_t GKCrypto_Invite.inviterKeyHint.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_Invite.inviterKeyHint.modify())()
{
  return GKCrypto_Invite.inviterKeyHint.modify;
}

uint64_t variable initialization expression of GKCrypto_Invite.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_Invite.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_Invite() + 52);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_Invite()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_Invite;
  if (!type metadata singleton initialization cache for GKCrypto_Invite)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_Invite.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_Invite();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 52), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_Invite.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_Invite();
  return GKCrypto_Invite.unknownFields.modify;
}

uint64_t GKCrypto_Invite.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;

  v30 = a1;
  v31 = 0;
  v28 = type metadata accessor for GKCrypto_Invite();
  v27 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v29 = (uint64_t *)((char *)&v26 - v27);
  v31 = (char *)&v26 - v27;
  v1 = Data.init()();
  v2 = v29;
  *v29 = v1;
  v2[1] = v3;
  v4 = Data.init()();
  v5 = v29;
  v29[2] = v4;
  v5[3] = v6;
  v7 = Data.init()();
  v8 = v29;
  v29[4] = v7;
  v8[5] = v9;
  v10 = Data.init()();
  v11 = v29;
  v29[6] = v10;
  v11[7] = v12;
  v13 = Data.init()();
  v14 = v29;
  v29[8] = v13;
  v14[9] = v15;
  v16 = Data.init()();
  v17 = v29;
  v29[10] = v16;
  v17[11] = v18;
  v19 = Data.init()();
  v20 = v29;
  v29[12] = v19;
  v20[13] = v21;
  *((_DWORD *)v20 + 28) = 0;
  v22 = Data.init()();
  v23 = v29;
  v29[15] = v22;
  v23[16] = v24;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_Invite((uint64_t)v29, v30);
}

uint64_t outlined init with take of GKCrypto_Invite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  v4 = *(int *)(type metadata accessor for GKCrypto_Invite() + 52);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_SignedInvite.version()
{
  return 0;
}

uint64_t GKCrypto_SignedInvite.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_SignedInvite.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_SignedInvite.version.modify())()
{
  return GKCrypto_SignedInvite.version.modify;
}

uint64_t GKCrypto_SignedInvite.invite.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (uint64_t *)((char *)&v6 - v8);
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_SignedInvite();
  outlined init with copy of GKCrypto_Invite?((uint64_t *)(v1 + *(int *)(v3 + 28)), v10);
  v4 = type metadata accessor for GKCrypto_Invite();
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_Invite((uint64_t)v10, v7);
  GKCrypto_Invite.init()(v7);
  return outlined destroy of GKCrypto_Invite?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_SignedInvite()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_SignedInvite;
  if (!type metadata singleton initialization cache for GKCrypto_SignedInvite)
    return swift_getSingletonMetadata();
  return v1;
}

_QWORD *outlined init with copy of GKCrypto_Invite?(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v25;
  uint64_t v26;

  v25 = type metadata accessor for GKCrypto_Invite();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v26 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    outlined copy of Data._Representation(*a1, v6);
    *a2 = v5;
    a2[1] = v6;
    v7 = a1[2];
    v8 = a1[3];
    outlined copy of Data._Representation(v7, v8);
    a2[2] = v7;
    a2[3] = v8;
    v9 = a1[4];
    v10 = a1[5];
    outlined copy of Data._Representation(v9, v10);
    a2[4] = v9;
    a2[5] = v10;
    v11 = a1[6];
    v12 = a1[7];
    outlined copy of Data._Representation(v11, v12);
    a2[6] = v11;
    a2[7] = v12;
    v13 = a1[8];
    v14 = a1[9];
    outlined copy of Data._Representation(v13, v14);
    a2[8] = v13;
    a2[9] = v14;
    v15 = a1[10];
    v16 = a1[11];
    outlined copy of Data._Representation(v15, v16);
    a2[10] = v15;
    a2[11] = v16;
    v17 = a1[12];
    v18 = a1[13];
    outlined copy of Data._Representation(v17, v18);
    a2[12] = v17;
    a2[13] = v18;
    *((_DWORD *)a2 + 28) = *((_DWORD *)a1 + 28);
    v19 = a1[15];
    v20 = a1[16];
    outlined copy of Data._Representation(v19, v20);
    a2[15] = v19;
    a2[16] = v20;
    v22 = (char *)a2 + *(int *)(v25 + 52);
    v21 = (char *)a1 + *(int *)(v25 + 52);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v22, v21);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a2, 0, 1, v25);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_Invite?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_Invite();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    v3 = a1 + *(int *)(v5 + 52);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t key path getter for GKCrypto_SignedInvite.invite : GKCrypto_SignedInvite@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_Invite() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_SignedInvite() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_SignedInvite(v2, (uint64_t)v4 - v7);
  GKCrypto_SignedInvite.invite.getter(v8);
  outlined init with take of GKCrypto_Invite(v8, v9);
  return outlined destroy of GKCrypto_SignedInvite(v10);
}

uint64_t key path setter for GKCrypto_SignedInvite.invite : GKCrypto_SignedInvite(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_Invite() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_Invite(v1, (uint64_t)&v3 - v5);
  return GKCrypto_SignedInvite.invite.setter(v6);
}

uint64_t GKCrypto_SignedInvite.invite.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_OWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_Invite(v2, (uint64_t)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_Invite();
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_SignedInvite();
  outlined assign with take of GKCrypto_Invite?(v7, (_OWORD *)(v1 + *(int *)(v4 + 28)));
  return outlined destroy of GKCrypto_Invite(v8);
}

uint64_t outlined init with copy of GKCrypto_Invite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a1, v5);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  outlined copy of Data._Representation(v10, v11);
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v11;
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  outlined copy of Data._Representation(v12, v13);
  *(_QWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = v13;
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  outlined copy of Data._Representation(v14, v15);
  *(_QWORD *)(a2 + 80) = v14;
  *(_QWORD *)(a2 + 88) = v15;
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  outlined copy of Data._Representation(v16, v17);
  *(_QWORD *)(a2 + 96) = v16;
  *(_QWORD *)(a2 + 104) = v17;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(a2 + 120) = v18;
  *(_QWORD *)(a2 + 128) = v19;
  v20 = *(int *)(type metadata accessor for GKCrypto_Invite() + 52);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v20, a1 + v20);
  return a2;
}

_OWORD *outlined assign with take of GKCrypto_Invite?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(_OWORD *, uint64_t, uint64_t);

  v37 = type metadata accessor for GKCrypto_Invite();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v38 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v39)(a2, 1))
  {
    if (v39(a1, 1, v37))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      a2[1] = a1[1];
      a2[2] = a1[2];
      a2[3] = a1[3];
      a2[4] = a1[4];
      a2[5] = a1[5];
      a2[6] = a1[6];
      *((_DWORD *)a2 + 28) = *((_DWORD *)a1 + 28);
      *(_OWORD *)((char *)a2 + 120) = *(_OWORD *)((char *)a1 + 120);
      v32 = (char *)a2 + *(int *)(v37 + 52);
      v31 = (char *)a1 + *(int *)(v37 + 52);
      v28 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v28 - 8) + 32))(v32, v31);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(a2, 0, 1, v37);
    }
  }
  else if (v39(a1, 1, v37))
  {
    outlined destroy of GKCrypto_Invite((uint64_t)a2);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = *(_QWORD *)a2;
    v4 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    *((_QWORD *)a2 + 1) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a2 + 2);
    v7 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
    *((_QWORD *)a2 + 3) = v5;
    outlined consume of Data._Representation(v6, v7);
    v8 = *((_QWORD *)a1 + 5);
    v9 = *((_QWORD *)a2 + 4);
    v10 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
    *((_QWORD *)a2 + 5) = v8;
    outlined consume of Data._Representation(v9, v10);
    v11 = *((_QWORD *)a1 + 7);
    v12 = *((_QWORD *)a2 + 6);
    v13 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 6) = *((_QWORD *)a1 + 6);
    *((_QWORD *)a2 + 7) = v11;
    outlined consume of Data._Representation(v12, v13);
    v14 = *((_QWORD *)a1 + 9);
    v15 = *((_QWORD *)a2 + 8);
    v16 = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 8) = *((_QWORD *)a1 + 8);
    *((_QWORD *)a2 + 9) = v14;
    outlined consume of Data._Representation(v15, v16);
    v17 = *((_QWORD *)a1 + 11);
    v18 = *((_QWORD *)a2 + 10);
    v19 = *((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 10) = *((_QWORD *)a1 + 10);
    *((_QWORD *)a2 + 11) = v17;
    outlined consume of Data._Representation(v18, v19);
    v20 = *((_QWORD *)a1 + 13);
    v21 = *((_QWORD *)a2 + 12);
    v22 = *((_QWORD *)a2 + 13);
    *((_QWORD *)a2 + 12) = *((_QWORD *)a1 + 12);
    *((_QWORD *)a2 + 13) = v20;
    outlined consume of Data._Representation(v21, v22);
    *((_DWORD *)a2 + 28) = *((_DWORD *)a1 + 28);
    v23 = *((_QWORD *)a1 + 16);
    v24 = *((_QWORD *)a2 + 15);
    v25 = *((_QWORD *)a2 + 16);
    *((_QWORD *)a2 + 15) = *((_QWORD *)a1 + 15);
    *((_QWORD *)a2 + 16) = v23;
    outlined consume of Data._Representation(v24, v25);
    v34 = (char *)a2 + *(int *)(v37 + 52);
    v33 = (char *)a1 + *(int *)(v37 + 52);
    v26 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v26 - 8) + 40))(v34, v33);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_Invite(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  v3 = *(int *)(type metadata accessor for GKCrypto_Invite() + 52);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

void (*GKCrypto_SignedInvite.invite.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  void *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_Invite() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = malloc(__size);
  a1[2] = v5;
  GKCrypto_SignedInvite.invite.getter((uint64_t)v5);
  return GKCrypto_SignedInvite.invite.modify;
}

void GKCrypto_SignedInvite.invite.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 16);
    v3 = *(void **)(a1 + 8);
    outlined init with copy of GKCrypto_Invite((uint64_t)v2, (uint64_t)v3);
    GKCrypto_SignedInvite.invite.setter((uint64_t)v3);
    outlined destroy of GKCrypto_Invite((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_SignedInvite.invite.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_SignedInvite.hasInvite.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (uint64_t *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_SignedInvite();
  outlined init with copy of GKCrypto_Invite?((uint64_t *)(v0 + *(int *)(v2 + 28)), v10);
  v3 = type metadata accessor for GKCrypto_Invite();
  v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_Invite?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_SignedInvite.clearInvite()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _OWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_OWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_Invite();
  (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_SignedInvite();
  outlined assign with take of GKCrypto_Invite?(v5, (_OWORD *)(v0 + *(int *)(v3 + 28)));
}

uint64_t variable initialization expression of GKCrypto_SignedInvite.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_SignedInvite.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_SignedInvite.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SignedInvite.signature.modify())()
{
  return GKCrypto_SignedInvite.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_SignedInvite.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_SignedInvite.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_SignedInvite() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_SignedInvite.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_SignedInvite();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_SignedInvite.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_SignedInvite();
  return GKCrypto_SignedInvite.unknownFields.modify;
}

uint64_t GKCrypto_SignedInvite.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v9 = 0;
  v8 = type metadata accessor for GKCrypto_SignedInvite();
  v7 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t)&v6 - v7;
  v13 = (char *)&v6 - v7;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  UnknownStorage.init()();
  v10 = *(int *)(v8 + 28);
  v4 = type metadata accessor for GKCrypto_Invite();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v11 + v10, 1);
  return outlined init with take of GKCrypto_SignedInvite(v11, v12);
}

uint64_t outlined init with take of GKCrypto_SignedInvite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v9 = type metadata accessor for GKCrypto_SignedInvite();
  v5 = *(int *)(v9 + 24);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a2 + v5, a1 + v5);
  v10 = *(int *)(v9 + 28);
  v12 = type metadata accessor for GKCrypto_Invite();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(a1 + v10, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a2 + v10), (const void *)(a1 + v10), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = a2 + v10;
    *(_OWORD *)v4 = *(_OWORD *)(a1 + v10);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + v10 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + v10 + 32);
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + v10 + 48);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + v10 + 64);
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + v10 + 80);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + v10 + 96);
    *(_DWORD *)(v4 + 112) = *(_DWORD *)(a1 + v10 + 112);
    *(_OWORD *)(v4 + 120) = *(_OWORD *)(a1 + v10 + 120);
    ((void (*)(uint64_t, uint64_t, uint64_t))v8)(a2 + v10 + *(int *)(v12 + 52), a1 + v10 + *(int *)(v12 + 52), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2 + v10, 0, 1, v12);
  }
  return a2;
}

uint64_t variable initialization expression of GKCrypto_SignedInvite._invite@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_Invite();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_RSVP.version()
{
  return 0;
}

uint64_t GKCrypto_RSVP.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_RSVP.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_RSVP.version.modify())()
{
  return GKCrypto_RSVP.version.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVP.response()
{
  return 0;
}

uint64_t GKCrypto_RSVP.response.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t GKCrypto_RSVP.response.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*GKCrypto_RSVP.response.modify())()
{
  return GKCrypto_RSVP.response.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVP.nonce()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVP.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_RSVP.nonce.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVP.nonce.modify())()
{
  return GKCrypto_RSVP.nonce.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVP.groupIDHint()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVP.groupIDHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_RSVP.groupIDHint.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVP.groupIDHint.modify())()
{
  return GKCrypto_RSVP.groupIDHint.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVP.verificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVP.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_RSVP.verificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVP.verificationKey.modify())()
{
  return GKCrypto_RSVP.verificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVP.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_RSVP.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_RSVP() + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_RSVP()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_RSVP;
  if (!type metadata singleton initialization cache for GKCrypto_RSVP)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_RSVP.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_RSVP();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 36), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_RSVP.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_RSVP();
  return GKCrypto_RSVP.unknownFields.modify;
}

uint64_t GKCrypto_RSVP.Response.init()()
{
  return 0;
}

uint64_t GKCrypto_RSVP.Response.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
  }
  return a1;
}

uint64_t GKCrypto_RSVP.Response.rawValue.getter(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    __asm { BR              X8 }
  return result;
}

uint64_t protocol witness for Enum.init() in conformance GKCrypto_RSVP.Response@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v2;

  result = GKCrypto_RSVP.Response.init()();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance GKCrypto_RSVP.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = GKCrypto_RSVP.Response.init(rawValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance GKCrypto_RSVP.Response()
{
  uint64_t v0;

  return GKCrypto_RSVP.Response.rawValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8) & 1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_RSVP.Response@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = GKCrypto_RSVP.Response.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = v4 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_RSVP.Response@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = GKCrypto_RSVP.Response.rawValue.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8) & 1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVP.Response()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return == infix<A>(_:_:)() & 1;
}

uint64_t GKCrypto_RSVP.init()@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;

  v16 = a1;
  v17 = 0;
  v14 = type metadata accessor for GKCrypto_RSVP();
  v13 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v1 = (char *)&v12 - v13;
  v15 = v1;
  v17 = (char *)&v12 - v13;
  *(_DWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = 1;
  v2 = Data.init()();
  v3 = v15;
  v15[3] = v2;
  v3[4] = v4;
  v5 = Data.init()();
  v6 = v15;
  v15[5] = v5;
  v6[6] = v7;
  v8 = Data.init()();
  v9 = v15;
  v15[7] = v8;
  v9[8] = v10;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_RSVP((uint64_t)v15, v16);
}

uint64_t *GKCrypto_RSVP.Response.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static GKCrypto_RSVP.Response.allCases;
}

uint64_t static GKCrypto_RSVP.Response.allCases.getter()
{
  uint64_t *v1;
  uint64_t v2;

  v1 = GKCrypto_RSVP.Response.allCases.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t static GKCrypto_RSVP.Response.allCases.setter(uint64_t a1)
{
  uint64_t *v2;

  v2 = GKCrypto_RSVP.Response.allCases.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *v2 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*static GKCrypto_RSVP.Response.allCases.modify())()
{
  GKCrypto_RSVP.Response.allCases.unsafeMutableAddressor();
  swift_beginAccess();
  return static GKCrypto_RSVP.Response.allCases.modify;
}

uint64_t static GKCrypto_RSVP.Response.allCases.modify()
{
  return swift_endAccess();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance GKCrypto_RSVP.Response@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static GKCrypto_RSVP.Response.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of GKCrypto_SignedRSVP.version()
{
  return 0;
}

uint64_t GKCrypto_SignedRSVP.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_SignedRSVP.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_SignedRSVP.version.modify())()
{
  return GKCrypto_SignedRSVP.version.modify;
}

uint64_t GKCrypto_SignedRSVP.rsvp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (_DWORD *)((char *)&v6 - v8);
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined init with copy of GKCrypto_RSVP?((_DWORD *)(v1 + *(int *)(v3 + 28)), v10);
  v4 = type metadata accessor for GKCrypto_RSVP();
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_RSVP((uint64_t)v10, v7);
  GKCrypto_RSVP.init()(v7);
  return outlined destroy of GKCrypto_RSVP?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_SignedRSVP()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_SignedRSVP;
  if (!type metadata singleton initialization cache for GKCrypto_SignedRSVP)
    return swift_getSingletonMetadata();
  return v1;
}

_DWORD *outlined init with copy of GKCrypto_RSVP?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for GKCrypto_RSVP();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v16 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
    *((_BYTE *)a2 + 16) = *((_BYTE *)a1 + 16);
    v5 = *((_QWORD *)a1 + 3);
    v6 = *((_QWORD *)a1 + 4);
    outlined copy of Data._Representation(v5, v6);
    *((_QWORD *)a2 + 3) = v5;
    *((_QWORD *)a2 + 4) = v6;
    v7 = *((_QWORD *)a1 + 5);
    v8 = *((_QWORD *)a1 + 6);
    outlined copy of Data._Representation(v7, v8);
    *((_QWORD *)a2 + 5) = v7;
    *((_QWORD *)a2 + 6) = v8;
    v9 = *((_QWORD *)a1 + 7);
    v10 = *((_QWORD *)a1 + 8);
    outlined copy of Data._Representation(v9, v10);
    *((_QWORD *)a2 + 7) = v9;
    *((_QWORD *)a2 + 8) = v10;
    v12 = (char *)a2 + *(int *)(v15 + 36);
    v11 = (char *)a1 + *(int *)(v15 + 36);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v12, v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_RSVP?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_RSVP();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v3 = a1 + *(int *)(v5 + 36);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t key path getter for GKCrypto_SignedRSVP.rsvp : GKCrypto_SignedRSVP@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_RSVP() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_SignedRSVP() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_SignedRSVP(v2, (uint64_t)v4 - v7);
  GKCrypto_SignedRSVP.rsvp.getter(v8);
  outlined init with take of GKCrypto_RSVP(v8, v9);
  return outlined destroy of GKCrypto_SignedRSVP(v10);
}

uint64_t key path setter for GKCrypto_SignedRSVP.rsvp : GKCrypto_SignedRSVP(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_RSVP() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_RSVP(v1, (uint64_t)&v3 - v5);
  return GKCrypto_SignedRSVP.rsvp.setter(v6);
}

uint64_t GKCrypto_SignedRSVP.rsvp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_DWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_RSVP(v2, (uint64_t)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_RSVP();
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined assign with take of GKCrypto_RSVP?(v7, (_DWORD *)(v1 + *(int *)(v4 + 28)));
  return outlined destroy of GKCrypto_RSVP(v8);
}

_DWORD *outlined assign with take of GKCrypto_RSVP?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_DWORD *, uint64_t, uint64_t);

  v22 = type metadata accessor for GKCrypto_RSVP();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v24)(a2, 1))
  {
    if (v24(a1, 1, v22))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
      *((_BYTE *)a2 + 16) = *((_BYTE *)a1 + 16);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 6);
      *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 10);
      *(_OWORD *)(a2 + 14) = *(_OWORD *)(a1 + 14);
      v17 = (char *)a2 + *(int *)(v22 + 36);
      v16 = (char *)a1 + *(int *)(v22 + 36);
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32))(v17, v16);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(a2, 0, 1, v22);
    }
  }
  else if (v24(a1, 1, v22))
  {
    outlined destroy of GKCrypto_RSVP((uint64_t)a2);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
    *((_BYTE *)a2 + 16) = *((_BYTE *)a1 + 16);
    v2 = *((_QWORD *)a1 + 4);
    v3 = *((_QWORD *)a2 + 3);
    v4 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
    *((_QWORD *)a2 + 4) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 6);
    v6 = *((_QWORD *)a2 + 5);
    v7 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) = *((_QWORD *)a1 + 5);
    *((_QWORD *)a2 + 6) = v5;
    outlined consume of Data._Representation(v6, v7);
    v8 = *((_QWORD *)a1 + 8);
    v9 = *((_QWORD *)a2 + 7);
    v10 = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 7) = *((_QWORD *)a1 + 7);
    *((_QWORD *)a2 + 8) = v8;
    outlined consume of Data._Representation(v9, v10);
    v19 = (char *)a2 + *(int *)(v22 + 36);
    v18 = (char *)a1 + *(int *)(v22 + 36);
    v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))(v19, v18);
  }
  return a2;
}

void (*GKCrypto_SignedRSVP.rsvp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  void *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_RSVP() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = malloc(__size);
  a1[2] = v5;
  GKCrypto_SignedRSVP.rsvp.getter((uint64_t)v5);
  return GKCrypto_SignedRSVP.rsvp.modify;
}

void GKCrypto_SignedRSVP.rsvp.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 16);
    v3 = *(void **)(a1 + 8);
    outlined init with copy of GKCrypto_RSVP((uint64_t)v2, (uint64_t)v3);
    GKCrypto_SignedRSVP.rsvp.setter((uint64_t)v3);
    outlined destroy of GKCrypto_RSVP((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_SignedRSVP.rsvp.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_SignedRSVP.hasRsvp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (_DWORD *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined init with copy of GKCrypto_RSVP?((_DWORD *)(v0 + *(int *)(v2 + 28)), v10);
  v3 = type metadata accessor for GKCrypto_RSVP();
  v7 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_RSVP?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_SignedRSVP.clearRsvp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _DWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_DWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_RSVP();
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined assign with take of GKCrypto_RSVP?(v5, (_DWORD *)(v0 + *(int *)(v3 + 28)));
}

uint64_t variable initialization expression of GKCrypto_SignedRSVP.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_SignedRSVP.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_SignedRSVP.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SignedRSVP.signature.modify())()
{
  return GKCrypto_SignedRSVP.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_SignedRSVP.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_SignedRSVP.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_SignedRSVP() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_SignedRSVP.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_SignedRSVP();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_SignedRSVP.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_SignedRSVP();
  return GKCrypto_SignedRSVP.unknownFields.modify;
}

uint64_t GKCrypto_SignedRSVP.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v9 = 0;
  v8 = type metadata accessor for GKCrypto_SignedRSVP();
  v7 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t)&v6 - v7;
  v13 = (char *)&v6 - v7;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  UnknownStorage.init()();
  v10 = *(int *)(v8 + 28);
  v4 = type metadata accessor for GKCrypto_RSVP();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v11 + v10, 1);
  return outlined init with take of GKCrypto_SignedRSVP(v11, v12);
}

uint64_t variable initialization expression of GKCrypto_SignedRSVP._rsvp@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_RSVP();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_RSVPResponse.version()
{
  return 0;
}

uint64_t GKCrypto_RSVPResponse.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_RSVPResponse.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_RSVPResponse.version.modify())()
{
  return GKCrypto_RSVPResponse.version.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPResponse.randomizedVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPResponse.randomizedVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_RSVPResponse.randomizedVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPResponse.randomizedVerificationKey.modify())()
{
  return GKCrypto_RSVPResponse.randomizedVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPResponse.ciphertextOfKeyShare()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPResponse.ciphertextOfKeyShare.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_RSVPResponse.ciphertextOfKeyShare.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPResponse.ciphertextOfKeyShare.modify())()
{
  return GKCrypto_RSVPResponse.ciphertextOfKeyShare.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPResponse.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_RSVPResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_RSVPResponse() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_RSVPResponse()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_RSVPResponse;
  if (!type metadata singleton initialization cache for GKCrypto_RSVPResponse)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_RSVPResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_RSVPResponse();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_RSVPResponse.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_RSVPResponse();
  return GKCrypto_RSVPResponse.unknownFields.modify;
}

uint64_t GKCrypto_RSVPResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_RSVPResponse();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)&v8 - v9;
  v13 = (char *)&v8 - v9;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v11;
  *(_QWORD *)(v11 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_RSVPResponse(v11, v12);
}

uint64_t variable initialization expression of GKCrypto_HPKEOneShotCipherText.encapsulatedKey()
{
  return Data.init()();
}

uint64_t GKCrypto_HPKEOneShotCipherText.encapsulatedKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_HPKEOneShotCipherText.encapsulatedKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_HPKEOneShotCipherText.encapsulatedKey.modify())()
{
  return GKCrypto_HPKEOneShotCipherText.encapsulatedKey.modify;
}

uint64_t variable initialization expression of GKCrypto_HPKEOneShotCipherText.sealedMessage()
{
  return Data.init()();
}

uint64_t GKCrypto_HPKEOneShotCipherText.sealedMessage.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_HPKEOneShotCipherText.sealedMessage.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_HPKEOneShotCipherText.sealedMessage.modify())()
{
  return GKCrypto_HPKEOneShotCipherText.sealedMessage.modify;
}

uint64_t variable initialization expression of GKCrypto_HPKEOneShotCipherText.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_HPKEOneShotCipherText.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_HPKEOneShotCipherText() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_HPKEOneShotCipherText()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_HPKEOneShotCipherText;
  if (!type metadata singleton initialization cache for GKCrypto_HPKEOneShotCipherText)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_HPKEOneShotCipherText.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_HPKEOneShotCipherText.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_HPKEOneShotCipherText();
  return GKCrypto_HPKEOneShotCipherText.unknownFields.modify;
}

char *GKCrypto_HPKEOneShotCipherText.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (char *)&v8 - v9;
  v13 = (char *)&v8 - v9;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)v11 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v11;
  *((_QWORD *)v11 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_HPKEOneShotCipherText(v11, v12);
}

char *outlined init with take of GKCrypto_HPKEOneShotCipherText(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  v4 = *(int *)(type metadata accessor for GKCrypto_HPKEOneShotCipherText() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.version()
{
  return 0;
}

uint64_t GKCrypto_SeedBlob.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_SeedBlob.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_SeedBlob.version.modify())()
{
  return GKCrypto_SeedBlob.version.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.ciphertext()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlob.ciphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_SeedBlob.ciphertext.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlob.ciphertext.modify())()
{
  return GKCrypto_SeedBlob.ciphertext.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlob.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_SeedBlob.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlob.signature.modify())()
{
  return GKCrypto_SeedBlob.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.keyHint()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlob.keyHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_SeedBlob.keyHint.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlob.keyHint.modify())()
{
  return GKCrypto_SeedBlob.keyHint.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.seedVersion()
{
  return 0;
}

uint64_t GKCrypto_SeedBlob.seedVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56);
}

uint64_t GKCrypto_SeedBlob.seedVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*GKCrypto_SeedBlob.seedVersion.modify())()
{
  return GKCrypto_SeedBlob.seedVersion.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.role()
{
  return 0;
}

uint64_t GKCrypto_SeedBlob.role.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t GKCrypto_SeedBlob.role.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*GKCrypto_SeedBlob.role.modify())()
{
  return GKCrypto_SeedBlob.role.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlob.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_SeedBlob.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_SeedBlob() + 40);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_SeedBlob()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_SeedBlob;
  if (!type metadata singleton initialization cache for GKCrypto_SeedBlob)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_SeedBlob.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_SeedBlob();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 40), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_SeedBlob.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_SeedBlob();
  return GKCrypto_SeedBlob.unknownFields.modify;
}

uint64_t GKCrypto_SeedBlob.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v15 = a1;
  v16 = 0;
  v13 = type metadata accessor for GKCrypto_SeedBlob();
  v12 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v14 = (uint64_t)&v11 - v12;
  v16 = (char *)&v11 - v12;
  *(_DWORD *)v14 = 0;
  v1 = Data.init()();
  v2 = v14;
  *(_QWORD *)(v14 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v14;
  *(_QWORD *)(v14 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = Data.init()();
  v8 = v14;
  *(_QWORD *)(v14 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v9;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 1;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_SeedBlob(v14, v15);
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.version()
{
  return 0;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.version.modify())()
{
  return GKCrypto_GroupAuthenticatedCiphertext.version.modify;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v7 = a1;
  v11 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v10 = (_DWORD *)((char *)&v6 - v8);
  v11 = v1;
  v9 = 0;
  v3 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?((_DWORD *)(v1 + *(int *)(v3 + 28)), v10);
  v4 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v10, 1) != 1)
    return outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v10, v7);
  GKCrypto_GroupAuthenticatedCiphertext.Context.init()(v7);
  return outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v10);
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAuthenticatedCiphertext;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAuthenticatedCiphertext)
    return swift_getSingletonMetadata();
  return v1;
}

_DWORD *outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v12 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v5 = *((_QWORD *)a1 + 1);
    v6 = *((_QWORD *)a1 + 2);
    outlined copy of Data._Representation(v5, v6);
    *((_QWORD *)a2 + 1) = v5;
    *((_QWORD *)a2 + 2) = v6;
    *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
    *((_BYTE *)a2 + 32) = *((_BYTE *)a1 + 32);
    v8 = (char *)a2 + *(int *)(v11 + 28);
    v7 = (char *)a1 + *(int *)(v11 + 28);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v8, v7);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  return a2;
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAuthenticatedCiphertext.Context)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t key path getter for GKCrypto_GroupAuthenticatedCiphertext.context : GKCrypto_GroupAuthenticatedCiphertext@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v6 = a1;
  v4[1] = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)v4 - v5;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t)v4 - v7;
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext(v2, (uint64_t)v4 - v7);
  GKCrypto_GroupAuthenticatedCiphertext.context.getter(v8);
  outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context(v8, v9);
  return outlined destroy of GKCrypto_GroupAuthenticatedCiphertext(v10);
}

uint64_t key path setter for GKCrypto_GroupAuthenticatedCiphertext.context : GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() - 8) + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t)&v3 - v5;
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context(v1, (uint64_t)&v3 - v5);
  return GKCrypto_GroupAuthenticatedCiphertext.context.setter(v6);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.context.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a1;
  v10 = 0;
  v9 = 0;
  v6[0] = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?)
                                 - 8)
                     + 64)
         + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v7 = (_DWORD *)((char *)v6 - v6[0]);
  v10 = v2;
  v9 = v1;
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context(v2, (uint64_t)v6 - v6[0]);
  v6[1] = 0;
  v3 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 0, 1);
  v4 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined assign with take of GKCrypto_GroupAuthenticatedCiphertext.Context?(v7, (_DWORD *)(v1 + *(int *)(v4 + 28)));
  return outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(v8);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v9 = a1;
  v10 = 0;
  v7 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v6 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v8 = (uint64_t)&v5 - v6;
  v10 = (char *)&v5 - v6;
  *(_DWORD *)v8 = 0;
  v1 = Data.init()();
  v2 = v8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context(v8, v9);
}

uint64_t outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v3 = a1 + *(int *)(v5 + 28);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

uint64_t outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  v6 = *(int *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2 + v6, a1 + v6);
  return a2;
}

_DWORD *outlined assign with take of GKCrypto_GroupAuthenticatedCiphertext.Context?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_DWORD *, uint64_t, uint64_t);

  v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v18)(a2, 1))
  {
    if (v18(a1, 1, v16))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
      *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
      *((_BYTE *)a2 + 32) = *((_BYTE *)a1 + 32);
      v11 = (char *)a2 + *(int *)(v16 + 28);
      v10 = (char *)a1 + *(int *)(v16 + 28);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32))(v11, v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, v16);
    }
  }
  else if (v18(a1, 1, v16))
  {
    outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)a2);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = *((_QWORD *)a1 + 2);
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
    *((_QWORD *)a2 + 2) = v2;
    outlined consume of Data._Representation(v3, v4);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
    *((_BYTE *)a2 + 32) = *((_BYTE *)a1 + 32);
    v13 = (char *)a2 + *(int *)(v16 + 28);
    v12 = (char *)a1 + *(int *)(v16 + 28);
    v5 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 40))(v13, v12);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() + 28);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

void (*GKCrypto_GroupAuthenticatedCiphertext.context.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t __size;
  void *v5;

  *a1 = v1;
  __size = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() - 8) + 64);
  a1[1] = malloc(__size);
  v5 = malloc(__size);
  a1[2] = v5;
  GKCrypto_GroupAuthenticatedCiphertext.context.getter((uint64_t)v5);
  return GKCrypto_GroupAuthenticatedCiphertext.context.modify;
}

void GKCrypto_GroupAuthenticatedCiphertext.context.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 16);
    v3 = *(void **)(a1 + 8);
    outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v2, (uint64_t)v3);
    GKCrypto_GroupAuthenticatedCiphertext.context.setter((uint64_t)v3);
    outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v2);
    free(v2);
    free(v3);
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    v5 = *(void **)(a1 + 8);
    GKCrypto_GroupAuthenticatedCiphertext.context.setter((uint64_t)v4);
    free(v4);
    free(v5);
  }
}

BOOL GKCrypto_GroupAuthenticatedCiphertext.hasContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v11 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
  v8 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v10 = (_DWORD *)((char *)&v5 - v8);
  v11 = v0;
  v9 = 0;
  v2 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?((_DWORD *)(v0 + *(int *)(v2 + 28)), v10);
  v3 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v7 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v10, 1) != 1;
  v6 = v7;
  outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v10);
  return v6;
}

Swift::Void __swiftcall GKCrypto_GroupAuthenticatedCiphertext.clearContext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];
  _DWORD *v5;
  uint64_t v6;

  v6 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
  v4[0] = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_DWORD *)((char *)v4 - v4[0]);
  v6 = v0;
  v4[1] = 0;
  v2 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 1);
  v3 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined assign with take of GKCrypto_GroupAuthenticatedCiphertext.Context?(v5, (_DWORD *)(v0 + *(int *)(v3 + 28)));
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.ciphertext()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.ciphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.ciphertext.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.ciphertext.modify())()
{
  return GKCrypto_GroupAuthenticatedCiphertext.ciphertext.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  return GKCrypto_GroupAuthenticatedCiphertext.unknownFields.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.Context.groupVersion()
{
  return 0;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.groupVersion.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.groupVersion.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.Context.groupVersion.modify())()
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.groupVersion.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.Context.keyHash()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.keyHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.keyHash.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.Context.keyHash.modify())()
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.keyHash.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.Context.role()
{
  return 0;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.role.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.role.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.Context.role.modify())()
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.role.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  return GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.modify;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v9 = 0;
  v8 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  v7 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t)&v6 - v7;
  v13 = (char *)&v6 - v7;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  UnknownStorage.init()();
  v10 = *(int *)(v8 + 28);
  v4 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v11 + v10, 1);
  return outlined init with take of GKCrypto_GroupAuthenticatedCiphertext(v11, v12);
}

uint64_t outlined init with take of GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v9 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  v5 = *(int *)(v9 + 24);
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(a2 + v5, a1 + v5);
  v10 = *(int *)(v9 + 28);
  v12 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(a1 + v10, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a2 + v10), (const void *)(a1 + v10), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = a2 + v10;
    *(_DWORD *)v4 = *(_DWORD *)(a1 + v10);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + v10 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + v10 + 24);
    *(_BYTE *)(v4 + 32) = *(_BYTE *)(a1 + v10 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v8)(a2 + v10 + *(int *)(v12 + 28), a1 + v10 + *(int *)(v12 + 28), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2 + v10, 0, 1, v12);
  }
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupAuthenticatedCiphertext._context@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

uint64_t variable initialization expression of GKCrypto_AdminSeed.seed()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminSeed.seed.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t GKCrypto_AdminSeed.seed.setter(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *v2;
  v4 = v2[1];
  *v2 = a1;
  v2[1] = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminSeed.seed.modify())()
{
  return GKCrypto_AdminSeed.seed.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminSeed.diversifier()
{
  return Data.init()();
}

uint64_t GKCrypto_AdminSeed.diversifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t GKCrypto_AdminSeed.diversifier.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_AdminSeed.diversifier.modify())()
{
  return GKCrypto_AdminSeed.diversifier.modify;
}

uint64_t variable initialization expression of GKCrypto_AdminSeed.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_AdminSeed.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_AdminSeed() + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_AdminSeed()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_AdminSeed;
  if (!type metadata singleton initialization cache for GKCrypto_AdminSeed)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_AdminSeed.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_AdminSeed();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 24), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_AdminSeed.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_AdminSeed();
  return GKCrypto_AdminSeed.unknownFields.modify;
}

char *GKCrypto_AdminSeed.init()@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_AdminSeed();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (char *)&v8 - v9;
  v13 = (char *)&v8 - v9;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)v11 = v1;
  *((_QWORD *)v2 + 1) = v3;
  v4 = Data.init()();
  v5 = v11;
  *((_QWORD *)v11 + 2) = v4;
  *((_QWORD *)v5 + 3) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_AdminSeed(v11, v12);
}

char *outlined init with take of GKCrypto_AdminSeed(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  v4 = *(int *)(type metadata accessor for GKCrypto_AdminSeed() + 24);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.version()
{
  return 0;
}

uint64_t GKCrypto_SeedBlobRequest.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_SeedBlobRequest.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_SeedBlobRequest.version.modify())()
{
  return GKCrypto_SeedBlobRequest.version.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.nonce()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlobRequest.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_SeedBlobRequest.nonce.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlobRequest.nonce.modify())()
{
  return GKCrypto_SeedBlobRequest.nonce.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.role()
{
  return 0;
}

uint64_t GKCrypto_SeedBlobRequest.role.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t GKCrypto_SeedBlobRequest.role.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*GKCrypto_SeedBlobRequest.role.modify())()
{
  return GKCrypto_SeedBlobRequest.role.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.lastKnowSeedVersion()
{
  return 0;
}

uint64_t GKCrypto_SeedBlobRequest.lastKnowSeedVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t GKCrypto_SeedBlobRequest.lastKnowSeedVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*GKCrypto_SeedBlobRequest.lastKnowSeedVersion.modify())()
{
  return GKCrypto_SeedBlobRequest.lastKnowSeedVersion.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.verificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlobRequest.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_SeedBlobRequest.verificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlobRequest.verificationKey.modify())()
{
  return GKCrypto_SeedBlobRequest.verificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_SeedBlobRequest.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_SeedBlobRequest.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_SeedBlobRequest.signature.modify())()
{
  return GKCrypto_SeedBlobRequest.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_SeedBlobRequest.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_SeedBlobRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_SeedBlobRequest() + 40);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_SeedBlobRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_SeedBlobRequest;
  if (!type metadata singleton initialization cache for GKCrypto_SeedBlobRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_SeedBlobRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_SeedBlobRequest();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 40), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_SeedBlobRequest.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_SeedBlobRequest();
  return GKCrypto_SeedBlobRequest.unknownFields.modify;
}

uint64_t GKCrypto_SeedBlobRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v15 = a1;
  v16 = 0;
  v13 = type metadata accessor for GKCrypto_SeedBlobRequest();
  v12 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v14 = (uint64_t)&v11 - v12;
  v16 = (char *)&v11 - v12;
  *(_DWORD *)v14 = 0;
  v1 = Data.init()();
  v2 = v14;
  *(_QWORD *)(v14 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 24) = 0;
  *(_BYTE *)(v2 + 32) = 1;
  *(_DWORD *)(v2 + 36) = 0;
  v4 = Data.init()();
  v5 = v14;
  *(_QWORD *)(v14 + 40) = v4;
  *(_QWORD *)(v5 + 48) = v6;
  v7 = Data.init()();
  v8 = v14;
  *(_QWORD *)(v14 + 56) = v7;
  *(_QWORD *)(v8 + 64) = v9;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_SeedBlobRequest(v14, v15);
}

uint64_t outlined init with take of GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  v4 = *(int *)(type metadata accessor for GKCrypto_SeedBlobRequest() + 40);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.version()
{
  return 0;
}

uint64_t GKCrypto_RSVPQueueRequest.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_RSVPQueueRequest.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_RSVPQueueRequest.version.modify())()
{
  return GKCrypto_RSVPQueueRequest.version.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.nonce()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPQueueRequest.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_RSVPQueueRequest.nonce.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPQueueRequest.nonce.modify())()
{
  return GKCrypto_RSVPQueueRequest.nonce.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.groupID()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPQueueRequest.groupID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_RSVPQueueRequest.groupID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPQueueRequest.groupID.modify())()
{
  return GKCrypto_RSVPQueueRequest.groupID.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.groupMemberVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPQueueRequest.groupMemberVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_RSVPQueueRequest.groupMemberVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPQueueRequest.groupMemberVerificationKey.modify())()
{
  return GKCrypto_RSVPQueueRequest.groupMemberVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_RSVPQueueRequest.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_RSVPQueueRequest.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_RSVPQueueRequest.signature.modify())()
{
  return GKCrypto_RSVPQueueRequest.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_RSVPQueueRequest.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_RSVPQueueRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_RSVPQueueRequest() + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_RSVPQueueRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_RSVPQueueRequest;
  if (!type metadata singleton initialization cache for GKCrypto_RSVPQueueRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_RSVPQueueRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_RSVPQueueRequest();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 36), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_RSVPQueueRequest.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_RSVPQueueRequest();
  return GKCrypto_RSVPQueueRequest.unknownFields.modify;
}

uint64_t GKCrypto_RSVPQueueRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v18 = a1;
  v19 = 0;
  v16 = type metadata accessor for GKCrypto_RSVPQueueRequest();
  v15 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (uint64_t)&v14 - v15;
  v19 = (char *)&v14 - v15;
  *(_DWORD *)v17 = 0;
  v1 = Data.init()();
  v2 = v17;
  *(_QWORD *)(v17 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v17;
  *(_QWORD *)(v17 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = Data.init()();
  v8 = v17;
  *(_QWORD *)(v17 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v9;
  v10 = Data.init()();
  v11 = v17;
  *(_QWORD *)(v17 + 56) = v10;
  *(_QWORD *)(v11 + 64) = v12;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_RSVPQueueRequest(v17, v18);
}

uint64_t outlined init with take of GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  v4 = *(int *)(type metadata accessor for GKCrypto_RSVPQueueRequest() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_KeyChainUserKeys.version()
{
  return 0;
}

uint64_t GKCrypto_KeyChainUserKeys.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_KeyChainUserKeys.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_KeyChainUserKeys.version.modify())()
{
  return GKCrypto_KeyChainUserKeys.version.modify;
}

uint64_t variable initialization expression of GKCrypto_KeyChainUserKeys.signingKey()
{
  return Data.init()();
}

uint64_t GKCrypto_KeyChainUserKeys.signingKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_KeyChainUserKeys.signingKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_KeyChainUserKeys.signingKey.modify())()
{
  return GKCrypto_KeyChainUserKeys.signingKey.modify;
}

uint64_t variable initialization expression of GKCrypto_KeyChainUserKeys.decryptionKey()
{
  return Data.init()();
}

uint64_t GKCrypto_KeyChainUserKeys.decryptionKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_KeyChainUserKeys.decryptionKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_KeyChainUserKeys.decryptionKey.modify())()
{
  return GKCrypto_KeyChainUserKeys.decryptionKey.modify;
}

uint64_t variable initialization expression of GKCrypto_KeyChainUserKeys.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_KeyChainUserKeys.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_KeyChainUserKeys() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_KeyChainUserKeys()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_KeyChainUserKeys;
  if (!type metadata singleton initialization cache for GKCrypto_KeyChainUserKeys)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_KeyChainUserKeys.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_KeyChainUserKeys();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_KeyChainUserKeys.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_KeyChainUserKeys();
  return GKCrypto_KeyChainUserKeys.unknownFields.modify;
}

uint64_t GKCrypto_KeyChainUserKeys.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_KeyChainUserKeys();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)&v8 - v9;
  v13 = (char *)&v8 - v9;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v11;
  *(_QWORD *)(v11 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_KeyChainUserKeys(v11, v12);
}

uint64_t outlined init with take of GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v4 = *(int *)(type metadata accessor for GKCrypto_KeyChainUserKeys() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.version()
{
  return 0;
}

uint64_t GKCrypto_GroupAccessInfo.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupAccessInfo.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupAccessInfo.version.modify())()
{
  return GKCrypto_GroupAccessInfo.version.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.keyShare()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAccessInfo.keyShare.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupAccessInfo.keyShare.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAccessInfo.keyShare.modify())()
{
  return GKCrypto_GroupAccessInfo.keyShare.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.keyOffset()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAccessInfo.keyOffset.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_GroupAccessInfo.keyOffset.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAccessInfo.keyOffset.modify())()
{
  return GKCrypto_GroupAccessInfo.keyOffset.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.decryptionKeyHash()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAccessInfo.decryptionKeyHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_GroupAccessInfo.decryptionKeyHash.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAccessInfo.decryptionKeyHash.modify())()
{
  return GKCrypto_GroupAccessInfo.decryptionKeyHash.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.signingKeyHash()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupAccessInfo.signingKeyHash.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_GroupAccessInfo.signingKeyHash.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupAccessInfo.signingKeyHash.modify())()
{
  return GKCrypto_GroupAccessInfo.signingKeyHash.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupAccessInfo.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupAccessInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAccessInfo() + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_GroupAccessInfo()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupAccessInfo;
  if (!type metadata singleton initialization cache for GKCrypto_GroupAccessInfo)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupAccessInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupAccessInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 36), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupAccessInfo.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupAccessInfo();
  return GKCrypto_GroupAccessInfo.unknownFields.modify;
}

uint64_t GKCrypto_GroupAccessInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v18 = a1;
  v19 = 0;
  v16 = type metadata accessor for GKCrypto_GroupAccessInfo();
  v15 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (uint64_t)&v14 - v15;
  v19 = (char *)&v14 - v15;
  *(_DWORD *)v17 = 0;
  v1 = Data.init()();
  v2 = v17;
  *(_QWORD *)(v17 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v17;
  *(_QWORD *)(v17 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = Data.init()();
  v8 = v17;
  *(_QWORD *)(v17 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v9;
  v10 = Data.init()();
  v11 = v17;
  *(_QWORD *)(v17 + 56) = v10;
  *(_QWORD *)(v11 + 64) = v12;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupAccessInfo(v17, v18);
}

uint64_t outlined init with take of GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupAccessInfo() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.version()
{
  return 0;
}

uint64_t GKCrypto_GroupBlobRequest.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_GroupBlobRequest.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_GroupBlobRequest.version.modify())()
{
  return GKCrypto_GroupBlobRequest.version.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.nonce()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlobRequest.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_GroupBlobRequest.nonce.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlobRequest.nonce.modify())()
{
  return GKCrypto_GroupBlobRequest.nonce.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.groupID()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlobRequest.groupID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_GroupBlobRequest.groupID.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlobRequest.groupID.modify())()
{
  return GKCrypto_GroupBlobRequest.groupID.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.diversifiedVerificationKey()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlobRequest.diversifiedVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 48));
  return v2;
}

uint64_t GKCrypto_GroupBlobRequest.diversifiedVerificationKey.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlobRequest.diversifiedVerificationKey.modify())()
{
  return GKCrypto_GroupBlobRequest.diversifiedVerificationKey.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.signature()
{
  return Data.init()();
}

uint64_t GKCrypto_GroupBlobRequest.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

uint64_t GKCrypto_GroupBlobRequest.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_GroupBlobRequest.signature.modify())()
{
  return GKCrypto_GroupBlobRequest.signature.modify;
}

uint64_t variable initialization expression of GKCrypto_GroupBlobRequest.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_GroupBlobRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlobRequest() + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_GroupBlobRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_GroupBlobRequest;
  if (!type metadata singleton initialization cache for GKCrypto_GroupBlobRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_GroupBlobRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_GroupBlobRequest();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 36), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_GroupBlobRequest.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_GroupBlobRequest();
  return GKCrypto_GroupBlobRequest.unknownFields.modify;
}

uint64_t GKCrypto_GroupBlobRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v18 = a1;
  v19 = 0;
  v16 = type metadata accessor for GKCrypto_GroupBlobRequest();
  v15 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v17 = (uint64_t)&v14 - v15;
  v19 = (char *)&v14 - v15;
  *(_DWORD *)v17 = 0;
  v1 = Data.init()();
  v2 = v17;
  *(_QWORD *)(v17 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v17;
  *(_QWORD *)(v17 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  v7 = Data.init()();
  v8 = v17;
  *(_QWORD *)(v17 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v9;
  v10 = Data.init()();
  v11 = v17;
  *(_QWORD *)(v17 + 56) = v10;
  *(_QWORD *)(v11 + 64) = v12;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_GroupBlobRequest(v17, v18);
}

uint64_t outlined init with take of GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlobRequest() + 36);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t variable initialization expression of GKCrypto_EncryptedInvitation.version()
{
  return 0;
}

uint64_t GKCrypto_EncryptedInvitation.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GKCrypto_EncryptedInvitation.version.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*GKCrypto_EncryptedInvitation.version.modify())()
{
  return GKCrypto_EncryptedInvitation.version.modify;
}

uint64_t variable initialization expression of GKCrypto_EncryptedInvitation.keyCheck()
{
  return Data.init()();
}

uint64_t GKCrypto_EncryptedInvitation.keyCheck.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t GKCrypto_EncryptedInvitation.keyCheck.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_EncryptedInvitation.keyCheck.modify())()
{
  return GKCrypto_EncryptedInvitation.keyCheck.modify;
}

uint64_t variable initialization expression of GKCrypto_EncryptedInvitation.encryptedInvitation()
{
  return Data.init()();
}

uint64_t GKCrypto_EncryptedInvitation.encryptedInvitation.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t GKCrypto_EncryptedInvitation.encryptedInvitation.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  outlined consume of Data._Representation(v3, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t (*GKCrypto_EncryptedInvitation.encryptedInvitation.modify())()
{
  return GKCrypto_EncryptedInvitation.encryptedInvitation.modify;
}

uint64_t variable initialization expression of GKCrypto_EncryptedInvitation.unknownFields()
{
  return UnknownStorage.init()();
}

uint64_t GKCrypto_EncryptedInvitation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GKCrypto_EncryptedInvitation() + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GKCrypto_EncryptedInvitation()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GKCrypto_EncryptedInvitation;
  if (!type metadata singleton initialization cache for GKCrypto_EncryptedInvitation)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GKCrypto_EncryptedInvitation.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v6[1] = 0;
  v9 = type metadata accessor for UnknownStorage();
  v8 = *(_QWORD *)(v9 - 8);
  v6[0] = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)v6 - v6[0];
  (*(void (**)(double))(v3 + 16))(v2);
  v4 = type metadata accessor for GKCrypto_EncryptedInvitation();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v1 + *(int *)(v4 + 28), v7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
}

uint64_t (*GKCrypto_EncryptedInvitation.unknownFields.modify())()
{
  type metadata accessor for GKCrypto_EncryptedInvitation();
  return GKCrypto_EncryptedInvitation.unknownFields.modify;
}

uint64_t GKCrypto_EncryptedInvitation.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v12 = a1;
  v13 = 0;
  v10 = type metadata accessor for GKCrypto_EncryptedInvitation();
  v9 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v11 = (uint64_t)&v8 - v9;
  v13 = (char *)&v8 - v9;
  *(_DWORD *)v11 = 0;
  v1 = Data.init()();
  v2 = v11;
  *(_QWORD *)(v11 + 8) = v1;
  *(_QWORD *)(v2 + 16) = v3;
  v4 = Data.init()();
  v5 = v11;
  *(_QWORD *)(v11 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v6;
  UnknownStorage.init()();
  return outlined init with take of GKCrypto_EncryptedInvitation(v11, v12);
}

uint64_t outlined init with take of GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v4 = *(int *)(type metadata accessor for GKCrypto_EncryptedInvitation() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t one-time initialization function for _protobuf_package()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GKCrypto", 8uLL, 1);
  result = v1._countAndFlagsBits;
  _protobuf_package = v1;
  return result;
}

Swift::String *_protobuf_package.unsafeMutableAddressor()
{
  if (one-time initialization token for _protobuf_package != -1)
    swift_once();
  return &_protobuf_package;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_Role._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_Role._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 0;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "Member";
  *((_QWORD *)v8 + 1) = 6;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 1;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "Administrator";
  *((_QWORD *)v4 + 1) = 13;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupHandle._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupHandle._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "ephemeralKey";
  *((_QWORD *)v10 + 1) = 12;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "nonce";
  *((_QWORD *)v3 + 1) = 5;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "ciphertexts";
  *((_QWORD *)v6 + 1) = 11;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(void);
  uint64_t v17;

  v11 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v11, static GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap);
  __swift_project_value_buffer(v11, (uint64_t)static GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v15 = v0;
  v1 = *(int *)(v17 + 48);
  *v0 = 1;
  v13 = (char *)v0 + v1;
  *(_QWORD *)v13 = "publicKeyHash";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v12 = *MEMORY[0x24BE5C318];
  v16 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v16)(v13, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72);
  v2 = *(int *)(v17 + 48);
  *(_QWORD *)((char *)v15 + v14) = 2;
  v3 = (char *)v15 + v14 + v2;
  *(_QWORD *)v3 = "ciphertext";
  *((_QWORD *)v3 + 1) = 10;
  v3[16] = 2;
  v16();
  v4 = *(int *)(v17 + 48);
  v5 = (_QWORD *)((char *)v15 + 2 * v14);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "tag";
  *((_QWORD *)v6 + 1) = 3;
  v6[16] = 2;
  v16();
  v7 = *(int *)(v17 + 48);
  v8 = (_QWORD *)((char *)v15 + 3 * v14);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "keyShareHint";
  *((_QWORD *)v9 + 1) = 12;
  v9[16] = 2;
  v16();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(void);
  uint64_t v23;

  v17 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v17, static GKCrypto_GroupBlob._protobuf_nameMap);
  __swift_project_value_buffer(v17, (uint64_t)static GKCrypto_GroupBlob._protobuf_nameMap);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v21 = v0;
  v1 = *(int *)(v23 + 48);
  *v0 = 1;
  v19 = (char *)v0 + v1;
  *(_QWORD *)v19 = "version";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v18 = *MEMORY[0x24BE5C318];
  v22 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v22)(v19, v18);
  v20 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
  v2 = *(int *)(v23 + 48);
  *(_QWORD *)((char *)v21 + v20) = 2;
  v3 = (char *)v21 + v20 + v2;
  *(_QWORD *)v3 = "groupHandle";
  *((_QWORD *)v3 + 1) = 11;
  v3[16] = 2;
  v22();
  v4 = *(int *)(v23 + 48);
  v5 = (_QWORD *)((char *)v21 + 2 * v20);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "AEGroupBlobCiphertext";
  *((_QWORD *)v6 + 1) = 21;
  v6[16] = 2;
  v22();
  v7 = *(int *)(v23 + 48);
  v8 = (_QWORD *)((char *)v21 + 3 * v20);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "randomizedVerificationKeys";
  *((_QWORD *)v9 + 1) = 26;
  v9[16] = 2;
  v22();
  v10 = *(int *)(v23 + 48);
  v11 = (_QWORD *)((char *)v21 + 4 * v20);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "groupBlobPublicKeys";
  *((_QWORD *)v12 + 1) = 19;
  v12[16] = 2;
  v22();
  v13 = *(int *)(v23 + 48);
  v14 = (_QWORD *)((char *)v21 + 5 * v20);
  *v14 = 6;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "groupBlobSignatures";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v22();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;

  v4 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v4, static GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap);
  __swift_project_value_buffer(v4, (uint64_t)static GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v0 = *(int *)(v7 + 48);
  *v1 = 1;
  v6 = (char *)v1 + v0;
  *(_QWORD *)v6 = "randomizedVerificationKeys";
  *((_QWORD *)v6 + 1) = 26;
  v6[16] = 2;
  v5 = *MEMORY[0x24BE5C318];
  v2 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 8) + 104))(v6, v5);
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(void);
  uint64_t v17;

  v11 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v11, static GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap);
  __swift_project_value_buffer(v11, (uint64_t)static GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v15 = v0;
  v1 = *(int *)(v17 + 48);
  *v0 = 1;
  v13 = (char *)v0 + v1;
  *(_QWORD *)v13 = "groupVerificationKey";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v12 = *MEMORY[0x24BE5C318];
  v16 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v16)(v13, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72);
  v2 = *(int *)(v17 + 48);
  *(_QWORD *)((char *)v15 + v14) = 2;
  v3 = (char *)v15 + v14 + v2;
  *(_QWORD *)v3 = "adminVerificationKey";
  *((_QWORD *)v3 + 1) = 20;
  v3[16] = 2;
  v16();
  v4 = *(int *)(v17 + 48);
  v5 = (_QWORD *)((char *)v15 + 2 * v14);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "groupPublicEncryptionKey";
  *((_QWORD *)v6 + 1) = 24;
  v6[16] = 2;
  v16();
  v7 = *(int *)(v17 + 48);
  v8 = (_QWORD *)((char *)v15 + 3 * v14);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "adminPublicEncryptionKey";
  *((_QWORD *)v9 + 1) = 24;
  v9[16] = 2;
  v16();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "currentGroupAdminSignature";
  *((_QWORD *)v10 + 1) = 26;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "previousGroupAdminSignature";
  *((_QWORD *)v3 + 1) = 27;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "currentMemberSignature";
  *((_QWORD *)v6 + 1) = 22;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_AdminGroupBlob._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_AdminGroupBlob._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "adminGroupHandleBlob";
  *((_QWORD *)v8 + 1) = 20;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "adminGroupAEBlobCiphertext";
  *((_QWORD *)v4 + 1) = 26;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_VersionedSeed._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_VersionedSeed._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "groupVersion";
  *((_QWORD *)v8 + 1) = 12;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "seed";
  *((_QWORD *)v4 + 1) = 4;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(void);
  uint64_t v26;

  v20 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v20, static GKCrypto_UserKeys._protobuf_nameMap);
  __swift_project_value_buffer(v20, (uint64_t)static GKCrypto_UserKeys._protobuf_nameMap);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v24 = v0;
  v1 = *(int *)(v26 + 48);
  *v0 = 1;
  v22 = (char *)v0 + v1;
  *(_QWORD *)v22 = "version";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v21 = *MEMORY[0x24BE5C318];
  v25 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v25)(v22, v21);
  v23 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72);
  v2 = *(int *)(v26 + 48);
  *(_QWORD *)((char *)v24 + v23) = 2;
  v3 = (char *)v24 + v23 + v2;
  *(_QWORD *)v3 = "encryptionKey";
  *((_QWORD *)v3 + 1) = 13;
  v3[16] = 2;
  v25();
  v4 = *(int *)(v26 + 48);
  v5 = (_QWORD *)((char *)v24 + 2 * v23);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "verificationKey";
  *((_QWORD *)v6 + 1) = 15;
  v6[16] = 2;
  v25();
  v7 = *(int *)(v26 + 48);
  v8 = (_QWORD *)((char *)v24 + 3 * v23);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "encryptionKeySignature";
  *((_QWORD *)v9 + 1) = 22;
  v9[16] = 2;
  v25();
  v10 = *(int *)(v26 + 48);
  v11 = (_QWORD *)((char *)v24 + 4 * v23);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "verificationKeySelfSignature";
  *((_QWORD *)v12 + 1) = 28;
  v12[16] = 2;
  v25();
  v13 = *(int *)(v26 + 48);
  v14 = (_QWORD *)((char *)v24 + 5 * v23);
  *v14 = 6;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "verificationKeyExternalSignatures";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v25();
  v16 = *(int *)(v26 + 48);
  v17 = (_QWORD *)((char *)v24 + 6 * v23);
  *v17 = 7;
  v18 = (char *)v17 + v16;
  *(_QWORD *)v18 = "metadata";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v25();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "verificationKey";
  *((_QWORD *)v8 + 1) = 15;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "signature";
  *((_QWORD *)v4 + 1) = 9;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupAETextToSign._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupAETextToSign._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "users";
  *((_QWORD *)v10 + 1) = 5;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "preliminarySeed";
  *((_QWORD *)v3 + 1) = 15;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "groupAssociatedData";
  *((_QWORD *)v6 + 1) = 19;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(void);
  uint64_t v17;

  v11 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v11, static GKCrypto_GroupAETextToSign.User._protobuf_nameMap);
  __swift_project_value_buffer(v11, (uint64_t)static GKCrypto_GroupAETextToSign.User._protobuf_nameMap);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v15 = v0;
  v1 = *(int *)(v17 + 48);
  *v0 = 1;
  v13 = (char *)v0 + v1;
  *(_QWORD *)v13 = "groupKitID";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v12 = *MEMORY[0x24BE5C318];
  v16 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v16)(v13, v12);
  v14 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72);
  v2 = *(int *)(v17 + 48);
  *(_QWORD *)((char *)v15 + v14) = 2;
  v3 = (char *)v15 + v14 + v2;
  *(_QWORD *)v3 = "userKeysBlob";
  *((_QWORD *)v3 + 1) = 12;
  v3[16] = 2;
  v16();
  v4 = *(int *)(v17 + 48);
  v5 = (_QWORD *)((char *)v15 + 2 * v14);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "role";
  *((_QWORD *)v6 + 1) = 4;
  v6[16] = 2;
  v16();
  v7 = *(int *)(v17 + 48);
  v8 = (_QWORD *)((char *)v15 + 3 * v14);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "keyShare";
  *((_QWORD *)v9 + 1) = 8;
  v9[16] = 2;
  v16();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "originatorID";
  *((_QWORD *)v8 + 1) = 12;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "adminGroupBlob";
  *((_QWORD *)v4 + 1) = 14;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "groupAETextToSignBlob";
  *((_QWORD *)v3 + 1) = 21;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "signature";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;

  v4 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v4, static GKCrypto_AdminMetaData._protobuf_nameMap);
  __swift_project_value_buffer(v4, (uint64_t)static GKCrypto_AdminMetaData._protobuf_nameMap);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v0 = *(int *)(v7 + 48);
  *v1 = 1;
  v6 = (char *)v1 + v0;
  *(_QWORD *)v6 = "administratorID";
  *((_QWORD *)v6 + 1) = 15;
  v6[16] = 2;
  v5 = *MEMORY[0x24BE5C318];
  v2 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v2 - 8) + 104))(v6, v5);
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_AdminPlainText._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_AdminPlainText._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "adminPreliminarySeed";
  *((_QWORD *)v10 + 1) = 20;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "metaData";
  *((_QWORD *)v3 + 1) = 8;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "signature";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(void);
  uint64_t v32;

  v26 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v26, static GKCrypto_Invite._protobuf_nameMap);
  __swift_project_value_buffer(v26, (uint64_t)static GKCrypto_Invite._protobuf_nameMap);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v30 = v0;
  v1 = *(int *)(v32 + 48);
  *v0 = 1;
  v28 = (char *)v0 + v1;
  *(_QWORD *)v28 = "inviteeID";
  *((_QWORD *)v28 + 1) = 9;
  v28[16] = 2;
  v27 = *MEMORY[0x24BE5C318];
  v31 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v31)(v28, v27);
  v29 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
  v2 = *(int *)(v32 + 48);
  *(_QWORD *)((char *)v30 + v29) = 2;
  v3 = (char *)v30 + v29 + v2;
  *(_QWORD *)v3 = "groupID";
  *((_QWORD *)v3 + 1) = 7;
  v3[16] = 2;
  v31();
  v4 = *(int *)(v32 + 48);
  v5 = (_QWORD *)((char *)v30 + 2 * v29);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "randomizedVerificationKey";
  *((_QWORD *)v6 + 1) = 25;
  v6[16] = 2;
  v31();
  v7 = *(int *)(v32 + 48);
  v8 = (_QWORD *)((char *)v30 + 3 * v29);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "keyOffset";
  *((_QWORD *)v9 + 1) = 9;
  v9[16] = 2;
  v31();
  v10 = *(int *)(v32 + 48);
  v11 = (_QWORD *)((char *)v30 + 4 * v29);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "metadata";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v31();
  v13 = *(int *)(v32 + 48);
  v14 = (_QWORD *)((char *)v30 + 5 * v29);
  *v14 = 6;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "inviterID";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v31();
  v16 = *(int *)(v32 + 48);
  v17 = (_QWORD *)((char *)v30 + 6 * v29);
  *v17 = 7;
  v18 = (char *)v17 + v16;
  *(_QWORD *)v18 = "rsvpResponseDigest";
  *((_QWORD *)v18 + 1) = 18;
  v18[16] = 2;
  v31();
  v19 = *(int *)(v32 + 48);
  v20 = (_QWORD *)((char *)v30 + 7 * v29);
  *v20 = 8;
  v21 = (char *)v20 + v19;
  *(_QWORD *)v21 = "groupVersionWhenInvited";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v31();
  v22 = *(int *)(v32 + 48);
  v23 = &v30[v29];
  *v23 = 9;
  v24 = (char *)v23 + v22;
  *(_QWORD *)v24 = "inviterKeyHint";
  *((_QWORD *)v24 + 1) = 14;
  v24[16] = 2;
  v31();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_SignedInvite._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_SignedInvite._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "invite";
  *((_QWORD *)v3 + 1) = 6;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "signature";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;

  v14 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v14, static GKCrypto_RSVP._protobuf_nameMap);
  __swift_project_value_buffer(v14, (uint64_t)static GKCrypto_RSVP._protobuf_nameMap);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v18 = v0;
  v1 = *(int *)(v20 + 48);
  *v0 = 1;
  v16 = (char *)v0 + v1;
  *(_QWORD *)v16 = "version";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v15 = *MEMORY[0x24BE5C318];
  v19 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v19)(v16, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v2 = *(int *)(v20 + 48);
  *(_QWORD *)((char *)v18 + v17) = 2;
  v3 = (char *)v18 + v17 + v2;
  *(_QWORD *)v3 = "response";
  *((_QWORD *)v3 + 1) = 8;
  v3[16] = 2;
  v19();
  v4 = *(int *)(v20 + 48);
  v5 = (_QWORD *)((char *)v18 + 2 * v17);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "nonce";
  *((_QWORD *)v6 + 1) = 5;
  v6[16] = 2;
  v19();
  v7 = *(int *)(v20 + 48);
  v8 = (_QWORD *)((char *)v18 + 3 * v17);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "groupIdHint";
  *((_QWORD *)v9 + 1) = 11;
  v9[16] = 2;
  v19();
  v10 = *(int *)(v20 + 48);
  v11 = (_QWORD *)((char *)v18 + 4 * v17);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "verificationKey";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v19();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(void);
  uint64_t v23;

  v17 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v17, static GKCrypto_RSVP.Response._protobuf_nameMap);
  __swift_project_value_buffer(v17, (uint64_t)static GKCrypto_RSVP.Response._protobuf_nameMap);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v21 = v0;
  v1 = *(int *)(v23 + 48);
  *v0 = 0;
  v19 = (char *)v0 + v1;
  *(_QWORD *)v19 = "UNSPECIFIED";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v18 = *MEMORY[0x24BE5C318];
  v22 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v22)(v19, v18);
  v20 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
  v2 = *(int *)(v23 + 48);
  *(_QWORD *)((char *)v21 + v20) = 1;
  v3 = (char *)v21 + v20 + v2;
  *(_QWORD *)v3 = "ACCEPT";
  *((_QWORD *)v3 + 1) = 6;
  v3[16] = 2;
  v22();
  v4 = *(int *)(v23 + 48);
  v5 = (_QWORD *)((char *)v21 + 2 * v20);
  *v5 = 2;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "REJECT";
  *((_QWORD *)v6 + 1) = 6;
  v6[16] = 2;
  v22();
  v7 = *(int *)(v23 + 48);
  v8 = (_QWORD *)((char *)v21 + 3 * v20);
  *v8 = 3;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "LEAVE";
  *((_QWORD *)v9 + 1) = 5;
  v9[16] = 2;
  v22();
  v10 = *(int *)(v23 + 48);
  v11 = (_QWORD *)((char *)v21 + 4 * v20);
  *v11 = 4;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "DEMOTE";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v22();
  v13 = *(int *)(v23 + 48);
  v14 = (_QWORD *)((char *)v21 + 5 * v20);
  *v14 = 5;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "DESTROY";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v22();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_SignedRSVP._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_SignedRSVP._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "rsvp";
  *((_QWORD *)v3 + 1) = 4;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "signature";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_RSVPResponse._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_RSVPResponse._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "randomizedVerificationKey";
  *((_QWORD *)v3 + 1) = 25;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "ciphertextOfKeyShare";
  *((_QWORD *)v6 + 1) = 20;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_HPKEOneShotCipherText._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_HPKEOneShotCipherText._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "encapsulatedKey";
  *((_QWORD *)v8 + 1) = 15;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "sealedMessage";
  *((_QWORD *)v4 + 1) = 13;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(void);
  uint64_t v23;

  v17 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v17, static GKCrypto_SeedBlob._protobuf_nameMap);
  __swift_project_value_buffer(v17, (uint64_t)static GKCrypto_SeedBlob._protobuf_nameMap);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v21 = v0;
  v1 = *(int *)(v23 + 48);
  *v0 = 1;
  v19 = (char *)v0 + v1;
  *(_QWORD *)v19 = "version";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v18 = *MEMORY[0x24BE5C318];
  v22 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v22)(v19, v18);
  v20 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
  v2 = *(int *)(v23 + 48);
  *(_QWORD *)((char *)v21 + v20) = 2;
  v3 = (char *)v21 + v20 + v2;
  *(_QWORD *)v3 = "ciphertext";
  *((_QWORD *)v3 + 1) = 10;
  v3[16] = 2;
  v22();
  v4 = *(int *)(v23 + 48);
  v5 = (_QWORD *)((char *)v21 + 2 * v20);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "signature";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v22();
  v7 = *(int *)(v23 + 48);
  v8 = (_QWORD *)((char *)v21 + 3 * v20);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "keyHint";
  *((_QWORD *)v9 + 1) = 7;
  v9[16] = 2;
  v22();
  v10 = *(int *)(v23 + 48);
  v11 = (_QWORD *)((char *)v21 + 4 * v20);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "seedVersion";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v22();
  v13 = *(int *)(v23 + 48);
  v14 = (_QWORD *)((char *)v21 + 5 * v20);
  *v14 = 6;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "role";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v22();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "context";
  *((_QWORD *)v3 + 1) = 7;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "ciphertext";
  *((_QWORD *)v6 + 1) = 10;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "groupVersion";
  *((_QWORD *)v10 + 1) = 12;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "keyHash";
  *((_QWORD *)v3 + 1) = 7;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "role";
  *((_QWORD *)v6 + 1) = 4;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  void (*v10)(void);
  uint64_t v11;

  v6 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v6, static GKCrypto_AdminSeed._protobuf_nameMap);
  __swift_project_value_buffer(v6, (uint64_t)static GKCrypto_AdminSeed._protobuf_nameMap);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v9 = v0;
  v1 = *(int *)(v11 + 48);
  *v0 = 1;
  v8 = (char *)v0 + v1;
  *(_QWORD *)v8 = "seed";
  *((_QWORD *)v8 + 1) = 4;
  v8[16] = 2;
  v7 = *MEMORY[0x24BE5C318];
  v10 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v10)(v8, v7);
  v2 = *(int *)(v11 + 48);
  v3 = (_QWORD *)((char *)v9 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72));
  *v3 = 2;
  v4 = (char *)v3 + v2;
  *(_QWORD *)v4 = "diversifier";
  *((_QWORD *)v4 + 1) = 11;
  v4[16] = 2;
  v10();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(void);
  uint64_t v23;

  v17 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v17, static GKCrypto_SeedBlobRequest._protobuf_nameMap);
  __swift_project_value_buffer(v17, (uint64_t)static GKCrypto_SeedBlobRequest._protobuf_nameMap);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v21 = v0;
  v1 = *(int *)(v23 + 48);
  *v0 = 1;
  v19 = (char *)v0 + v1;
  *(_QWORD *)v19 = "version";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v18 = *MEMORY[0x24BE5C318];
  v22 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v22)(v19, v18);
  v20 = *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72);
  v2 = *(int *)(v23 + 48);
  *(_QWORD *)((char *)v21 + v20) = 2;
  v3 = (char *)v21 + v20 + v2;
  *(_QWORD *)v3 = "nonce";
  *((_QWORD *)v3 + 1) = 5;
  v3[16] = 2;
  v22();
  v4 = *(int *)(v23 + 48);
  v5 = (_QWORD *)((char *)v21 + 2 * v20);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "role";
  *((_QWORD *)v6 + 1) = 4;
  v6[16] = 2;
  v22();
  v7 = *(int *)(v23 + 48);
  v8 = (_QWORD *)((char *)v21 + 3 * v20);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "lastKnowSeedVersion";
  *((_QWORD *)v9 + 1) = 19;
  v9[16] = 2;
  v22();
  v10 = *(int *)(v23 + 48);
  v11 = (_QWORD *)((char *)v21 + 4 * v20);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "verificationKey";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v22();
  v13 = *(int *)(v23 + 48);
  v14 = (_QWORD *)((char *)v21 + 5 * v20);
  *v14 = 6;
  v15 = (char *)v14 + v13;
  *(_QWORD *)v15 = "signature";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v22();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;

  v14 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v14, static GKCrypto_RSVPQueueRequest._protobuf_nameMap);
  __swift_project_value_buffer(v14, (uint64_t)static GKCrypto_RSVPQueueRequest._protobuf_nameMap);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v18 = v0;
  v1 = *(int *)(v20 + 48);
  *v0 = 1;
  v16 = (char *)v0 + v1;
  *(_QWORD *)v16 = "version";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v15 = *MEMORY[0x24BE5C318];
  v19 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v19)(v16, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v2 = *(int *)(v20 + 48);
  *(_QWORD *)((char *)v18 + v17) = 2;
  v3 = (char *)v18 + v17 + v2;
  *(_QWORD *)v3 = "nonce";
  *((_QWORD *)v3 + 1) = 5;
  v3[16] = 2;
  v19();
  v4 = *(int *)(v20 + 48);
  v5 = (_QWORD *)((char *)v18 + 2 * v17);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "groupID";
  *((_QWORD *)v6 + 1) = 7;
  v6[16] = 2;
  v19();
  v7 = *(int *)(v20 + 48);
  v8 = (_QWORD *)((char *)v18 + 3 * v17);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "groupMemberVerificationKey";
  *((_QWORD *)v9 + 1) = 26;
  v9[16] = 2;
  v19();
  v10 = *(int *)(v20 + 48);
  v11 = (_QWORD *)((char *)v18 + 4 * v17);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "signature";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v19();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_KeyChainUserKeys._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_KeyChainUserKeys._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "signingKey";
  *((_QWORD *)v3 + 1) = 10;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "decryptionKey";
  *((_QWORD *)v6 + 1) = 13;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;

  v14 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v14, static GKCrypto_GroupAccessInfo._protobuf_nameMap);
  __swift_project_value_buffer(v14, (uint64_t)static GKCrypto_GroupAccessInfo._protobuf_nameMap);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v18 = v0;
  v1 = *(int *)(v20 + 48);
  *v0 = 1;
  v16 = (char *)v0 + v1;
  *(_QWORD *)v16 = "version";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v15 = *MEMORY[0x24BE5C318];
  v19 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v19)(v16, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v2 = *(int *)(v20 + 48);
  *(_QWORD *)((char *)v18 + v17) = 2;
  v3 = (char *)v18 + v17 + v2;
  *(_QWORD *)v3 = "keyShare";
  *((_QWORD *)v3 + 1) = 8;
  v3[16] = 2;
  v19();
  v4 = *(int *)(v20 + 48);
  v5 = (_QWORD *)((char *)v18 + 2 * v17);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "keyOffset";
  *((_QWORD *)v6 + 1) = 9;
  v6[16] = 2;
  v19();
  v7 = *(int *)(v20 + 48);
  v8 = (_QWORD *)((char *)v18 + 3 * v17);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "decryptionKeyHash";
  *((_QWORD *)v9 + 1) = 17;
  v9[16] = 2;
  v19();
  v10 = *(int *)(v20 + 48);
  v11 = (_QWORD *)((char *)v18 + 4 * v17);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "signingKeyHash";
  *((_QWORD *)v12 + 1) = 14;
  v12[16] = 2;
  v19();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(void);
  uint64_t v20;

  v14 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v14, static GKCrypto_GroupBlobRequest._protobuf_nameMap);
  __swift_project_value_buffer(v14, (uint64_t)static GKCrypto_GroupBlobRequest._protobuf_nameMap);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v18 = v0;
  v1 = *(int *)(v20 + 48);
  *v0 = 1;
  v16 = (char *)v0 + v1;
  *(_QWORD *)v16 = "version";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v15 = *MEMORY[0x24BE5C318];
  v19 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v19)(v16, v15);
  v17 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72);
  v2 = *(int *)(v20 + 48);
  *(_QWORD *)((char *)v18 + v17) = 2;
  v3 = (char *)v18 + v17 + v2;
  *(_QWORD *)v3 = "nonce";
  *((_QWORD *)v3 + 1) = 5;
  v3[16] = 2;
  v19();
  v4 = *(int *)(v20 + 48);
  v5 = (_QWORD *)((char *)v18 + 2 * v17);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "groupID";
  *((_QWORD *)v6 + 1) = 7;
  v6[16] = 2;
  v19();
  v7 = *(int *)(v20 + 48);
  v8 = (_QWORD *)((char *)v18 + 3 * v17);
  *v8 = 4;
  v9 = (char *)v8 + v7;
  *(_QWORD *)v9 = "diversifiedVerificationKey";
  *((_QWORD *)v9 + 1) = 26;
  v9[16] = 2;
  v19();
  v10 = *(int *)(v20 + 48);
  v11 = (_QWORD *)((char *)v18 + 4 * v17);
  *v11 = 5;
  v12 = (char *)v11 + v10;
  *(_QWORD *)v12 = "signature";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v19();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(void);
  uint64_t v14;

  v8 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v8, static GKCrypto_EncryptedInvitation._protobuf_nameMap);
  __swift_project_value_buffer(v8, (uint64_t)static GKCrypto_EncryptedInvitation._protobuf_nameMap);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  _allocateUninitializedArray<A>(_:)();
  v12 = v0;
  v1 = *(int *)(v14 + 48);
  *v0 = 1;
  v10 = (char *)v0 + v1;
  *(_QWORD *)v10 = "version";
  *((_QWORD *)v10 + 1) = 7;
  v10[16] = 2;
  v9 = *MEMORY[0x24BE5C318];
  v13 = *(void (**)(void))(*(_QWORD *)(type metadata accessor for _NameMap.NameDescription() - 8) + 104);
  ((void (*)(char *, _QWORD))v13)(v10, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72);
  v2 = *(int *)(v14 + 48);
  *(_QWORD *)((char *)v12 + v11) = 2;
  v3 = (char *)v12 + v11 + v2;
  *(_QWORD *)v3 = "keyCheck";
  *((_QWORD *)v3 + 1) = 8;
  v3[16] = 2;
  v13();
  v4 = *(int *)(v14 + 48);
  v5 = (_QWORD *)((char *)v12 + 2 * v11);
  *v5 = 3;
  v6 = (char *)v5 + v4;
  *(_QWORD *)v6 = "EncryptedInvitation";
  *((_QWORD *)v6 + 1) = 19;
  v6[16] = 2;
  v13();
  _finalizeUninitializedArray<A>(_:)();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

uint64_t GKCrypto_Role._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_Role._protobuf_nameMap);
}

uint64_t static GKCrypto_Role._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_Role._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_Role@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_Role._protobuf_nameMap.getter(a1);
}

uint64_t one-time initialization function for protoMessageName()
{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupHandle", 0xCuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupHandle.protoMessageName = v6;
  qword_256C78468 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupHandle.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".CiphertextAndTag", 0x11uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName = v6;
  qword_256C78490 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupBlob", 0xAuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupBlob.protoMessageName = v6;
  qword_256C784B8 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupBlob.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".RandomizedVerificationKeys", 0x1BuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName = v6;
  qword_256C784E0 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupBlob.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupBlobPublicKeys", 0x14uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName = v6;
  qword_256C78508 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupBlob.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupBlobSignatures", 0x14uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName = v6;
  qword_256C78530 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".AdminGroupBlob", 0xFuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_AdminGroupBlob.protoMessageName = v6;
  qword_256C78558 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".VersionedSeed", 0xEuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_VersionedSeed.protoMessageName = v6;
  qword_256C78580 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".UserKeys", 9uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_UserKeys.protoMessageName = v6;
  qword_256C785A8 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_UserKeys.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SignatureVerificationKeyPair", 0x1DuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName = v6;
  qword_256C785D0 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupAETextToSign", 0x12uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAETextToSign.protoMessageName = v6;
  qword_256C785F8 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupAETextToSign.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".User", 5uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAETextToSign.User.protoMessageName = v6;
  qword_256C78620 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupAETextToSign.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupAssociatedData", 0x14uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName = v6;
  qword_256C78648 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupAEDataToEncrypt", 0x15uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAEDataToEncrypt.protoMessageName = v6;
  qword_256C78670 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".AdminMetaData", 0xEuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_AdminMetaData.protoMessageName = v6;
  qword_256C78698 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".AdminPlainText", 0xFuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_AdminPlainText.protoMessageName = v6;
  qword_256C786C0 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".Invite", 7uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_Invite.protoMessageName = v6;
  qword_256C786E8 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SignedInvite", 0xDuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_SignedInvite.protoMessageName = v6;
  qword_256C78710 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".RSVP", 5uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_RSVP.protoMessageName = v6;
  qword_256C78738 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SignedRSVP", 0xBuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_SignedRSVP.protoMessageName = v6;
  qword_256C78778 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".RSVPResponse", 0xDuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_RSVPResponse.protoMessageName = v6;
  qword_256C787A0 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".HPKEOneShotCipherText", 0x16uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_HPKEOneShotCipherText.protoMessageName = v6;
  qword_256C787C8 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SeedBlob", 9uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_SeedBlob.protoMessageName = v6;
  qword_256C787F0 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupAuthenticatedCiphertext", 0x1DuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAuthenticatedCiphertext.protoMessageName = v6;
  qword_256C78818 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t countAndFlagsBits;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = GKCrypto_GroupAuthenticatedCiphertext.protoMessageName.unsafeMutableAddressor();
  v4 = *v0;
  v5 = v0[1];
  swift_bridgeObjectRetain();
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".Context", 8uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](v4, v5, countAndFlagsBits);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName = v6;
  qword_256C78840 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".AdminSeed", 0xAuLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_AdminSeed.protoMessageName = v6;
  qword_256C78868 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".SeedBlobRequest", 0x10uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_SeedBlobRequest.protoMessageName = v6;
  qword_256C78890 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".RSVPQueueRequest", 0x11uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_RSVPQueueRequest.protoMessageName = v6;
  qword_256C788B8 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".KeyChainUserKeys", 0x11uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_KeyChainUserKeys.protoMessageName = v6;
  qword_256C788E0 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupAccessInfo", 0x10uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupAccessInfo.protoMessageName = v6;
  qword_256C78908 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".GroupBlobRequest", 0x11uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_GroupBlobRequest.protoMessageName = v6;
  qword_256C78930 = v7;
  return result;
}

{
  Swift::String *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v6;
  uint64_t v7;

  v0 = _protobuf_package.unsafeMutableAddressor();
  countAndFlagsBits = v0->_countAndFlagsBits;
  object = v0->_object;
  swift_bridgeObjectRetain();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(".EncryptedInvitation", 0x14uLL, 1)._countAndFlagsBits;
  v6 = MEMORY[0x242634940](countAndFlagsBits, object, v1);
  v7 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v6;
  static GKCrypto_EncryptedInvitation.protoMessageName = v6;
  qword_256C78958 = v7;
  return result;
}

uint64_t *GKCrypto_GroupHandle.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupHandle.protoMessageName;
}

uint64_t static GKCrypto_GroupHandle.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupHandle.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupHandle._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupHandle._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupHandle._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupHandle._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupHandle.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupHandle.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t GKCrypto_GroupHandle.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v48 = a1;
  v44 = a2;
  v45 = a3;
  v62 = 0;
  v61 = 0;
  v63 = a2;
  v49 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)v12 - v51;
  v62 = v4;
  v61 = v3;
  v56 = *v3;
  v55 = v3[1];
  outlined copy of Data._Representation(v56, v55);
  outlined copy of Data._Representation(v56, v55);
  v54 = v60;
  v60[0] = v56;
  v60[1] = v55;
  v53 = lazy protocol witness table accessor for type Data and conformance Data();
  v57 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v54);
  outlined consume of Data._Representation(v56, v55);
  if ((v57 & 1) != 0)
  {
    v39 = v47;
  }
  else
  {
    v40 = *v46;
    v41 = v46[1];
    outlined copy of Data._Representation(v40, v41);
    v5 = v47;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v42 = v5;
    v43 = v5;
    if (v5)
    {
      v14 = v43;
      result = outlined consume of Data._Representation(v40, v41);
      v15 = v14;
      return result;
    }
    outlined consume of Data._Representation(v40, v41);
    v39 = v42;
  }
  v34 = v39;
  v37 = v46[2];
  v36 = v46[3];
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v59;
  v59[0] = v37;
  v59[1] = v36;
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v29 = v34;
  }
  else
  {
    v30 = v46[2];
    v31 = v46[3];
    outlined copy of Data._Representation(v30, v31);
    v6 = v34;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v32 = v6;
    v33 = v6;
    if (v6)
    {
      v13 = v33;
      result = outlined consume of Data._Representation(v30, v31);
      v15 = v13;
      return result;
    }
    outlined consume of Data._Representation(v30, v31);
    v29 = v32;
  }
  v24 = v29;
  v27 = v46[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = &v58;
  v58 = v27;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
  lazy protocol witness table accessor for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance [A]();
  v28 = Collection.isEmpty.getter();
  outlined destroy of [GKCrypto_GroupHandle.CiphertextAndTag]();
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
  {
    v19 = v24;
  }
  else
  {
    v21 = v46[4];
    swift_bridgeObjectRetain();
    v20 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
    v7 = v24;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v22 = v7;
    v23 = v7;
    if (v7)
    {
      v12[2] = v23;
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v19 = v22;
  }
  v8 = v52;
  v16 = v19;
  v9 = type metadata accessor for GKCrypto_GroupHandle();
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v8, (char *)v46 + *(int *)(v9 + 28), v49);
  v10 = v16;
  UnknownStorage.traverse<A>(visitor:)();
  v17 = v10;
  v18 = v10;
  if (v10)
    v12[1] = v18;
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v52, v49);
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance [A]);
    return v1;
  }
  return v3;
}

BOOL static GKCrypto_GroupHandle.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;

  v21 = a1;
  v29 = a2;
  v36 = 0;
  v35 = 0;
  v22 = type metadata accessor for UnknownStorage();
  v23 = *(_QWORD **)(v22 - 8);
  v25 = v23[8];
  v24 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v6 - v24;
  v27 = v24;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v24);
  v28 = (char *)&v6 - v27;
  v36 = v2;
  v35 = v3;
  v32 = *v2;
  v33 = v2[1];
  outlined copy of Data._Representation(v32, v33);
  outlined copy of Data._Representation(v32, v33);
  v30 = *v29;
  v31 = v29[1];
  outlined copy of Data._Representation(v30, v31);
  outlined copy of Data._Representation(v30, v31);
  v34 = MEMORY[0x242633488](v32, v33, v30, v31);
  outlined consume of Data._Representation(v30, v31);
  outlined consume of Data._Representation(v32, v33);
  outlined consume of Data._Representation(v30, v31);
  outlined consume of Data._Representation(v32, v33);
  if ((v34 & 1) != 0)
  {
    v17 = v21[2];
    v18 = v21[3];
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v15 = v29[2];
    v16 = v29[3];
    outlined copy of Data._Representation(v15, v16);
    outlined copy of Data._Representation(v15, v16);
    v19 = MEMORY[0x242633488](v17, v18, v15, v16);
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v17, v18);
    if ((v19 & 1) != 0)
    {
      v13 = v21[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = v29[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
      lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
      v14 = static Array<A>.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        v7 = type metadata accessor for GKCrypto_GroupHandle();
        v4 = (char *)v21 + *(int *)(v7 + 28);
        v8 = (void (*)(char *, char *, uint64_t))v23[2];
        v8(v28, v4, v22);
        v8(v26, (char *)v29 + *(int *)(v7 + 28), v22);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v10 = dispatch thunk of static Equatable.== infix(_:_:)();
        v9 = (void (*)(char *, uint64_t))v23[1];
        v9(v26, v22);
        v9(v28, v22);
        return (v10 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupHandle.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupHandle();
  lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupHandle@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupHandle.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupHandle()
{
  return static GKCrypto_GroupHandle.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupHandle()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupHandle@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupHandle.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupHandle(uint64_t a1)
{
  return GKCrypto_GroupHandle.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupHandle.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupHandle()
{
  return GKCrypto_GroupHandle.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupHandle.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupHandle()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupHandle()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupHandle()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupHandle@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupHandle._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupHandle()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupHandle()
{
  return GKCrypto_GroupHandle.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupHandle()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupHandle(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupHandle(_QWORD *a1, uint64_t *a2)
{
  return static GKCrypto_GroupHandle.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName;
}

uint64_t static GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v60 = a1;
  v56 = a2;
  v57 = a3;
  v75 = 0;
  v74 = 0;
  v76 = a2;
  v61 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v64 = (char *)v13 - v63;
  v75 = v4;
  v74 = v3;
  v68 = *v3;
  v67 = v3[1];
  outlined copy of Data._Representation(v68, v67);
  outlined copy of Data._Representation(v68, v67);
  v66 = v73;
  v73[0] = v68;
  v73[1] = v67;
  v65 = lazy protocol witness table accessor for type Data and conformance Data();
  v69 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v66);
  outlined consume of Data._Representation(v68, v67);
  if ((v69 & 1) != 0)
  {
    v51 = v59;
  }
  else
  {
    v52 = *v58;
    v53 = v58[1];
    outlined copy of Data._Representation(v52, v53);
    v5 = v59;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v54 = v5;
    v55 = v5;
    if (v5)
    {
      v16 = v55;
      result = outlined consume of Data._Representation(v52, v53);
      v17 = v16;
      return result;
    }
    outlined consume of Data._Representation(v52, v53);
    v51 = v54;
  }
  v46 = v51;
  v49 = v58[2];
  v48 = v58[3];
  outlined copy of Data._Representation(v49, v48);
  outlined copy of Data._Representation(v49, v48);
  v47 = v72;
  v72[0] = v49;
  v72[1] = v48;
  v50 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v47);
  outlined consume of Data._Representation(v49, v48);
  if ((v50 & 1) != 0)
  {
    v41 = v46;
  }
  else
  {
    v42 = v58[2];
    v43 = v58[3];
    outlined copy of Data._Representation(v42, v43);
    v6 = v46;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v44 = v6;
    v45 = v6;
    if (v6)
    {
      v15 = v45;
      result = outlined consume of Data._Representation(v42, v43);
      v17 = v15;
      return result;
    }
    outlined consume of Data._Representation(v42, v43);
    v41 = v44;
  }
  v36 = v41;
  v39 = v58[4];
  v38 = v58[5];
  outlined copy of Data._Representation(v39, v38);
  outlined copy of Data._Representation(v39, v38);
  v37 = v71;
  v71[0] = v39;
  v71[1] = v38;
  v40 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v37);
  outlined consume of Data._Representation(v39, v38);
  if ((v40 & 1) != 0)
  {
    v31 = v36;
  }
  else
  {
    v32 = v58[4];
    v33 = v58[5];
    outlined copy of Data._Representation(v32, v33);
    v7 = v36;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v34 = v7;
    v35 = v7;
    if (v7)
    {
      v14 = v35;
      result = outlined consume of Data._Representation(v32, v33);
      v17 = v14;
      return result;
    }
    outlined consume of Data._Representation(v32, v33);
    v31 = v34;
  }
  v26 = v31;
  v29 = v58[6];
  v28 = v58[7];
  outlined copy of Data._Representation(v29, v28);
  outlined copy of Data._Representation(v29, v28);
  v27 = v70;
  v70[0] = v29;
  v70[1] = v28;
  v30 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v27);
  outlined consume of Data._Representation(v29, v28);
  if ((v30 & 1) != 0)
  {
    v21 = v26;
  }
  else
  {
    v22 = v58[6];
    v23 = v58[7];
    outlined copy of Data._Representation(v22, v23);
    v8 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v24 = v8;
    v25 = v8;
    if (v8)
    {
      v13[2] = v25;
      return outlined consume of Data._Representation(v22, v23);
    }
    outlined consume of Data._Representation(v22, v23);
    v21 = v24;
  }
  v9 = v64;
  v18 = v21;
  v10 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v9, (char *)v58 + *(int *)(v10 + 32), v61);
  v11 = v18;
  UnknownStorage.traverse<A>(visitor:)();
  v19 = v11;
  v20 = v11;
  if (v11)
    v13[1] = v20;
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v64, v61);
}

BOOL static GKCrypto_GroupHandle.CiphertextAndTag.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;

  v27 = a1;
  v35 = a2;
  v42 = 0;
  v41 = 0;
  v28 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD **)(v28 - 8);
  v31 = v29[8];
  v30 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v6 - v30;
  v33 = v30;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v30);
  v34 = (char *)&v6 - v33;
  v42 = v2;
  v41 = v3;
  v38 = *v2;
  v39 = v2[1];
  outlined copy of Data._Representation(v38, v39);
  outlined copy of Data._Representation(v38, v39);
  v36 = *v35;
  v37 = v35[1];
  outlined copy of Data._Representation(v36, v37);
  outlined copy of Data._Representation(v36, v37);
  v40 = MEMORY[0x242633488](v38, v39, v36, v37);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  if ((v40 & 1) != 0)
  {
    v23 = v27[2];
    v24 = v27[3];
    outlined copy of Data._Representation(v23, v24);
    outlined copy of Data._Representation(v23, v24);
    v21 = v35[2];
    v22 = v35[3];
    outlined copy of Data._Representation(v21, v22);
    outlined copy of Data._Representation(v21, v22);
    v25 = MEMORY[0x242633488](v23, v24, v21, v22);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    if ((v25 & 1) != 0)
    {
      v18 = v27[4];
      v19 = v27[5];
      outlined copy of Data._Representation(v18, v19);
      outlined copy of Data._Representation(v18, v19);
      v16 = v35[4];
      v17 = v35[5];
      outlined copy of Data._Representation(v16, v17);
      outlined copy of Data._Representation(v16, v17);
      v20 = MEMORY[0x242633488](v18, v19, v16, v17);
      outlined consume of Data._Representation(v16, v17);
      outlined consume of Data._Representation(v18, v19);
      outlined consume of Data._Representation(v16, v17);
      outlined consume of Data._Representation(v18, v19);
      if ((v20 & 1) != 0)
      {
        v13 = v27[6];
        v14 = v27[7];
        outlined copy of Data._Representation(v13, v14);
        outlined copy of Data._Representation(v13, v14);
        v11 = v35[6];
        v12 = v35[7];
        outlined copy of Data._Representation(v11, v12);
        outlined copy of Data._Representation(v11, v12);
        v15 = MEMORY[0x242633488](v13, v14, v11, v12);
        outlined consume of Data._Representation(v11, v12);
        outlined consume of Data._Representation(v13, v14);
        outlined consume of Data._Representation(v11, v12);
        outlined consume of Data._Representation(v13, v14);
        if ((v15 & 1) != 0)
        {
          v7 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
          v4 = (char *)v27 + *(int *)(v7 + 32);
          v8 = (void (*)(char *, char *, uint64_t))v29[2];
          v8(v34, v4, v28);
          v8(v32, (char *)v35 + *(int *)(v7 + 32), v28);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
          v10 = dispatch thunk of static Equatable.== infix(_:_:)();
          v9 = (void (*)(char *, uint64_t))v29[1];
          v9(v32, v28);
          v9(v34, v28);
          return (v10 & 1) != 0;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupHandle.CiphertextAndTag@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return static GKCrypto_GroupHandle.CiphertextAndTag.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle.CiphertextAndTag(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupHandle.CiphertextAndTag.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle.CiphertextAndTag;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupHandle.CiphertextAndTag(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupHandle.CiphertextAndTag._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupHandle.CiphertextAndTag(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupHandle.CiphertextAndTag(_QWORD *a1, uint64_t *a2)
{
  return static GKCrypto_GroupHandle.CiphertextAndTag.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupBlob.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupBlob.protoMessageName;
}

uint64_t static GKCrypto_GroupBlob.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupBlob.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupBlob._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupBlob._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupBlob._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupBlob._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupBlob();
  type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupBlob();
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in GKCrypto_GroupBlob.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupBlob();
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t GKCrypto_GroupBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD v57[2];
  _QWORD v58[2];
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;

  v52 = a1;
  v48 = a2;
  v49 = a3;
  v60 = 0;
  v59 = 0;
  v61 = a2;
  v53 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)v13 - v55;
  v60 = v4;
  v59 = v3;
  if (*v3)
  {
    v5 = v51;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v46 = v5;
    v47 = v5;
    if (v5)
    {
      v15 = v47;
      return result;
    }
    v45 = 0;
  }
  else
  {
    v45 = v51;
  }
  v39 = v45;
  v43 = v50[1];
  v42 = v50[2];
  outlined copy of Data._Representation(v43, v42);
  outlined copy of Data._Representation(v43, v42);
  v41 = v58;
  v58[0] = v43;
  v58[1] = v42;
  v40 = lazy protocol witness table accessor for type Data and conformance Data();
  v44 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v41);
  outlined consume of Data._Representation(v43, v42);
  if ((v44 & 1) != 0)
  {
    v34 = v39;
  }
  else
  {
    v35 = v50[1];
    v36 = v50[2];
    outlined copy of Data._Representation(v35, v36);
    v7 = v39;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v37 = v7;
    v38 = v7;
    if (v7)
    {
      v14 = v38;
      result = outlined consume of Data._Representation(v35, v36);
      v15 = v14;
      return result;
    }
    outlined consume of Data._Representation(v35, v36);
    v34 = v37;
  }
  v29 = v34;
  v32 = v50[3];
  v31 = v50[4];
  outlined copy of Data._Representation(v32, v31);
  outlined copy of Data._Representation(v32, v31);
  v30 = v57;
  v57[0] = v32;
  v57[1] = v31;
  v33 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v30);
  outlined consume of Data._Representation(v32, v31);
  if ((v33 & 1) != 0)
  {
    v24 = v29;
  }
  else
  {
    v25 = v50[3];
    v26 = v50[4];
    outlined copy of Data._Representation(v25, v26);
    v8 = v29;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v27 = v8;
    v28 = v8;
    if (v8)
    {
      v13[2] = v28;
      return outlined consume of Data._Representation(v25, v26);
    }
    outlined consume of Data._Representation(v25, v26);
    v24 = v27;
  }
  v9 = v24;
  result = closure #1 in GKCrypto_GroupBlob.traverse<A>(visitor:)((uint64_t)v50, v52, v48, v49);
  v22 = v9;
  v23 = v9;
  if (!v9)
  {
    closure #2 in GKCrypto_GroupBlob.traverse<A>(visitor:)((uint64_t)v50, v52, v48, v49);
    v20 = 0;
    v21 = 0;
    closure #3 in GKCrypto_GroupBlob.traverse<A>(visitor:)((uint64_t)v50, v52, v48, v49);
    v18 = 0;
    v19 = 0;
    v10 = v56;
    v11 = type metadata accessor for GKCrypto_GroupBlob();
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v10, (uint64_t)v50 + *(int *)(v11 + 28), v53);
    v12 = v18;
    UnknownStorage.traverse<A>(visitor:)();
    v16 = v12;
    v17 = v12;
    if (v12)
      v13[1] = v17;
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v53);
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t *)(v22 + *(int *)(v7 + 32)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

uint64_t closure #2 in GKCrypto_GroupBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t *)(v22 + *(int *)(v7 + 36)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

uint64_t closure #3 in GKCrypto_GroupBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t *)(v22 + *(int *)(v7 + 40)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_GroupBlob.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  char *v20;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  int v31;
  _BOOL4 v32;
  int v33;
  char *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  int v36;
  _BOOL4 v37;
  int v38;
  int *v39;
  char *v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  char *v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  _DWORD *v101;
  _DWORD *v102;

  v94 = a1;
  v93 = a2;
  v102 = 0;
  v101 = 0;
  v79 = 0;
  v53 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD **)(v53 - 8);
  v55 = (v54[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v56 = (char *)&v22 - v55;
  v57 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v22 - v57;
  v59 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v62 = (char *)&v22 - v61;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.GroupBlobSignatures?, GKCrypto_GroupBlob.GroupBlobSignatures?));
  v64 = (*(_QWORD *)(*(_QWORD *)(v63 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v65 = (uint64_t *)((char *)&v22 - v64);
  v66 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v67 = (uint64_t *)((char *)&v22 - v66);
  v68 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v69 = (uint64_t *)((char *)&v22 - v68);
  v70 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v71 = (uint64_t *)((char *)&v22 - v70);
  v72 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = (*(_QWORD *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v72);
  v75 = (char *)&v22 - v74;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.GroupBlobPublicKeys?, GKCrypto_GroupBlob.GroupBlobPublicKeys?));
  v77 = (*(_QWORD *)(*(_QWORD *)(v76 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v76);
  v78 = (uint64_t *)((char *)&v22 - v77);
  v80 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v81 = (uint64_t *)((char *)&v22 - v80);
  v82 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v83 = (uint64_t *)((char *)&v22 - v82);
  v84 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v85 = (uint64_t *)((char *)&v22 - v84);
  v86 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = (*(_QWORD *)(v87 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v86);
  v89 = (char *)&v22 - v88;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.RandomizedVerificationKeys?, GKCrypto_GroupBlob.RandomizedVerificationKeys?));
  v91 = (*(_QWORD *)(*(_QWORD *)(v90 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v90);
  v92 = (uint64_t *)((char *)&v22 - v91);
  v95 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v94);
  v96 = (uint64_t *)((char *)&v22 - v95);
  v97 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v98 = (uint64_t *)((char *)&v22 - v97);
  v99 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v100 = (uint64_t *)((char *)&v22 - v99);
  v102 = v16;
  v101 = v17;
  if (*v16 != *v17)
    return 0;
  v49 = v94[1];
  v50 = v94[2];
  outlined copy of Data._Representation(v49, v50);
  outlined copy of Data._Representation(v49, v50);
  v47 = *((_QWORD *)v93 + 1);
  v48 = *((_QWORD *)v93 + 2);
  outlined copy of Data._Representation(v47, v48);
  outlined copy of Data._Representation(v47, v48);
  v51 = MEMORY[0x242633488](v49, v50, v47, v48);
  outlined consume of Data._Representation(v47, v48);
  outlined consume of Data._Representation(v49, v50);
  outlined consume of Data._Representation(v47, v48);
  outlined consume of Data._Representation(v49, v50);
  if ((v51 & 1) == 0)
    return 0;
  v44 = v94[3];
  v45 = v94[4];
  outlined copy of Data._Representation(v44, v45);
  outlined copy of Data._Representation(v44, v45);
  v42 = *((_QWORD *)v93 + 3);
  v43 = *((_QWORD *)v93 + 4);
  outlined copy of Data._Representation(v42, v43);
  outlined copy of Data._Representation(v42, v43);
  v46 = MEMORY[0x242633488](v44, v45, v42, v43);
  outlined consume of Data._Representation(v42, v43);
  outlined consume of Data._Representation(v44, v45);
  outlined consume of Data._Representation(v42, v43);
  outlined consume of Data._Representation(v44, v45);
  if ((v46 & 1) == 0)
    return 0;
  v39 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((_QWORD *)((char *)v94 + v39[8]), v100);
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t *)&v93[v39[8]], v98);
  v40 = (char *)v92 + *(int *)(v90 + 48);
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?(v100, v92);
  outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?(v98, v40);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48);
  if (v41((char *)v92, 1, v86) == 1)
  {
    if (v41(v40, 1, v86) == 1)
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v92);
      v38 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys?(v92, v96);
    if (v41(v40, 1, v86) != 1)
    {
      outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v40, v89);
      v37 = static GKCrypto_GroupBlob.RandomizedVerificationKeys.== infix(_:_:)((uint64_t)v96, (uint64_t *)v89);
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v89);
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v96);
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v92);
      v38 = v37;
      goto LABEL_13;
    }
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v96);
  }
  outlined destroy of (GKCrypto_GroupBlob.RandomizedVerificationKeys?, GKCrypto_GroupBlob.RandomizedVerificationKeys?)((uint64_t)v92);
  v38 = 0;
LABEL_13:
  v36 = v38;
  outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v98);
  outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys?((uint64_t)v100);
  if ((v36 & 1) == 0)
    return 0;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((_QWORD *)((char *)v94 + v39[9]), v85);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t *)&v93[v39[9]], v83);
  v34 = (char *)v78 + *(int *)(v76 + 48);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?(v85, v78);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?(v83, v34);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
  if (v35((char *)v78, 1, v72) == 1)
  {
    if (v35(v34, 1, v72) == 1)
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v78);
      v33 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys?(v78, v81);
    if (v35(v34, 1, v72) != 1)
    {
      outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v34, v75);
      v32 = static GKCrypto_GroupBlob.GroupBlobPublicKeys.== infix(_:_:)(v81, (uint64_t *)v75);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v75);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v81);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v78);
      v33 = v32;
      goto LABEL_24;
    }
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v81);
  }
  outlined destroy of (GKCrypto_GroupBlob.GroupBlobPublicKeys?, GKCrypto_GroupBlob.GroupBlobPublicKeys?)((uint64_t)v78);
  v33 = 0;
LABEL_24:
  v31 = v33;
  outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v83);
  outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys?((uint64_t)v85);
  if ((v31 & 1) == 0)
    return 0;
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?((_QWORD *)((char *)v94 + v39[10]), v71);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t *)&v93[v39[10]], v69);
  v29 = (char *)v65 + *(int *)(v63 + 48);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?(v71, v65);
  outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?(v69, v29);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  if (v30((char *)v65, 1, v59) == 1)
  {
    if (v30(v29, 1, v59) == 1)
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v65);
      v28 = 1;
      goto LABEL_35;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_GroupBlob.GroupBlobSignatures?(v65, v67);
    if (v30(v29, 1, v59) != 1)
    {
      outlined init with take of GKCrypto_GroupBlob.GroupBlobSignatures(v29, v62);
      v27 = static GKCrypto_GroupBlob.GroupBlobSignatures.== infix(_:_:)(v67, (uint64_t *)v62);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v62);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v67);
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v65);
      v28 = v27;
      goto LABEL_35;
    }
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v67);
  }
  outlined destroy of (GKCrypto_GroupBlob.GroupBlobSignatures?, GKCrypto_GroupBlob.GroupBlobSignatures?)((uint64_t)v65);
  v28 = 0;
LABEL_35:
  v26 = v28;
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v69);
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures?((uint64_t)v71);
  if ((v26 & 1) != 0)
  {
    v20 = (char *)v94 + v39[7];
    v23 = (void (*)(char *, char *, uint64_t))v54[2];
    v23(v58, v20, v53);
    v23(v56, &v93[v39[7]], v53);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = (void (*)(char *, uint64_t))v54[1];
    v24(v56, v53);
    v24(v58, v53);
    return (v25 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupBlob.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupBlob();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupBlob@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlob.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupBlob()
{
  return static GKCrypto_GroupBlob.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupBlob()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupBlob@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlob.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupBlob(uint64_t a1)
{
  return GKCrypto_GroupBlob.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupBlob.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupBlob()
{
  return GKCrypto_GroupBlob.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupBlob.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupBlob()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupBlob()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupBlob@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupBlob._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob()
{
  return GKCrypto_GroupBlob.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob(_QWORD *a1, char *a2)
{
  return static GKCrypto_GroupBlob.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName;
}

uint64_t static GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in GKCrypto_GroupBlob.RandomizedVerificationKeys.decodeMessage<A>(decoder:)();
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlob.RandomizedVerificationKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v22 = a1;
  v18 = a2;
  v19 = a3;
  v33 = 0;
  v32 = 0;
  v34 = a2;
  v23 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)v10 - v25;
  v33 = v4;
  v32 = v3;
  v29 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = &v31;
  v31 = v29;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance [A]();
  v30 = Collection.isEmpty.getter();
  outlined destroy of [Data]();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v14 = v21;
  }
  else
  {
    v5 = v21;
    v15 = *(_QWORD *)v20;
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)();
    v16 = v5;
    v17 = v5;
    if (v5)
    {
      v10[2] = v17;
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v14 = v16;
  }
  v6 = v26;
  v11 = v14;
  v7 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v6, &v20[*(int *)(v7 + 20)], v23);
  v8 = v11;
  UnknownStorage.traverse<A>(visitor:)();
  v12 = v8;
  v13 = v8;
  if (v8)
    v10[1] = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
}

BOOL static GKCrypto_GroupBlob.RandomizedVerificationKeys.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  void (*v11)(char *, uint64_t);
  int v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;

  v14 = a1;
  v21 = a2;
  v26 = 0;
  v25 = 0;
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(_QWORD **)(v15 - 8);
  v17 = (v16[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v8 - v17;
  v19 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v8 - v19;
  v26 = v4;
  v25 = v5;
  v23 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type Data and conformance Data();
  v24 = static Array<A>.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
    v9 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v6 = v14 + *(int *)(v9 + 20);
    v10 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v10(v20, v6, v15);
    v10(v18, (uint64_t)v21 + *(int *)(v9 + 20), v15);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v11 = (void (*)(char *, uint64_t))v16[1];
    v11(v18, v15);
    v11(v20, v15);
    return (v12 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return static GKCrypto_GroupBlob.RandomizedVerificationKeys.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupBlob.RandomizedVerificationKeys.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupBlob.RandomizedVerificationKeys._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_GroupBlob.RandomizedVerificationKeys.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName;
}

uint64_t static GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;

  v60 = a1;
  v56 = a2;
  v57 = a3;
  v75 = 0;
  v74 = 0;
  v76 = a2;
  v61 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v64 = (char *)v13 - v63;
  v75 = v4;
  v74 = v3;
  v68 = *v3;
  v67 = v3[1];
  outlined copy of Data._Representation(v68, v67);
  outlined copy of Data._Representation(v68, v67);
  v66 = v73;
  v73[0] = v68;
  v73[1] = v67;
  v65 = lazy protocol witness table accessor for type Data and conformance Data();
  v69 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v66);
  outlined consume of Data._Representation(v68, v67);
  if ((v69 & 1) != 0)
  {
    v51 = v59;
  }
  else
  {
    v52 = *v58;
    v53 = v58[1];
    outlined copy of Data._Representation(v52, v53);
    v5 = v59;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v54 = v5;
    v55 = v5;
    if (v5)
    {
      v16 = v55;
      result = outlined consume of Data._Representation(v52, v53);
      v17 = v16;
      return result;
    }
    outlined consume of Data._Representation(v52, v53);
    v51 = v54;
  }
  v46 = v51;
  v49 = v58[2];
  v48 = v58[3];
  outlined copy of Data._Representation(v49, v48);
  outlined copy of Data._Representation(v49, v48);
  v47 = v72;
  v72[0] = v49;
  v72[1] = v48;
  v50 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v47);
  outlined consume of Data._Representation(v49, v48);
  if ((v50 & 1) != 0)
  {
    v41 = v46;
  }
  else
  {
    v42 = v58[2];
    v43 = v58[3];
    outlined copy of Data._Representation(v42, v43);
    v6 = v46;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v44 = v6;
    v45 = v6;
    if (v6)
    {
      v15 = v45;
      result = outlined consume of Data._Representation(v42, v43);
      v17 = v15;
      return result;
    }
    outlined consume of Data._Representation(v42, v43);
    v41 = v44;
  }
  v36 = v41;
  v39 = v58[4];
  v38 = v58[5];
  outlined copy of Data._Representation(v39, v38);
  outlined copy of Data._Representation(v39, v38);
  v37 = v71;
  v71[0] = v39;
  v71[1] = v38;
  v40 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v37);
  outlined consume of Data._Representation(v39, v38);
  if ((v40 & 1) != 0)
  {
    v31 = v36;
  }
  else
  {
    v32 = v58[4];
    v33 = v58[5];
    outlined copy of Data._Representation(v32, v33);
    v7 = v36;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v34 = v7;
    v35 = v7;
    if (v7)
    {
      v14 = v35;
      result = outlined consume of Data._Representation(v32, v33);
      v17 = v14;
      return result;
    }
    outlined consume of Data._Representation(v32, v33);
    v31 = v34;
  }
  v26 = v31;
  v29 = v58[6];
  v28 = v58[7];
  outlined copy of Data._Representation(v29, v28);
  outlined copy of Data._Representation(v29, v28);
  v27 = v70;
  v70[0] = v29;
  v70[1] = v28;
  v30 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v27);
  outlined consume of Data._Representation(v29, v28);
  if ((v30 & 1) != 0)
  {
    v21 = v26;
  }
  else
  {
    v22 = v58[6];
    v23 = v58[7];
    outlined copy of Data._Representation(v22, v23);
    v8 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v24 = v8;
    v25 = v8;
    if (v8)
    {
      v13[2] = v25;
      return outlined consume of Data._Representation(v22, v23);
    }
    outlined consume of Data._Representation(v22, v23);
    v21 = v24;
  }
  v9 = v64;
  v18 = v21;
  v10 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v9, (char *)v58 + *(int *)(v10 + 32), v61);
  v11 = v18;
  UnknownStorage.traverse<A>(visitor:)();
  v19 = v11;
  v20 = v11;
  if (v11)
    v13[1] = v20;
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v64, v61);
}

BOOL static GKCrypto_GroupBlob.GroupBlobPublicKeys.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;

  v27 = a1;
  v35 = a2;
  v42 = 0;
  v41 = 0;
  v28 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD **)(v28 - 8);
  v31 = v29[8];
  v30 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v6 - v30;
  v33 = v30;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v30);
  v34 = (char *)&v6 - v33;
  v42 = v2;
  v41 = v3;
  v38 = *v2;
  v39 = v2[1];
  outlined copy of Data._Representation(v38, v39);
  outlined copy of Data._Representation(v38, v39);
  v36 = *v35;
  v37 = v35[1];
  outlined copy of Data._Representation(v36, v37);
  outlined copy of Data._Representation(v36, v37);
  v40 = MEMORY[0x242633488](v38, v39, v36, v37);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  if ((v40 & 1) != 0)
  {
    v23 = v27[2];
    v24 = v27[3];
    outlined copy of Data._Representation(v23, v24);
    outlined copy of Data._Representation(v23, v24);
    v21 = v35[2];
    v22 = v35[3];
    outlined copy of Data._Representation(v21, v22);
    outlined copy of Data._Representation(v21, v22);
    v25 = MEMORY[0x242633488](v23, v24, v21, v22);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    if ((v25 & 1) != 0)
    {
      v18 = v27[4];
      v19 = v27[5];
      outlined copy of Data._Representation(v18, v19);
      outlined copy of Data._Representation(v18, v19);
      v16 = v35[4];
      v17 = v35[5];
      outlined copy of Data._Representation(v16, v17);
      outlined copy of Data._Representation(v16, v17);
      v20 = MEMORY[0x242633488](v18, v19, v16, v17);
      outlined consume of Data._Representation(v16, v17);
      outlined consume of Data._Representation(v18, v19);
      outlined consume of Data._Representation(v16, v17);
      outlined consume of Data._Representation(v18, v19);
      if ((v20 & 1) != 0)
      {
        v13 = v27[6];
        v14 = v27[7];
        outlined copy of Data._Representation(v13, v14);
        outlined copy of Data._Representation(v13, v14);
        v11 = v35[6];
        v12 = v35[7];
        outlined copy of Data._Representation(v11, v12);
        outlined copy of Data._Representation(v11, v12);
        v15 = MEMORY[0x242633488](v13, v14, v11, v12);
        outlined consume of Data._Representation(v11, v12);
        outlined consume of Data._Representation(v13, v14);
        outlined consume of Data._Representation(v11, v12);
        outlined consume of Data._Representation(v13, v14);
        if ((v15 & 1) != 0)
        {
          v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
          v4 = (char *)v27 + *(int *)(v7 + 32);
          v8 = (void (*)(char *, char *, uint64_t))v29[2];
          v8(v34, v4, v28);
          v8(v32, (char *)v35 + *(int *)(v7 + 32), v28);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
          v10 = dispatch thunk of static Equatable.== infix(_:_:)();
          v9 = (void (*)(char *, uint64_t))v29[1];
          v9(v32, v28);
          v9(v34, v28);
          return (v10 & 1) != 0;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return static GKCrypto_GroupBlob.GroupBlobPublicKeys.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupBlob.GroupBlobPublicKeys.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupBlob.GroupBlobPublicKeys._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys(_QWORD *a1, uint64_t *a2)
{
  return static GKCrypto_GroupBlob.GroupBlobPublicKeys.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName;
}

uint64_t static GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v48 = a1;
  v44 = a2;
  v45 = a3;
  v62 = 0;
  v61 = 0;
  v63 = a2;
  v49 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)v12 - v51;
  v62 = v4;
  v61 = v3;
  v56 = *v3;
  v55 = v3[1];
  outlined copy of Data._Representation(v56, v55);
  outlined copy of Data._Representation(v56, v55);
  v54 = v60;
  v60[0] = v56;
  v60[1] = v55;
  v53 = lazy protocol witness table accessor for type Data and conformance Data();
  v57 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v54);
  outlined consume of Data._Representation(v56, v55);
  if ((v57 & 1) != 0)
  {
    v39 = v47;
  }
  else
  {
    v40 = *v46;
    v41 = v46[1];
    outlined copy of Data._Representation(v40, v41);
    v5 = v47;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v42 = v5;
    v43 = v5;
    if (v5)
    {
      v14 = v43;
      result = outlined consume of Data._Representation(v40, v41);
      v15 = v14;
      return result;
    }
    outlined consume of Data._Representation(v40, v41);
    v39 = v42;
  }
  v34 = v39;
  v37 = v46[2];
  v36 = v46[3];
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v59;
  v59[0] = v37;
  v59[1] = v36;
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v29 = v34;
  }
  else
  {
    v30 = v46[2];
    v31 = v46[3];
    outlined copy of Data._Representation(v30, v31);
    v6 = v34;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v32 = v6;
    v33 = v6;
    if (v6)
    {
      v13 = v33;
      result = outlined consume of Data._Representation(v30, v31);
      v15 = v13;
      return result;
    }
    outlined consume of Data._Representation(v30, v31);
    v29 = v32;
  }
  v24 = v29;
  v27 = v46[4];
  v26 = v46[5];
  outlined copy of Data._Representation(v27, v26);
  outlined copy of Data._Representation(v27, v26);
  v25 = v58;
  v58[0] = v27;
  v58[1] = v26;
  v28 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v25);
  outlined consume of Data._Representation(v27, v26);
  if ((v28 & 1) != 0)
  {
    v19 = v24;
  }
  else
  {
    v20 = v46[4];
    v21 = v46[5];
    outlined copy of Data._Representation(v20, v21);
    v7 = v24;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v22 = v7;
    v23 = v7;
    if (v7)
    {
      v12[1] = v23;
      return outlined consume of Data._Representation(v20, v21);
    }
    outlined consume of Data._Representation(v20, v21);
    v19 = v22;
  }
  v8 = v52;
  v16 = v19;
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v8, (char *)v46 + *(int *)(v9 + 28), v49);
  v10 = v16;
  UnknownStorage.traverse<A>(visitor:)();
  v17 = v10;
  v18 = v10;
  if (v10)
    v12[0] = v18;
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v52, v49);
}

BOOL static GKCrypto_GroupBlob.GroupBlobSignatures.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  void (*v8)(char *, uint64_t);
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;

  v21 = a1;
  v29 = a2;
  v36 = 0;
  v35 = 0;
  v22 = type metadata accessor for UnknownStorage();
  v23 = *(_QWORD **)(v22 - 8);
  v25 = v23[8];
  v24 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v6 - v24;
  v27 = v24;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v24);
  v28 = (char *)&v6 - v27;
  v36 = v2;
  v35 = v3;
  v32 = *v2;
  v33 = v2[1];
  outlined copy of Data._Representation(v32, v33);
  outlined copy of Data._Representation(v32, v33);
  v30 = *v29;
  v31 = v29[1];
  outlined copy of Data._Representation(v30, v31);
  outlined copy of Data._Representation(v30, v31);
  v34 = MEMORY[0x242633488](v32, v33, v30, v31);
  outlined consume of Data._Representation(v30, v31);
  outlined consume of Data._Representation(v32, v33);
  outlined consume of Data._Representation(v30, v31);
  outlined consume of Data._Representation(v32, v33);
  if ((v34 & 1) != 0)
  {
    v17 = v21[2];
    v18 = v21[3];
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v15 = v29[2];
    v16 = v29[3];
    outlined copy of Data._Representation(v15, v16);
    outlined copy of Data._Representation(v15, v16);
    v19 = MEMORY[0x242633488](v17, v18, v15, v16);
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v17, v18);
    if ((v19 & 1) != 0)
    {
      v12 = v21[4];
      v13 = v21[5];
      outlined copy of Data._Representation(v12, v13);
      outlined copy of Data._Representation(v12, v13);
      v10 = v29[4];
      v11 = v29[5];
      outlined copy of Data._Representation(v10, v11);
      outlined copy of Data._Representation(v10, v11);
      v14 = MEMORY[0x242633488](v12, v13, v10, v11);
      outlined consume of Data._Representation(v10, v11);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v10, v11);
      outlined consume of Data._Representation(v12, v13);
      if ((v14 & 1) != 0)
      {
        v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
        v4 = (char *)v21 + *(int *)(v6 + 28);
        v7 = (void (*)(char *, char *, uint64_t))v23[2];
        v7(v28, v4, v22);
        v7(v26, (char *)v29 + *(int *)(v6 + 28), v22);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        v8 = (void (*)(char *, uint64_t))v23[1];
        v8(v26, v22);
        v8(v28, v22);
        return (v9 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupBlob.GroupBlobSignatures.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupBlob.GroupBlobSignatures@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return static GKCrypto_GroupBlob.GroupBlobSignatures.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobSignatures(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupBlob.GroupBlobSignatures.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobSignatures;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlob.GroupBlobSignatures(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupBlob.GroupBlobSignatures._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return GKCrypto_GroupBlob.GroupBlobSignatures.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.GroupBlobSignatures(_QWORD *a1, uint64_t *a2)
{
  return static GKCrypto_GroupBlob.GroupBlobSignatures.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_AdminGroupBlob.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_AdminGroupBlob.protoMessageName;
}

uint64_t static GKCrypto_AdminGroupBlob.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_AdminGroupBlob.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_AdminGroupBlob._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_AdminGroupBlob._protobuf_nameMap);
}

uint64_t static GKCrypto_AdminGroupBlob._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_AdminGroupBlob._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_AdminGroupBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v32 = a2;
  v33 = a3;
  v49 = 0;
  v48 = 0;
  v50 = a2;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v11 - v39;
  v49 = v4;
  v48 = v3;
  v44 = *v3;
  v43 = v3[1];
  outlined copy of Data._Representation(v44, v43);
  outlined copy of Data._Representation(v44, v43);
  v42 = v47;
  v47[0] = v44;
  v47[1] = v43;
  v41 = lazy protocol witness table accessor for type Data and conformance Data();
  v45 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v42);
  outlined consume of Data._Representation(v44, v43);
  if ((v45 & 1) != 0)
  {
    v27 = v35;
  }
  else
  {
    v28 = *v34;
    v29 = v34[1];
    outlined copy of Data._Representation(v28, v29);
    v5 = v35;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v30 = v5;
    v31 = v5;
    if (v5)
    {
      v12 = v31;
      result = outlined consume of Data._Representation(v28, v29);
      v13 = v12;
      return result;
    }
    outlined consume of Data._Representation(v28, v29);
    v27 = v30;
  }
  v22 = v27;
  v25 = v34[2];
  v24 = v34[3];
  outlined copy of Data._Representation(v25, v24);
  outlined copy of Data._Representation(v25, v24);
  v23 = v46;
  v46[0] = v25;
  v46[1] = v24;
  v26 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v23);
  outlined consume of Data._Representation(v25, v24);
  if ((v26 & 1) != 0)
  {
    v17 = v22;
  }
  else
  {
    v18 = v34[2];
    v19 = v34[3];
    outlined copy of Data._Representation(v18, v19);
    v6 = v22;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v6;
    v21 = v6;
    if (v6)
    {
      v11[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v7 = v40;
  v14 = v17;
  v8 = type metadata accessor for GKCrypto_AdminGroupBlob();
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v7, (char *)v34 + *(int *)(v8 + 24), v37);
  v9 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v9;
  v16 = v9;
  if (v9)
    v11[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
}

BOOL static GKCrypto_AdminGroupBlob.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v17 = a1;
  v25 = a2;
  v32 = 0;
  v31 = 0;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD **)(v18 - 8);
  v21 = v19[8];
  v20 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v6 - v20;
  v23 = v20;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v20);
  v24 = (char *)&v6 - v23;
  v32 = v2;
  v31 = v3;
  v28 = *v2;
  v29 = v2[1];
  outlined copy of Data._Representation(v28, v29);
  outlined copy of Data._Representation(v28, v29);
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  outlined copy of Data._Representation(v26, v27);
  v30 = MEMORY[0x242633488](v28, v29, v26, v27);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  if ((v30 & 1) != 0)
  {
    v13 = *(_QWORD *)(v17 + 16);
    v14 = *(_QWORD *)(v17 + 24);
    outlined copy of Data._Representation(v13, v14);
    outlined copy of Data._Representation(v13, v14);
    v11 = v25[2];
    v12 = v25[3];
    outlined copy of Data._Representation(v11, v12);
    outlined copy of Data._Representation(v11, v12);
    v15 = MEMORY[0x242633488](v13, v14, v11, v12);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    if ((v15 & 1) != 0)
    {
      v7 = type metadata accessor for GKCrypto_AdminGroupBlob();
      v4 = v17 + *(int *)(v7 + 24);
      v8 = (void (*)(char *, uint64_t, uint64_t))v19[2];
      v8(v24, v4, v18);
      v8(v22, (uint64_t)v25 + *(int *)(v7 + 24), v18);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v10 = dispatch thunk of static Equatable.== infix(_:_:)();
      v9 = (void (*)(char *, uint64_t))v19[1];
      v9(v22, v18);
      v9(v24, v18);
      return (v10 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_AdminGroupBlob.hashValue.getter()
{
  type metadata accessor for GKCrypto_AdminGroupBlob();
  lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_AdminGroupBlob@<X0>(char *a1@<X8>)
{
  return GKCrypto_AdminGroupBlob.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_AdminGroupBlob()
{
  return static GKCrypto_AdminGroupBlob.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_AdminGroupBlob()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_AdminGroupBlob@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_AdminGroupBlob.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_AdminGroupBlob(uint64_t a1)
{
  return GKCrypto_AdminGroupBlob.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminGroupBlob(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_AdminGroupBlob.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminGroupBlob;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminGroupBlob(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_AdminGroupBlob()
{
  return GKCrypto_AdminGroupBlob.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_AdminGroupBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_AdminGroupBlob.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_AdminGroupBlob()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_AdminGroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_AdminGroupBlob()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_AdminGroupBlob@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_AdminGroupBlob._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_AdminGroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_AdminGroupBlob()
{
  return GKCrypto_AdminGroupBlob.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_AdminGroupBlob()
{
  lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_AdminGroupBlob(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_AdminGroupBlob(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_AdminGroupBlob.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_VersionedSeed.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_VersionedSeed.protoMessageName;
}

uint64_t static GKCrypto_VersionedSeed.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_VersionedSeed.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_VersionedSeed._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_VersionedSeed._protobuf_nameMap);
}

uint64_t static GKCrypto_VersionedSeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_VersionedSeed._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_VersionedSeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD v37[2];
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v32 = a1;
  v28 = a2;
  v29 = a3;
  v39 = 0;
  v38 = 0;
  v40 = a2;
  v33 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v11 - v35;
  v39 = v4;
  v38 = v3;
  if (*v3)
  {
    v5 = v31;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v26 = v5;
    v27 = v5;
    if (v5)
    {
      v11[3] = v27;
      return result;
    }
    v25 = 0;
  }
  else
  {
    v25 = v31;
  }
  v20 = v25;
  v23 = *(_QWORD *)(v30 + 8);
  v22 = *(_QWORD *)(v30 + 16);
  outlined copy of Data._Representation(v23, v22);
  outlined copy of Data._Representation(v23, v22);
  v21 = v37;
  v37[0] = v23;
  v37[1] = v22;
  lazy protocol witness table accessor for type Data and conformance Data();
  v24 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v21);
  outlined consume of Data._Representation(v23, v22);
  if ((v24 & 1) != 0)
  {
    v15 = v20;
  }
  else
  {
    v16 = *(_QWORD *)(v30 + 8);
    v17 = *(_QWORD *)(v30 + 16);
    outlined copy of Data._Representation(v16, v17);
    v7 = v20;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v18 = v7;
    v19 = v7;
    if (v7)
    {
      v11[2] = v19;
      return outlined consume of Data._Representation(v16, v17);
    }
    outlined consume of Data._Representation(v16, v17);
    v15 = v18;
  }
  v8 = v36;
  v12 = v15;
  v9 = type metadata accessor for GKCrypto_VersionedSeed();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v8, v30 + *(int *)(v9 + 24), v33);
  v10 = v12;
  UnknownStorage.traverse<A>(visitor:)();
  v13 = v10;
  v14 = v10;
  if (v10)
    v11[1] = v14;
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v33);
}

BOOL static GKCrypto_VersionedSeed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  void (*v11)(char *, uint64_t);
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  _DWORD *v28;

  v20 = a1;
  v19 = a2;
  v28 = 0;
  v27 = 0;
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(_QWORD **)(v21 - 8);
  v23 = (v22[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v8 - v23;
  v25 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)&v8 - v25;
  v28 = v4;
  v27 = v5;
  if (*v4 == *v5)
  {
    v15 = *(_QWORD *)(v20 + 8);
    v16 = *(_QWORD *)(v20 + 16);
    outlined copy of Data._Representation(v15, v16);
    outlined copy of Data._Representation(v15, v16);
    v13 = *(_QWORD *)(v19 + 8);
    v14 = *(_QWORD *)(v19 + 16);
    outlined copy of Data._Representation(v13, v14);
    outlined copy of Data._Representation(v13, v14);
    v17 = MEMORY[0x242633488](v15, v16, v13, v14);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v15, v16);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v15, v16);
    if ((v17 & 1) != 0)
    {
      v9 = type metadata accessor for GKCrypto_VersionedSeed();
      v6 = v20 + *(int *)(v9 + 24);
      v10 = (void (*)(char *, uint64_t, uint64_t))v22[2];
      v10(v26, v6, v21);
      v10(v24, v19 + *(int *)(v9 + 24), v21);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v11 = (void (*)(char *, uint64_t))v22[1];
      v11(v24, v21);
      v11(v26, v21);
      return (v12 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_VersionedSeed.hashValue.getter()
{
  type metadata accessor for GKCrypto_VersionedSeed();
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_VersionedSeed@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_VersionedSeed.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_VersionedSeed()
{
  return static GKCrypto_VersionedSeed.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_VersionedSeed()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_VersionedSeed@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_VersionedSeed.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_VersionedSeed(uint64_t a1)
{
  return GKCrypto_VersionedSeed.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_VersionedSeed(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_VersionedSeed.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_VersionedSeed;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_VersionedSeed(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_VersionedSeed()
{
  return GKCrypto_VersionedSeed.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_VersionedSeed.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_VersionedSeed()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_VersionedSeed()
{
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_VersionedSeed()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_VersionedSeed@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_VersionedSeed._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_VersionedSeed()
{
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_VersionedSeed()
{
  return GKCrypto_VersionedSeed.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_VersionedSeed()
{
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_VersionedSeed(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_VersionedSeed.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_UserKeys.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_UserKeys.protoMessageName;
}

uint64_t static GKCrypto_UserKeys.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_UserKeys.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_UserKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_UserKeys._protobuf_nameMap);
}

uint64_t static GKCrypto_UserKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_UserKeys._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
      case 7:
        closure #7 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #6 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t closure #7 in GKCrypto_UserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_UserKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  _QWORD v99[2];
  uint64_t v100;
  _QWORD v101[2];
  _QWORD v102[2];
  _QWORD v103[2];
  _QWORD v104[2];
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;

  v94 = a1;
  v90 = a2;
  v91 = a3;
  v106 = 0;
  v105 = 0;
  v107 = a2;
  v95 = type metadata accessor for UnknownStorage();
  v96 = *(_QWORD *)(v95 - 8);
  v97 = (*(_QWORD *)(v96 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v94);
  v98 = (char *)v16 - v97;
  v106 = v4;
  v105 = v3;
  if (*v3)
  {
    v5 = v93;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v88 = v5;
    v89 = v5;
    if (v5)
    {
      v22 = v89;
      return result;
    }
    v87 = 0;
  }
  else
  {
    v87 = v93;
  }
  v81 = v87;
  v85 = *((_QWORD *)v92 + 1);
  v84 = *((_QWORD *)v92 + 2);
  outlined copy of Data._Representation(v85, v84);
  outlined copy of Data._Representation(v85, v84);
  v83 = v104;
  v104[0] = v85;
  v104[1] = v84;
  v82 = lazy protocol witness table accessor for type Data and conformance Data();
  v86 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v83);
  outlined consume of Data._Representation(v85, v84);
  if ((v86 & 1) != 0)
  {
    v76 = v81;
  }
  else
  {
    v77 = *((_QWORD *)v92 + 1);
    v78 = *((_QWORD *)v92 + 2);
    outlined copy of Data._Representation(v77, v78);
    v7 = v81;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v79 = v7;
    v80 = v7;
    if (v7)
    {
      v21 = v80;
      result = outlined consume of Data._Representation(v77, v78);
      v22 = v21;
      return result;
    }
    outlined consume of Data._Representation(v77, v78);
    v76 = v79;
  }
  v71 = v76;
  v74 = *((_QWORD *)v92 + 3);
  v73 = *((_QWORD *)v92 + 4);
  outlined copy of Data._Representation(v74, v73);
  outlined copy of Data._Representation(v74, v73);
  v72 = v103;
  v103[0] = v74;
  v103[1] = v73;
  v75 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v72);
  outlined consume of Data._Representation(v74, v73);
  if ((v75 & 1) != 0)
  {
    v66 = v71;
  }
  else
  {
    v67 = *((_QWORD *)v92 + 3);
    v68 = *((_QWORD *)v92 + 4);
    outlined copy of Data._Representation(v67, v68);
    v8 = v71;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v69 = v8;
    v70 = v8;
    if (v8)
    {
      v20 = v70;
      result = outlined consume of Data._Representation(v67, v68);
      v22 = v20;
      return result;
    }
    outlined consume of Data._Representation(v67, v68);
    v66 = v69;
  }
  v61 = v66;
  v64 = *((_QWORD *)v92 + 5);
  v63 = *((_QWORD *)v92 + 6);
  outlined copy of Data._Representation(v64, v63);
  outlined copy of Data._Representation(v64, v63);
  v62 = v102;
  v102[0] = v64;
  v102[1] = v63;
  v65 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v62);
  outlined consume of Data._Representation(v64, v63);
  if ((v65 & 1) != 0)
  {
    v56 = v61;
  }
  else
  {
    v57 = *((_QWORD *)v92 + 5);
    v58 = *((_QWORD *)v92 + 6);
    outlined copy of Data._Representation(v57, v58);
    v9 = v61;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v59 = v9;
    v60 = v9;
    if (v9)
    {
      v19 = v60;
      result = outlined consume of Data._Representation(v57, v58);
      v22 = v19;
      return result;
    }
    outlined consume of Data._Representation(v57, v58);
    v56 = v59;
  }
  v51 = v56;
  v54 = *((_QWORD *)v92 + 7);
  v53 = *((_QWORD *)v92 + 8);
  outlined copy of Data._Representation(v54, v53);
  outlined copy of Data._Representation(v54, v53);
  v52 = v101;
  v101[0] = v54;
  v101[1] = v53;
  v55 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v52);
  outlined consume of Data._Representation(v54, v53);
  if ((v55 & 1) != 0)
  {
    v46 = v51;
  }
  else
  {
    v47 = *((_QWORD *)v92 + 7);
    v48 = *((_QWORD *)v92 + 8);
    outlined copy of Data._Representation(v47, v48);
    v10 = v51;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v49 = v10;
    v50 = v10;
    if (v10)
    {
      v18 = v50;
      result = outlined consume of Data._Representation(v47, v48);
      v22 = v18;
      return result;
    }
    outlined consume of Data._Representation(v47, v48);
    v46 = v49;
  }
  v41 = v46;
  v44 = *((_QWORD *)v92 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = &v100;
  v100 = v44;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_UserKeys.SignatureVerificationKeyPair]);
  lazy protocol witness table accessor for type [GKCrypto_UserKeys.SignatureVerificationKeyPair] and conformance [A]();
  v45 = Collection.isEmpty.getter();
  outlined destroy of [GKCrypto_UserKeys.SignatureVerificationKeyPair]();
  swift_bridgeObjectRelease();
  if ((v45 & 1) != 0)
  {
    v36 = v41;
  }
  else
  {
    v38 = *((_QWORD *)v92 + 9);
    swift_bridgeObjectRetain();
    v37 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v11 = v41;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v39 = v11;
    v40 = v11;
    if (v11)
    {
      v17 = v40;
      result = swift_bridgeObjectRelease();
      v22 = v17;
      return result;
    }
    swift_bridgeObjectRelease();
    v36 = v39;
  }
  v31 = v36;
  v34 = *((_QWORD *)v92 + 10);
  v33 = *((_QWORD *)v92 + 11);
  outlined copy of Data._Representation(v34, v33);
  outlined copy of Data._Representation(v34, v33);
  v32 = v99;
  v99[0] = v34;
  v99[1] = v33;
  v35 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v32);
  outlined consume of Data._Representation(v34, v33);
  if ((v35 & 1) != 0)
  {
    v26 = v31;
  }
  else
  {
    v27 = *((_QWORD *)v92 + 10);
    v28 = *((_QWORD *)v92 + 11);
    outlined copy of Data._Representation(v27, v28);
    v12 = v31;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v29 = v12;
    v30 = v12;
    if (v12)
    {
      v16[1] = v30;
      return outlined consume of Data._Representation(v27, v28);
    }
    outlined consume of Data._Representation(v27, v28);
    v26 = v29;
  }
  v13 = v98;
  v23 = v26;
  v14 = type metadata accessor for GKCrypto_UserKeys();
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v13, &v92[*(int *)(v14 + 44)], v95);
  v15 = v23;
  UnknownStorage.traverse<A>(visitor:)();
  v24 = v15;
  v25 = v15;
  if (v15)
    v16[0] = v25;
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v98, v95);
}

BOOL static GKCrypto_UserKeys.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  void (*v11)(char *, uint64_t);
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  _DWORD *v52;

  v44 = a1;
  v43 = a2;
  v52 = 0;
  v51 = 0;
  v45 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD **)(v45 - 8);
  v47 = (v46[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v48 = (char *)&v8 - v47;
  v49 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v8 - v49;
  v52 = v4;
  v51 = v5;
  if (*v4 == *v5)
  {
    v39 = v44[1];
    v40 = v44[2];
    outlined copy of Data._Representation(v39, v40);
    outlined copy of Data._Representation(v39, v40);
    v37 = *((_QWORD *)v43 + 1);
    v38 = *((_QWORD *)v43 + 2);
    outlined copy of Data._Representation(v37, v38);
    outlined copy of Data._Representation(v37, v38);
    v41 = MEMORY[0x242633488](v39, v40, v37, v38);
    outlined consume of Data._Representation(v37, v38);
    outlined consume of Data._Representation(v39, v40);
    outlined consume of Data._Representation(v37, v38);
    outlined consume of Data._Representation(v39, v40);
    if ((v41 & 1) != 0)
    {
      v34 = v44[3];
      v35 = v44[4];
      outlined copy of Data._Representation(v34, v35);
      outlined copy of Data._Representation(v34, v35);
      v32 = *((_QWORD *)v43 + 3);
      v33 = *((_QWORD *)v43 + 4);
      outlined copy of Data._Representation(v32, v33);
      outlined copy of Data._Representation(v32, v33);
      v36 = MEMORY[0x242633488](v34, v35, v32, v33);
      outlined consume of Data._Representation(v32, v33);
      outlined consume of Data._Representation(v34, v35);
      outlined consume of Data._Representation(v32, v33);
      outlined consume of Data._Representation(v34, v35);
      if ((v36 & 1) != 0)
      {
        v29 = v44[5];
        v30 = v44[6];
        outlined copy of Data._Representation(v29, v30);
        outlined copy of Data._Representation(v29, v30);
        v27 = *((_QWORD *)v43 + 5);
        v28 = *((_QWORD *)v43 + 6);
        outlined copy of Data._Representation(v27, v28);
        outlined copy of Data._Representation(v27, v28);
        v31 = MEMORY[0x242633488](v29, v30, v27, v28);
        outlined consume of Data._Representation(v27, v28);
        outlined consume of Data._Representation(v29, v30);
        outlined consume of Data._Representation(v27, v28);
        outlined consume of Data._Representation(v29, v30);
        if ((v31 & 1) != 0)
        {
          v24 = v44[7];
          v25 = v44[8];
          outlined copy of Data._Representation(v24, v25);
          outlined copy of Data._Representation(v24, v25);
          v22 = *((_QWORD *)v43 + 7);
          v23 = *((_QWORD *)v43 + 8);
          outlined copy of Data._Representation(v22, v23);
          outlined copy of Data._Representation(v22, v23);
          v26 = MEMORY[0x242633488](v24, v25, v22, v23);
          outlined consume of Data._Representation(v22, v23);
          outlined consume of Data._Representation(v24, v25);
          outlined consume of Data._Representation(v22, v23);
          outlined consume of Data._Representation(v24, v25);
          if ((v26 & 1) != 0)
          {
            v20 = v44[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v19 = *((_QWORD *)v43 + 9);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v18 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
            lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
            v21 = static Array<A>.== infix(_:_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v21 & 1) != 0)
            {
              v15 = v44[10];
              v16 = v44[11];
              outlined copy of Data._Representation(v15, v16);
              outlined copy of Data._Representation(v15, v16);
              v13 = *((_QWORD *)v43 + 10);
              v14 = *((_QWORD *)v43 + 11);
              outlined copy of Data._Representation(v13, v14);
              outlined copy of Data._Representation(v13, v14);
              v17 = MEMORY[0x242633488](v15, v16, v13, v14);
              outlined consume of Data._Representation(v13, v14);
              outlined consume of Data._Representation(v15, v16);
              outlined consume of Data._Representation(v13, v14);
              outlined consume of Data._Representation(v15, v16);
              if ((v17 & 1) != 0)
              {
                v9 = type metadata accessor for GKCrypto_UserKeys();
                v6 = (char *)v44 + *(int *)(v9 + 44);
                v10 = (void (*)(char *, char *, uint64_t))v46[2];
                v10(v50, v6, v45);
                v10(v48, &v43[*(int *)(v9 + 44)], v45);
                lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
                v12 = dispatch thunk of static Equatable.== infix(_:_:)();
                v11 = (void (*)(char *, uint64_t))v46[1];
                v11(v48, v45);
                v11(v50, v45);
                return (v12 & 1) != 0;
              }
              else
              {
                return 0;
              }
            }
            else
            {
              return 0;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_UserKeys.hashValue.getter()
{
  type metadata accessor for GKCrypto_UserKeys();
  lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_UserKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_UserKeys.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_UserKeys()
{
  return static GKCrypto_UserKeys.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_UserKeys()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_UserKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_UserKeys.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_UserKeys(uint64_t a1)
{
  return GKCrypto_UserKeys.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_UserKeys.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_UserKeys()
{
  return GKCrypto_UserKeys.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_UserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_UserKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_UserKeys()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_UserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_UserKeys()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_UserKeys@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_UserKeys._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_UserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_UserKeys()
{
  return GKCrypto_UserKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_UserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_UserKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_UserKeys(_QWORD *a1, char *a2)
{
  return static GKCrypto_UserKeys.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName;
}

uint64_t static GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap);
}

uint64_t static GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v32 = a2;
  v33 = a3;
  v49 = 0;
  v48 = 0;
  v50 = a2;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v11 - v39;
  v49 = v4;
  v48 = v3;
  v44 = *v3;
  v43 = v3[1];
  outlined copy of Data._Representation(v44, v43);
  outlined copy of Data._Representation(v44, v43);
  v42 = v47;
  v47[0] = v44;
  v47[1] = v43;
  v41 = lazy protocol witness table accessor for type Data and conformance Data();
  v45 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v42);
  outlined consume of Data._Representation(v44, v43);
  if ((v45 & 1) != 0)
  {
    v27 = v35;
  }
  else
  {
    v28 = *v34;
    v29 = v34[1];
    outlined copy of Data._Representation(v28, v29);
    v5 = v35;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v30 = v5;
    v31 = v5;
    if (v5)
    {
      v12 = v31;
      result = outlined consume of Data._Representation(v28, v29);
      v13 = v12;
      return result;
    }
    outlined consume of Data._Representation(v28, v29);
    v27 = v30;
  }
  v22 = v27;
  v25 = v34[2];
  v24 = v34[3];
  outlined copy of Data._Representation(v25, v24);
  outlined copy of Data._Representation(v25, v24);
  v23 = v46;
  v46[0] = v25;
  v46[1] = v24;
  v26 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v23);
  outlined consume of Data._Representation(v25, v24);
  if ((v26 & 1) != 0)
  {
    v17 = v22;
  }
  else
  {
    v18 = v34[2];
    v19 = v34[3];
    outlined copy of Data._Representation(v18, v19);
    v6 = v22;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v6;
    v21 = v6;
    if (v6)
    {
      v11[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v7 = v40;
  v14 = v17;
  v8 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v7, (char *)v34 + *(int *)(v8 + 24), v37);
  v9 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v9;
  v16 = v9;
  if (v9)
    v11[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
}

BOOL static GKCrypto_UserKeys.SignatureVerificationKeyPair.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v17 = a1;
  v25 = a2;
  v32 = 0;
  v31 = 0;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD **)(v18 - 8);
  v21 = v19[8];
  v20 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v6 - v20;
  v23 = v20;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v20);
  v24 = (char *)&v6 - v23;
  v32 = v2;
  v31 = v3;
  v28 = *v2;
  v29 = v2[1];
  outlined copy of Data._Representation(v28, v29);
  outlined copy of Data._Representation(v28, v29);
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  outlined copy of Data._Representation(v26, v27);
  v30 = MEMORY[0x242633488](v28, v29, v26, v27);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  if ((v30 & 1) != 0)
  {
    v13 = *(_QWORD *)(v17 + 16);
    v14 = *(_QWORD *)(v17 + 24);
    outlined copy of Data._Representation(v13, v14);
    outlined copy of Data._Representation(v13, v14);
    v11 = v25[2];
    v12 = v25[3];
    outlined copy of Data._Representation(v11, v12);
    outlined copy of Data._Representation(v11, v12);
    v15 = MEMORY[0x242633488](v13, v14, v11, v12);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    if ((v15 & 1) != 0)
    {
      v7 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
      v4 = v17 + *(int *)(v7 + 24);
      v8 = (void (*)(char *, uint64_t, uint64_t))v19[2];
      v8(v24, v4, v18);
      v8(v22, (uint64_t)v25 + *(int *)(v7 + 24), v18);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v10 = dispatch thunk of static Equatable.== infix(_:_:)();
      v9 = (void (*)(char *, uint64_t))v19[1];
      v9(v22, v18);
      v9(v24, v18);
      return (v10 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_UserKeys.SignatureVerificationKeyPair.hashValue.getter()
{
  type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
  lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair@<X0>(char *a1@<X8>)
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return static GKCrypto_UserKeys.SignatureVerificationKeyPair.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1)
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_UserKeys.SignatureVerificationKeyPair.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_UserKeys.SignatureVerificationKeyPair._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return GKCrypto_UserKeys.SignatureVerificationKeyPair.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_UserKeys.SignatureVerificationKeyPair.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAETextToSign.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAETextToSign.protoMessageName;
}

uint64_t static GKCrypto_GroupAETextToSign.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAETextToSign.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAETextToSign._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAETextToSign._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAETextToSign._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAETextToSign._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.User();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupAETextToSign();
  type metadata accessor for GKCrypto_VersionedSeed();
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupAETextToSign();
  type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t GKCrypto_GroupAETextToSign.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v26 = a1;
  v22 = a2;
  v23 = a3;
  v37 = 0;
  v36 = 0;
  v38 = a2;
  v27 = type metadata accessor for UnknownStorage();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)v11 - v29;
  v37 = v4;
  v36 = v3;
  v33 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = &v35;
  v35 = v33;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_GroupAETextToSign.User]);
  lazy protocol witness table accessor for type [GKCrypto_GroupAETextToSign.User] and conformance [A]();
  v34 = Collection.isEmpty.getter();
  outlined destroy of [GKCrypto_GroupAETextToSign.User]();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
  {
    v17 = v25;
  }
  else
  {
    v19 = *v24;
    swift_bridgeObjectRetain();
    v18 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
    v5 = v25;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    v20 = v5;
    v21 = v5;
    if (v5)
    {
      v11[1] = v21;
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v17 = v20;
  }
  v6 = v17;
  result = closure #1 in GKCrypto_GroupAETextToSign.traverse<A>(visitor:)((uint64_t)v24, v26, v22, v23);
  v15 = v6;
  v16 = v6;
  if (!v6)
  {
    closure #2 in GKCrypto_GroupAETextToSign.traverse<A>(visitor:)((uint64_t)v24, v26, v22, v23);
    v13 = 0;
    v14 = 0;
    v8 = v30;
    v9 = type metadata accessor for GKCrypto_GroupAETextToSign();
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v8, (uint64_t)v24 + *(int *)(v9 + 20), v27);
    v10 = v13;
    UnknownStorage.traverse<A>(visitor:)();
    v11[3] = v10;
    v12 = v10;
    if (v10)
      v11[0] = v12;
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAETextToSign.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (uint64_t *)((char *)&v10 - v17);
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_VersionedSeed();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v22 + *(int *)(v7 + 24)), v25);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_VersionedSeed((uint64_t)v25, v21);
    lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_VersionedSeed(v21);
    }
    else
    {
      outlined destroy of GKCrypto_VersionedSeed(v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

uint64_t closure #2 in GKCrypto_GroupAETextToSign.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t *)(v22 + *(int *)(v7 + 28)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_GroupAETextToSign.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  char *v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  int v26;
  _BOOL4 v27;
  int v28;
  int *v29;
  _QWORD *v30;
  unsigned int (*v31)(_QWORD *, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;

  v59 = a1;
  v66 = a2;
  v73 = 0;
  v72 = 0;
  v67 = 0;
  v33 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD **)(v33 - 8);
  v35 = (v34[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v36 = (char *)&v17 - v35;
  v37 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v38 = (char *)&v17 - v37;
  v39 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v17 - v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupAETextToSign.GroupAssociatedData?, GKCrypto_GroupAETextToSign.GroupAssociatedData?));
  v44 = (*(_QWORD *)(*(_QWORD *)(v43 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v45 = (uint64_t *)((char *)&v17 - v44);
  v46 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v67);
  v47 = (uint64_t *)((char *)&v17 - v46);
  v48 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t *)((char *)&v17 - v48);
  v50 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v51 = (uint64_t *)((char *)&v17 - v50);
  v52 = type metadata accessor for GKCrypto_VersionedSeed();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (uint64_t)&v17 - v54;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?));
  v57 = (*(_QWORD *)(*(_QWORD *)(v56 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v58 = (uint64_t *)((char *)&v17 - v57);
  v60 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v61 = (uint64_t *)((char *)&v17 - v60);
  v62 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t *)((char *)&v17 - v62);
  v64 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v65 = (uint64_t *)((char *)&v17 - v64);
  v73 = v12;
  v72 = v13;
  v70 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69 = *v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  v71 = static Array<A>.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0)
    return 0;
  v29 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v59 + v29[6]), v65);
  outlined init with copy of GKCrypto_VersionedSeed?((uint64_t *)((char *)v66 + v29[6]), v63);
  v30 = (_QWORD *)((char *)v58 + *(int *)(v56 + 48));
  outlined init with copy of GKCrypto_VersionedSeed?(v65, v58);
  outlined init with copy of GKCrypto_VersionedSeed?(v63, v30);
  v31 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v53 + 48);
  if (v31(v58, 1, v52) == 1)
  {
    if (v31(v30, 1, v52) == 1)
    {
      outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v58);
      v28 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_VersionedSeed?(v58, v61);
    if (v31(v30, 1, v52) != 1)
    {
      outlined init with take of GKCrypto_VersionedSeed((uint64_t)v30, v55);
      v27 = static GKCrypto_VersionedSeed.== infix(_:_:)((uint64_t)v61, v55);
      outlined destroy of GKCrypto_VersionedSeed(v55);
      outlined destroy of GKCrypto_VersionedSeed((uint64_t)v61);
      outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v58);
      v28 = v27;
      goto LABEL_9;
    }
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)v61);
  }
  outlined destroy of (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?)((uint64_t)v58);
  v28 = 0;
LABEL_9:
  v26 = v28;
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v63);
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v65);
  if ((v26 & 1) == 0)
    return 0;
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t *)(v59 + v29[7]), v51);
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t *)((char *)v66 + v29[7]), v49);
  v24 = (char *)v45 + *(int *)(v43 + 48);
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?(v51, v45);
  outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?(v49, v24);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  if (v25((char *)v45, 1, v39) == 1)
  {
    if (v25(v24, 1, v39) == 1)
    {
      outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v45);
      v23 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_GroupAETextToSign.GroupAssociatedData?(v45, v47);
    if (v25(v24, 1, v39) != 1)
    {
      outlined init with take of GKCrypto_GroupAETextToSign.GroupAssociatedData(v24, v42);
      v22 = static GKCrypto_GroupAETextToSign.GroupAssociatedData.== infix(_:_:)((uint64_t)v47, (uint64_t *)v42);
      outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v42);
      outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v47);
      outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v45);
      v23 = v22;
      goto LABEL_20;
    }
    outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v47);
  }
  outlined destroy of (GKCrypto_GroupAETextToSign.GroupAssociatedData?, GKCrypto_GroupAETextToSign.GroupAssociatedData?)((uint64_t)v45);
  v23 = 0;
LABEL_20:
  v21 = v23;
  outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v49);
  outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData?((uint64_t)v51);
  if ((v21 & 1) != 0)
  {
    v15 = v59 + v29[5];
    v18 = (void (*)(char *, uint64_t, uint64_t))v34[2];
    v18(v38, v15, v33);
    v18(v36, (uint64_t)v66 + v29[5], v33);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = (void (*)(char *, uint64_t))v34[1];
    v19(v36, v33);
    v19(v38, v33);
    return (v20 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAETextToSign.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAETextToSign();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupAETextToSign@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAETextToSign()
{
  return static GKCrypto_GroupAETextToSign.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAETextToSign()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAETextToSign@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAETextToSign(uint64_t a1)
{
  return GKCrypto_GroupAETextToSign.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAETextToSign.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAETextToSign()
{
  return GKCrypto_GroupAETextToSign.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAETextToSign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAETextToSign.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAETextToSign()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAETextToSign()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAETextToSign()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAETextToSign@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAETextToSign._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAETextToSign()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAETextToSign()
{
  return GKCrypto_GroupAETextToSign.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAETextToSign()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAETextToSign(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAETextToSign(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_GroupAETextToSign.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAETextToSign.User.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAETextToSign.User.protoMessageName;
}

uint64_t static GKCrypto_GroupAETextToSign.User.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAETextToSign.User.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAETextToSign.User._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAETextToSign.User._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAETextToSign.User._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAETextToSign.User._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #4 in GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupAETextToSign.User.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char v71;
  _QWORD v72[2];
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;

  v60 = a1;
  v56 = a2;
  v57 = a3;
  v80 = 0;
  v79 = 0;
  v81 = a2;
  v61 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = (*(_QWORD *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v64 = (char *)v17 - v63;
  v80 = v4;
  v79 = v3;
  v68 = *v3;
  v67 = v3[1];
  outlined copy of Data._Representation(v68, v67);
  outlined copy of Data._Representation(v68, v67);
  v66 = v78;
  v78[0] = v68;
  v78[1] = v67;
  v65 = lazy protocol witness table accessor for type Data and conformance Data();
  v69 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v66);
  outlined consume of Data._Representation(v68, v67);
  if ((v69 & 1) != 0)
  {
    v51 = v59;
  }
  else
  {
    v52 = *(_QWORD *)v58;
    v53 = *(_QWORD *)(v58 + 8);
    outlined copy of Data._Representation(v52, v53);
    v5 = v59;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v54 = v5;
    v55 = v5;
    if (v5)
    {
      v19 = v55;
      result = outlined consume of Data._Representation(v52, v53);
      v20 = v19;
      return result;
    }
    outlined consume of Data._Representation(v52, v53);
    v51 = v54;
  }
  v46 = v51;
  v49 = *(_QWORD *)(v58 + 16);
  v48 = *(_QWORD *)(v58 + 24);
  outlined copy of Data._Representation(v49, v48);
  outlined copy of Data._Representation(v49, v48);
  v47 = v77;
  v77[0] = v49;
  v77[1] = v48;
  v50 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v47);
  outlined consume of Data._Representation(v49, v48);
  if ((v50 & 1) != 0)
  {
    v41 = v46;
  }
  else
  {
    v42 = *(_QWORD *)(v58 + 16);
    v43 = *(_QWORD *)(v58 + 24);
    outlined copy of Data._Representation(v42, v43);
    v6 = v46;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v44 = v6;
    v45 = v6;
    if (v6)
    {
      v18 = v45;
      result = outlined consume of Data._Representation(v42, v43);
      v20 = v18;
      return result;
    }
    outlined consume of Data._Representation(v42, v43);
    v41 = v44;
  }
  v38 = v41;
  v7 = *(_QWORD *)(v58 + 32);
  v8 = *(_BYTE *)(v58 + 40);
  v40 = &v75;
  v75 = v7;
  v76 = v8 & 1;
  v39 = &v73;
  v73 = 0;
  v74 = 1;
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v34 = v38;
  }
  else
  {
    v9 = *(_QWORD *)(v58 + 32);
    v10 = *(_BYTE *)(v58 + 40);
    v35 = &v70;
    v70 = v9;
    v71 = v10 & 1;
    lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
    v11 = v38;
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v36 = v11;
    v37 = v11;
    if (v11)
    {
      v20 = v37;
      return result;
    }
    v34 = 0;
  }
  v29 = v34;
  v32 = *(_QWORD *)(v58 + 48);
  v31 = *(_QWORD *)(v58 + 56);
  outlined copy of Data._Representation(v32, v31);
  outlined copy of Data._Representation(v32, v31);
  v30 = v72;
  v72[0] = v32;
  v72[1] = v31;
  v33 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v30);
  outlined consume of Data._Representation(v32, v31);
  if ((v33 & 1) != 0)
  {
    v24 = v29;
  }
  else
  {
    v25 = *(_QWORD *)(v58 + 48);
    v26 = *(_QWORD *)(v58 + 56);
    outlined copy of Data._Representation(v25, v26);
    v13 = v29;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v27 = v13;
    v28 = v13;
    if (v13)
    {
      v17[2] = v28;
      return outlined consume of Data._Representation(v25, v26);
    }
    outlined consume of Data._Representation(v25, v26);
    v24 = v27;
  }
  v14 = v64;
  v21 = v24;
  v15 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, v58 + *(int *)(v15 + 32), v61);
  v16 = v21;
  UnknownStorage.traverse<A>(visitor:)();
  v22 = v16;
  v23 = v16;
  if (v16)
    v17[1] = v23;
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v64, v61);
}

BOOL static GKCrypto_GroupAETextToSign.User.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(char *, uint64_t);
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;

  v27 = a1;
  v35 = a2;
  v46 = 0;
  v45 = 0;
  v28 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD **)(v28 - 8);
  v31 = v29[8];
  v30 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v10 - v30;
  v33 = v30;
  MEMORY[0x24BDAC7A8]((char *)&v10 - v30);
  v34 = (char *)&v10 - v33;
  v46 = v2;
  v45 = v3;
  v38 = *v2;
  v39 = v2[1];
  outlined copy of Data._Representation(v38, v39);
  outlined copy of Data._Representation(v38, v39);
  v36 = *(_QWORD *)v35;
  v37 = *(_QWORD *)(v35 + 8);
  outlined copy of Data._Representation(v36, v37);
  outlined copy of Data._Representation(v36, v37);
  v40 = MEMORY[0x242633488](v38, v39, v36, v37);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  outlined consume of Data._Representation(v36, v37);
  outlined consume of Data._Representation(v38, v39);
  if ((v40 & 1) != 0)
  {
    v23 = *(_QWORD *)(v27 + 16);
    v24 = *(_QWORD *)(v27 + 24);
    outlined copy of Data._Representation(v23, v24);
    outlined copy of Data._Representation(v23, v24);
    v21 = *(_QWORD *)(v35 + 16);
    v22 = *(_QWORD *)(v35 + 24);
    outlined copy of Data._Representation(v21, v22);
    outlined copy of Data._Representation(v21, v22);
    v25 = MEMORY[0x242633488](v23, v24, v21, v22);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v23, v24);
    if ((v25 & 1) != 0)
    {
      v4 = *(_QWORD *)(v27 + 32);
      v5 = *(_BYTE *)(v27 + 40);
      v20 = &v43;
      v43 = v4;
      v44 = v5 & 1;
      v6 = *(_QWORD *)(v35 + 32);
      v7 = *(_BYTE *)(v35 + 40);
      v19 = &v41;
      v41 = v6;
      v42 = v7 & 1;
      lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v16 = *(_QWORD *)(v27 + 48);
        v17 = *(_QWORD *)(v27 + 56);
        outlined copy of Data._Representation(v16, v17);
        outlined copy of Data._Representation(v16, v17);
        v14 = *(_QWORD *)(v35 + 48);
        v15 = *(_QWORD *)(v35 + 56);
        outlined copy of Data._Representation(v14, v15);
        outlined copy of Data._Representation(v14, v15);
        v18 = MEMORY[0x242633488](v16, v17, v14, v15);
        outlined consume of Data._Representation(v14, v15);
        outlined consume of Data._Representation(v16, v17);
        outlined consume of Data._Representation(v14, v15);
        outlined consume of Data._Representation(v16, v17);
        if ((v18 & 1) != 0)
        {
          v10 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
          v8 = v27 + *(int *)(v10 + 32);
          v11 = (void (*)(char *, uint64_t, uint64_t))v29[2];
          v11(v34, v8, v28);
          v11(v32, v35 + *(int *)(v10 + 32), v28);
          lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
          v13 = dispatch thunk of static Equatable.== infix(_:_:)();
          v12 = (void (*)(char *, uint64_t))v29[1];
          v12(v32, v28);
          v12(v34, v28);
          return (v13 & 1) != 0;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAETextToSign.User.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.User();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupAETextToSign.User@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.User.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAETextToSign.User()
{
  return static GKCrypto_GroupAETextToSign.User.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAETextToSign.User()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAETextToSign.User@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.User.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAETextToSign.User(uint64_t a1)
{
  return GKCrypto_GroupAETextToSign.User.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.User(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAETextToSign.User.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.User;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.User(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAETextToSign.User()
{
  return GKCrypto_GroupAETextToSign.User.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAETextToSign.User.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAETextToSign.User()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAETextToSign.User()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAETextToSign.User()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAETextToSign.User@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAETextToSign.User._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAETextToSign.User()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAETextToSign.User()
{
  return GKCrypto_GroupAETextToSign.User.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAETextToSign.User()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAETextToSign.User(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_GroupAETextToSign.User.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName;
}

uint64_t static GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  type metadata accessor for GKCrypto_AdminGroupBlob();
  lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD v33[2];
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v24 = a1;
  v20 = a2;
  v21 = a3;
  v35 = 0;
  v34 = 0;
  v36 = a2;
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v11 - v27;
  v35 = v4;
  v34 = v3;
  v31 = *v3;
  v30 = v3[1];
  outlined copy of Data._Representation(v31, v30);
  outlined copy of Data._Representation(v31, v30);
  v29 = v33;
  v33[0] = v31;
  v33[1] = v30;
  lazy protocol witness table accessor for type Data and conformance Data();
  v32 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v29);
  outlined consume of Data._Representation(v31, v30);
  if ((v32 & 1) != 0)
  {
    v15 = v23;
  }
  else
  {
    v16 = *v22;
    v17 = v22[1];
    outlined copy of Data._Representation(v16, v17);
    v5 = v23;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v18 = v5;
    v19 = v5;
    if (v5)
    {
      v11[2] = v19;
      return outlined consume of Data._Representation(v16, v17);
    }
    outlined consume of Data._Representation(v16, v17);
    v15 = v18;
  }
  v6 = v15;
  result = closure #1 in GKCrypto_GroupAETextToSign.GroupAssociatedData.traverse<A>(visitor:)((uint64_t)v22, v24, v20, v21);
  v13 = v6;
  v14 = v6;
  if (!v6)
  {
    v8 = v28;
    v9 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, (uint64_t)v22 + *(int *)(v9 + 20), v25);
    v10 = v13;
    UnknownStorage.traverse<A>(visitor:)();
    v11[4] = v10;
    v12 = v10;
    if (v10)
      v11[1] = v12;
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAETextToSign.GroupAssociatedData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined init with copy of GKCrypto_AdminGroupBlob?((uint64_t *)(v22 + *(int *)(v7 + 24)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_AdminGroupBlob(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_GroupAETextToSign.GroupAssociatedData.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(char *, uint64_t, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;

  v33 = a1;
  v41 = a2;
  v48 = 0;
  v47 = 0;
  v19 = 0;
  v20 = type metadata accessor for UnknownStorage();
  v21 = *(_QWORD **)(v20 - 8);
  v22 = (v21[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v23 = (char *)&v9 - v22;
  v24 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v9 - v24;
  v26 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v9 - v28;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_AdminGroupBlob?, GKCrypto_AdminGroupBlob?));
  v31 = (*(_QWORD *)(*(_QWORD *)(v30 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v32 = (uint64_t *)((char *)&v9 - v31);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
  v37 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v34 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (void (**)(char *, uint64_t, uint64_t))((char *)&v9 - v34);
  v36 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v9 - v34);
  v38 = (uint64_t *)((char *)&v9 - v36);
  v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v9 - v36);
  v40 = (uint64_t *)((char *)&v9 - v39);
  v48 = v5;
  v47 = v6;
  v44 = *v5;
  v45 = v5[1];
  outlined copy of Data._Representation(v44, v45);
  outlined copy of Data._Representation(v44, v45);
  v42 = *v41;
  v43 = v41[1];
  outlined copy of Data._Representation(v42, v43);
  outlined copy of Data._Representation(v42, v43);
  v46 = MEMORY[0x242633488](v44, v45, v42, v43);
  outlined consume of Data._Representation(v42, v43);
  outlined consume of Data._Representation(v44, v45);
  outlined consume of Data._Representation(v42, v43);
  outlined consume of Data._Representation(v44, v45);
  if ((v46 & 1) == 0)
    return 0;
  v15 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  outlined init with copy of GKCrypto_AdminGroupBlob?((uint64_t *)(v33 + *(int *)(v15 + 24)), v40);
  outlined init with copy of GKCrypto_AdminGroupBlob?((uint64_t *)((char *)v41 + *(int *)(v15 + 24)), v38);
  v16 = (char *)v32 + *(int *)(v30 + 48);
  outlined init with copy of GKCrypto_AdminGroupBlob?(v40, v32);
  outlined init with copy of GKCrypto_AdminGroupBlob?(v38, v16);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v17((char *)v32, 1, v26) == 1)
  {
    if (v17(v16, 1, v26) == 1)
    {
      outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v32);
      v14 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_AdminGroupBlob?(v32, v35);
    if (v17(v16, 1, v26) != 1)
    {
      outlined init with take of GKCrypto_AdminGroupBlob(v16, v29);
      v13 = static GKCrypto_AdminGroupBlob.== infix(_:_:)((uint64_t)v35, (uint64_t *)v29);
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v29);
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v35);
      outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v32);
      v14 = v13;
      goto LABEL_9;
    }
    outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v35);
  }
  outlined destroy of (GKCrypto_AdminGroupBlob?, GKCrypto_AdminGroupBlob?)((uint64_t)v32);
  v14 = 0;
LABEL_9:
  v12 = v14;
  outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v38);
  outlined destroy of GKCrypto_AdminGroupBlob?((uint64_t)v40);
  if ((v12 & 1) != 0)
  {
    v7 = v33 + *(int *)(v15 + 20);
    v9 = (void (*)(char *, uint64_t, uint64_t))v21[2];
    v9(v25, v7, v20);
    v9(v23, (uint64_t)v41 + *(int *)(v15 + 20), v20);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v10 = (void (*)(char *, uint64_t))v21[1];
    v10(v23, v20);
    v10(v25, v20);
    return (v11 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAETextToSign.GroupAssociatedData.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData@<X0>(char *a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return static GKCrypto_GroupAETextToSign.GroupAssociatedData.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1)
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAETextToSign.GroupAssociatedData.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAETextToSign.GroupAssociatedData._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return GKCrypto_GroupAETextToSign.GroupAssociatedData.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_GroupAETextToSign.GroupAssociatedData.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAEDataToEncrypt.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAEDataToEncrypt.protoMessageName;
}

uint64_t static GKCrypto_GroupAEDataToEncrypt.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAEDataToEncrypt.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupAEDataToEncrypt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v42 = a2;
  v43 = a3;
  v54 = 0;
  v53 = 0;
  v55 = a2;
  v47 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)v12 - v49;
  v54 = v4;
  v53 = v3;
  if (*v3)
  {
    v5 = v45;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v40 = v5;
    v41 = v5;
    if (v5)
    {
      v14 = v41;
      return result;
    }
    v39 = 0;
  }
  else
  {
    v39 = v45;
  }
  v33 = v39;
  v37 = *((_QWORD *)v44 + 1);
  v36 = *((_QWORD *)v44 + 2);
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v52;
  v52[0] = v37;
  v52[1] = v36;
  v34 = lazy protocol witness table accessor for type Data and conformance Data();
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v28 = v33;
  }
  else
  {
    v29 = *((_QWORD *)v44 + 1);
    v30 = *((_QWORD *)v44 + 2);
    outlined copy of Data._Representation(v29, v30);
    v7 = v33;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v31 = v7;
    v32 = v7;
    if (v7)
    {
      v13 = v32;
      result = outlined consume of Data._Representation(v29, v30);
      v14 = v13;
      return result;
    }
    outlined consume of Data._Representation(v29, v30);
    v28 = v31;
  }
  v23 = v28;
  v26 = *((_QWORD *)v44 + 3);
  v25 = *((_QWORD *)v44 + 4);
  outlined copy of Data._Representation(v26, v25);
  outlined copy of Data._Representation(v26, v25);
  v24 = v51;
  v51[0] = v26;
  v51[1] = v25;
  v27 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v24);
  outlined consume of Data._Representation(v26, v25);
  if ((v27 & 1) != 0)
  {
    v18 = v23;
  }
  else
  {
    v19 = *((_QWORD *)v44 + 3);
    v20 = *((_QWORD *)v44 + 4);
    outlined copy of Data._Representation(v19, v20);
    v8 = v23;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v21 = v8;
    v22 = v8;
    if (v8)
    {
      v12[2] = v22;
      return outlined consume of Data._Representation(v19, v20);
    }
    outlined consume of Data._Representation(v19, v20);
    v18 = v21;
  }
  v9 = v50;
  v15 = v18;
  v10 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, &v44[*(int *)(v10 + 28)], v47);
  v11 = v15;
  UnknownStorage.traverse<A>(visitor:)();
  v16 = v11;
  v17 = v11;
  if (v11)
    v12[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v47);
}

BOOL static GKCrypto_GroupAEDataToEncrypt.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;

  v24 = a1;
  v23 = a2;
  v32 = 0;
  v31 = 0;
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD **)(v25 - 8);
  v27 = (v26[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v8 - v27;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v8 - v29;
  v32 = v4;
  v31 = v5;
  if (*v4 == *v5)
  {
    v19 = v24[1];
    v20 = v24[2];
    outlined copy of Data._Representation(v19, v20);
    outlined copy of Data._Representation(v19, v20);
    v17 = *((_QWORD *)v23 + 1);
    v18 = *((_QWORD *)v23 + 2);
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v21 = MEMORY[0x242633488](v19, v20, v17, v18);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    if ((v21 & 1) != 0)
    {
      v14 = v24[3];
      v15 = v24[4];
      outlined copy of Data._Representation(v14, v15);
      outlined copy of Data._Representation(v14, v15);
      v12 = *((_QWORD *)v23 + 3);
      v13 = *((_QWORD *)v23 + 4);
      outlined copy of Data._Representation(v12, v13);
      outlined copy of Data._Representation(v12, v13);
      v16 = MEMORY[0x242633488](v14, v15, v12, v13);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      if ((v16 & 1) != 0)
      {
        v8 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
        v6 = (char *)v24 + *(int *)(v8 + 28);
        v9 = (void (*)(char *, char *, uint64_t))v26[2];
        v9(v30, v6, v25);
        v9(v28, &v23[*(int *)(v8 + 28)], v25);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v11 = dispatch thunk of static Equatable.== infix(_:_:)();
        v10 = (void (*)(char *, uint64_t))v26[1];
        v10(v28, v25);
        v10(v30, v25);
        return (v11 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAEDataToEncrypt.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
  lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupAEDataToEncrypt@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAEDataToEncrypt.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return static GKCrypto_GroupAEDataToEncrypt.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAEDataToEncrypt@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAEDataToEncrypt.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAEDataToEncrypt(uint64_t a1)
{
  return GKCrypto_GroupAEDataToEncrypt.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAEDataToEncrypt(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAEDataToEncrypt.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAEDataToEncrypt;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAEDataToEncrypt(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return GKCrypto_GroupAEDataToEncrypt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAEDataToEncrypt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAEDataToEncrypt()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAEDataToEncrypt@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAEDataToEncrypt._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAEDataToEncrypt()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAEDataToEncrypt()
{
  return GKCrypto_GroupAEDataToEncrypt.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAEDataToEncrypt()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAEDataToEncrypt(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAEDataToEncrypt(_QWORD *a1, char *a2)
{
  return static GKCrypto_GroupAEDataToEncrypt.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_AdminMetaData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_AdminMetaData.protoMessageName;
}

uint64_t static GKCrypto_AdminMetaData.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_AdminMetaData.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_AdminMetaData._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_AdminMetaData._protobuf_nameMap);
}

uint64_t static GKCrypto_AdminMetaData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_AdminMetaData._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_AdminMetaData.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
      closure #1 in GKCrypto_AdminMetaData.decodeMessage<A>(decoder:)();
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_AdminMetaData.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_AdminMetaData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD v32[2];
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v23 = a1;
  v19 = a2;
  v20 = a3;
  v34 = 0;
  v33 = 0;
  v35 = a2;
  v24 = type metadata accessor for UnknownStorage();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v10 - v26;
  v34 = v4;
  v33 = v3;
  v30 = *v3;
  v29 = v3[1];
  outlined copy of Data._Representation(v30, v29);
  outlined copy of Data._Representation(v30, v29);
  v28 = v32;
  v32[0] = v30;
  v32[1] = v29;
  lazy protocol witness table accessor for type Data and conformance Data();
  v31 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v28);
  outlined consume of Data._Representation(v30, v29);
  if ((v31 & 1) != 0)
  {
    v14 = v22;
  }
  else
  {
    v15 = *v21;
    v16 = v21[1];
    outlined copy of Data._Representation(v15, v16);
    v5 = v22;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v17 = v5;
    v18 = v5;
    if (v5)
    {
      v10[2] = v18;
      return outlined consume of Data._Representation(v15, v16);
    }
    outlined consume of Data._Representation(v15, v16);
    v14 = v17;
  }
  v6 = v27;
  v11 = v14;
  v7 = type metadata accessor for GKCrypto_AdminMetaData();
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v6, (char *)v21 + *(int *)(v7 + 20), v24);
  v8 = v11;
  UnknownStorage.traverse<A>(visitor:)();
  v12 = v8;
  v13 = v8;
  if (v8)
    v10[1] = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
}

BOOL static GKCrypto_AdminMetaData.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  void (*v8)(char *, uint64_t);
  int v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;

  v11 = a1;
  v19 = a2;
  v26 = 0;
  v25 = 0;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(_QWORD **)(v12 - 8);
  v15 = v13[8];
  v14 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v6 - v14;
  v17 = v14;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v14);
  v18 = (char *)&v6 - v17;
  v26 = v2;
  v25 = v3;
  v22 = *v2;
  v23 = v2[1];
  outlined copy of Data._Representation(v22, v23);
  outlined copy of Data._Representation(v22, v23);
  v20 = *v19;
  v21 = v19[1];
  outlined copy of Data._Representation(v20, v21);
  outlined copy of Data._Representation(v20, v21);
  v24 = MEMORY[0x242633488](v22, v23, v20, v21);
  outlined consume of Data._Representation(v20, v21);
  outlined consume of Data._Representation(v22, v23);
  outlined consume of Data._Representation(v20, v21);
  outlined consume of Data._Representation(v22, v23);
  if ((v24 & 1) != 0)
  {
    v6 = type metadata accessor for GKCrypto_AdminMetaData();
    v4 = v11 + *(int *)(v6 + 20);
    v7 = (void (*)(char *, uint64_t, uint64_t))v13[2];
    v7(v18, v4, v12);
    v7(v16, (uint64_t)v19 + *(int *)(v6 + 20), v12);
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    v9 = dispatch thunk of static Equatable.== infix(_:_:)();
    v8 = (void (*)(char *, uint64_t))v13[1];
    v8(v16, v12);
    v8(v18, v12);
    return (v9 & 1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_AdminMetaData.hashValue.getter()
{
  type metadata accessor for GKCrypto_AdminMetaData();
  lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_AdminMetaData@<X0>(char *a1@<X8>)
{
  return GKCrypto_AdminMetaData.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_AdminMetaData()
{
  return static GKCrypto_AdminMetaData.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_AdminMetaData()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_AdminMetaData@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_AdminMetaData.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_AdminMetaData(uint64_t a1)
{
  return GKCrypto_AdminMetaData.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminMetaData(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_AdminMetaData.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminMetaData;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminMetaData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_AdminMetaData()
{
  return GKCrypto_AdminMetaData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_AdminMetaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_AdminMetaData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_AdminMetaData()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_AdminMetaData()
{
  lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_AdminMetaData()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_AdminMetaData@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_AdminMetaData._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_AdminMetaData()
{
  lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_AdminMetaData()
{
  return GKCrypto_AdminMetaData.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_AdminMetaData()
{
  lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_AdminMetaData(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_AdminMetaData(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_AdminMetaData.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_AdminPlainText.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_AdminPlainText.protoMessageName;
}

uint64_t static GKCrypto_AdminPlainText.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_AdminPlainText.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_AdminPlainText._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_AdminPlainText._protobuf_nameMap);
}

uint64_t static GKCrypto_AdminPlainText._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_AdminPlainText._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_AdminPlainText();
  type metadata accessor for GKCrypto_VersionedSeed();
  lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_AdminPlainText();
  type metadata accessor for GKCrypto_AdminMetaData();
  lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_AdminPlainText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v31 = a1;
  v28 = a2;
  v29 = a3;
  v41 = 0;
  v40 = 0;
  v42 = a2;
  v3 = v30;
  v33 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v13 - v35;
  v41 = v4;
  v40 = v5;
  result = closure #1 in GKCrypto_AdminPlainText.traverse<A>(visitor:)(v5, v4, v6, v7);
  v37 = v3;
  v38 = v3;
  if (v3)
  {
    v13[2] = v38;
    return result;
  }
  closure #2 in GKCrypto_AdminPlainText.traverse<A>(visitor:)((uint64_t)v32, v31, v28, v29);
  v26 = 0;
  v27 = 0;
  v24 = *v32;
  v23 = v32[1];
  outlined copy of Data._Representation(v24, v23);
  outlined copy of Data._Representation(v24, v23);
  v22 = v39;
  v39[0] = v24;
  v39[1] = v23;
  lazy protocol witness table accessor for type Data and conformance Data();
  v25 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v22);
  outlined consume of Data._Representation(v24, v23);
  if ((v25 & 1) != 0)
  {
    v17 = v26;
  }
  else
  {
    v18 = *v32;
    v19 = v32[1];
    outlined copy of Data._Representation(v18, v19);
    v9 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v9;
    v21 = v9;
    if (v9)
    {
      v13[1] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v10 = v36;
  v14 = v17;
  v11 = type metadata accessor for GKCrypto_AdminPlainText();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v10, (uint64_t)v32 + *(int *)(v11 + 20), v33);
  v12 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v12;
  v16 = v12;
  if (v12)
    v13[0] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v33);
}

uint64_t closure #1 in GKCrypto_AdminPlainText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (uint64_t *)((char *)&v10 - v17);
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_VersionedSeed();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_VersionedSeed?((_QWORD *)(v22 + *(int *)(v7 + 24)), v25);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_VersionedSeed((uint64_t)v25, v21);
    lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_VersionedSeed(v21);
    }
    else
    {
      outlined destroy of GKCrypto_VersionedSeed(v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

uint64_t closure #2 in GKCrypto_AdminPlainText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v10 - v17;
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_AdminMetaData();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_AdminMetaData?((uint64_t *)(v22 + *(int *)(v7 + 28)), v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_AdminMetaData(v25, v21);
    lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_AdminMetaData((uint64_t)v21);
    }
    else
    {
      outlined destroy of GKCrypto_AdminMetaData((uint64_t)v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_AdminPlainText.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  int v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  int *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v60 = a1;
  v61 = a2;
  v72 = 0;
  v71 = 0;
  v54 = 0;
  v32 = type metadata accessor for UnknownStorage();
  v33 = *(_QWORD **)(v32 - 8);
  v34 = (v33[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v35 = (char *)&v15 - v34;
  v36 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v15 - v36;
  v38 = type metadata accessor for GKCrypto_AdminMetaData();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v15 - v40;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_AdminMetaData?, GKCrypto_AdminMetaData?));
  v43 = (*(_QWORD *)(*(_QWORD *)(v42 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (uint64_t *)((char *)&v15 - v43);
  v45 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v46 = (void (**)(char *, char *, uint64_t))((char *)&v15 - v45);
  v47 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (uint64_t *)((char *)&v15 - v47);
  v49 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t *)((char *)&v15 - v49);
  v68 = type metadata accessor for GKCrypto_VersionedSeed();
  v67 = *(_QWORD *)(v68 - 8);
  v51 = (*(_QWORD *)(v67 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v68);
  v52 = (uint64_t)&v15 - v51;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?));
  v53 = (*(_QWORD *)(*(_QWORD *)(v63 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v69 = (char *)&v15 - v53;
  v58 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?)
                              - 8)
                  + 64);
  v55 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v56 = (void (**)(char *, char *, uint64_t))((char *)&v15 - v55);
  v57 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v66 = (void (**)(char *, char *, uint64_t))((char *)&v15 - v57);
  v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v64 = (void (**)(char *, char *, uint64_t))((char *)&v15 - v59);
  v72 = v10;
  v71 = v11;
  v62 = (int *)type metadata accessor for GKCrypto_AdminPlainText();
  outlined init with copy of GKCrypto_VersionedSeed?((uint64_t *)((char *)v60 + v62[6]), v64);
  outlined init with copy of GKCrypto_VersionedSeed?((uint64_t *)((char *)v61 + v62[6]), v66);
  v65 = *(int *)(v63 + 48);
  outlined init with copy of GKCrypto_VersionedSeed?(v64, v69);
  outlined init with copy of GKCrypto_VersionedSeed?(v66, &v69[v65]);
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  if (v70(v69, 1, v68) == 1)
  {
    if (v70(&v69[v65], 1, v68) == 1)
    {
      outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v69);
      v31 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_VersionedSeed?(v69, v56);
    if (v70(&v69[v65], 1, v68) != 1)
    {
      outlined init with take of GKCrypto_VersionedSeed((uint64_t)&v69[v65], v52);
      v30 = static GKCrypto_VersionedSeed.== infix(_:_:)((uint64_t)v56, v52);
      outlined destroy of GKCrypto_VersionedSeed(v52);
      outlined destroy of GKCrypto_VersionedSeed((uint64_t)v56);
      outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v69);
      v31 = v30;
      goto LABEL_7;
    }
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)v56);
  }
  outlined destroy of (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?)((uint64_t)v69);
  v31 = 0;
LABEL_7:
  v29 = v31;
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v66);
  outlined destroy of GKCrypto_VersionedSeed?((uint64_t)v64);
  if ((v29 & 1) == 0)
    return 0;
  outlined init with copy of GKCrypto_AdminMetaData?((uint64_t *)((char *)v60 + v62[7]), v50);
  outlined init with copy of GKCrypto_AdminMetaData?((uint64_t *)((char *)v61 + v62[7]), v48);
  v26 = (char *)v44 + *(int *)(v42 + 48);
  outlined init with copy of GKCrypto_AdminMetaData?(v50, v44);
  outlined init with copy of GKCrypto_AdminMetaData?(v48, v26);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  if (v27((char *)v44, 1, v38) == 1)
  {
    if (v27(v26, 1, v38) == 1)
    {
      outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v44);
      v25 = 1;
      goto LABEL_18;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_AdminMetaData?(v44, v46);
    if (v27(v26, 1, v38) != 1)
    {
      outlined init with take of GKCrypto_AdminMetaData(v26, v41);
      v24 = static GKCrypto_AdminMetaData.== infix(_:_:)((uint64_t)v46, (uint64_t *)v41);
      outlined destroy of GKCrypto_AdminMetaData((uint64_t)v41);
      outlined destroy of GKCrypto_AdminMetaData((uint64_t)v46);
      outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v44);
      v25 = v24;
      goto LABEL_18;
    }
    outlined destroy of GKCrypto_AdminMetaData((uint64_t)v46);
  }
  outlined destroy of (GKCrypto_AdminMetaData?, GKCrypto_AdminMetaData?)((uint64_t)v44);
  v25 = 0;
LABEL_18:
  v23 = v25;
  outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v48);
  outlined destroy of GKCrypto_AdminMetaData?((uint64_t)v50);
  if ((v23 & 1) != 0)
  {
    v20 = *v60;
    v21 = v60[1];
    outlined copy of Data._Representation(v20, v21);
    outlined copy of Data._Representation(v20, v21);
    v18 = *v61;
    v19 = v61[1];
    outlined copy of Data._Representation(v18, v19);
    outlined copy of Data._Representation(v18, v19);
    v22 = MEMORY[0x242633488](v20, v21, v18, v19);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v20, v21);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v20, v21);
    if ((v22 & 1) != 0)
    {
      v13 = (char *)v60 + v62[5];
      v15 = (void (*)(char *, char *, uint64_t))v33[2];
      v15(v37, v13, v32);
      v15(v35, (char *)v61 + v62[5], v32);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = (void (*)(char *, uint64_t))v33[1];
      v16(v35, v32);
      v16(v37, v32);
      return (v17 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_AdminPlainText.hashValue.getter()
{
  type metadata accessor for GKCrypto_AdminPlainText();
  lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_AdminPlainText@<X0>(char *a1@<X8>)
{
  return GKCrypto_AdminPlainText.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_AdminPlainText()
{
  return static GKCrypto_AdminPlainText.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_AdminPlainText()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_AdminPlainText@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_AdminPlainText.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_AdminPlainText(uint64_t a1)
{
  return GKCrypto_AdminPlainText.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminPlainText(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_AdminPlainText.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminPlainText;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminPlainText(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_AdminPlainText()
{
  return GKCrypto_AdminPlainText.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_AdminPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_AdminPlainText.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_AdminPlainText()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_AdminPlainText()
{
  lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_AdminPlainText()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_AdminPlainText@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_AdminPlainText._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_AdminPlainText()
{
  lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_AdminPlainText()
{
  return GKCrypto_AdminPlainText.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_AdminPlainText()
{
  lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_AdminPlainText(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2)
{
  return static GKCrypto_AdminPlainText.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_Invite.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_Invite.protoMessageName;
}

uint64_t static GKCrypto_Invite.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_Invite.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_Invite._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_Invite._protobuf_nameMap);
}

uint64_t static GKCrypto_Invite._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_Invite._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 7:
        closure #7 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 8:
        closure #8 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
      case 9:
        closure #9 in GKCrypto_Invite.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #6 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #7 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #8 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #9 in GKCrypto_Invite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_Invite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  _QWORD v123[2];
  _QWORD v124[2];
  _QWORD v125[2];
  _QWORD v126[2];
  _QWORD v127[2];
  _QWORD v128[2];
  _QWORD v129[2];
  _QWORD v130[2];
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;

  v113 = a1;
  v109 = a2;
  v110 = a3;
  v132 = 0;
  v131 = 0;
  v133 = a2;
  v114 = type metadata accessor for UnknownStorage();
  v115 = *(_QWORD *)(v114 - 8);
  v116 = (*(_QWORD *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v117 = (char *)v18 - v116;
  v132 = v4;
  v131 = v3;
  v121 = *v3;
  v120 = v3[1];
  outlined copy of Data._Representation(v121, v120);
  outlined copy of Data._Representation(v121, v120);
  v119 = v130;
  v130[0] = v121;
  v130[1] = v120;
  v118 = lazy protocol witness table accessor for type Data and conformance Data();
  v122 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v119);
  outlined consume of Data._Representation(v121, v120);
  if ((v122 & 1) != 0)
  {
    v104 = v112;
  }
  else
  {
    v105 = *(_QWORD *)v111;
    v106 = *(_QWORD *)(v111 + 8);
    outlined copy of Data._Representation(v105, v106);
    v5 = v112;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v107 = v5;
    v108 = v5;
    if (v5)
    {
      v25 = v108;
      result = outlined consume of Data._Representation(v105, v106);
      v26 = v25;
      return result;
    }
    outlined consume of Data._Representation(v105, v106);
    v104 = v107;
  }
  v99 = v104;
  v102 = *(_QWORD *)(v111 + 16);
  v101 = *(_QWORD *)(v111 + 24);
  outlined copy of Data._Representation(v102, v101);
  outlined copy of Data._Representation(v102, v101);
  v100 = v129;
  v129[0] = v102;
  v129[1] = v101;
  v103 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v100);
  outlined consume of Data._Representation(v102, v101);
  if ((v103 & 1) != 0)
  {
    v94 = v99;
  }
  else
  {
    v95 = *(_QWORD *)(v111 + 16);
    v96 = *(_QWORD *)(v111 + 24);
    outlined copy of Data._Representation(v95, v96);
    v6 = v99;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v97 = v6;
    v98 = v6;
    if (v6)
    {
      v24 = v98;
      result = outlined consume of Data._Representation(v95, v96);
      v26 = v24;
      return result;
    }
    outlined consume of Data._Representation(v95, v96);
    v94 = v97;
  }
  v89 = v94;
  v92 = *(_QWORD *)(v111 + 32);
  v91 = *(_QWORD *)(v111 + 40);
  outlined copy of Data._Representation(v92, v91);
  outlined copy of Data._Representation(v92, v91);
  v90 = v128;
  v128[0] = v92;
  v128[1] = v91;
  v93 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v90);
  outlined consume of Data._Representation(v92, v91);
  if ((v93 & 1) != 0)
  {
    v84 = v89;
  }
  else
  {
    v85 = *(_QWORD *)(v111 + 32);
    v86 = *(_QWORD *)(v111 + 40);
    outlined copy of Data._Representation(v85, v86);
    v7 = v89;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v87 = v7;
    v88 = v7;
    if (v7)
    {
      v23 = v88;
      result = outlined consume of Data._Representation(v85, v86);
      v26 = v23;
      return result;
    }
    outlined consume of Data._Representation(v85, v86);
    v84 = v87;
  }
  v79 = v84;
  v82 = *(_QWORD *)(v111 + 48);
  v81 = *(_QWORD *)(v111 + 56);
  outlined copy of Data._Representation(v82, v81);
  outlined copy of Data._Representation(v82, v81);
  v80 = v127;
  v127[0] = v82;
  v127[1] = v81;
  v83 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v80);
  outlined consume of Data._Representation(v82, v81);
  if ((v83 & 1) != 0)
  {
    v74 = v79;
  }
  else
  {
    v75 = *(_QWORD *)(v111 + 48);
    v76 = *(_QWORD *)(v111 + 56);
    outlined copy of Data._Representation(v75, v76);
    v8 = v79;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v77 = v8;
    v78 = v8;
    if (v8)
    {
      v22 = v78;
      result = outlined consume of Data._Representation(v75, v76);
      v26 = v22;
      return result;
    }
    outlined consume of Data._Representation(v75, v76);
    v74 = v77;
  }
  v69 = v74;
  v72 = *(_QWORD *)(v111 + 64);
  v71 = *(_QWORD *)(v111 + 72);
  outlined copy of Data._Representation(v72, v71);
  outlined copy of Data._Representation(v72, v71);
  v70 = v126;
  v126[0] = v72;
  v126[1] = v71;
  v73 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v70);
  outlined consume of Data._Representation(v72, v71);
  if ((v73 & 1) != 0)
  {
    v64 = v69;
  }
  else
  {
    v65 = *(_QWORD *)(v111 + 64);
    v66 = *(_QWORD *)(v111 + 72);
    outlined copy of Data._Representation(v65, v66);
    v9 = v69;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v67 = v9;
    v68 = v9;
    if (v9)
    {
      v21 = v68;
      result = outlined consume of Data._Representation(v65, v66);
      v26 = v21;
      return result;
    }
    outlined consume of Data._Representation(v65, v66);
    v64 = v67;
  }
  v59 = v64;
  v62 = *(_QWORD *)(v111 + 80);
  v61 = *(_QWORD *)(v111 + 88);
  outlined copy of Data._Representation(v62, v61);
  outlined copy of Data._Representation(v62, v61);
  v60 = v125;
  v125[0] = v62;
  v125[1] = v61;
  v63 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v60);
  outlined consume of Data._Representation(v62, v61);
  if ((v63 & 1) != 0)
  {
    v54 = v59;
  }
  else
  {
    v55 = *(_QWORD *)(v111 + 80);
    v56 = *(_QWORD *)(v111 + 88);
    outlined copy of Data._Representation(v55, v56);
    v10 = v59;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v57 = v10;
    v58 = v10;
    if (v10)
    {
      v20 = v58;
      result = outlined consume of Data._Representation(v55, v56);
      v26 = v20;
      return result;
    }
    outlined consume of Data._Representation(v55, v56);
    v54 = v57;
  }
  v49 = v54;
  v52 = *(_QWORD *)(v111 + 96);
  v51 = *(_QWORD *)(v111 + 104);
  outlined copy of Data._Representation(v52, v51);
  outlined copy of Data._Representation(v52, v51);
  v50 = v124;
  v124[0] = v52;
  v124[1] = v51;
  v53 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v50);
  outlined consume of Data._Representation(v52, v51);
  if ((v53 & 1) != 0)
  {
    v44 = v49;
  }
  else
  {
    v45 = *(_QWORD *)(v111 + 96);
    v46 = *(_QWORD *)(v111 + 104);
    outlined copy of Data._Representation(v45, v46);
    v11 = v49;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v47 = v11;
    v48 = v11;
    if (v11)
    {
      v19 = v48;
      result = outlined consume of Data._Representation(v45, v46);
      v26 = v19;
      return result;
    }
    outlined consume of Data._Representation(v45, v46);
    v44 = v47;
  }
  v43 = v44;
  if (*(_DWORD *)(v111 + 112))
  {
    v12 = v43;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v41 = v12;
    v42 = v12;
    if (v12)
    {
      v26 = v42;
      return result;
    }
    v40 = 0;
  }
  else
  {
    v40 = v43;
  }
  v35 = v40;
  v38 = *(_QWORD *)(v111 + 120);
  v37 = *(_QWORD *)(v111 + 128);
  outlined copy of Data._Representation(v38, v37);
  outlined copy of Data._Representation(v38, v37);
  v36 = v123;
  v123[0] = v38;
  v123[1] = v37;
  v39 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v36);
  outlined consume of Data._Representation(v38, v37);
  if ((v39 & 1) != 0)
  {
    v30 = v35;
  }
  else
  {
    v31 = *(_QWORD *)(v111 + 120);
    v32 = *(_QWORD *)(v111 + 128);
    outlined copy of Data._Representation(v31, v32);
    v14 = v35;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v33 = v14;
    v34 = v14;
    if (v14)
    {
      v18[2] = v34;
      return outlined consume of Data._Representation(v31, v32);
    }
    outlined consume of Data._Representation(v31, v32);
    v30 = v33;
  }
  v15 = v117;
  v27 = v30;
  v16 = type metadata accessor for GKCrypto_Invite();
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v15, v111 + *(int *)(v16 + 52), v114);
  v17 = v27;
  UnknownStorage.traverse<A>(visitor:)();
  v28 = v17;
  v29 = v17;
  if (v17)
    v18[1] = v29;
  return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v117, v114);
}

BOOL static GKCrypto_Invite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;

  v47 = a1;
  v55 = a2;
  v62 = 0;
  v61 = 0;
  v48 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD **)(v48 - 8);
  v51 = v49[8];
  v50 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v52 = (char *)&v6 - v50;
  v53 = v50;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v50);
  v54 = (char *)&v6 - v53;
  v62 = v2;
  v61 = v3;
  v58 = *v2;
  v59 = v2[1];
  outlined copy of Data._Representation(v58, v59);
  outlined copy of Data._Representation(v58, v59);
  v56 = *(_QWORD *)v55;
  v57 = *(_QWORD *)(v55 + 8);
  outlined copy of Data._Representation(v56, v57);
  outlined copy of Data._Representation(v56, v57);
  v60 = MEMORY[0x242633488](v58, v59, v56, v57);
  outlined consume of Data._Representation(v56, v57);
  outlined consume of Data._Representation(v58, v59);
  outlined consume of Data._Representation(v56, v57);
  outlined consume of Data._Representation(v58, v59);
  if ((v60 & 1) != 0)
  {
    v43 = *(_QWORD *)(v47 + 16);
    v44 = *(_QWORD *)(v47 + 24);
    outlined copy of Data._Representation(v43, v44);
    outlined copy of Data._Representation(v43, v44);
    v41 = *(_QWORD *)(v55 + 16);
    v42 = *(_QWORD *)(v55 + 24);
    outlined copy of Data._Representation(v41, v42);
    outlined copy of Data._Representation(v41, v42);
    v45 = MEMORY[0x242633488](v43, v44, v41, v42);
    outlined consume of Data._Representation(v41, v42);
    outlined consume of Data._Representation(v43, v44);
    outlined consume of Data._Representation(v41, v42);
    outlined consume of Data._Representation(v43, v44);
    if ((v45 & 1) != 0)
    {
      v38 = *(_QWORD *)(v47 + 32);
      v39 = *(_QWORD *)(v47 + 40);
      outlined copy of Data._Representation(v38, v39);
      outlined copy of Data._Representation(v38, v39);
      v36 = *(_QWORD *)(v55 + 32);
      v37 = *(_QWORD *)(v55 + 40);
      outlined copy of Data._Representation(v36, v37);
      outlined copy of Data._Representation(v36, v37);
      v40 = MEMORY[0x242633488](v38, v39, v36, v37);
      outlined consume of Data._Representation(v36, v37);
      outlined consume of Data._Representation(v38, v39);
      outlined consume of Data._Representation(v36, v37);
      outlined consume of Data._Representation(v38, v39);
      if ((v40 & 1) != 0)
      {
        v33 = *(_QWORD *)(v47 + 48);
        v34 = *(_QWORD *)(v47 + 56);
        outlined copy of Data._Representation(v33, v34);
        outlined copy of Data._Representation(v33, v34);
        v31 = *(_QWORD *)(v55 + 48);
        v32 = *(_QWORD *)(v55 + 56);
        outlined copy of Data._Representation(v31, v32);
        outlined copy of Data._Representation(v31, v32);
        v35 = MEMORY[0x242633488](v33, v34, v31, v32);
        outlined consume of Data._Representation(v31, v32);
        outlined consume of Data._Representation(v33, v34);
        outlined consume of Data._Representation(v31, v32);
        outlined consume of Data._Representation(v33, v34);
        if ((v35 & 1) != 0)
        {
          v28 = *(_QWORD *)(v47 + 64);
          v29 = *(_QWORD *)(v47 + 72);
          outlined copy of Data._Representation(v28, v29);
          outlined copy of Data._Representation(v28, v29);
          v26 = *(_QWORD *)(v55 + 64);
          v27 = *(_QWORD *)(v55 + 72);
          outlined copy of Data._Representation(v26, v27);
          outlined copy of Data._Representation(v26, v27);
          v30 = MEMORY[0x242633488](v28, v29, v26, v27);
          outlined consume of Data._Representation(v26, v27);
          outlined consume of Data._Representation(v28, v29);
          outlined consume of Data._Representation(v26, v27);
          outlined consume of Data._Representation(v28, v29);
          if ((v30 & 1) != 0)
          {
            v23 = *(_QWORD *)(v47 + 80);
            v24 = *(_QWORD *)(v47 + 88);
            outlined copy of Data._Representation(v23, v24);
            outlined copy of Data._Representation(v23, v24);
            v21 = *(_QWORD *)(v55 + 80);
            v22 = *(_QWORD *)(v55 + 88);
            outlined copy of Data._Representation(v21, v22);
            outlined copy of Data._Representation(v21, v22);
            v25 = MEMORY[0x242633488](v23, v24, v21, v22);
            outlined consume of Data._Representation(v21, v22);
            outlined consume of Data._Representation(v23, v24);
            outlined consume of Data._Representation(v21, v22);
            outlined consume of Data._Representation(v23, v24);
            if ((v25 & 1) != 0)
            {
              v18 = *(_QWORD *)(v47 + 96);
              v19 = *(_QWORD *)(v47 + 104);
              outlined copy of Data._Representation(v18, v19);
              outlined copy of Data._Representation(v18, v19);
              v16 = *(_QWORD *)(v55 + 96);
              v17 = *(_QWORD *)(v55 + 104);
              outlined copy of Data._Representation(v16, v17);
              outlined copy of Data._Representation(v16, v17);
              v20 = MEMORY[0x242633488](v18, v19, v16, v17);
              outlined consume of Data._Representation(v16, v17);
              outlined consume of Data._Representation(v18, v19);
              outlined consume of Data._Representation(v16, v17);
              outlined consume of Data._Representation(v18, v19);
              if ((v20 & 1) != 0)
              {
                if (*(_DWORD *)(v47 + 112) == *(_DWORD *)(v55 + 112))
                {
                  v13 = *(_QWORD *)(v47 + 120);
                  v14 = *(_QWORD *)(v47 + 128);
                  outlined copy of Data._Representation(v13, v14);
                  outlined copy of Data._Representation(v13, v14);
                  v11 = *(_QWORD *)(v55 + 120);
                  v12 = *(_QWORD *)(v55 + 128);
                  outlined copy of Data._Representation(v11, v12);
                  outlined copy of Data._Representation(v11, v12);
                  v15 = MEMORY[0x242633488](v13, v14, v11, v12);
                  outlined consume of Data._Representation(v11, v12);
                  outlined consume of Data._Representation(v13, v14);
                  outlined consume of Data._Representation(v11, v12);
                  outlined consume of Data._Representation(v13, v14);
                  if ((v15 & 1) != 0)
                  {
                    v7 = type metadata accessor for GKCrypto_Invite();
                    v4 = v47 + *(int *)(v7 + 52);
                    v8 = (void (*)(char *, uint64_t, uint64_t))v49[2];
                    v8(v54, v4, v48);
                    v8(v52, v55 + *(int *)(v7 + 52), v48);
                    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
                    v10 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v9 = (void (*)(char *, uint64_t))v49[1];
                    v9(v52, v48);
                    v9(v54, v48);
                    return (v10 & 1) != 0;
                  }
                  else
                  {
                    return 0;
                  }
                }
                else
                {
                  return 0;
                }
              }
              else
              {
                return 0;
              }
            }
            else
            {
              return 0;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_Invite.hashValue.getter()
{
  type metadata accessor for GKCrypto_Invite();
  lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_Invite@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_Invite.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_Invite()
{
  return static GKCrypto_Invite.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_Invite()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_Invite@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_Invite.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_Invite(uint64_t a1)
{
  return GKCrypto_Invite.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_Invite(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_Invite.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_Invite;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_Invite(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_Invite()
{
  return GKCrypto_Invite.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_Invite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_Invite.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_Invite()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_Invite()
{
  lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_Invite()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_Invite@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_Invite._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_Invite()
{
  lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_Invite()
{
  return GKCrypto_Invite.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_Invite()
{
  lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_Invite(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_Invite(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_Invite.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_SignedInvite.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_SignedInvite.protoMessageName;
}

uint64_t static GKCrypto_SignedInvite.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_SignedInvite.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_SignedInvite._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_SignedInvite._protobuf_nameMap);
}

uint64_t static GKCrypto_SignedInvite._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_SignedInvite._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_SignedInvite.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_SignedInvite();
  type metadata accessor for GKCrypto_Invite();
  lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_SignedInvite.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_SignedInvite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD v40[2];
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v35 = a1;
  v31 = a2;
  v32 = a3;
  v42 = 0;
  v41 = 0;
  v43 = a2;
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v12 - v38;
  v42 = v4;
  v41 = v3;
  if (*v3)
  {
    v5 = v34;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v29 = v5;
    v30 = v5;
    if (v5)
    {
      v13 = v30;
      return result;
    }
    v28 = 0;
  }
  else
  {
    v28 = v34;
  }
  v7 = v28;
  result = closure #1 in GKCrypto_SignedInvite.traverse<A>(visitor:)(v33, v35, v31, v32);
  v26 = v7;
  v27 = v7;
  if (v7)
  {
    v13 = v27;
    return result;
  }
  v24 = *(_QWORD *)(v33 + 8);
  v23 = *(_QWORD *)(v33 + 16);
  outlined copy of Data._Representation(v24, v23);
  outlined copy of Data._Representation(v24, v23);
  v22 = v40;
  v40[0] = v24;
  v40[1] = v23;
  lazy protocol witness table accessor for type Data and conformance Data();
  v25 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v22);
  outlined consume of Data._Representation(v24, v23);
  if ((v25 & 1) != 0)
  {
    v17 = v26;
  }
  else
  {
    v18 = *(_QWORD *)(v33 + 8);
    v19 = *(_QWORD *)(v33 + 16);
    outlined copy of Data._Representation(v18, v19);
    v8 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v12[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v9 = v39;
  v14 = v17;
  v10 = type metadata accessor for GKCrypto_SignedInvite();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, v33 + *(int *)(v10 + 24), v36);
  v11 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v11;
  v16 = v11;
  if (v11)
    v12[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
}

uint64_t closure #1 in GKCrypto_SignedInvite.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (uint64_t *)((char *)&v10 - v17);
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_Invite();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_SignedInvite();
  outlined init with copy of GKCrypto_Invite?((uint64_t *)(v22 + *(int *)(v7 + 28)), v25);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_Invite?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_Invite((uint64_t)v25, v21);
    lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_Invite(v21);
    }
    else
    {
      outlined destroy of GKCrypto_Invite(v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_SignedInvite.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int (*v26)(uint64_t *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  _DWORD *v50;
  _DWORD *v51;

  v43 = a1;
  v42 = a2;
  v51 = 0;
  v50 = 0;
  v28 = 0;
  v29 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD **)(v29 - 8);
  v31 = (v30[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v32 = (char *)&v12 - v31;
  v33 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v12 - v33;
  v35 = type metadata accessor for GKCrypto_Invite();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (uint64_t)&v12 - v37;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_Invite?, GKCrypto_Invite?));
  v40 = (*(_QWORD *)(*(_QWORD *)(v39 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (uint64_t *)((char *)&v12 - v40);
  v44 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v45 = (uint64_t *)((char *)&v12 - v44);
  v46 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v47 = (uint64_t *)((char *)&v12 - v46);
  v48 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v49 = (uint64_t *)((char *)&v12 - v48);
  v51 = v8;
  v50 = v9;
  if (*v8 != *v9)
    return 0;
  v24 = type metadata accessor for GKCrypto_SignedInvite();
  outlined init with copy of GKCrypto_Invite?((uint64_t *)(v43 + *(int *)(v24 + 28)), v49);
  outlined init with copy of GKCrypto_Invite?((uint64_t *)(v42 + *(int *)(v24 + 28)), v47);
  v25 = (uint64_t *)((char *)v41 + *(int *)(v39 + 48));
  outlined init with copy of GKCrypto_Invite?(v49, v41);
  outlined init with copy of GKCrypto_Invite?(v47, v25);
  v26 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48);
  if (v26(v41, 1, v35) == 1)
  {
    if (v26(v25, 1, v35) == 1)
    {
      outlined destroy of GKCrypto_Invite?((uint64_t)v41);
      v23 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_Invite?(v41, v45);
    if (v26(v25, 1, v35) != 1)
    {
      outlined init with take of GKCrypto_Invite((uint64_t)v25, v38);
      v22 = static GKCrypto_Invite.== infix(_:_:)((uint64_t)v45, v38);
      outlined destroy of GKCrypto_Invite(v38);
      outlined destroy of GKCrypto_Invite((uint64_t)v45);
      outlined destroy of GKCrypto_Invite?((uint64_t)v41);
      v23 = v22;
      goto LABEL_9;
    }
    outlined destroy of GKCrypto_Invite((uint64_t)v45);
  }
  outlined destroy of (GKCrypto_Invite?, GKCrypto_Invite?)((uint64_t)v41);
  v23 = 0;
LABEL_9:
  v21 = v23;
  outlined destroy of GKCrypto_Invite?((uint64_t)v47);
  outlined destroy of GKCrypto_Invite?((uint64_t)v49);
  if ((v21 & 1) != 0)
  {
    v18 = *(_QWORD *)(v43 + 8);
    v19 = *(_QWORD *)(v43 + 16);
    outlined copy of Data._Representation(v18, v19);
    outlined copy of Data._Representation(v18, v19);
    v16 = *(_QWORD *)(v42 + 8);
    v17 = *(_QWORD *)(v42 + 16);
    outlined copy of Data._Representation(v16, v17);
    outlined copy of Data._Representation(v16, v17);
    v20 = MEMORY[0x242633488](v18, v19, v16, v17);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    if ((v20 & 1) != 0)
    {
      v10 = v43 + *(int *)(v24 + 24);
      v13 = (void (*)(char *, uint64_t, uint64_t))v30[2];
      v13(v34, v10, v29);
      v13(v32, v42 + *(int *)(v24 + 24), v29);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14 = (void (*)(char *, uint64_t))v30[1];
      v14(v32, v29);
      v14(v34, v29);
      return (v15 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_SignedInvite.hashValue.getter()
{
  type metadata accessor for GKCrypto_SignedInvite();
  lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_SignedInvite@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SignedInvite.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_SignedInvite()
{
  return static GKCrypto_SignedInvite.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_SignedInvite()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_SignedInvite@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SignedInvite.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_SignedInvite(uint64_t a1)
{
  return GKCrypto_SignedInvite.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedInvite(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_SignedInvite.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedInvite;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedInvite(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_SignedInvite()
{
  return GKCrypto_SignedInvite.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_SignedInvite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_SignedInvite.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_SignedInvite()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_SignedInvite()
{
  lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_SignedInvite()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_SignedInvite@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_SignedInvite._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SignedInvite()
{
  lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SignedInvite()
{
  return GKCrypto_SignedInvite.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SignedInvite()
{
  lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SignedInvite(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SignedInvite(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_SignedInvite.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_RSVP.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_RSVP.protoMessageName;
}

uint64_t static GKCrypto_RSVP.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_RSVP.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_RSVP._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_RSVP._protobuf_nameMap);
}

uint64_t static GKCrypto_RSVP._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_RSVP._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_RSVP.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_RSVP.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_RSVP.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_RSVP.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_RSVP.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_RSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_RSVP.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char v76;
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;

  v70 = a1;
  v66 = a2;
  v67 = a3;
  v85 = 0;
  v84 = 0;
  v86 = a2;
  v71 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)v18 - v73;
  v85 = v4;
  v84 = v3;
  if (*v3)
  {
    v5 = v69;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v64 = v5;
    v65 = v5;
    if (v5)
    {
      v21 = v65;
      return result;
    }
    v63 = 0;
  }
  else
  {
    v63 = v69;
  }
  v60 = v63;
  v7 = *(_QWORD *)(v68 + 8);
  v8 = *(_BYTE *)(v68 + 16);
  v62 = &v82;
  v82 = v7;
  v83 = v8 & 1;
  v61 = &v80;
  v80 = 0;
  v81 = 1;
  lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v56 = v60;
  }
  else
  {
    v9 = *(_QWORD *)(v68 + 8);
    v10 = *(_BYTE *)(v68 + 16);
    v57 = &v75;
    v75 = v9;
    v76 = v10 & 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
    v11 = v60;
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v58 = v11;
    v59 = v11;
    if (v11)
    {
      v21 = v59;
      return result;
    }
    v56 = 0;
  }
  v50 = v56;
  v54 = *(_QWORD *)(v68 + 24);
  v53 = *(_QWORD *)(v68 + 32);
  outlined copy of Data._Representation(v54, v53);
  outlined copy of Data._Representation(v54, v53);
  v52 = v79;
  v79[0] = v54;
  v79[1] = v53;
  v51 = lazy protocol witness table accessor for type Data and conformance Data();
  v55 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v52);
  outlined consume of Data._Representation(v54, v53);
  if ((v55 & 1) != 0)
  {
    v45 = v50;
  }
  else
  {
    v46 = *(_QWORD *)(v68 + 24);
    v47 = *(_QWORD *)(v68 + 32);
    outlined copy of Data._Representation(v46, v47);
    v12 = v50;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v48 = v12;
    v49 = v12;
    if (v12)
    {
      v20 = v49;
      result = outlined consume of Data._Representation(v46, v47);
      v21 = v20;
      return result;
    }
    outlined consume of Data._Representation(v46, v47);
    v45 = v48;
  }
  v40 = v45;
  v43 = *(_QWORD *)(v68 + 40);
  v42 = *(_QWORD *)(v68 + 48);
  outlined copy of Data._Representation(v43, v42);
  outlined copy of Data._Representation(v43, v42);
  v41 = v78;
  v78[0] = v43;
  v78[1] = v42;
  v44 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v41);
  outlined consume of Data._Representation(v43, v42);
  if ((v44 & 1) != 0)
  {
    v35 = v40;
  }
  else
  {
    v36 = *(_QWORD *)(v68 + 40);
    v37 = *(_QWORD *)(v68 + 48);
    outlined copy of Data._Representation(v36, v37);
    v13 = v40;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v38 = v13;
    v39 = v13;
    if (v13)
    {
      v19 = v39;
      result = outlined consume of Data._Representation(v36, v37);
      v21 = v19;
      return result;
    }
    outlined consume of Data._Representation(v36, v37);
    v35 = v38;
  }
  v30 = v35;
  v33 = *(_QWORD *)(v68 + 56);
  v32 = *(_QWORD *)(v68 + 64);
  outlined copy of Data._Representation(v33, v32);
  outlined copy of Data._Representation(v33, v32);
  v31 = v77;
  v77[0] = v33;
  v77[1] = v32;
  v34 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v31);
  outlined consume of Data._Representation(v33, v32);
  if ((v34 & 1) != 0)
  {
    v25 = v30;
  }
  else
  {
    v26 = *(_QWORD *)(v68 + 56);
    v27 = *(_QWORD *)(v68 + 64);
    outlined copy of Data._Representation(v26, v27);
    v14 = v30;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v28 = v14;
    v29 = v14;
    if (v14)
    {
      v18[2] = v29;
      return outlined consume of Data._Representation(v26, v27);
    }
    outlined consume of Data._Representation(v26, v27);
    v25 = v28;
  }
  v15 = v74;
  v22 = v25;
  v16 = type metadata accessor for GKCrypto_RSVP();
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v15, v68 + *(int *)(v16 + 36), v71);
  v17 = v22;
  UnknownStorage.traverse<A>(visitor:)();
  v23 = v17;
  v24 = v17;
  if (v17)
    v18[1] = v24;
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v74, v71);
}

BOOL static GKCrypto_RSVP.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  _DWORD *v46;
  _DWORD *v47;

  v35 = a1;
  v34 = a2;
  v47 = 0;
  v46 = 0;
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD **)(v36 - 8);
  v38 = (v37[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v12 - v38;
  v40 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v12 - v40;
  v47 = v4;
  v46 = v5;
  if (*v4 == *v5)
  {
    v6 = *(_QWORD *)(v35 + 8);
    v7 = *(_BYTE *)(v35 + 16);
    v32 = &v44;
    v44 = v6;
    v45 = v7 & 1;
    v8 = *(_QWORD *)(v34 + 8);
    v9 = *(_BYTE *)(v34 + 16);
    v31 = &v42;
    v42 = v8;
    v43 = v9 & 1;
    lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      v28 = *(_QWORD *)(v35 + 24);
      v29 = *(_QWORD *)(v35 + 32);
      outlined copy of Data._Representation(v28, v29);
      outlined copy of Data._Representation(v28, v29);
      v26 = *(_QWORD *)(v34 + 24);
      v27 = *(_QWORD *)(v34 + 32);
      outlined copy of Data._Representation(v26, v27);
      outlined copy of Data._Representation(v26, v27);
      v30 = MEMORY[0x242633488](v28, v29, v26, v27);
      outlined consume of Data._Representation(v26, v27);
      outlined consume of Data._Representation(v28, v29);
      outlined consume of Data._Representation(v26, v27);
      outlined consume of Data._Representation(v28, v29);
      if ((v30 & 1) != 0)
      {
        v23 = *(_QWORD *)(v35 + 40);
        v24 = *(_QWORD *)(v35 + 48);
        outlined copy of Data._Representation(v23, v24);
        outlined copy of Data._Representation(v23, v24);
        v21 = *(_QWORD *)(v34 + 40);
        v22 = *(_QWORD *)(v34 + 48);
        outlined copy of Data._Representation(v21, v22);
        outlined copy of Data._Representation(v21, v22);
        v25 = MEMORY[0x242633488](v23, v24, v21, v22);
        outlined consume of Data._Representation(v21, v22);
        outlined consume of Data._Representation(v23, v24);
        outlined consume of Data._Representation(v21, v22);
        outlined consume of Data._Representation(v23, v24);
        if ((v25 & 1) != 0)
        {
          v18 = *(_QWORD *)(v35 + 56);
          v19 = *(_QWORD *)(v35 + 64);
          outlined copy of Data._Representation(v18, v19);
          outlined copy of Data._Representation(v18, v19);
          v16 = *(_QWORD *)(v34 + 56);
          v17 = *(_QWORD *)(v34 + 64);
          outlined copy of Data._Representation(v16, v17);
          outlined copy of Data._Representation(v16, v17);
          v20 = MEMORY[0x242633488](v18, v19, v16, v17);
          outlined consume of Data._Representation(v16, v17);
          outlined consume of Data._Representation(v18, v19);
          outlined consume of Data._Representation(v16, v17);
          outlined consume of Data._Representation(v18, v19);
          if ((v20 & 1) != 0)
          {
            v12 = type metadata accessor for GKCrypto_RSVP();
            v10 = v35 + *(int *)(v12 + 36);
            v13 = (void (*)(char *, uint64_t, uint64_t))v37[2];
            v13(v41, v10, v36);
            v13(v39, v34 + *(int *)(v12 + 36), v36);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
            v15 = dispatch thunk of static Equatable.== infix(_:_:)();
            v14 = (void (*)(char *, uint64_t))v37[1];
            v14(v39, v36);
            v14(v41, v36);
            return (v15 & 1) != 0;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_RSVP.hashValue.getter()
{
  type metadata accessor for GKCrypto_RSVP();
  lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_RSVP@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVP.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_RSVP()
{
  return static GKCrypto_RSVP.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_RSVP()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_RSVP@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVP.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_RSVP(uint64_t a1)
{
  return GKCrypto_RSVP.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVP(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_RSVP.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVP;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVP(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_RSVP()
{
  return GKCrypto_RSVP.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_RSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_RSVP.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_RSVP()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_RSVP()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_RSVP()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_RSVP@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_RSVP._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_RSVP()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVP()
{
  return GKCrypto_RSVP.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVP()
{
  lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVP(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVP(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_RSVP.== infix(_:_:)(a1, a2);
}

uint64_t GKCrypto_RSVP.Response._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_RSVP.Response._protobuf_nameMap);
}

uint64_t static GKCrypto_RSVP.Response._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_RSVP.Response._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_RSVP.Response@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_RSVP.Response._protobuf_nameMap.getter(a1);
}

uint64_t *GKCrypto_SignedRSVP.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_SignedRSVP.protoMessageName;
}

uint64_t static GKCrypto_SignedRSVP.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_SignedRSVP.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_SignedRSVP._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_SignedRSVP._protobuf_nameMap);
}

uint64_t static GKCrypto_SignedRSVP._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_SignedRSVP._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_SignedRSVP();
  type metadata accessor for GKCrypto_RSVP();
  lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_SignedRSVP.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD v40[2];
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v35 = a1;
  v31 = a2;
  v32 = a3;
  v42 = 0;
  v41 = 0;
  v43 = a2;
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v12 - v38;
  v42 = v4;
  v41 = v3;
  if (*v3)
  {
    v5 = v34;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v29 = v5;
    v30 = v5;
    if (v5)
    {
      v13 = v30;
      return result;
    }
    v28 = 0;
  }
  else
  {
    v28 = v34;
  }
  v7 = v28;
  result = closure #1 in GKCrypto_SignedRSVP.traverse<A>(visitor:)(v33, v35, v31, v32);
  v26 = v7;
  v27 = v7;
  if (v7)
  {
    v13 = v27;
    return result;
  }
  v24 = *(_QWORD *)(v33 + 8);
  v23 = *(_QWORD *)(v33 + 16);
  outlined copy of Data._Representation(v24, v23);
  outlined copy of Data._Representation(v24, v23);
  v22 = v40;
  v40[0] = v24;
  v40[1] = v23;
  lazy protocol witness table accessor for type Data and conformance Data();
  v25 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v22);
  outlined consume of Data._Representation(v24, v23);
  if ((v25 & 1) != 0)
  {
    v17 = v26;
  }
  else
  {
    v18 = *(_QWORD *)(v33 + 8);
    v19 = *(_QWORD *)(v33 + 16);
    outlined copy of Data._Representation(v18, v19);
    v8 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v12[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v9 = v39;
  v14 = v17;
  v10 = type metadata accessor for GKCrypto_SignedRSVP();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, v33 + *(int *)(v10 + 24), v36);
  v11 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v11;
  v16 = v11;
  if (v11)
    v12[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
}

uint64_t closure #1 in GKCrypto_SignedRSVP.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (_DWORD *)((char *)&v10 - v17);
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_RSVP();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined init with copy of GKCrypto_RSVP?((_DWORD *)(v22 + *(int *)(v7 + 28)), v25);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_RSVP?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_RSVP((uint64_t)v25, v21);
    lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_RSVP(v21);
    }
    else
    {
      outlined destroy of GKCrypto_RSVP(v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_SignedRSVP.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int (*v26)(_DWORD *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;

  v43 = a1;
  v42 = a2;
  v51 = 0;
  v50 = 0;
  v28 = 0;
  v29 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD **)(v29 - 8);
  v31 = (v30[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v32 = (char *)&v12 - v31;
  v33 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v12 - v33;
  v35 = type metadata accessor for GKCrypto_RSVP();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (uint64_t)&v12 - v37;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_RSVP?, GKCrypto_RSVP?));
  v40 = (*(_QWORD *)(*(_QWORD *)(v39 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (_DWORD *)((char *)&v12 - v40);
  v44 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v45 = (_DWORD *)((char *)&v12 - v44);
  v46 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v47 = (_DWORD *)((char *)&v12 - v46);
  v48 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v49 = (_DWORD *)((char *)&v12 - v48);
  v51 = v8;
  v50 = v9;
  if (*v8 != *v9)
    return 0;
  v24 = type metadata accessor for GKCrypto_SignedRSVP();
  outlined init with copy of GKCrypto_RSVP?((_DWORD *)(v43 + *(int *)(v24 + 28)), v49);
  outlined init with copy of GKCrypto_RSVP?((_DWORD *)(v42 + *(int *)(v24 + 28)), v47);
  v25 = (_DWORD *)((char *)v41 + *(int *)(v39 + 48));
  outlined init with copy of GKCrypto_RSVP?(v49, v41);
  outlined init with copy of GKCrypto_RSVP?(v47, v25);
  v26 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v36 + 48);
  if (v26(v41, 1, v35) == 1)
  {
    if (v26(v25, 1, v35) == 1)
    {
      outlined destroy of GKCrypto_RSVP?((uint64_t)v41);
      v23 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_RSVP?(v41, v45);
    if (v26(v25, 1, v35) != 1)
    {
      outlined init with take of GKCrypto_RSVP((uint64_t)v25, v38);
      v22 = static GKCrypto_RSVP.== infix(_:_:)((uint64_t)v45, v38);
      outlined destroy of GKCrypto_RSVP(v38);
      outlined destroy of GKCrypto_RSVP((uint64_t)v45);
      outlined destroy of GKCrypto_RSVP?((uint64_t)v41);
      v23 = v22;
      goto LABEL_9;
    }
    outlined destroy of GKCrypto_RSVP((uint64_t)v45);
  }
  outlined destroy of (GKCrypto_RSVP?, GKCrypto_RSVP?)((uint64_t)v41);
  v23 = 0;
LABEL_9:
  v21 = v23;
  outlined destroy of GKCrypto_RSVP?((uint64_t)v47);
  outlined destroy of GKCrypto_RSVP?((uint64_t)v49);
  if ((v21 & 1) != 0)
  {
    v18 = *(_QWORD *)(v43 + 8);
    v19 = *(_QWORD *)(v43 + 16);
    outlined copy of Data._Representation(v18, v19);
    outlined copy of Data._Representation(v18, v19);
    v16 = *(_QWORD *)(v42 + 8);
    v17 = *(_QWORD *)(v42 + 16);
    outlined copy of Data._Representation(v16, v17);
    outlined copy of Data._Representation(v16, v17);
    v20 = MEMORY[0x242633488](v18, v19, v16, v17);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    if ((v20 & 1) != 0)
    {
      v10 = v43 + *(int *)(v24 + 24);
      v13 = (void (*)(char *, uint64_t, uint64_t))v30[2];
      v13(v34, v10, v29);
      v13(v32, v42 + *(int *)(v24 + 24), v29);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14 = (void (*)(char *, uint64_t))v30[1];
      v14(v32, v29);
      v14(v34, v29);
      return (v15 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_SignedRSVP.hashValue.getter()
{
  type metadata accessor for GKCrypto_SignedRSVP();
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_SignedRSVP@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SignedRSVP.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_SignedRSVP()
{
  return static GKCrypto_SignedRSVP.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_SignedRSVP()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_SignedRSVP@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SignedRSVP.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_SignedRSVP(uint64_t a1)
{
  return GKCrypto_SignedRSVP.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedRSVP(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_SignedRSVP.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedRSVP;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_SignedRSVP(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_SignedRSVP()
{
  return GKCrypto_SignedRSVP.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_SignedRSVP.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_SignedRSVP()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_SignedRSVP()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_SignedRSVP()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_SignedRSVP@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_SignedRSVP._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SignedRSVP()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SignedRSVP()
{
  return GKCrypto_SignedRSVP.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SignedRSVP()
{
  lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SignedRSVP(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_SignedRSVP.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_RSVPResponse.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_RSVPResponse.protoMessageName;
}

uint64_t static GKCrypto_RSVPResponse.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_RSVPResponse.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_RSVPResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_RSVPResponse._protobuf_nameMap);
}

uint64_t static GKCrypto_RSVPResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_RSVPResponse._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_RSVPResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v42 = a2;
  v43 = a3;
  v54 = 0;
  v53 = 0;
  v55 = a2;
  v47 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)v12 - v49;
  v54 = v4;
  v53 = v3;
  if (*v3)
  {
    v5 = v45;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v40 = v5;
    v41 = v5;
    if (v5)
    {
      v14 = v41;
      return result;
    }
    v39 = 0;
  }
  else
  {
    v39 = v45;
  }
  v33 = v39;
  v37 = *((_QWORD *)v44 + 1);
  v36 = *((_QWORD *)v44 + 2);
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v52;
  v52[0] = v37;
  v52[1] = v36;
  v34 = lazy protocol witness table accessor for type Data and conformance Data();
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v28 = v33;
  }
  else
  {
    v29 = *((_QWORD *)v44 + 1);
    v30 = *((_QWORD *)v44 + 2);
    outlined copy of Data._Representation(v29, v30);
    v7 = v33;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v31 = v7;
    v32 = v7;
    if (v7)
    {
      v13 = v32;
      result = outlined consume of Data._Representation(v29, v30);
      v14 = v13;
      return result;
    }
    outlined consume of Data._Representation(v29, v30);
    v28 = v31;
  }
  v23 = v28;
  v26 = *((_QWORD *)v44 + 3);
  v25 = *((_QWORD *)v44 + 4);
  outlined copy of Data._Representation(v26, v25);
  outlined copy of Data._Representation(v26, v25);
  v24 = v51;
  v51[0] = v26;
  v51[1] = v25;
  v27 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v24);
  outlined consume of Data._Representation(v26, v25);
  if ((v27 & 1) != 0)
  {
    v18 = v23;
  }
  else
  {
    v19 = *((_QWORD *)v44 + 3);
    v20 = *((_QWORD *)v44 + 4);
    outlined copy of Data._Representation(v19, v20);
    v8 = v23;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v21 = v8;
    v22 = v8;
    if (v8)
    {
      v12[2] = v22;
      return outlined consume of Data._Representation(v19, v20);
    }
    outlined consume of Data._Representation(v19, v20);
    v18 = v21;
  }
  v9 = v50;
  v15 = v18;
  v10 = type metadata accessor for GKCrypto_RSVPResponse();
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, &v44[*(int *)(v10 + 28)], v47);
  v11 = v15;
  UnknownStorage.traverse<A>(visitor:)();
  v16 = v11;
  v17 = v11;
  if (v11)
    v12[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v47);
}

BOOL static GKCrypto_RSVPResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;

  v24 = a1;
  v23 = a2;
  v32 = 0;
  v31 = 0;
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD **)(v25 - 8);
  v27 = (v26[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v8 - v27;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v8 - v29;
  v32 = v4;
  v31 = v5;
  if (*v4 == *v5)
  {
    v19 = v24[1];
    v20 = v24[2];
    outlined copy of Data._Representation(v19, v20);
    outlined copy of Data._Representation(v19, v20);
    v17 = *((_QWORD *)v23 + 1);
    v18 = *((_QWORD *)v23 + 2);
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v21 = MEMORY[0x242633488](v19, v20, v17, v18);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    if ((v21 & 1) != 0)
    {
      v14 = v24[3];
      v15 = v24[4];
      outlined copy of Data._Representation(v14, v15);
      outlined copy of Data._Representation(v14, v15);
      v12 = *((_QWORD *)v23 + 3);
      v13 = *((_QWORD *)v23 + 4);
      outlined copy of Data._Representation(v12, v13);
      outlined copy of Data._Representation(v12, v13);
      v16 = MEMORY[0x242633488](v14, v15, v12, v13);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      if ((v16 & 1) != 0)
      {
        v8 = type metadata accessor for GKCrypto_RSVPResponse();
        v6 = (char *)v24 + *(int *)(v8 + 28);
        v9 = (void (*)(char *, char *, uint64_t))v26[2];
        v9(v30, v6, v25);
        v9(v28, &v23[*(int *)(v8 + 28)], v25);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v11 = dispatch thunk of static Equatable.== infix(_:_:)();
        v10 = (void (*)(char *, uint64_t))v26[1];
        v10(v28, v25);
        v10(v30, v25);
        return (v11 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_RSVPResponse.hashValue.getter()
{
  type metadata accessor for GKCrypto_RSVPResponse();
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_RSVPResponse@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVPResponse.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_RSVPResponse()
{
  return static GKCrypto_RSVPResponse.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_RSVPResponse()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_RSVPResponse@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVPResponse.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_RSVPResponse(uint64_t a1)
{
  return GKCrypto_RSVPResponse.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPResponse(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_RSVPResponse.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPResponse;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPResponse(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_RSVPResponse()
{
  return GKCrypto_RSVPResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_RSVPResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_RSVPResponse()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_RSVPResponse()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_RSVPResponse()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_RSVPResponse@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_RSVPResponse._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_RSVPResponse()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVPResponse()
{
  return GKCrypto_RSVPResponse.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVPResponse()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVPResponse(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVPResponse(_QWORD *a1, char *a2)
{
  return static GKCrypto_RSVPResponse.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_HPKEOneShotCipherText.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_HPKEOneShotCipherText.protoMessageName;
}

uint64_t static GKCrypto_HPKEOneShotCipherText.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_HPKEOneShotCipherText.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_HPKEOneShotCipherText._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_HPKEOneShotCipherText._protobuf_nameMap);
}

uint64_t static GKCrypto_HPKEOneShotCipherText._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_HPKEOneShotCipherText._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_HPKEOneShotCipherText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v32 = a2;
  v33 = a3;
  v49 = 0;
  v48 = 0;
  v50 = a2;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v11 - v39;
  v49 = v4;
  v48 = v3;
  v44 = *v3;
  v43 = v3[1];
  outlined copy of Data._Representation(v44, v43);
  outlined copy of Data._Representation(v44, v43);
  v42 = v47;
  v47[0] = v44;
  v47[1] = v43;
  v41 = lazy protocol witness table accessor for type Data and conformance Data();
  v45 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v42);
  outlined consume of Data._Representation(v44, v43);
  if ((v45 & 1) != 0)
  {
    v27 = v35;
  }
  else
  {
    v28 = *v34;
    v29 = v34[1];
    outlined copy of Data._Representation(v28, v29);
    v5 = v35;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v30 = v5;
    v31 = v5;
    if (v5)
    {
      v12 = v31;
      result = outlined consume of Data._Representation(v28, v29);
      v13 = v12;
      return result;
    }
    outlined consume of Data._Representation(v28, v29);
    v27 = v30;
  }
  v22 = v27;
  v25 = v34[2];
  v24 = v34[3];
  outlined copy of Data._Representation(v25, v24);
  outlined copy of Data._Representation(v25, v24);
  v23 = v46;
  v46[0] = v25;
  v46[1] = v24;
  v26 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v23);
  outlined consume of Data._Representation(v25, v24);
  if ((v26 & 1) != 0)
  {
    v17 = v22;
  }
  else
  {
    v18 = v34[2];
    v19 = v34[3];
    outlined copy of Data._Representation(v18, v19);
    v6 = v22;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v6;
    v21 = v6;
    if (v6)
    {
      v11[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v7 = v40;
  v14 = v17;
  v8 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v7, (char *)v34 + *(int *)(v8 + 24), v37);
  v9 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v9;
  v16 = v9;
  if (v9)
    v11[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
}

BOOL static GKCrypto_HPKEOneShotCipherText.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v17 = a1;
  v25 = a2;
  v32 = 0;
  v31 = 0;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD **)(v18 - 8);
  v21 = v19[8];
  v20 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v6 - v20;
  v23 = v20;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v20);
  v24 = (char *)&v6 - v23;
  v32 = v2;
  v31 = v3;
  v28 = *v2;
  v29 = v2[1];
  outlined copy of Data._Representation(v28, v29);
  outlined copy of Data._Representation(v28, v29);
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  outlined copy of Data._Representation(v26, v27);
  v30 = MEMORY[0x242633488](v28, v29, v26, v27);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  if ((v30 & 1) != 0)
  {
    v13 = *(_QWORD *)(v17 + 16);
    v14 = *(_QWORD *)(v17 + 24);
    outlined copy of Data._Representation(v13, v14);
    outlined copy of Data._Representation(v13, v14);
    v11 = v25[2];
    v12 = v25[3];
    outlined copy of Data._Representation(v11, v12);
    outlined copy of Data._Representation(v11, v12);
    v15 = MEMORY[0x242633488](v13, v14, v11, v12);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    if ((v15 & 1) != 0)
    {
      v7 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
      v4 = v17 + *(int *)(v7 + 24);
      v8 = (void (*)(char *, uint64_t, uint64_t))v19[2];
      v8(v24, v4, v18);
      v8(v22, (uint64_t)v25 + *(int *)(v7 + 24), v18);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v10 = dispatch thunk of static Equatable.== infix(_:_:)();
      v9 = (void (*)(char *, uint64_t))v19[1];
      v9(v22, v18);
      v9(v24, v18);
      return (v10 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_HPKEOneShotCipherText.hashValue.getter()
{
  type metadata accessor for GKCrypto_HPKEOneShotCipherText();
  lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_HPKEOneShotCipherText@<X0>(char *a1@<X8>)
{
  return GKCrypto_HPKEOneShotCipherText.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_HPKEOneShotCipherText()
{
  return static GKCrypto_HPKEOneShotCipherText.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_HPKEOneShotCipherText()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_HPKEOneShotCipherText@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_HPKEOneShotCipherText.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_HPKEOneShotCipherText(uint64_t a1)
{
  return GKCrypto_HPKEOneShotCipherText.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_HPKEOneShotCipherText(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_HPKEOneShotCipherText.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_HPKEOneShotCipherText;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_HPKEOneShotCipherText(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_HPKEOneShotCipherText()
{
  return GKCrypto_HPKEOneShotCipherText.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_HPKEOneShotCipherText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_HPKEOneShotCipherText.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_HPKEOneShotCipherText()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_HPKEOneShotCipherText()
{
  lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_HPKEOneShotCipherText()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_HPKEOneShotCipherText@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_HPKEOneShotCipherText._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_HPKEOneShotCipherText()
{
  lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_HPKEOneShotCipherText()
{
  return GKCrypto_HPKEOneShotCipherText.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_HPKEOneShotCipherText()
{
  lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_HPKEOneShotCipherText(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_HPKEOneShotCipherText(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_HPKEOneShotCipherText.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_SeedBlob.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_SeedBlob.protoMessageName;
}

uint64_t static GKCrypto_SeedBlob.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_SeedBlob.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_SeedBlob._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_SeedBlob._protobuf_nameMap);
}

uint64_t static GKCrypto_SeedBlob._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_SeedBlob._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #6 in GKCrypto_SeedBlob.decodeMessage<A>(decoder:)()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t GKCrypto_SeedBlob.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;

  v75 = a1;
  v71 = a2;
  v72 = a3;
  v90 = 0;
  v89 = 0;
  v91 = a2;
  v76 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v76 - 8);
  v78 = (*(_QWORD *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v75);
  v79 = (char *)v19 - v78;
  v90 = v4;
  v89 = v3;
  if (*v3)
  {
    v5 = v74;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v69 = v5;
    v70 = v5;
    if (v5)
    {
      v22 = v70;
      return result;
    }
    v68 = 0;
  }
  else
  {
    v68 = v74;
  }
  v62 = v68;
  v66 = *(_QWORD *)(v73 + 8);
  v65 = *(_QWORD *)(v73 + 16);
  outlined copy of Data._Representation(v66, v65);
  outlined copy of Data._Representation(v66, v65);
  v64 = v88;
  v88[0] = v66;
  v88[1] = v65;
  v63 = lazy protocol witness table accessor for type Data and conformance Data();
  v67 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v64);
  outlined consume of Data._Representation(v66, v65);
  if ((v67 & 1) != 0)
  {
    v57 = v62;
  }
  else
  {
    v58 = *(_QWORD *)(v73 + 8);
    v59 = *(_QWORD *)(v73 + 16);
    outlined copy of Data._Representation(v58, v59);
    v7 = v62;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v60 = v7;
    v61 = v7;
    if (v7)
    {
      v21 = v61;
      result = outlined consume of Data._Representation(v58, v59);
      v22 = v21;
      return result;
    }
    outlined consume of Data._Representation(v58, v59);
    v57 = v60;
  }
  v52 = v57;
  v55 = *(_QWORD *)(v73 + 24);
  v54 = *(_QWORD *)(v73 + 32);
  outlined copy of Data._Representation(v55, v54);
  outlined copy of Data._Representation(v55, v54);
  v53 = v87;
  v87[0] = v55;
  v87[1] = v54;
  v56 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v53);
  outlined consume of Data._Representation(v55, v54);
  if ((v56 & 1) != 0)
  {
    v47 = v52;
  }
  else
  {
    v48 = *(_QWORD *)(v73 + 24);
    v49 = *(_QWORD *)(v73 + 32);
    outlined copy of Data._Representation(v48, v49);
    v8 = v52;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v50 = v8;
    v51 = v8;
    if (v8)
    {
      v20 = v51;
      result = outlined consume of Data._Representation(v48, v49);
      v22 = v20;
      return result;
    }
    outlined consume of Data._Representation(v48, v49);
    v47 = v50;
  }
  v42 = v47;
  v45 = *(_QWORD *)(v73 + 40);
  v44 = *(_QWORD *)(v73 + 48);
  outlined copy of Data._Representation(v45, v44);
  outlined copy of Data._Representation(v45, v44);
  v43 = v86;
  v86[0] = v45;
  v86[1] = v44;
  v46 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v43);
  outlined consume of Data._Representation(v45, v44);
  if ((v46 & 1) != 0)
  {
    v37 = v42;
  }
  else
  {
    v38 = *(_QWORD *)(v73 + 40);
    v39 = *(_QWORD *)(v73 + 48);
    outlined copy of Data._Representation(v38, v39);
    v9 = v42;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v40 = v9;
    v41 = v9;
    if (v9)
    {
      v19[2] = v41;
      return outlined consume of Data._Representation(v38, v39);
    }
    outlined consume of Data._Representation(v38, v39);
    v37 = v40;
  }
  v36 = v37;
  if (*(_DWORD *)(v73 + 56))
  {
    v10 = v36;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v34 = v10;
    v35 = v10;
    if (v10)
      return result;
    v33 = 0;
  }
  else
  {
    v33 = v36;
  }
  v30 = v33;
  v11 = *(_QWORD *)(v73 + 64);
  v12 = *(_BYTE *)(v73 + 72);
  v32 = &v84;
  v84 = v11;
  v85 = v12 & 1;
  v31 = &v82;
  v82 = 0;
  v83 = 1;
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v26 = v30;
  }
  else
  {
    v13 = *(_QWORD *)(v73 + 64);
    v14 = *(_BYTE *)(v73 + 72);
    v27 = &v80;
    v80 = v13;
    v81 = v14 & 1;
    lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
    v15 = v30;
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v28 = v15;
    v29 = v15;
    if (v15)
      return result;
    v26 = 0;
  }
  v16 = v79;
  v23 = v26;
  v17 = type metadata accessor for GKCrypto_SeedBlob();
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v16, v73 + *(int *)(v17 + 40), v76);
  v18 = v23;
  UnknownStorage.traverse<A>(visitor:)();
  v24 = v18;
  v25 = v18;
  if (v18)
    v19[1] = v25;
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v79, v76);
}

BOOL static GKCrypto_SeedBlob.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  _DWORD *v47;
  _DWORD *v48;

  v36 = a1;
  v35 = a2;
  v48 = 0;
  v47 = 0;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD **)(v37 - 8);
  v39 = (v38[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v12 - v39;
  v41 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v42 = (char *)&v12 - v41;
  v48 = v4;
  v47 = v5;
  if (*v4 == *v5)
  {
    v31 = *(_QWORD *)(v36 + 8);
    v32 = *(_QWORD *)(v36 + 16);
    outlined copy of Data._Representation(v31, v32);
    outlined copy of Data._Representation(v31, v32);
    v29 = *(_QWORD *)(v35 + 8);
    v30 = *(_QWORD *)(v35 + 16);
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v29, v30);
    v33 = MEMORY[0x242633488](v31, v32, v29, v30);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v31, v32);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v31, v32);
    if ((v33 & 1) != 0)
    {
      v26 = *(_QWORD *)(v36 + 24);
      v27 = *(_QWORD *)(v36 + 32);
      outlined copy of Data._Representation(v26, v27);
      outlined copy of Data._Representation(v26, v27);
      v24 = *(_QWORD *)(v35 + 24);
      v25 = *(_QWORD *)(v35 + 32);
      outlined copy of Data._Representation(v24, v25);
      outlined copy of Data._Representation(v24, v25);
      v28 = MEMORY[0x242633488](v26, v27, v24, v25);
      outlined consume of Data._Representation(v24, v25);
      outlined consume of Data._Representation(v26, v27);
      outlined consume of Data._Representation(v24, v25);
      outlined consume of Data._Representation(v26, v27);
      if ((v28 & 1) != 0)
      {
        v21 = *(_QWORD *)(v36 + 40);
        v22 = *(_QWORD *)(v36 + 48);
        outlined copy of Data._Representation(v21, v22);
        outlined copy of Data._Representation(v21, v22);
        v19 = *(_QWORD *)(v35 + 40);
        v20 = *(_QWORD *)(v35 + 48);
        outlined copy of Data._Representation(v19, v20);
        outlined copy of Data._Representation(v19, v20);
        v23 = MEMORY[0x242633488](v21, v22, v19, v20);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v21, v22);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v21, v22);
        if ((v23 & 1) != 0)
        {
          if (*(_DWORD *)(v36 + 56) == *(_DWORD *)(v35 + 56))
          {
            v6 = *(_QWORD *)(v36 + 64);
            v7 = *(_BYTE *)(v36 + 72);
            v18 = &v45;
            v45 = v6;
            v46 = v7 & 1;
            v8 = *(_QWORD *)(v35 + 64);
            v9 = *(_BYTE *)(v35 + 72);
            v17 = &v43;
            v43 = v8;
            v44 = v9 & 1;
            lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
            if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
            {
              v13 = type metadata accessor for GKCrypto_SeedBlob();
              v10 = v36 + *(int *)(v13 + 40);
              v14 = (void (*)(char *, uint64_t, uint64_t))v38[2];
              v14(v42, v10, v37);
              v14(v40, v35 + *(int *)(v13 + 40), v37);
              lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
              v16 = dispatch thunk of static Equatable.== infix(_:_:)();
              v15 = (void (*)(char *, uint64_t))v38[1];
              v15(v40, v37);
              v15(v42, v37);
              return (v16 & 1) != 0;
            }
            else
            {
              return 0;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_SeedBlob.hashValue.getter()
{
  type metadata accessor for GKCrypto_SeedBlob();
  lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_SeedBlob@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SeedBlob.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_SeedBlob()
{
  return static GKCrypto_SeedBlob.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_SeedBlob()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_SeedBlob@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SeedBlob.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_SeedBlob(uint64_t a1)
{
  return GKCrypto_SeedBlob.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlob(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_SeedBlob.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlob;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlob(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_SeedBlob()
{
  return GKCrypto_SeedBlob.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_SeedBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_SeedBlob.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_SeedBlob()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_SeedBlob()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_SeedBlob()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_SeedBlob@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_SeedBlob._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SeedBlob()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SeedBlob()
{
  return GKCrypto_SeedBlob.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SeedBlob()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SeedBlob(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SeedBlob(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_SeedBlob.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAuthenticatedCiphertext.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAuthenticatedCiphertext.protoMessageName;
}

uint64_t static GKCrypto_GroupAuthenticatedCiphertext.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAuthenticatedCiphertext.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)()
{
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD v40[2];
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v35 = a1;
  v31 = a2;
  v32 = a3;
  v42 = 0;
  v41 = 0;
  v43 = a2;
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v12 - v38;
  v42 = v4;
  v41 = v3;
  if (*v3)
  {
    v5 = v34;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v29 = v5;
    v30 = v5;
    if (v5)
    {
      v13 = v30;
      return result;
    }
    v28 = 0;
  }
  else
  {
    v28 = v34;
  }
  v7 = v28;
  result = closure #1 in GKCrypto_GroupAuthenticatedCiphertext.traverse<A>(visitor:)(v33, v35, v31, v32);
  v26 = v7;
  v27 = v7;
  if (v7)
  {
    v13 = v27;
    return result;
  }
  v24 = *(_QWORD *)(v33 + 8);
  v23 = *(_QWORD *)(v33 + 16);
  outlined copy of Data._Representation(v24, v23);
  outlined copy of Data._Representation(v24, v23);
  v22 = v40;
  v40[0] = v24;
  v40[1] = v23;
  lazy protocol witness table accessor for type Data and conformance Data();
  v25 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v22);
  outlined consume of Data._Representation(v24, v23);
  if ((v25 & 1) != 0)
  {
    v17 = v26;
  }
  else
  {
    v18 = *(_QWORD *)(v33 + 8);
    v19 = *(_QWORD *)(v33 + 16);
    outlined copy of Data._Representation(v18, v19);
    v8 = v26;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v12[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v9 = v39;
  v14 = v17;
  v10 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, v33 + *(int *)(v10 + 24), v36);
  v11 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v11;
  v16 = v11;
  if (v11)
    v12[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v39, v36);
}

uint64_t closure #1 in GKCrypto_GroupAuthenticatedCiphertext.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v22 = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v29 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
  v17 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (_DWORD *)((char *)&v10 - v17);
  v19 = 0;
  v24 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v23 = *(_QWORD *)(v24 - 8);
  v20 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t)&v10 - v20;
  v28 = (char *)&v10 - v20;
  v27 = v5;
  v26 = v6;
  v7 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?((_DWORD *)(v22 + *(int *)(v7 + 28)), v25);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    result = outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v25);
    v13 = v16;
  }
  else
  {
    outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v25, v21);
    lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
    v9 = v16;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    v11 = v9;
    v12 = v9;
    if (v9)
    {
      v10 = v12;
      return outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(v21);
    }
    else
    {
      outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(v21);
      result = v11;
      v13 = v11;
    }
  }
  return result;
}

BOOL static GKCrypto_GroupAuthenticatedCiphertext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int (*v26)(_DWORD *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  _DWORD *v47;
  unint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;

  v43 = a1;
  v42 = a2;
  v51 = 0;
  v50 = 0;
  v28 = 0;
  v29 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD **)(v29 - 8);
  v31 = (v30[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v32 = (char *)&v12 - v31;
  v33 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v12 - v33;
  v35 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (uint64_t)&v12 - v37;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupAuthenticatedCiphertext.Context?, GKCrypto_GroupAuthenticatedCiphertext.Context?));
  v40 = (*(_QWORD *)(*(_QWORD *)(v39 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (_DWORD *)((char *)&v12 - v40);
  v44 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v45 = (_DWORD *)((char *)&v12 - v44);
  v46 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v47 = (_DWORD *)((char *)&v12 - v46);
  v48 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v49 = (_DWORD *)((char *)&v12 - v48);
  v51 = v8;
  v50 = v9;
  if (*v8 != *v9)
    return 0;
  v24 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?((_DWORD *)(v43 + *(int *)(v24 + 28)), v49);
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?((_DWORD *)(v42 + *(int *)(v24 + 28)), v47);
  v25 = (_DWORD *)((char *)v41 + *(int *)(v39 + 48));
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?(v49, v41);
  outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?(v47, v25);
  v26 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v36 + 48);
  if (v26(v41, 1, v35) == 1)
  {
    if (v26(v25, 1, v35) == 1)
    {
      outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v41);
      v23 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext.Context?(v41, v45);
    if (v26(v25, 1, v35) != 1)
    {
      outlined init with take of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v25, v38);
      v22 = static GKCrypto_GroupAuthenticatedCiphertext.Context.== infix(_:_:)((uint64_t)v45, v38);
      outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(v38);
      outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v45);
      outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v41);
      v23 = v22;
      goto LABEL_9;
    }
    outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context((uint64_t)v45);
  }
  outlined destroy of (GKCrypto_GroupAuthenticatedCiphertext.Context?, GKCrypto_GroupAuthenticatedCiphertext.Context?)((uint64_t)v41);
  v23 = 0;
LABEL_9:
  v21 = v23;
  outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v47);
  outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context?((uint64_t)v49);
  if ((v21 & 1) != 0)
  {
    v18 = *(_QWORD *)(v43 + 8);
    v19 = *(_QWORD *)(v43 + 16);
    outlined copy of Data._Representation(v18, v19);
    outlined copy of Data._Representation(v18, v19);
    v16 = *(_QWORD *)(v42 + 8);
    v17 = *(_QWORD *)(v42 + 16);
    outlined copy of Data._Representation(v16, v17);
    outlined copy of Data._Representation(v16, v17);
    v20 = MEMORY[0x242633488](v18, v19, v16, v17);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v16, v17);
    outlined consume of Data._Representation(v18, v19);
    if ((v20 & 1) != 0)
    {
      v10 = v43 + *(int *)(v24 + 24);
      v13 = (void (*)(char *, uint64_t, uint64_t))v30[2];
      v13(v34, v10, v29);
      v13(v32, v42 + *(int *)(v24 + 24), v29);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14 = (void (*)(char *, uint64_t))v30[1];
      v14(v32, v29);
      v14(v34, v29);
      return (v15 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupAuthenticatedCiphertext@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAuthenticatedCiphertext.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return static GKCrypto_GroupAuthenticatedCiphertext.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAuthenticatedCiphertext@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAuthenticatedCiphertext.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1)
{
  return GKCrypto_GroupAuthenticatedCiphertext.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAuthenticatedCiphertext.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return GKCrypto_GroupAuthenticatedCiphertext.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAuthenticatedCiphertext.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAuthenticatedCiphertext@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAuthenticatedCiphertext._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  return GKCrypto_GroupAuthenticatedCiphertext.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAuthenticatedCiphertext(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_GroupAuthenticatedCiphertext.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName;
}

uint64_t static GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  _QWORD v55[2];
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;

  v44 = a1;
  v40 = a2;
  v41 = a3;
  v57 = 0;
  v56 = 0;
  v58 = a2;
  v45 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v48 = (char *)v16 - v47;
  v57 = v4;
  v56 = v3;
  if (*v3)
  {
    v5 = v43;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v38 = v5;
    v39 = v5;
    if (v5)
    {
      v16[2] = v39;
      return result;
    }
    v37 = 0;
  }
  else
  {
    v37 = v43;
  }
  v32 = v37;
  v35 = *(_QWORD *)(v42 + 8);
  v34 = *(_QWORD *)(v42 + 16);
  outlined copy of Data._Representation(v35, v34);
  outlined copy of Data._Representation(v35, v34);
  v33 = v55;
  v55[0] = v35;
  v55[1] = v34;
  lazy protocol witness table accessor for type Data and conformance Data();
  v36 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v33);
  outlined consume of Data._Representation(v35, v34);
  if ((v36 & 1) != 0)
  {
    v27 = v32;
  }
  else
  {
    v28 = *(_QWORD *)(v42 + 8);
    v29 = *(_QWORD *)(v42 + 16);
    outlined copy of Data._Representation(v28, v29);
    v7 = v32;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v30 = v7;
    v31 = v7;
    if (v7)
    {
      v16[1] = v31;
      return outlined consume of Data._Representation(v28, v29);
    }
    outlined consume of Data._Representation(v28, v29);
    v27 = v30;
  }
  v24 = v27;
  v8 = *(_QWORD *)(v42 + 24);
  v9 = *(_BYTE *)(v42 + 32);
  v26 = &v53;
  v53 = v8;
  v54 = v9 & 1;
  v25 = &v51;
  v51 = 0;
  v52 = 1;
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v20 = v24;
  }
  else
  {
    v10 = *(_QWORD *)(v42 + 24);
    v11 = *(_BYTE *)(v42 + 32);
    v21 = &v49;
    v49 = v10;
    v50 = v11 & 1;
    lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
    v12 = v24;
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v22 = v12;
    v23 = v12;
    if (v12)
      return result;
    v20 = 0;
  }
  v13 = v48;
  v17 = v20;
  v14 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v13, v42 + *(int *)(v14 + 28), v45);
  v15 = v17;
  UnknownStorage.traverse<A>(visitor:)();
  v18 = v15;
  v19 = v15;
  if (v15)
    v16[0] = v19;
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v48, v45);
}

BOOL static GKCrypto_GroupAuthenticatedCiphertext.Context.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _DWORD *v37;
  _DWORD *v38;

  v26 = a1;
  v25 = a2;
  v38 = 0;
  v37 = 0;
  v27 = type metadata accessor for UnknownStorage();
  v28 = *(_QWORD **)(v27 - 8);
  v29 = (v28[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v12 - v29;
  v31 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v12 - v31;
  v38 = v4;
  v37 = v5;
  if (*v4 == *v5)
  {
    v21 = *(_QWORD *)(v26 + 8);
    v22 = *(_QWORD *)(v26 + 16);
    outlined copy of Data._Representation(v21, v22);
    outlined copy of Data._Representation(v21, v22);
    v19 = *(_QWORD *)(v25 + 8);
    v20 = *(_QWORD *)(v25 + 16);
    outlined copy of Data._Representation(v19, v20);
    outlined copy of Data._Representation(v19, v20);
    v23 = MEMORY[0x242633488](v21, v22, v19, v20);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v21, v22);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v21, v22);
    if ((v23 & 1) != 0)
    {
      v6 = *(_QWORD *)(v26 + 24);
      v7 = *(_BYTE *)(v26 + 32);
      v18 = &v35;
      v35 = v6;
      v36 = v7 & 1;
      v8 = *(_QWORD *)(v25 + 24);
      v9 = *(_BYTE *)(v25 + 32);
      v17 = &v33;
      v33 = v8;
      v34 = v9 & 1;
      lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        v13 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
        v10 = v26 + *(int *)(v13 + 28);
        v14 = (void (*)(char *, uint64_t, uint64_t))v28[2];
        v14(v32, v10, v27);
        v14(v30, v25 + *(int *)(v13 + 28), v27);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v16 = dispatch thunk of static Equatable.== infix(_:_:)();
        v15 = (void (*)(char *, uint64_t))v28[1];
        v15(v30, v27);
        v15(v32, v27);
        return (v16 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAuthenticatedCiphertext.Context.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupAuthenticatedCiphertext.Context@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return static GKCrypto_GroupAuthenticatedCiphertext.Context.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1)
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAuthenticatedCiphertext.Context.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAuthenticatedCiphertext.Context._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return GKCrypto_GroupAuthenticatedCiphertext.Context.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_GroupAuthenticatedCiphertext.Context.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_AdminSeed.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_AdminSeed.protoMessageName;
}

uint64_t static GKCrypto_AdminSeed.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_AdminSeed.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_AdminSeed._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_AdminSeed._protobuf_nameMap);
}

uint64_t static GKCrypto_AdminSeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_AdminSeed._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_AdminSeed.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    if (result == 1)
    {
      closure #1 in GKCrypto_AdminSeed.decodeMessage<A>(decoder:)();
    }
    else if (result == 2)
    {
      closure #2 in GKCrypto_AdminSeed.decodeMessage<A>(decoder:)();
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_AdminSeed.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #2 in GKCrypto_AdminSeed.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_AdminSeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[2];
  _QWORD v47[2];
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;

  v36 = a1;
  v32 = a2;
  v33 = a3;
  v49 = 0;
  v48 = 0;
  v50 = a2;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v11 - v39;
  v49 = v4;
  v48 = v3;
  v44 = *v3;
  v43 = v3[1];
  outlined copy of Data._Representation(v44, v43);
  outlined copy of Data._Representation(v44, v43);
  v42 = v47;
  v47[0] = v44;
  v47[1] = v43;
  v41 = lazy protocol witness table accessor for type Data and conformance Data();
  v45 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v42);
  outlined consume of Data._Representation(v44, v43);
  if ((v45 & 1) != 0)
  {
    v27 = v35;
  }
  else
  {
    v28 = *v34;
    v29 = v34[1];
    outlined copy of Data._Representation(v28, v29);
    v5 = v35;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v30 = v5;
    v31 = v5;
    if (v5)
    {
      v12 = v31;
      result = outlined consume of Data._Representation(v28, v29);
      v13 = v12;
      return result;
    }
    outlined consume of Data._Representation(v28, v29);
    v27 = v30;
  }
  v22 = v27;
  v25 = v34[2];
  v24 = v34[3];
  outlined copy of Data._Representation(v25, v24);
  outlined copy of Data._Representation(v25, v24);
  v23 = v46;
  v46[0] = v25;
  v46[1] = v24;
  v26 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v23);
  outlined consume of Data._Representation(v25, v24);
  if ((v26 & 1) != 0)
  {
    v17 = v22;
  }
  else
  {
    v18 = v34[2];
    v19 = v34[3];
    outlined copy of Data._Representation(v18, v19);
    v6 = v22;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v20 = v6;
    v21 = v6;
    if (v6)
    {
      v11[2] = v21;
      return outlined consume of Data._Representation(v18, v19);
    }
    outlined consume of Data._Representation(v18, v19);
    v17 = v20;
  }
  v7 = v40;
  v14 = v17;
  v8 = type metadata accessor for GKCrypto_AdminSeed();
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v7, (char *)v34 + *(int *)(v8 + 24), v37);
  v9 = v14;
  UnknownStorage.traverse<A>(visitor:)();
  v15 = v9;
  v16 = v9;
  if (v9)
    v11[1] = v16;
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v37);
}

BOOL static GKCrypto_AdminSeed.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  void (*v9)(char *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v17 = a1;
  v25 = a2;
  v32 = 0;
  v31 = 0;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD **)(v18 - 8);
  v21 = v19[8];
  v20 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v6 - v20;
  v23 = v20;
  MEMORY[0x24BDAC7A8]((char *)&v6 - v20);
  v24 = (char *)&v6 - v23;
  v32 = v2;
  v31 = v3;
  v28 = *v2;
  v29 = v2[1];
  outlined copy of Data._Representation(v28, v29);
  outlined copy of Data._Representation(v28, v29);
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  outlined copy of Data._Representation(v26, v27);
  v30 = MEMORY[0x242633488](v28, v29, v26, v27);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  outlined consume of Data._Representation(v26, v27);
  outlined consume of Data._Representation(v28, v29);
  if ((v30 & 1) != 0)
  {
    v13 = *(_QWORD *)(v17 + 16);
    v14 = *(_QWORD *)(v17 + 24);
    outlined copy of Data._Representation(v13, v14);
    outlined copy of Data._Representation(v13, v14);
    v11 = v25[2];
    v12 = v25[3];
    outlined copy of Data._Representation(v11, v12);
    outlined copy of Data._Representation(v11, v12);
    v15 = MEMORY[0x242633488](v13, v14, v11, v12);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    if ((v15 & 1) != 0)
    {
      v7 = type metadata accessor for GKCrypto_AdminSeed();
      v4 = v17 + *(int *)(v7 + 24);
      v8 = (void (*)(char *, uint64_t, uint64_t))v19[2];
      v8(v24, v4, v18);
      v8(v22, (uint64_t)v25 + *(int *)(v7 + 24), v18);
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      v10 = dispatch thunk of static Equatable.== infix(_:_:)();
      v9 = (void (*)(char *, uint64_t))v19[1];
      v9(v22, v18);
      v9(v24, v18);
      return (v10 & 1) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_AdminSeed.hashValue.getter()
{
  type metadata accessor for GKCrypto_AdminSeed();
  lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
  return _hashValue<A>(for:)();
}

char *protocol witness for Message.init() in conformance GKCrypto_AdminSeed@<X0>(char *a1@<X8>)
{
  return GKCrypto_AdminSeed.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_AdminSeed()
{
  return static GKCrypto_AdminSeed.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_AdminSeed()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_AdminSeed@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_AdminSeed.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_AdminSeed(uint64_t a1)
{
  return GKCrypto_AdminSeed.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminSeed(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_AdminSeed.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminSeed;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_AdminSeed(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_AdminSeed()
{
  return GKCrypto_AdminSeed.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_AdminSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_AdminSeed.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_AdminSeed()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_AdminSeed()
{
  lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_AdminSeed()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_AdminSeed@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_AdminSeed._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_AdminSeed()
{
  lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_AdminSeed()
{
  return GKCrypto_AdminSeed.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_AdminSeed()
{
  lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_AdminSeed(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_AdminSeed(uint64_t a1, uint64_t *a2)
{
  return static GKCrypto_AdminSeed.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_SeedBlobRequest.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_SeedBlobRequest.protoMessageName;
}

uint64_t static GKCrypto_SeedBlobRequest.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_SeedBlobRequest.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_SeedBlobRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_SeedBlobRequest._protobuf_nameMap);
}

uint64_t static GKCrypto_SeedBlobRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_SeedBlobRequest._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 6:
        closure #6 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #4 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #5 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #6 in GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_SeedBlobRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  _QWORD v82[2];
  _QWORD v83[2];
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  _QWORD v88[2];
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;

  v75 = a1;
  v71 = a2;
  v72 = a3;
  v90 = 0;
  v89 = 0;
  v91 = a2;
  v76 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v76 - 8);
  v78 = (*(_QWORD *)(v77 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v75);
  v79 = (char *)v19 - v78;
  v90 = v4;
  v89 = v3;
  if (*v3)
  {
    v5 = v74;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v69 = v5;
    v70 = v5;
    if (v5)
    {
      v22 = v70;
      return result;
    }
    v68 = 0;
  }
  else
  {
    v68 = v74;
  }
  v62 = v68;
  v66 = *(_QWORD *)(v73 + 8);
  v65 = *(_QWORD *)(v73 + 16);
  outlined copy of Data._Representation(v66, v65);
  outlined copy of Data._Representation(v66, v65);
  v64 = v88;
  v88[0] = v66;
  v88[1] = v65;
  v63 = lazy protocol witness table accessor for type Data and conformance Data();
  v67 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v64);
  outlined consume of Data._Representation(v66, v65);
  if ((v67 & 1) != 0)
  {
    v57 = v62;
  }
  else
  {
    v58 = *(_QWORD *)(v73 + 8);
    v59 = *(_QWORD *)(v73 + 16);
    outlined copy of Data._Representation(v58, v59);
    v7 = v62;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v60 = v7;
    v61 = v7;
    if (v7)
    {
      v21 = v61;
      result = outlined consume of Data._Representation(v58, v59);
      v22 = v21;
      return result;
    }
    outlined consume of Data._Representation(v58, v59);
    v57 = v60;
  }
  v54 = v57;
  v8 = *(_QWORD *)(v73 + 24);
  v9 = *(_BYTE *)(v73 + 32);
  v56 = &v86;
  v86 = v8;
  v87 = v9 & 1;
  v55 = &v84;
  v84 = 0;
  v85 = 1;
  lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v50 = v54;
  }
  else
  {
    v10 = *(_QWORD *)(v73 + 24);
    v11 = *(_BYTE *)(v73 + 32);
    v51 = &v80;
    v80 = v10;
    v81 = v11 & 1;
    lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
    v12 = v54;
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    v52 = v12;
    v53 = v12;
    if (v12)
    {
      v22 = v53;
      return result;
    }
    v50 = 0;
  }
  v49 = v50;
  if (*(_DWORD *)(v73 + 36))
  {
    v13 = v49;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v47 = v13;
    v48 = v13;
    if (v13)
    {
      v22 = v48;
      return result;
    }
    v46 = 0;
  }
  else
  {
    v46 = v49;
  }
  v41 = v46;
  v44 = *(_QWORD *)(v73 + 40);
  v43 = *(_QWORD *)(v73 + 48);
  outlined copy of Data._Representation(v44, v43);
  outlined copy of Data._Representation(v44, v43);
  v42 = v83;
  v83[0] = v44;
  v83[1] = v43;
  v45 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v42);
  outlined consume of Data._Representation(v44, v43);
  if ((v45 & 1) != 0)
  {
    v36 = v41;
  }
  else
  {
    v37 = *(_QWORD *)(v73 + 40);
    v38 = *(_QWORD *)(v73 + 48);
    outlined copy of Data._Representation(v37, v38);
    v14 = v41;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v39 = v14;
    v40 = v14;
    if (v14)
    {
      v20 = v40;
      result = outlined consume of Data._Representation(v37, v38);
      v22 = v20;
      return result;
    }
    outlined consume of Data._Representation(v37, v38);
    v36 = v39;
  }
  v31 = v36;
  v34 = *(_QWORD *)(v73 + 56);
  v33 = *(_QWORD *)(v73 + 64);
  outlined copy of Data._Representation(v34, v33);
  outlined copy of Data._Representation(v34, v33);
  v32 = v82;
  v82[0] = v34;
  v82[1] = v33;
  v35 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v32);
  outlined consume of Data._Representation(v34, v33);
  if ((v35 & 1) != 0)
  {
    v26 = v31;
  }
  else
  {
    v27 = *(_QWORD *)(v73 + 56);
    v28 = *(_QWORD *)(v73 + 64);
    outlined copy of Data._Representation(v27, v28);
    v15 = v31;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v29 = v15;
    v30 = v15;
    if (v15)
    {
      v19[2] = v30;
      return outlined consume of Data._Representation(v27, v28);
    }
    outlined consume of Data._Representation(v27, v28);
    v26 = v29;
  }
  v16 = v79;
  v23 = v26;
  v17 = type metadata accessor for GKCrypto_SeedBlobRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v16, v73 + *(int *)(v17 + 40), v76);
  v18 = v23;
  UnknownStorage.traverse<A>(visitor:)();
  v24 = v18;
  v25 = v18;
  if (v18)
    v19[1] = v25;
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v79, v76);
}

BOOL static GKCrypto_SeedBlobRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  _DWORD *v47;
  _DWORD *v48;

  v36 = a1;
  v35 = a2;
  v48 = 0;
  v47 = 0;
  v37 = type metadata accessor for UnknownStorage();
  v38 = *(_QWORD **)(v37 - 8);
  v39 = (v38[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v12 - v39;
  v41 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v42 = (char *)&v12 - v41;
  v48 = v4;
  v47 = v5;
  if (*v4 == *v5)
  {
    v31 = *(_QWORD *)(v36 + 8);
    v32 = *(_QWORD *)(v36 + 16);
    outlined copy of Data._Representation(v31, v32);
    outlined copy of Data._Representation(v31, v32);
    v29 = *(_QWORD *)(v35 + 8);
    v30 = *(_QWORD *)(v35 + 16);
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v29, v30);
    v33 = MEMORY[0x242633488](v31, v32, v29, v30);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v31, v32);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v31, v32);
    if ((v33 & 1) != 0)
    {
      v6 = *(_QWORD *)(v36 + 24);
      v7 = *(_BYTE *)(v36 + 32);
      v28 = &v45;
      v45 = v6;
      v46 = v7 & 1;
      v8 = *(_QWORD *)(v35 + 24);
      v9 = *(_BYTE *)(v35 + 32);
      v27 = &v43;
      v43 = v8;
      v44 = v9 & 1;
      lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
      {
        if (*(_DWORD *)(v36 + 36) == *(_DWORD *)(v35 + 36))
        {
          v24 = *(_QWORD *)(v36 + 40);
          v25 = *(_QWORD *)(v36 + 48);
          outlined copy of Data._Representation(v24, v25);
          outlined copy of Data._Representation(v24, v25);
          v22 = *(_QWORD *)(v35 + 40);
          v23 = *(_QWORD *)(v35 + 48);
          outlined copy of Data._Representation(v22, v23);
          outlined copy of Data._Representation(v22, v23);
          v26 = MEMORY[0x242633488](v24, v25, v22, v23);
          outlined consume of Data._Representation(v22, v23);
          outlined consume of Data._Representation(v24, v25);
          outlined consume of Data._Representation(v22, v23);
          outlined consume of Data._Representation(v24, v25);
          if ((v26 & 1) != 0)
          {
            v19 = *(_QWORD *)(v36 + 56);
            v20 = *(_QWORD *)(v36 + 64);
            outlined copy of Data._Representation(v19, v20);
            outlined copy of Data._Representation(v19, v20);
            v17 = *(_QWORD *)(v35 + 56);
            v18 = *(_QWORD *)(v35 + 64);
            outlined copy of Data._Representation(v17, v18);
            outlined copy of Data._Representation(v17, v18);
            v21 = MEMORY[0x242633488](v19, v20, v17, v18);
            outlined consume of Data._Representation(v17, v18);
            outlined consume of Data._Representation(v19, v20);
            outlined consume of Data._Representation(v17, v18);
            outlined consume of Data._Representation(v19, v20);
            if ((v21 & 1) != 0)
            {
              v13 = type metadata accessor for GKCrypto_SeedBlobRequest();
              v10 = v36 + *(int *)(v13 + 40);
              v14 = (void (*)(char *, uint64_t, uint64_t))v38[2];
              v14(v42, v10, v37);
              v14(v40, v35 + *(int *)(v13 + 40), v37);
              lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
              v16 = dispatch thunk of static Equatable.== infix(_:_:)();
              v15 = (void (*)(char *, uint64_t))v38[1];
              v15(v40, v37);
              v15(v42, v37);
              return (v16 & 1) != 0;
            }
            else
            {
              return 0;
            }
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_SeedBlobRequest.hashValue.getter()
{
  type metadata accessor for GKCrypto_SeedBlobRequest();
  lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_SeedBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SeedBlobRequest.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_SeedBlobRequest()
{
  return static GKCrypto_SeedBlobRequest.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_SeedBlobRequest()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_SeedBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_SeedBlobRequest.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_SeedBlobRequest(uint64_t a1)
{
  return GKCrypto_SeedBlobRequest.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlobRequest(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_SeedBlobRequest.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlobRequest;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_SeedBlobRequest(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_SeedBlobRequest()
{
  return GKCrypto_SeedBlobRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_SeedBlobRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_SeedBlobRequest()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_SeedBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_SeedBlobRequest()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_SeedBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_SeedBlobRequest._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_SeedBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_SeedBlobRequest()
{
  return GKCrypto_SeedBlobRequest.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_SeedBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_SeedBlobRequest(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2)
{
  return static GKCrypto_SeedBlobRequest.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_RSVPQueueRequest.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_RSVPQueueRequest.protoMessageName;
}

uint64_t static GKCrypto_RSVPQueueRequest.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_RSVPQueueRequest.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_RSVPQueueRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_RSVPQueueRequest._protobuf_nameMap);
}

uint64_t static GKCrypto_RSVPQueueRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_RSVPQueueRequest._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_RSVPQueueRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v70 = a1;
  v66 = a2;
  v67 = a3;
  v80 = 0;
  v79 = 0;
  v81 = a2;
  v71 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)v14 - v73;
  v80 = v4;
  v79 = v3;
  if (*v3)
  {
    v5 = v69;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v64 = v5;
    v65 = v5;
    if (v5)
    {
      v18 = v65;
      return result;
    }
    v63 = 0;
  }
  else
  {
    v63 = v69;
  }
  v57 = v63;
  v61 = *((_QWORD *)v68 + 1);
  v60 = *((_QWORD *)v68 + 2);
  outlined copy of Data._Representation(v61, v60);
  outlined copy of Data._Representation(v61, v60);
  v59 = v78;
  v78[0] = v61;
  v78[1] = v60;
  v58 = lazy protocol witness table accessor for type Data and conformance Data();
  v62 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v59);
  outlined consume of Data._Representation(v61, v60);
  if ((v62 & 1) != 0)
  {
    v52 = v57;
  }
  else
  {
    v53 = *((_QWORD *)v68 + 1);
    v54 = *((_QWORD *)v68 + 2);
    outlined copy of Data._Representation(v53, v54);
    v7 = v57;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v55 = v7;
    v56 = v7;
    if (v7)
    {
      v17 = v56;
      result = outlined consume of Data._Representation(v53, v54);
      v18 = v17;
      return result;
    }
    outlined consume of Data._Representation(v53, v54);
    v52 = v55;
  }
  v47 = v52;
  v50 = *((_QWORD *)v68 + 3);
  v49 = *((_QWORD *)v68 + 4);
  outlined copy of Data._Representation(v50, v49);
  outlined copy of Data._Representation(v50, v49);
  v48 = v77;
  v77[0] = v50;
  v77[1] = v49;
  v51 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v48);
  outlined consume of Data._Representation(v50, v49);
  if ((v51 & 1) != 0)
  {
    v42 = v47;
  }
  else
  {
    v43 = *((_QWORD *)v68 + 3);
    v44 = *((_QWORD *)v68 + 4);
    outlined copy of Data._Representation(v43, v44);
    v8 = v47;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v45 = v8;
    v46 = v8;
    if (v8)
    {
      v16 = v46;
      result = outlined consume of Data._Representation(v43, v44);
      v18 = v16;
      return result;
    }
    outlined consume of Data._Representation(v43, v44);
    v42 = v45;
  }
  v37 = v42;
  v40 = *((_QWORD *)v68 + 5);
  v39 = *((_QWORD *)v68 + 6);
  outlined copy of Data._Representation(v40, v39);
  outlined copy of Data._Representation(v40, v39);
  v38 = v76;
  v76[0] = v40;
  v76[1] = v39;
  v41 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v38);
  outlined consume of Data._Representation(v40, v39);
  if ((v41 & 1) != 0)
  {
    v32 = v37;
  }
  else
  {
    v33 = *((_QWORD *)v68 + 5);
    v34 = *((_QWORD *)v68 + 6);
    outlined copy of Data._Representation(v33, v34);
    v9 = v37;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v35 = v9;
    v36 = v9;
    if (v9)
    {
      v15 = v36;
      result = outlined consume of Data._Representation(v33, v34);
      v18 = v15;
      return result;
    }
    outlined consume of Data._Representation(v33, v34);
    v32 = v35;
  }
  v27 = v32;
  v30 = *((_QWORD *)v68 + 7);
  v29 = *((_QWORD *)v68 + 8);
  outlined copy of Data._Representation(v30, v29);
  outlined copy of Data._Representation(v30, v29);
  v28 = v75;
  v75[0] = v30;
  v75[1] = v29;
  v31 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v28);
  outlined consume of Data._Representation(v30, v29);
  if ((v31 & 1) != 0)
  {
    v22 = v27;
  }
  else
  {
    v23 = *((_QWORD *)v68 + 7);
    v24 = *((_QWORD *)v68 + 8);
    outlined copy of Data._Representation(v23, v24);
    v10 = v27;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v25 = v10;
    v26 = v10;
    if (v10)
    {
      v14[2] = v26;
      return outlined consume of Data._Representation(v23, v24);
    }
    outlined consume of Data._Representation(v23, v24);
    v22 = v25;
  }
  v11 = v74;
  v19 = v22;
  v12 = type metadata accessor for GKCrypto_RSVPQueueRequest();
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v11, &v68[*(int *)(v12 + 36)], v71);
  v13 = v19;
  UnknownStorage.traverse<A>(visitor:)();
  v20 = v13;
  v21 = v13;
  if (v13)
    v14[1] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v74, v71);
}

BOOL static GKCrypto_RSVPQueueRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;

  v34 = a1;
  v33 = a2;
  v42 = 0;
  v41 = 0;
  v35 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD **)(v35 - 8);
  v37 = (v36[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v8 - v37;
  v39 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v8 - v39;
  v42 = v4;
  v41 = v5;
  if (*v4 == *v5)
  {
    v29 = v34[1];
    v30 = v34[2];
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v29, v30);
    v27 = *((_QWORD *)v33 + 1);
    v28 = *((_QWORD *)v33 + 2);
    outlined copy of Data._Representation(v27, v28);
    outlined copy of Data._Representation(v27, v28);
    v31 = MEMORY[0x242633488](v29, v30, v27, v28);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    if ((v31 & 1) != 0)
    {
      v24 = v34[3];
      v25 = v34[4];
      outlined copy of Data._Representation(v24, v25);
      outlined copy of Data._Representation(v24, v25);
      v22 = *((_QWORD *)v33 + 3);
      v23 = *((_QWORD *)v33 + 4);
      outlined copy of Data._Representation(v22, v23);
      outlined copy of Data._Representation(v22, v23);
      v26 = MEMORY[0x242633488](v24, v25, v22, v23);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      if ((v26 & 1) != 0)
      {
        v19 = v34[5];
        v20 = v34[6];
        outlined copy of Data._Representation(v19, v20);
        outlined copy of Data._Representation(v19, v20);
        v17 = *((_QWORD *)v33 + 5);
        v18 = *((_QWORD *)v33 + 6);
        outlined copy of Data._Representation(v17, v18);
        outlined copy of Data._Representation(v17, v18);
        v21 = MEMORY[0x242633488](v19, v20, v17, v18);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        if ((v21 & 1) != 0)
        {
          v14 = v34[7];
          v15 = v34[8];
          outlined copy of Data._Representation(v14, v15);
          outlined copy of Data._Representation(v14, v15);
          v12 = *((_QWORD *)v33 + 7);
          v13 = *((_QWORD *)v33 + 8);
          outlined copy of Data._Representation(v12, v13);
          outlined copy of Data._Representation(v12, v13);
          v16 = MEMORY[0x242633488](v14, v15, v12, v13);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          if ((v16 & 1) != 0)
          {
            v8 = type metadata accessor for GKCrypto_RSVPQueueRequest();
            v6 = (char *)v34 + *(int *)(v8 + 36);
            v9 = (void (*)(char *, char *, uint64_t))v36[2];
            v9(v40, v6, v35);
            v9(v38, &v33[*(int *)(v8 + 36)], v35);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
            v11 = dispatch thunk of static Equatable.== infix(_:_:)();
            v10 = (void (*)(char *, uint64_t))v36[1];
            v10(v38, v35);
            v10(v40, v35);
            return (v11 & 1) != 0;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_RSVPQueueRequest.hashValue.getter()
{
  type metadata accessor for GKCrypto_RSVPQueueRequest();
  lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_RSVPQueueRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVPQueueRequest.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_RSVPQueueRequest()
{
  return static GKCrypto_RSVPQueueRequest.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_RSVPQueueRequest()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_RSVPQueueRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_RSVPQueueRequest.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_RSVPQueueRequest(uint64_t a1)
{
  return GKCrypto_RSVPQueueRequest.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPQueueRequest(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_RSVPQueueRequest.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPQueueRequest;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_RSVPQueueRequest(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_RSVPQueueRequest()
{
  return GKCrypto_RSVPQueueRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_RSVPQueueRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_RSVPQueueRequest()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_RSVPQueueRequest()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_RSVPQueueRequest()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_RSVPQueueRequest@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_RSVPQueueRequest._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_RSVPQueueRequest()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_RSVPQueueRequest()
{
  return GKCrypto_RSVPQueueRequest.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_RSVPQueueRequest()
{
  lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_RSVPQueueRequest(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_RSVPQueueRequest(_QWORD *a1, char *a2)
{
  return static GKCrypto_RSVPQueueRequest.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_KeyChainUserKeys.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_KeyChainUserKeys.protoMessageName;
}

uint64_t static GKCrypto_KeyChainUserKeys.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_KeyChainUserKeys.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_KeyChainUserKeys._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_KeyChainUserKeys._protobuf_nameMap);
}

uint64_t static GKCrypto_KeyChainUserKeys._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_KeyChainUserKeys._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_KeyChainUserKeys.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v42 = a2;
  v43 = a3;
  v54 = 0;
  v53 = 0;
  v55 = a2;
  v47 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)v12 - v49;
  v54 = v4;
  v53 = v3;
  if (*v3)
  {
    v5 = v45;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v40 = v5;
    v41 = v5;
    if (v5)
    {
      v14 = v41;
      return result;
    }
    v39 = 0;
  }
  else
  {
    v39 = v45;
  }
  v33 = v39;
  v37 = *((_QWORD *)v44 + 1);
  v36 = *((_QWORD *)v44 + 2);
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v52;
  v52[0] = v37;
  v52[1] = v36;
  v34 = lazy protocol witness table accessor for type Data and conformance Data();
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v28 = v33;
  }
  else
  {
    v29 = *((_QWORD *)v44 + 1);
    v30 = *((_QWORD *)v44 + 2);
    outlined copy of Data._Representation(v29, v30);
    v7 = v33;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v31 = v7;
    v32 = v7;
    if (v7)
    {
      v13 = v32;
      result = outlined consume of Data._Representation(v29, v30);
      v14 = v13;
      return result;
    }
    outlined consume of Data._Representation(v29, v30);
    v28 = v31;
  }
  v23 = v28;
  v26 = *((_QWORD *)v44 + 3);
  v25 = *((_QWORD *)v44 + 4);
  outlined copy of Data._Representation(v26, v25);
  outlined copy of Data._Representation(v26, v25);
  v24 = v51;
  v51[0] = v26;
  v51[1] = v25;
  v27 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v24);
  outlined consume of Data._Representation(v26, v25);
  if ((v27 & 1) != 0)
  {
    v18 = v23;
  }
  else
  {
    v19 = *((_QWORD *)v44 + 3);
    v20 = *((_QWORD *)v44 + 4);
    outlined copy of Data._Representation(v19, v20);
    v8 = v23;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v21 = v8;
    v22 = v8;
    if (v8)
    {
      v12[2] = v22;
      return outlined consume of Data._Representation(v19, v20);
    }
    outlined consume of Data._Representation(v19, v20);
    v18 = v21;
  }
  v9 = v50;
  v15 = v18;
  v10 = type metadata accessor for GKCrypto_KeyChainUserKeys();
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, &v44[*(int *)(v10 + 28)], v47);
  v11 = v15;
  UnknownStorage.traverse<A>(visitor:)();
  v16 = v11;
  v17 = v11;
  if (v11)
    v12[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v47);
}

BOOL static GKCrypto_KeyChainUserKeys.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;

  v24 = a1;
  v23 = a2;
  v32 = 0;
  v31 = 0;
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD **)(v25 - 8);
  v27 = (v26[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v8 - v27;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v8 - v29;
  v32 = v4;
  v31 = v5;
  if (*v4 == *v5)
  {
    v19 = v24[1];
    v20 = v24[2];
    outlined copy of Data._Representation(v19, v20);
    outlined copy of Data._Representation(v19, v20);
    v17 = *((_QWORD *)v23 + 1);
    v18 = *((_QWORD *)v23 + 2);
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v21 = MEMORY[0x242633488](v19, v20, v17, v18);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    if ((v21 & 1) != 0)
    {
      v14 = v24[3];
      v15 = v24[4];
      outlined copy of Data._Representation(v14, v15);
      outlined copy of Data._Representation(v14, v15);
      v12 = *((_QWORD *)v23 + 3);
      v13 = *((_QWORD *)v23 + 4);
      outlined copy of Data._Representation(v12, v13);
      outlined copy of Data._Representation(v12, v13);
      v16 = MEMORY[0x242633488](v14, v15, v12, v13);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      if ((v16 & 1) != 0)
      {
        v8 = type metadata accessor for GKCrypto_KeyChainUserKeys();
        v6 = (char *)v24 + *(int *)(v8 + 28);
        v9 = (void (*)(char *, char *, uint64_t))v26[2];
        v9(v30, v6, v25);
        v9(v28, &v23[*(int *)(v8 + 28)], v25);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v11 = dispatch thunk of static Equatable.== infix(_:_:)();
        v10 = (void (*)(char *, uint64_t))v26[1];
        v10(v28, v25);
        v10(v30, v25);
        return (v11 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_KeyChainUserKeys.hashValue.getter()
{
  type metadata accessor for GKCrypto_KeyChainUserKeys();
  lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_KeyChainUserKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_KeyChainUserKeys.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_KeyChainUserKeys()
{
  return static GKCrypto_KeyChainUserKeys.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_KeyChainUserKeys()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_KeyChainUserKeys@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_KeyChainUserKeys.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_KeyChainUserKeys(uint64_t a1)
{
  return GKCrypto_KeyChainUserKeys.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_KeyChainUserKeys(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_KeyChainUserKeys.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_KeyChainUserKeys;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_KeyChainUserKeys(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_KeyChainUserKeys()
{
  return GKCrypto_KeyChainUserKeys.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_KeyChainUserKeys.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_KeyChainUserKeys()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_KeyChainUserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_KeyChainUserKeys()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_KeyChainUserKeys@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_KeyChainUserKeys._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_KeyChainUserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_KeyChainUserKeys()
{
  return GKCrypto_KeyChainUserKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_KeyChainUserKeys()
{
  lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_KeyChainUserKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_KeyChainUserKeys(_QWORD *a1, char *a2)
{
  return static GKCrypto_KeyChainUserKeys.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupAccessInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupAccessInfo.protoMessageName;
}

uint64_t static GKCrypto_GroupAccessInfo.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupAccessInfo.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupAccessInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupAccessInfo._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupAccessInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupAccessInfo._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupAccessInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v70 = a1;
  v66 = a2;
  v67 = a3;
  v80 = 0;
  v79 = 0;
  v81 = a2;
  v71 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)v14 - v73;
  v80 = v4;
  v79 = v3;
  if (*v3)
  {
    v5 = v69;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v64 = v5;
    v65 = v5;
    if (v5)
    {
      v18 = v65;
      return result;
    }
    v63 = 0;
  }
  else
  {
    v63 = v69;
  }
  v57 = v63;
  v61 = *((_QWORD *)v68 + 1);
  v60 = *((_QWORD *)v68 + 2);
  outlined copy of Data._Representation(v61, v60);
  outlined copy of Data._Representation(v61, v60);
  v59 = v78;
  v78[0] = v61;
  v78[1] = v60;
  v58 = lazy protocol witness table accessor for type Data and conformance Data();
  v62 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v59);
  outlined consume of Data._Representation(v61, v60);
  if ((v62 & 1) != 0)
  {
    v52 = v57;
  }
  else
  {
    v53 = *((_QWORD *)v68 + 1);
    v54 = *((_QWORD *)v68 + 2);
    outlined copy of Data._Representation(v53, v54);
    v7 = v57;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v55 = v7;
    v56 = v7;
    if (v7)
    {
      v17 = v56;
      result = outlined consume of Data._Representation(v53, v54);
      v18 = v17;
      return result;
    }
    outlined consume of Data._Representation(v53, v54);
    v52 = v55;
  }
  v47 = v52;
  v50 = *((_QWORD *)v68 + 3);
  v49 = *((_QWORD *)v68 + 4);
  outlined copy of Data._Representation(v50, v49);
  outlined copy of Data._Representation(v50, v49);
  v48 = v77;
  v77[0] = v50;
  v77[1] = v49;
  v51 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v48);
  outlined consume of Data._Representation(v50, v49);
  if ((v51 & 1) != 0)
  {
    v42 = v47;
  }
  else
  {
    v43 = *((_QWORD *)v68 + 3);
    v44 = *((_QWORD *)v68 + 4);
    outlined copy of Data._Representation(v43, v44);
    v8 = v47;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v45 = v8;
    v46 = v8;
    if (v8)
    {
      v16 = v46;
      result = outlined consume of Data._Representation(v43, v44);
      v18 = v16;
      return result;
    }
    outlined consume of Data._Representation(v43, v44);
    v42 = v45;
  }
  v37 = v42;
  v40 = *((_QWORD *)v68 + 5);
  v39 = *((_QWORD *)v68 + 6);
  outlined copy of Data._Representation(v40, v39);
  outlined copy of Data._Representation(v40, v39);
  v38 = v76;
  v76[0] = v40;
  v76[1] = v39;
  v41 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v38);
  outlined consume of Data._Representation(v40, v39);
  if ((v41 & 1) != 0)
  {
    v32 = v37;
  }
  else
  {
    v33 = *((_QWORD *)v68 + 5);
    v34 = *((_QWORD *)v68 + 6);
    outlined copy of Data._Representation(v33, v34);
    v9 = v37;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v35 = v9;
    v36 = v9;
    if (v9)
    {
      v15 = v36;
      result = outlined consume of Data._Representation(v33, v34);
      v18 = v15;
      return result;
    }
    outlined consume of Data._Representation(v33, v34);
    v32 = v35;
  }
  v27 = v32;
  v30 = *((_QWORD *)v68 + 7);
  v29 = *((_QWORD *)v68 + 8);
  outlined copy of Data._Representation(v30, v29);
  outlined copy of Data._Representation(v30, v29);
  v28 = v75;
  v75[0] = v30;
  v75[1] = v29;
  v31 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v28);
  outlined consume of Data._Representation(v30, v29);
  if ((v31 & 1) != 0)
  {
    v22 = v27;
  }
  else
  {
    v23 = *((_QWORD *)v68 + 7);
    v24 = *((_QWORD *)v68 + 8);
    outlined copy of Data._Representation(v23, v24);
    v10 = v27;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v25 = v10;
    v26 = v10;
    if (v10)
    {
      v14[2] = v26;
      return outlined consume of Data._Representation(v23, v24);
    }
    outlined consume of Data._Representation(v23, v24);
    v22 = v25;
  }
  v11 = v74;
  v19 = v22;
  v12 = type metadata accessor for GKCrypto_GroupAccessInfo();
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v11, &v68[*(int *)(v12 + 36)], v71);
  v13 = v19;
  UnknownStorage.traverse<A>(visitor:)();
  v20 = v13;
  v21 = v13;
  if (v13)
    v14[1] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v74, v71);
}

BOOL static GKCrypto_GroupAccessInfo.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;

  v34 = a1;
  v33 = a2;
  v42 = 0;
  v41 = 0;
  v35 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD **)(v35 - 8);
  v37 = (v36[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v8 - v37;
  v39 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v8 - v39;
  v42 = v4;
  v41 = v5;
  if (*v4 == *v5)
  {
    v29 = v34[1];
    v30 = v34[2];
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v29, v30);
    v27 = *((_QWORD *)v33 + 1);
    v28 = *((_QWORD *)v33 + 2);
    outlined copy of Data._Representation(v27, v28);
    outlined copy of Data._Representation(v27, v28);
    v31 = MEMORY[0x242633488](v29, v30, v27, v28);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    if ((v31 & 1) != 0)
    {
      v24 = v34[3];
      v25 = v34[4];
      outlined copy of Data._Representation(v24, v25);
      outlined copy of Data._Representation(v24, v25);
      v22 = *((_QWORD *)v33 + 3);
      v23 = *((_QWORD *)v33 + 4);
      outlined copy of Data._Representation(v22, v23);
      outlined copy of Data._Representation(v22, v23);
      v26 = MEMORY[0x242633488](v24, v25, v22, v23);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      if ((v26 & 1) != 0)
      {
        v19 = v34[5];
        v20 = v34[6];
        outlined copy of Data._Representation(v19, v20);
        outlined copy of Data._Representation(v19, v20);
        v17 = *((_QWORD *)v33 + 5);
        v18 = *((_QWORD *)v33 + 6);
        outlined copy of Data._Representation(v17, v18);
        outlined copy of Data._Representation(v17, v18);
        v21 = MEMORY[0x242633488](v19, v20, v17, v18);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        if ((v21 & 1) != 0)
        {
          v14 = v34[7];
          v15 = v34[8];
          outlined copy of Data._Representation(v14, v15);
          outlined copy of Data._Representation(v14, v15);
          v12 = *((_QWORD *)v33 + 7);
          v13 = *((_QWORD *)v33 + 8);
          outlined copy of Data._Representation(v12, v13);
          outlined copy of Data._Representation(v12, v13);
          v16 = MEMORY[0x242633488](v14, v15, v12, v13);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          if ((v16 & 1) != 0)
          {
            v8 = type metadata accessor for GKCrypto_GroupAccessInfo();
            v6 = (char *)v34 + *(int *)(v8 + 36);
            v9 = (void (*)(char *, char *, uint64_t))v36[2];
            v9(v40, v6, v35);
            v9(v38, &v33[*(int *)(v8 + 36)], v35);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
            v11 = dispatch thunk of static Equatable.== infix(_:_:)();
            v10 = (void (*)(char *, uint64_t))v36[1];
            v10(v38, v35);
            v10(v40, v35);
            return (v11 & 1) != 0;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupAccessInfo.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupAccessInfo();
  lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupAccessInfo@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAccessInfo.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupAccessInfo()
{
  return static GKCrypto_GroupAccessInfo.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupAccessInfo()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupAccessInfo@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupAccessInfo.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupAccessInfo(uint64_t a1)
{
  return GKCrypto_GroupAccessInfo.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAccessInfo(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupAccessInfo.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAccessInfo;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupAccessInfo(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupAccessInfo()
{
  return GKCrypto_GroupAccessInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupAccessInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupAccessInfo()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupAccessInfo()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupAccessInfo()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupAccessInfo@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupAccessInfo._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupAccessInfo()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupAccessInfo()
{
  return GKCrypto_GroupAccessInfo.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupAccessInfo()
{
  lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupAccessInfo(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupAccessInfo(_QWORD *a1, char *a2)
{
  return static GKCrypto_GroupAccessInfo.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_GroupBlobRequest.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_GroupBlobRequest.protoMessageName;
}

uint64_t static GKCrypto_GroupBlobRequest.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_GroupBlobRequest.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_GroupBlobRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_GroupBlobRequest._protobuf_nameMap);
}

uint64_t static GKCrypto_GroupBlobRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_GroupBlobRequest._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 4:
        closure #4 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
        break;
      case 5:
        closure #5 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #4 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #5 in GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_GroupBlobRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;

  v70 = a1;
  v66 = a2;
  v67 = a3;
  v80 = 0;
  v79 = 0;
  v81 = a2;
  v71 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)v14 - v73;
  v80 = v4;
  v79 = v3;
  if (*v3)
  {
    v5 = v69;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v64 = v5;
    v65 = v5;
    if (v5)
    {
      v18 = v65;
      return result;
    }
    v63 = 0;
  }
  else
  {
    v63 = v69;
  }
  v57 = v63;
  v61 = *((_QWORD *)v68 + 1);
  v60 = *((_QWORD *)v68 + 2);
  outlined copy of Data._Representation(v61, v60);
  outlined copy of Data._Representation(v61, v60);
  v59 = v78;
  v78[0] = v61;
  v78[1] = v60;
  v58 = lazy protocol witness table accessor for type Data and conformance Data();
  v62 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v59);
  outlined consume of Data._Representation(v61, v60);
  if ((v62 & 1) != 0)
  {
    v52 = v57;
  }
  else
  {
    v53 = *((_QWORD *)v68 + 1);
    v54 = *((_QWORD *)v68 + 2);
    outlined copy of Data._Representation(v53, v54);
    v7 = v57;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v55 = v7;
    v56 = v7;
    if (v7)
    {
      v17 = v56;
      result = outlined consume of Data._Representation(v53, v54);
      v18 = v17;
      return result;
    }
    outlined consume of Data._Representation(v53, v54);
    v52 = v55;
  }
  v47 = v52;
  v50 = *((_QWORD *)v68 + 3);
  v49 = *((_QWORD *)v68 + 4);
  outlined copy of Data._Representation(v50, v49);
  outlined copy of Data._Representation(v50, v49);
  v48 = v77;
  v77[0] = v50;
  v77[1] = v49;
  v51 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v48);
  outlined consume of Data._Representation(v50, v49);
  if ((v51 & 1) != 0)
  {
    v42 = v47;
  }
  else
  {
    v43 = *((_QWORD *)v68 + 3);
    v44 = *((_QWORD *)v68 + 4);
    outlined copy of Data._Representation(v43, v44);
    v8 = v47;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v45 = v8;
    v46 = v8;
    if (v8)
    {
      v16 = v46;
      result = outlined consume of Data._Representation(v43, v44);
      v18 = v16;
      return result;
    }
    outlined consume of Data._Representation(v43, v44);
    v42 = v45;
  }
  v37 = v42;
  v40 = *((_QWORD *)v68 + 5);
  v39 = *((_QWORD *)v68 + 6);
  outlined copy of Data._Representation(v40, v39);
  outlined copy of Data._Representation(v40, v39);
  v38 = v76;
  v76[0] = v40;
  v76[1] = v39;
  v41 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v38);
  outlined consume of Data._Representation(v40, v39);
  if ((v41 & 1) != 0)
  {
    v32 = v37;
  }
  else
  {
    v33 = *((_QWORD *)v68 + 5);
    v34 = *((_QWORD *)v68 + 6);
    outlined copy of Data._Representation(v33, v34);
    v9 = v37;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v35 = v9;
    v36 = v9;
    if (v9)
    {
      v15 = v36;
      result = outlined consume of Data._Representation(v33, v34);
      v18 = v15;
      return result;
    }
    outlined consume of Data._Representation(v33, v34);
    v32 = v35;
  }
  v27 = v32;
  v30 = *((_QWORD *)v68 + 7);
  v29 = *((_QWORD *)v68 + 8);
  outlined copy of Data._Representation(v30, v29);
  outlined copy of Data._Representation(v30, v29);
  v28 = v75;
  v75[0] = v30;
  v75[1] = v29;
  v31 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v28);
  outlined consume of Data._Representation(v30, v29);
  if ((v31 & 1) != 0)
  {
    v22 = v27;
  }
  else
  {
    v23 = *((_QWORD *)v68 + 7);
    v24 = *((_QWORD *)v68 + 8);
    outlined copy of Data._Representation(v23, v24);
    v10 = v27;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v25 = v10;
    v26 = v10;
    if (v10)
    {
      v14[2] = v26;
      return outlined consume of Data._Representation(v23, v24);
    }
    outlined consume of Data._Representation(v23, v24);
    v22 = v25;
  }
  v11 = v74;
  v19 = v22;
  v12 = type metadata accessor for GKCrypto_GroupBlobRequest();
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v11, &v68[*(int *)(v12 + 36)], v71);
  v13 = v19;
  UnknownStorage.traverse<A>(visitor:)();
  v20 = v13;
  v21 = v13;
  if (v13)
    v14[1] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v74, v71);
}

BOOL static GKCrypto_GroupBlobRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;

  v34 = a1;
  v33 = a2;
  v42 = 0;
  v41 = 0;
  v35 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD **)(v35 - 8);
  v37 = (v36[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v8 - v37;
  v39 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v8 - v39;
  v42 = v4;
  v41 = v5;
  if (*v4 == *v5)
  {
    v29 = v34[1];
    v30 = v34[2];
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v29, v30);
    v27 = *((_QWORD *)v33 + 1);
    v28 = *((_QWORD *)v33 + 2);
    outlined copy of Data._Representation(v27, v28);
    outlined copy of Data._Representation(v27, v28);
    v31 = MEMORY[0x242633488](v29, v30, v27, v28);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    outlined consume of Data._Representation(v27, v28);
    outlined consume of Data._Representation(v29, v30);
    if ((v31 & 1) != 0)
    {
      v24 = v34[3];
      v25 = v34[4];
      outlined copy of Data._Representation(v24, v25);
      outlined copy of Data._Representation(v24, v25);
      v22 = *((_QWORD *)v33 + 3);
      v23 = *((_QWORD *)v33 + 4);
      outlined copy of Data._Representation(v22, v23);
      outlined copy of Data._Representation(v22, v23);
      v26 = MEMORY[0x242633488](v24, v25, v22, v23);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      outlined consume of Data._Representation(v22, v23);
      outlined consume of Data._Representation(v24, v25);
      if ((v26 & 1) != 0)
      {
        v19 = v34[5];
        v20 = v34[6];
        outlined copy of Data._Representation(v19, v20);
        outlined copy of Data._Representation(v19, v20);
        v17 = *((_QWORD *)v33 + 5);
        v18 = *((_QWORD *)v33 + 6);
        outlined copy of Data._Representation(v17, v18);
        outlined copy of Data._Representation(v17, v18);
        v21 = MEMORY[0x242633488](v19, v20, v17, v18);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        outlined consume of Data._Representation(v17, v18);
        outlined consume of Data._Representation(v19, v20);
        if ((v21 & 1) != 0)
        {
          v14 = v34[7];
          v15 = v34[8];
          outlined copy of Data._Representation(v14, v15);
          outlined copy of Data._Representation(v14, v15);
          v12 = *((_QWORD *)v33 + 7);
          v13 = *((_QWORD *)v33 + 8);
          outlined copy of Data._Representation(v12, v13);
          outlined copy of Data._Representation(v12, v13);
          v16 = MEMORY[0x242633488](v14, v15, v12, v13);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          outlined consume of Data._Representation(v12, v13);
          outlined consume of Data._Representation(v14, v15);
          if ((v16 & 1) != 0)
          {
            v8 = type metadata accessor for GKCrypto_GroupBlobRequest();
            v6 = (char *)v34 + *(int *)(v8 + 36);
            v9 = (void (*)(char *, char *, uint64_t))v36[2];
            v9(v40, v6, v35);
            v9(v38, &v33[*(int *)(v8 + 36)], v35);
            lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
            v11 = dispatch thunk of static Equatable.== infix(_:_:)();
            v10 = (void (*)(char *, uint64_t))v36[1];
            v10(v38, v35);
            v10(v40, v35);
            return (v11 & 1) != 0;
          }
          else
          {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_GroupBlobRequest.hashValue.getter()
{
  type metadata accessor for GKCrypto_GroupBlobRequest();
  lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_GroupBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlobRequest.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_GroupBlobRequest()
{
  return static GKCrypto_GroupBlobRequest.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_GroupBlobRequest()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_GroupBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_GroupBlobRequest.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_GroupBlobRequest(uint64_t a1)
{
  return GKCrypto_GroupBlobRequest.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlobRequest(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_GroupBlobRequest.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlobRequest;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_GroupBlobRequest(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_GroupBlobRequest()
{
  return GKCrypto_GroupBlobRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_GroupBlobRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_GroupBlobRequest()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_GroupBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_GroupBlobRequest()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_GroupBlobRequest@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_GroupBlobRequest._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlobRequest()
{
  return GKCrypto_GroupBlobRequest.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlobRequest()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlobRequest(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlobRequest(_QWORD *a1, char *a2)
{
  return static GKCrypto_GroupBlobRequest.== infix(_:_:)(a1, a2);
}

uint64_t *GKCrypto_EncryptedInvitation.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static GKCrypto_EncryptedInvitation.protoMessageName;
}

uint64_t static GKCrypto_EncryptedInvitation.protoMessageName.getter()
{
  uint64_t v1;

  v1 = *GKCrypto_EncryptedInvitation.protoMessageName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GKCrypto_EncryptedInvitation._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static GKCrypto_EncryptedInvitation._protobuf_nameMap);
}

uint64_t static GKCrypto_EncryptedInvitation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = GKCrypto_EncryptedInvitation._protobuf_nameMap.unsafeMutableAddressor();
  v1 = type metadata accessor for _NameMap();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)()
{
  uint64_t result;
  char v1;
  uint64_t v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v2 || (v1 & 1) != 0)
      break;
    switch(result)
    {
      case 1:
        closure #1 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)();
        break;
      case 3:
        closure #3 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)();
        break;
    }
    v2 = 0;
  }
  return result;
}

uint64_t closure #1 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t closure #2 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t closure #3 in GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t GKCrypto_EncryptedInvitation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a1;
  v42 = a2;
  v43 = a3;
  v54 = 0;
  v53 = 0;
  v55 = a2;
  v47 = type metadata accessor for UnknownStorage();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)v12 - v49;
  v54 = v4;
  v53 = v3;
  if (*v3)
  {
    v5 = v45;
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v40 = v5;
    v41 = v5;
    if (v5)
    {
      v14 = v41;
      return result;
    }
    v39 = 0;
  }
  else
  {
    v39 = v45;
  }
  v33 = v39;
  v37 = *((_QWORD *)v44 + 1);
  v36 = *((_QWORD *)v44 + 2);
  outlined copy of Data._Representation(v37, v36);
  outlined copy of Data._Representation(v37, v36);
  v35 = v52;
  v52[0] = v37;
  v52[1] = v36;
  v34 = lazy protocol witness table accessor for type Data and conformance Data();
  v38 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v35);
  outlined consume of Data._Representation(v37, v36);
  if ((v38 & 1) != 0)
  {
    v28 = v33;
  }
  else
  {
    v29 = *((_QWORD *)v44 + 1);
    v30 = *((_QWORD *)v44 + 2);
    outlined copy of Data._Representation(v29, v30);
    v7 = v33;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v31 = v7;
    v32 = v7;
    if (v7)
    {
      v13 = v32;
      result = outlined consume of Data._Representation(v29, v30);
      v14 = v13;
      return result;
    }
    outlined consume of Data._Representation(v29, v30);
    v28 = v31;
  }
  v23 = v28;
  v26 = *((_QWORD *)v44 + 3);
  v25 = *((_QWORD *)v44 + 4);
  outlined copy of Data._Representation(v26, v25);
  outlined copy of Data._Representation(v26, v25);
  v24 = v51;
  v51[0] = v26;
  v51[1] = v25;
  v27 = Collection.isEmpty.getter();
  outlined destroy of Data((uint64_t)v24);
  outlined consume of Data._Representation(v26, v25);
  if ((v27 & 1) != 0)
  {
    v18 = v23;
  }
  else
  {
    v19 = *((_QWORD *)v44 + 3);
    v20 = *((_QWORD *)v44 + 4);
    outlined copy of Data._Representation(v19, v20);
    v8 = v23;
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    v21 = v8;
    v22 = v8;
    if (v8)
    {
      v12[2] = v22;
      return outlined consume of Data._Representation(v19, v20);
    }
    outlined consume of Data._Representation(v19, v20);
    v18 = v21;
  }
  v9 = v50;
  v15 = v18;
  v10 = type metadata accessor for GKCrypto_EncryptedInvitation();
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v9, &v44[*(int *)(v10 + 28)], v47);
  v11 = v15;
  UnknownStorage.traverse<A>(visitor:)();
  v16 = v11;
  v17 = v11;
  if (v11)
    v12[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v50, v47);
}

BOOL static GKCrypto_EncryptedInvitation.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  void (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  _DWORD *v32;

  v24 = a1;
  v23 = a2;
  v32 = 0;
  v31 = 0;
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD **)(v25 - 8);
  v27 = (v26[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v8 - v27;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v8 - v29;
  v32 = v4;
  v31 = v5;
  if (*v4 == *v5)
  {
    v19 = v24[1];
    v20 = v24[2];
    outlined copy of Data._Representation(v19, v20);
    outlined copy of Data._Representation(v19, v20);
    v17 = *((_QWORD *)v23 + 1);
    v18 = *((_QWORD *)v23 + 2);
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    v21 = MEMORY[0x242633488](v19, v20, v17, v18);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    outlined consume of Data._Representation(v17, v18);
    outlined consume of Data._Representation(v19, v20);
    if ((v21 & 1) != 0)
    {
      v14 = v24[3];
      v15 = v24[4];
      outlined copy of Data._Representation(v14, v15);
      outlined copy of Data._Representation(v14, v15);
      v12 = *((_QWORD *)v23 + 3);
      v13 = *((_QWORD *)v23 + 4);
      outlined copy of Data._Representation(v12, v13);
      outlined copy of Data._Representation(v12, v13);
      v16 = MEMORY[0x242633488](v14, v15, v12, v13);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      outlined consume of Data._Representation(v12, v13);
      outlined consume of Data._Representation(v14, v15);
      if ((v16 & 1) != 0)
      {
        v8 = type metadata accessor for GKCrypto_EncryptedInvitation();
        v6 = (char *)v24 + *(int *)(v8 + 28);
        v9 = (void (*)(char *, char *, uint64_t))v26[2];
        v9(v30, v6, v25);
        v9(v28, &v23[*(int *)(v8 + 28)], v25);
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        v11 = dispatch thunk of static Equatable.== infix(_:_:)();
        v10 = (void (*)(char *, uint64_t))v26[1];
        v10(v28, v25);
        v10(v30, v25);
        return (v11 & 1) != 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t GKCrypto_EncryptedInvitation.hashValue.getter()
{
  type metadata accessor for GKCrypto_EncryptedInvitation();
  lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for Message.init() in conformance GKCrypto_EncryptedInvitation@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_EncryptedInvitation.init()(a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance GKCrypto_EncryptedInvitation()
{
  return static GKCrypto_EncryptedInvitation.protoMessageName.getter();
}

uint64_t protocol witness for Message.isInitialized.getter in conformance GKCrypto_EncryptedInvitation()
{
  return Message.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance GKCrypto_EncryptedInvitation@<X0>(uint64_t a1@<X8>)
{
  return GKCrypto_EncryptedInvitation.unknownFields.getter(a1);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance GKCrypto_EncryptedInvitation(uint64_t a1)
{
  return GKCrypto_EncryptedInvitation.unknownFields.setter(a1);
}

void (*protocol witness for Message.unknownFields.modify in conformance GKCrypto_EncryptedInvitation(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = GKCrypto_EncryptedInvitation.unknownFields.modify();
  return protocol witness for Message.unknownFields.modify in conformance GKCrypto_EncryptedInvitation;
}

void protocol witness for Message.unknownFields.modify in conformance GKCrypto_EncryptedInvitation(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance GKCrypto_EncryptedInvitation()
{
  return GKCrypto_EncryptedInvitation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GKCrypto_EncryptedInvitation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance GKCrypto_EncryptedInvitation()
{
  return Message.hash(into:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance GKCrypto_EncryptedInvitation()
{
  lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
  return _MessageImplementationBase.isEqualTo(message:)() & 1;
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance GKCrypto_EncryptedInvitation()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)() & 1;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance GKCrypto_EncryptedInvitation@<X0>(uint64_t a1@<X8>)
{
  return static GKCrypto_EncryptedInvitation._protobuf_nameMap.getter(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_EncryptedInvitation()
{
  lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_EncryptedInvitation()
{
  return GKCrypto_EncryptedInvitation.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_EncryptedInvitation()
{
  lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_EncryptedInvitation(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_EncryptedInvitation(_QWORD *a1, char *a2)
{
  return static GKCrypto_EncryptedInvitation.== infix(_:_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage;
  if (!lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage)
  {
    v0 = type metadata accessor for UnknownStorage();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE5BF20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_GroupBlob.RandomizedVerificationKeys?, GKCrypto_GroupBlob.RandomizedVerificationKeys?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v8 + 20);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.RandomizedVerificationKeys?, GKCrypto_GroupBlob.RandomizedVerificationKeys?))
              + 48);
  if (!v9())
  {
    swift_bridgeObjectRelease();
    v4 = v5 + *(int *)(v8 + 20);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

uint64_t outlined destroy of (GKCrypto_GroupBlob.GroupBlobPublicKeys?, GKCrypto_GroupBlob.GroupBlobPublicKeys?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v6 = a1 + *(int *)(v8 + 32);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.GroupBlobPublicKeys?, GKCrypto_GroupBlob.GroupBlobPublicKeys?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    v4 = v5 + *(int *)(v8 + 32);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

uint64_t outlined destroy of (GKCrypto_GroupBlob.GroupBlobSignatures?, GKCrypto_GroupBlob.GroupBlobSignatures?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v6 = a1 + *(int *)(v8 + 28);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupBlob.GroupBlobSignatures?, GKCrypto_GroupBlob.GroupBlobSignatures?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    v4 = v5 + *(int *)(v8 + 28);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminGroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminGroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminGroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminGroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob)
  {
    v0 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminGroupBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed)
  {
    v0 = type metadata accessor for GKCrypto_VersionedSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_VersionedSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed)
  {
    v0 = type metadata accessor for GKCrypto_VersionedSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_VersionedSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed)
  {
    v0 = type metadata accessor for GKCrypto_VersionedSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_VersionedSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed)
  {
    v0 = type metadata accessor for GKCrypto_VersionedSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_VersionedSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed)
  {
    v0 = type metadata accessor for GKCrypto_VersionedSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_VersionedSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_UserKeys.SignatureVerificationKeyPair] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_UserKeys.SignatureVerificationKeyPair] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_UserKeys.SignatureVerificationKeyPair] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_UserKeys.SignatureVerificationKeyPair]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_UserKeys.SignatureVerificationKeyPair] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GKCrypto_UserKeys.SignatureVerificationKeyPair]()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys.SignatureVerificationKeyPair, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys.SignatureVerificationKeyPair, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys.SignatureVerificationKeyPair, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys.SignatureVerificationKeyPair, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys.SignatureVerificationKeyPair, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_GroupAETextToSign.User] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_GroupAETextToSign.User] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_GroupAETextToSign.User] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_GroupAETextToSign.User]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_GroupAETextToSign.User] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GKCrypto_GroupAETextToSign.User]()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.User, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.User, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.User, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.User, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.User();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.User, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_VersionedSeed();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = a1 + *(int *)(v8 + 24);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_VersionedSeed?, GKCrypto_VersionedSeed?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    v4 = v5 + *(int *)(v8 + 24);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

uint64_t outlined destroy of (GKCrypto_GroupAETextToSign.GroupAssociatedData?, GKCrypto_GroupAETextToSign.GroupAssociatedData?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int (*v15)(void);

  v14 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v15 = *(unsigned int (**)(void))(*(_QWORD *)(v14 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v15)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v8 = a1 + *(int *)(v14 + 20);
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8);
    v11 = a1 + *(int *)(v14 + 24);
    v12 = type metadata accessor for GKCrypto_AdminGroupBlob();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24));
      ((void (*)(uint64_t, uint64_t))v10)(v11 + *(int *)(v12 + 24), v9);
    }
  }
  v7 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupAETextToSign.GroupAssociatedData?, GKCrypto_GroupAETextToSign.GroupAssociatedData?))
              + 48);
  if (!v15())
  {
    outlined consume of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    v2 = v7 + *(int *)(v14 + 20);
    v3 = type metadata accessor for UnknownStorage();
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v4(v2);
    v5 = v7 + *(int *)(v14 + 24);
    v6 = type metadata accessor for GKCrypto_AdminGroupBlob();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      ((void (*)(uint64_t, uint64_t))v4)(v5 + *(int *)(v6 + 24), v3);
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_AdminGroupBlob?, GKCrypto_AdminGroupBlob?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    v6 = a1 + *(int *)(v8 + 24);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_AdminGroupBlob?, GKCrypto_AdminGroupBlob?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    v4 = v5 + *(int *)(v8 + 24);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.GroupAssociatedData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.GroupAssociatedData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.GroupAssociatedData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.GroupAssociatedData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData)
  {
    v0 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAETextToSign.GroupAssociatedData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt)
  {
    v0 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAEDataToEncrypt, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt)
  {
    v0 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAEDataToEncrypt, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt)
  {
    v0 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAEDataToEncrypt, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt)
  {
    v0 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAEDataToEncrypt, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt)
  {
    v0 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAEDataToEncrypt, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData)
  {
    v0 = type metadata accessor for GKCrypto_AdminMetaData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminMetaData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData)
  {
    v0 = type metadata accessor for GKCrypto_AdminMetaData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminMetaData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData)
  {
    v0 = type metadata accessor for GKCrypto_AdminMetaData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminMetaData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData)
  {
    v0 = type metadata accessor for GKCrypto_AdminMetaData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminMetaData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData)
  {
    v0 = type metadata accessor for GKCrypto_AdminMetaData();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminMetaData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_AdminMetaData?, GKCrypto_AdminMetaData?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_AdminMetaData();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v6 = a1 + *(int *)(v8 + 20);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_AdminMetaData?, GKCrypto_AdminMetaData?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    v4 = v5 + *(int *)(v8 + 20);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText)
  {
    v0 = type metadata accessor for GKCrypto_AdminPlainText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminPlainText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText)
  {
    v0 = type metadata accessor for GKCrypto_AdminPlainText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminPlainText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText)
  {
    v0 = type metadata accessor for GKCrypto_AdminPlainText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminPlainText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText)
  {
    v0 = type metadata accessor for GKCrypto_AdminPlainText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminPlainText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText)
  {
    v0 = type metadata accessor for GKCrypto_AdminPlainText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminPlainText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite;
  if (!lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite)
  {
    v0 = type metadata accessor for GKCrypto_Invite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Invite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite;
  if (!lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite)
  {
    v0 = type metadata accessor for GKCrypto_Invite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Invite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite;
  if (!lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite)
  {
    v0 = type metadata accessor for GKCrypto_Invite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Invite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite;
  if (!lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite)
  {
    v0 = type metadata accessor for GKCrypto_Invite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Invite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite;
  if (!lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite)
  {
    v0 = type metadata accessor for GKCrypto_Invite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_Invite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_Invite and conformance GKCrypto_Invite);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_Invite?, GKCrypto_Invite?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_Invite();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
    v6 = a1 + *(int *)(v8 + 52);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_Invite?, GKCrypto_Invite?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 120), *(_QWORD *)(v5 + 128));
    v4 = v5 + *(int *)(v8 + 52);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite)
  {
    v0 = type metadata accessor for GKCrypto_SignedInvite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedInvite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite)
  {
    v0 = type metadata accessor for GKCrypto_SignedInvite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedInvite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite)
  {
    v0 = type metadata accessor for GKCrypto_SignedInvite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedInvite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite)
  {
    v0 = type metadata accessor for GKCrypto_SignedInvite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedInvite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite)
  {
    v0 = type metadata accessor for GKCrypto_SignedInvite();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedInvite, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_RSVP?, GKCrypto_RSVP?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_RSVP();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    v6 = a1 + *(int *)(v8 + 36);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_RSVP?, GKCrypto_RSVP?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64));
    v4 = v5 + *(int *)(v8 + 36);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP;
  if (!lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP)
  {
    v0 = type metadata accessor for GKCrypto_SignedRSVP();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SignedRSVP, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText;
  if (!lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText)
  {
    v0 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_HPKEOneShotCipherText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText;
  if (!lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText)
  {
    v0 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_HPKEOneShotCipherText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText;
  if (!lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText)
  {
    v0 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_HPKEOneShotCipherText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText;
  if (!lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText)
  {
    v0 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_HPKEOneShotCipherText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText;
  if (!lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText)
  {
    v0 = type metadata accessor for GKCrypto_HPKEOneShotCipherText();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_HPKEOneShotCipherText, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlob();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlob, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of (GKCrypto_GroupAuthenticatedCiphertext.Context?, GKCrypto_GroupAuthenticatedCiphertext.Context?)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int (*v9)(void);

  v8 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v9 = *(unsigned int (**)(void))(*(_QWORD *)(v8 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v6 = a1 + *(int *)(v8 + 28);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6);
  }
  v5 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GKCrypto_GroupAuthenticatedCiphertext.Context?, GKCrypto_GroupAuthenticatedCiphertext.Context?))
              + 48);
  if (!v9())
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    v4 = v5 + *(int *)(v8 + 28);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext.Context, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext.Context, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext.Context, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext.Context, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context)
  {
    v0 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAuthenticatedCiphertext.Context, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed)
  {
    v0 = type metadata accessor for GKCrypto_AdminSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed)
  {
    v0 = type metadata accessor for GKCrypto_AdminSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed)
  {
    v0 = type metadata accessor for GKCrypto_AdminSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed)
  {
    v0 = type metadata accessor for GKCrypto_AdminSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed;
  if (!lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed)
  {
    v0 = type metadata accessor for GKCrypto_AdminSeed();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_AdminSeed, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_SeedBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_SeedBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest)
  {
    v0 = type metadata accessor for GKCrypto_RSVPQueueRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPQueueRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest)
  {
    v0 = type metadata accessor for GKCrypto_RSVPQueueRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPQueueRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest)
  {
    v0 = type metadata accessor for GKCrypto_RSVPQueueRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPQueueRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest)
  {
    v0 = type metadata accessor for GKCrypto_RSVPQueueRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPQueueRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest)
  {
    v0 = type metadata accessor for GKCrypto_RSVPQueueRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_RSVPQueueRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys)
  {
    v0 = type metadata accessor for GKCrypto_KeyChainUserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_KeyChainUserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys)
  {
    v0 = type metadata accessor for GKCrypto_KeyChainUserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_KeyChainUserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys)
  {
    v0 = type metadata accessor for GKCrypto_KeyChainUserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_KeyChainUserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys)
  {
    v0 = type metadata accessor for GKCrypto_KeyChainUserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_KeyChainUserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys)
  {
    v0 = type metadata accessor for GKCrypto_KeyChainUserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_KeyChainUserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo)
  {
    v0 = type metadata accessor for GKCrypto_GroupAccessInfo();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAccessInfo, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo)
  {
    v0 = type metadata accessor for GKCrypto_GroupAccessInfo();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAccessInfo, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo)
  {
    v0 = type metadata accessor for GKCrypto_GroupAccessInfo();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAccessInfo, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo)
  {
    v0 = type metadata accessor for GKCrypto_GroupAccessInfo();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAccessInfo, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo)
  {
    v0 = type metadata accessor for GKCrypto_GroupAccessInfo();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupAccessInfo, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlobRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlobRequest, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation;
  if (!lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation)
  {
    v0 = type metadata accessor for GKCrypto_EncryptedInvitation();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_EncryptedInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation;
  if (!lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation)
  {
    v0 = type metadata accessor for GKCrypto_EncryptedInvitation();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_EncryptedInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation;
  if (!lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation)
  {
    v0 = type metadata accessor for GKCrypto_EncryptedInvitation();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_EncryptedInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation;
  if (!lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation)
  {
    v0 = type metadata accessor for GKCrypto_EncryptedInvitation();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_EncryptedInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation;
  if (!lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation)
  {
    v0 = type metadata accessor for GKCrypto_EncryptedInvitation();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_EncryptedInvitation, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Hashable in GKCrypto_Role()
{
  return lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
}

unint64_t base witness table accessor for RawRepresentable in GKCrypto_Role()
{
  return lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
}

unint64_t base witness table accessor for Equatable in GKCrypto_Role()
{
  return lazy protocol witness table accessor for type GKCrypto_Role and conformance GKCrypto_Role();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GKCrypto_Role()
{
  return lazy protocol witness table accessor for type [GKCrypto_Role] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_Role] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_Role] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_Role]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_Role] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Hashable in GKCrypto_RSVP.Response()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
}

unint64_t base witness table accessor for RawRepresentable in GKCrypto_RSVP.Response()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVP.Response()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP.Response and conformance GKCrypto_RSVP.Response();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GKCrypto_RSVP.Response()
{
  return lazy protocol witness table accessor for type [GKCrypto_RSVP.Response] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_RSVP.Response] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_RSVP.Response] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_RSVP.Response] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_RSVP.Response]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_RSVP.Response] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupHandle()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupHandle()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupHandle()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupHandle()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle and conformance GKCrypto_GroupHandle();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupHandle.CiphertextAndTag()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupHandle.CiphertextAndTag()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupHandle.CiphertextAndTag()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupHandle.CiphertextAndTag()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_AdminGroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
}

unint64_t base witness table accessor for Message in GKCrypto_AdminGroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
}

unint64_t base witness table accessor for Hashable in GKCrypto_AdminGroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
}

unint64_t base witness table accessor for Equatable in GKCrypto_AdminGroupBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminGroupBlob and conformance GKCrypto_AdminGroupBlob();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_VersionedSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
}

unint64_t base witness table accessor for Message in GKCrypto_VersionedSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
}

unint64_t base witness table accessor for Hashable in GKCrypto_VersionedSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
}

unint64_t base witness table accessor for Equatable in GKCrypto_VersionedSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_VersionedSeed and conformance GKCrypto_VersionedSeed();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_UserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
}

unint64_t base witness table accessor for Message in GKCrypto_UserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
}

unint64_t base witness table accessor for Hashable in GKCrypto_UserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_UserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
}

unint64_t base witness table accessor for Message in GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
}

unint64_t base witness table accessor for Hashable in GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
}

unint64_t base witness table accessor for Equatable in GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return lazy protocol witness table accessor for type GKCrypto_UserKeys.SignatureVerificationKeyPair and conformance GKCrypto_UserKeys.SignatureVerificationKeyPair();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAETextToSign()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAETextToSign()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAETextToSign()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAETextToSign()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign and conformance GKCrypto_GroupAETextToSign();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAETextToSign.User()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAETextToSign.User()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAETextToSign.User()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAETextToSign.User()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.User and conformance GKCrypto_GroupAETextToSign.User();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAETextToSign.GroupAssociatedData and conformance GKCrypto_GroupAETextToSign.GroupAssociatedData();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAEDataToEncrypt()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAEDataToEncrypt()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAEDataToEncrypt()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAEDataToEncrypt()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAEDataToEncrypt and conformance GKCrypto_GroupAEDataToEncrypt();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_AdminMetaData()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
}

unint64_t base witness table accessor for Message in GKCrypto_AdminMetaData()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
}

unint64_t base witness table accessor for Hashable in GKCrypto_AdminMetaData()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
}

unint64_t base witness table accessor for Equatable in GKCrypto_AdminMetaData()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminMetaData and conformance GKCrypto_AdminMetaData();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_AdminPlainText()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
}

unint64_t base witness table accessor for Message in GKCrypto_AdminPlainText()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
}

unint64_t base witness table accessor for Hashable in GKCrypto_AdminPlainText()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
}

unint64_t base witness table accessor for Equatable in GKCrypto_AdminPlainText()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminPlainText and conformance GKCrypto_AdminPlainText();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_Invite()
{
  return lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
}

unint64_t base witness table accessor for Message in GKCrypto_Invite()
{
  return lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
}

unint64_t base witness table accessor for Hashable in GKCrypto_Invite()
{
  return lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
}

unint64_t base witness table accessor for Equatable in GKCrypto_Invite()
{
  return lazy protocol witness table accessor for type GKCrypto_Invite and conformance GKCrypto_Invite();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SignedInvite()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
}

unint64_t base witness table accessor for Message in GKCrypto_SignedInvite()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
}

unint64_t base witness table accessor for Hashable in GKCrypto_SignedInvite()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SignedInvite()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedInvite and conformance GKCrypto_SignedInvite();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_RSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
}

unint64_t base witness table accessor for Message in GKCrypto_RSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
}

unint64_t base witness table accessor for Hashable in GKCrypto_RSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVP and conformance GKCrypto_RSVP();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SignedRSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
}

unint64_t base witness table accessor for Message in GKCrypto_SignedRSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
}

unint64_t base witness table accessor for Hashable in GKCrypto_SignedRSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SignedRSVP()
{
  return lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_RSVPResponse()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
}

unint64_t base witness table accessor for Message in GKCrypto_RSVPResponse()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
}

unint64_t base witness table accessor for Hashable in GKCrypto_RSVPResponse()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVPResponse()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_HPKEOneShotCipherText()
{
  return lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
}

unint64_t base witness table accessor for Message in GKCrypto_HPKEOneShotCipherText()
{
  return lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
}

unint64_t base witness table accessor for Hashable in GKCrypto_HPKEOneShotCipherText()
{
  return lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
}

unint64_t base witness table accessor for Equatable in GKCrypto_HPKEOneShotCipherText()
{
  return lazy protocol witness table accessor for type GKCrypto_HPKEOneShotCipherText and conformance GKCrypto_HPKEOneShotCipherText();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SeedBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
}

unint64_t base witness table accessor for Message in GKCrypto_SeedBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
}

unint64_t base witness table accessor for Hashable in GKCrypto_SeedBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SeedBlob()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAuthenticatedCiphertext()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAuthenticatedCiphertext()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAuthenticatedCiphertext()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAuthenticatedCiphertext()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext and conformance GKCrypto_GroupAuthenticatedCiphertext();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAuthenticatedCiphertext.Context and conformance GKCrypto_GroupAuthenticatedCiphertext.Context();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_AdminSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
}

unint64_t base witness table accessor for Message in GKCrypto_AdminSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
}

unint64_t base witness table accessor for Hashable in GKCrypto_AdminSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
}

unint64_t base witness table accessor for Equatable in GKCrypto_AdminSeed()
{
  return lazy protocol witness table accessor for type GKCrypto_AdminSeed and conformance GKCrypto_AdminSeed();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_SeedBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
}

unint64_t base witness table accessor for Message in GKCrypto_SeedBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
}

unint64_t base witness table accessor for Hashable in GKCrypto_SeedBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
}

unint64_t base witness table accessor for Equatable in GKCrypto_SeedBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_SeedBlobRequest and conformance GKCrypto_SeedBlobRequest();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_RSVPQueueRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
}

unint64_t base witness table accessor for Message in GKCrypto_RSVPQueueRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
}

unint64_t base witness table accessor for Hashable in GKCrypto_RSVPQueueRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
}

unint64_t base witness table accessor for Equatable in GKCrypto_RSVPQueueRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_RSVPQueueRequest and conformance GKCrypto_RSVPQueueRequest();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_KeyChainUserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
}

unint64_t base witness table accessor for Message in GKCrypto_KeyChainUserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
}

unint64_t base witness table accessor for Hashable in GKCrypto_KeyChainUserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
}

unint64_t base witness table accessor for Equatable in GKCrypto_KeyChainUserKeys()
{
  return lazy protocol witness table accessor for type GKCrypto_KeyChainUserKeys and conformance GKCrypto_KeyChainUserKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupAccessInfo()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupAccessInfo()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupAccessInfo()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupAccessInfo()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupAccessInfo and conformance GKCrypto_GroupAccessInfo();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_GroupBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
}

unint64_t base witness table accessor for Message in GKCrypto_GroupBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
}

unint64_t base witness table accessor for Hashable in GKCrypto_GroupBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
}

unint64_t base witness table accessor for Equatable in GKCrypto_GroupBlobRequest()
{
  return lazy protocol witness table accessor for type GKCrypto_GroupBlobRequest and conformance GKCrypto_GroupBlobRequest();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GKCrypto_EncryptedInvitation()
{
  return lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
}

unint64_t base witness table accessor for Message in GKCrypto_EncryptedInvitation()
{
  return lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
}

unint64_t base witness table accessor for Hashable in GKCrypto_EncryptedInvitation()
{
  return lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
}

unint64_t base witness table accessor for Equatable in GKCrypto_EncryptedInvitation()
{
  return lazy protocol witness table accessor for type GKCrypto_EncryptedInvitation and conformance GKCrypto_EncryptedInvitation();
}

ValueMetadata *type metadata accessor for _GeneratedWithProtocGenSwiftVersion()
{
  return &type metadata for _GeneratedWithProtocGenSwiftVersion;
}

ValueMetadata *type metadata accessor for _GeneratedWithProtocGenSwiftVersion._2()
{
  return &type metadata for _GeneratedWithProtocGenSwiftVersion._2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for GKCrypto_Role(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 9))
      v3 = *(_QWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GKCrypto_Role(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = result;
  v4 = (_BYTE *)(result + 9);
  if (a2)
  {
    result = 0;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)v3 = (a2 - 1);
    if (a3)
      *v4 = 1;
  }
  else if (a3)
  {
    *v4 = 0;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_Role(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE1768] - 8) + 48))(a1, 2);
}

uint64_t destructiveInjectEnumTag for GKCrypto_Role(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE1768] - 8) + 56))(a1, a2, 2);
}

ValueMetadata *type metadata accessor for GKCrypto_Role()
{
  return &type metadata for GKCrypto_Role;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupHandle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v17;

  v17 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v17 & 0x20000) != 0)
  {
    v12 = *a2;
    swift_retain();
    *a1 = v12;
    return *a1 + ((v17 + 16) & ~(unint64_t)v17);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v9 = a2[4];
    swift_bridgeObjectRetain();
    a1[4] = v9;
    v11 = (char *)a1 + *(int *)(a3 + 28);
    v10 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v11, v10);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_GroupHandle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[4];
  swift_bridgeObjectRetain();
  a1[4] = v9;
  v11 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v11, (char *)a2 + v11);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_GroupHandle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9 = *a2;
  v10 = a2[1];
  outlined copy of Data._Representation(*a2, v10);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = a2[2];
  v12 = a2[3];
  outlined copy of Data._Representation(v11, v12);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  outlined consume of Data._Representation(v5, v6);
  v13 = a2[4];
  swift_bridgeObjectRetain();
  a1[4] = v13;
  swift_bridgeObjectRelease();
  v15 = *(int *)(a3 + 28);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))((char *)a1 + v15, (char *)a2 + v15);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_GroupHandle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 28);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupHandle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41368C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 32) < 0x100000000uLL)
      v7 = *(_QWORD *)(a1 + 32);
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 28), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupHandle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D413784(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupHandle()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    outlined copy of Data._Representation(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v11 = a2[6];
    v12 = a2[7];
    outlined copy of Data._Representation(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 32);
    v13 = (char *)a2 + *(int *)(a3 + 32);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v14, v13);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v5 = *(int *)(a2 + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[4];
  v10 = a2[5];
  outlined copy of Data._Representation(v9, v10);
  a1[4] = v9;
  a1[5] = v10;
  v11 = a2[6];
  v12 = a2[7];
  outlined copy of Data._Representation(v11, v12);
  a1[6] = v11;
  a1[7] = v12;
  v14 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v13 = *a2;
  v14 = a2[1];
  outlined copy of Data._Representation(*a2, v14);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v13;
  a1[1] = v14;
  outlined consume of Data._Representation(v3, v4);
  v15 = a2[2];
  v16 = a2[3];
  outlined copy of Data._Representation(v15, v16);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v15;
  a1[3] = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = a2[4];
  v18 = a2[5];
  outlined copy of Data._Representation(v17, v18);
  v7 = a1[4];
  v8 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  outlined consume of Data._Representation(v7, v8);
  v19 = a2[6];
  v20 = a2[7];
  outlined copy of Data._Representation(v19, v20);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v19;
  a1[7] = v20;
  outlined consume of Data._Representation(v9, v10);
  v22 = *(int *)(a3 + 32);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 24))((char *)a1 + v22, (char *)a2 + v22);
  return a1;
}

char *initializeWithTake for GKCrypto_GroupHandle.CiphertextAndTag(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v5 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a2[5];
  v12 = a1[4];
  v13 = a1[5];
  a1[4] = a2[4];
  a1[5] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a2[7];
  v15 = a1[6];
  v16 = a1[7];
  a1[6] = a2[6];
  a1[7] = v14;
  outlined consume of Data._Representation(v15, v16);
  v20 = *(int *)(a3 + 32);
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 40))((char *)a1 + v20, (char *)a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupHandle.CiphertextAndTag()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D413F08(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupHandle.CiphertextAndTag()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D414000(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 32)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupHandle.CiphertextAndTag()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupBlob(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *);
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v47;

  v47 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v47 & 0x20000) != 0)
  {
    v42 = *a2;
    swift_retain();
    *a1 = v42;
    return *a1 + ((v47 + 16) & ~(unint64_t)v47);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v30 = a2[1];
    v31 = a2[2];
    outlined copy of Data._Representation(v30, v31);
    a1[1] = v30;
    a1[2] = v31;
    v32 = a2[3];
    v33 = a2[4];
    outlined copy of Data._Representation(v32, v33);
    a1[3] = v32;
    a1[4] = v33;
    v35 = (char *)a1 + a3[7];
    v34 = (char *)a2 + a3[7];
    v36 = type metadata accessor for UnknownStorage();
    v37 = *(void (**)(char *, char *))(*(_QWORD *)(v36 - 8) + 16);
    v37(v35, v34);
    v38 = (_QWORD *)((char *)a1 + a3[8]);
    v39 = (uint64_t *)((char *)a2 + a3[8]);
    v40 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v41 + 48))(v39, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v29 = *v39;
      swift_bridgeObjectRetain();
      *v38 = v29;
      ((void (*)(char *, char *, uint64_t))v37)((char *)v38 + *(int *)(v40 + 20), (char *)v39 + *(int *)(v40 + 20), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    __dst = (_QWORD *)((char *)a1 + a3[9]);
    __src = (uint64_t *)((char *)a2 + a3[9]);
    v27 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v17 = *__src;
      v18 = __src[1];
      outlined copy of Data._Representation(*__src, v18);
      *__dst = v17;
      __dst[1] = v18;
      v19 = __src[2];
      v20 = __src[3];
      outlined copy of Data._Representation(v19, v20);
      __dst[2] = v19;
      __dst[3] = v20;
      v21 = __src[4];
      v22 = __src[5];
      outlined copy of Data._Representation(v21, v22);
      __dst[4] = v21;
      __dst[5] = v22;
      v23 = __src[6];
      v24 = __src[7];
      outlined copy of Data._Representation(v23, v24);
      __dst[6] = v23;
      __dst[7] = v24;
      ((void (*)(char *, char *, uint64_t))v37)((char *)__dst + *(int *)(v27 + 32), (char *)__src + *(int *)(v27 + 32), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    v13 = (_QWORD *)((char *)a1 + a3[10]);
    v14 = (uint64_t *)((char *)a2 + a3[10]);
    v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(v14, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v7 = *v14;
      v8 = v14[1];
      outlined copy of Data._Representation(*v14, v8);
      *v13 = v7;
      v13[1] = v8;
      v9 = v14[2];
      v10 = v14[3];
      outlined copy of Data._Representation(v9, v10);
      v13[2] = v9;
      v13[3] = v10;
      v11 = v14[4];
      v12 = v14[5];
      outlined copy of Data._Representation(v11, v12);
      v13[4] = v11;
      v13[5] = v12;
      ((void (*)(char *, char *, uint64_t))v37)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupBlob(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v7 = a2[7];
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(a1 + v7);
  v11 = a2[8];
  v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(a1 + v11, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v9)(a1 + v11 + *(int *)(v13 + 20), v8);
  }
  v5 = a1 + a2[9];
  v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    ((void (*)(uint64_t, uint64_t))v9)(v5 + *(int *)(v6 + 32), v8);
  }
  v3 = a1 + a2[10];
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v3 + *(int *)(v4 + 28), v8);
  }
  return result;
}

uint64_t initializeWithCopy for GKCrypto_GroupBlob(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v30, v31);
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v31;
  v32 = *(_QWORD *)(a2 + 24);
  v33 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v32, v33);
  *(_QWORD *)(a1 + 24) = v32;
  *(_QWORD *)(a1 + 32) = v33;
  v34 = a3[7];
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  v37(a1 + v34, a2 + v34);
  v39 = a3[8];
  v41 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v42 + 48))(a2 + v39, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v39), (const void *)(a2 + v39), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v29 = *(_QWORD *)(a2 + v39);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + v39) = v29;
    ((void (*)(uint64_t, uint64_t, uint64_t))v37)(a1 + v39 + *(int *)(v41 + 20), a2 + v39 + *(int *)(v41 + 20), v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(a1 + v39, 0, 1, v41);
  }
  __dst = (_QWORD *)(a1 + a3[9]);
  __src = (uint64_t *)(a2 + a3[9]);
  v27 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v17 = *__src;
    v18 = __src[1];
    outlined copy of Data._Representation(*__src, v18);
    *__dst = v17;
    __dst[1] = v18;
    v19 = __src[2];
    v20 = __src[3];
    outlined copy of Data._Representation(v19, v20);
    __dst[2] = v19;
    __dst[3] = v20;
    v21 = __src[4];
    v22 = __src[5];
    outlined copy of Data._Representation(v21, v22);
    __dst[4] = v21;
    __dst[5] = v22;
    v23 = __src[6];
    v24 = __src[7];
    outlined copy of Data._Representation(v23, v24);
    __dst[6] = v23;
    __dst[7] = v24;
    ((void (*)(char *, char *, uint64_t))v37)((char *)__dst + *(int *)(v27 + 32), (char *)__src + *(int *)(v27 + 32), v36);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  v13 = (_QWORD *)(a1 + a3[10]);
  v14 = (uint64_t *)(a2 + a3[10]);
  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(v14, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v7 = *v14;
    v8 = v14[1];
    outlined copy of Data._Representation(*v14, v8);
    *v13 = v7;
    v13[1] = v8;
    v9 = v14[2];
    v10 = v14[3];
    outlined copy of Data._Representation(v9, v10);
    v13[2] = v9;
    v13[3] = v10;
    v11 = v14[4];
    v12 = v14[5];
    outlined copy of Data._Representation(v11, v12);
    v13[4] = v11;
    v13[5] = v12;
    ((void (*)(char *, char *, uint64_t))v37)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v36);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupBlob(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *__src;
  _QWORD *__dst;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t *, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v68 = *(_QWORD *)(a2 + 8);
  v69 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v68, v69);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v68;
  *(_QWORD *)(a1 + 16) = v69;
  outlined consume of Data._Representation(v3, v4);
  v70 = *(_QWORD *)(a2 + 24);
  v71 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v70, v71);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v70;
  *(_QWORD *)(a1 + 32) = v71;
  outlined consume of Data._Representation(v5, v6);
  v72 = a3[7];
  v74 = type metadata accessor for UnknownStorage();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(void (**)(uint64_t, uint64_t))(v75 + 24);
  v76(a1 + v72, a2 + v72);
  v78 = a3[8];
  v80 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v82)(a1 + v78, 1))
  {
    if (v82(a2 + v78, 1, v80))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v78), (const void *)(a2 + v78), *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v66 = *(_QWORD *)(a2 + v78);
      swift_bridgeObjectRetain();
      *(_QWORD *)(a1 + v78) = v66;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(a1 + v78 + *(int *)(v80 + 20), a2 + v78 + *(int *)(v80 + 20), v74);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(a1 + v78, 0, 1, v80);
    }
  }
  else if (v82(a2 + v78, 1, v80))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys(a1 + v78);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v78), (const void *)(a2 + v78), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v67 = *(_QWORD *)(a2 + v78);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + v78) = v67;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v76)(a1 + v78 + *(int *)(v80 + 20), a2 + v78 + *(int *)(v80 + 20), v74);
  }
  v62 = (_QWORD *)(a1 + a3[9]);
  v61 = (uint64_t *)(a2 + a3[9]);
  v63 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v65)(v62, 1))
  {
    if (v65(v61, 1, v63))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v62, v61, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v45 = *v61;
      v46 = v61[1];
      outlined copy of Data._Representation(*v61, v46);
      *v62 = v45;
      v62[1] = v46;
      v47 = v61[2];
      v48 = v61[3];
      outlined copy of Data._Representation(v47, v48);
      v62[2] = v47;
      v62[3] = v48;
      v49 = v61[4];
      v50 = v61[5];
      outlined copy of Data._Representation(v49, v50);
      v62[4] = v49;
      v62[5] = v50;
      v51 = v61[6];
      v52 = v61[7];
      outlined copy of Data._Representation(v51, v52);
      v62[6] = v51;
      v62[7] = v52;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)v62 + *(int *)(v63 + 32), (char *)v61 + *(int *)(v63 + 32), v74);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v62, 0, 1, v63);
    }
  }
  else if (v65(v61, 1, v63))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v62);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v62, v61, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v53 = *v61;
    v54 = v61[1];
    outlined copy of Data._Representation(*v61, v54);
    v9 = *v62;
    v10 = v62[1];
    *v62 = v53;
    v62[1] = v54;
    outlined consume of Data._Representation(v9, v10);
    v55 = v61[2];
    v56 = v61[3];
    outlined copy of Data._Representation(v55, v56);
    v11 = v62[2];
    v12 = v62[3];
    v62[2] = v55;
    v62[3] = v56;
    outlined consume of Data._Representation(v11, v12);
    v57 = v61[4];
    v58 = v61[5];
    outlined copy of Data._Representation(v57, v58);
    v13 = v62[4];
    v14 = v62[5];
    v62[4] = v57;
    v62[5] = v58;
    outlined consume of Data._Representation(v13, v14);
    v59 = v61[6];
    v60 = v61[7];
    outlined copy of Data._Representation(v59, v60);
    v15 = v62[6];
    v16 = v62[7];
    v62[6] = v59;
    v62[7] = v60;
    outlined consume of Data._Representation(v15, v16);
    ((void (*)(char *, char *, uint64_t))v76)((char *)v62 + *(int *)(v63 + 32), (char *)v61 + *(int *)(v63 + 32), v74);
  }
  __dst = (_QWORD *)(a1 + a3[10]);
  __src = (uint64_t *)(a2 + a3[10]);
  v42 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v44)(__dst, 1))
  {
    if (v44(__src, 1, v42))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v28 = *__src;
      v29 = __src[1];
      outlined copy of Data._Representation(*__src, v29);
      *__dst = v28;
      __dst[1] = v29;
      v30 = __src[2];
      v31 = __src[3];
      outlined copy of Data._Representation(v30, v31);
      __dst[2] = v30;
      __dst[3] = v31;
      v32 = __src[4];
      v33 = __src[5];
      outlined copy of Data._Representation(v32, v33);
      __dst[4] = v32;
      __dst[5] = v33;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)__dst + *(int *)(v42 + 28), (char *)__src + *(int *)(v42 + 28), v74);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
    }
  }
  else if (v44(__src, 1, v42))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)__dst);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v34 = *__src;
    v35 = __src[1];
    outlined copy of Data._Representation(*__src, v35);
    v19 = *__dst;
    v20 = __dst[1];
    *__dst = v34;
    __dst[1] = v35;
    outlined consume of Data._Representation(v19, v20);
    v36 = __src[2];
    v37 = __src[3];
    outlined copy of Data._Representation(v36, v37);
    v21 = __dst[2];
    v22 = __dst[3];
    __dst[2] = v36;
    __dst[3] = v37;
    outlined consume of Data._Representation(v21, v22);
    v38 = __src[4];
    v39 = __src[5];
    outlined copy of Data._Representation(v38, v39);
    v23 = __dst[4];
    v24 = __dst[5];
    __dst[4] = v38;
    __dst[5] = v39;
    outlined consume of Data._Representation(v23, v24);
    ((void (*)(char *, char *, uint64_t))v76)((char *)__dst + *(int *)(v42 + 28), (char *)__src + *(int *)(v42 + 28), v74);
  }
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupBlob(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v15 = a3[7];
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(a1 + v15, a2 + v15);
  v20 = a3[8];
  v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v23 + 48))(a2 + v20, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v20), (const void *)(a2 + v20), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(a1 + v20 + *(int *)(v22 + 20), a2 + v20 + *(int *)(v22 + 20), v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(a1 + v20, 0, 1, v22);
  }
  __dst = (_OWORD *)(a1 + a3[9]);
  __src = (_OWORD *)(a2 + a3[9]);
  v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v14 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    ((void (*)(char *, char *, uint64_t))v18)((char *)__dst + *(int *)(v13 + 32), (char *)__src + *(int *)(v13 + 32), v17);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v7 = (_OWORD *)(a1 + a3[10]);
  v8 = (_OWORD *)(a2 + a3[10]);
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v10 + 48))(v8, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v7[1] = v8[1];
    v7[2] = v8[2];
    ((void (*)(char *, char *, uint64_t))v18)((char *)v7 + *(int *)(v9 + 28), (char *)v8 + *(int *)(v9 + 28), v17);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupBlob(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(_OWORD *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v49 = a3[7];
  v51 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(void (**)(uint64_t, uint64_t))(v52 + 40);
  v53(a1 + v49, a2 + v49);
  v55 = a3[8];
  v57 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v59)(a1 + v55, 1))
  {
    if (v59(a2 + v55, 1, v57))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v55), (const void *)(a2 + v55), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(a1 + v55 + *(int *)(v57 + 20), a2 + v55 + *(int *)(v57 + 20), v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(a1 + v55, 0, 1, v57);
    }
  }
  else if (v59(a2 + v55, 1, v57))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys(a1 + v55);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v55), (const void *)(a2 + v55), *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *(_QWORD *)(a1 + v55) = *(_QWORD *)(a2 + v55);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v53)(a1 + v55 + *(int *)(v57 + 20), a2 + v55 + *(int *)(v57 + 20), v51);
  }
  v45 = (_OWORD *)(a1 + a3[9]);
  __src = (_OWORD *)(a2 + a3[9]);
  v46 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v47 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v48)(v45, 1))
  {
    if (v48(__src, 1, v46))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v45, __src, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *v45 = *__src;
      v45[1] = __src[1];
      v45[2] = __src[2];
      v45[3] = __src[3];
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v45 + *(int *)(v46 + 32), (char *)__src + *(int *)(v46 + 32), v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v46);
    }
  }
  else if (v48(__src, 1, v46))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v45);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v45, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v13 = *((_QWORD *)__src + 1);
    v14 = *(_QWORD *)v45;
    v15 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v45 = *(_QWORD *)__src;
    *((_QWORD *)v45 + 1) = v13;
    outlined consume of Data._Representation(v14, v15);
    v16 = *((_QWORD *)__src + 3);
    v17 = *((_QWORD *)v45 + 2);
    v18 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v45 + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)v45 + 3) = v16;
    outlined consume of Data._Representation(v17, v18);
    v19 = *((_QWORD *)__src + 5);
    v20 = *((_QWORD *)v45 + 4);
    v21 = *((_QWORD *)v45 + 5);
    *((_QWORD *)v45 + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)v45 + 5) = v19;
    outlined consume of Data._Representation(v20, v21);
    v22 = *((_QWORD *)__src + 7);
    v23 = *((_QWORD *)v45 + 6);
    v24 = *((_QWORD *)v45 + 7);
    *((_QWORD *)v45 + 6) = *((_QWORD *)__src + 6);
    *((_QWORD *)v45 + 7) = v22;
    outlined consume of Data._Representation(v23, v24);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v45 + *(int *)(v46 + 32), (char *)__src + *(int *)(v46 + 32), v51);
  }
  v40 = (_OWORD *)(a1 + a3[10]);
  v39 = (_OWORD *)(a2 + a3[10]);
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v42 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v43)(v40, 1))
  {
    if (v43(v39, 1, v41))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      *v40 = *v39;
      v40[1] = v39[1];
      v40[2] = v39[2];
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v40 + *(int *)(v41 + 28), (char *)v39 + *(int *)(v41 + 28), v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v41);
    }
  }
  else if (v43(v39, 1, v41))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v40);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v27 = *((_QWORD *)v39 + 1);
    v28 = *(_QWORD *)v40;
    v29 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v39;
    *((_QWORD *)v40 + 1) = v27;
    outlined consume of Data._Representation(v28, v29);
    v30 = *((_QWORD *)v39 + 3);
    v31 = *((_QWORD *)v40 + 2);
    v32 = *((_QWORD *)v40 + 3);
    *((_QWORD *)v40 + 2) = *((_QWORD *)v39 + 2);
    *((_QWORD *)v40 + 3) = v30;
    outlined consume of Data._Representation(v31, v32);
    v33 = *((_QWORD *)v39 + 5);
    v34 = *((_QWORD *)v40 + 4);
    v35 = *((_QWORD *)v40 + 5);
    *((_QWORD *)v40 + 4) = *((_QWORD *)v39 + 4);
    *((_QWORD *)v40 + 5) = v33;
    outlined consume of Data._Representation(v34, v35);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v40 + *(int *)(v41 + 28), (char *)v39 + *(int *)(v41 + 28), v51);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D416044(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(_QWORD *)(v12 - 8);
    if (a2 == *(_DWORD *)(v13 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))(a1 + a3[7], a2, v12);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      v11 = *(_QWORD *)(v10 - 8);
      if (a2 == *(_DWORD *)(v11 + 84))
      {
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1 + a3[8], a2, v10);
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        v9 = *(_QWORD *)(v8 - 8);
        if (a2 == *(_DWORD *)(v9 + 84))
        {
          return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + a3[9], a2, v8);
        }
        else
        {
          v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
          v7 = *(_QWORD *)(v6 - 8);
          if (a2 == *(_DWORD *)(v7 + 84))
            return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + a3[10], a2, v6);
          else
            __break(1u);
        }
      }
    }
  }
  return v14;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupBlob()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D416250(uint64_t result, unsigned int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(_QWORD *)(v9 - 8);
    if (a3 == *(_DWORD *)(v10 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(v11 + a4[7], a2, a2, v9);
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      v8 = *(_QWORD *)(v7 - 8);
      if (a3 == *(_DWORD *)(v8 + 84))
      {
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v8 + 56))(v11 + a4[8], a2, a2, v7);
      }
      else
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        v6 = *(_QWORD *)(v5 - 8);
        if (a3 == *(_DWORD *)(v6 + 84))
        {
          return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(v11 + a4[9], a2, a2, v5);
        }
        else
        {
          result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
          v4 = *(_QWORD *)(result - 8);
          if (a3 == *(_DWORD *)(v4 + 84))
            return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v11 + a4[10], a2, a2, result);
          else
            __break(1u);
        }
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupBlob()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v5 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys?();
    if (v1 <= 0x3F)
    {
      v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys?();
      if (v2 <= 0x3F)
      {
        v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures?();
        if (v3 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?;
  if (!lazy cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?)
  {
    type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?;
  if (!lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?)
  {
    type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?;
  if (!lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?)
  {
    type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupBlob.RandomizedVerificationKeys(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v13;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v13 & 0x20000) != 0)
  {
    v8 = *a2;
    swift_retain();
    *a1 = v8;
    return *a1 + ((v13 + 16) & ~(unint64_t)v13);
  }
  else
  {
    v5 = *a2;
    swift_bridgeObjectRetain();
    *a1 = v5;
    v7 = (char *)a1 + *(int *)(a3 + 20);
    v6 = (char *)a2 + *(int *)(a3 + 20);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v7, v6);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v5 = *(int *)(a2 + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

char *initializeWithCopy for GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v5;
  v7 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v7], &a2[v7]);
  return a1;
}

char *assignWithCopy for GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v5;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 24))(&a1[v7], &a2[v7]);
  return a1;
}

char *initializeWithTake for GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

char *assignWithTake for GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 40))(&a1[v6], &a2[v6]);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D416AF8(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)a1 < 0x100000000uLL)
      v7 = *(_QWORD *)a1;
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v5 + 48))(&a1[*(int *)(a3 + 20)], a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D416BF0(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 - 1;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 20)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    outlined copy of Data._Representation(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v11 = a2[6];
    v12 = a2[7];
    outlined copy of Data._Representation(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 32);
    v13 = (char *)a2 + *(int *)(a3 + 32);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v14, v13);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v5 = *(int *)(a2 + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[4];
  v10 = a2[5];
  outlined copy of Data._Representation(v9, v10);
  a1[4] = v9;
  a1[5] = v10;
  v11 = a2[6];
  v12 = a2[7];
  outlined copy of Data._Representation(v11, v12);
  a1[6] = v11;
  a1[7] = v12;
  v14 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v13 = *a2;
  v14 = a2[1];
  outlined copy of Data._Representation(*a2, v14);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v13;
  a1[1] = v14;
  outlined consume of Data._Representation(v3, v4);
  v15 = a2[2];
  v16 = a2[3];
  outlined copy of Data._Representation(v15, v16);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v15;
  a1[3] = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = a2[4];
  v18 = a2[5];
  outlined copy of Data._Representation(v17, v18);
  v7 = a1[4];
  v8 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  outlined consume of Data._Representation(v7, v8);
  v19 = a2[6];
  v20 = a2[7];
  outlined copy of Data._Representation(v19, v20);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v19;
  a1[7] = v20;
  outlined consume of Data._Representation(v9, v10);
  v22 = *(int *)(a3 + 32);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 24))((char *)a1 + v22, (char *)a2 + v22);
  return a1;
}

char *initializeWithTake for GKCrypto_GroupBlob.GroupBlobPublicKeys(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v5 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a2[5];
  v12 = a1[4];
  v13 = a1[5];
  a1[4] = a2[4];
  a1[5] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a2[7];
  v15 = a1[6];
  v16 = a1[7];
  a1[6] = a2[6];
  a1[7] = v14;
  outlined consume of Data._Representation(v15, v16);
  v20 = *(int *)(a3 + 32);
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 40))((char *)a1 + v20, (char *)a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D417360(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D417458(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 32)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *a1 = v13;
    return *a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    outlined copy of Data._Representation(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v12 = (char *)a1 + *(int *)(a3 + 28);
    v11 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = a2[4];
  v10 = a2[5];
  outlined copy of Data._Representation(v9, v10);
  a1[4] = v9;
  a1[5] = v10;
  v12 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v12, (char *)a2 + v12);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v11 = *a2;
  v12 = a2[1];
  outlined copy of Data._Representation(*a2, v12);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  outlined consume of Data._Representation(v3, v4);
  v13 = a2[2];
  v14 = a2[3];
  outlined copy of Data._Representation(v13, v14);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v13;
  a1[3] = v14;
  outlined consume of Data._Representation(v5, v6);
  v15 = a2[4];
  v16 = a2[5];
  outlined copy of Data._Representation(v15, v16);
  v7 = a1[4];
  v8 = a1[5];
  a1[4] = v15;
  a1[5] = v16;
  outlined consume of Data._Representation(v7, v8);
  v18 = *(int *)(a3 + 28);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v9 - 8) + 24))((char *)a1 + v18, (char *)a2 + v18);
  return a1;
}

char *initializeWithTake for GKCrypto_GroupBlob.GroupBlobSignatures(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a2[5];
  v12 = a1[4];
  v13 = a1[5];
  a1[4] = a2[4];
  a1[5] = v11;
  outlined consume of Data._Representation(v12, v13);
  v17 = *(int *)(a3 + 28);
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 40))((char *)a1 + v17, (char *)a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D417B28(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupBlob.GroupBlobSignatures()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D417C20(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 28)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupBlob.GroupBlobSignatures()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_AdminGroupBlob(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v9 = (char *)a2 + *(int *)(a3 + 24);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_AdminGroupBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v5 = *(int *)(a2 + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_AdminGroupBlob(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v10, (char *)a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_AdminGroupBlob(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v9 = *a2;
  v10 = a2[1];
  outlined copy of Data._Representation(*a2, v10);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = a2[2];
  v12 = a2[3];
  outlined copy of Data._Representation(v11, v12);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 24);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

char *initializeWithTake for GKCrypto_AdminGroupBlob(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v5 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_AdminGroupBlob(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 24);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_AdminGroupBlob()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41821C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_AdminGroupBlob()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D418314(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 24)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_AdminGroupBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_VersionedSeed(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v8 = (char *)a1 + *(int *)(a3 + 24);
    v7 = (char *)a2 + *(int *)(a3 + 24);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v8, v7);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v5 = *(int *)(a2 + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v8 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v7, v8);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  outlined consume of Data._Representation(v3, v4);
  v10 = *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v11 = *(int *)(a3 + 24);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1 + v11, a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_VersionedSeed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D418868(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_VersionedSeed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D418960(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 24), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_VersionedSeed()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_UserKeys(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v23;

  v23 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v23 & 0x20000) != 0)
  {
    v18 = *a2;
    swift_retain();
    *a1 = v18;
    return *a1 + ((v23 + 16) & ~(unint64_t)v23);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v9 = a2[5];
    v10 = a2[6];
    outlined copy of Data._Representation(v9, v10);
    a1[5] = v9;
    a1[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    outlined copy of Data._Representation(v11, v12);
    a1[7] = v11;
    a1[8] = v12;
    v13 = a2[9];
    swift_bridgeObjectRetain();
    a1[9] = v13;
    v14 = a2[10];
    v15 = a2[11];
    outlined copy of Data._Representation(v14, v15);
    a1[10] = v14;
    a1[11] = v15;
    v17 = (char *)a1 + *(int *)(a3 + 44);
    v16 = (char *)a2 + *(int *)(a3 + 44);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v17, v16);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_UserKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v5 = *(int *)(a2 + 44);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_UserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v17 = *(int *)(a3 + 44);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v17, a2 + v17);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_UserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v15, v16);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v16;
  outlined consume of Data._Representation(v3, v4);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v17, v18);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 32) = v18;
  outlined consume of Data._Representation(v5, v6);
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v19, v20);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 48) = v20;
  outlined consume of Data._Representation(v7, v8);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v21, v22);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v22;
  outlined consume of Data._Representation(v9, v10);
  v23 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v24, v25);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  outlined consume of Data._Representation(v11, v12);
  v27 = *(int *)(a3 + 44);
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1 + v27, a2 + v27);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_UserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v5 = *(int *)(a3 + 44);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_UserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v23;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  outlined consume of Data._Representation(v15, v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v17;
  outlined consume of Data._Representation(v18, v19);
  v23 = *(int *)(a3 + 44);
  v20 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(a1 + v23, a2 + v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_UserKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D419274(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 72) < 0x100000000uLL)
      v7 = *(_QWORD *)(a1 + 72);
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 44), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_UserKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41936C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 44), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_UserKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v9 = (char *)a2 + *(int *)(a3 + 24);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v5 = *(int *)(a2 + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v10, (char *)a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v9 = *a2;
  v10 = a2[1];
  outlined copy of Data._Representation(*a2, v10);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = a2[2];
  v12 = a2[3];
  outlined copy of Data._Representation(v11, v12);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 24);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

char *initializeWithTake for GKCrypto_UserKeys.SignatureVerificationKeyPair(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v5 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 24);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D419980(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D419A78(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 24)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_UserKeys.SignatureVerificationKeyPair()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAETextToSign(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v37;

  v37 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v37 & 0x20000) != 0)
  {
    v32 = *a2;
    swift_retain();
    *a1 = v32;
    return *a1 + ((v37 + 16) & ~(unint64_t)v37);
  }
  else
  {
    v23 = *a2;
    swift_bridgeObjectRetain();
    *a1 = v23;
    v25 = (char *)a1 + a3[5];
    v24 = (char *)a2 + a3[5];
    v26 = type metadata accessor for UnknownStorage();
    v27 = *(void (**)(char *, char *))(*(_QWORD *)(v26 - 8) + 16);
    v27(v25, v24);
    v28 = (_QWORD *)((char *)a1 + a3[6]);
    v29 = (uint64_t *)((char *)a2 + a3[6]);
    v30 = type metadata accessor for GKCrypto_VersionedSeed();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v31 + 48))(v29, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v21 = v29[1];
      v22 = v29[2];
      outlined copy of Data._Representation(v21, v22);
      v28[1] = v21;
      v28[2] = v22;
      ((void (*)(char *, char *, uint64_t))v27)((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v26);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v17 = (_QWORD *)((char *)a1 + a3[7]);
    v18 = (uint64_t *)((char *)a2 + a3[7]);
    v19 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v20 + 48))(v18, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v11 = *v18;
      v12 = v18[1];
      outlined copy of Data._Representation(*v18, v12);
      *v17 = v11;
      v17[1] = v12;
      ((void (*)(char *, char *, uint64_t))v27)((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v26);
      __dst = (_QWORD *)((char *)v17 + *(int *)(v19 + 24));
      __src = (uint64_t *)((char *)v18 + *(int *)(v19 + 24));
      v15 = type metadata accessor for GKCrypto_AdminGroupBlob();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(__src, 1))
      {
        v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      }
      else
      {
        v7 = *__src;
        v8 = __src[1];
        outlined copy of Data._Representation(*__src, v8);
        *__dst = v7;
        __dst[1] = v8;
        v9 = __src[2];
        v10 = __src[3];
        outlined copy of Data._Representation(v9, v10);
        __dst[2] = v9;
        __dst[3] = v10;
        ((void (*)(char *, char *, uint64_t))v27)((char *)__dst + *(int *)(v15 + 24), (char *)__src + *(int *)(v15 + 24), v26);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupAETextToSign(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v7 = a2[5];
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(a1 + v7);
  v11 = a2[6];
  v13 = type metadata accessor for GKCrypto_VersionedSeed();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(a1 + v11, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v11 + 8), *(_QWORD *)(a1 + v11 + 16));
    ((void (*)(uint64_t, uint64_t))v9)(a1 + v11 + *(int *)(v13 + 24), v8);
  }
  v5 = a1 + a2[7];
  v6 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    ((void (*)(uint64_t, uint64_t))v9)(v5 + *(int *)(v6 + 20), v8);
    v3 = v5 + *(int *)(v6 + 24);
    v4 = type metadata accessor for GKCrypto_AdminGroupBlob();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v9)(v3 + *(int *)(v4 + 24), v8);
    }
  }
  return result;
}

char *initializeWithCopy for GKCrypto_GroupAETextToSign(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *__dst;
  uint64_t *__src;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v24 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v24;
  v25 = a3[5];
  v27 = type metadata accessor for UnknownStorage();
  v28 = *(void (**)(char *, char *))(*(_QWORD *)(v27 - 8) + 16);
  v28(&a1[v25], &a2[v25]);
  v30 = a3[6];
  v32 = type metadata accessor for GKCrypto_VersionedSeed();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v33 + 48))(&a2[v30], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a1[v30], &a2[v30], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v23 = &a1[v30];
    *(_DWORD *)&a1[v30] = *(_DWORD *)&a2[v30];
    v21 = *(_QWORD *)&a2[v30 + 8];
    v22 = *(_QWORD *)&a2[v30 + 16];
    outlined copy of Data._Representation(v21, v22);
    *((_QWORD *)v23 + 1) = v21;
    *((_QWORD *)v23 + 2) = v22;
    ((void (*)(char *, char *, uint64_t))v28)(&a1[v30 + *(int *)(v32 + 24)], &a2[v30 + *(int *)(v32 + 24)], v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(&a1[v30], 0, 1, v32);
  }
  v17 = &a1[a3[7]];
  v18 = &a2[a3[7]];
  v19 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v20 + 48))(v18, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v11 = *(_QWORD *)v18;
    v12 = *((_QWORD *)v18 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v18, v12);
    *(_QWORD *)v17 = v11;
    *((_QWORD *)v17 + 1) = v12;
    ((void (*)(char *, char *, uint64_t))v28)(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v27);
    __dst = &v17[*(int *)(v19 + 24)];
    __src = (uint64_t *)&v18[*(int *)(v19 + 24)];
    v15 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v7 = *__src;
      v8 = __src[1];
      outlined copy of Data._Representation(*__src, v8);
      *(_QWORD *)__dst = v7;
      *((_QWORD *)__dst + 1) = v8;
      v9 = __src[2];
      v10 = __src[3];
      outlined copy of Data._Representation(v9, v10);
      *((_QWORD *)__dst + 2) = v9;
      *((_QWORD *)__dst + 3) = v10;
      ((void (*)(char *, char *, uint64_t))v28)(&__dst[*(int *)(v15 + 24)], (char *)__src + *(int *)(v15 + 24), v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

char *assignWithCopy for GKCrypto_GroupAETextToSign(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *__src;
  char *__dst;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *);
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);

  v56 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v56;
  swift_bridgeObjectRelease();
  v57 = a3[5];
  v59 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(void (**)(char *, char *))(v60 + 24);
  v61(&a1[v57], &a2[v57]);
  v63 = a3[6];
  v65 = type metadata accessor for GKCrypto_VersionedSeed();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  if (((unsigned int (*)(char *, uint64_t))v67)(&a1[v63], 1))
  {
    if (v67(&a2[v63], 1, v65))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy(&a1[v63], &a2[v63], *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v52 = &a1[v63];
      *(_DWORD *)&a1[v63] = *(_DWORD *)&a2[v63];
      v50 = *(_QWORD *)&a2[v63 + 8];
      v51 = *(_QWORD *)&a2[v63 + 16];
      outlined copy of Data._Representation(v50, v51);
      *((_QWORD *)v52 + 1) = v50;
      *((_QWORD *)v52 + 2) = v51;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(&a1[v63 + *(int *)(v65 + 24)], &a2[v63 + *(int *)(v65 + 24)], v59);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(&a1[v63], 0, 1, v65);
    }
  }
  else if (v67(&a2[v63], 1, v65))
  {
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)&a1[v63]);
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a1[v63], &a2[v63], *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v55 = &a1[v63];
    *(_DWORD *)&a1[v63] = *(_DWORD *)&a2[v63];
    v53 = *(_QWORD *)&a2[v63 + 8];
    v54 = *(_QWORD *)&a2[v63 + 16];
    outlined copy of Data._Representation(v53, v54);
    v3 = *(_QWORD *)&a1[v63 + 8];
    v4 = *(_QWORD *)&a1[v63 + 16];
    *((_QWORD *)v55 + 1) = v53;
    *((_QWORD *)v55 + 2) = v54;
    outlined consume of Data._Representation(v3, v4);
    ((void (*)(char *, char *, uint64_t))v61)(&a1[v63 + *(int *)(v65 + 24)], &a2[v63 + *(int *)(v65 + 24)], v59);
  }
  v46 = &a1[a3[7]];
  v45 = &a2[a3[7]];
  v47 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (((unsigned int (*)(char *, uint64_t))v49)(v46, 1))
  {
    if (v49(v45, 1, v47))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
      memcpy(v46, v45, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v23 = *(_QWORD *)v45;
      v24 = *((_QWORD *)v45 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v45, v24);
      *(_QWORD *)v46 = v23;
      *((_QWORD *)v46 + 1) = v24;
      v25 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v25(&v46[*(int *)(v47 + 20)], &v45[*(int *)(v47 + 20)], v59);
      v26 = &v46[*(int *)(v47 + 24)];
      v27 = (uint64_t *)&v45[*(int *)(v47 + 24)];
      v28 = type metadata accessor for GKCrypto_AdminGroupBlob();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v29 + 48))(v27, 1))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v19 = *v27;
        v20 = v27[1];
        outlined copy of Data._Representation(*v27, v20);
        *(_QWORD *)v26 = v19;
        *((_QWORD *)v26 + 1) = v20;
        v21 = v27[2];
        v22 = v27[3];
        outlined copy of Data._Representation(v21, v22);
        *((_QWORD *)v26 + 2) = v21;
        *((_QWORD *)v26 + 3) = v22;
        v25(&v26[*(int *)(v28 + 24)], (char *)v27 + *(int *)(v28 + 24), v59);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v46, 0, 1, v47);
    }
  }
  else if (v49(v45, 1, v47))
  {
    outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v46);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v46, v45, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v38 = *(_QWORD *)v45;
    v39 = *((_QWORD *)v45 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v45, v39);
    v7 = *(_QWORD *)v46;
    v8 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v46 = v38;
    *((_QWORD *)v46 + 1) = v39;
    outlined consume of Data._Representation(v7, v8);
    ((void (*)(char *, char *, uint64_t))v61)(&v46[*(int *)(v47 + 20)], &v45[*(int *)(v47 + 20)], v59);
    __dst = &v46[*(int *)(v47 + 24)];
    __src = (uint64_t *)&v45[*(int *)(v47 + 24)];
    v42 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48);
    if (((unsigned int (*)(char *, uint64_t))v44)(__dst, 1))
    {
      if (v44(__src, 1, v42))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v30 = *__src;
        v31 = __src[1];
        outlined copy of Data._Representation(*__src, v31);
        *(_QWORD *)__dst = v30;
        *((_QWORD *)__dst + 1) = v31;
        v32 = __src[2];
        v33 = __src[3];
        outlined copy of Data._Representation(v32, v33);
        *((_QWORD *)__dst + 2) = v32;
        *((_QWORD *)__dst + 3) = v33;
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(&__dst[*(int *)(v42 + 24)], (char *)__src + *(int *)(v42 + 24), v59);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
      }
    }
    else if (v44(__src, 1, v42))
    {
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)__dst);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v34 = *__src;
      v35 = __src[1];
      outlined copy of Data._Representation(*__src, v35);
      v9 = *(_QWORD *)__dst;
      v10 = *((_QWORD *)__dst + 1);
      *(_QWORD *)__dst = v34;
      *((_QWORD *)__dst + 1) = v35;
      outlined consume of Data._Representation(v9, v10);
      v36 = __src[2];
      v37 = __src[3];
      outlined copy of Data._Representation(v36, v37);
      v11 = *((_QWORD *)__dst + 2);
      v12 = *((_QWORD *)__dst + 3);
      *((_QWORD *)__dst + 2) = v36;
      *((_QWORD *)__dst + 3) = v37;
      outlined consume of Data._Representation(v11, v12);
      ((void (*)(char *, char *, uint64_t))v61)(&__dst[*(int *)(v42 + 24)], (char *)__src + *(int *)(v42 + 24), v59);
    }
  }
  return a1;
}

char *initializeWithTake for GKCrypto_GroupAETextToSign(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *__dst;
  char *__src;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *, char *);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v16 = a3[5];
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 32);
  v19(&a1[v16], &a2[v16]);
  v21 = a3[6];
  v23 = type metadata accessor for GKCrypto_VersionedSeed();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v24 + 48))(&a2[v21], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a1[v21], &a2[v21], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v15 = &a1[v21];
    *(_DWORD *)v15 = *(_DWORD *)&a2[v21];
    *(_OWORD *)(v15 + 8) = *(_OWORD *)&a2[v21 + 8];
    ((void (*)(char *, char *, uint64_t))v19)(&a1[v21 + *(int *)(v23 + 24)], &a2[v21 + *(int *)(v23 + 24)], v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(&a1[v21], 0, 1, v23);
  }
  v11 = &a1[a3[7]];
  v12 = &a2[a3[7]];
  v13 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(v12, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
    ((void (*)(char *, char *, uint64_t))v19)(&v11[*(int *)(v13 + 20)], &v12[*(int *)(v13 + 20)], v18);
    __dst = &v11[*(int *)(v13 + 24)];
    __src = &v12[*(int *)(v13 + 24)];
    v9 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v10 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
      ((void (*)(char *, char *, uint64_t))v19)(&__dst[*(int *)(v9 + 24)], &__src[*(int *)(v9 + 24)], v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

char *assignWithTake for GKCrypto_GroupAETextToSign(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *__src;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *);
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v40 = a3[5];
  v42 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(void (**)(char *, char *))(v43 + 40);
  v44(&a1[v40], &a2[v40]);
  v46 = a3[6];
  v48 = type metadata accessor for GKCrypto_VersionedSeed();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  if (((unsigned int (*)(char *, uint64_t))v50)(&a1[v46], 1))
  {
    if (v50(&a2[v46], 1, v48))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy(&a1[v46], &a2[v46], *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v38 = &a1[v46];
      *(_DWORD *)v38 = *(_DWORD *)&a2[v46];
      *(_OWORD *)(v38 + 8) = *(_OWORD *)&a2[v46 + 8];
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&a1[v46 + *(int *)(v48 + 24)], &a2[v46 + *(int *)(v48 + 24)], v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(&a1[v46], 0, 1, v48);
    }
  }
  else if (v50(&a2[v46], 1, v48))
  {
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)&a1[v46]);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a1[v46], &a2[v46], *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v39 = &a1[v46];
    *(_DWORD *)v39 = *(_DWORD *)&a2[v46];
    v3 = *(_QWORD *)&a2[v46 + 16];
    v4 = *(_QWORD *)&a1[v46 + 8];
    v5 = *(_QWORD *)&a1[v46 + 16];
    *((_QWORD *)v39 + 1) = *(_QWORD *)&a2[v46 + 8];
    *((_QWORD *)v39 + 2) = v3;
    outlined consume of Data._Representation(v4, v5);
    ((void (*)(char *, char *, uint64_t))v44)(&a1[v46 + *(int *)(v48 + 24)], &a2[v46 + *(int *)(v48 + 24)], v42);
  }
  v34 = &a1[a3[7]];
  v33 = &a2[a3[7]];
  v35 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (((unsigned int (*)(char *, uint64_t))v37)(v34, 1))
  {
    if (v37(v33, 1, v35))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
      memcpy(v34, v33, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v34 = *(_OWORD *)v33;
      v23 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v23(&v34[*(int *)(v35 + 20)], &v33[*(int *)(v35 + 20)], v42);
      v24 = &v34[*(int *)(v35 + 24)];
      v25 = &v33[*(int *)(v35 + 24)];
      v26 = type metadata accessor for GKCrypto_AdminGroupBlob();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v27 + 48))(v25, 1))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
        v23(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v34, 0, 1, v35);
    }
  }
  else if (v37(v33, 1, v35))
  {
    outlined destroy of GKCrypto_GroupAETextToSign.GroupAssociatedData((uint64_t)v34);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v34, v33, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v8 = *((_QWORD *)v33 + 1);
    v9 = *(_QWORD *)v34;
    v10 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v33;
    *((_QWORD *)v34 + 1) = v8;
    outlined consume of Data._Representation(v9, v10);
    ((void (*)(char *, char *, uint64_t))v44)(&v34[*(int *)(v35 + 20)], &v33[*(int *)(v35 + 20)], v42);
    v29 = &v34[*(int *)(v35 + 24)];
    __src = &v33[*(int *)(v35 + 24)];
    v30 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    if (((unsigned int (*)(char *, uint64_t))v32)(v29, 1))
    {
      if (v32(__src, 1, v30))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
        memcpy(v29, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v29 = *(_OWORD *)__src;
        *((_OWORD *)v29 + 1) = *((_OWORD *)__src + 1);
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v29[*(int *)(v30 + 24)], &__src[*(int *)(v30 + 24)], v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, v30);
      }
    }
    else if (v32(__src, 1, v30))
    {
      outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)v29);
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(v29, __src, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v11 = *((_QWORD *)__src + 1);
      v12 = *(_QWORD *)v29;
      v13 = *((_QWORD *)v29 + 1);
      *(_QWORD *)v29 = *(_QWORD *)__src;
      *((_QWORD *)v29 + 1) = v11;
      outlined consume of Data._Representation(v12, v13);
      v14 = *((_QWORD *)__src + 3);
      v15 = *((_QWORD *)v29 + 2);
      v16 = *((_QWORD *)v29 + 3);
      *((_QWORD *)v29 + 2) = *((_QWORD *)__src + 2);
      *((_QWORD *)v29 + 3) = v14;
      outlined consume of Data._Representation(v15, v16);
      ((void (*)(char *, char *, uint64_t))v44)(&v29[*(int *)(v30 + 24)], &__src[*(int *)(v30 + 24)], v42);
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAETextToSign()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41B814(char *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  if (a2 == 0x7FFFFFFF)
  {
    v11 = -1;
    if (*(_QWORD *)a1 < 0x100000000uLL)
      v11 = *(_QWORD *)a1;
    return (v11 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v9 + 48))(&a1[a3[5]], a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
      {
        return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v7 + 48))(&a1[a3[6]], a2, v6);
      }
      else
      {
        v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
        v5 = *(_QWORD *)(v4 - 8);
        if (a2 == *(_DWORD *)(v5 + 84))
          return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v5 + 48))(&a1[a3[7]], a2, v4);
        else
          __break(1u);
      }
    }
  }
  return v10;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAETextToSign()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D41B9C4(char *result, unsigned int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v9 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 - 1;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(_QWORD *)(v7 - 8);
    if (a3 == *(_DWORD *)(v8 + 84))
    {
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, uint64_t))(v8 + 56))(&v9[a4[5]], a2, a2, v7);
    }
    else
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      v6 = *(_QWORD *)(v5 - 8);
      if (a3 == *(_DWORD *)(v6 + 84))
      {
        return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, uint64_t))(v6 + 56))(&v9[a4[6]], a2, a2, v5);
      }
      else
      {
        result = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
        v4 = *((_QWORD *)result - 1);
        if (a3 == *(_DWORD *)(v4 + 84))
          return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v9[a4[7]], a2, a2, result);
        else
          __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAETextToSign()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v4 = type metadata accessor for GKCrypto_VersionedSeed?();
    if (v1 <= 0x3F)
    {
      v4 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData?();
      if (v2 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_VersionedSeed?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_VersionedSeed?;
  if (!lazy cache variable for type metadata for GKCrypto_VersionedSeed?)
  {
    type metadata accessor for GKCrypto_VersionedSeed();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_VersionedSeed?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?;
  if (!lazy cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?)
  {
    type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    swift_retain();
    *(_QWORD *)a1 = v13;
    return *(_QWORD *)a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    v12 = a1 + *(int *)(a3 + 32);
    v11 = a2 + *(int *)(a3 + 32);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    return a1;
  }
}

uint64_t destroy for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v5 = *(int *)(a2 + 32);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v12 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v12, a2 + v12);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v12);
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
  outlined consume of Data._Representation(v3, v4);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v13, v14);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  outlined consume of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v15, v16);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  outlined consume of Data._Representation(v7, v8);
  v18 = *(int *)(a3 + 32);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1 + v18, a2 + v18);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupAETextToSign.User(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  outlined consume of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v11 = a2[7];
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v11;
  outlined consume of Data._Representation(v12, v13);
  v17 = *(int *)(a3 + 32);
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1 + v17, (uint64_t)a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAETextToSign.User()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41C338(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAETextToSign.User()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D41C430(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 32)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAETextToSign.User()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *);
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v24;

  v24 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v24 & 0x20000) != 0)
  {
    v19 = *a2;
    swift_retain();
    *a1 = v19;
    return *a1 + ((v24 + 16) & ~(unint64_t)v24);
  }
  else
  {
    v9 = *a2;
    v10 = a2[1];
    outlined copy of Data._Representation(*a2, v10);
    *a1 = v9;
    a1[1] = v10;
    v12 = (char *)a1 + *(int *)(a3 + 20);
    v11 = (char *)a2 + *(int *)(a3 + 20);
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 16);
    v14(v12, v11);
    v15 = (uint64_t *)((char *)a1 + *(int *)(a3 + 24));
    v16 = (uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    v17 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 48))(v16, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v5 = *v16;
      v6 = v16[1];
      outlined copy of Data._Representation(*v16, v6);
      *v15 = v5;
      v15[1] = v6;
      v7 = v16[2];
      v8 = v16[3];
      outlined copy of Data._Representation(v7, v8);
      v15[2] = v7;
      v15[3] = v8;
      ((void (*)(char *, char *, uint64_t))v14)((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v9;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v3 = *(int *)(a2 + 20);
  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1 + v3);
  v7 = *(int *)(a2 + 24);
  v9 = type metadata accessor for GKCrypto_AdminGroupBlob();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + v7, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v7 + 16), *(_QWORD *)(a1 + v7 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + v7 + *(int *)(v9 + 24), v4);
  }
  return result;
}

uint64_t *initializeWithCopy for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void (*v15)(char *, char *);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v10 = *a2;
  v11 = a2[1];
  outlined copy of Data._Representation(*a2, v11);
  *a1 = v10;
  a1[1] = v11;
  v12 = *(int *)(a3 + 20);
  v14 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(char *, char *))(*(_QWORD *)(v14 - 8) + 16);
  v15((char *)a1 + v12, (char *)a2 + v12);
  v17 = *(int *)(a3 + 24);
  v19 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v20 + 48))((char *)a2 + v17, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy((char *)a1 + v17, (char *)a2 + v17, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *(uint64_t *)((char *)a2 + v17);
    v6 = *(uint64_t *)((char *)a2 + v17 + 8);
    outlined copy of Data._Representation(v5, v6);
    v9 = (uint64_t *)((char *)a1 + v17);
    *v9 = v5;
    v9[1] = v6;
    v7 = *(uint64_t *)((char *)a2 + v17 + 16);
    v8 = *(uint64_t *)((char *)a2 + v17 + 24);
    outlined copy of Data._Representation(v7, v8);
    v9[2] = v7;
    v9[3] = v8;
    ((void (*)(char *, char *, uint64_t))v15)((char *)a1 + v17 + *(int *)(v19 + 24), (char *)a2 + v17 + *(int *)(v19 + 24), v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))((char *)a1 + v17, 0, 1, v19);
  }
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);

  v22 = *a2;
  v23 = a2[1];
  outlined copy of Data._Representation(*a2, v23);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v22;
  a1[1] = v23;
  outlined consume of Data._Representation(v3, v4);
  v24 = *(int *)(a3 + 20);
  v26 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, char *))(v27 + 24);
  v28((char *)a1 + v24, (char *)a2 + v24);
  v30 = *(int *)(a3 + 24);
  v32 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (((unsigned int (*)(char *, uint64_t))v34)((char *)a1 + v30, 1))
  {
    if (v34((char *)a2 + v30, 1, v32))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy((char *)a1 + v30, (char *)a2 + v30, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = *(uint64_t *)((char *)a2 + v30);
      v13 = *(uint64_t *)((char *)a2 + v30 + 8);
      outlined copy of Data._Representation(v12, v13);
      v16 = (uint64_t *)((char *)a1 + v30);
      *v16 = v12;
      v16[1] = v13;
      v14 = *(uint64_t *)((char *)a2 + v30 + 16);
      v15 = *(uint64_t *)((char *)a2 + v30 + 24);
      outlined copy of Data._Representation(v14, v15);
      v16[2] = v14;
      v16[3] = v15;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)a1 + v30 + *(int *)(v32 + 24), (char *)a2 + v30 + *(int *)(v32 + 24), v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))((char *)a1 + v30, 0, 1, v32);
    }
  }
  else if (v34((char *)a2 + v30, 1, v32))
  {
    outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)a1 + v30);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy((char *)a1 + v30, (char *)a2 + v30, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v17 = *(uint64_t *)((char *)a2 + v30);
    v18 = *(uint64_t *)((char *)a2 + v30 + 8);
    outlined copy of Data._Representation(v17, v18);
    v21 = (uint64_t *)((char *)a1 + v30);
    v5 = *(uint64_t *)((char *)a1 + v30);
    v6 = *(uint64_t *)((char *)a1 + v30 + 8);
    *v21 = v17;
    v21[1] = v18;
    outlined consume of Data._Representation(v5, v6);
    v19 = *(uint64_t *)((char *)a2 + v30 + 16);
    v20 = *(uint64_t *)((char *)a2 + v30 + 24);
    outlined copy of Data._Representation(v19, v20);
    v7 = *(uint64_t *)((char *)a1 + v30 + 16);
    v8 = *(uint64_t *)((char *)a1 + v30 + 24);
    v21[2] = v19;
    v21[3] = v20;
    outlined consume of Data._Representation(v7, v8);
    ((void (*)(char *, char *, uint64_t))v28)((char *)a1 + v30 + *(int *)(v32 + 24), (char *)a2 + v30 + *(int *)(v32 + 24), v26);
  }
  return a1;
}

char *initializeWithTake for GKCrypto_GroupAETextToSign.GroupAssociatedData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(char *, char *);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 32);
  v9(&a1[v6], &a2[v6]);
  v11 = *(int *)(a3 + 24);
  v13 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(&a2[v11], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy(&a1[v11], &a2[v11], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = &a1[v11];
    *(_OWORD *)v5 = *(_OWORD *)&a2[v11];
    *((_OWORD *)v5 + 1) = *(_OWORD *)&a2[v11 + 16];
    ((void (*)(char *, char *, uint64_t))v9)(&a1[v11 + *(int *)(v13 + 24)], &a2[v11 + *(int *)(v13 + 24)], v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(&a1[v11], 0, 1, v13);
  }
  return a1;
}

uint64_t *assignWithTake for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v19 = *(int *)(a3 + 20);
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, char *))(v22 + 40);
  v23((char *)a1 + v19, (char *)a2 + v19);
  v25 = *(int *)(a3 + 24);
  v27 = type metadata accessor for GKCrypto_AdminGroupBlob();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (((unsigned int (*)(char *, uint64_t))v29)((char *)a1 + v25, 1))
  {
    if (v29((char *)a2 + v25, 1, v27))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy((char *)a1 + v25, (char *)a2 + v25, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = (_OWORD *)((char *)a1 + v25);
      *v17 = *(_OWORD *)((char *)a2 + v25);
      v17[1] = *(_OWORD *)((char *)a2 + v25 + 16);
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))((char *)a1 + v25 + *(int *)(v27 + 24), (char *)a2 + v25 + *(int *)(v27 + 24), v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))((char *)a1 + v25, 0, 1, v27);
    }
  }
  else if (v29((char *)a2 + v25, 1, v27))
  {
    outlined destroy of GKCrypto_AdminGroupBlob((uint64_t)a1 + v25);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
    memcpy((char *)a1 + v25, (char *)a2 + v25, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8 = *(uint64_t *)((char *)a2 + v25 + 8);
    v18 = (uint64_t *)((char *)a1 + v25);
    v9 = *(uint64_t *)((char *)a1 + v25);
    v10 = *(uint64_t *)((char *)a1 + v25 + 8);
    *v18 = *(uint64_t *)((char *)a2 + v25);
    v18[1] = v8;
    outlined consume of Data._Representation(v9, v10);
    v11 = *(uint64_t *)((char *)a2 + v25 + 24);
    v12 = *(uint64_t *)((char *)a1 + v25 + 16);
    v13 = *(uint64_t *)((char *)a1 + v25 + 24);
    v18[2] = *(uint64_t *)((char *)a2 + v25 + 16);
    v18[3] = v11;
    outlined consume of Data._Representation(v12, v13);
    ((void (*)(char *, char *, uint64_t))v23)((char *)a1 + v25 + *(int *)(v27 + 24), (char *)a2 + v25 + *(int *)(v27 + 24), v21);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41D264(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + *(int *)(a3 + 20), a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
      else
        __break(1u);
    }
  }
  return v10;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D41D3B8(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v7 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v5 = type metadata accessor for UnknownStorage();
    v6 = *(_QWORD *)(v5 - 8);
    if (a3 == *(_DWORD *)(v6 + 84))
    {
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, uint64_t))(v6 + 56))(&v7[*(int *)(a4 + 20)], a2, a2, v5);
    }
    else
    {
      result = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      v4 = *((_QWORD *)result - 1);
      if (a3 == *(_DWORD *)(v4 + 84))
        return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v7[*(int *)(a4 + 24)], a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAETextToSign.GroupAssociatedData()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GKCrypto_AdminGroupBlob?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for GKCrypto_AdminGroupBlob?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_AdminGroupBlob?;
  if (!lazy cache variable for type metadata for GKCrypto_AdminGroupBlob?)
  {
    type metadata accessor for GKCrypto_AdminGroupBlob();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAEDataToEncrypt(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 28);
    v9 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v10 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v9, v10);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 28);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupAEDataToEncrypt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 28);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAEDataToEncrypt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41DB10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAEDataToEncrypt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41DC08(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAEDataToEncrypt()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_AdminMetaData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v8 = (char *)a1 + *(int *)(a3 + 20);
    v7 = (char *)a2 + *(int *)(a3 + 20);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v8, v7);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_AdminMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = *(int *)(a2 + 20);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_AdminMetaData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v8 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v8, (char *)a2 + v8);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_AdminMetaData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v7 = *a2;
  v8 = a2[1];
  outlined copy of Data._Representation(*a2, v8);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  outlined consume of Data._Representation(v3, v4);
  v10 = *(int *)(a3 + 20);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 24))((char *)a1 + v10, (char *)a2 + v10);
  return a1;
}

char *initializeWithTake for GKCrypto_AdminMetaData(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(int *)(a3 + 20);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_AdminMetaData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v11 = *(int *)(a3 + 20);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v8 - 8) + 40))((char *)a1 + v11, (char *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_AdminMetaData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41E140(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_AdminMetaData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D41E238(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 20)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_AdminMetaData()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *);
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v29;

  v29 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v29 & 0x20000) != 0)
  {
    v24 = *a2;
    swift_retain();
    *a1 = v24;
    return *a1 + ((v29 + 16) & ~(unint64_t)v29);
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    outlined copy of Data._Representation(*a2, v15);
    *a1 = v14;
    a1[1] = v15;
    v17 = (char *)a1 + a3[5];
    v16 = (char *)a2 + a3[5];
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 16);
    v19(v17, v16);
    v20 = (uint64_t *)((char *)a1 + a3[6]);
    v21 = (uint64_t *)((char *)a2 + a3[6]);
    v22 = type metadata accessor for GKCrypto_VersionedSeed();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v23 + 48))(v21, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v12 = v21[1];
      v13 = v21[2];
      outlined copy of Data._Representation(v12, v13);
      v20[1] = v12;
      v20[2] = v13;
      ((void (*)(char *, char *, uint64_t))v19)((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    __dst = (uint64_t *)((char *)a1 + a3[7]);
    __src = (uint64_t *)((char *)a2 + a3[7]);
    v10 = type metadata accessor for GKCrypto_AdminMetaData();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v11 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v6 = *__src;
      v7 = __src[1];
      outlined copy of Data._Representation(*__src, v7);
      *__dst = v6;
      __dst[1] = v7;
      ((void (*)(char *, char *, uint64_t))v19)((char *)__dst + *(int *)(v10 + 20), (char *)__src + *(int *)(v10 + 20), v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_AdminPlainText(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v9;
  uint64_t v11;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v5 = a2[5];
  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(a1 + v5);
  v9 = a2[6];
  v11 = type metadata accessor for GKCrypto_VersionedSeed();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + v9, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v9 + 8), *(_QWORD *)(a1 + v9 + 16));
    ((void (*)(uint64_t, uint64_t))v7)(a1 + v9 + *(int *)(v11 + 24), v6);
  }
  v3 = a1 + a2[7];
  v4 = type metadata accessor for GKCrypto_AdminMetaData();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v3 + *(int *)(v4 + 20), v6);
  }
  return result;
}

uint64_t *initializeWithCopy for GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  void (*v20)(char *, char *);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v15 = *a2;
  v16 = a2[1];
  outlined copy of Data._Representation(*a2, v16);
  *a1 = v15;
  a1[1] = v16;
  v17 = a3[5];
  v19 = type metadata accessor for UnknownStorage();
  v20 = *(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 16);
  v20((char *)a1 + v17, (char *)a2 + v17);
  v22 = a3[6];
  v24 = type metadata accessor for GKCrypto_VersionedSeed();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v25 + 48))((char *)a2 + v22, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy((char *)a1 + v22, (char *)a2 + v22, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v14 = (char *)a1 + v22;
    *(_DWORD *)((char *)a1 + v22) = *(_DWORD *)((char *)a2 + v22);
    v12 = *(uint64_t *)((char *)a2 + v22 + 8);
    v13 = *(uint64_t *)((char *)a2 + v22 + 16);
    outlined copy of Data._Representation(v12, v13);
    *((_QWORD *)v14 + 1) = v12;
    *((_QWORD *)v14 + 2) = v13;
    ((void (*)(char *, char *, uint64_t))v20)((char *)a1 + v22 + *(int *)(v24 + 24), (char *)a2 + v22 + *(int *)(v24 + 24), v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))((char *)a1 + v22, 0, 1, v24);
  }
  __dst = (uint64_t *)((char *)a1 + a3[7]);
  __src = (uint64_t *)((char *)a2 + a3[7]);
  v10 = type metadata accessor for GKCrypto_AdminMetaData();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v11 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = *__src;
    v7 = __src[1];
    outlined copy of Data._Representation(*__src, v7);
    *__dst = v6;
    __dst[1] = v7;
    ((void (*)(char *, char *, uint64_t))v20)((char *)__dst + *(int *)(v10 + 20), (char *)__src + *(int *)(v10 + 20), v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *__src;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t *, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *);
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);

  v29 = *a2;
  v30 = a2[1];
  outlined copy of Data._Representation(*a2, v30);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v29;
  a1[1] = v30;
  outlined consume of Data._Representation(v3, v4);
  v31 = a3[5];
  v33 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(void (**)(char *, char *))(v34 + 24);
  v35((char *)a1 + v31, (char *)a2 + v31);
  v37 = a3[6];
  v39 = type metadata accessor for GKCrypto_VersionedSeed();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  if (((unsigned int (*)(char *, uint64_t))v41)((char *)a1 + v37, 1))
  {
    if (v41((char *)a2 + v37, 1, v39))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy((char *)a1 + v37, (char *)a2 + v37, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v25 = (char *)a1 + v37;
      *(_DWORD *)((char *)a1 + v37) = *(_DWORD *)((char *)a2 + v37);
      v23 = *(uint64_t *)((char *)a2 + v37 + 8);
      v24 = *(uint64_t *)((char *)a2 + v37 + 16);
      outlined copy of Data._Representation(v23, v24);
      *((_QWORD *)v25 + 1) = v23;
      *((_QWORD *)v25 + 2) = v24;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))((char *)a1 + v37 + *(int *)(v39 + 24), (char *)a2 + v37 + *(int *)(v39 + 24), v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))((char *)a1 + v37, 0, 1, v39);
    }
  }
  else if (v41((char *)a2 + v37, 1, v39))
  {
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)a1 + v37);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy((char *)a1 + v37, (char *)a2 + v37, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v28 = (char *)a1 + v37;
    *(_DWORD *)((char *)a1 + v37) = *(_DWORD *)((char *)a2 + v37);
    v26 = *(uint64_t *)((char *)a2 + v37 + 8);
    v27 = *(uint64_t *)((char *)a2 + v37 + 16);
    outlined copy of Data._Representation(v26, v27);
    v5 = *(uint64_t *)((char *)a1 + v37 + 8);
    v6 = *(uint64_t *)((char *)a1 + v37 + 16);
    *((_QWORD *)v28 + 1) = v26;
    *((_QWORD *)v28 + 2) = v27;
    outlined consume of Data._Representation(v5, v6);
    ((void (*)(char *, char *, uint64_t))v35)((char *)a1 + v37 + *(int *)(v39 + 24), (char *)a2 + v37 + *(int *)(v39 + 24), v33);
  }
  v19 = (uint64_t *)((char *)a1 + a3[7]);
  __src = (uint64_t *)((char *)a2 + a3[7]);
  v20 = type metadata accessor for GKCrypto_AdminMetaData();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v22)(v19, 1))
  {
    if (v22(__src, 1, v20))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
      memcpy(v19, __src, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = *__src;
      v15 = __src[1];
      outlined copy of Data._Representation(*__src, v15);
      *v19 = v14;
      v19[1] = v15;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))((char *)v19 + *(int *)(v20 + 20), (char *)__src + *(int *)(v20 + 20), v33);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
    }
  }
  else if (v22(__src, 1, v20))
  {
    outlined destroy of GKCrypto_AdminMetaData((uint64_t)v19);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(v19, __src, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v16 = *__src;
    v17 = __src[1];
    outlined copy of Data._Representation(*__src, v17);
    v9 = *v19;
    v10 = v19[1];
    *v19 = v16;
    v19[1] = v17;
    outlined consume of Data._Representation(v9, v10);
    ((void (*)(char *, char *, uint64_t))v35)((char *)v19 + *(int *)(v20 + 20), (char *)__src + *(int *)(v20 + 20), v33);
  }
  return a1;
}

char *initializeWithTake for GKCrypto_AdminPlainText(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *__dst;
  char *__src;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, char *);
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = a3[5];
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *))(*(_QWORD *)(v13 - 8) + 32);
  v14(&a1[v11], &a2[v11]);
  v16 = a3[6];
  v18 = type metadata accessor for GKCrypto_VersionedSeed();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))(&a2[v16], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a1[v16], &a2[v16], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v10 = &a1[v16];
    *(_DWORD *)v10 = *(_DWORD *)&a2[v16];
    *(_OWORD *)(v10 + 8) = *(_OWORD *)&a2[v16 + 8];
    ((void (*)(char *, char *, uint64_t))v14)(&a1[v16 + *(int *)(v18 + 24)], &a2[v16 + *(int *)(v18 + 24)], v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(&a1[v16], 0, 1, v18);
  }
  __dst = &a1[a3[7]];
  __src = &a2[a3[7]];
  v8 = type metadata accessor for GKCrypto_AdminMetaData();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    ((void (*)(char *, char *, uint64_t))v14)(&__dst[*(int *)(v8 + 20)], &__src[*(int *)(v8 + 20)], v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  return a1;
}

uint64_t *assignWithTake for GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *__src;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD *, uint64_t, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v26 = a3[5];
  v28 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(char *, char *))(v29 + 40);
  v30((char *)a1 + v26, (char *)a2 + v26);
  v32 = a3[6];
  v34 = type metadata accessor for GKCrypto_VersionedSeed();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t))v36)((char *)a1 + v32, 1))
  {
    if (v36((char *)a2 + v32, 1, v34))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      memcpy((char *)a1 + v32, (char *)a2 + v32, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v24 = (char *)a1 + v32;
      *(_DWORD *)v24 = *(_DWORD *)((char *)a2 + v32);
      *(_OWORD *)(v24 + 8) = *(_OWORD *)((char *)a2 + v32 + 8);
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))((char *)a1 + v32 + *(int *)(v34 + 24), (char *)a2 + v32 + *(int *)(v34 + 24), v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))((char *)a1 + v32, 0, 1, v34);
    }
  }
  else if (v36((char *)a2 + v32, 1, v34))
  {
    outlined destroy of GKCrypto_VersionedSeed((uint64_t)a1 + v32);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy((char *)a1 + v32, (char *)a2 + v32, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v25 = (char *)a1 + v32;
    *(_DWORD *)v25 = *(_DWORD *)((char *)a2 + v32);
    v8 = *(uint64_t *)((char *)a2 + v32 + 16);
    v9 = *(uint64_t *)((char *)a1 + v32 + 8);
    v10 = *(uint64_t *)((char *)a1 + v32 + 16);
    *((_QWORD *)v25 + 1) = *(uint64_t *)((char *)a2 + v32 + 8);
    *((_QWORD *)v25 + 2) = v8;
    outlined consume of Data._Representation(v9, v10);
    ((void (*)(char *, char *, uint64_t))v30)((char *)a1 + v32 + *(int *)(v34 + 24), (char *)a2 + v32 + *(int *)(v34 + 24), v28);
  }
  v20 = (uint64_t *)((char *)a1 + a3[7]);
  __src = (uint64_t *)((char *)a2 + a3[7]);
  v21 = type metadata accessor for GKCrypto_AdminMetaData();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v23)(v20, 1))
  {
    if (v23(__src, 1, v21))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
      memcpy(v20, __src, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)__src;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))((char *)v20 + *(int *)(v21 + 20), (char *)__src + *(int *)(v21 + 20), v28);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
    }
  }
  else if (v23(__src, 1, v21))
  {
    outlined destroy of GKCrypto_AdminMetaData((uint64_t)v20);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(v20, __src, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v13 = __src[1];
    v14 = *v20;
    v15 = v20[1];
    *v20 = *__src;
    v20[1] = v13;
    outlined consume of Data._Representation(v14, v15);
    ((void (*)(char *, char *, uint64_t))v30)((char *)v20 + *(int *)(v21 + 20), (char *)__src + *(int *)(v21 + 20), v28);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_AdminPlainText()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D41F648(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (a2 == *(_DWORD *)(v11 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1 + a3[5], a2, v10);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      v9 = *(_QWORD *)(v8 - 8);
      if (a2 == *(_DWORD *)(v9 + 84))
      {
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + a3[6], a2, v8);
      }
      else
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
        v7 = *(_QWORD *)(v6 - 8);
        if (a2 == *(_DWORD *)(v7 + 84))
          return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + a3[7], a2, v6);
        else
          __break(1u);
      }
    }
  }
  return v12;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_AdminPlainText()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D41F7F8(char *result, unsigned int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v9 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(_QWORD *)(v7 - 8);
    if (a3 == *(_DWORD *)(v8 + 84))
    {
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, uint64_t))(v8 + 56))(&v9[a4[5]], a2, a2, v7);
    }
    else
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
      v6 = *(_QWORD *)(v5 - 8);
      if (a3 == *(_DWORD *)(v6 + 84))
      {
        return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, uint64_t))(v6 + 56))(&v9[a4[6]], a2, a2, v5);
      }
      else
      {
        result = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
        v4 = *((_QWORD *)result - 1);
        if (a3 == *(_DWORD *)(v4 + 84))
          return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v9[a4[7]], a2, a2, result);
        else
          __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_AdminPlainText()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v4 = type metadata accessor for GKCrypto_VersionedSeed?();
    if (v1 <= 0x3F)
    {
      v4 = type metadata accessor for GKCrypto_AdminMetaData?();
      if (v2 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_AdminMetaData?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_AdminMetaData?;
  if (!lazy cache variable for type metadata for GKCrypto_AdminMetaData?)
  {
    type metadata accessor for GKCrypto_AdminMetaData();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_AdminMetaData?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_Invite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v28;

  v28 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v28 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    swift_retain();
    *(_QWORD *)a1 = v23;
    return *(_QWORD *)a1 + ((v28 + 16) & ~(unint64_t)v28);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    outlined copy of Data._Representation(v11, v12);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 72);
    outlined copy of Data._Representation(v13, v14);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v14;
    v15 = *(_QWORD *)(a2 + 80);
    v16 = *(_QWORD *)(a2 + 88);
    outlined copy of Data._Representation(v15, v16);
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    v17 = *(_QWORD *)(a2 + 96);
    v18 = *(_QWORD *)(a2 + 104);
    outlined copy of Data._Representation(v17, v18);
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v19 = *(_QWORD *)(a2 + 120);
    v20 = *(_QWORD *)(a2 + 128);
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v20;
    v22 = a1 + *(int *)(a3 + 52);
    v21 = a2 + *(int *)(a3 + 52);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v22, v21);
    return a1;
  }
}

uint64_t destroy for GKCrypto_Invite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  v5 = *(int *)(a2 + 52);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_Invite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v13, v14);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v15, v16);
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  v17 = *(_QWORD *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  outlined copy of Data._Representation(v17, v18);
  *(_QWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 104) = v18;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  outlined copy of Data._Representation(v19, v20);
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  v22 = *(int *)(a3 + 52);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v22, a2 + v22);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_Invite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;

  v21 = *(_QWORD *)a2;
  v22 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v22);
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v22;
  outlined consume of Data._Representation(v3, v4);
  v23 = *(_QWORD *)(a2 + 16);
  v24 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v23, v24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(a1 + 24) = v24;
  outlined consume of Data._Representation(v5, v6);
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v25, v26);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  outlined consume of Data._Representation(v7, v8);
  v27 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v27, v28);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v27;
  *(_QWORD *)(a1 + 56) = v28;
  outlined consume of Data._Representation(v9, v10);
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v29, v30);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v29;
  *(_QWORD *)(a1 + 72) = v30;
  outlined consume of Data._Representation(v11, v12);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v31, v32);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  outlined consume of Data._Representation(v13, v14);
  v33 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  outlined copy of Data._Representation(v33, v34);
  v15 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  outlined consume of Data._Representation(v15, v16);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 120);
  v36 = *(_QWORD *)(a2 + 128);
  outlined copy of Data._Representation(v35, v36);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v35;
  *(_QWORD *)(a1 + 128) = v36;
  outlined consume of Data._Representation(v17, v18);
  v38 = *(int *)(a3 + 52);
  v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(a1 + v38, a2 + v38);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_Invite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v5 = *(int *)(a3 + 52);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_Invite(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v32;

  v4 = *a2;
  v5 = a2[1];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = a2[5];
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a2[7];
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v14;
  outlined consume of Data._Representation(v15, v16);
  v17 = a2[9];
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v17;
  outlined consume of Data._Representation(v18, v19);
  v20 = a2[11];
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v20;
  outlined consume of Data._Representation(v21, v22);
  v23 = a2[13];
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v23;
  outlined consume of Data._Representation(v24, v25);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  v26 = a2[16];
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v26;
  outlined consume of Data._Representation(v27, v28);
  v32 = *(int *)(a3 + 52);
  v29 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(a1 + v32, (uint64_t)a2 + v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_Invite()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4204B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 52), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_Invite()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D4205A8(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 52)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_Invite()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_SignedInvite(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *);
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v36;

  v36 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v36 & 0x20000) != 0)
  {
    v31 = *a2;
    swift_retain();
    *a1 = v31;
    return *a1 + ((v36 + 16) & ~(unint64_t)v36);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v21 = a2[1];
    v22 = a2[2];
    outlined copy of Data._Representation(v21, v22);
    a1[1] = v21;
    a1[2] = v22;
    v24 = (char *)a1 + *(int *)(a3 + 24);
    v23 = (char *)a2 + *(int *)(a3 + 24);
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(char *, char *))(*(_QWORD *)(v25 - 8) + 16);
    v26(v24, v23);
    v27 = (_QWORD *)((char *)a1 + *(int *)(a3 + 28));
    v28 = (uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    v29 = type metadata accessor for GKCrypto_Invite();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v30 + 48))(v28, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v5 = *v28;
      v6 = v28[1];
      outlined copy of Data._Representation(*v28, v6);
      *v27 = v5;
      v27[1] = v6;
      v7 = v28[2];
      v8 = v28[3];
      outlined copy of Data._Representation(v7, v8);
      v27[2] = v7;
      v27[3] = v8;
      v9 = v28[4];
      v10 = v28[5];
      outlined copy of Data._Representation(v9, v10);
      v27[4] = v9;
      v27[5] = v10;
      v11 = v28[6];
      v12 = v28[7];
      outlined copy of Data._Representation(v11, v12);
      v27[6] = v11;
      v27[7] = v12;
      v13 = v28[8];
      v14 = v28[9];
      outlined copy of Data._Representation(v13, v14);
      v27[8] = v13;
      v27[9] = v14;
      v15 = v28[10];
      v16 = v28[11];
      outlined copy of Data._Representation(v15, v16);
      v27[10] = v15;
      v27[11] = v16;
      v17 = v28[12];
      v18 = v28[13];
      outlined copy of Data._Representation(v17, v18);
      v27[12] = v17;
      v27[13] = v18;
      *((_DWORD *)v27 + 28) = *((_DWORD *)v28 + 28);
      v19 = v28[15];
      v20 = v28[16];
      outlined copy of Data._Representation(v19, v20);
      v27[15] = v19;
      v27[16] = v20;
      ((void (*)(char *, char *, uint64_t))v26)((char *)v27 + *(int *)(v29 + 52), (char *)v28 + *(int *)(v29 + 52), v25);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_SignedInvite(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v10;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(a1 + v4);
  v8 = *(int *)(a2 + 28);
  v10 = type metadata accessor for GKCrypto_Invite();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + v8, 1);
  if (!(_DWORD)result)
  {
    v3 = a1 + v8;
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v8), *(_QWORD *)(a1 + v8 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 120), *(_QWORD *)(v3 + 128));
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + v8 + *(int *)(v10 + 52), v5);
  }
  return result;
}

uint64_t initializeWithCopy for GKCrypto_SignedInvite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v22 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v22, v23);
  *(_QWORD *)(a1 + 8) = v22;
  *(_QWORD *)(a1 + 16) = v23;
  v24 = *(int *)(a3 + 24);
  v26 = type metadata accessor for UnknownStorage();
  v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  v27(a1 + v24, a2 + v24);
  v29 = *(int *)(a3 + 28);
  v31 = type metadata accessor for GKCrypto_Invite();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v32 + 48))(a2 + v29, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a1 + v29), (const void *)(a2 + v29), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *(_QWORD *)(a2 + v29);
    v6 = *(_QWORD *)(a2 + v29 + 8);
    outlined copy of Data._Representation(v5, v6);
    v21 = a1 + v29;
    *(_QWORD *)v21 = v5;
    *(_QWORD *)(v21 + 8) = v6;
    v7 = *(_QWORD *)(a2 + v29 + 16);
    v8 = *(_QWORD *)(a2 + v29 + 24);
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(v21 + 16) = v7;
    *(_QWORD *)(v21 + 24) = v8;
    v9 = *(_QWORD *)(a2 + v29 + 32);
    v10 = *(_QWORD *)(a2 + v29 + 40);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(v21 + 32) = v9;
    *(_QWORD *)(v21 + 40) = v10;
    v11 = *(_QWORD *)(a2 + v29 + 48);
    v12 = *(_QWORD *)(a2 + v29 + 56);
    outlined copy of Data._Representation(v11, v12);
    *(_QWORD *)(v21 + 48) = v11;
    *(_QWORD *)(v21 + 56) = v12;
    v13 = *(_QWORD *)(a2 + v29 + 64);
    v14 = *(_QWORD *)(a2 + v29 + 72);
    outlined copy of Data._Representation(v13, v14);
    *(_QWORD *)(v21 + 64) = v13;
    *(_QWORD *)(v21 + 72) = v14;
    v15 = *(_QWORD *)(a2 + v29 + 80);
    v16 = *(_QWORD *)(a2 + v29 + 88);
    outlined copy of Data._Representation(v15, v16);
    *(_QWORD *)(v21 + 80) = v15;
    *(_QWORD *)(v21 + 88) = v16;
    v17 = *(_QWORD *)(a2 + v29 + 96);
    v18 = *(_QWORD *)(a2 + v29 + 104);
    outlined copy of Data._Representation(v17, v18);
    *(_QWORD *)(v21 + 96) = v17;
    *(_QWORD *)(v21 + 104) = v18;
    *(_DWORD *)(v21 + 112) = *(_DWORD *)(a2 + v29 + 112);
    v19 = *(_QWORD *)(a2 + v29 + 120);
    v20 = *(_QWORD *)(a2 + v29 + 128);
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(v21 + 120) = v19;
    *(_QWORD *)(v21 + 128) = v20;
    ((void (*)(uint64_t, uint64_t, uint64_t))v27)(a1 + v29 + *(int *)(v31 + 52), a2 + v29 + *(int *)(v31 + 52), v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(a1 + v29, 0, 1, v31);
  }
  return a1;
}

uint64_t assignWithCopy for GKCrypto_SignedInvite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v58 = *(_QWORD *)(a2 + 8);
  v59 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v58, v59);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v58;
  *(_QWORD *)(a1 + 16) = v59;
  outlined consume of Data._Representation(v3, v4);
  v60 = *(int *)(a3 + 24);
  v62 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(void (**)(uint64_t, uint64_t))(v63 + 24);
  v64(a1 + v60, a2 + v60);
  v66 = *(int *)(a3 + 28);
  v68 = type metadata accessor for GKCrypto_Invite();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v70)(a1 + v66, 1))
  {
    if (v70(a2 + v66, 1, v68))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      memcpy((void *)(a1 + v66), (const void *)(a2 + v66), *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v24 = *(_QWORD *)(a2 + v66);
      v25 = *(_QWORD *)(a2 + v66 + 8);
      outlined copy of Data._Representation(v24, v25);
      v40 = a1 + v66;
      *(_QWORD *)v40 = v24;
      *(_QWORD *)(v40 + 8) = v25;
      v26 = *(_QWORD *)(a2 + v66 + 16);
      v27 = *(_QWORD *)(a2 + v66 + 24);
      outlined copy of Data._Representation(v26, v27);
      *(_QWORD *)(v40 + 16) = v26;
      *(_QWORD *)(v40 + 24) = v27;
      v28 = *(_QWORD *)(a2 + v66 + 32);
      v29 = *(_QWORD *)(a2 + v66 + 40);
      outlined copy of Data._Representation(v28, v29);
      *(_QWORD *)(v40 + 32) = v28;
      *(_QWORD *)(v40 + 40) = v29;
      v30 = *(_QWORD *)(a2 + v66 + 48);
      v31 = *(_QWORD *)(a2 + v66 + 56);
      outlined copy of Data._Representation(v30, v31);
      *(_QWORD *)(v40 + 48) = v30;
      *(_QWORD *)(v40 + 56) = v31;
      v32 = *(_QWORD *)(a2 + v66 + 64);
      v33 = *(_QWORD *)(a2 + v66 + 72);
      outlined copy of Data._Representation(v32, v33);
      *(_QWORD *)(v40 + 64) = v32;
      *(_QWORD *)(v40 + 72) = v33;
      v34 = *(_QWORD *)(a2 + v66 + 80);
      v35 = *(_QWORD *)(a2 + v66 + 88);
      outlined copy of Data._Representation(v34, v35);
      *(_QWORD *)(v40 + 80) = v34;
      *(_QWORD *)(v40 + 88) = v35;
      v36 = *(_QWORD *)(a2 + v66 + 96);
      v37 = *(_QWORD *)(a2 + v66 + 104);
      outlined copy of Data._Representation(v36, v37);
      *(_QWORD *)(v40 + 96) = v36;
      *(_QWORD *)(v40 + 104) = v37;
      *(_DWORD *)(v40 + 112) = *(_DWORD *)(a2 + v66 + 112);
      v38 = *(_QWORD *)(a2 + v66 + 120);
      v39 = *(_QWORD *)(a2 + v66 + 128);
      outlined copy of Data._Representation(v38, v39);
      *(_QWORD *)(v40 + 120) = v38;
      *(_QWORD *)(v40 + 128) = v39;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(a1 + v66 + *(int *)(v68 + 52), a2 + v66 + *(int *)(v68 + 52), v62);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(a1 + v66, 0, 1, v68);
    }
  }
  else if (v70(a2 + v66, 1, v68))
  {
    outlined destroy of GKCrypto_Invite(a1 + v66);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a1 + v66), (const void *)(a2 + v66), *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v41 = *(_QWORD *)(a2 + v66);
    v42 = *(_QWORD *)(a2 + v66 + 8);
    outlined copy of Data._Representation(v41, v42);
    v57 = a1 + v66;
    v5 = *(_QWORD *)(a1 + v66);
    v6 = *(_QWORD *)(a1 + v66 + 8);
    *(_QWORD *)v57 = v41;
    *(_QWORD *)(v57 + 8) = v42;
    outlined consume of Data._Representation(v5, v6);
    v43 = *(_QWORD *)(a2 + v66 + 16);
    v44 = *(_QWORD *)(a2 + v66 + 24);
    outlined copy of Data._Representation(v43, v44);
    v7 = *(_QWORD *)(a1 + v66 + 16);
    v8 = *(_QWORD *)(a1 + v66 + 24);
    *(_QWORD *)(v57 + 16) = v43;
    *(_QWORD *)(v57 + 24) = v44;
    outlined consume of Data._Representation(v7, v8);
    v45 = *(_QWORD *)(a2 + v66 + 32);
    v46 = *(_QWORD *)(a2 + v66 + 40);
    outlined copy of Data._Representation(v45, v46);
    v9 = *(_QWORD *)(a1 + v66 + 32);
    v10 = *(_QWORD *)(a1 + v66 + 40);
    *(_QWORD *)(v57 + 32) = v45;
    *(_QWORD *)(v57 + 40) = v46;
    outlined consume of Data._Representation(v9, v10);
    v47 = *(_QWORD *)(a2 + v66 + 48);
    v48 = *(_QWORD *)(a2 + v66 + 56);
    outlined copy of Data._Representation(v47, v48);
    v11 = *(_QWORD *)(a1 + v66 + 48);
    v12 = *(_QWORD *)(a1 + v66 + 56);
    *(_QWORD *)(v57 + 48) = v47;
    *(_QWORD *)(v57 + 56) = v48;
    outlined consume of Data._Representation(v11, v12);
    v49 = *(_QWORD *)(a2 + v66 + 64);
    v50 = *(_QWORD *)(a2 + v66 + 72);
    outlined copy of Data._Representation(v49, v50);
    v13 = *(_QWORD *)(a1 + v66 + 64);
    v14 = *(_QWORD *)(a1 + v66 + 72);
    *(_QWORD *)(v57 + 64) = v49;
    *(_QWORD *)(v57 + 72) = v50;
    outlined consume of Data._Representation(v13, v14);
    v51 = *(_QWORD *)(a2 + v66 + 80);
    v52 = *(_QWORD *)(a2 + v66 + 88);
    outlined copy of Data._Representation(v51, v52);
    v15 = *(_QWORD *)(a1 + v66 + 80);
    v16 = *(_QWORD *)(a1 + v66 + 88);
    *(_QWORD *)(v57 + 80) = v51;
    *(_QWORD *)(v57 + 88) = v52;
    outlined consume of Data._Representation(v15, v16);
    v53 = *(_QWORD *)(a2 + v66 + 96);
    v54 = *(_QWORD *)(a2 + v66 + 104);
    outlined copy of Data._Representation(v53, v54);
    v17 = *(_QWORD *)(a1 + v66 + 96);
    v18 = *(_QWORD *)(a1 + v66 + 104);
    *(_QWORD *)(v57 + 96) = v53;
    *(_QWORD *)(v57 + 104) = v54;
    outlined consume of Data._Representation(v17, v18);
    *(_DWORD *)(v57 + 112) = *(_DWORD *)(a2 + v66 + 112);
    v55 = *(_QWORD *)(a2 + v66 + 120);
    v56 = *(_QWORD *)(a2 + v66 + 128);
    outlined copy of Data._Representation(v55, v56);
    v19 = *(_QWORD *)(a1 + v66 + 120);
    v20 = *(_QWORD *)(a1 + v66 + 128);
    *(_QWORD *)(v57 + 120) = v55;
    *(_QWORD *)(v57 + 128) = v56;
    outlined consume of Data._Representation(v19, v20);
    ((void (*)(uint64_t, uint64_t, uint64_t))v64)(a1 + v66 + *(int *)(v68 + 52), a2 + v66 + *(int *)(v68 + 52), v62);
  }
  return a1;
}

uint64_t initializeWithTake for GKCrypto_SignedInvite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(a1 + v6, a2 + v6);
  v11 = *(int *)(a3 + 28);
  v13 = type metadata accessor for GKCrypto_Invite();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a2 + v11, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a1 + v11), (const void *)(a2 + v11), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = a1 + v11;
    *(_OWORD *)v5 = *(_OWORD *)(a2 + v11);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + v11 + 16);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + v11 + 32);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + v11 + 48);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + v11 + 64);
    *(_OWORD *)(v5 + 80) = *(_OWORD *)(a2 + v11 + 80);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(a2 + v11 + 96);
    *(_DWORD *)(v5 + 112) = *(_DWORD *)(a2 + v11 + 112);
    *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + v11 + 120);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(a1 + v11 + *(int *)(v13 + 52), a2 + v11 + *(int *)(v13 + 52), v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1 + v11, 0, 1, v13);
  }
  return a1;
}

uint64_t assignWithTake for GKCrypto_SignedInvite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v37 = *(int *)(a3 + 24);
  v39 = type metadata accessor for UnknownStorage();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(void (**)(uint64_t, uint64_t))(v40 + 40);
  v41(a1 + v37, a2 + v37);
  v43 = *(int *)(a3 + 28);
  v45 = type metadata accessor for GKCrypto_Invite();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v47)(a1 + v43, 1))
  {
    if (v47(a2 + v43, 1, v45))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      memcpy((void *)(a1 + v43), (const void *)(a2 + v43), *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v35 = a1 + v43;
      *(_OWORD *)v35 = *(_OWORD *)(a2 + v43);
      *(_OWORD *)(v35 + 16) = *(_OWORD *)(a2 + v43 + 16);
      *(_OWORD *)(v35 + 32) = *(_OWORD *)(a2 + v43 + 32);
      *(_OWORD *)(v35 + 48) = *(_OWORD *)(a2 + v43 + 48);
      *(_OWORD *)(v35 + 64) = *(_OWORD *)(a2 + v43 + 64);
      *(_OWORD *)(v35 + 80) = *(_OWORD *)(a2 + v43 + 80);
      *(_OWORD *)(v35 + 96) = *(_OWORD *)(a2 + v43 + 96);
      *(_DWORD *)(v35 + 112) = *(_DWORD *)(a2 + v43 + 112);
      *(_OWORD *)(v35 + 120) = *(_OWORD *)(a2 + v43 + 120);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(a1 + v43 + *(int *)(v45 + 52), a2 + v43 + *(int *)(v45 + 52), v39);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(a1 + v43, 0, 1, v45);
    }
  }
  else if (v47(a2 + v43, 1, v45))
  {
    outlined destroy of GKCrypto_Invite(a1 + v43);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a1 + v43), (const void *)(a2 + v43), *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v8 = *(_QWORD *)(a2 + v43 + 8);
    v36 = a1 + v43;
    v9 = *(_QWORD *)(a1 + v43);
    v10 = *(_QWORD *)(a1 + v43 + 8);
    *(_QWORD *)v36 = *(_QWORD *)(a2 + v43);
    *(_QWORD *)(v36 + 8) = v8;
    outlined consume of Data._Representation(v9, v10);
    v11 = *(_QWORD *)(a2 + v43 + 24);
    v12 = *(_QWORD *)(a1 + v43 + 16);
    v13 = *(_QWORD *)(a1 + v43 + 24);
    *(_QWORD *)(v36 + 16) = *(_QWORD *)(a2 + v43 + 16);
    *(_QWORD *)(v36 + 24) = v11;
    outlined consume of Data._Representation(v12, v13);
    v14 = *(_QWORD *)(a2 + v43 + 40);
    v15 = *(_QWORD *)(a1 + v43 + 32);
    v16 = *(_QWORD *)(a1 + v43 + 40);
    *(_QWORD *)(v36 + 32) = *(_QWORD *)(a2 + v43 + 32);
    *(_QWORD *)(v36 + 40) = v14;
    outlined consume of Data._Representation(v15, v16);
    v17 = *(_QWORD *)(a2 + v43 + 56);
    v18 = *(_QWORD *)(a1 + v43 + 48);
    v19 = *(_QWORD *)(a1 + v43 + 56);
    *(_QWORD *)(v36 + 48) = *(_QWORD *)(a2 + v43 + 48);
    *(_QWORD *)(v36 + 56) = v17;
    outlined consume of Data._Representation(v18, v19);
    v20 = *(_QWORD *)(a2 + v43 + 72);
    v21 = *(_QWORD *)(a1 + v43 + 64);
    v22 = *(_QWORD *)(a1 + v43 + 72);
    *(_QWORD *)(v36 + 64) = *(_QWORD *)(a2 + v43 + 64);
    *(_QWORD *)(v36 + 72) = v20;
    outlined consume of Data._Representation(v21, v22);
    v23 = *(_QWORD *)(a2 + v43 + 88);
    v24 = *(_QWORD *)(a1 + v43 + 80);
    v25 = *(_QWORD *)(a1 + v43 + 88);
    *(_QWORD *)(v36 + 80) = *(_QWORD *)(a2 + v43 + 80);
    *(_QWORD *)(v36 + 88) = v23;
    outlined consume of Data._Representation(v24, v25);
    v26 = *(_QWORD *)(a2 + v43 + 104);
    v27 = *(_QWORD *)(a1 + v43 + 96);
    v28 = *(_QWORD *)(a1 + v43 + 104);
    *(_QWORD *)(v36 + 96) = *(_QWORD *)(a2 + v43 + 96);
    *(_QWORD *)(v36 + 104) = v26;
    outlined consume of Data._Representation(v27, v28);
    *(_DWORD *)(v36 + 112) = *(_DWORD *)(a2 + v43 + 112);
    v29 = *(_QWORD *)(a2 + v43 + 128);
    v30 = *(_QWORD *)(a1 + v43 + 120);
    v31 = *(_QWORD *)(a1 + v43 + 128);
    *(_QWORD *)(v36 + 120) = *(_QWORD *)(a2 + v43 + 120);
    *(_QWORD *)(v36 + 128) = v29;
    outlined consume of Data._Representation(v30, v31);
    ((void (*)(uint64_t, uint64_t, uint64_t))v41)(a1 + v43 + *(int *)(v45 + 52), a2 + v43 + *(int *)(v45 + 52), v39);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SignedInvite()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D421A8C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + *(int *)(a3 + 24), a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
      else
        __break(1u);
    }
  }
  return v10;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_SignedInvite()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D421BE0(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v5 = type metadata accessor for UnknownStorage();
    v6 = *(_QWORD *)(v5 - 8);
    if (a3 == *(_DWORD *)(v6 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(v7 + *(int *)(a4 + 24), a2, a2, v5);
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
      v4 = *(_QWORD *)(result - 8);
      if (a3 == *(_DWORD *)(v4 + 84))
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v7 + *(int *)(a4 + 28), a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_SignedInvite()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GKCrypto_Invite?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for GKCrypto_Invite?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_Invite?;
  if (!lazy cache variable for type metadata for GKCrypto_Invite?)
  {
    type metadata accessor for GKCrypto_Invite();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_Invite?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_RSVP(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v13;
    return *(_QWORD *)a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v5 = a2[3];
    v6 = a2[4];
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[5];
    v8 = a2[6];
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[7];
    v10 = a2[8];
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    v12 = a1 + *(int *)(a3 + 36);
    v11 = (uint64_t)a2 + *(int *)(a3 + 36);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    return a1;
  }
}

uint64_t destroy for GKCrypto_RSVP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v5 = *(int *)(a2 + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_RSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v12 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v12, a2 + v12);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_RSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v3, v4);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v13, v14);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  outlined consume of Data._Representation(v5, v6);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v15, v16);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  outlined consume of Data._Representation(v7, v8);
  v18 = *(int *)(a3 + 36);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1 + v18, a2 + v18);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_RSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_RSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  outlined consume of Data._Representation(v12, v13);
  v17 = *(int *)(a3 + 36);
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1 + v17, a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVP()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D422464(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 32)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVP()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42255C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_RSVP()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 9))
      v3 = *(_QWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = result;
  v4 = (_BYTE *)(result + 9);
  if (a2)
  {
    result = 0;
    *(_BYTE *)(v3 + 8) = 0;
    *(_QWORD *)v3 = (a2 - 1);
    if (a3)
      *v4 = 1;
  }
  else if (a3)
  {
    *v4 = 0;
  }
  return result;
}

uint64_t getEnumTag for GKCrypto_RSVP.Response(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE1768] - 8) + 48))(a1, 6);
}

uint64_t destructiveInjectEnumTag for GKCrypto_RSVP.Response(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE1768] - 8) + 56))(a1, a2, 6);
}

ValueMetadata *type metadata accessor for GKCrypto_RSVP.Response()
{
  return &type metadata for GKCrypto_RSVP.Response;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_SignedRSVP(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *);
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    return *a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v11 = a2[1];
    v12 = a2[2];
    outlined copy of Data._Representation(v11, v12);
    a1[1] = v11;
    a1[2] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 24);
    v13 = (char *)a2 + *(int *)(a3 + 24);
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *))(*(_QWORD *)(v15 - 8) + 16);
    v16(v14, v13);
    v17 = (_DWORD *)((char *)a1 + *(int *)(a3 + 28));
    v18 = (_DWORD *)((char *)a2 + *(int *)(a3 + 28));
    v19 = type metadata accessor for GKCrypto_RSVP();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v20 + 48))(v18, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
      *((_BYTE *)v17 + 16) = *((_BYTE *)v18 + 16);
      v5 = *((_QWORD *)v18 + 3);
      v6 = *((_QWORD *)v18 + 4);
      outlined copy of Data._Representation(v5, v6);
      *((_QWORD *)v17 + 3) = v5;
      *((_QWORD *)v17 + 4) = v6;
      v7 = *((_QWORD *)v18 + 5);
      v8 = *((_QWORD *)v18 + 6);
      outlined copy of Data._Representation(v7, v8);
      *((_QWORD *)v17 + 5) = v7;
      *((_QWORD *)v17 + 6) = v8;
      v9 = *((_QWORD *)v18 + 7);
      v10 = *((_QWORD *)v18 + 8);
      outlined copy of Data._Representation(v9, v10);
      *((_QWORD *)v17 + 7) = v9;
      *((_QWORD *)v17 + 8) = v10;
      ((void (*)(char *, char *, uint64_t))v16)((char *)v17 + *(int *)(v19 + 36), (char *)v18 + *(int *)(v19 + 36), v15);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v8;
  uint64_t v10;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(a1 + v4);
  v8 = *(int *)(a2 + 28);
  v10 = type metadata accessor for GKCrypto_RSVP();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + v8, 1);
  if (!(_DWORD)result)
  {
    v3 = a1 + v8;
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v8 + 24), *(_QWORD *)(a1 + v8 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + v8 + *(int *)(v10 + 36), v5);
  }
  return result;
}

uint64_t initializeWithCopy for GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v12, v13);
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v13;
  v14 = *(int *)(a3 + 24);
  v16 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  v17(a1 + v14, a2 + v14);
  v19 = *(int *)(a3 + 28);
  v21 = type metadata accessor for GKCrypto_RSVP();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v22 + 48))(a2 + v19, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a1 + v19), (const void *)(a2 + v19), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v11 = a1 + v19;
    *(_DWORD *)v11 = *(_DWORD *)(a2 + v19);
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + v19 + 8);
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(a2 + v19 + 16);
    v5 = *(_QWORD *)(a2 + v19 + 24);
    v6 = *(_QWORD *)(a2 + v19 + 32);
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(v11 + 24) = v5;
    *(_QWORD *)(v11 + 32) = v6;
    v7 = *(_QWORD *)(a2 + v19 + 40);
    v8 = *(_QWORD *)(a2 + v19 + 48);
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(v11 + 40) = v7;
    *(_QWORD *)(v11 + 48) = v8;
    v9 = *(_QWORD *)(a2 + v19 + 56);
    v10 = *(_QWORD *)(a2 + v19 + 64);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(v11 + 56) = v9;
    *(_QWORD *)(v11 + 64) = v10;
    ((void (*)(uint64_t, uint64_t, uint64_t))v17)(a1 + v19 + *(int *)(v21 + 36), a2 + v19 + *(int *)(v21 + 36), v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1 + v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v29, v30);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v29;
  *(_QWORD *)(a1 + 16) = v30;
  outlined consume of Data._Representation(v3, v4);
  v31 = *(int *)(a3 + 24);
  v33 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(void (**)(uint64_t, uint64_t))(v34 + 24);
  v35(a1 + v31, a2 + v31);
  v37 = *(int *)(a3 + 28);
  v39 = type metadata accessor for GKCrypto_RSVP();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v41)(a1 + v37, 1))
  {
    if (v41(a2 + v37, 1, v39))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy((void *)(a1 + v37), (const void *)(a2 + v37), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v20 = a1 + v37;
      *(_DWORD *)v20 = *(_DWORD *)(a2 + v37);
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(a2 + v37 + 8);
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(a2 + v37 + 16);
      v14 = *(_QWORD *)(a2 + v37 + 24);
      v15 = *(_QWORD *)(a2 + v37 + 32);
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(v20 + 24) = v14;
      *(_QWORD *)(v20 + 32) = v15;
      v16 = *(_QWORD *)(a2 + v37 + 40);
      v17 = *(_QWORD *)(a2 + v37 + 48);
      outlined copy of Data._Representation(v16, v17);
      *(_QWORD *)(v20 + 40) = v16;
      *(_QWORD *)(v20 + 48) = v17;
      v18 = *(_QWORD *)(a2 + v37 + 56);
      v19 = *(_QWORD *)(a2 + v37 + 64);
      outlined copy of Data._Representation(v18, v19);
      *(_QWORD *)(v20 + 56) = v18;
      *(_QWORD *)(v20 + 64) = v19;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(a1 + v37 + *(int *)(v39 + 36), a2 + v37 + *(int *)(v39 + 36), v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(a1 + v37, 0, 1, v39);
    }
  }
  else if (v41(a2 + v37, 1, v39))
  {
    outlined destroy of GKCrypto_RSVP(a1 + v37);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a1 + v37), (const void *)(a2 + v37), *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v28 = a2 + v37;
    v27 = a1 + v37;
    *(_DWORD *)v27 = *(_DWORD *)(a2 + v37);
    *(_QWORD *)(v27 + 8) = *(_QWORD *)(a2 + v37 + 8);
    *(_BYTE *)(v27 + 16) = *(_BYTE *)(a2 + v37 + 16);
    v21 = *(_QWORD *)(a2 + v37 + 24);
    v22 = *(_QWORD *)(a2 + v37 + 32);
    outlined copy of Data._Representation(v21, v22);
    v5 = *(_QWORD *)(a1 + v37 + 24);
    v6 = *(_QWORD *)(a1 + v37 + 32);
    *(_QWORD *)(v27 + 24) = v21;
    *(_QWORD *)(v27 + 32) = v22;
    outlined consume of Data._Representation(v5, v6);
    v23 = *(_QWORD *)(a2 + v37 + 40);
    v24 = *(_QWORD *)(a2 + v37 + 48);
    outlined copy of Data._Representation(*(_QWORD *)(v28 + 40), *(_QWORD *)(v28 + 48));
    v7 = *(_QWORD *)(a1 + v37 + 40);
    v8 = *(_QWORD *)(a1 + v37 + 48);
    *(_QWORD *)(v27 + 40) = v23;
    *(_QWORD *)(v27 + 48) = v24;
    outlined consume of Data._Representation(v7, v8);
    v25 = *(_QWORD *)(a2 + v37 + 56);
    v26 = *(_QWORD *)(a2 + v37 + 64);
    outlined copy of Data._Representation(*(_QWORD *)(v28 + 56), *(_QWORD *)(v28 + 64));
    v9 = *(_QWORD *)(a1 + v37 + 56);
    v10 = *(_QWORD *)(a1 + v37 + 64);
    *(_QWORD *)(v27 + 56) = v25;
    *(_QWORD *)(v27 + 64) = v26;
    outlined consume of Data._Representation(v9, v10);
    ((void (*)(uint64_t, uint64_t, uint64_t))v35)(a1 + v37 + *(int *)(v39 + 36), a2 + v37 + *(int *)(v39 + 36), v33);
  }
  return a1;
}

uint64_t initializeWithTake for GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(a1 + v6, a2 + v6);
  v11 = *(int *)(a3 + 28);
  v13 = type metadata accessor for GKCrypto_RSVP();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a2 + v11, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a1 + v11), (const void *)(a2 + v11), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = a1 + v11;
    *(_DWORD *)v5 = *(_DWORD *)(a2 + v11);
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + v11 + 8);
    *(_BYTE *)(v5 + 16) = *(_BYTE *)(a2 + v11 + 16);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + v11 + 24);
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + v11 + 40);
    *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + v11 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(a1 + v11 + *(int *)(v13 + 36), a2 + v11 + *(int *)(v13 + 36), v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1 + v11, 0, 1, v13);
  }
  return a1;
}

uint64_t assignWithTake for GKCrypto_SignedRSVP(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v22 = *(int *)(a3 + 24);
  v24 = type metadata accessor for UnknownStorage();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(uint64_t, uint64_t))(v25 + 40);
  v26(a1 + v22, a2 + v22);
  v28 = *(int *)(a3 + 28);
  v30 = type metadata accessor for GKCrypto_RSVP();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v32)(a1 + v28, 1))
  {
    if (v32(a2 + v28, 1, v30))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy((void *)(a1 + v28), (const void *)(a2 + v28), *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = a1 + v28;
      *(_DWORD *)v20 = *(_DWORD *)(a2 + v28);
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(a2 + v28 + 8);
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(a2 + v28 + 16);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(a2 + v28 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(a2 + v28 + 40);
      *(_OWORD *)(v20 + 56) = *(_OWORD *)(a2 + v28 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a1 + v28 + *(int *)(v30 + 36), a2 + v28 + *(int *)(v30 + 36), v24);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a1 + v28, 0, 1, v30);
    }
  }
  else if (v32(a2 + v28, 1, v30))
  {
    outlined destroy of GKCrypto_RSVP(a1 + v28);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
    memcpy((void *)(a1 + v28), (const void *)(a2 + v28), *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v21 = a1 + v28;
    *(_DWORD *)v21 = *(_DWORD *)(a2 + v28);
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(a2 + v28 + 8);
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(a2 + v28 + 16);
    v8 = *(_QWORD *)(a2 + v28 + 32);
    v9 = *(_QWORD *)(a1 + v28 + 24);
    v10 = *(_QWORD *)(a1 + v28 + 32);
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(a2 + v28 + 24);
    *(_QWORD *)(v21 + 32) = v8;
    outlined consume of Data._Representation(v9, v10);
    v11 = *(_QWORD *)(a2 + v28 + 48);
    v12 = *(_QWORD *)(a1 + v28 + 40);
    v13 = *(_QWORD *)(a1 + v28 + 48);
    *(_QWORD *)(v21 + 40) = *(_QWORD *)(a2 + v28 + 40);
    *(_QWORD *)(v21 + 48) = v11;
    outlined consume of Data._Representation(v12, v13);
    v14 = *(_QWORD *)(a2 + v28 + 64);
    v15 = *(_QWORD *)(a1 + v28 + 56);
    v16 = *(_QWORD *)(a1 + v28 + 64);
    *(_QWORD *)(v21 + 56) = *(_QWORD *)(a2 + v28 + 56);
    *(_QWORD *)(v21 + 64) = v14;
    outlined consume of Data._Representation(v15, v16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(a1 + v28 + *(int *)(v30 + 36), a2 + v28 + *(int *)(v30 + 36), v24);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SignedRSVP()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4238B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + *(int *)(a3 + 24), a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
      else
        __break(1u);
    }
  }
  return v10;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_SignedRSVP()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D423A08(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v5 = type metadata accessor for UnknownStorage();
    v6 = *(_QWORD *)(v5 - 8);
    if (a3 == *(_DWORD *)(v6 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(v7 + *(int *)(a4 + 24), a2, a2, v5);
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      v4 = *(_QWORD *)(result - 8);
      if (a3 == *(_DWORD *)(v4 + 84))
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v7 + *(int *)(a4 + 28), a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_SignedRSVP()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GKCrypto_RSVP?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for GKCrypto_RSVP?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_RSVP?;
  if (!lazy cache variable for type metadata for GKCrypto_RSVP?)
  {
    type metadata accessor for GKCrypto_RSVP();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_RSVP?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_RSVPResponse(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 28);
    v9 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v10 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v9, v10);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 28);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_RSVPResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 28);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVPResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D424170(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVPResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D424268(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_RSVPResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_HPKEOneShotCipherText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v9 = (char *)a2 + *(int *)(a3 + 24);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_HPKEOneShotCipherText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v5 = *(int *)(a2 + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_HPKEOneShotCipherText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v10, (char *)a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_HPKEOneShotCipherText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v9 = *a2;
  v10 = a2[1];
  outlined copy of Data._Representation(*a2, v10);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = a2[2];
  v12 = a2[3];
  outlined copy of Data._Representation(v11, v12);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 24);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

char *initializeWithTake for GKCrypto_HPKEOneShotCipherText(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v5 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_HPKEOneShotCipherText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 24);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_HPKEOneShotCipherText()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42486C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_HPKEOneShotCipherText()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D424964(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 24)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_HPKEOneShotCipherText()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_SeedBlob(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v13;
    return *(_QWORD *)a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[5];
    v10 = a2[6];
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v12 = a1 + *(int *)(a3 + 40);
    v11 = (uint64_t)a2 + *(int *)(a3 + 40);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    return a1;
  }
}

uint64_t destroy for GKCrypto_SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v5 = *(int *)(a2 + 40);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_SeedBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(int *)(a3 + 40);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v12, a2 + v12);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_SeedBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v11, v12);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v12;
  outlined consume of Data._Representation(v3, v4);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v13, v14);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  outlined consume of Data._Representation(v5, v6);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v15, v16);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  outlined consume of Data._Representation(v7, v8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v18 = *(int *)(a3 + 40);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1 + v18, a2 + v18);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_SeedBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(int *)(a3 + 40);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_SeedBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v17 = *(int *)(a3 + 40);
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1 + v17, a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SeedBlob()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4250DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_SeedBlob()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4251D4(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 40), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_SeedBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAuthenticatedCiphertext(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *);
  _DWORD *__dst;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v22;

  v22 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v22 & 0x20000) != 0)
  {
    v17 = *a2;
    swift_retain();
    *a1 = v17;
    return *a1 + ((v22 + 16) & ~(unint64_t)v22);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    a1[1] = v7;
    a1[2] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v9 = (char *)a2 + *(int *)(a3 + 24);
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 16);
    v12(v10, v9);
    __dst = (_DWORD *)((char *)a1 + *(int *)(a3 + 28));
    v14 = (_DWORD *)((char *)a2 + *(int *)(a3 + 28));
    v15 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v16 + 48))(v14, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *__dst = *v14;
      v5 = *((_QWORD *)v14 + 1);
      v6 = *((_QWORD *)v14 + 2);
      outlined copy of Data._Representation(v5, v6);
      *((_QWORD *)__dst + 1) = v5;
      *((_QWORD *)__dst + 2) = v6;
      *((_QWORD *)__dst + 3) = *((_QWORD *)v14 + 3);
      *((_BYTE *)__dst + 32) = *((_BYTE *)v14 + 32);
      ((void (*)(char *, char *, uint64_t))v12)((char *)__dst + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v9;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v3 = *(int *)(a2 + 24);
  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1 + v3);
  v7 = *(int *)(a2 + 28);
  v9 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + v7, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v7 + 8), *(_QWORD *)(a1 + v7 + 16));
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + v7 + *(int *)(v9 + 28), v4);
  }
  return result;
}

uint64_t initializeWithCopy for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(int *)(a3 + 24);
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(a1 + v10, a2 + v10);
  v15 = *(int *)(a3 + 28);
  v17 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 48))(a2 + v15, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a1 + v15), (const void *)(a2 + v15), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v7 = a1 + v15;
    *(_DWORD *)(a1 + v15) = *(_DWORD *)(a2 + v15);
    v5 = *(_QWORD *)(a2 + v15 + 8);
    v6 = *(_QWORD *)(a2 + v15 + 16);
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(v7 + 8) = v5;
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + v15 + 24);
    *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + v15 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v13)(a1 + v15 + *(int *)(v17 + 28), a2 + v15 + *(int *)(v17 + 28), v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1 + v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v16, v17);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v17;
  outlined consume of Data._Representation(v3, v4);
  v18 = *(int *)(a3 + 24);
  v20 = type metadata accessor for UnknownStorage();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 24);
  v22(a1 + v18, a2 + v18);
  v24 = *(int *)(a3 + 28);
  v26 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v28)(a1 + v24, 1))
  {
    if (v28(a2 + v24, 1, v26))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      memcpy((void *)(a1 + v24), (const void *)(a2 + v24), *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v12 = a1 + v24;
      *(_DWORD *)(a1 + v24) = *(_DWORD *)(a2 + v24);
      v10 = *(_QWORD *)(a2 + v24 + 8);
      v11 = *(_QWORD *)(a2 + v24 + 16);
      outlined copy of Data._Representation(v10, v11);
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a2 + v24 + 24);
      *(_BYTE *)(v12 + 32) = *(_BYTE *)(a2 + v24 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a1 + v24 + *(int *)(v26 + 28), a2 + v24 + *(int *)(v26 + 28), v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(a1 + v24, 0, 1, v26);
    }
  }
  else if (v28(a2 + v24, 1, v26))
  {
    outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(a1 + v24);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a1 + v24), (const void *)(a2 + v24), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v15 = a1 + v24;
    *(_DWORD *)(a1 + v24) = *(_DWORD *)(a2 + v24);
    v13 = *(_QWORD *)(a2 + v24 + 8);
    v14 = *(_QWORD *)(a2 + v24 + 16);
    outlined copy of Data._Representation(v13, v14);
    v5 = *(_QWORD *)(a1 + v24 + 8);
    v6 = *(_QWORD *)(a1 + v24 + 16);
    *(_QWORD *)(v15 + 8) = v13;
    *(_QWORD *)(v15 + 16) = v14;
    outlined consume of Data._Representation(v5, v6);
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + v24 + 24);
    *(_BYTE *)(v15 + 32) = *(_BYTE *)(a2 + v24 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v22)(a1 + v24 + *(int *)(v26 + 28), a2 + v24 + *(int *)(v26 + 28), v20);
  }
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32);
  v9(a1 + v6, a2 + v6);
  v11 = *(int *)(a3 + 28);
  v13 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a2 + v11, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a1 + v11), (const void *)(a2 + v11), *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = a1 + v11;
    *(_DWORD *)v5 = *(_DWORD *)(a2 + v11);
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + v11 + 8);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + v11 + 24);
    *(_BYTE *)(v5 + 32) = *(_BYTE *)(a2 + v11 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(a1 + v11 + *(int *)(v13 + 28), a2 + v11 + *(int *)(v13 + 28), v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1 + v11, 0, 1, v13);
  }
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v16 = *(int *)(a3 + 24);
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 40);
  v20(a1 + v16, a2 + v16);
  v22 = *(int *)(a3 + 28);
  v24 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v26)(a1 + v22, 1))
  {
    if (v26(a2 + v22, 1, v24))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      memcpy((void *)(a1 + v22), (const void *)(a2 + v22), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = a1 + v22;
      *(_DWORD *)v14 = *(_DWORD *)(a2 + v22);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + v22 + 8);
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(a2 + v22 + 24);
      *(_BYTE *)(v14 + 32) = *(_BYTE *)(a2 + v22 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(a1 + v22 + *(int *)(v24 + 28), a2 + v22 + *(int *)(v24 + 28), v18);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(a1 + v22, 0, 1, v24);
    }
  }
  else if (v26(a2 + v22, 1, v24))
  {
    outlined destroy of GKCrypto_GroupAuthenticatedCiphertext.Context(a1 + v22);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a1 + v22), (const void *)(a2 + v22), *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v15 = a1 + v22;
    *(_DWORD *)v15 = *(_DWORD *)(a2 + v22);
    v8 = *(_QWORD *)(a2 + v22 + 16);
    v9 = *(_QWORD *)(a1 + v22 + 8);
    v10 = *(_QWORD *)(a1 + v22 + 16);
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(a2 + v22 + 8);
    *(_QWORD *)(v15 + 16) = v8;
    outlined consume of Data._Representation(v9, v10);
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + v22 + 24);
    *(_BYTE *)(v15 + 32) = *(_BYTE *)(a2 + v22 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v20)(a1 + v22 + *(int *)(v24 + 28), a2 + v22 + *(int *)(v24 + 28), v18);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAuthenticatedCiphertext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D425FFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + *(int *)(a3 + 24), a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
      else
        __break(1u);
    }
  }
  return v10;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAuthenticatedCiphertext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D426150(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    v5 = type metadata accessor for UnknownStorage();
    v6 = *(_QWORD *)(v5 - 8);
    if (a3 == *(_DWORD *)(v6 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 56))(v7 + *(int *)(a4 + 24), a2, a2, v5);
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      v4 = *(_QWORD *)(result - 8);
      if (a3 == *(_DWORD *)(v4 + 84))
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v7 + *(int *)(a4 + 28), a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAuthenticatedCiphertext()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?;
  if (!lazy cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?)
  {
    type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
      return v1;
    }
  }
  return v4;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v9;
    return *(_QWORD *)a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = a1 + *(int *)(a3 + 28);
    v7 = (uint64_t)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v8, v7);
    return a1;
  }
}

uint64_t destroy for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v7, v8);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  outlined consume of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(int *)(a3 + 28);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v11 = *(int *)(a3 + 28);
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1 + v11, a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D426850(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D426948(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAuthenticatedCiphertext.Context()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_AdminSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    a1[2] = v7;
    a1[3] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 24);
    v9 = (char *)a2 + *(int *)(a3 + 24);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_AdminSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v5 = *(int *)(a2 + 24);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t *initializeWithCopy for GKCrypto_AdminSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v10 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))((char *)a1 + v10, (char *)a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for GKCrypto_AdminSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v9 = *a2;
  v10 = a2[1];
  outlined copy of Data._Representation(*a2, v10);
  v3 = *a1;
  v4 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = a2[2];
  v12 = a2[3];
  outlined copy of Data._Representation(v11, v12);
  v5 = a1[2];
  v6 = a1[3];
  a1[2] = v11;
  a1[3] = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 24);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 24))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

char *initializeWithTake for GKCrypto_AdminSeed(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  v5 = *(int *)(a3 + 24);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  return a1;
}

uint64_t *assignWithTake for GKCrypto_AdminSeed(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = a2[3];
  v9 = a1[2];
  v10 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 24);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v11 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_AdminSeed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D426F50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_AdminSeed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D427048(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = (char *)type metadata accessor for UnknownStorage();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 24)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_AdminSeed()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v13;
    return *(_QWORD *)a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    v7 = a2[5];
    v8 = a2[6];
    outlined copy of Data._Representation(v7, v8);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    v9 = a2[7];
    v10 = a2[8];
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    v12 = a1 + *(int *)(a3 + 40);
    v11 = (uint64_t)a2 + *(int *)(a3 + 40);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    return a1;
  }
}

uint64_t destroy for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v5 = *(int *)(a2 + 40);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v12 = *(int *)(a3 + 40);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v12, a2 + v12);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v11, v12);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v12;
  outlined consume of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v13, v14);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  outlined consume of Data._Representation(v5, v6);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v15, v16);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  outlined consume of Data._Representation(v7, v8);
  v18 = *(int *)(a3 + 40);
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1 + v18, a2 + v18);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 40);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_SeedBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  outlined consume of Data._Representation(v12, v13);
  v17 = *(int *)(a3 + 40);
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1 + v17, a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_SeedBlobRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4277B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_SeedBlobRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4278A8(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 40), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_SeedBlobRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_RSVPQueueRequest(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v9 = a2[5];
    v10 = a2[6];
    outlined copy of Data._Representation(v9, v10);
    a1[5] = v9;
    a1[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    outlined copy of Data._Representation(v11, v12);
    a1[7] = v11;
    a1[8] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 36);
    v13 = (char *)a2 + *(int *)(a3 + 36);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v14, v13);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v5 = *(int *)(a2 + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v14 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v13, v14);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  outlined consume of Data._Representation(v3, v4);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v15, v16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v17, v18);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v18;
  outlined consume of Data._Representation(v7, v8);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v19, v20);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  outlined consume of Data._Representation(v9, v10);
  v22 = *(int *)(a3 + 36);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(a1 + v22, a2 + v22);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_RSVPQueueRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  outlined consume of Data._Representation(v15, v16);
  v20 = *(int *)(a3 + 36);
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a1 + v20, a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVPQueueRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42808C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVPQueueRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D428184(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_RSVPQueueRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_KeyChainUserKeys(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 28);
    v9 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v10 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v9, v10);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 28);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_KeyChainUserKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 28);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_KeyChainUserKeys()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4287C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_KeyChainUserKeys()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4288BC(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_KeyChainUserKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupAccessInfo(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v9 = a2[5];
    v10 = a2[6];
    outlined copy of Data._Representation(v9, v10);
    a1[5] = v9;
    a1[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    outlined copy of Data._Representation(v11, v12);
    a1[7] = v11;
    a1[8] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 36);
    v13 = (char *)a2 + *(int *)(a3 + 36);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v14, v13);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v5 = *(int *)(a2 + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v14 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v13, v14);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  outlined consume of Data._Representation(v3, v4);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v15, v16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v17, v18);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v18;
  outlined consume of Data._Representation(v7, v8);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v19, v20);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  outlined consume of Data._Representation(v9, v10);
  v22 = *(int *)(a3 + 36);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(a1 + v22, a2 + v22);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupAccessInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  outlined consume of Data._Representation(v15, v16);
  v20 = *(int *)(a3 + 36);
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a1 + v20, a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupAccessInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D429084(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupAccessInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42917C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupAccessInfo()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_GroupBlobRequest(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v9 = a2[5];
    v10 = a2[6];
    outlined copy of Data._Representation(v9, v10);
    a1[5] = v9;
    a1[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    outlined copy of Data._Representation(v11, v12);
    a1[7] = v11;
    a1[8] = v12;
    v14 = (char *)a1 + *(int *)(a3 + 36);
    v13 = (char *)a2 + *(int *)(a3 + 36);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v14, v13);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v5 = *(int *)(a2 + 36);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v14 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v13, v14);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  outlined consume of Data._Representation(v3, v4);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v15, v16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v17, v18);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v18;
  outlined consume of Data._Representation(v7, v8);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v19, v20);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  outlined consume of Data._Representation(v9, v10);
  v22 = *(int *)(a3 + 36);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(a1 + v22, a2 + v22);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_GroupBlobRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v14;
  outlined consume of Data._Representation(v15, v16);
  v20 = *(int *)(a3 + 36);
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a1 + v20, a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_GroupBlobRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D429954(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_GroupBlobRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D429A4C(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_GroupBlobRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for GKCrypto_EncryptedInvitation(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[1];
    v6 = a2[2];
    outlined copy of Data._Representation(v5, v6);
    a1[1] = v5;
    a1[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    outlined copy of Data._Representation(v7, v8);
    a1[3] = v7;
    a1[4] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 28);
    v9 = (char *)a2 + *(int *)(a3 + 28);
    v3 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v10 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t assignWithCopy for GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v9, v10);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  outlined consume of Data._Representation(v3, v4);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v5, v6);
  v14 = *(int *)(a3 + 28);
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t initializeWithTake for GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  return a1;
}

uint64_t assignWithTake for GKCrypto_EncryptedInvitation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  outlined consume of Data._Representation(v9, v10);
  v14 = *(int *)(a3 + 28);
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(a1 + v14, a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKCrypto_EncryptedInvitation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42A08C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + 16)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    v6 = type metadata accessor for UnknownStorage();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
    else
      __break(1u);
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_EncryptedInvitation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D42A184(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    result = type metadata accessor for UnknownStorage();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GKCrypto_EncryptedInvitation()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t associated type witness table accessor for ProtobufAPIVersionCheck.Version : ProtobufAPIVersion_2 in _GeneratedWithProtocGenSwiftVersion()
{
  return lazy protocol witness table accessor for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2();
}

unint64_t lazy protocol witness table accessor for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2;
  if (!lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for _GeneratedWithProtocGenSwiftVersion._2, &type metadata for _GeneratedWithProtocGenSwiftVersion._2);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type _GeneratedWithProtocGenSwiftVersion._2 and conformance _GeneratedWithProtocGenSwiftVersion._2);
    return v0;
  }
  return v2;
}

uint64_t outlined init with copy of GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  v13 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  v9 = *(int *)(v13 + 24);
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(a2 + v9, a1 + v9);
  v14 = *(int *)(v13 + 28);
  v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 48))(a1 + v14, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAuthenticatedCiphertext.Context?);
    memcpy((void *)(a2 + v14), (const void *)(a1 + v14), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v6 = a2 + v14;
    *(_DWORD *)(a2 + v14) = *(_DWORD *)(a1 + v14);
    v4 = *(_QWORD *)(a1 + v14 + 8);
    v5 = *(_QWORD *)(a1 + v14 + 16);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(v6 + 8) = v4;
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + v14 + 24);
    *(_BYTE *)(v6 + 32) = *(_BYTE *)(a1 + v14 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(a2 + v14 + *(int *)(v16 + 28), a1 + v14 + *(int *)(v16 + 28), v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a2 + v14, 0, 1, v16);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v5 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext();
  v2 = *(int *)(v5 + 24);
  v3 = type metadata accessor for UnknownStorage();
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(a1 + v2);
  v6 = *(int *)(v5 + 28);
  v8 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + v6, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v6 + 8), *(_QWORD *)(a1 + v6 + 16));
    ((void (*)(uint64_t, uint64_t))v4)(a1 + v6 + *(int *)(v8 + 28), v3);
  }
  return a1;
}

uint64_t outlined init with copy of GKCrypto_SignedInvite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v21, v22);
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v22;
  v27 = type metadata accessor for GKCrypto_SignedInvite();
  v23 = *(int *)(v27 + 24);
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  v26(a2 + v23, a1 + v23);
  v28 = *(int *)(v27 + 28);
  v30 = type metadata accessor for GKCrypto_Invite();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v31 + 48))(a1 + v28, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_Invite?);
    memcpy((void *)(a2 + v28), (const void *)(a1 + v28), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v4 = *(_QWORD *)(a1 + v28);
    v5 = *(_QWORD *)(a1 + v28 + 8);
    outlined copy of Data._Representation(v4, v5);
    v20 = a2 + v28;
    *(_QWORD *)v20 = v4;
    *(_QWORD *)(v20 + 8) = v5;
    v6 = *(_QWORD *)(a1 + v28 + 16);
    v7 = *(_QWORD *)(a1 + v28 + 24);
    outlined copy of Data._Representation(v6, v7);
    *(_QWORD *)(v20 + 16) = v6;
    *(_QWORD *)(v20 + 24) = v7;
    v8 = *(_QWORD *)(a1 + v28 + 32);
    v9 = *(_QWORD *)(a1 + v28 + 40);
    outlined copy of Data._Representation(v8, v9);
    *(_QWORD *)(v20 + 32) = v8;
    *(_QWORD *)(v20 + 40) = v9;
    v10 = *(_QWORD *)(a1 + v28 + 48);
    v11 = *(_QWORD *)(a1 + v28 + 56);
    outlined copy of Data._Representation(v10, v11);
    *(_QWORD *)(v20 + 48) = v10;
    *(_QWORD *)(v20 + 56) = v11;
    v12 = *(_QWORD *)(a1 + v28 + 64);
    v13 = *(_QWORD *)(a1 + v28 + 72);
    outlined copy of Data._Representation(v12, v13);
    *(_QWORD *)(v20 + 64) = v12;
    *(_QWORD *)(v20 + 72) = v13;
    v14 = *(_QWORD *)(a1 + v28 + 80);
    v15 = *(_QWORD *)(a1 + v28 + 88);
    outlined copy of Data._Representation(v14, v15);
    *(_QWORD *)(v20 + 80) = v14;
    *(_QWORD *)(v20 + 88) = v15;
    v16 = *(_QWORD *)(a1 + v28 + 96);
    v17 = *(_QWORD *)(a1 + v28 + 104);
    outlined copy of Data._Representation(v16, v17);
    *(_QWORD *)(v20 + 96) = v16;
    *(_QWORD *)(v20 + 104) = v17;
    *(_DWORD *)(v20 + 112) = *(_DWORD *)(a1 + v28 + 112);
    v18 = *(_QWORD *)(a1 + v28 + 120);
    v19 = *(_QWORD *)(a1 + v28 + 128);
    outlined copy of Data._Representation(v18, v19);
    *(_QWORD *)(v20 + 120) = v18;
    *(_QWORD *)(v20 + 128) = v19;
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(a2 + v28 + *(int *)(v30 + 52), a1 + v28 + *(int *)(v30 + 52), v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a2 + v28, 0, 1, v30);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_SignedInvite(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v6 = type metadata accessor for GKCrypto_SignedInvite();
  v3 = *(int *)(v6 + 24);
  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1 + v3);
  v7 = *(int *)(v6 + 28);
  v9 = type metadata accessor for GKCrypto_Invite();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + v7, 1))
  {
    v2 = a1 + v7;
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v7), *(_QWORD *)(a1 + v7 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
    ((void (*)(uint64_t, uint64_t))v5)(a1 + v7 + *(int *)(v9 + 52), v4);
  }
  return a1;
}

uint64_t *outlined init with copy of GKCrypto_AdminPlainText(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *, char *);
  int *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v14 = *a1;
  v15 = a1[1];
  outlined copy of Data._Representation(*a1, v15);
  *a2 = v14;
  a2[1] = v15;
  v20 = (int *)type metadata accessor for GKCrypto_AdminPlainText();
  v16 = v20[5];
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(void (**)(char *, char *))(*(_QWORD *)(v18 - 8) + 16);
  v19((char *)a2 + v16, (char *)a1 + v16);
  v21 = v20[6];
  v23 = type metadata accessor for GKCrypto_VersionedSeed();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v24 + 48))((char *)a1 + v21, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy((char *)a2 + v21, (char *)a1 + v21, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v13 = (char *)a2 + v21;
    *(_DWORD *)((char *)a2 + v21) = *(_DWORD *)((char *)a1 + v21);
    v11 = *(uint64_t *)((char *)a1 + v21 + 8);
    v12 = *(uint64_t *)((char *)a1 + v21 + 16);
    outlined copy of Data._Representation(v11, v12);
    *((_QWORD *)v13 + 1) = v11;
    *((_QWORD *)v13 + 2) = v12;
    ((void (*)(char *, char *, uint64_t))v19)((char *)a2 + v21 + *(int *)(v23 + 24), (char *)a1 + v21 + *(int *)(v23 + 24), v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))((char *)a2 + v21, 0, 1, v23);
  }
  __dst = (uint64_t *)((char *)a2 + v20[7]);
  __src = (uint64_t *)((char *)a1 + v20[7]);
  v9 = type metadata accessor for GKCrypto_AdminMetaData();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v10 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminMetaData?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v5 = *__src;
    v6 = __src[1];
    outlined copy of Data._Representation(*__src, v6);
    *__dst = v5;
    __dst[1] = v6;
    ((void (*)(char *, char *, uint64_t))v19)((char *)__dst + *(int *)(v9 + 20), (char *)__src + *(int *)(v9 + 20), v18);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_AdminPlainText(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  int *v7;
  uint64_t v8;
  uint64_t v10;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v7 = (int *)type metadata accessor for GKCrypto_AdminPlainText();
  v4 = v7[5];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(a1 + v4);
  v8 = v7[6];
  v10 = type metadata accessor for GKCrypto_VersionedSeed();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + v8, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v8 + 8), *(_QWORD *)(a1 + v8 + 16));
    ((void (*)(uint64_t, uint64_t))v6)(a1 + v8 + *(int *)(v10 + 24), v5);
  }
  v2 = a1 + v7[7];
  v3 = type metadata accessor for GKCrypto_AdminMetaData();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    ((void (*)(uint64_t, uint64_t))v6)(v2 + *(int *)(v3 + 20), v5);
  }
  return a1;
}

char *outlined init with copy of GKCrypto_GroupAETextToSign(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *__dst;
  uint64_t *__src;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(char *, char *);
  int *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v23 = *(_QWORD *)a1;
  swift_bridgeObjectRetain();
  *(_QWORD *)a2 = v23;
  v28 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign();
  v24 = v28[5];
  v26 = type metadata accessor for UnknownStorage();
  v27 = *(void (**)(char *, char *))(*(_QWORD *)(v26 - 8) + 16);
  v27(&a2[v24], &a1[v24]);
  v29 = v28[6];
  v31 = type metadata accessor for GKCrypto_VersionedSeed();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v32 + 48))(&a1[v29], 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_VersionedSeed?);
    memcpy(&a2[v29], &a1[v29], *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v22 = &a2[v29];
    *(_DWORD *)&a2[v29] = *(_DWORD *)&a1[v29];
    v20 = *(_QWORD *)&a1[v29 + 8];
    v21 = *(_QWORD *)&a1[v29 + 16];
    outlined copy of Data._Representation(v20, v21);
    *((_QWORD *)v22 + 1) = v20;
    *((_QWORD *)v22 + 2) = v21;
    ((void (*)(char *, char *, uint64_t))v27)(&a2[v29 + *(int *)(v31 + 24)], &a1[v29 + *(int *)(v31 + 24)], v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(&a2[v29], 0, 1, v31);
  }
  v16 = &a2[v28[7]];
  v17 = &a1[v28[7]];
  v18 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))(v17, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupAETextToSign.GroupAssociatedData?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v10 = *(_QWORD *)v17;
    v11 = *((_QWORD *)v17 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v17, v11);
    *(_QWORD *)v16 = v10;
    *((_QWORD *)v16 + 1) = v11;
    ((void (*)(char *, char *, uint64_t))v27)(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v26);
    __dst = &v16[*(int *)(v18 + 24)];
    __src = (uint64_t *)&v17[*(int *)(v18 + 24)];
    v14 = type metadata accessor for GKCrypto_AdminGroupBlob();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v15 + 48))(__src, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_AdminGroupBlob?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v6 = *__src;
      v7 = __src[1];
      outlined copy of Data._Representation(*__src, v7);
      *(_QWORD *)__dst = v6;
      *((_QWORD *)__dst + 1) = v7;
      v8 = __src[2];
      v9 = __src[3];
      outlined copy of Data._Representation(v8, v9);
      *((_QWORD *)__dst + 2) = v8;
      *((_QWORD *)__dst + 3) = v9;
      ((void (*)(char *, char *, uint64_t))v27)(&__dst[*(int *)(v14 + 24)], (char *)__src + *(int *)(v14 + 24), v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupAETextToSign(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign();
  v6 = v9[5];
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(a1 + v6);
  v10 = v9[6];
  v12 = type metadata accessor for GKCrypto_VersionedSeed();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1 + v10, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v10 + 8), *(_QWORD *)(a1 + v10 + 16));
    ((void (*)(uint64_t, uint64_t))v8)(a1 + v10 + *(int *)(v12 + 24), v7);
  }
  v4 = a1 + v9[7];
  v5 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    ((void (*)(uint64_t, uint64_t))v8)(v4 + *(int *)(v5 + 20), v7);
    v2 = v4 + *(int *)(v5 + 24);
    v3 = type metadata accessor for GKCrypto_AdminGroupBlob();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
      ((void (*)(uint64_t, uint64_t))v8)(v2 + *(int *)(v3 + 24), v7);
    }
  }
  return a1;
}

id Dependencies.listener.getter()
{
  id *v0;
  id v1;
  id v3;

  v3 = *v0;
  v1 = *v0;
  return v3;
}

uint64_t Dependencies.featureFlags.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of FeatureChecking(v1 + 8, a1);
}

uint64_t outlined init with copy of FeatureChecking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.keyValueStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyValueStore(v1 + 48, a1);
}

uint64_t Dependencies.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DaemonConfiguration(v1 + 88, a1);
}

uint64_t outlined init with copy of DaemonConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  return result;
}

uint64_t Dependencies.allAppleiCloudStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Store(v1 + 184, a1);
}

uint64_t Dependencies.strictStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Store(v1 + 224, a1);
}

uint64_t Dependencies.dateFactory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DateFactory(v1 + 264, a1);
}

uint64_t outlined init with copy of DateFactory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.accountStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AccountStore(v1 + 304, a1);
}

uint64_t Dependencies.clientBuilder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ClientBuilding(v1 + 344, a1);
}

uint64_t Dependencies.urlBag.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 384);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t Dependencies.networkSession.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NetworkingSession(v1 + 392, a1);
}

uint64_t outlined init with copy of NetworkingSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.requestTransformers.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 432);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Dependencies.cryptographyService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 440, a1);
}

uint64_t Dependencies.identityService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 480);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t Dependencies.identityServiceUtils.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of IdentityServiceUtils(v1 + 496, a1);
}

uint64_t outlined init with copy of IdentityServiceUtils(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.userHandleFormattingUtils.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserHandleFormattingUtils(v1 + 536, a1);
}

uint64_t outlined init with copy of UserHandleFormattingUtils(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.invitationService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 576);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t Dependencies.cloudDataProtectionChecker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CloudDataProtectionChecking(v1 + 592, a1);
}

uint64_t outlined init with copy of CloudDataProtectionChecking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.metricsReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetricsReporting(v1 + 632, a1);
}

uint64_t Dependencies.distributedNotification.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of EventSource(v1 + 672, a1);
}

uint64_t Dependencies.backgroundTask.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of EventSource(v1 + 712, a1);
}

uint64_t Dependencies.currentKeyProtocolVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 752);
}

uint64_t Dependencies.deviceInfoProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DeviceInfoProviding(v1 + 760, a1);
}

uint64_t outlined init with copy of DeviceInfoProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.profilePictureFetcher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ProfilePictureFetching(v1 + 800, a1);
}

uint64_t outlined init with copy of ProfilePictureFetching(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.cryptoKeyService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptoKeyProviding(v1 + 840, a1);
}

uint64_t outlined init with copy of CryptoKeyProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.cryptoLibraryLoader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReadinessChecking(v1 + 880, a1);
}

uint64_t outlined init with copy of ReadinessChecking(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Dependencies.diagnosisReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DiagnosisReporting(v1 + 920, a1);
}

uint64_t outlined init with copy of DiagnosisReporting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

id *Dependencies.init(listener:featureFlags:keyValueStore:configuration:allAppleiCloudStore:strictStore:dateFactory:accountStore:clientBuilder:urlBag:networkSession:requestTransformers:cryptographyService:identityService:identityServiceUtils:userHandleFormattingUtils:invitationService:cloudDataProtectionChecker:metricsReporter:distributedNotification:backgroundTask:currentKeyProtocolVersion:deviceInfoProvider:profilePictureFetcher:cryptoKeyService:cryptoLibraryLoader:diagnosisReporter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  id v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v57[40];
  _BYTE v58[40];
  _BYTE v59[40];
  _BYTE v60[40];
  _BYTE v61[40];
  _BYTE v62[40];
  _BYTE v63[40];
  _BYTE v64[40];
  _BYTE v65[40];
  _BYTE v66[40];
  _BYTE v67[40];
  _BYTE v68[40];
  _BYTE v69[40];
  _BYTE v70[40];
  _BYTE v71[40];
  _BYTE v72[40];
  _BYTE v73[40];
  _BYTE v74[40];
  _BYTE v75[40];
  _BYTE v76[40];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD __b[15];
  id v103;
  uint64_t v104;
  _QWORD v105[13];
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[7];
  uint64_t v117;
  _QWORD v118[7];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD v122[12];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  bzero(&v103, 0x3C0uLL);
  memset(__b, 0, 0x60uLL);
  v101 = 0;
  v100 = 0;
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  v89 = 0;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  __b[14] = a1;
  __b[13] = a2;
  __b[12] = a3;
  v50 = *(_QWORD *)(a4 + 8);
  v38 = *(_QWORD *)(a4 + 16);
  v51 = *(_QWORD *)(a4 + 24);
  v39 = *(_QWORD *)(a4 + 32);
  v52 = *(_QWORD *)(a4 + 40);
  v40 = *(_QWORD *)(a4 + 48);
  v53 = *(_QWORD *)(a4 + 56);
  v41 = *(_BYTE *)(a4 + 64);
  v42 = *(_QWORD *)(a4 + 72);
  v43 = *(_QWORD *)(a4 + 80);
  v44 = *(_QWORD *)(a4 + 88);
  __b[0] = *(_QWORD *)a4;
  v37 = __b[0];
  __b[1] = v50;
  __b[2] = v38;
  __b[3] = v51;
  __b[4] = v39;
  __b[5] = v52;
  __b[6] = v40;
  __b[7] = v53;
  LOBYTE(__b[8]) = v41 & 1;
  __b[9] = v42;
  __b[10] = v43;
  __b[11] = v44;
  v101 = a5;
  v100 = a6;
  v99 = a7;
  v98 = a8;
  v97 = a10;
  v96 = a11;
  v95 = a12;
  v94 = a13;
  v93 = a14;
  v91 = a15;
  v92 = a16;
  v90 = a17;
  v89 = a18;
  v87 = a19;
  v88 = a20;
  v86 = a21;
  v85 = a22;
  v84 = a23;
  v83 = a24;
  v82 = a25;
  v81 = a26;
  v80 = a27;
  v79 = a28;
  v78 = a29;
  v77 = a30;
  v35 = a1;
  v103 = a1;
  outlined init with copy of FeatureChecking(a2, (uint64_t)v76);
  outlined init with take of FeatureChecking(v76, &v104);
  outlined init with copy of KeyValueStore(a3, (uint64_t)v75);
  outlined init with take of KeyValueStore(v75, v105);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v105[5] = v37;
  v105[6] = v50;
  v105[7] = v38;
  v105[8] = v51;
  v105[9] = v39;
  v105[10] = v52;
  v105[11] = v40;
  v105[12] = v53;
  v106 = v41 & 1;
  v107 = v42;
  v108 = v43;
  v109 = v44;
  outlined init with copy of Store(a5, (uint64_t)v74);
  outlined init with take of Store(v74, &v110);
  outlined init with copy of Store(a6, (uint64_t)v73);
  outlined init with take of Store(v73, &v111);
  outlined init with copy of DateFactory(a7, (uint64_t)v72);
  outlined init with take of DateFactory(v72, &v112);
  outlined init with copy of AccountStore(a8, (uint64_t)v71);
  outlined init with take of AccountStore(v71, &v113);
  outlined init with copy of ClientBuilding(a10, (uint64_t)v70);
  outlined init with take of ClientBuilding(v70, v114);
  swift_unknownObjectRetain();
  v114[5] = a11;
  outlined init with copy of NetworkingSession(a12, (uint64_t)v69);
  outlined init with take of NetworkingSession(v69, v115);
  swift_bridgeObjectRetain();
  v115[5] = a13;
  outlined init with copy of CryptographyServiceProviding(a14, (uint64_t)v68);
  outlined init with take of CryptographyServiceProviding(v68, v116);
  swift_unknownObjectRetain();
  v116[5] = a15;
  v116[6] = a16;
  outlined init with copy of IdentityServiceUtils(a17, (uint64_t)v67);
  outlined init with take of IdentityServiceUtils(v67, &v117);
  outlined init with copy of UserHandleFormattingUtils(a18, (uint64_t)v66);
  outlined init with take of UserHandleFormattingUtils(v66, v118);
  swift_unknownObjectRetain();
  v118[5] = a19;
  v118[6] = a20;
  outlined init with copy of CloudDataProtectionChecking(a21, (uint64_t)v65);
  outlined init with take of CloudDataProtectionChecking(v65, &v119);
  outlined init with copy of MetricsReporting(a22, (uint64_t)v64);
  outlined init with take of MetricsReporting(v64, &v120);
  outlined init with copy of EventSource(a23, (uint64_t)v63);
  outlined init with take of EventSource(v63, &v121);
  outlined init with copy of EventSource(a24, (uint64_t)v62);
  outlined init with take of EventSource(v62, v122);
  v122[10] = a25;
  outlined init with copy of DeviceInfoProviding(a26, (uint64_t)v61);
  outlined init with take of DeviceInfoProviding(v61, &v123);
  outlined init with copy of ProfilePictureFetching(a27, (uint64_t)v60);
  outlined init with take of ProfilePictureFetching(v60, &v124);
  outlined init with copy of CryptoKeyProviding(a28, (uint64_t)v59);
  outlined init with take of CryptoKeyProviding(v59, &v125);
  outlined init with copy of ReadinessChecking(a29, (uint64_t)v58);
  outlined init with take of ReadinessChecking(v58, &v126);
  outlined init with copy of DiagnosisReporting(a30, (uint64_t)v57);
  outlined init with take of DiagnosisReporting(v57, &v127);
  outlined init with copy of Dependencies((uint64_t)&v103, a9);
  __swift_destroy_boxed_opaque_existential_1(a30);
  __swift_destroy_boxed_opaque_existential_1(a29);
  __swift_destroy_boxed_opaque_existential_1(a28);
  __swift_destroy_boxed_opaque_existential_1(a27);
  __swift_destroy_boxed_opaque_existential_1(a26);
  __swift_destroy_boxed_opaque_existential_1(a24);
  __swift_destroy_boxed_opaque_existential_1(a23);
  __swift_destroy_boxed_opaque_existential_1(a22);
  __swift_destroy_boxed_opaque_existential_1(a21);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a18);
  __swift_destroy_boxed_opaque_existential_1(a17);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a14);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a12);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a10);
  __swift_destroy_boxed_opaque_existential_1(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);

  return outlined destroy of Dependencies(&v103);
}

void *outlined init with take of FeatureChecking(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of Store(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of DateFactory(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of ClientBuilding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of NetworkingSession(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of IdentityServiceUtils(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of UserHandleFormattingUtils(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of CloudDataProtectionChecking(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of EventSource(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of DeviceInfoProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of ProfilePictureFetching(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of CryptoKeyProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of ReadinessChecking(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of DiagnosisReporting(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t initializeBufferWithCopyOfBuffer for Dependencies(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for Dependencies(id *a1)
{

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 6));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 23));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 28));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 33));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 38));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 43));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 49));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 55));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 62));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 67));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 74));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 79));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 84));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 89));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 95));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 100));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 105));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 110));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 115));
}

uint64_t initializeWithCopy for Dependencies(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = *(id *)a2;
  v2 = *(id *)a2;
  *(_QWORD *)a1 = v26;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 96) = v27;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v28 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 112) = v28;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v29 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 128) = v29;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 144) = v30;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v5;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 184, a2 + 184);
  v6 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 224, a2 + 224);
  v7 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 288) = v7;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 264, a2 + 264);
  v8 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v8;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 304, a2 + 304);
  v9 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 368) = v9;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 344, a2 + 344);
  v31 = *(_QWORD *)(a2 + 384);
  swift_unknownObjectRetain();
  *(_QWORD *)(a1 + 384) = v31;
  v10 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 416) = v10;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 392, a2 + 392);
  v32 = *(_QWORD *)(a2 + 432);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 432) = v32;
  v11 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 464) = v11;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 440, a2 + 440);
  v33 = *(_QWORD *)(a2 + 480);
  swift_unknownObjectRetain();
  v12 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v33;
  *(_QWORD *)(a1 + 488) = v12;
  v13 = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 520) = v13;
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 496, a2 + 496);
  v14 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 560) = v14;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 536, a2 + 536);
  v34 = *(_QWORD *)(a2 + 576);
  swift_unknownObjectRetain();
  v15 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 576) = v34;
  *(_QWORD *)(a1 + 584) = v15;
  v16 = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 616) = v16;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 592, a2 + 592);
  v17 = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 656) = v17;
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 632, a2 + 632);
  v18 = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 696) = v18;
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 672, a2 + 672);
  v19 = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 736) = v19;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 712, a2 + 712);
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  v20 = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a1 + 784) = v20;
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 760, a2 + 760);
  v21 = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 824) = v21;
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 800, a2 + 800);
  v22 = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a1 + 864) = v22;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 840, a2 + 840);
  v23 = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 904) = v23;
  *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
  (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 880, a2 + 880);
  v24 = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a1 + 944) = v24;
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 920, a2 + 920);
  return a1;
}

uint64_t assignWithCopy for Dependencies(uint64_t a1, uint64_t a2)
{
  id v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(id *)a1;
  v4 = *(id *)a2;
  v2 = *(id *)a2;
  *(_QWORD *)a1 = v4;

  __swift_assign_boxed_opaque_existential_1(a1 + 8, (uint64_t *)(a2 + 8));
  __swift_assign_boxed_opaque_existential_1(a1 + 48, (uint64_t *)(a2 + 48));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v9 = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 144) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152) & 1;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  __swift_assign_boxed_opaque_existential_1(a1 + 184, (uint64_t *)(a2 + 184));
  __swift_assign_boxed_opaque_existential_1(a1 + 224, (uint64_t *)(a2 + 224));
  __swift_assign_boxed_opaque_existential_1(a1 + 264, (uint64_t *)(a2 + 264));
  __swift_assign_boxed_opaque_existential_1(a1 + 304, (uint64_t *)(a2 + 304));
  __swift_assign_boxed_opaque_existential_1(a1 + 344, (uint64_t *)(a2 + 344));
  v10 = *(_QWORD *)(a2 + 384);
  swift_unknownObjectRetain();
  *(_QWORD *)(a1 + 384) = v10;
  swift_unknownObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 392, (uint64_t *)(a2 + 392));
  v11 = *(_QWORD *)(a2 + 432);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 432) = v11;
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 440, (uint64_t *)(a2 + 440));
  v12 = *(_QWORD *)(a2 + 480);
  swift_unknownObjectRetain();
  v13 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v12;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 488) = v13;
  __swift_assign_boxed_opaque_existential_1(a1 + 496, (uint64_t *)(a2 + 496));
  __swift_assign_boxed_opaque_existential_1(a1 + 536, (uint64_t *)(a2 + 536));
  v14 = *(_QWORD *)(a2 + 576);
  swift_unknownObjectRetain();
  v15 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 576) = v14;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 584) = v15;
  __swift_assign_boxed_opaque_existential_1(a1 + 592, (uint64_t *)(a2 + 592));
  __swift_assign_boxed_opaque_existential_1(a1 + 632, (uint64_t *)(a2 + 632));
  __swift_assign_boxed_opaque_existential_1(a1 + 672, (uint64_t *)(a2 + 672));
  __swift_assign_boxed_opaque_existential_1(a1 + 712, (uint64_t *)(a2 + 712));
  *(_DWORD *)(a1 + 752) = *(_DWORD *)(a2 + 752);
  __swift_assign_boxed_opaque_existential_1(a1 + 760, (uint64_t *)(a2 + 760));
  __swift_assign_boxed_opaque_existential_1(a1 + 800, (uint64_t *)(a2 + 800));
  __swift_assign_boxed_opaque_existential_1(a1 + 840, (uint64_t *)(a2 + 840));
  __swift_assign_boxed_opaque_existential_1(a1 + 880, (uint64_t *)(a2 + 880));
  __swift_assign_boxed_opaque_existential_1(a1 + 920, (uint64_t *)(a2 + 920));
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy960_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x3C0uLL);
}

uint64_t assignWithTake for Dependencies(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x38uLL);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152) & 1;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  __swift_destroy_boxed_opaque_existential_1(a1 + 184);
  memcpy((void *)(a1 + 184), (const void *)(a2 + 184), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 224);
  memcpy((void *)(a1 + 224), (const void *)(a2 + 224), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  memcpy((void *)(a1 + 264), (const void *)(a2 + 264), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 304);
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 344);
  memcpy((void *)(a1 + 344), (const void *)(a2 + 344), 0x30uLL);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 392);
  memcpy((void *)(a1 + 392), (const void *)(a2 + 392), 0x30uLL);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 440);
  memcpy((void *)(a1 + 440), (const void *)(a2 + 440), 0x28uLL);
  v5 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 488) = v5;
  __swift_destroy_boxed_opaque_existential_1(a1 + 496);
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 536);
  memcpy((void *)(a1 + 536), (const void *)(a2 + 536), 0x28uLL);
  v6 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 584) = v6;
  __swift_destroy_boxed_opaque_existential_1(a1 + 592);
  memcpy((void *)(a1 + 592), (const void *)(a2 + 592), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 632);
  memcpy((void *)(a1 + 632), (const void *)(a2 + 632), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 672);
  memcpy((void *)(a1 + 672), (const void *)(a2 + 672), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 712);
  memcpy((void *)(a1 + 712), (const void *)(a2 + 712), 0x2CuLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 760);
  memcpy((void *)(a1 + 760), (const void *)(a2 + 760), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 800);
  memcpy((void *)(a1 + 800), (const void *)(a2 + 800), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 840);
  memcpy((void *)(a1 + 840), (const void *)(a2 + 840), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 880);
  memcpy((void *)(a1 + 880), (const void *)(a2 + 880), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 920);
  memcpy((void *)(a1 + 920), (const void *)(a2 + 920), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Dependencies(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 960))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 32)))
        v3 = *(_QWORD *)(a1 + 32);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for Dependencies(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 120;
  if (a2 < 0)
  {
    result[111] = 0;
    result[110] = 0;
    result[109] = 0;
    result[108] = 0;
    result[107] = 0;
    result[106] = 0;
    result[105] = 0;
    result[104] = 0;
    result[103] = 0;
    result[102] = 0;
    result[101] = 0;
    result[100] = 0;
    result[99] = 0;
    result[98] = 0;
    result[97] = 0;
    result[96] = 0;
    result[95] = 0;
    result[94] = 0;
    result[93] = 0;
    result[92] = 0;
    result[91] = 0;
    result[90] = 0;
    result[89] = 0;
    result[88] = 0;
    result[87] = 0;
    result[86] = 0;
    result[85] = 0;
    result[84] = 0;
    result[83] = 0;
    result[82] = 0;
    result[81] = 0;
    result[80] = 0;
    result[79] = 0;
    result[78] = 0;
    result[77] = 0;
    result[76] = 0;
    result[75] = 0;
    result[74] = 0;
    result[73] = 0;
    result[72] = 0;
    result[71] = 0;
    result[70] = 0;
    result[69] = 0;
    result[68] = 0;
    result[67] = 0;
    result[66] = 0;
    result[65] = 0;
    result[64] = 0;
    result[63] = 0;
    result[62] = 0;
    result[61] = 0;
    result[60] = 0;
    result[59] = 0;
    result[58] = 0;
    result[57] = 0;
    result[56] = 0;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[119] = 0;
    result[118] = 0;
    result[117] = 0;
    result[116] = 0;
    result[115] = 0;
    result[114] = 0;
    result[113] = 0;
    result[112] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[4] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Dependencies()
{
  return &type metadata for Dependencies;
}

uint64_t dispatch thunk of NetworkRequestTransforming.transform(request:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + **(int **)(a4 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of NetworkRequestTransforming.transform(request:using:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of NetworkRequestTransforming.transform(request:using:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t SecurityService.__allocating_init(cloudDataProtectionChecker:)(uint64_t a1)
{
  swift_allocObject();
  return SecurityService.init(cloudDataProtectionChecker:)(a1);
}

uint64_t SecurityService.init(cloudDataProtectionChecker:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _BYTE v5[40];
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a1;
  outlined init with copy of CloudDataProtectionChecking(a1, (uint64_t)v5);
  outlined init with take of CloudDataProtectionChecking(v5, (void *)(v1 + 16));
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v4;
}

uint64_t SecurityService.endToEndEncryptionAvailability()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[5] = v1;
  v2[4] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[3] = v1;
  return swift_task_switch();
}

uint64_t SecurityService.endToEndEncryptionAvailability()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v0[8];
  v3 = v0[7];
  v5 = v0[6];
  v0[2] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Checking for end-to-end encryption availability", 0x2FuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/SecurityService.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("endToEndEncryptionAvailability()", 0x20uLL, 1)._object;
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 80) = v1;
  type metadata accessor for GPKFeatureAvailability();
  *v1 = *(_QWORD *)(v6 + 16);
  v1[1] = SecurityService.endToEndEncryptionAvailability();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t closure #1 in SecurityService.endToEndEncryptionAvailability()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = a1;
  v5[1] = a2;
  v21 = 0;
  v20 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GPKFeatureAvailability, Never>);
  v9 = *(_QWORD *)(v12 - 8);
  v8 = *(_QWORD *)(v9 + 64);
  v6 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v5 - v6;
  v21 = v2;
  v20 = v3;
  v16 = v17;
  outlined init with copy of CloudDataProtectionChecking(v3 + 16, (uint64_t)v17);
  v13 = v18;
  v14 = v19;
  __swift_project_boxed_opaque_existential_1(v16, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v7, v12);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v10, v11, v12);
  (*(void (**)(void (*)(_QWORD *, void *), uint64_t, uint64_t))(v14 + 8))(partial apply for closure #1 in closure #1 in SecurityService.endToEndEncryptionAvailability(), v15, v13);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t partial apply for closure #1 in SecurityService.endToEndEncryptionAvailability()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SecurityService.endToEndEncryptionAvailability()(a1, v1);
}

void closure #1 in closure #1 in SecurityService.endToEndEncryptionAvailability()(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Builtin::Word v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  Builtin::Word v28[6];
  int v29;
  uint64_t v30;
  int v31;
  Swift::String v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  void *object;
  id *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t countAndFlagsBits;
  Builtin::Word v50;
  void *v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t *v55;
  _QWORD *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  Builtin::Word v65;
  void (*v66)(uint64_t, uint64_t);
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char v88;
  Builtin::Word v89;
  Builtin::Word v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;

  v77 = a1;
  v83 = a2;
  v78 = a3;
  v104 = 0;
  v103 = 0;
  v102 = 0;
  v101 = 0;
  v91 = 0;
  v87 = 0;
  v70 = 0;
  v71 = type metadata accessor for GPKFeatureAvailability();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v74 = (char *)v28 - v73;
  v104 = (char *)v28 - v73;
  v75 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)v28 - v75;
  v79 = type metadata accessor for LogSubsystem();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = (*(_QWORD *)(v80 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v83);
  v82 = (uint64_t)v28 - v81;
  v103 = v5;
  v102 = v6;
  v101 = v7;
  v8 = v6;
  if (v83)
  {
    v69 = v83;
    v53 = v83;
    v87 = v83;
    v50 = 28;
    v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v43 = &v85;
    v85 = v17;
    v86 = v18;
    v46 = 1;
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error fetching account info ", v50, 1);
    object = v19._object;
    DefaultStringInterpolation.appendLiteral(_:)(v19);
    swift_bridgeObjectRelease();
    v41 = &v84;
    v84 = v53;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v46 & 1);
    v42 = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    v45 = v85;
    v44 = v86;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v47 = String.init(stringInterpolation:)();
    v52 = v21;
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/SecurityService.swift", 0x22uLL, v46 & 1);
    countAndFlagsBits = v22._countAndFlagsBits;
    v51 = v22._object;
    v48 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v82);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v82, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v76, *MEMORY[0x24BE3E088], v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GPKFeatureAvailability, Never>);
    CheckedContinuation.resume(returning:)();

  }
  else
  {
    v65 = 33;
    v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v58 = &v99;
    v99 = v9;
    v100 = v10;
    v61 = 1;
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cloud kit container account info ", v65, 1);
    v54 = v11._object;
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    v55 = &v98;
    outlined init with copy of CloudDataProtectionInfo?(v77, &v98);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CloudDataProtectionInfo?);
    v12 = String.init<A>(describing:)();
    v56 = v97;
    v97[0] = v12;
    v97[1] = v13;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v61 & 1);
    v57 = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v60 = v99;
    v59 = v100;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v62 = String.init(stringInterpolation:)();
    v68 = v15;
    v63 = static os_log_type_t.debug.getter();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/SecurityService.swift", 0x22uLL, v61 & 1);
    v64 = v16._countAndFlagsBits;
    v67 = v16._object;
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v82);
    gpklog(_:type:fileID:line:subsystem:)();
    v66 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
    v66(v82, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of CloudDataProtectionInfo?(v77, &v93);
    if (v94)
    {
      v37 = &v93;
      v36 = v94;
      v35 = v95;
      __swift_project_boxed_opaque_existential_1(&v93, v94);
      v38 = (*(uint64_t (**)(uint64_t))(v35 + 8))(v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      v39 = v38 & 1;
    }
    else
    {
      outlined destroy of CloudDataProtectionInfo?((uint64_t)&v93);
      v39 = 2;
    }
    v92 = v39;
    if (v39 == 2)
      v96 = 0;
    else
      v96 = v92 & 1;
    v34 = v96;
    v29 = 1;
    v91 = v96 & 1;
    v28[0] = 43;
    v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[3] = (Builtin::Word)&v89;
    v89 = v23;
    v90 = v24;
    v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Is end-to-end device encryption supported: ", v28[0], v29 & 1);
    v28[1] = (Builtin::Word)v25._object;
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    v88 = v34 & v29;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v29 & 1);
    v28[2] = (Builtin::Word)v26._object;
    DefaultStringInterpolation.appendLiteral(_:)(v26);
    swift_bridgeObjectRelease();
    v28[5] = v89;
    v28[4] = v90;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v30 = String.init(stringInterpolation:)();
    v33 = v27;
    v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/SecurityService.swift", 0x22uLL, v29 & 1);
    v31 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v82);
    gpklog(_:type:fileID:line:subsystem:)();
    v66(v82, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v74, *MEMORY[0x24BE3E090], v71);
    else
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v74, *MEMORY[0x24BE3E088], v71);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v76, v74, v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GPKFeatureAvailability, Never>);
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v71);
  }
}

uint64_t SecurityService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v2;
}

uint64_t SecurityService.__deallocating_deinit()
{
  SecurityService.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SecurityServiceProviding.endToEndEncryptionAvailability() in conformance SecurityService(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for SecurityServiceProviding.endToEndEncryptionAvailability() in conformance SecurityService;
  return SecurityService.endToEndEncryptionAvailability()(a1);
}

uint64_t protocol witness for SecurityServiceProviding.endToEndEncryptionAvailability() in conformance SecurityService()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of SecurityServiceProviding.endToEndEncryptionAvailability()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + **(int **)(a3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of SecurityServiceProviding.endToEndEncryptionAvailability();
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of SecurityServiceProviding.endToEndEncryptionAvailability()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t type metadata accessor for SecurityService()
{
  return objc_opt_self();
}

uint64_t method lookup function for SecurityService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SecurityService.__allocating_init(cloudDataProtectionChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23D42FC0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GPKFeatureAvailability, Never>)
                 - 8);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in SecurityService.endToEndEncryptionAvailability()(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GPKFeatureAvailability, Never>)
                                      - 8)
                          + 80);
  closure #1 in closure #1 in SecurityService.endToEndEncryptionAvailability()(a1, a2, v2 + ((v3 + 16) & ~v3));
}

_QWORD *outlined init with copy of CloudDataProtectionInfo?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t outlined destroy of CloudDataProtectionInfo?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchMemberKey(for:inGroupWithID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + **(int **)(a4 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of CryptoKeyProviding.fetchMemberKey(for:inGroupWithID:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchMemberKey(for:inGroupWithID:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchLatestGroupKey(for:memberID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 16)
                                                                                     + **(int **)(a6 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of CryptoKeyProviding.fetchLatestGroupKey(for:memberID:serviceName:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchLatestGroupKey(for:memberID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(*v3 + 16) = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchHistoricalGroupKeys(for:memberID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 24)
                                                                                     + **(int **)(a6 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of CryptoKeyProviding.fetchHistoricalGroupKeys(for:memberID:serviceName:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of CryptoKeyProviding.fetchHistoricalGroupKeys(for:memberID:serviceName:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t GroupTransformer.transform(group:metaData:cachedGroup:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v67 = a1;
  v58 = a2;
  v59 = a3;
  v93 = 0;
  v92 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v87 = 0;
  v85 = 0;
  v86 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v77 = 0;
  v78 = 0;
  v72 = 0;
  v60 = 0;
  v54 = type metadata accessor for GPKUserID();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v57 = (char *)v14 - v56;
  v61 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v62 = (uint64_t)v14 - v61;
  v93 = v3;
  v92 = v4;
  v63 = *v5;
  v64 = v5[1];
  v65 = v5[2];
  v89 = v63;
  v90 = v64;
  v91 = v65;
  type metadata accessor for GPKGroup();
  v6 = v67;
  v7 = v66;
  v8 = GPKGroup.init(group:)(v67);
  v68 = v7;
  v69 = v8;
  v70 = v7;
  if (v7)
  {
    v16 = v70;
    return v14[1];
  }
  v51 = v69;
  v88 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [String : String]));
  v52 = _allocateUninitializedArray<A>(_:)();
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  v87 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  if (v58)
  {
    v50 = v58;
    v71 = v58;
    swift_retain();
    v45 = v14;
    MEMORY[0x24BDAC7A8](v14);
    v9 = &v14[-4];
    v46 = &v14[-4];
    v9[2] = v10;
    v9[3] = &v87;
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
    v11 = v68;
    Sequence.forEach(_:)();
    v48 = v11;
    v49 = v11;
    if (!v11)
    {
      swift_release();
      outlined destroy of [GPKMetadata]();
      v44 = v48;
      goto LABEL_5;
    }
    v15 = v49;
    swift_release();
    outlined destroy of [GPKMetadata]();
    outlined destroy of [String : [String : String]]();
    swift_release();
    v16 = v15;
    return v14[1];
  }
  v44 = v68;
LABEL_5:
  v42 = v44;
  v84 = dispatch thunk of GPKGroup.members.getter();
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v42; ; i = v39)
  {
    v39 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v40 = v83;
    if (!v83)
      break;
    v38 = v40;
    v36 = v40;
    v79 = v40;
    dispatch thunk of GPKMember.userID.getter();
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v62, 1, v54) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v57, v62, v54);
      outlined destroy of GPKUserID?(v62);
      v32 = GPKUserID.hexString.getter();
      v33 = v12;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
      v34 = v32;
      v35 = v33;
    }
    else
    {
      v23 = 0;
      outlined destroy of GPKUserID?(v62);
      v34 = v23;
      v35 = v23;
    }
    v30 = v35;
    v31 = v34;
    if (v35)
    {
      v28 = v31;
      v29 = v30;
      v26 = v30;
      v25 = v31;
      v77 = v31;
      v78 = v30;
      swift_bridgeObjectRetain();
      v27 = v74;
      v74[0] = v25;
      v74[1] = v26;
      MEMORY[0x24263485C](&v75);
      outlined destroy of String();
      v73 = v75;
      if (v75)
      {
        v76 = v73;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
        _allocateUninitializedArray<A>(_:)();
        v76 = Dictionary.init(dictionaryLiteral:)();
        outlined destroy of [String : String]?();
      }
      v24 = v76;
      v72 = v76;
      dispatch thunk of GPKMember.setMetadata(_:)();
      Dictionary<>.hashValue.getter();
      dispatch thunk of GPKMember.metadataHashWhenInitializing.setter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  outlined copy of CachedGroupProperties?(v63, v64);
  if ((v64 & 0xF000000000000000) != 0xF000000000000000)
  {
    v20 = v63;
    v21 = v64;
    v22 = v65;
    v17 = v65;
    v19 = v64;
    v18 = v63;
    v80 = v63;
    v81 = v64;
    v82 = v65;
    outlined copy of Data._Representation(v63, v64);
    dispatch thunk of GPKGroup.groupBlob.setter();
    dispatch thunk of GPKGroup.invitationGroupVersion.setter();
    outlined consume of Data._Representation(v18, v19);
  }
  outlined destroy of [String : [String : String]]();
  return v51;
}

uint64_t GPKGroup.init(group:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v8;
  void *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  void (*v81)(char *, uint64_t, uint64_t);
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;

  v117 = a1;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v136 = 0;
  v134 = 0;
  v135 = 0;
  v133 = 0;
  v131 = 0;
  v127 = 0;
  v125 = 0;
  v112 = 0;
  v90 = type metadata accessor for GPKGroupID();
  v91 = *(_QWORD *)(v90 - 8);
  v92 = (*(_QWORD *)(v91 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v90);
  v93 = (char *)v20 - v92;
  v94 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup.JoinState?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v95 = (uint64_t)v20 - v94;
  v96 = type metadata accessor for GPKGroup.JoinState();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = (*(_QWORD *)(v97 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v96);
  v99 = (char *)v20 - v98;
  v140 = (char *)v20 - v98;
  v100 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v101 = (uint64_t)v20 - v100;
  v102 = type metadata accessor for Date();
  v103 = *(_QWORD *)(v102 - 8);
  v104 = (*(_QWORD *)(v103 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v105 = (char *)v20 - v104;
  v106 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v107 = (char *)v20 - v106;
  v139 = (char *)v20 - v106;
  v108 = type metadata accessor for InternalErrorCode();
  v109 = *(_QWORD *)(v108 - 8);
  v110 = (*(_QWORD *)(v109 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v108);
  v111 = (char *)v20 - v110;
  v113 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v112);
  v114 = (char *)v20 - v113;
  v115 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v116 = (uint64_t)v20 - v115;
  v118 = type metadata accessor for UUID();
  v119 = *(_QWORD *)(v118 - 8);
  v120 = (*(_QWORD *)(v119 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v121 = (char *)v20 - v120;
  v122 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v123 = (char *)v20 - v122;
  v138 = (char *)v20 - v122;
  v136 = v8;
  v124 = objc_msgSend(v8, sel_groupID, v7);
  if (v124)
  {
    v88 = v124;
    v87 = v124;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v119 + 32))(v116, v121, v118);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v116, 1, 1, v118);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v116, 1, v118) == 1)
  {
    outlined destroy of UUID?(v116);
    v83 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, *MEMORY[0x24BE3DCA8], v108);
    v85 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v86 = v85;
LABEL_39:
    v20[1] = v86;

    return v84;
  }
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 32);
  v81(v123, v116, v118);
  v82 = objc_msgSend(v117, sel_creationDate);
  if (v82)
  {
    v80 = v82;
    v79 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v103 + 32))(v101, v105, v102);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56))(v101, 0, 1, v102);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v101, 1, 1, v102);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102) == 1)
  {
    outlined destroy of Date?(v101);
    v77 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, *MEMORY[0x24BE3DD98], v108);
    v78 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
    v86 = v78;
    goto LABEL_39;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v107, v101, v102);
  v76 = objc_msgSend(v117, sel_groupDomain);
  if (v76)
  {
    v75 = v76;
    v70 = v76;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v9;

    v73 = v71;
    v74 = v72;
  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  v68 = v74;
  v69 = v73;
  if (!v74)
  {
    v64 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, *MEMORY[0x24BE3DCB0], v108);
    v65 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v102);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
    v86 = v65;
    goto LABEL_39;
  }
  v66 = v69;
  v67 = v68;
  v62 = v68;
  v63 = v69;
  v134 = v69;
  v135 = v68;
  objc_msgSend(v117, sel_joinState);
  GPKGroup.JoinState.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96) == 1)
  {
    outlined destroy of GPKGroup.JoinState?(v95);
    v60 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v111, *MEMORY[0x24BE3DD60], v108);
    v61 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v102);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
    v86 = v61;
    goto LABEL_39;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v99, v95, v96);
  v58 = type metadata accessor for DatabaseParticipant();
  v133 = Array.init()();
  v59 = objc_msgSend(v117, sel_participants);
  if (v59)
  {
    v57 = v59;
    v54 = v59;
    v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v56 = v55;
  }
  else
  {
    v56 = 0;
  }
  v53 = v56;
  if (v56)
  {
    v52 = v53;
    v51 = v53;
    v127 = v53;
    swift_bridgeObjectRetain();
    v49 = &v126;
    v126 = v51;
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
    lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
    v50 = Array.init<A>(_:)();
    v125 = v50;
    swift_bridgeObjectRetain();
    v133 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v42 = v133;
  swift_bridgeObjectRetain();
  v132[1] = v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
  v44 = type metadata accessor for GPKMember();
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v11 = lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
  v12 = v89;
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GPKGroup.init(group:), 0, v43, v44, v45, v11, MEMORY[0x24BEE3F20], (uint64_t)v132);
  v46 = v12;
  v47 = v13;
  if (v12)
  {
    v21 = v132[0];
    outlined destroy of [DatabaseParticipant]();
    outlined destroy of [DatabaseParticipant]();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v102);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
    v86 = v21;
    goto LABEL_39;
  }
  v40 = v47;
  outlined destroy of [DatabaseParticipant]();
  v131 = v40;
  swift_bridgeObjectRetain();
  v14 = dispatch thunk of GPKGroup.__allocating_init(members:)();
  v41 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v137 = v14;
  GPKGroup.setVersion(_:)((Swift::Int64)objc_msgSend(v117, sel_version));
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v121, v123, v118);
  GPKGroupID.init(uuid:)();
  GPKGroup.setGroupID(_:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v90);
  swift_release();
  GPKGroup.setCreationDate(_:)();
  swift_release();
  v15._countAndFlagsBits = v63;
  v15._object = v62;
  GPKGroup.setGroupDomain(_:)(v15);
  swift_release();
  GPKGroup.setJoinState(_:)();
  swift_release();
  GPKGroup.setLastKnownRSVPQueueSeqNumber(_:)((Swift::Int64)objc_msgSend(v117, sel_lastKnownRSVPQueueSeqNumber));
  swift_release();
  objc_msgSend(v117, sel_groupMode);
  v128 = GPKGroup.Mode.init(rawValue:)();
  v129 = v16 & 1;
  if ((v16 & 1) != 0)
    v130 = 0;
  else
    v130 = v128;
  GPKGroup.setGroupMode(_:)();
  swift_release();
  v39 = objc_msgSend(v117, sel_invitationID);
  if (v39)
  {
    v38 = v39;
    v37 = v39;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v81(v114, (uint64_t)v121, v118);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v114, 0, 1, v118);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v114, 1, 1, v118);
  }
  dispatch thunk of GPKGroup.invitationID.setter();
  swift_release();
  v36 = objc_msgSend(v117, sel_invitationBlob);
  if (v36)
  {
    v35 = v36;
    v30 = v36;
    v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v17;

    v33 = v31;
    v34 = v32;
  }
  else
  {
    v33 = 0;
    v34 = 0xF000000000000000;
  }
  dispatch thunk of GPKGroup.invitationBlob.setter();
  swift_release();
  v29 = objc_msgSend(v117, sel_invitationSenderHandle);
  if (v29)
  {
    v28 = v29;
    v23 = v29;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v18;

    v26 = v24;
    v27 = v25;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v22 = v27;
  dispatch thunk of GPKGroup.setInvitationSenderHandle(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of [DatabaseParticipant]();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v96);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v102);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);

  swift_release();
  return v41;
}

uint64_t closure #1 in GroupTransformer.transform(group:metaData:cachedGroup:)(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  Class isa;
  id v21;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  void *v30;
  id v31[7];
  void *v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v31[4] = a1;
  v31[3] = a2;
  v31[2] = a3;
  v3 = GPKMetadata.key.getter();
  v27 = static MetadataKeyGenerator.isManagedMembersKey(_:)(v3, v4);
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    type metadata accessor for JSONDecoder();
    JSONDecoder.__allocating_init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    v24 = GPKMetadata.value.getter();
    v25 = v5;
    lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v24, v25);
    swift_release();
    if (v26)
    {

      v23 = 0;
    }
    else
    {
      v23 = v29;
    }
    v31[5] = v23;
    if (!v23)
    {
      type metadata accessor for GPKMember();
      _allocateUninitializedArray<A>(_:)();
      outlined destroy of [GPKMember]?();
    }
    dispatch thunk of GPKGroup.setManagedMembers(_:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  v33 = 0;
  v18 = (id)objc_opt_self();
  v17 = GPKMetadata.value.getter();
  v16 = v6;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v17, v16);
  type metadata accessor for NSJSONReadingOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v31[0] = 0;
  v21 = objc_msgSend(v18, sel_JSONObjectWithData_options_error_, isa, v31[1], v31);
  v19 = v31[0];
  v7 = v31[0];
  v8 = v33;
  v33 = v19;

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    if ((swift_dynamicCast() & 1) != 0)
      v15 = v30;
    else
      v15 = 0;
    v32 = v15;
    if (v15)
    {
      v28 = v32;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      _allocateUninitializedArray<A>(_:)();
      v28 = (void *)Dictionary.init(dictionaryLiteral:)();
      outlined destroy of [String : String]?();
    }
    swift_unknownObjectRelease();
    v9 = GPKMetadata.key.getter();
    static MetadataKeyGenerator.memberUserID(fromKey:)(v9, v10);
    v14 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if (v14)
    {
      swift_bridgeObjectRetain();
      v31[6] = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : String]]);
      Dictionary.subscript.setter();
      swift_bridgeObjectRelease();
    }
    else
    {
      dispatch thunk of GPKGroup.metaData.setter();
      Dictionary<>.hashValue.getter();
      dispatch thunk of GPKGroup.metaDataHashAtInitialization.setter();
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v26;
  }
  v13 = v33;
  _convertNSErrorToError(_:)();

  return swift_willThrow();
}

uint64_t partial apply for closure #1 in GroupTransformer.transform(group:metaData:cachedGroup:)(void *a1)
{
  uint64_t v1;

  return closure #1 in GroupTransformer.transform(group:metaData:cachedGroup:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of GPKGroup.JoinState?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKGroup.JoinState();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for GroupTransforming.transform(group:metaData:cachedGroup:) in conformance GroupTransformer(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = GroupTransformer.transform(group:metaData:cachedGroup:)(a1, a2, a3);
  if (v3)
    return v5;
  else
    return v6;
}

uint64_t closure #1 in GPKGroup.init(group:)@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  uint64_t result;
  uint64_t v7;
  id v8;

  v8 = *a1;
  type metadata accessor for GPKMember();
  v3 = v8;
  result = GPKMember.__allocating_init(member:)();
  if (v7)
    *a2 = v7;
  else
    *a3 = result;
  return result;
}

uint64_t GPKGroup.init(invitation:)(void *a1)
{
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  char *v149;

  v126 = a1;
  v149 = 0;
  v147 = 0;
  v145 = 0;
  v146 = 0;
  v143 = 0;
  v144 = 0;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v138 = 0;
  v134 = 0;
  v132 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v109 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v110 = (char *)&v18 - v109;
  v123 = 0;
  v111 = type metadata accessor for GPKGroup.JoinState();
  v112 = *(_QWORD *)(v111 - 8);
  v113 = (*(_QWORD *)(v112 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v114 = (char *)&v18 - v113;
  v115 = type metadata accessor for Date();
  v116 = *(_QWORD *)(v115 - 8);
  v117 = (*(_QWORD *)(v116 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v118 = (char *)&v18 - v117;
  v119 = type metadata accessor for InternalErrorCode();
  v120 = *(_QWORD *)(v119 - 8);
  v121 = (*(_QWORD *)(v120 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v119);
  v122 = (char *)&v18 - v121;
  v124 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v125 = (uint64_t)&v18 - v124;
  v127 = type metadata accessor for GPKGroupID();
  v128 = *(_QWORD *)(v127 - 8);
  v129 = (*(_QWORD *)(v128 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v126);
  v130 = (char *)&v18 - v129;
  v149 = (char *)&v18 - v129;
  v147 = v3;
  v131 = objc_msgSend(v3, sel_groupID, v2);
  if (v131)
  {
    v107 = v131;
    v102 = v131;
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v104 = v4;

    v105 = v103;
    v106 = v104;
  }
  else
  {
    v105 = 0;
    v106 = 0;
  }
  v100 = v106;
  v101 = v105;
  if (!v106)
    goto LABEL_40;
  v98 = v101;
  v99 = v100;
  v97 = v100;
  v96 = v101;
  v145 = v101;
  v146 = v100;
  swift_bridgeObjectRetain();
  GPKGroupID.init(hexString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v125, 1, v127) == 1)
  {
    outlined destroy of GPKGroupID?(v125);
    swift_bridgeObjectRelease();
LABEL_40:
    v20 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v122, *MEMORY[0x24BE3DCA8], v119);
    v21 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v84 = v21;
    goto LABEL_42;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v130, v125, v127);
  v95 = objc_msgSend(v126, sel_groupDomain);
  if (v95)
  {
    v94 = v95;
    v89 = v95;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v91 = v6;

    v92 = v90;
    v93 = v91;
  }
  else
  {
    v92 = 0;
    v93 = 0;
  }
  v87 = v93;
  v88 = v92;
  if (!v93)
  {
    v81 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v122, *MEMORY[0x24BE3DCB0], v119);
    v83 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
    swift_bridgeObjectRelease();
    v84 = v83;
LABEL_42:
    v18 = v84;

    return v82;
  }
  v85 = v88;
  v86 = v87;
  v78 = v87;
  v79 = v88;
  v143 = v88;
  v144 = v87;
  v80 = objc_msgSend(v126, sel_invitationID);
  if (v80)
  {
    v77 = v80;
    v72 = v80;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v74 = v7;

    v75 = v73;
    v76 = v74;
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  v70 = v76;
  v71 = v75;
  if (!v76)
  {
    v66 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v122, *MEMORY[0x24BE3DD00], v119);
    v67 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
    swift_bridgeObjectRelease();
    v84 = v67;
    goto LABEL_42;
  }
  v68 = v71;
  v69 = v70;
  v62 = v70;
  v63 = v71;
  v141 = v71;
  v142 = v70;
  v64 = type metadata accessor for DatabaseParticipant();
  v140 = Array.init()();
  v65 = objc_msgSend(v126, sel_participants);
  if (v65)
  {
    v61 = v65;
    v58 = v65;
    v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = v59;
  }
  else
  {
    v60 = 0;
  }
  v57 = v60;
  if (v60)
  {
    v56 = v57;
    v55 = v57;
    v134 = v57;
    swift_bridgeObjectRetain();
    v53 = &v133;
    v133 = v55;
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
    lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
    v54 = Array.init<A>(_:)();
    v132 = v54;
    swift_bridgeObjectRetain();
    v140 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v46 = v140;
  swift_bridgeObjectRetain();
  v139[1] = v46;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
  v48 = type metadata accessor for GPKMember();
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v8 = lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
  v9 = v108;
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GPKGroup.init(invitation:), 0, v47, v48, v49, v8, MEMORY[0x24BEE3F20], (uint64_t)v139);
  v50 = v9;
  v51 = v10;
  if (v9)
  {
    v19 = v139[0];
    outlined destroy of [DatabaseParticipant]();
    outlined destroy of [DatabaseParticipant]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
    swift_bridgeObjectRelease();
    v84 = v19;
    goto LABEL_42;
  }
  v44 = v51;
  outlined destroy of [DatabaseParticipant]();
  v138 = v44;
  swift_bridgeObjectRetain();
  v11 = dispatch thunk of GPKGroup.__allocating_init(members:)();
  v45 = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v148 = v11;
  GPKGroup.setGroupID(_:)();
  swift_release();
  Date.init()();
  GPKGroup.setCreationDate(_:)();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v118, v115);
  swift_release();
  v12._countAndFlagsBits = v79;
  v12._object = v78;
  GPKGroup.setGroupDomain(_:)(v12);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v112 + 104))(v114, *MEMORY[0x24BE3E4B0], v111);
  GPKGroup.setJoinState(_:)();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v114, v111);
  swift_release();
  objc_msgSend(v126, sel_groupMode);
  v135 = GPKGroup.Mode.init(rawValue:)();
  v136 = v13 & 1;
  if ((v13 & 1) != 0)
    v137 = 0;
  else
    v137 = v135;
  GPKGroup.setGroupMode(_:)();
  swift_release();
  UUID.init(uuidString:)();
  dispatch thunk of GPKGroup.invitationID.setter();
  swift_release();
  v43 = objc_msgSend(v126, sel_senderHandle);
  if (v43)
  {
    v42 = v43;
    v37 = v43;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v14;

    v40 = v38;
    v41 = v39;
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  v35 = v41;
  dispatch thunk of GPKGroup.setInvitationSenderHandle(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  v36 = objc_msgSend(v126, sel_invitationBlob);
  if (v36)
  {
    v34 = v36;
    v29 = v36;
    v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v15;

    v32 = v30;
    v33 = v31;
  }
  else
  {
    v32 = 0;
    v33 = 0xF000000000000000;
  }
  dispatch thunk of GPKGroup.invitationBlob.setter();
  swift_release();
  v28 = objc_msgSend(v126, sel_groupBlob);
  if (v28)
  {
    v27 = v28;
    v22 = v28;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v16;

    v25 = v23;
    v26 = v24;
  }
  else
  {
    v25 = 0;
    v26 = 0xF000000000000000;
  }
  dispatch thunk of GPKGroup.groupBlob.setter();
  swift_release();
  objc_msgSend(v126, sel_invitationGroupVersion);
  dispatch thunk of GPKGroup.invitationGroupVersion.setter();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of [DatabaseParticipant]();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
  swift_bridgeObjectRelease();

  swift_release();
  return v45;
}

uint64_t closure #1 in GPKGroup.init(invitation:)@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  uint64_t result;
  uint64_t v7;
  id v8;

  v8 = *a1;
  type metadata accessor for GPKMember();
  v3 = v8;
  result = GPKMember.__allocating_init(member:)();
  if (v7)
    *a2 = v7;
  else
    *a3 = result;
  return result;
}

uint64_t dispatch thunk of GroupTransforming.transform(group:metaData:cachedGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for GroupTransformer()
{
  return &type metadata for GroupTransformer;
}

unint64_t lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v4 = lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v4 = lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCSYWb_1()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCs0D7AlgebraPWb_1()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCSQWb_1()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCs25ExpressibleByArrayLiteralPWb_1()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

uint64_t variable initialization expression of ShadowGroupCleaner.clearShadowGroupKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("clearShadowGroup", 0x10uLL, 1)._countAndFlagsBits;
}

uint64_t ShadowGroupCleaner.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 16, a1);
}

uint64_t ShadowGroupCleaner.invitationStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of InvitationStore(v1 + 56, a1);
}

uint64_t outlined init with copy of InvitationStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t ShadowGroupCleaner.invitationService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 96);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t ShadowGroupCleaner.cryptographyService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 112, a1);
}

uint64_t ShadowGroupCleaner.keyValueStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyValueStore(v1 + 152, a1);
}

uint64_t ShadowGroupCleaner.cleanShadowGroups()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[72] = v0;
  v1[70] = v1;
  v1[71] = 0;
  v2 = type metadata accessor for LogSubsystem();
  v1[73] = v2;
  v1[74] = *(_QWORD *)(v2 - 8);
  v1[75] = swift_task_alloc();
  v1[71] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;

  v1 = v0[72];
  v0[70] = v0;
  outlined init with copy of KeyValueStore(v1 + 152, (uint64_t)(v0 + 50));
  __swift_project_boxed_opaque_existential_1(v0 + 50, v0[53]);
  swift_bridgeObjectRetain();
  v13 = dispatch thunk of KeyValueStore.BOOL(forKey:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 50));
  if ((v13 & 1) != 0)
  {
    v10 = v12[75];
    v9 = v12[74];
    v11 = v12[73];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Already cleaned shadow groups.", 0x1EuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v12[70] + 8))();
  }
  else
  {
    v4 = (_QWORD *)v12[72];
    outlined init with copy of GroupStore((uint64_t)(v4 + 2), (uint64_t)(v12 + 55));
    v6 = v12[58];
    v7 = v12[59];
    __swift_project_boxed_opaque_existential_1(v12 + 55, v6);
    outlined init with copy of ShadowGroupCleaner(v4, v12 + 2);
    v5 = swift_task_alloc();
    v12[76] = v5;
    *(_QWORD *)(v5 + 16) = v12 + 2;
    v8 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 72) + **(int **)(v7 + 72));
    v3 = (_QWORD *)swift_task_alloc();
    v12[77] = v3;
    *v3 = v12[70];
    v3[1] = ShadowGroupCleaner.cleanShadowGroups();
    return v8(&async function pointer to partial apply for closure #1 in ShadowGroupCleaner.cleanShadowGroups(), v5, v6, v7);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 560) = *v1;
  *(_QWORD *)(v2 + 624) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    outlined destroy of ShadowGroupCleaner(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(BOOL (*)(void *), uint64_t, uint64_t, uint64_t);

  v3 = (_QWORD *)v0[72];
  v0[70] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 55));
  outlined init with copy of InvitationStore((uint64_t)(v3 + 7), (uint64_t)(v0 + 60));
  v6 = v0[63];
  v7 = v0[64];
  __swift_project_boxed_opaque_existential_1(v0 + 60, v6);
  outlined init with copy of ShadowGroupCleaner(v3, v0 + 26);
  v5 = swift_task_alloc();
  v0[79] = v5;
  *(_QWORD *)(v5 + 16) = v0 + 26;
  v8 = (uint64_t (*)(BOOL (*)(void *), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 + 56)
                                                                                      + **(int **)(v7 + 56));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 640) = v1;
  *v1 = *(_QWORD *)(v4 + 560);
  v1[1] = ShadowGroupCleaner.cleanShadowGroups();
  return v8(partial apply for closure #2 in ShadowGroupCleaner.cleanShadowGroups(), v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 208;
  *(_QWORD *)(v2 + 560) = *v1;
  *(_QWORD *)(v2 + 648) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    outlined destroy of ShadowGroupCleaner(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;

  v2 = v0[72];
  v0[70] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 60));
  outlined init with copy of KeyValueStore(v2 + 152, (uint64_t)(v0 + 65));
  __swift_project_boxed_opaque_existential_1(v0 + 65, v0[68]);
  swift_bridgeObjectRetain();
  dispatch thunk of KeyValueStore.set(_:forKey:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 65));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[70] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 560) = v0;
  swift_task_dealloc();
  outlined destroy of ShadowGroupCleaner(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 440);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 560) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 560) = v0;
  swift_task_dealloc();
  outlined destroy of ShadowGroupCleaner(v0 + 208);
  __swift_destroy_boxed_opaque_existential_1(v0 + 480);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 560) + 8))();
}

uint64_t closure #1 in ShadowGroupCleaner.cleanShadowGroups()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 344) = a2;
  *(_QWORD *)(v2 + 336) = a1;
  *(_QWORD *)(v2 + 272) = v2;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_BYTE *)(v2 + 552) = 0;
  *(_QWORD *)(v2 + 312) = 0;
  v3 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v2 + 352) = v3;
  *(_QWORD *)(v2 + 360) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 368) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v2 + 376) = swift_task_alloc();
  v4 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v2 + 384) = v4;
  *(_QWORD *)(v2 + 392) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 400) = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 408) = v5;
  *(_QWORD *)(v2 + 416) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 424) = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  *(_QWORD *)(v2 + 432) = v6;
  *(_QWORD *)(v2 + 440) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 448) = swift_task_alloc();
  *(_QWORD *)(v2 + 456) = swift_task_alloc();
  *(_QWORD *)(v2 + 464) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v2 + 472) = swift_task_alloc();
  *(_QWORD *)(v2 + 480) = swift_task_alloc();
  *(_QWORD *)(v2 + 488) = swift_task_alloc();
  *(_QWORD *)(v2 + 496) = swift_task_alloc();
  *(_QWORD *)(v2 + 280) = a1;
  *(_QWORD *)(v2 + 288) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in ShadowGroupCleaner.cleanShadowGroups()()
{
  uint64_t v0;
  void *v1;
  id v2;
  float v3;
  float v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  BOOL v55;
  void *v56;
  id v57;

  v1 = *(void **)(v0 + 336);
  v56 = v1;
  *(_QWORD *)(v0 + 272) = v0;
  v2 = objc_msgSend(v1, sel_clientModelVersion);
  v54 = v3;
  *(float *)(v0 + 556) = v3;
  static ClientModelVersion.minimumSupported.getter(v2);
  v4 = ClientModelVersion.rawValue.getter();
  *(float *)(v0 + 560) = v4;
  v55 = v54 < v4;
  *(_BYTE *)(v0 + 552) = v54 < v4;
  *(_QWORD *)(v0 + 176) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 184) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Should delete group ", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v57 = objc_msgSend(v56, sel_groupID);
  if (v57)
  {
    v52 = *(_QWORD *)(v53 + 496);
    v49 = *(_QWORD *)(v53 + 456);
    v50 = *(_QWORD *)(v53 + 440);
    v51 = *(_QWORD *)(v53 + 432);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v52, v49, v51);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v51);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v53 + 440) + 56))(*(_QWORD *)(v53 + 496), 1, 1, *(_QWORD *)(v53 + 432));
  }
  v43 = *(_QWORD *)(v53 + 496);
  v47 = *(_QWORD *)(v53 + 424);
  v46 = *(_QWORD *)(v53 + 416);
  v48 = *(_QWORD *)(v53 + 408);
  v44 = Optional.logInfo.getter();
  v45 = v7;
  outlined destroy of UUID?(v43);
  *(_QWORD *)(v53 + 192) = v44;
  *(_QWORD *)(v53 + 200) = v45;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v53 + 553) = v55;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v47);
  gpklog(_:type:fileID:line:subsystem:)();
  v10 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  *(_QWORD *)(v53 + 504) = v10;
  v10(v47, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v55)
    goto LABEL_22;
  v42 = objc_msgSend(*(id *)(v53 + 336), sel_groupID);
  if (v42)
  {
    v41 = *(_QWORD *)(v53 + 488);
    v38 = *(_QWORD *)(v53 + 456);
    v39 = *(_QWORD *)(v53 + 440);
    v40 = *(_QWORD *)(v53 + 432);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v38, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v40);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v53 + 440) + 56))(*(_QWORD *)(v53 + 488), 1, 1, *(_QWORD *)(v53 + 432));
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v53 + 440) + 48))(*(_QWORD *)(v53 + 488), 1, *(_QWORD *)(v53 + 432)) == 1)
  {
    outlined destroy of UUID?(*(_QWORD *)(v53 + 488));
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v53 + 488);
  v12 = *(_QWORD *)(v53 + 448);
  v13 = *(_QWORD *)(v53 + 432);
  v36 = *(id *)(v53 + 336);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 + 440) + 32);
  *(_QWORD *)(v53 + 512) = v14;
  v14(v12, v11, v13);
  v37 = objc_msgSend(v36, sel_participants);
  if (v37)
  {
    type metadata accessor for DatabaseParticipant();
    v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = v34;
  }
  else
  {
    v35 = 0;
  }
  *(_QWORD *)(v53 + 304) = v35;
  if (!*(_QWORD *)(v53 + 304))
  {
    outlined destroy of [DatabaseParticipant]?();
LABEL_21:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v53 + 392) + 56))(*(_QWORD *)(v53 + 376), 1, 1, *(_QWORD *)(v53 + 384));
    goto LABEL_18;
  }
  v33 = *(_QWORD *)(v53 + 304);
  swift_bridgeObjectRetain();
  outlined destroy of [DatabaseParticipant]?();
  *(_QWORD *)(v53 + 328) = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
  lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
  Sequence.first(where:)();
  outlined destroy of [DatabaseParticipant]();
  v32 = *(void **)(v53 + 296);
  if (!v32)
    goto LABEL_21;
  v29 = *(_QWORD *)(v53 + 392);
  v31 = *(_QWORD *)(v53 + 384);
  v30 = *(_QWORD *)(v53 + 376);
  DatabaseParticipant.userID.getter();

  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v31);
LABEL_18:
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v53 + 392) + 48))(*(_QWORD *)(v53 + 376), 1, *(_QWORD *)(v53 + 384)) != 1)
  {
    v21 = *(_QWORD *)(v53 + 456);
    v19 = *(_QWORD *)(v53 + 448);
    v18 = *(_QWORD *)(v53 + 440);
    v20 = *(_QWORD *)(v53 + 432);
    v22 = *(_QWORD *)(v53 + 344);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v53 + 392) + 32))(*(_QWORD *)(v53 + 400), *(_QWORD *)(v53 + 376), *(_QWORD *)(v53 + 384));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21, v19, v20);
    GPKGroupID.init(uuid:)();
    outlined init with copy of CryptographyServiceProviding(v22 + 112, v53 + 16);
    v23 = *(_QWORD *)(v53 + 40);
    v24 = *(_QWORD *)(v53 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v53 + 16), v23);
    v25 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 48) + **(int **)(v24 + 48));
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v53 + 520) = v15;
    *v15 = *(_QWORD *)(v53 + 272);
    v15[1] = closure #1 in ShadowGroupCleaner.cleanShadowGroups();
    return v25(*(_QWORD *)(v53 + 368), *(_QWORD *)(v53 + 400), v23, v24);
  }
  v28 = *(_QWORD *)(v53 + 448);
  v26 = *(_QWORD *)(v53 + 440);
  v27 = *(_QWORD *)(v53 + 432);
  outlined destroy of GPKUserID?(*(_QWORD *)(v53 + 376));
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
LABEL_22:
  v17 = *(float *)(v53 + 556) < *(float *)(v53 + 560);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(BOOL))(*(_QWORD *)(v53 + 272) + 8))(v17);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  char v14;

  v14 = *(_BYTE *)(v0 + 554);
  *(_QWORD *)(v0 + 272) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v14 & 1) != 0)
  {
    outlined init with copy of CryptographyServiceProviding(*(_QWORD *)(v13 + 344) + 112, v13 + 96);
    v10 = *(_QWORD *)(v13 + 120);
    v11 = *(_QWORD *)(v13 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v13 + 96), v10);
    v12 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 56)
                                                                            + **(int **)(v11 + 56));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v13 + 536) = v1;
    *v1 = *(_QWORD *)(v13 + 272);
    v1[1] = closure #1 in ShadowGroupCleaner.cleanShadowGroups();
    return v12(v13 + 56, *(_QWORD *)(v13 + 368), *(_QWORD *)(v13 + 400), v10, v11);
  }
  else
  {
    v7 = *(_QWORD *)(v13 + 448);
    v6 = *(_QWORD *)(v13 + 440);
    v8 = *(_QWORD *)(v13 + 432);
    v4 = *(_QWORD *)(v13 + 400);
    v3 = *(_QWORD *)(v13 + 392);
    v5 = *(_QWORD *)(v13 + 384);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v13 + 360) + 8))(*(_QWORD *)(v13 + 368), *(_QWORD *)(v13 + 352));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    v9 = *(float *)(v13 + 556) < *(float *)(v13 + 560);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(BOOL))(*(_QWORD *)(v13 + 272) + 8))(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 272) = *v1;
  *(_QWORD *)(v2 + 544) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = (void *)v0[68];
  v56 = v0[43];
  v0[34] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  outlined init with copy of CryptographyServiceProviding(v56 + 112, (uint64_t)(v0 + 17));
  v57 = v0[20];
  v58 = v0[21];
  __swift_project_boxed_opaque_existential_1(v0 + 17, v57);
  (*(void (**)(_QWORD *, uint64_t))(v58 + 264))(v0 + 7, v57);
  if (v1)
  {
    v14 = *(_QWORD *)(v55 + 368);
    v13 = *(_QWORD *)(v55 + 360);
    v15 = *(_QWORD *)(v55 + 352);
    __swift_destroy_boxed_opaque_existential_1(v55 + 136);
    __swift_destroy_boxed_opaque_existential_1(v55 + 56);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    v16 = *(id *)(v55 + 336);
    v10 = v1;
    *(_QWORD *)(v55 + 312) = v1;
    *(_QWORD *)(v55 + 208) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v55 + 216) = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when deleting crypto group ", 0x29uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v16, sel_groupID);
    if (v29)
    {
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 512);
      v34 = *(_QWORD *)(v55 + 472);
      v30 = *(_QWORD *)(v55 + 456);
      v32 = *(_QWORD *)(v55 + 440);
      v33 = *(_QWORD *)(v55 + 432);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      v31(v34, v30, v33);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v33);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v55 + 440) + 56))(*(_QWORD *)(v55 + 472), 1, 1, *(_QWORD *)(v55 + 432));
    }
    v22 = *(void (**)(uint64_t, uint64_t))(v55 + 504);
    v17 = *(_QWORD *)(v55 + 472);
    v27 = *(_QWORD *)(v55 + 448);
    v26 = *(_QWORD *)(v55 + 440);
    v28 = *(_QWORD *)(v55 + 432);
    v20 = *(_QWORD *)(v55 + 424);
    v21 = *(_QWORD *)(v55 + 408);
    v24 = *(_QWORD *)(v55 + 400);
    v23 = *(_QWORD *)(v55 + 392);
    v25 = *(_QWORD *)(v55 + 384);
    v18 = Optional.logInfo.getter();
    v19 = v7;
    outlined destroy of UUID?(v17);
    *(_QWORD *)(v55 + 224) = v18;
    *(_QWORD *)(v55 + 232) = v19;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v55 + 320) = v1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
    gpklog(_:type:fileID:line:subsystem:)();
    v22(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    v47 = 0;
  }
  else
  {
    v53 = *(void **)(v55 + 336);
    __swift_destroy_boxed_opaque_existential_1(v55 + 136);
    *(_QWORD *)(v55 + 240) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v55 + 248) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group deleted at crypto layer ", 0x1EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    v54 = objc_msgSend(v53, sel_groupID);
    if (v54)
    {
      v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 512);
      v52 = *(_QWORD *)(v55 + 480);
      v48 = *(_QWORD *)(v55 + 456);
      v50 = *(_QWORD *)(v55 + 440);
      v51 = *(_QWORD *)(v55 + 432);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      v49(v52, v48, v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v51);

    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v55 + 440) + 56))(*(_QWORD *)(v55 + 480), 1, 1, *(_QWORD *)(v55 + 432));
    }
    v40 = *(void (**)(uint64_t, uint64_t))(v55 + 504);
    v35 = *(_QWORD *)(v55 + 480);
    v38 = *(_QWORD *)(v55 + 424);
    v39 = *(_QWORD *)(v55 + 408);
    v36 = Optional.logInfo.getter();
    v37 = v4;
    outlined destroy of UUID?(v35);
    *(_QWORD *)(v55 + 256) = v36;
    *(_QWORD *)(v55 + 264) = v37;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
    gpklog(_:type:fileID:line:subsystem:)();
    v40(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v55 + 56);
    v45 = *(_QWORD *)(v55 + 448);
    v44 = *(_QWORD *)(v55 + 440);
    v46 = *(_QWORD *)(v55 + 432);
    v42 = *(_QWORD *)(v55 + 400);
    v41 = *(_QWORD *)(v55 + 392);
    v43 = *(_QWORD *)(v55 + 384);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v55 + 360) + 8))(*(_QWORD *)(v55 + 368), *(_QWORD *)(v55 + 352));
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    v47 = *(float *)(v55 + 556) < *(float *)(v55 + 560);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(BOOL))(*(_QWORD *)(v55 + 272) + 8))(v47);
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;

  v27 = v0[46];
  v26 = v0[45];
  v28 = v0[44];
  v0[34] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  v29 = (void *)v0[66];
  v30 = (void *)v0[42];
  v1 = v29;
  v0[39] = v29;
  v0[26] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[27] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when deleting crypto group ", 0x29uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v30, sel_groupID);
  if (v31)
  {
    v21 = (void (*)(uint64_t, uint64_t, uint64_t))v25[64];
    v24 = v25[59];
    v20 = v25[57];
    v22 = v25[55];
    v23 = v25[54];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v21(v24, v20, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v23);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v25[55] + 56))(v25[59], 1, 1, v25[54]);
  }
  v13 = (void (*)(uint64_t, uint64_t))v25[63];
  v8 = v25[59];
  v18 = v25[56];
  v17 = v25[55];
  v19 = v25[54];
  v11 = v25[53];
  v12 = v25[51];
  v15 = v25[50];
  v14 = v25[49];
  v16 = v25[48];
  v9 = Optional.logInfo.getter();
  v10 = v4;
  outlined destroy of UUID?(v8);
  v25[28] = v9;
  v25[29] = v10;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v25[40] = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v25[34] + 8))(0);
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;

  v27 = v0[46];
  v26 = v0[45];
  v28 = v0[44];
  v0[34] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  v29 = (void *)v0[68];
  v30 = (void *)v0[42];
  v1 = v29;
  v0[39] = v29;
  v0[26] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[27] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when deleting crypto group ", 0x29uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v30, sel_groupID);
  if (v31)
  {
    v21 = (void (*)(uint64_t, uint64_t, uint64_t))v25[64];
    v24 = v25[59];
    v20 = v25[57];
    v22 = v25[55];
    v23 = v25[54];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v21(v24, v20, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v23);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v25[55] + 56))(v25[59], 1, 1, v25[54]);
  }
  v13 = (void (*)(uint64_t, uint64_t))v25[63];
  v8 = v25[59];
  v18 = v25[56];
  v17 = v25[55];
  v19 = v25[54];
  v11 = v25[53];
  v12 = v25[51];
  v15 = v25[50];
  v14 = v25[49];
  v16 = v25[48];
  v9 = Optional.logInfo.getter();
  v10 = v4;
  outlined destroy of UUID?(v8);
  v25[28] = v9;
  v25[29] = v10;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v25[40] = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v25[34] + 8))(0);
}

uint64_t closure #1 in ShadowGroupCleaner.cleanShadowGroups()(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 272) = *v2;
  *(_BYTE *)(v3 + 554) = a1;
  *(_QWORD *)(v3 + 528) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

_QWORD *outlined init with copy of ShadowGroupCleaner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  *a2 = *a1;
  v8 = a1[1];
  swift_bridgeObjectRetain();
  a2[1] = v8;
  v2 = a1[5];
  a2[5] = v2;
  a2[6] = a1[6];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  v3 = a1[10];
  a2[10] = v3;
  a2[11] = a1[11];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 7), (uint64_t)(a1 + 7));
  v9 = a1[12];
  swift_unknownObjectRetain();
  v4 = a1[13];
  a2[12] = v9;
  a2[13] = v4;
  v5 = a1[17];
  a2[17] = v5;
  a2[18] = a1[18];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a2 + 14), (uint64_t)(a1 + 14));
  v6 = a1[22];
  a2[22] = v6;
  a2[23] = a1[23];
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a2 + 19), (uint64_t)(a1 + 19));
  return a2;
}

uint64_t partial apply for closure #1 in ShadowGroupCleaner.cleanShadowGroups()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in ShadowGroupCleaner.cleanShadowGroups();
  return closure #1 in ShadowGroupCleaner.cleanShadowGroups()(a1, v5);
}

uint64_t partial apply for closure #1 in ShadowGroupCleaner.cleanShadowGroups()(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t outlined destroy of ShadowGroupCleaner(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  __swift_destroy_boxed_opaque_existential_1(a1 + 152);
  return a1;
}

uint64_t closure #1 in closure #1 in ShadowGroupCleaner.cleanShadowGroups()()
{
  return DatabaseParticipant.isMe.getter() & 1;
}

BOOL closure #2 in ShadowGroupCleaner.cleanShadowGroups()(void *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  void *v4;
  uint64_t v5;
  id v6;
  float v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  Swift::String v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  Builtin::Word v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t countAndFlagsBits;
  void (*v81)(uint64_t, uint64_t);
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float v118;
  _BOOL4 v119;
  int v120;
  void *object;
  id v122;
  id v123;
  _QWORD v124[2];
  _QWORD v125[2];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[2];
  _QWORD v134[2];
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  void *v139;
  char *v140;

  v122 = a1;
  v113 = a2;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v137 = 0;
  v128 = 0;
  v129 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v106 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v107 = (uint64_t)v29 - v106;
  v108 = 0;
  v109 = type metadata accessor for UUID();
  v110 = *(_QWORD *)(v109 - 8);
  v111 = (*(_QWORD *)(v110 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v108);
  v112 = (char *)v29 - v111;
  v140 = (char *)v29 - v111;
  v114 = type metadata accessor for LogSubsystem();
  v115 = *(_QWORD *)(v114 - 8);
  v116 = (*(_QWORD *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v122);
  v117 = (uint64_t)v29 - v116;
  v139 = v4;
  v138 = v5;
  v6 = objc_msgSend(v4, sel_clientModelVersion, v3);
  v118 = v7;
  static ClientModelVersion.minimumSupported.getter(v6);
  v119 = v118 < ClientModelVersion.rawValue.getter();
  v120 = 1;
  v137 = v119;
  v135 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v136 = v8;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Should delete invitation Invitation ID - ", 0x29uLL, v120 & 1);
  object = v9._object;
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  v123 = objc_msgSend(v122, sel_invitationID);
  if (v123)
  {
    v105 = v123;
    v100 = v123;
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v102 = v10;

    v103 = v101;
    v104 = v102;
  }
  else
  {
    v103 = 0;
    v104 = 0;
  }
  v93 = v104;
  v90 = v103;
  swift_bridgeObjectRetain();
  v92 = v134;
  v134[0] = v90;
  v134[1] = v93;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v94 = Optional.logInfo.getter();
  v95 = v11;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v97 = v133;
  v133[0] = v94;
  v133[1] = v95;
  v96 = &v135;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", groupID - ", 0xCuLL, 1);
  v98 = v12._object;
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  v99 = objc_msgSend(v122, sel_groupID);
  if (v99)
  {
    v89 = v99;
    v84 = v99;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v86 = v13;

    v87 = v85;
    v88 = v86;
  }
  else
  {
    v87 = 0;
    v88 = 0;
  }
  v68 = v88;
  v66 = v87;
  swift_bridgeObjectRetain();
  v67 = v132;
  v132[0] = v66;
  v132[1] = v68;
  v69 = Optional.logInfo.getter();
  v70 = v14;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v71 = v131;
  v131[0] = v69;
  v131[1] = v70;
  v74 = &v135;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v77 = 1;
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
  v72 = v15._object;
  DefaultStringInterpolation.appendLiteral(_:)(v15);
  swift_bridgeObjectRelease();
  v130 = v119 & v77;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v77 & 1);
  v73 = v16._object;
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  swift_bridgeObjectRelease();
  v76 = v135;
  v75 = v136;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v78 = String.init(stringInterpolation:)();
  v83 = v17;
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, v77 & 1);
  countAndFlagsBits = v18._countAndFlagsBits;
  v82 = v18._object;
  v79 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v117);
  gpklog(_:type:fileID:line:subsystem:)();
  v81 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
  v81(v117, v114);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v119)
  {
    v65 = objc_msgSend(v122, sel_invitationID);
    if (v65)
    {
      v64 = v65;
      v59 = v65;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v61 = v19;

      v62 = v60;
      v63 = v61;
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    v57 = v63;
    v58 = v62;
    if (v63)
    {
      v55 = v58;
      v56 = v57;
      v54 = v57;
      v128 = v58;
      v129 = v57;
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v107, 1, v109) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v112, v107, v109);
        v50 = *(_QWORD *)(v113 + 96);
        v49 = *(_QWORD *)(v113 + 104);
        swift_unknownObjectRetain();
        ObjectType = swift_getObjectType();
        (*(void (**)(char *, uint64_t))(v49 + 80))(v112, ObjectType);
        swift_unknownObjectRelease();
        v51 = 35;
        v126 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v127 = v22;
        v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation deleted Invitation ID - ", v51, 1);
        v52 = v23._object;
        DefaultStringInterpolation.appendLiteral(_:)(v23);
        swift_bridgeObjectRelease();
        v53 = objc_msgSend(v122, sel_invitationID);
        if (v53)
        {
          v48 = v53;
          v43 = v53;
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v45 = v24;

          v46 = v44;
          v47 = v45;
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
        v30 = v47;
        v29[0] = v46;
        swift_bridgeObjectRetain();
        v29[1] = v125;
        v125[0] = v29[0];
        v125[1] = v30;
        v31 = Optional.logInfo.getter();
        v32 = v25;
        outlined destroy of String?();
        swift_bridgeObjectRelease();
        v33 = v124;
        v124[0] = v31;
        v124[1] = v32;
        v35 = &v126;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v38 = 1;
        v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        v34 = v26._object;
        DefaultStringInterpolation.appendLiteral(_:)(v26);
        swift_bridgeObjectRelease();
        v37 = v126;
        v36 = v127;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v39 = String.init(stringInterpolation:)();
        v42 = v27;
        v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ShadowGroupCleaner.swift", 0x25uLL, v38 & 1);
        v40 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v117);
        gpklog(_:type:fileID:line:subsystem:)();
        v81(v117, v114);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of UUID?(v107);
        swift_bridgeObjectRelease();
      }
    }
  }
  return v119;
}

BOOL partial apply for closure #2 in ShadowGroupCleaner.cleanShadowGroups()(void *a1)
{
  uint64_t v1;

  return closure #2 in ShadowGroupCleaner.cleanShadowGroups()(a1, *(_QWORD *)(v1 + 16));
}

void *ShadowGroupCleaner.init(groupStore:invitationStore:invitationService:cryptographyService:keyValueStore:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, const void *a5@<X4>, const void *a6@<X5>, Swift::String *a7@<X8>)
{
  *a7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("clearShadowGroup", 0x10uLL, 1);
  outlined init with take of GroupStore(a1, &a7[1]);
  outlined init with take of InvitationStore(a2, &a7[3]._object);
  a7[6]._countAndFlagsBits = a3;
  a7[6]._object = a4;
  outlined init with take of CryptographyServiceProviding(a5, &a7[7]);
  return outlined init with take of KeyValueStore(a6, &a7[9]._object);
}

void *outlined init with take of InvitationStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t initializeBufferWithCopyOfBuffer for ShadowGroupCleaner(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ShadowGroupCleaner(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 152);
}

_QWORD *initializeWithCopy for ShadowGroupCleaner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v8 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v8;
  v2 = a2[5];
  a1[5] = v2;
  a1[6] = a2[6];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  v3 = a2[10];
  a1[10] = v3;
  a1[11] = a2[11];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 7), (uint64_t)(a2 + 7));
  v9 = a2[12];
  swift_unknownObjectRetain();
  v4 = a2[13];
  a1[12] = v9;
  a1[13] = v4;
  v5 = a2[17];
  a1[17] = v5;
  a1[18] = a2[18];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 14), (uint64_t)(a2 + 14));
  v6 = a2[22];
  a1[22] = v6;
  a1[23] = a2[23];
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 19), (uint64_t)(a2 + 19));
  return a1;
}

_QWORD *assignWithCopy for ShadowGroupCleaner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 2), a2 + 2);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 7), a2 + 7);
  v4 = a2[12];
  swift_unknownObjectRetain();
  v5 = a2[13];
  a1[12] = v4;
  swift_unknownObjectRelease();
  a1[13] = v5;
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 14), a2 + 14);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 19), a2 + 19);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy192_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0xC0uLL);
}

_QWORD *assignWithTake for ShadowGroupCleaner(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  memcpy(a1 + 2, a2 + 2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 7));
  memcpy(a1 + 7, a2 + 7, 0x28uLL);
  v3 = a2[13];
  a1[12] = a2[12];
  swift_unknownObjectRelease();
  a1[13] = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 14));
  memcpy(a1 + 14, a2 + 14, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 19));
  memcpy(a1 + 19, a2 + 19, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowGroupCleaner(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 192))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for ShadowGroupCleaner(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 24;
  if (a2 < 0)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShadowGroupCleaner()
{
  return &type metadata for ShadowGroupCleaner;
}

uint64_t dispatch thunk of MetricsEventConvertible.eventInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t LookupUserKeyInfoRequest.Response.gpkUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t LookupUserKeyInfoRequest.Response.keyInfos.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for LookupUserKeyInfoRequest.Response() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for LookupUserKeyInfoRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for LookupUserKeyInfoRequest.Response;
  if (!type metadata singleton initialization cache for LookupUserKeyInfoRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static LookupUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t LookupUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LookupUserKeyInfoRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static LookupUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupUserKeyInfoRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupUserKeyInfoRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LookupUserKeyInfoRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return LookupUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LookupUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupUserKeyInfoRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LookupUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupUserKeyInfoRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LookupUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t LookupUserKeyInfoRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;

  v14 = a1;
  v33 = 0;
  v32 = 0;
  v24 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v24 - 8);
  v13 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)v6 - v13;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LookupUserKeyInfoRequest.Response.CodingKeys>);
  v15 = *(_QWORD *)(v23 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v6 - v16;
  v33 = v2;
  v32 = v1;
  v17 = v2[3];
  v18 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v17);
  lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v26, v21, v24);
  v22 = &v31;
  v31 = 0;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v3 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v6[1] = v28;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v24);
    v7 = *(_QWORD *)(v21 + *(int *)(type metadata accessor for LookupUserKeyInfoRequest.Response() + 20));
    swift_bridgeObjectRetain();
    v10 = &v30;
    v30 = v7;
    v8 = &v29;
    v29 = 1;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
    v4 = v27;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = v4;
    v12 = v4;
    if (v4)
      v6[0] = v12;
    outlined destroy of [UserKeyInfo]();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v23);
  }
}

unint64_t lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UserKeyInfo]);
    v4 = lazy protocol witness table accessor for type UserKeyInfo and conformance UserKeyInfo();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UserKeyInfo]);
    v4 = lazy protocol witness table accessor for type UserKeyInfo and conformance UserKeyInfo();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [UserKeyInfo] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type UserKeyInfo and conformance UserKeyInfo()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo;
  if (!lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo, &type metadata for UserKeyInfo);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo;
  if (!lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo, &type metadata for UserKeyInfo);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo and conformance UserKeyInfo);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [UserKeyInfo]()
{
  swift_bridgeObjectRelease();
}

uint64_t LookupUserKeyInfoRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  char v46;

  v23 = a2;
  v32 = a1;
  v45 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKUserID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v11 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LookupUserKeyInfoRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v11 - v31;
  v33 = type metadata accessor for LookupUserKeyInfoRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(v33 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v11 - v34;
  v46 = 0;
  v45 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v14 = v41;
  }
  else
  {
    v20 = &v44;
    v44 = 0;
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v13 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v14 = v13;
    }
    else
    {
      v15 = 1;
      v46 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
      v16 = &v42;
      v42 = v15;
      lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = *(int *)(v33 + 20);
        v46 = 3;
        *(_QWORD *)(v35 + v9) = v43;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of LookupUserKeyInfoRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of LookupUserKeyInfoRequest.Response(v35);
      }
      v12 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v14 = v12;
    }
  }
  v11 = v14;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v46 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of LookupUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for LookupUserKeyInfoRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + v6) = v7;
  return result;
}

uint64_t outlined destroy of LookupUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for LookupUserKeyInfoRequest.Response();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t LookupUserKeyInfoRequest.Response.init(gpkUserId:keyInfos:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for LookupUserKeyInfoRequest.Response();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance LookupUserKeyInfoRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LookupUserKeyInfoRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LookupUserKeyInfoRequest.Response(uint64_t a1)
{
  return LookupUserKeyInfoRequest.Response.encode(to:)(a1);
}

void variable initialization expression of LookupUserKeyInfoRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t LookupUserKeyInfoRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t LookupUserKeyInfoRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*LookupUserKeyInfoRequest.bodyContent.modify())()
{
  return LookupUserKeyInfoRequest.bodyContent.modify;
}

uint64_t LookupUserKeyInfoRequest.init(keyProtocolVersion:altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 *v29;
  _QWORD *v30;
  unsigned int v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[12];
  int v130;
  __int128 v131;
  __int128 v132;

  v69 = &v131;
  v70 = a9;
  v85 = a1;
  v71 = a2;
  v91 = a3;
  v72 = a4;
  v73 = a5;
  v74 = a6;
  v75 = a7;
  v76 = a8;
  v78 = a10;
  v79 = a11;
  v80 = a12;
  v77 = a13;
  v131 = 0u;
  v132 = 0u;
  v129[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  MEMORY[0x24BDAC7A8](v85);
  v81 = (char *)&v41 - v13;
  v130 = v14;
  v129[10] = v15;
  v129[11] = v16;
  v129[9] = v17;
  v129[7] = v18;
  v129[8] = v19;
  v129[5] = v20;
  v129[6] = v21;
  v129[3] = a10;
  v129[4] = a11;
  v129[1] = a12;
  v129[2] = v22;
  v131 = 0uLL;
  v132 = 0uLL;
  v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  v87 = _allocateUninitializedArray<A>(_:)();
  v84 = v23;
  v24 = HTTPBodyKey.keyNameSpace.unsafeMutableAddressor();
  outlined init with copy of String(v24, v84);
  v25 = HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  v82 = *(_QWORD *)v25;
  v83 = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain();
  v26 = v82;
  v27 = v83;
  v28 = v84;
  v88 = MEMORY[0x24BEE0D00];
  v84[5] = MEMORY[0x24BEE0D00];
  v28[2] = v26;
  v28[3] = v27;
  v29 = HTTPBodyKey.keyProtocolVersion.unsafeMutableAddressor();
  outlined init with copy of String(v29, v84 + 6);
  v30 = v84;
  v31 = v85;
  v84[11] = MEMORY[0x24BEE44F0];
  *((_DWORD *)v30 + 16) = v31;
  _finalizeUninitializedArray<A>(_:)();
  v129[0] = Dictionary.init(dictionaryLiteral:)();
  v32 = HTTPBodyKey.altDSID.unsafeMutableAddressor();
  v89 = *(_QWORD *)v32;
  v90 = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v91)
  {
    v67 = v71;
    v68 = v91;
    v128 = MEMORY[0x24BEE0D00];
    v125 = v71;
    v126 = v91;
  }
  else
  {
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v128 = 0;
  }
  v61 = v124;
  v124[0] = v89;
  v124[1] = v90;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  v33 = HTTPBodyKey.gpkUserID.unsafeMutableAddressor();
  v63 = *(_QWORD *)v33;
  v64 = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRetain();
  outlined init with copy of GPKUserID?(v72, v81);
  v65 = type metadata accessor for GPKUserID();
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v66 + 48))(v81, 1) == 1)
  {
    outlined destroy of GPKUserID?((uint64_t)v81);
    v120 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
  }
  else
  {
    v34 = GPKUserID.description.getter();
    v123 = MEMORY[0x24BEE0D00];
    v120 = v34;
    v121 = v35;
    (*(void (**)(char *, uint64_t))(v66 + 8))(v81, v65);
  }
  v118 = v63;
  v119 = v64;
  Dictionary.subscript.setter();
  v36 = HTTPBodyKey.email.unsafeMutableAddressor();
  v59 = *(_QWORD *)v36;
  v60 = *((_QWORD *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v74)
  {
    v57 = v73;
    v58 = v74;
    v117 = MEMORY[0x24BEE0D00];
    v114 = v73;
    v115 = v74;
  }
  else
  {
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v117 = 0;
  }
  v112 = v59;
  v113 = v60;
  Dictionary.subscript.setter();
  v37 = HTTPBodyKey.emailHash.unsafeMutableAddressor();
  v55 = *(_QWORD *)v37;
  v56 = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v76)
  {
    v53 = v75;
    v54 = v76;
    v111 = MEMORY[0x24BEE0D00];
    v108 = v75;
    v109 = v76;
  }
  else
  {
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
  }
  v106 = v55;
  v107 = v56;
  Dictionary.subscript.setter();
  v38 = HTTPBodyKey.phoneNumber.unsafeMutableAddressor();
  v51 = *(_QWORD *)v38;
  v52 = *((_QWORD *)v38 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v79)
  {
    v49 = v78;
    v50 = v79;
    v105 = MEMORY[0x24BEE0D00];
    v102 = v78;
    v103 = v79;
  }
  else
  {
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v105 = 0;
  }
  v100 = v51;
  v101 = v52;
  Dictionary.subscript.setter();
  v39 = HTTPBodyKey.phoneNumberHash.unsafeMutableAddressor();
  v47 = *(_QWORD *)v39;
  v48 = *((_QWORD *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v77)
  {
    v45 = v80;
    v46 = v77;
    v99 = MEMORY[0x24BEE0D00];
    v96 = v80;
    v97 = v77;
  }
  else
  {
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
  }
  v94 = v47;
  v95 = v48;
  v43 = v129;
  Dictionary.subscript.setter();
  v42 = v129[0];
  swift_bridgeObjectRetain();
  v93 = v62;
  *(_QWORD *)&v92 = v42;
  v44 = &v131;
  outlined assign with take of Any?(&v92, (uint64_t)&v131);
  outlined destroy of [String : Any]();
  outlined init with copy of LookupUserKeyInfoRequest((uint64_t)v44, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GPKUserID?((uint64_t)v72);
  swift_bridgeObjectRelease();
  return outlined destroy of LookupUserKeyInfoRequest((uint64_t)v44);
}

uint64_t outlined init with copy of LookupUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of LookupUserKeyInfoRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t LookupUserKeyInfoRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.lookupUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in LookupUserKeyInfoRequest()
{
  return lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response and conformance LookupUserKeyInfoRequest.Response();
}

unint64_t lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response and conformance LookupUserKeyInfoRequest.Response()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response and conformance LookupUserKeyInfoRequest.Response;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response and conformance LookupUserKeyInfoRequest.Response)
  {
    v0 = type metadata accessor for LookupUserKeyInfoRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest.Response, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest.Response and conformance LookupUserKeyInfoRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance LookupUserKeyInfoRequest()
{
  return LookupUserKeyInfoRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance LookupUserKeyInfoRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance LookupUserKeyInfoRequest@<X0>(uint64_t a1@<X8>)
{
  return LookupUserKeyInfoRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance LookupUserKeyInfoRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for LookupUserKeyInfoRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LookupUserKeyInfoRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for LookupUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for LookupUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for LookupUserKeyInfoRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupUserKeyInfoRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupUserKeyInfoRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupUserKeyInfoRequest()
{
  return &type metadata for LookupUserKeyInfoRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for LookupUserKeyInfoRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v12;

  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v5 = *(int *)(a3 + 20);
    v6 = *(uint64_t *)((char *)a2 + v5);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v5) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for LookupUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LookupUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v8) = v9;
  return result;
}

uint64_t assignWithCopy for LookupUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for LookupUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = a1;
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return result;
}

uint64_t assignWithTake for LookupUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupUserKeyInfoRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D439E04(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKUserID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for LookupUserKeyInfoRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D439EFC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKUserID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for LookupUserKeyInfoRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for LookupUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for LookupUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for LookupUserKeyInfoRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for LookupUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return &type metadata for LookupUserKeyInfoRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in LookupUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupUserKeyInfoRequest.Response.CodingKeys and conformance LookupUserKeyInfoRequest.Response.CodingKeys();
}

uint64_t Services.listeners.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Services.networkService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_unknownObjectRetain();
  return v2;
}

_QWORD *Services.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupService((_QWORD *)(v1 + 24), a1);
}

_QWORD *Services.metadataService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetadataService((_QWORD *)(v1 + 216), a1);
}

uint64_t Services.peerMessagingService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PeerMessagingServiceProviding(v1 + 352, a1);
}

uint64_t Services.keyDistributionService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyDistributionServiceProviding(v1 + 392, a1);
}

uint64_t outlined init with copy of KeyDistributionServiceProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Services.lookupManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserLookupManager(v1 + 432, a1);
}

uint64_t Services.accountManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DaemonAccountManagerProtocol(v1 + 472, a1);
}

uint64_t Services.securityService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecurityServiceProviding(v1 + 512, a1);
}

uint64_t outlined init with copy of SecurityServiceProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Services.eventService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 552);
  swift_retain();
  return v2;
}

uint64_t Services.readinessChecker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReadinessChecking(v1 + 560, a1);
}

void *Services.init(listeners:networkService:groupService:metadataService:peerMessagingService:keyDistributionService:lookupManager:accountManager:securityService:eventService:readinessChecker:)@<X0>(void *__src@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, const void *a5@<X4>, const void *a6@<X5>, const void *a7@<X6>, const void *a8@<X7>, _QWORD *a9@<X8>, const void *a10, const void *a11, uint64_t a12, const void *a13)
{
  *a9 = a2;
  a9[1] = a3;
  a9[2] = a4;
  memcpy(a9 + 3, __src, 0xC0uLL);
  memcpy(a9 + 27, a5, 0x88uLL);
  outlined init with take of PeerMessagingServiceProviding(a6, a9 + 44);
  outlined init with take of KeyDistributionServiceProviding(a7, a9 + 49);
  outlined init with take of UserLookupManager(a8, a9 + 54);
  outlined init with take of DaemonAccountManagerProtocol(a10, a9 + 59);
  outlined init with take of SecurityServiceProviding(a11, a9 + 64);
  a9[69] = a12;
  return outlined init with take of ReadinessChecking(a13, a9 + 70);
}

void *outlined init with take of KeyDistributionServiceProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of SecurityServiceProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t initializeBufferWithCopyOfBuffer for Services(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for Services(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
  __swift_destroy_boxed_opaque_existential_1(a1 + 216);
  __swift_destroy_boxed_opaque_existential_1(a1 + 256);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 312);
  __swift_destroy_boxed_opaque_existential_1(a1 + 352);
  __swift_destroy_boxed_opaque_existential_1(a1 + 392);
  __swift_destroy_boxed_opaque_existential_1(a1 + 432);
  __swift_destroy_boxed_opaque_existential_1(a1 + 472);
  __swift_destroy_boxed_opaque_existential_1(a1 + 512);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 560);
}

_QWORD *initializeWithCopy for Services(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v19;
  v20 = a2[1];
  swift_unknownObjectRetain();
  v2 = a2[2];
  a1[1] = v20;
  a1[2] = v2;
  v3 = a2[6];
  a1[6] = v3;
  a1[7] = a2[7];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  v4 = a2[11];
  a1[11] = v4;
  a1[12] = a2[12];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  v5 = a2[16];
  a1[16] = v5;
  a1[17] = a2[17];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
  v6 = a2[21];
  a1[21] = v6;
  a1[22] = a2[22];
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 18), (uint64_t)(a2 + 18));
  v21 = a2[23];
  swift_unknownObjectRetain();
  v7 = a2[24];
  a1[23] = v21;
  a1[24] = v7;
  v22 = a2[25];
  v23 = a2[26];
  outlined copy of Data._Representation(v22, v23);
  a1[25] = v22;
  a1[26] = v23;
  v8 = a2[30];
  a1[30] = v8;
  a1[31] = a2[31];
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 27), (uint64_t)(a2 + 27));
  v9 = a2[35];
  a1[35] = v9;
  a1[36] = a2[36];
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)(a1 + 32), (uint64_t)(a2 + 32));
  v24 = a2[37];
  swift_unknownObjectRetain();
  v10 = a2[38];
  a1[37] = v24;
  a1[38] = v10;
  v11 = a2[42];
  a1[42] = v11;
  a1[43] = a2[43];
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 39), (uint64_t)(a2 + 39));
  v12 = a2[47];
  a1[47] = v12;
  a1[48] = a2[48];
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))((uint64_t)(a1 + 44), (uint64_t)(a2 + 44));
  v13 = a2[52];
  a1[52] = v13;
  a1[53] = a2[53];
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(a1 + 49), (uint64_t)(a2 + 49));
  v14 = a2[57];
  a1[57] = v14;
  a1[58] = a2[58];
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 54), (uint64_t)(a2 + 54));
  v15 = a2[62];
  a1[62] = v15;
  a1[63] = a2[63];
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 59), (uint64_t)(a2 + 59));
  v16 = a2[67];
  a1[67] = v16;
  a1[68] = a2[68];
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(a1 + 64), (uint64_t)(a2 + 64));
  v25 = a2[69];
  swift_retain();
  a1[69] = v25;
  v17 = a2[73];
  a1[73] = v17;
  a1[74] = a2[74];
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))((uint64_t)(a1 + 70), (uint64_t)(a2 + 70));
  return a1;
}

_QWORD *assignWithCopy for Services(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v5;
  swift_bridgeObjectRelease();
  v6 = a2[1];
  swift_unknownObjectRetain();
  v7 = a2[2];
  a1[1] = v6;
  swift_unknownObjectRelease();
  a1[2] = v7;
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 3), a2 + 3);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 8), a2 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 13), a2 + 13);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 18), a2 + 18);
  v8 = a2[23];
  swift_unknownObjectRetain();
  v9 = a2[24];
  a1[23] = v8;
  swift_unknownObjectRelease();
  a1[24] = v9;
  v10 = a2[25];
  v11 = a2[26];
  outlined copy of Data._Representation(v10, v11);
  v2 = a1[25];
  v3 = a1[26];
  a1[25] = v10;
  a1[26] = v11;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 27), a2 + 27);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 32), a2 + 32);
  v12 = a2[37];
  swift_unknownObjectRetain();
  v13 = a2[38];
  a1[37] = v12;
  swift_unknownObjectRelease();
  a1[38] = v13;
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 39), a2 + 39);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 44), a2 + 44);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 49), a2 + 49);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 54), a2 + 54);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 59), a2 + 59);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 64), a2 + 64);
  v14 = a2[69];
  swift_retain();
  a1[69] = v14;
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 70), a2 + 70);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy600_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x258uLL);
}

_QWORD *assignWithTake for Services(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a2[2];
  a1[1] = a2[1];
  swift_unknownObjectRelease();
  a1[2] = v6;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 3));
  memcpy(a1 + 3, a2 + 3, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 8));
  memcpy(a1 + 8, a2 + 8, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 13));
  memcpy(a1 + 13, a2 + 13, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 18));
  memcpy(a1 + 18, a2 + 18, 0x28uLL);
  v7 = a2[24];
  a1[23] = a2[23];
  swift_unknownObjectRelease();
  a1[24] = v7;
  v2 = a2[26];
  v3 = a1[25];
  v4 = a1[26];
  a1[25] = a2[25];
  a1[26] = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 27));
  memcpy(a1 + 27, a2 + 27, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 32));
  memcpy(a1 + 32, a2 + 32, 0x28uLL);
  v8 = a2[38];
  a1[37] = a2[37];
  swift_unknownObjectRelease();
  a1[38] = v8;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 39));
  memcpy(a1 + 39, a2 + 39, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 44));
  memcpy(a1 + 44, a2 + 44, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 49));
  memcpy(a1 + 49, a2 + 49, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 54));
  memcpy(a1 + 54, a2 + 54, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 59));
  memcpy(a1 + 59, a2 + 59, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 64));
  memcpy(a1 + 64, a2 + 64, 0x30uLL);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 70));
  memcpy(a1 + 70, a2 + 70, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Services(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 600))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for Services(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 75;
  if (a2 < 0)
  {
    result[63] = 0;
    result[62] = 0;
    result[61] = 0;
    result[60] = 0;
    result[59] = 0;
    result[58] = 0;
    result[57] = 0;
    result[56] = 0;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[71] = 0;
    result[70] = 0;
    result[69] = 0;
    result[68] = 0;
    result[67] = 0;
    result[66] = 0;
    result[65] = 0;
    result[64] = 0;
    result[73] = 0;
    result[72] = 0;
    result[74] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *result = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Services()
{
  return &type metadata for Services;
}

uint64_t InitRSVPRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitRSVPRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t inited;

  inited = type metadata accessor for InitRSVPRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(inited + 20)), a1);
}

uint64_t type metadata accessor for InitRSVPRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitRSVPRequest.Response;
  if (!type metadata singleton initialization cache for InitRSVPRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitRSVPRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitRSVPRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitRSVPRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitRSVPRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitRSVPRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response.CodingKeys, &type metadata for InitRSVPRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response.CodingKeys, &type metadata for InitRSVPRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response.CodingKeys, &type metadata for InitRSVPRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response.CodingKeys, &type metadata for InitRSVPRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response.CodingKeys, &type metadata for InitRSVPRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitRSVPRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitRSVPRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitRSVPRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitRSVPRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitRSVPRequest.Response.CodingKeys()
{
  return InitRSVPRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitRSVPRequest.Response.CodingKeys()
{
  return InitRSVPRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitRSVPRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitRSVPRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitRSVPRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitRSVPRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitRSVPRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitRSVPRequest.Response.CodingKeys()
{
  return InitRSVPRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitRSVPRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitRSVPRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitRSVPRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitRSVPRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitRSVPRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitRSVPRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitRSVPRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitRSVPRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitRSVPRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  inited = type metadata accessor for InitRSVPRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(inited + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitRSVPRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitRSVPRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitRSVPRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitRSVPRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitRSVPRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  inited = type metadata accessor for InitRSVPRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(inited + 20)), *(_QWORD *)(a1 + *(int *)(inited + 20) + 8));
  return a1;
}

uint64_t InitRSVPRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitRSVPRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitRSVPRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitRSVPRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitRSVPRequest.Response(uint64_t a1)
{
  return InitRSVPRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitRSVPRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitRSVPRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitRSVPRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitRSVPRequest.bodyContent.modify())()
{
  return InitRSVPRequest.bodyContent.modify;
}

uint64_t InitRSVPRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v14 = a1;
  memset(v15, 0, sizeof(v15));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v2;
  v3 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v3, v8);
  v4 = GPKGroupID.hexString.getter();
  v8[5] = MEMORY[0x24BEE0D00];
  v8[2] = v4;
  v8[3] = v5;
  _finalizeUninitializedArray<A>(_:)();
  v13 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v11 = v13;
  outlined assign with take of Any?(&v11, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined init with copy of InitRSVPRequest((uint64_t)v15, a2);
  v6 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1);
  return outlined destroy of InitRSVPRequest((uint64_t)v15);
}

uint64_t outlined init with copy of InitRSVPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of InitRSVPRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t InitRSVPRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initRSVP.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitRSVPRequest()
{
  return lazy protocol witness table accessor for type InitRSVPRequest.Response and conformance InitRSVPRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitRSVPRequest.Response and conformance InitRSVPRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitRSVPRequest.Response and conformance InitRSVPRequest.Response;
  if (!lazy protocol witness table cache variable for type InitRSVPRequest.Response and conformance InitRSVPRequest.Response)
  {
    inited = type metadata accessor for InitRSVPRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitRSVPRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitRSVPRequest.Response and conformance InitRSVPRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitRSVPRequest()
{
  return InitRSVPRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitRSVPRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitRSVPRequest@<X0>(uint64_t a1@<X8>)
{
  return InitRSVPRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitRSVPRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitRSVPRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitRSVPRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitRSVPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitRSVPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitRSVPRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitRSVPRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitRSVPRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitRSVPRequest()
{
  return &type metadata for InitRSVPRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitRSVPRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitRSVPRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitRSVPRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitRSVPRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitRSVPRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitRSVPRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitRSVPRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D43D3B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitRSVPRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D43D4B4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitRSVPRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitRSVPRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitRSVPRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitRSVPRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitRSVPRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitRSVPRequest.Response.CodingKeys()
{
  return &type metadata for InitRSVPRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitRSVPRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitRSVPRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitRSVPRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRSVPRequest.Response.CodingKeys and conformance InitRSVPRequest.Response.CodingKeys();
}

BOOL static PeerMessageResult.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t PeerMessageResult.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t PeerMessageResult.hashValue.getter()
{
  lazy protocol witness table accessor for type PeerMessageResult and conformance PeerMessageResult();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type PeerMessageResult and conformance PeerMessageResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult;
  if (!lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for PeerMessageResult, &type metadata for PeerMessageResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult;
  if (!lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for PeerMessageResult, &type metadata for PeerMessageResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type PeerMessageResult and conformance PeerMessageResult);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PeerMessageResult(char *a1, char *a2)
{
  return static PeerMessageResult.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeerMessageResult()
{
  return PeerMessageResult.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeerMessageResult()
{
  return PeerMessageResult.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PeerMessageResult(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t variable initialization expression of PeerMessagingService.messageQueueLabel()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.incomingMessage", 0x23uLL, 1)._countAndFlagsBits;
}

uint64_t variable initialization expression of PeerMessagingService.invitationQueueLabel()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.incomingInvitation", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t variable initialization expression of PeerMessagingService.eventKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, 1)._countAndFlagsBits;
}

uint64_t variable initialization expression of PeerMessagingService.groupIDKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gid", 3uLL, 1)._countAndFlagsBits;
}

uint64_t variable initialization expression of PeerMessagingService.delegate()
{
  return 0;
}

uint64_t PeerMessagingService.delegate.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = MEMORY[0x242635600](v0 + 216);
  swift_endAccess();
  return v2;
}

uint64_t key path getter for PeerMessagingService.delegate : PeerMessagingService@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *a1;
  swift_retain();
  swift_beginAccess();
  v4 = MEMORY[0x242635600](v3 + 216);
  v6 = *(_QWORD *)(v3 + 224);
  swift_endAccess();
  *a2 = v4;
  a2[1] = v6;
  return swift_release();
}

uint64_t key path setter for PeerMessagingService.delegate : PeerMessagingService(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  outlined init with copy of PeerMessagingServiceDelegate?(a1, v4);
  v2 = v4[0];
  v3 = v4[1];
  swift_retain();
  PeerMessagingService.delegate.setter(v2, v3);
  return swift_release();
}

uint64_t PeerMessagingService.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 224) = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();
  PeerMessagingService.delegate.didset();
  return swift_unknownObjectRelease();
}

uint64_t PeerMessagingService.delegate.didset()
{
  return PeerMessagingService.idsServiceDeferredSetup()();
}

uint64_t PeerMessagingService.idsServiceDeferredSetup()()
{
  _QWORD *v0;
  id v1;
  id v2;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v0[14];
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v6 = (id)v0[10];
  v1 = v6;
  (*(void (**)(id, uint64_t))(v5 + 32))(v6, ObjectType);

  swift_unknownObjectRelease();
  v8 = v0[14];
  swift_unknownObjectRetain();
  v7 = swift_getObjectType();
  swift_retain();
  (*(void (**)(_QWORD *, _UNKNOWN **, uint64_t))(v8 + 16))(v0, &protocol witness table for PeerMessagingService, v7);
  swift_unknownObjectRelease();
  v10 = v0[16];
  swift_unknownObjectRetain();
  v9 = swift_getObjectType();
  v11 = (id)v0[11];
  v2 = v11;
  (*(void (**)(id, uint64_t))(v10 + 32))(v11, v9);

  swift_unknownObjectRelease();
  v13 = v0[16];
  swift_unknownObjectRetain();
  v12 = swift_getObjectType();
  swift_retain();
  (*(void (**)(_QWORD *, _UNKNOWN **, uint64_t))(v13 + 16))(v0, &protocol witness table for PeerMessagingService, v12);
  return swift_unknownObjectRelease();
}

void (*PeerMessagingService.delegate.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[5] = v1;
  swift_beginAccess();
  v2 = MEMORY[0x242635600](v1 + 216);
  v3 = *(_QWORD *)(v1 + 224);
  v6[3] = v2;
  v6[4] = v3;
  return PeerMessagingService.delegate.modify;
}

void PeerMessagingService.delegate.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v4[5];
    v2 = v4[4];
    swift_unknownObjectRetain();
    *(_QWORD *)(v3 + 224) = v2;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of PeerMessagingServiceDelegate?();
    swift_endAccess();
  }
  else
  {
    *(_QWORD *)(v4[5] + 224) = v4[4];
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    swift_endAccess();
    PeerMessagingService.delegate.didset();
  }
  free(v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of PeerMessagingServiceDelegate?()
{
  swift_unknownObjectRelease();
}

_QWORD *PeerMessagingService.__allocating_init(identityService:invitationService:utils:readinessChecker:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return PeerMessagingService.init(identityService:invitationService:utils:readinessChecker:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *PeerMessagingService.init(identityService:invitationService:utils:readinessChecker:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  char v14;
  Swift::String v15;
  char v16;
  Swift::String v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  _BYTE v52[40];
  _BYTE v53[24];
  uint64_t v54;
  Swift::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v50 = a1;
  v32 = a2;
  v49 = a3;
  v33 = a4;
  v48 = a5;
  v47 = a6;
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v42 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v41 = (uint64_t)&v28 - v28;
  v29 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v40 = (char *)&v28 - v29;
  v30 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v50);
  v39 = (char *)&v28 - v30;
  v60 = v7;
  v61 = v8;
  v58 = v9;
  v59 = v10;
  v57 = v11;
  v56 = v12;
  v55 = v6;
  v31 = 1;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.incomingMessage", 0x23uLL, 1);
  v14 = v31;
  v6[1] = v13;
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.incomingInvitation", 0x26uLL, v14 & 1);
  v16 = v31;
  v6[2] = v15;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, v16 & 1);
  v18 = v31;
  v6[3] = v17;
  v6[4] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gid", 3uLL, v18 & 1);
  v6[14]._countAndFlagsBits = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectRetain();
  v19 = v32;
  v6[6]._object = v50;
  v6[7]._countAndFlagsBits = v19;
  swift_unknownObjectRetain();
  v20 = v33;
  v6[7]._object = v49;
  v6[8]._countAndFlagsBits = v20;
  v36 = type metadata accessor for OS_dispatch_queue();
  v34 = v51[2];
  v35 = v51[3];
  swift_bridgeObjectRetain();
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v41);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v22 = v51;
  v51[10] = v21;
  v37 = v22[4];
  v38 = v22[5];
  swift_bridgeObjectRetain();
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v41);
  v51[11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BroadcastDispatcher<Data>);
  v44 = type metadata accessor for XPCDecoder();
  v54 = XPCDecoder.__allocating_init()();
  v23 = BroadcastDispatcher.__allocating_init<A>(decoder:)();
  v24 = v51;
  v25 = v23;
  v26 = v48;
  v51[12] = v25;
  v45 = v53;
  outlined init with copy of IdentityServiceUtils(v26, (uint64_t)v53);
  outlined init with take of IdentityServiceUtils(v45, v24 + 17);
  v46 = v52;
  outlined init with copy of ReadinessChecking(v47, (uint64_t)v52);
  outlined init with take of ReadinessChecking(v46, v24 + 22);
  __swift_destroy_boxed_opaque_existential_1(v47);
  __swift_destroy_boxed_opaque_existential_1(v48);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v51;
}

uint64_t PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)(v7 + 560) = v6;
  *(_QWORD *)(v7 + 552) = a5;
  *(_QWORD *)(v7 + 544) = a2;
  *(_QWORD *)(v7 + 536) = a1;
  *(_QWORD *)(v7 + 392) = v7;
  *(_QWORD *)(v7 + 400) = 0;
  *(_QWORD *)(v7 + 408) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 416) = 0;
  *(_BYTE *)(v7 + 768) = 0;
  *(_QWORD *)(v7 + 424) = 0;
  *(_QWORD *)(v7 + 432) = 0;
  *(_QWORD *)(v7 + 440) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  memset((void *)(v7 + 56), 0, 0x28uLL);
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 480) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 488) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 504) = 0;
  *(_QWORD *)(v7 + 520) = 0;
  type metadata accessor for GroupBlobEnvelope();
  *(_QWORD *)(v7 + 568) = swift_task_alloc();
  type metadata accessor for GPKGroupID();
  *(_QWORD *)(v7 + 576) = swift_task_alloc();
  *(_QWORD *)(v7 + 584) = type metadata accessor for InvitationIDSMessage();
  *(_QWORD *)(v7 + 592) = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v7 + 600) = v8;
  *(_QWORD *)(v7 + 608) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 616) = swift_task_alloc();
  *(_QWORD *)(v7 + 624) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v7 + 632) = swift_task_alloc();
  *(_QWORD *)(v7 + 640) = swift_task_alloc();
  *(_QWORD *)(v7 + 648) = swift_task_alloc();
  v9 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v7 + 656) = v9;
  *(_QWORD *)(v7 + 664) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 672) = swift_task_alloc();
  *(_QWORD *)(v7 + 680) = swift_task_alloc();
  *(_QWORD *)(v7 + 688) = swift_task_alloc();
  *(_QWORD *)(v7 + 696) = swift_task_alloc();
  *(_QWORD *)(v7 + 400) = a1;
  *(_QWORD *)(v7 + 408) = a2;
  *(_QWORD *)(v7 + 120) = a3;
  *(_QWORD *)(v7 + 128) = a4;
  *(_QWORD *)(v7 + 416) = a5;
  v10 = *a6 & 1;
  *(_BYTE *)(v7 + 770) = v10;
  *(_BYTE *)(v7 + 768) = v10;
  *(_QWORD *)(v7 + 424) = v6;
  return swift_task_switch();
}

uint64_t PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  _QWORD *v17;
  char v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v0[49] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [AnyHashable : Any]));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v0[54] = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
  _allocateUninitializedArray<A>(_:)();
  v75 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v0[55] = Dictionary.init(dictionaryLiteral:)();
  v0[56] = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v73 = *(_QWORD *)(v74 + 456);
    if (!v73)
      break;
    v70 = *(_QWORD *)(v74 + 664);
    v72 = *(_QWORD *)(v74 + 656);
    v71 = *(_QWORD *)(v74 + 648);
    *(_QWORD *)(v74 + 520) = v73;
    dispatch thunk of GPKMember.userID.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v71, 1, v72) == 1)
    {
      v64 = *(_QWORD *)(v74 + 616);
      v63 = *(_QWORD *)(v74 + 608);
      v65 = *(_QWORD *)(v74 + 600);
      outlined destroy of GPKUserID?(*(_QWORD *)(v74 + 648));
      *(_QWORD *)(v74 + 360) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v74 + 368) = v2;
      v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User ID not available for member: ", 0x22uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v3);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v74 + 528) = v73;
      type metadata accessor for GPKMember();
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v64);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v68 = *(_QWORD *)(v74 + 696);
      v66 = *(_QWORD *)(v74 + 688);
      v67 = *(_QWORD *)(v74 + 664);
      v69 = *(_QWORD *)(v74 + 656);
      (*(void (**)(void))(v67 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v66, v68, v69);
      *(_QWORD *)(v74 + 376) = dispatch thunk of GPKMember.handle.getter();
      *(_QWORD *)(v74 + 384) = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
      Dictionary.subscript.setter();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  IDSMessageCoder.init()();
  *(_QWORD *)(v74 + 464) = dispatch thunk of GPKGroup.members.getter();
  Collection<>.makeIterator()();
  v62 = 0;
  while (1)
  {
    IndexingIterator.next()();
    v61 = *(_QWORD *)(v74 + 472);
    if (!v61)
      break;
    *(_QWORD *)(v74 + 488) = v61;
    if ((dispatch thunk of GPKMember.isMe.getter() & 1) != 0)
    {
      swift_release();
    }
    else
    {
      v57 = *(_QWORD *)(v74 + 664);
      v59 = *(_QWORD *)(v74 + 656);
      v58 = *(_QWORD *)(v74 + 640);
      dispatch thunk of GPKMember.userID.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v58, 1, v59) == 1)
      {
        outlined destroy of GPKUserID?(*(_QWORD *)(v74 + 640));
      }
      else
      {
        v51 = *(_QWORD *)(v74 + 680);
        v54 = *(_QWORD *)(v74 + 672);
        v50 = *(_QWORD *)(v74 + 664);
        v53 = *(_QWORD *)(v74 + 656);
        v52 = *(_QWORD *)(v74 + 544);
        (*(void (**)(void))(v50 + 32))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v54, v51, v53);
        MEMORY[0x24263485C](v54, v52, v53, MEMORY[0x24BDCDDE8], v75);
        v55 = *(_QWORD *)(v74 + 312);
        v56 = *(_QWORD *)(v74 + 320);
        if ((v56 & 0xF000000000000000) != 0xF000000000000000)
        {
          v5 = *(_QWORD *)(v74 + 672);
          v6 = *(_QWORD *)(v74 + 664);
          v7 = *(_QWORD *)(v74 + 656);
          v45 = *(_QWORD *)(v74 + 592);
          v43 = *(_QWORD *)(v74 + 584);
          v42 = *(_QWORD *)(v74 + 576);
          v41 = *(_QWORD *)(v74 + 568);
          v37 = *(_QWORD *)(v74 + 552);
          *(_QWORD *)(v74 + 328) = v55;
          *(_QWORD *)(v74 + 336) = v56;
          v36 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
          v36(v5, v7);
          dispatch thunk of GPKGroup.groupID.getter();
          v38 = *(_QWORD *)(v74 + 440);
          swift_bridgeObjectRetain();
          v39 = dispatch thunk of GPKGroup.groupDomain.getter();
          v40 = v8;
          outlined copy of Data._Representation(v55, v56);
          outlined init with copy of GroupBlobEnvelope(v37, v41);
          InvitationIDSMessage.init(groupID:memberHandles:groupDomain:invitationToken:groupBlobEnvelope:)(v42, v38, v39, v40, v55, v56, v41, v45);
          v44 = lazy protocol witness table accessor for type InvitationIDSMessage and conformance InvitationIDSMessage();
          v9 = lazy protocol witness table accessor for type InvitationIDSMessage and conformance InvitationIDSMessage();
          v46 = IDSMessageCoder.encode<A>(_:)(v45, v43, v44, v9);
          v32 = *(_QWORD *)(v74 + 680);
          v33 = *(_QWORD *)(v74 + 656);
          v31 = *(_QWORD *)(v74 + 592);
          *(_QWORD *)(v74 + 504) = v46;
          v29 = dispatch thunk of GPKMember.handle.getter();
          v30 = v10;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v74 + 512) = v46;
          *(_QWORD *)(v74 + 344) = v29;
          *(_QWORD *)(v74 + 352) = v30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [AnyHashable : Any]]);
          Dictionary.subscript.setter();
          swift_bridgeObjectRelease();
          outlined destroy of InvitationIDSMessage(v31);
          outlined consume of Data._Representation(v55, v56);
          v36(v32, v33);
          v34 = 0;
          v35 = 0;
          goto LABEL_17;
        }
        v47 = *(_QWORD *)(v74 + 680);
        v48 = *(_QWORD *)(v74 + 656);
        v49 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v74 + 664) + 8);
        ((void (*)(_QWORD))v49)(*(_QWORD *)(v74 + 672));
        v49(v47, v48);
      }
      v27 = *(_QWORD *)(v74 + 616);
      v26 = *(_QWORD *)(v74 + 608);
      v28 = *(_QWORD *)(v74 + 600);
      *(_QWORD *)(v74 + 280) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v74 + 288) = v11;
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't generate invitation for ", 0x21uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v74 + 496) = v61;
      type metadata accessor for GPKMember();
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" with User ID: ", 0xFuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      dispatch thunk of GPKMember.userID.getter();
      *(_QWORD *)(v74 + 296) = String.init<A>(describing:)();
      *(_QWORD *)(v74 + 304) = v14;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v62;
      v35 = v60;
LABEL_17:
      swift_release();
      v62 = v34;
      v60 = v35;
    }
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRetain();
  Dictionary.makeIterator()();
  memcpy((void *)(v74 + 56), (const void *)(v74 + 16), 0x28uLL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [AnyHashable : Any]].Iterator);
  Dictionary.Iterator.next()();
  v23 = *(_QWORD *)(v74 + 96);
  *(_QWORD *)(v74 + 704) = v23;
  v24 = *(_QWORD *)(v74 + 104);
  *(_QWORD *)(v74 + 712) = v24;
  v25 = *(_QWORD *)(v74 + 112);
  *(_QWORD *)(v74 + 720) = v25;
  if (v24)
  {
    v19 = *(_BYTE *)(v74 + 770);
    v16 = *(_QWORD *)(v74 + 560);
    *(_QWORD *)(v74 + 168) = v23;
    *(_QWORD *)(v74 + 176) = v24;
    *(_QWORD *)(v74 + 480) = v25;
    *(_QWORD *)(v74 + 728) = *(_QWORD *)(v16 + 120);
    v21 = *(_QWORD *)(v16 + 128);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    *(_BYTE *)(v74 + 769) = v19 & 1;
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 40)
                                                                                       + **(int **)(v21 + 40));
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v74 + 736) = v17;
    *v17 = *(_QWORD *)(v74 + 392);
    v17[1] = PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:);
    return v22(v25, v23, v24, v74 + 769, ObjectType, v21);
  }
  else
  {
    outlined destroy of [String : [AnyHashable : Any]].Iterator();
    outlined destroy of [GPKUserID : String]();
    outlined destroy of [String : [AnyHashable : Any]]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v74 + 392) + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = v0[95];
  v23 = v0[94];
  v22 = v0[89];
  v21 = v0[88];
  v0[49] = v0;
  v0[23] = v23;
  v0[24] = v24;
  swift_unknownObjectRelease();
  v0[25] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[26] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation sent to ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[27] = v21;
  v0[28] = v22;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", identifier: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[31] = v23;
  v0[32] = v24;
  if (v0[32])
  {
    v7 = *(_QWORD *)(v20 + 256);
    *(_QWORD *)(v20 + 232) = *(_QWORD *)(v20 + 248);
    *(_QWORD *)(v20 + 240) = v7;
  }
  else
  {
    *(Swift::String *)(v20 + 232) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil", 3uLL, 1);
    outlined destroy of String?();
  }
  v11 = *(_QWORD *)(v20 + 616);
  v10 = *(_QWORD *)(v20 + 608);
  v12 = *(_QWORD *)(v20 + 600);
  v8 = *(_QWORD *)(v20 + 240);
  *(_QWORD *)(v20 + 264) = *(_QWORD *)(v20 + 232);
  *(_QWORD *)(v20 + 272) = v8;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [AnyHashable : Any]].Iterator);
  Dictionary.Iterator.next()();
  v16 = *(_QWORD *)(v20 + 96);
  *(_QWORD *)(v20 + 704) = v16;
  v13 = *(_QWORD *)(v20 + 104);
  *(_QWORD *)(v20 + 712) = v13;
  v14 = *(_QWORD *)(v20 + 112);
  *(_QWORD *)(v20 + 720) = v14;
  if (v13)
  {
    v15 = *(_BYTE *)(v20 + 770);
    v4 = *(_QWORD *)(v20 + 560);
    *(_QWORD *)(v20 + 168) = v16;
    *(_QWORD *)(v20 + 176) = v13;
    *(_QWORD *)(v20 + 480) = v14;
    *(_QWORD *)(v20 + 728) = *(_QWORD *)(v4 + 120);
    v18 = *(_QWORD *)(v4 + 128);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    *(_BYTE *)(v20 + 769) = v15 & 1;
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 40)
                                                                                       + **(int **)(v18 + 40));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v20 + 736) = v5;
    *v5 = *(_QWORD *)(v20 + 392);
    v5[1] = PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:);
    return v19(v14, v16, v13, v20 + 769, ObjectType, v18);
  }
  else
  {
    outlined destroy of [String : [AnyHashable : Any]].Iterator();
    outlined destroy of [GPKUserID : String]();
    outlined destroy of [String : [AnyHashable : Any]]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v20 + 392) + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 392) = v0;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String : [AnyHashable : Any]].Iterator();
  outlined destroy of [GPKUserID : String]();
  outlined destroy of [String : [AnyHashable : Any]]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 392) + 8))();
}

uint64_t PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = (_QWORD *)*v3;
  v5[49] = *v3;
  v5[93] = v2;
  v5[94] = a1;
  v5[95] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type InvitationIDSMessage and conformance InvitationIDSMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage)
  {
    v0 = type metadata accessor for InvitationIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage)
  {
    v0 = type metadata accessor for InvitationIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage and conformance InvitationIDSMessage);
    return v1;
  }
  return v3;
}

uint64_t PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)(v9 + 424) = v8;
  *(_QWORD *)(v9 + 416) = a7;
  *(_QWORD *)(v9 + 408) = a6;
  *(_QWORD *)(v9 + 400) = a5;
  *(_QWORD *)(v9 + 392) = a4;
  *(_QWORD *)(v9 + 384) = a3;
  *(_QWORD *)(v9 + 376) = a2;
  *(_BYTE *)(v9 + 813) = a1 & 1;
  *(_QWORD *)(v9 + 256) = v9;
  *(_BYTE *)(v9 + 808) = 0;
  *(_QWORD *)(v9 + 264) = 0;
  *(_QWORD *)(v9 + 272) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_BYTE *)(v9 + 816) = 0;
  *(_QWORD *)(v9 + 280) = 0;
  *(_QWORD *)(v9 + 288) = 0;
  *(_QWORD *)(v9 + 296) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 328) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 344) = 0;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 360) = 0;
  *(_QWORD *)(v9 + 432) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKGroup.JoinState?, GPKGroup.JoinState?));
  *(_QWORD *)(v9 + 440) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup.JoinState?);
  *(_QWORD *)(v9 + 448) = swift_task_alloc();
  *(_QWORD *)(v9 + 456) = swift_task_alloc();
  *(_QWORD *)(v9 + 464) = swift_task_alloc();
  v10 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v9 + 472) = v10;
  *(_QWORD *)(v9 + 480) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 488) = swift_task_alloc();
  v11 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v9 + 496) = v11;
  *(_QWORD *)(v9 + 504) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 512) = swift_task_alloc();
  *(_QWORD *)(v9 + 520) = swift_task_alloc();
  *(_QWORD *)(v9 + 528) = swift_task_alloc();
  *(_QWORD *)(v9 + 536) = type metadata accessor for RSVPResponseIDSMessage();
  *(_QWORD *)(v9 + 544) = swift_task_alloc();
  *(_QWORD *)(v9 + 552) = swift_task_alloc();
  v12 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v9 + 560) = v12;
  *(_QWORD *)(v9 + 568) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 576) = swift_task_alloc();
  *(_QWORD *)(v9 + 584) = swift_task_alloc();
  *(_QWORD *)(v9 + 592) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v9 + 600) = swift_task_alloc();
  *(_QWORD *)(v9 + 608) = swift_task_alloc();
  v13 = type metadata accessor for UUID();
  *(_QWORD *)(v9 + 616) = v13;
  *(_QWORD *)(v9 + 624) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v9 + 632) = swift_task_alloc();
  *(_BYTE *)(v9 + 808) = a1 & 1;
  *(_QWORD *)(v9 + 264) = a2;
  *(_QWORD *)(v9 + 272) = a3;
  *(_QWORD *)(v9 + 16) = a4;
  *(_QWORD *)(v9 + 24) = a5;
  *(_QWORD *)(v9 + 32) = a6;
  *(_QWORD *)(v9 + 40) = a7;
  v14 = *a8;
  *(_BYTE *)(v9 + 814) = *a8 & 1;
  *(_BYTE *)(v9 + 816) = v14 & 1;
  *(_QWORD *)(v9 + 280) = v8;
  return swift_task_switch();
}

uint64_t PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)()
{
  _QWORD *v0;
  void *v1;
  const void *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  void (*v4)(void);
  void (*v5)(const void *);
  unint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  char v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v44 = v0[78];
  v45 = v0[77];
  v1 = (void *)v0[76];
  v46 = v1;
  v2 = (const void *)v0[47];
  v0[32] = v0;
  outlined init with copy of UUID?(v2, v1);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v44 + 48))(v46, 1, v45) == 1)
  {
    v18 = *(_QWORD *)(v43 + 488);
    v17 = *(_QWORD *)(v43 + 480);
    v19 = *(_QWORD *)(v43 + 472);
    v16 = *(_BYTE *)(v43 + 813);
    outlined destroy of UUID?(*(_QWORD *)(v43 + 608));
    *(_QWORD *)(v43 + 48) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v43 + 56) = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InvitationID is missing when attempting to respond to invitation - response: ", 0x4DuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v43 + 809) = v16 & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v43 + 256) + 8))();
  }
  else
  {
    v40 = *(_QWORD *)(v43 + 592);
    v39 = *(_QWORD *)(v43 + 584);
    v38 = *(_QWORD *)(v43 + 568);
    v41 = *(_QWORD *)(v43 + 560);
    v42 = *(_BYTE *)(v43 + 813);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v43 + 624) + 32))(*(_QWORD *)(v43 + 632), *(_QWORD *)(v43 + 608), *(_QWORD *)(v43 + 616));
    dispatch thunk of GPKGroup.groupID.getter();
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
    *(_QWORD *)(v43 + 640) = v3;
    v3(v39, v40, v41);
    swift_bridgeObjectRetain();
    if ((v42 & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v43 + 504) + 104))(*(_QWORD *)(v43 + 528), *MEMORY[0x24BE3E4A8], *(_QWORD *)(v43 + 496));
    else
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v43 + 504) + 104))(*(_QWORD *)(v43 + 528), *MEMORY[0x24BE3E4C0], *(_QWORD *)(v43 + 496));
    v28 = *(_QWORD *)(v43 + 624);
    v33 = *(const void **)(v43 + 600);
    v29 = *(_QWORD *)(v43 + 584);
    v36 = *(_QWORD *)(v43 + 552);
    v34 = *(_QWORD *)(v43 + 536);
    v32 = *(_QWORD *)(v43 + 528);
    v31 = *(_QWORD *)(v43 + 400);
    v30 = *(_QWORD *)(v43 + 392);
    v4 = *(void (**)(void))(v28 + 16);
    *(_QWORD *)(v43 + 648) = v4;
    v4();
    v5 = *(void (**)(const void *))(v28 + 56);
    *(_QWORD *)(v43 + 656) = v5;
    v5(v33);
    RSVPResponseIDSMessage.init(groupID:responseFrom:response:invitationID:destinationMemberType:)(v29, v30, v31, v32, v33, 0, v36);
    IDSMessageCoder.init()();
    v35 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
    *(_QWORD *)(v43 + 664) = v35;
    v6 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
    *(_QWORD *)(v43 + 672) = v6;
    v37 = IDSMessageCoder.encode<A>(_:)(v36, v34, v35, v6);
    *(_QWORD *)(v43 + 680) = v37;
    v7 = *(_BYTE *)(v43 + 813);
    *(_QWORD *)(v43 + 288) = v37;
    if ((v7 & 1) != 0)
    {
      v24 = *(_BYTE *)(v43 + 814);
      v8 = *(_QWORD *)(v43 + 424);
      *(_QWORD *)(v43 + 688) = *(_QWORD *)(v8 + 120);
      v26 = *(_QWORD *)(v8 + 128);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      *(_BYTE *)(v43 + 812) = v24 & 1;
      v27 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 48)
                                                                               + **(int **)(v26 + 48));
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v43 + 696) = v9;
      *v9 = *(_QWORD *)(v43 + 256);
      v9[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
      return v27(*(_QWORD *)(v43 + 632), v37, v43 + 812, ObjectType, v26);
    }
    else
    {
      v20 = *(_BYTE *)(v43 + 814);
      v11 = *(_QWORD *)(v43 + 424);
      *(_QWORD *)(v43 + 712) = *(_QWORD *)(v11 + 120);
      v22 = *(_QWORD *)(v11 + 128);
      swift_unknownObjectRetain();
      v21 = swift_getObjectType();
      *(_BYTE *)(v43 + 810) = v20 & 1;
      v23 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 56)
                                                                               + **(int **)(v22 + 56));
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v43 + 720) = v12;
      *v12 = *(_QWORD *)(v43 + 256);
      v12[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
      return v23(*(_QWORD *)(v43 + 632), v37, v43 + 810, v21, v22);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 704) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(const void *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  char *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);

  v0[32] = v0;
  swift_unknownObjectRelease();
  v76 = v0[88];
  v78 = v0[61];
  v77 = v0[60];
  v79 = v0[59];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP response sent to the invitation sender", 0x2BuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v78);
  gpklog(_:type:fileID:line:subsystem:)();
  v80 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v0[92] = v80;
  v80(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[37] = _allocateUninitializedArray<A>(_:)();
  v0[38] = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v74 = *(_QWORD *)(v75 + 312);
    if (!v74)
      break;
    *(_QWORD *)(v75 + 360) = v74;
    if ((dispatch thunk of GPKMember.isMe.getter() & 1) == 0)
    {
      dispatch thunk of GPKMember.handle.getter();
      v73 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      if ((v73 & 1) == 0)
      {
        *(_QWORD *)(v75 + 368) = dispatch thunk of GPKMember.group.getter();
        if (*(_QWORD *)(v75 + 368))
        {
          v70 = *(_QWORD *)(v75 + 504);
          v72 = *(_QWORD *)(v75 + 496);
          v71 = *(_QWORD *)(v75 + 464);
          swift_retain();
          outlined destroy of GPKGroup?();
          dispatch thunk of GPKGroup.joinState.getter();
          swift_release();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v72);
        }
        else
        {
          v49 = *(_QWORD *)(v75 + 504);
          v50 = *(_QWORD *)(v75 + 496);
          v51 = *(_QWORD *)(v75 + 464);
          outlined destroy of GPKGroup?();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, 1, 1, v50);
        }
        v66 = *(_QWORD *)(v75 + 504);
        v67 = *(_QWORD *)(v75 + 496);
        v63 = *(const void **)(v75 + 464);
        v65 = *(const void **)(v75 + 456);
        v68 = *(char **)(v75 + 440);
        v62 = *(_QWORD *)(v75 + 432);
        (*(void (**)(void))(v66 + 104))();
        (*(void (**)(const void *, _QWORD))(v66 + 56))(v65, 0);
        v64 = &v68[*(int *)(v62 + 48)];
        outlined init with copy of GPKGroup.JoinState?(v63, v68);
        outlined init with copy of GPKGroup.JoinState?(v65, v64);
        v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
        if (v69(v68, 1, v67) == 1)
        {
          if (v69(v64, 1, *(_QWORD *)(v75 + 496)) == 1)
          {
            outlined destroy of GPKGroup.JoinState?(*(_QWORD *)(v75 + 440));
            v60 = 1;
          }
          else
          {
LABEL_16:
            outlined destroy of (GPKGroup.JoinState?, GPKGroup.JoinState?)(*(_QWORD *)(v75 + 440));
            v60 = 0;
          }
        }
        else
        {
          v61 = *(_QWORD *)(v75 + 496);
          outlined init with copy of GPKGroup.JoinState?(*(const void **)(v75 + 440), *(void **)(v75 + 448));
          if (v69(v64, 1, v61) == 1)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 8))(*(_QWORD *)(v75 + 448), *(_QWORD *)(v75 + 496));
            goto LABEL_16;
          }
          v54 = *(_QWORD *)(v75 + 520);
          v53 = *(_QWORD *)(v75 + 504);
          v56 = *(_QWORD *)(v75 + 496);
          v55 = *(_QWORD *)(v75 + 448);
          v58 = *(_QWORD *)(v75 + 440);
          (*(void (**)(void))(v53 + 32))();
          lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
          v59 = dispatch thunk of static Equatable.== infix(_:_:)();
          v57 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
          v57(v54, v56);
          v57(v55, v56);
          outlined destroy of GPKGroup.JoinState?(v58);
          v60 = v59;
        }
        v52 = *(_QWORD *)(v75 + 464);
        outlined destroy of GPKGroup.JoinState?(*(_QWORD *)(v75 + 456));
        outlined destroy of GPKGroup.JoinState?(v52);
        if ((v60 & 1) != 0)
        {
          dispatch thunk of GPKMember.handle.getter();
          specialized Array.append(_:)();
        }
      }
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v47 = *(_QWORD *)(v75 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v75 + 320) = v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v48 = Collection.isEmpty.getter();
  outlined destroy of [String]();
  swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
  {
    v45 = *(_QWORD *)(v75 + 632);
    v44 = *(_QWORD *)(v75 + 624);
    v46 = *(_QWORD *)(v75 + 616);
    v43 = *(_QWORD *)(v75 + 592);
    v41 = *(_QWORD *)(v75 + 568);
    v42 = *(_QWORD *)(v75 + 560);
    v40 = *(_QWORD *)(v75 + 552);
    v38 = *(_QWORD *)(v75 + 488);
    v39 = *(_QWORD *)(v75 + 472);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No remaining members to be notified of invitation response", 0x3AuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
    gpklog(_:type:fileID:line:subsystem:)();
    v80(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v40);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    goto LABEL_29;
  }
  v37 = *(_BYTE *)(v75 + 813);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v75 + 640))(*(_QWORD *)(v75 + 576), *(_QWORD *)(v75 + 592), *(_QWORD *)(v75 + 560));
  swift_bridgeObjectRetain();
  if ((v37 & 1) != 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 104))(*(_QWORD *)(v75 + 512), *MEMORY[0x24BE3E4A8], *(_QWORD *)(v75 + 496));
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 104))(*(_QWORD *)(v75 + 512), *MEMORY[0x24BE3E4C0], *(_QWORD *)(v75 + 496));
  v35 = *(_QWORD *)(v75 + 672);
  v34 = *(_QWORD *)(v75 + 664);
  v26 = *(void (**)(const void *, _QWORD))(v75 + 656);
  v31 = *(const void **)(v75 + 600);
  v27 = *(_QWORD *)(v75 + 576);
  v32 = *(_QWORD *)(v75 + 544);
  v33 = *(_QWORD *)(v75 + 536);
  v30 = *(_QWORD *)(v75 + 512);
  v29 = *(_QWORD *)(v75 + 400);
  v28 = *(_QWORD *)(v75 + 392);
  (*(void (**)(void))(v75 + 648))();
  v26(v31, 0);
  RSVPResponseIDSMessage.init(groupID:responseFrom:response:invitationID:destinationMemberType:)(v27, v28, v29, v30, v31, 1, v32);
  v36 = IDSMessageCoder.encode<A>(_:)(v32, v33, v34, v35);
  *(_QWORD *)(v75 + 744) = v36;
  if (v76)
  {
    v9 = *(_QWORD *)(v75 + 632);
    v8 = *(_QWORD *)(v75 + 624);
    v10 = *(_QWORD *)(v75 + 616);
    v7 = *(_QWORD *)(v75 + 592);
    v5 = *(_QWORD *)(v75 + 568);
    v6 = *(_QWORD *)(v75 + 560);
    v4 = *(_QWORD *)(v75 + 552);
    outlined destroy of RSVPResponseIDSMessage(*(_QWORD *)(v75 + 544));
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v75 + 256) + 8))();
  }
  else
  {
    *(_QWORD *)(v75 + 328) = v36;
    v23 = *(_QWORD *)(v75 + 296);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v75 + 336) = v23;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    v24 = *(_QWORD *)(v75 + 96);
    *(_QWORD *)(v75 + 752) = v24;
    v25 = *(_QWORD *)(v75 + 104);
    *(_QWORD *)(v75 + 760) = v25;
    if (v25)
    {
      v19 = *(_BYTE *)(v75 + 814);
      v1 = *(_QWORD *)(v75 + 424);
      *(_QWORD *)(v75 + 112) = v24;
      *(_QWORD *)(v75 + 120) = v25;
      *(_QWORD *)(v75 + 768) = *(_QWORD *)(v1 + 104);
      v21 = *(_QWORD *)(v1 + 112);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      *(_BYTE *)(v75 + 811) = v19 & 1;
      v22 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 40)
                                                                                        + **(int **)(v21 + 40));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v75 + 776) = v2;
      *v2 = *(_QWORD *)(v75 + 256);
      v2[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
      return v22(*(_QWORD *)(v75 + 744), v24, v25, v75 + 811, ObjectType, v21);
    }
    else
    {
      v17 = *(_QWORD *)(v75 + 632);
      v16 = *(_QWORD *)(v75 + 624);
      v18 = *(_QWORD *)(v75 + 616);
      v15 = *(_QWORD *)(v75 + 592);
      v13 = *(_QWORD *)(v75 + 568);
      v14 = *(_QWORD *)(v75 + 560);
      v12 = *(_QWORD *)(v75 + 552);
      v11 = *(_QWORD *)(v75 + 544);
      outlined destroy of IndexingIterator<[String]>();
      swift_bridgeObjectRelease();
      outlined destroy of RSVPResponseIDSMessage(v11);
      outlined destroy of [String]();
      swift_bridgeObjectRelease();
      outlined destroy of RSVPResponseIDSMessage(v12);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
LABEL_29:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v75 + 256) + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 728) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(const void *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  char *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);

  v0[32] = v0;
  swift_unknownObjectRelease();
  v76 = v0[91];
  v78 = v0[61];
  v77 = v0[60];
  v79 = v0[59];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP response sent to the invitation sender", 0x2BuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v78);
  gpklog(_:type:fileID:line:subsystem:)();
  v80 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v0[92] = v80;
  v80(v78, v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[37] = _allocateUninitializedArray<A>(_:)();
  v0[38] = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v74 = *(_QWORD *)(v75 + 312);
    if (!v74)
      break;
    *(_QWORD *)(v75 + 360) = v74;
    if ((dispatch thunk of GPKMember.isMe.getter() & 1) == 0)
    {
      dispatch thunk of GPKMember.handle.getter();
      v73 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      if ((v73 & 1) == 0)
      {
        *(_QWORD *)(v75 + 368) = dispatch thunk of GPKMember.group.getter();
        if (*(_QWORD *)(v75 + 368))
        {
          v70 = *(_QWORD *)(v75 + 504);
          v72 = *(_QWORD *)(v75 + 496);
          v71 = *(_QWORD *)(v75 + 464);
          swift_retain();
          outlined destroy of GPKGroup?();
          dispatch thunk of GPKGroup.joinState.getter();
          swift_release();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v72);
        }
        else
        {
          v49 = *(_QWORD *)(v75 + 504);
          v50 = *(_QWORD *)(v75 + 496);
          v51 = *(_QWORD *)(v75 + 464);
          outlined destroy of GPKGroup?();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, 1, 1, v50);
        }
        v66 = *(_QWORD *)(v75 + 504);
        v67 = *(_QWORD *)(v75 + 496);
        v63 = *(const void **)(v75 + 464);
        v65 = *(const void **)(v75 + 456);
        v68 = *(char **)(v75 + 440);
        v62 = *(_QWORD *)(v75 + 432);
        (*(void (**)(void))(v66 + 104))();
        (*(void (**)(const void *, _QWORD))(v66 + 56))(v65, 0);
        v64 = &v68[*(int *)(v62 + 48)];
        outlined init with copy of GPKGroup.JoinState?(v63, v68);
        outlined init with copy of GPKGroup.JoinState?(v65, v64);
        v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
        if (v69(v68, 1, v67) == 1)
        {
          if (v69(v64, 1, *(_QWORD *)(v75 + 496)) == 1)
          {
            outlined destroy of GPKGroup.JoinState?(*(_QWORD *)(v75 + 440));
            v60 = 1;
          }
          else
          {
LABEL_16:
            outlined destroy of (GPKGroup.JoinState?, GPKGroup.JoinState?)(*(_QWORD *)(v75 + 440));
            v60 = 0;
          }
        }
        else
        {
          v61 = *(_QWORD *)(v75 + 496);
          outlined init with copy of GPKGroup.JoinState?(*(const void **)(v75 + 440), *(void **)(v75 + 448));
          if (v69(v64, 1, v61) == 1)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 8))(*(_QWORD *)(v75 + 448), *(_QWORD *)(v75 + 496));
            goto LABEL_16;
          }
          v54 = *(_QWORD *)(v75 + 520);
          v53 = *(_QWORD *)(v75 + 504);
          v56 = *(_QWORD *)(v75 + 496);
          v55 = *(_QWORD *)(v75 + 448);
          v58 = *(_QWORD *)(v75 + 440);
          (*(void (**)(void))(v53 + 32))();
          lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
          v59 = dispatch thunk of static Equatable.== infix(_:_:)();
          v57 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
          v57(v54, v56);
          v57(v55, v56);
          outlined destroy of GPKGroup.JoinState?(v58);
          v60 = v59;
        }
        v52 = *(_QWORD *)(v75 + 464);
        outlined destroy of GPKGroup.JoinState?(*(_QWORD *)(v75 + 456));
        outlined destroy of GPKGroup.JoinState?(v52);
        if ((v60 & 1) != 0)
        {
          dispatch thunk of GPKMember.handle.getter();
          specialized Array.append(_:)();
        }
      }
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v47 = *(_QWORD *)(v75 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v75 + 320) = v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v48 = Collection.isEmpty.getter();
  outlined destroy of [String]();
  swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
  {
    v45 = *(_QWORD *)(v75 + 632);
    v44 = *(_QWORD *)(v75 + 624);
    v46 = *(_QWORD *)(v75 + 616);
    v43 = *(_QWORD *)(v75 + 592);
    v41 = *(_QWORD *)(v75 + 568);
    v42 = *(_QWORD *)(v75 + 560);
    v40 = *(_QWORD *)(v75 + 552);
    v38 = *(_QWORD *)(v75 + 488);
    v39 = *(_QWORD *)(v75 + 472);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No remaining members to be notified of invitation response", 0x3AuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
    gpklog(_:type:fileID:line:subsystem:)();
    v80(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v40);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v46);
    goto LABEL_29;
  }
  v37 = *(_BYTE *)(v75 + 813);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v75 + 640))(*(_QWORD *)(v75 + 576), *(_QWORD *)(v75 + 592), *(_QWORD *)(v75 + 560));
  swift_bridgeObjectRetain();
  if ((v37 & 1) != 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 104))(*(_QWORD *)(v75 + 512), *MEMORY[0x24BE3E4A8], *(_QWORD *)(v75 + 496));
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v75 + 504) + 104))(*(_QWORD *)(v75 + 512), *MEMORY[0x24BE3E4C0], *(_QWORD *)(v75 + 496));
  v35 = *(_QWORD *)(v75 + 672);
  v34 = *(_QWORD *)(v75 + 664);
  v26 = *(void (**)(const void *, _QWORD))(v75 + 656);
  v31 = *(const void **)(v75 + 600);
  v27 = *(_QWORD *)(v75 + 576);
  v32 = *(_QWORD *)(v75 + 544);
  v33 = *(_QWORD *)(v75 + 536);
  v30 = *(_QWORD *)(v75 + 512);
  v29 = *(_QWORD *)(v75 + 400);
  v28 = *(_QWORD *)(v75 + 392);
  (*(void (**)(void))(v75 + 648))();
  v26(v31, 0);
  RSVPResponseIDSMessage.init(groupID:responseFrom:response:invitationID:destinationMemberType:)(v27, v28, v29, v30, v31, 1, v32);
  v36 = IDSMessageCoder.encode<A>(_:)(v32, v33, v34, v35);
  *(_QWORD *)(v75 + 744) = v36;
  if (v76)
  {
    v9 = *(_QWORD *)(v75 + 632);
    v8 = *(_QWORD *)(v75 + 624);
    v10 = *(_QWORD *)(v75 + 616);
    v7 = *(_QWORD *)(v75 + 592);
    v5 = *(_QWORD *)(v75 + 568);
    v6 = *(_QWORD *)(v75 + 560);
    v4 = *(_QWORD *)(v75 + 552);
    outlined destroy of RSVPResponseIDSMessage(*(_QWORD *)(v75 + 544));
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v75 + 256) + 8))();
  }
  else
  {
    *(_QWORD *)(v75 + 328) = v36;
    v23 = *(_QWORD *)(v75 + 296);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v75 + 336) = v23;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    v24 = *(_QWORD *)(v75 + 96);
    *(_QWORD *)(v75 + 752) = v24;
    v25 = *(_QWORD *)(v75 + 104);
    *(_QWORD *)(v75 + 760) = v25;
    if (v25)
    {
      v19 = *(_BYTE *)(v75 + 814);
      v1 = *(_QWORD *)(v75 + 424);
      *(_QWORD *)(v75 + 112) = v24;
      *(_QWORD *)(v75 + 120) = v25;
      *(_QWORD *)(v75 + 768) = *(_QWORD *)(v1 + 104);
      v21 = *(_QWORD *)(v1 + 112);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      *(_BYTE *)(v75 + 811) = v19 & 1;
      v22 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 40)
                                                                                        + **(int **)(v21 + 40));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v75 + 776) = v2;
      *v2 = *(_QWORD *)(v75 + 256);
      v2[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
      return v22(*(_QWORD *)(v75 + 744), v24, v25, v75 + 811, ObjectType, v21);
    }
    else
    {
      v17 = *(_QWORD *)(v75 + 632);
      v16 = *(_QWORD *)(v75 + 624);
      v18 = *(_QWORD *)(v75 + 616);
      v15 = *(_QWORD *)(v75 + 592);
      v13 = *(_QWORD *)(v75 + 568);
      v14 = *(_QWORD *)(v75 + 560);
      v12 = *(_QWORD *)(v75 + 552);
      v11 = *(_QWORD *)(v75 + 544);
      outlined destroy of IndexingIterator<[String]>();
      swift_bridgeObjectRelease();
      outlined destroy of RSVPResponseIDSMessage(v11);
      outlined destroy of [String]();
      swift_bridgeObjectRelease();
      outlined destroy of RSVPResponseIDSMessage(v12);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
LABEL_29:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v75 + 256) + 8))();
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = v0[100];
  v31 = v0[99];
  v30 = v0[95];
  v29 = v0[94];
  v0[32] = v0;
  v0[20] = v31;
  v0[21] = v32;
  swift_unknownObjectRelease();
  v0[22] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[23] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation response notified to member ", 0x27uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[24] = v29;
  v0[25] = v30;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", messageID: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[28] = v31;
  v0[29] = v32;
  if (v0[29])
  {
    v7 = *(_QWORD *)(v28 + 232);
    *(_QWORD *)(v28 + 208) = *(_QWORD *)(v28 + 224);
    *(_QWORD *)(v28 + 216) = v7;
  }
  else
  {
    *(Swift::String *)(v28 + 208) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v21 = *(void (**)(uint64_t, uint64_t))(v28 + 736);
  v19 = *(_QWORD *)(v28 + 488);
  v20 = *(_QWORD *)(v28 + 472);
  v8 = *(_QWORD *)(v28 + 216);
  *(_QWORD *)(v28 + 240) = *(_QWORD *)(v28 + 208);
  *(_QWORD *)(v28 + 248) = v8;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitation: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
  gpklog(_:type:fileID:line:subsystem:)();
  v21(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v24 = *(_QWORD *)(v28 + 96);
  *(_QWORD *)(v28 + 752) = v24;
  v22 = *(_QWORD *)(v28 + 104);
  *(_QWORD *)(v28 + 760) = v22;
  if (v22)
  {
    v23 = *(_BYTE *)(v28 + 814);
    v4 = *(_QWORD *)(v28 + 424);
    *(_QWORD *)(v28 + 112) = v24;
    *(_QWORD *)(v28 + 120) = v22;
    *(_QWORD *)(v28 + 768) = *(_QWORD *)(v4 + 104);
    v26 = *(_QWORD *)(v4 + 112);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    *(_BYTE *)(v28 + 811) = v23 & 1;
    v27 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 40)
                                                                                      + **(int **)(v26 + 40));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v28 + 776) = v5;
    *v5 = *(_QWORD *)(v28 + 256);
    v5[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
    return v27(*(_QWORD *)(v28 + 744), v24, v22, v28 + 811, ObjectType, v26);
  }
  else
  {
    v17 = *(_QWORD *)(v28 + 632);
    v16 = *(_QWORD *)(v28 + 624);
    v18 = *(_QWORD *)(v28 + 616);
    v15 = *(_QWORD *)(v28 + 592);
    v13 = *(_QWORD *)(v28 + 568);
    v14 = *(_QWORD *)(v28 + 560);
    v12 = *(_QWORD *)(v28 + 552);
    v11 = *(_QWORD *)(v28 + 544);
    outlined destroy of IndexingIterator<[String]>();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v11);
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v12);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v28 + 256) + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[79];
  v6 = v0[78];
  v8 = v0[77];
  v5 = v0[74];
  v3 = v0[71];
  v4 = v0[70];
  v2 = v0[69];
  v0[32] = v0;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of RSVPResponseIDSMessage(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[32] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v0[79];
  v6 = v0[78];
  v8 = v0[77];
  v5 = v0[74];
  v3 = v0[71];
  v4 = v0[70];
  v2 = v0[69];
  v0[32] = v0;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of RSVPResponseIDSMessage(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[32] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = (void *)v0[98];
  v24 = v0[95];
  v23 = v0[94];
  v27 = (void (*)(uint64_t, uint64_t))v0[92];
  v25 = v0[61];
  v26 = v0[59];
  v0[32] = v0;
  swift_unknownObjectRelease();
  v1 = v28;
  v0[43] = v28;
  v0[16] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[17] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error sending invitation response to member ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[18] = v23;
  v0[19] = v24;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitation: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v0[44] = v28;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v25);
  gpklog(_:type:fileID:line:subsystem:)();
  v27(v25, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  v29 = v0[12];
  v0[94] = v29;
  v30 = v0[13];
  v0[95] = v30;
  if (v30)
  {
    v18 = *(_BYTE *)(v22 + 814);
    v7 = *(_QWORD *)(v22 + 424);
    *(_QWORD *)(v22 + 112) = v29;
    *(_QWORD *)(v22 + 120) = v30;
    *(_QWORD *)(v22 + 768) = *(_QWORD *)(v7 + 104);
    v20 = *(_QWORD *)(v7 + 112);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    *(_BYTE *)(v22 + 811) = v18 & 1;
    v21 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 40)
                                                                                      + **(int **)(v20 + 40));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 776) = v8;
    *v8 = *(_QWORD *)(v22 + 256);
    v8[1] = PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
    return v21(*(_QWORD *)(v22 + 744), v29, v30, v22 + 811, ObjectType, v20);
  }
  else
  {
    v16 = *(_QWORD *)(v22 + 632);
    v15 = *(_QWORD *)(v22 + 624);
    v17 = *(_QWORD *)(v22 + 616);
    v14 = *(_QWORD *)(v22 + 592);
    v12 = *(_QWORD *)(v22 + 568);
    v13 = *(_QWORD *)(v22 + 560);
    v11 = *(_QWORD *)(v22 + 552);
    v10 = *(_QWORD *)(v22 + 544);
    outlined destroy of IndexingIterator<[String]>();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v10);
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    outlined destroy of RSVPResponseIDSMessage(v11);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 256) + 8))();
  }
}

uint64_t PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = (_QWORD *)*v3;
  v5[32] = *v3;
  v5[98] = v2;
  v5[99] = a1;
  v5[100] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage)
  {
    v0 = type metadata accessor for RSVPResponseIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage)
  {
    v0 = type metadata accessor for RSVPResponseIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[String]>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKGroup?()
{
  swift_release();
}

void *outlined init with copy of GPKGroup.JoinState?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroup.JoinState();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup.JoinState?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (GPKGroup.JoinState?, GPKGroup.JoinState?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for GPKGroup.JoinState();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKGroup.JoinState?, GPKGroup.JoinState?))
              + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

uint64_t PeerMessagingService.send(message:to:from:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)(v6 + 248) = v5;
  *(_QWORD *)(v6 + 240) = a4;
  *(_QWORD *)(v6 + 232) = a3;
  *(_QWORD *)(v6 + 224) = a2;
  *(_QWORD *)(v6 + 216) = a1;
  *(_QWORD *)(v6 + 176) = v6;
  *(_QWORD *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 336) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v7 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v6 + 256) = v7;
  *(_QWORD *)(v6 + 264) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 272) = swift_task_alloc();
  *(_QWORD *)(v6 + 184) = a1;
  *(_QWORD *)(v6 + 192) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  v8 = *a5 & 1;
  *(_BYTE *)(v6 + 338) = v8;
  *(_BYTE *)(v6 + 336) = v8;
  *(_QWORD *)(v6 + 200) = v5;
  return swift_task_switch();
}

uint64_t PeerMessagingService.send(message:to:from:priority:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = v0[28];
  v0[22] = v0;
  swift_bridgeObjectRetain();
  v0[26] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    v8 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(v10 + 280) = v8;
    v9 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 288) = v9;
    if (!v9)
      break;
    *(_QWORD *)(v10 + 64) = v8;
    *(_QWORD *)(v10 + 72) = v9;
    if ((static String.== infix(_:_:)() & 1) == 0)
    {
      v4 = *(_BYTE *)(v10 + 338);
      v1 = *(_QWORD *)(v10 + 248);
      *(_QWORD *)(v10 + 296) = *(_QWORD *)(v1 + 104);
      v6 = *(_QWORD *)(v1 + 112);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      *(_BYTE *)(v10 + 337) = v4 & 1;
      v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 40)
                                                                                       + **(int **)(v6 + 40));
      v2 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v10 + 304) = v2;
      *v2 = *(_QWORD *)(v10 + 176);
      v2[1] = PeerMessagingService.send(message:to:from:priority:);
      return v7(*(_QWORD *)(v10 + 216), v8, v9, v10 + 337, ObjectType, v6);
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of IndexingIterator<[String]>();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v10 + 176) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = v0[41];
  v22 = v0[40];
  v21 = v0[36];
  v20 = v0[35];
  v0[22] = v0;
  v0[10] = v22;
  v0[11] = v23;
  swift_unknownObjectRelease();
  v0[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[13] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Message sent to member ", 0x17uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[14] = v20;
  v0[15] = v21;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", messageID: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[18] = v22;
  v0[19] = v23;
  if (v0[19])
  {
    v7 = *(_QWORD *)(v19 + 152);
    *(_QWORD *)(v19 + 128) = *(_QWORD *)(v19 + 144);
    *(_QWORD *)(v19 + 136) = v7;
  }
  else
  {
    *(Swift::String *)(v19 + 128) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v11 = *(_QWORD *)(v19 + 272);
  v10 = *(_QWORD *)(v19 + 264);
  v12 = *(_QWORD *)(v19 + 256);
  v8 = *(_QWORD *)(v19 + 136);
  *(_QWORD *)(v19 + 160) = *(_QWORD *)(v19 + 128);
  *(_QWORD *)(v19 + 168) = v8;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    v17 = *(_QWORD *)(v19 + 48);
    *(_QWORD *)(v19 + 280) = v17;
    v18 = *(_QWORD *)(v19 + 56);
    *(_QWORD *)(v19 + 288) = v18;
    if (!v18)
      break;
    *(_QWORD *)(v19 + 64) = v17;
    *(_QWORD *)(v19 + 72) = v18;
    if ((static String.== infix(_:_:)() & 1) == 0)
    {
      v13 = *(_BYTE *)(v19 + 338);
      v4 = *(_QWORD *)(v19 + 248);
      *(_QWORD *)(v19 + 296) = *(_QWORD *)(v4 + 104);
      v15 = *(_QWORD *)(v4 + 112);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      *(_BYTE *)(v19 + 337) = v13 & 1;
      v16 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 40)
                                                                                        + **(int **)(v15 + 40));
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v19 + 304) = v5;
      *v5 = *(_QWORD *)(v19 + 176);
      v5[1] = PeerMessagingService.send(message:to:from:priority:);
      return v16(*(_QWORD *)(v19 + 216), v17, v18, v19 + 337, ObjectType, v15);
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of IndexingIterator<[String]>();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v19 + 176) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 176) = v0;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of IndexingIterator<[String]>();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 176) + 8))();
}

uint64_t PeerMessagingService.send(message:to:from:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[22] = *v3;
  v4[39] = v2;
  v4[40] = a1;
  v4[41] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)(v7 + 408) = v6;
  *(_QWORD *)(v7 + 400) = a5;
  *(_QWORD *)(v7 + 392) = a4;
  *(_QWORD *)(v7 + 384) = a3;
  *(_QWORD *)(v7 + 376) = a2;
  *(_QWORD *)(v7 + 368) = a1;
  *(_QWORD *)(v7 + 176) = v7;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_BYTE *)(v7 + 656) = 0;
  *(_QWORD *)(v7 + 232) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 280) = 0;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 360) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v7 + 416) = v8;
  *(_QWORD *)(v7 + 424) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 432) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v7 + 440) = swift_task_alloc();
  v9 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v7 + 448) = v9;
  *(_QWORD *)(v7 + 456) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 464) = swift_task_alloc();
  *(_QWORD *)(v7 + 472) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  *(_QWORD *)(v7 + 480) = swift_task_alloc();
  v10 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v7 + 488) = v10;
  *(_QWORD *)(v7 + 496) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 504) = swift_task_alloc();
  *(_QWORD *)(v7 + 512) = type metadata accessor for MembershipUpdateIDSMessage();
  *(_QWORD *)(v7 + 520) = swift_task_alloc();
  *(_QWORD *)(v7 + 208) = a1;
  *(_QWORD *)(v7 + 216) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  *(_QWORD *)(v7 + 224) = a5;
  v11 = *a6 & 1;
  *(_BYTE *)(v7 + 658) = v11;
  *(_BYTE *)(v7 + 656) = v11;
  *(_QWORD *)(v7 + 232) = v6;
  return swift_task_switch();
}

uint64_t PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t updated;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0[47];
  v0[22] = v0;
  v0[23] = *(_QWORD *)(v1 + 8);
  outlined retain of [GPKMember]();
  v0[30] = v0[23];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v48 = Sequence.compactMap<A>(_:)();
  v0[66] = v48;
  v44 = *(_QWORD *)(v47 + 376);
  outlined destroy of [GPKMember]();
  *(_QWORD *)(v47 + 248) = v48;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v47 + 256) = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(GPKUserID, String)]);
  *(_QWORD *)(v47 + 536) = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  lazy protocol witness table accessor for type [(GPKUserID, String)] and conformance [A]();
  v45 = Dictionary.init<A>(uniqueKeysWithValues:)();
  *(_QWORD *)(v47 + 544) = v45;
  *(_QWORD *)(v47 + 264) = v45;
  *(_QWORD *)(v47 + 192) = *(_QWORD *)(v44 + 16);
  outlined retain of [GPKMember]();
  *(_QWORD *)(v47 + 272) = *(_QWORD *)(v47 + 192);
  v46 = Sequence.compactMap<A>(_:)();
  *(_QWORD *)(v47 + 552) = v46;
  v41 = *(_QWORD *)(v47 + 376);
  outlined destroy of [GPKMember]();
  *(_QWORD *)(v47 + 280) = v46;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v47 + 288) = v46;
  v42 = Dictionary.init<A>(uniqueKeysWithValues:)();
  *(_QWORD *)(v47 + 560) = v42;
  *(_QWORD *)(v47 + 296) = v42;
  *(_QWORD *)(v47 + 200) = *(_QWORD *)(v41 + 24);
  outlined retain of [GPKMember]();
  *(_QWORD *)(v47 + 304) = *(_QWORD *)(v47 + 200);
  v43 = Sequence.compactMap<A>(_:)();
  *(_QWORD *)(v47 + 568) = v43;
  v39 = *(_QWORD *)(v47 + 520);
  v37 = *(_QWORD *)(v47 + 512);
  v36 = *(_QWORD *)(v47 + 504);
  v35 = *(_QWORD **)(v47 + 480);
  v31 = *(_QWORD **)(v47 + 400);
  v33 = *(_QWORD *)(v47 + 392);
  v32 = *(_QWORD *)(v47 + 384);
  outlined destroy of [GPKMember]();
  *(_QWORD *)(v47 + 312) = v43;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v47 + 320) = v43;
  v34 = Dictionary.init<A>(uniqueKeysWithValues:)();
  *(_QWORD *)(v47 + 576) = v34;
  *(_QWORD *)(v47 + 328) = v34;
  dispatch thunk of GPKGroup.groupID.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined init with copy of GroupBlobEnvelope?(v31, v35);
  MembershipUpdateIDSMessage.init(groupID:from:addedHandles:removedHandles:toggledHandles:groupBlobEnvelope:)(v36, v32, v33, v45, v42, v34, v35, v39);
  IDSMessageCoder.init()();
  updated = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
  v2 = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
  v40 = IDSMessageCoder.encode<A>(_:)(v39, v37, updated, v2);
  *(_QWORD *)(v47 + 584) = v40;
  *(_QWORD *)(v47 + 336) = v40;
  *(_QWORD *)(v47 + 344) = dispatch thunk of GPKGroup.members.getter();
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v30 = *(_QWORD *)(v47 + 352);
    *(_QWORD *)(v47 + 592) = v30;
    if (!v30)
      break;
    *(_QWORD *)(v47 + 360) = v30;
    dispatch thunk of GPKMember.handle.getter();
    swift_bridgeObjectRetain();
    v29 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      v26 = *(_QWORD *)(v47 + 456);
      v28 = *(_QWORD *)(v47 + 448);
      v27 = *(_QWORD *)(v47 + 440);
      dispatch thunk of GPKMember.userID.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v28) == 1)
      {
        outlined destroy of GPKUserID?(*(_QWORD *)(v47 + 440));
      }
      else
      {
        v22 = *(_QWORD *)(v47 + 544);
        v24 = *(_QWORD *)(v47 + 536);
        v21 = *(_QWORD *)(v47 + 472);
        v25 = *(_QWORD *)(v47 + 464);
        v20 = *(_QWORD *)(v47 + 456);
        v23 = *(_QWORD *)(v47 + 448);
        (*(void (**)(void))(v20 + 32))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v25, v21, v23);
        MEMORY[0x24263485C](v25, v22, v23, MEMORY[0x24BEE0D00], v24);
        v3 = *(_QWORD *)(v47 + 56);
        *(_QWORD *)(v47 + 64) = *(_QWORD *)(v47 + 48);
        *(_QWORD *)(v47 + 72) = v3;
        v19 = *(_QWORD *)(v47 + 72) == 0;
        v17 = *(_QWORD *)(v47 + 464);
        v15 = *(_QWORD *)(v47 + 456);
        v16 = *(_QWORD *)(v47 + 448);
        outlined destroy of String?();
        v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
        *(_QWORD *)(v47 + 600) = v18;
        v18(v17, v16);
        if (v19)
        {
          v9 = *(_BYTE *)(v47 + 658);
          v4 = *(_QWORD *)(v47 + 408);
          *(_QWORD *)(v47 + 608) = *(_QWORD *)(v4 + 104);
          v13 = *(_QWORD *)(v4 + 112);
          swift_unknownObjectRetain();
          ObjectType = swift_getObjectType();
          v10 = dispatch thunk of GPKMember.handle.getter();
          v11 = v5;
          *(_QWORD *)(v47 + 616) = v5;
          *(_BYTE *)(v47 + 657) = v9 & 1;
          v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40)
                                                                                            + **(int **)(v13 + 40));
          v6 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v47 + 624) = v6;
          *v6 = *(_QWORD *)(v47 + 176);
          v6[1] = PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:);
          return v14(*(_QWORD *)(v47 + 584), v10, v11, v47 + 657, ObjectType, v13);
        }
        v18(*(_QWORD *)(v47 + 472), *(_QWORD *)(v47 + 448));
      }
    }
    swift_release();
  }
  v8 = *(_QWORD *)(v47 + 520);
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRelease();
  outlined destroy of MembershipUpdateIDSMessage(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v47 + 176) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t (*v29)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = v0[81];
  v47 = v0[80];
  v0[22] = v0;
  v0[10] = v47;
  v0[11] = v48;
  swift_unknownObjectRelease();
  v0[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[13] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group Membership update notified to member ", 0x2BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[14] = dispatch thunk of GPKMember.handle.getter();
  v0[15] = v3;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", messageID: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[18] = v47;
  v0[19] = v48;
  if (v0[19])
  {
    v10 = *(_QWORD *)(v46 + 152);
    *(_QWORD *)(v46 + 128) = *(_QWORD *)(v46 + 144);
    *(_QWORD *)(v46 + 136) = v10;
  }
  else
  {
    *(Swift::String *)(v46 + 128) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v23 = *(void (**)(uint64_t, uint64_t))(v46 + 600);
  v16 = *(_QWORD *)(v46 + 504);
  v15 = *(_QWORD *)(v46 + 496);
  v17 = *(_QWORD *)(v46 + 488);
  v21 = *(_QWORD *)(v46 + 472);
  v22 = *(_QWORD *)(v46 + 448);
  v19 = *(_QWORD *)(v46 + 432);
  v18 = *(_QWORD *)(v46 + 424);
  v20 = *(_QWORD *)(v46 + 416);
  v11 = *(_QWORD *)(v46 + 136);
  *(_QWORD *)(v46 + 160) = *(_QWORD *)(v46 + 128);
  *(_QWORD *)(v46 + 168) = v11;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", groupID: ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23(v21, v22);
  while (1)
  {
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v45 = *(_QWORD *)(v46 + 352);
    *(_QWORD *)(v46 + 592) = v45;
    if (!v45)
      break;
    *(_QWORD *)(v46 + 360) = v45;
    dispatch thunk of GPKMember.handle.getter();
    swift_bridgeObjectRetain();
    v44 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0)
    {
      v41 = *(_QWORD *)(v46 + 456);
      v43 = *(_QWORD *)(v46 + 448);
      v42 = *(_QWORD *)(v46 + 440);
      dispatch thunk of GPKMember.userID.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v43) == 1)
      {
        outlined destroy of GPKUserID?(*(_QWORD *)(v46 + 440));
      }
      else
      {
        v37 = *(_QWORD *)(v46 + 544);
        v39 = *(_QWORD *)(v46 + 536);
        v36 = *(_QWORD *)(v46 + 472);
        v40 = *(_QWORD *)(v46 + 464);
        v35 = *(_QWORD *)(v46 + 456);
        v38 = *(_QWORD *)(v46 + 448);
        (*(void (**)(void))(v35 + 32))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v40, v36, v38);
        MEMORY[0x24263485C](v40, v37, v38, MEMORY[0x24BEE0D00], v39);
        v5 = *(_QWORD *)(v46 + 56);
        *(_QWORD *)(v46 + 64) = *(_QWORD *)(v46 + 48);
        *(_QWORD *)(v46 + 72) = v5;
        v34 = *(_QWORD *)(v46 + 72) == 0;
        v32 = *(_QWORD *)(v46 + 464);
        v30 = *(_QWORD *)(v46 + 456);
        v31 = *(_QWORD *)(v46 + 448);
        outlined destroy of String?();
        v33 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
        *(_QWORD *)(v46 + 600) = v33;
        v33(v32, v31);
        if (v34)
        {
          v24 = *(_BYTE *)(v46 + 658);
          v6 = *(_QWORD *)(v46 + 408);
          *(_QWORD *)(v46 + 608) = *(_QWORD *)(v6 + 104);
          v28 = *(_QWORD *)(v6 + 112);
          swift_unknownObjectRetain();
          ObjectType = swift_getObjectType();
          v25 = dispatch thunk of GPKMember.handle.getter();
          v26 = v7;
          *(_QWORD *)(v46 + 616) = v7;
          *(_BYTE *)(v46 + 657) = v24 & 1;
          v29 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 + 40)
                                                                                            + **(int **)(v28 + 40));
          v8 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v46 + 624) = v8;
          *v8 = *(_QWORD *)(v46 + 176);
          v8[1] = PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:);
          return v29(*(_QWORD *)(v46 + 584), v25, v26, v46 + 657, ObjectType, v28);
        }
        v33(*(_QWORD *)(v46 + 472), *(_QWORD *)(v46 + 448));
      }
    }
  }
  v14 = *(_QWORD *)(v46 + 520);
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRelease();
  outlined destroy of MembershipUpdateIDSMessage(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v46 + 176) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = (void (*)(uint64_t, uint64_t))v0[75];
  v5 = v0[65];
  v2 = v0[59];
  v3 = v0[56];
  v0[22] = v0;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v4(v2, v3);
  swift_release();
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRelease();
  outlined destroy of MembershipUpdateIDSMessage(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

uint64_t PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[22] = *v3;
  v4 += 22;
  v4[57] = v2;
  v4[58] = a1;
  v4[59] = a2;
  swift_task_dealloc();
  if (!v2)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of [GPKMember]()
{
  swift_bridgeObjectRetain();
}

uint64_t closure #1 in PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

uint64_t closure #2 in PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

uint64_t closure #3 in PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

uint64_t PeerMessagingService.sendMetaDataUpdate(to:priority:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 + 224) = v2;
  *(_QWORD *)(v3 + 216) = a1;
  *(_QWORD *)(v3 + 128) = v3;
  *(_QWORD *)(v3 + 136) = 0;
  *(_BYTE *)(v3 + 344) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  v4 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 232) = v4;
  *(_QWORD *)(v3 + 240) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 248) = swift_task_alloc();
  type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  *(_QWORD *)(v3 + 264) = type metadata accessor for GroupEventIDSMessage();
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  *(_QWORD *)(v3 + 136) = a1;
  v5 = *a2 & 1;
  *(_BYTE *)(v3 + 346) = v5;
  *(_BYTE *)(v3 + 344) = v5;
  *(_QWORD *)(v3 + 144) = v2;
  return swift_task_switch();
}

uint64_t PeerMessagingService.sendMetaDataUpdate(to:priority:)()
{
  _QWORD *v0;
  double v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  v19 = (_BYTE *)v0[34];
  v17 = v0[33];
  v16 = v0[32];
  v0[16] = v0;
  dispatch thunk of GPKGroup.groupID.getter();
  v1 = default argument 2 of GroupEventIDSMessage.init(event:groupID:version:eventInfo:)();
  GroupEventIDSMessage.init(event:groupID:version:eventInfo:)(0, v16, 0, v19, v1);
  IDSMessageCoder.init()();
  v18 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v2 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v20 = IDSMessageCoder.encode<A>(_:)((uint64_t)v19, v17, v18, v2);
  v0[35] = v20;
  *(_QWORD *)(v15 + 152) = v20;
  *(_QWORD *)(v15 + 160) = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
  IndexingIterator.next()();
  v14 = *(_QWORD *)(v15 + 168);
  *(_QWORD *)(v15 + 288) = v14;
  if (v14)
  {
    v8 = *(_BYTE *)(v15 + 346);
    v3 = *(_QWORD *)(v15 + 224);
    *(_QWORD *)(v15 + 176) = v14;
    *(_QWORD *)(v15 + 296) = *(_QWORD *)(v3 + 104);
    v12 = *(_QWORD *)(v3 + 112);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v9 = dispatch thunk of GPKMember.handle.getter();
    v10 = v4;
    *(_QWORD *)(v15 + 304) = v4;
    *(_BYTE *)(v15 + 345) = v8 & 1;
    v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 40)
                                                                                      + **(int **)(v12 + 40));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v15 + 312) = v5;
    *v5 = *(_QWORD *)(v15 + 128);
    v5[1] = PeerMessagingService.sendMetaDataUpdate(to:priority:);
    return v13(*(_QWORD *)(v15 + 280), v9, v10, v15 + 345, ObjectType, v12);
  }
  else
  {
    v7 = *(_QWORD *)(v15 + 272);
    outlined destroy of IndexingIterator<[GPKMember]>();
    swift_bridgeObjectRelease();
    outlined destroy of GroupEventIDSMessage(v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v15 + 128) + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = v0[42];
  v24 = v0[41];
  v23 = v0[36];
  v0[16] = v0;
  v0[6] = v24;
  v0[7] = v25;
  swift_unknownObjectRelease();
  v0[8] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[9] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metdata update notified to member ", 0x22uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[26] = v23;
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", messageID: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v0[12] = v24;
  v0[13] = v25;
  if (v0[13])
  {
    v8 = *(_QWORD *)(v22 + 104);
    *(_QWORD *)(v22 + 80) = *(_QWORD *)(v22 + 96);
    *(_QWORD *)(v22 + 88) = v8;
  }
  else
  {
    *(Swift::String *)(v22 + 80) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v13 = *(_QWORD *)(v22 + 248);
  v12 = *(_QWORD *)(v22 + 240);
  v14 = *(_QWORD *)(v22 + 232);
  v9 = *(_QWORD *)(v22 + 88);
  *(_QWORD *)(v22 + 112) = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v22 + 120) = v9;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
  IndexingIterator.next()();
  v15 = *(_QWORD *)(v22 + 168);
  *(_QWORD *)(v22 + 288) = v15;
  if (v15)
  {
    v16 = *(_BYTE *)(v22 + 346);
    v4 = *(_QWORD *)(v22 + 224);
    *(_QWORD *)(v22 + 176) = v15;
    *(_QWORD *)(v22 + 296) = *(_QWORD *)(v4 + 104);
    v20 = *(_QWORD *)(v4 + 112);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v17 = dispatch thunk of GPKMember.handle.getter();
    v18 = v5;
    *(_QWORD *)(v22 + 304) = v5;
    *(_BYTE *)(v22 + 345) = v16 & 1;
    v21 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 40)
                                                                                      + **(int **)(v20 + 40));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 312) = v6;
    *v6 = *(_QWORD *)(v22 + 128);
    v6[1] = PeerMessagingService.sendMetaDataUpdate(to:priority:);
    return v21(*(_QWORD *)(v22 + 280), v17, v18, v22 + 345, ObjectType, v20);
  }
  else
  {
    v11 = *(_QWORD *)(v22 + 272);
    outlined destroy of IndexingIterator<[GPKMember]>();
    swift_bridgeObjectRelease();
    outlined destroy of GroupEventIDSMessage(v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 128) + 8))();
  }
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v22 = (void *)v0[40];
  v18 = v0[36];
  v20 = v0[31];
  v19 = v0[30];
  v21 = v0[29];
  v0[16] = v0;
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v1 = v22;
  v0[23] = v22;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error sending metadata update notification to member ", 0x35uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[24] = v18;
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v0[25] = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
  IndexingIterator.next()();
  v23 = v0[21];
  v0[36] = v23;
  if (v23)
  {
    v11 = *(_BYTE *)(v17 + 346);
    v6 = *(_QWORD *)(v17 + 224);
    *(_QWORD *)(v17 + 176) = v23;
    *(_QWORD *)(v17 + 296) = *(_QWORD *)(v6 + 104);
    v15 = *(_QWORD *)(v6 + 112);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v12 = dispatch thunk of GPKMember.handle.getter();
    v13 = v7;
    *(_QWORD *)(v17 + 304) = v7;
    *(_BYTE *)(v17 + 345) = v11 & 1;
    v16 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 40)
                                                                                      + **(int **)(v15 + 40));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v17 + 312) = v8;
    *v8 = *(_QWORD *)(v17 + 128);
    v8[1] = PeerMessagingService.sendMetaDataUpdate(to:priority:);
    return v16(*(_QWORD *)(v17 + 280), v12, v13, v17 + 345, ObjectType, v15);
  }
  else
  {
    v10 = *(_QWORD *)(v17 + 272);
    outlined destroy of IndexingIterator<[GPKMember]>();
    swift_bridgeObjectRelease();
    outlined destroy of GroupEventIDSMessage(v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v17 + 128) + 8))();
  }
}

uint64_t PeerMessagingService.sendMetaDataUpdate(to:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[16] = *v3;
  v4 += 16;
  v4[24] = v2;
  v4[25] = a1;
  v4[26] = a2;
  swift_task_dealloc();
  if (!v2)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

Swift::Void __swiftcall PeerMessagingService.fetchPendingInvitationsSilently()()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t))(v2 + 64))(ObjectType);
  swift_unknownObjectRelease();
}

uint64_t PeerMessagingService.fetchPendingInvitationsAndWait()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t ObjectType;

  v1 = v0[4];
  v0[2] = v0;
  v0[5] = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 72) + **(int **)(v5 + 72));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 48) = v2;
  *v2 = *(_QWORD *)(v4 + 16);
  v2[1] = PeerMessagingService.fetchPendingInvitationsAndWait();
  return v6(ObjectType, v5);
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 16) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t PeerMessagingService.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 128);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 80))(a1, ObjectType);
  return swift_unknownObjectRelease();
}

uint64_t PeerMessagingService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();

  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  outlined destroy of weak PeerMessagingServiceDelegate?();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak PeerMessagingServiceDelegate?()
{
  swift_unknownObjectWeakDestroy();
}

uint64_t PeerMessagingService.__deallocating_deinit()
{
  PeerMessagingService.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PeerMessagingServiceProviding.delegate.getter in conformance PeerMessagingService()
{
  return PeerMessagingService.delegate.getter();
}

uint64_t protocol witness for PeerMessagingServiceProviding.delegate.setter in conformance PeerMessagingService(uint64_t a1, uint64_t a2)
{
  return PeerMessagingService.delegate.setter(a1, a2);
}

void (*protocol witness for PeerMessagingServiceProviding.delegate.modify in conformance PeerMessagingService(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = PeerMessagingService.delegate.modify(v3);
  return protocol witness for PeerMessagingServiceProviding.delegate.modify in conformance PeerMessagingService;
}

void protocol witness for PeerMessagingServiceProviding.delegate.modify in conformance PeerMessagingService(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(v6 + 16) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = protocol witness for PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService;
  return PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *protocol witness for PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:) in conformance PeerMessagingService(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:) in conformance PeerMessagingService;
  return PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(a1 & 1, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *protocol witness for PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for PeerMessagingServiceProviding.send(message:to:from:priority:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v5 + 16) = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = protocol witness for PeerMessagingServiceProviding.send(message:to:from:priority:) in conformance PeerMessagingService;
  return PeerMessagingService.send(message:to:from:priority:)(a1, a2, a3, a4, a5);
}

_QWORD *protocol witness for PeerMessagingServiceProviding.send(message:to:from:priority:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(v6 + 16) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = protocol witness for PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService;
  return PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *protocol witness for PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:) in conformance PeerMessagingService(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:) in conformance PeerMessagingService;
  return PeerMessagingService.sendMetaDataUpdate(to:priority:)(a1, a2);
}

_QWORD *protocol witness for PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

void protocol witness for PeerMessagingServiceProviding.fetchPendingInvitationsSilently() in conformance PeerMessagingService()
{
  PeerMessagingService.fetchPendingInvitationsSilently()();
}

uint64_t protocol witness for PeerMessagingServiceProviding.fetchPendingInvitationsAndWait() in conformance PeerMessagingService()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for PeerMessagingServiceProviding.fetchPendingInvitationsAndWait() in conformance PeerMessagingService;
  return PeerMessagingService.fetchPendingInvitationsAndWait()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t protocol witness for PeerMessagingServiceProviding.deleteInvitation(with:) in conformance PeerMessagingService(uint64_t a1)
{
  return PeerMessagingService.deleteInvitation(with:)(a1);
}

uint64_t PeerMessagingService.didReceiveMessage(_:fromID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[76] = v3;
  v4[75] = a3;
  v4[74] = a2;
  v4[73] = a1;
  v4[77] = *v3;
  v4[68] = v4;
  v4[69] = 0;
  v4[34] = 0;
  v4[35] = 0;
  v4[70] = 0;
  v4[40] = 0;
  v4[41] = 0;
  v4[71] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupEventIDSMessage?);
  v4[78] = swift_task_alloc();
  v5 = type metadata accessor for GroupEventIDSMessage();
  v4[79] = v5;
  v4[80] = *(_QWORD *)(v5 - 8);
  v4[81] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MembershipUpdateIDSMessage?);
  v4[82] = swift_task_alloc();
  updated = type metadata accessor for MembershipUpdateIDSMessage();
  v4[83] = updated;
  v4[84] = *(_QWORD *)(updated - 8);
  v4[85] = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  v4[86] = v7;
  v4[87] = *(_QWORD *)(v7 - 8);
  v4[88] = swift_task_alloc();
  v8 = type metadata accessor for GPKGroupID();
  v4[89] = v8;
  v4[90] = *(_QWORD *)(v8 - 8);
  v4[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RSVPResponseIDSMessage?);
  v4[92] = swift_task_alloc();
  v9 = type metadata accessor for RSVPResponseIDSMessage();
  v4[93] = v9;
  v4[94] = *(_QWORD *)(v9 - 8);
  v4[95] = swift_task_alloc();
  v4[69] = a1;
  v4[34] = a2;
  v4[35] = a3;
  v4[70] = v3;
  return swift_task_switch();
}

uint64_t PeerMessagingService.didReceiveMessage(_:fromID:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[76];
  v0[68] = v0;
  outlined init with copy of ReadinessChecking(v1 + 176, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 768) = v2;
  *v2 = *(_QWORD *)(v4 + 544);
  v2[1] = PeerMessagingService.didReceiveMessage(_:fromID:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 544) = *v1;
  *(_QWORD *)(v2 + 776) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t *v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t *v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t (*v45)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t updated;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v107 = v0[76];
  v108 = v0[75];
  v111 = v0[74];
  v0[68] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined init with copy of IdentityServiceUtils(v107 + 136, (uint64_t)(v0 + 7));
  v109 = v0[10];
  v110 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v109);
  v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 8))(v111, v108, v109);
  v113 = v1;
  v0[98] = v1;
  if (v1)
  {
    v103 = v106[94];
    v105 = v106[93];
    v104 = v106[92];
    v101 = v106[73];
    v106[40] = v112;
    v106[41] = v1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v106 + 7));
    IDSMessageCoder.init()();
    v102 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
    v2 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
    IDSMessageCoder.decode<A>(_:from:)(v105, v101, v105, v102, v2, v104);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v104, 1, v105) == 1)
    {
      v80 = v106[84];
      v82 = v106[83];
      v81 = v106[82];
      v78 = v106[73];
      outlined destroy of RSVPResponseIDSMessage?(v106[92]);
      updated = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
      v13 = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
      IDSMessageCoder.decode<A>(_:from:)(v82, v78, v82, updated, v13, v81);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v81, 1, v82) == 1)
      {
        v57 = v106[80];
        v59 = v106[79];
        v58 = v106[78];
        v55 = v106[73];
        outlined destroy of MembershipUpdateIDSMessage?(v106[82]);
        v56 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
        v24 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
        IDSMessageCoder.decode<A>(_:from:)(v59, v55, v59, v56, v24, v58);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v58, 1, v59) == 1)
        {
          v41 = v106[88];
          v40 = v106[87];
          v42 = v106[86];
          outlined destroy of GroupEventIDSMessage?(v106[78]);
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown message received from IDS", 0x21uLL, 1);
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v41);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v49 = v106[91];
          v48 = v106[90];
          v50 = v106[89];
          v52 = v106[88];
          v51 = v106[87];
          v53 = v106[86];
          v47 = (_BYTE *)v106[81];
          v46 = v106[79];
          v54 = v106[76];
          outlined init with take of GroupEventIDSMessage((_BYTE *)v106[78], v47);
          v106[42] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v106[43] = v25;
          v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group event message received from ", 0x22uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v26);
          swift_bridgeObjectRelease();
          v106[44] = v112;
          v106[45] = v113;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for group with ID: ", 0x14uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v27);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 16))(v49, &v47[*(int *)(v46 + 20)], v50);
          lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
          v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v52);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v53);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v29 = MEMORY[0x242635600](v54 + 216);
          v30 = *(_QWORD *)(v54 + 224);
          v106[46] = v29;
          v106[47] = v30;
          if (v106[46])
          {
            v106[105] = v106[46];
            v44 = v106[47];
            swift_unknownObjectRetain();
            outlined destroy of PeerMessagingServiceDelegate?();
            swift_endAccess();
            ObjectType = swift_getObjectType();
            v45 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 + 32)
                                                                                             + **(int **)(v44 + 32));
            v31 = (_QWORD *)swift_task_alloc();
            v106[106] = v31;
            *v31 = v106[68];
            v31[1] = PeerMessagingService.didReceiveMessage(_:fromID:);
            return v45(v106[76], v106[81], v112, v113, ObjectType, v44);
          }
          outlined destroy of PeerMessagingServiceDelegate?();
          swift_endAccess();
          outlined destroy of GroupEventIDSMessage(v106[81]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v70 = v106[91];
        v69 = v106[90];
        v71 = v106[89];
        v75 = v106[88];
        v74 = v106[87];
        v76 = v106[86];
        v68 = v106[85];
        v65 = v106[83];
        v77 = v106[76];
        outlined init with take of MembershipUpdateIDSMessage(v106[82], v68);
        v106[48] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v106[49] = v14;
        v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group membership update response received from ", 0x2FuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v15);
        swift_bridgeObjectRelease();
        v16 = (uint64_t *)(v68 + *(int *)(v65 + 20));
        v66 = *v16;
        v67 = v16[1];
        swift_bridgeObjectRetain();
        v106[50] = v66;
        v106[51] = v67;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for group with ID: ", 0x14uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v17);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v70, v68, v71);
        v72 = GPKGroupID.hexString.getter();
        v73 = v18;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
        v106[52] = v72;
        v106[53] = v73;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v75);
        gpklog(_:type:fileID:line:subsystem:)();
        v20 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
        v106[101] = v20;
        v20(v75, v76);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v21 = MEMORY[0x242635600](v77 + 216);
        v22 = *(_QWORD *)(v77 + 224);
        v106[54] = v21;
        v106[55] = v22;
        if (v106[54])
        {
          v60 = v106[77];
          v61 = v106[76];
          v106[102] = v106[54];
          v63 = v106[55];
          swift_unknownObjectRetain();
          outlined destroy of PeerMessagingServiceDelegate?();
          swift_endAccess();
          v62 = swift_getObjectType();
          swift_retain();
          v106[15] = v60;
          v106[16] = &protocol witness table for PeerMessagingService;
          v106[12] = v61;
          v64 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 + 24) + **(int **)(v63 + 24));
          v23 = (_QWORD *)swift_task_alloc();
          v106[103] = v23;
          *v23 = v106[68];
          v23[1] = PeerMessagingService.didReceiveMessage(_:fromID:);
          return v64(v106 + 12, v106[85], v62, v63);
        }
        outlined destroy of PeerMessagingServiceDelegate?();
        swift_endAccess();
        outlined destroy of MembershipUpdateIDSMessage(v106[85]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v91 = v106[95];
      v88 = v106[93];
      v93 = v106[91];
      v92 = v106[90];
      v94 = v106[89];
      v98 = v106[88];
      v97 = v106[87];
      v99 = v106[86];
      v100 = v106[76];
      outlined init with take of RSVPResponseIDSMessage(v106[92], v91);
      v106[60] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v106[61] = v3;
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP response received from ", 0x1CuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v4);
      swift_bridgeObjectRelease();
      v5 = (uint64_t *)(v91 + *(int *)(v88 + 20));
      v89 = *v5;
      v90 = v5[1];
      swift_bridgeObjectRetain();
      v106[62] = v89;
      v106[63] = v90;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" for group with ID: ", 0x14uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v93, v91, v94);
      v95 = GPKGroupID.hexString.getter();
      v96 = v7;
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
      v106[64] = v95;
      v106[65] = v96;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v98);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v98, v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v9 = MEMORY[0x242635600](v100 + 216);
      v10 = *(_QWORD *)(v100 + 224);
      v106[66] = v9;
      v106[67] = v10;
      if (v106[66])
      {
        v83 = v106[77];
        v84 = v106[76];
        v106[99] = v106[66];
        v86 = v106[67];
        swift_unknownObjectRetain();
        outlined destroy of PeerMessagingServiceDelegate?();
        swift_endAccess();
        v85 = swift_getObjectType();
        swift_retain();
        v106[20] = v83;
        v106[21] = &protocol witness table for PeerMessagingService;
        v106[17] = v84;
        v87 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 + 16) + **(int **)(v86 + 16));
        v11 = (_QWORD *)swift_task_alloc();
        v106[100] = v11;
        *v11 = v106[68];
        v11[1] = PeerMessagingService.didReceiveMessage(_:fromID:);
        return v87(v106 + 17, v106[95], v85, v86);
      }
      outlined destroy of PeerMessagingServiceDelegate?();
      swift_endAccess();
      outlined destroy of RSVPResponseIDSMessage(v106[95]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v38 = v106[88];
    v37 = v106[87];
    v39 = v106[86];
    v36 = v106[75];
    v35 = v106[74];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v106 + 7));
    v106[36] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v106[37] = v32;
    v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid fromID received from IDS ", 0x21uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v33);
    swift_bridgeObjectRelease();
    v106[38] = v35;
    v106[39] = v36;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v106[68] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0 + 136;
  *(_QWORD *)(*(_QWORD *)v0 + 544) = *(_QWORD *)v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 544) = v0;
  swift_unknownObjectRelease();
  outlined destroy of RSVPResponseIDSMessage(*(_QWORD *)(v0 + 760));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 544) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 96;
  *(_QWORD *)(v2 + 544) = *v1;
  *(_QWORD *)(v2 + 832) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v4);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 544) = v0;
  swift_unknownObjectRelease();
  outlined destroy of MembershipUpdateIDSMessage(*(_QWORD *)(v0 + 680));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 544) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 544) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 544) = v0;
  swift_unknownObjectRelease();
  outlined destroy of GroupEventIDSMessage(*(_QWORD *)(v0 + 648));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 544) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 544) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 544) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;

  v10 = (void *)v0[104];
  v9 = (void (*)(uint64_t, uint64_t))v0[101];
  v7 = v0[88];
  v8 = v0[86];
  v0[68] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  swift_unknownObjectRelease();
  v1 = v10;
  v0[71] = v10;
  v0[56] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[57] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("caught error handling group membership update ", 0x2EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[58] = Error.localizedDescription.getter();
  v0[59] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of MembershipUpdateIDSMessage(v0[85]);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[68] + 8))();
}

uint64_t outlined destroy of RSVPResponseIDSMessage?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = type metadata accessor for RSVPResponseIDSMessage();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKGroupID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    v4 = a1 + *(int *)(v9 + 24);
    v2 = type metadata accessor for GPKGroup.JoinState();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
    v5 = a1 + *(int *)(v9 + 28);
    v6 = type metadata accessor for UUID();
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v7 + 48))(v5, 1))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return a1;
}

uint64_t outlined destroy of MembershipUpdateIDSMessage?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;

  updated = type metadata accessor for MembershipUpdateIDSMessage();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKGroupID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = a1 + *(int *)(updated + 36);
    v2 = type metadata accessor for GroupBlobEnvelope();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v14, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16));
      outlined consume of Data._Representation(*(_QWORD *)(v14 + 24), *(_QWORD *)(v14 + 32));
      v11 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v8 = v14 + v11[7];
      v9 = type metadata accessor for UnknownStorage();
      v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v8);
      v12 = v14 + v11[8];
      v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
      {
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v10)(v12 + *(int *)(v13 + 20), v9);
      }
      v6 = v14 + v11[9];
      v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1))
      {
        outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        outlined consume of Data._Representation(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
        outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
        outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
        ((void (*)(uint64_t, uint64_t))v10)(v6 + *(int *)(v7 + 32), v9);
      }
      v4 = v14 + v11[10];
      v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
      {
        outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
        outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
        outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
        ((void (*)(uint64_t, uint64_t))v10)(v4 + *(int *)(v5 + 28), v9);
      }
    }
  }
  return a1;
}

uint64_t outlined destroy of GroupEventIDSMessage?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GroupEventIDSMessage();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v3 = a1 + *(int *)(v5 + 20);
    v1 = type metadata accessor for GPKGroupID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
    swift_bridgeObjectRelease();
  }
  return a1;
}

_BYTE *outlined init with take of GroupEventIDSMessage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *result;
  uint64_t v4;
  int *v5;

  *a2 = *a1;
  v5 = (int *)type metadata accessor for GroupEventIDSMessage();
  v4 = v5[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  result = a2;
  *(_QWORD *)&a2[v5[6]] = *(_QWORD *)&a1[v5[6]];
  *(_QWORD *)&a2[v5[7]] = *(_QWORD *)&a1[v5[7]];
  return result;
}

uint64_t outlined init with take of MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int *updated;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  updated = (int *)type metadata accessor for MembershipUpdateIDSMessage();
  *(_OWORD *)(a2 + updated[5]) = *(_OWORD *)(a1 + updated[5]);
  *(_QWORD *)(a2 + updated[6]) = *(_QWORD *)(a1 + updated[6]);
  *(_QWORD *)(a2 + updated[7]) = *(_QWORD *)(a1 + updated[7]);
  *(_QWORD *)(a2 + updated[8]) = *(_QWORD *)(a1 + updated[8]);
  v28 = updated[9];
  v30 = type metadata accessor for GroupBlobEnvelope();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v31 + 48))(a1 + v28, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a2 + v28), (const void *)(a1 + v28), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v20 = a2 + v28;
    *(_DWORD *)v20 = *(_DWORD *)(a1 + v28);
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(a1 + v28 + 8);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(a1 + v28 + 24);
    v21 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v17 = a2 + v28 + v21[7];
    v16 = a1 + v28 + v21[7];
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
    ((void (*)(uint64_t, uint64_t))v19)(v17, v16);
    v22 = (_QWORD *)(a2 + v28 + v21[8]);
    v23 = (_QWORD *)(a1 + v28 + v21[8]);
    v24 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v25 + 48))(v23, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *v22 = *v23;
      v19((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    __dst = (_OWORD *)(a2 + v28 + v21[9]);
    __src = (_OWORD *)(a1 + v28 + v21[9]);
    v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v15 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      v19((char *)__dst + *(int *)(v14 + 32), (char *)__src + *(int *)(v14 + 32), v18);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    v8 = (_OWORD *)(a2 + v28 + v21[10]);
    v9 = (_OWORD *)(a1 + v28 + v21[10]);
    v10 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v11 + 48))(v9, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      *v8 = *v9;
      v8[1] = v9[1];
      v8[2] = v9[2];
      v19((char *)v8 + *(int *)(v10 + 28), (char *)v9 + *(int *)(v10 + 28), v18);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_DWORD *)(a2 + v28 + *(int *)(v30 + 20)) = *(_DWORD *)(a1 + v28 + *(int *)(v30 + 20));
    (*(void (**)(void))(v31 + 56))();
  }
  return a2;
}

uint64_t outlined init with take of RSVPResponseIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v8 = (int *)type metadata accessor for RSVPResponseIDSMessage();
  *(_OWORD *)(a2 + v8[5]) = *(_OWORD *)(a1 + v8[5]);
  v6 = v8[6];
  v3 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a2 + v6, a1 + v6);
  v9 = v8[7];
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1 + v9, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a2 + v9), (const void *)(a1 + v9), *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v12 + 32))();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2 + v9, 0, 1, v11);
  }
  result = a2;
  *(_BYTE *)(a2 + v8[8]) = *(_BYTE *)(a1 + v8[8]) & 1;
  return result;
}

uint64_t protocol witness for IdentityServiceEventDelegate.didReceiveMessage(_:fromID:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for IdentityServiceEventDelegate.didReceiveMessage(_:fromID:) in conformance PeerMessagingService;
  return PeerMessagingService.didReceiveMessage(_:fromID:)(a1, a2, a3);
}

_QWORD *protocol witness for IdentityServiceEventDelegate.didReceiveMessage(_:fromID:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t PeerMessagingService.invitationReceived(message:fromID:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 304) = v4;
  *(_QWORD *)(v5 + 296) = a4;
  *(_QWORD *)(v5 + 288) = a3;
  *(_QWORD *)(v5 + 280) = a2;
  *(_QWORD *)(v5 + 272) = a1;
  *(_QWORD *)(v5 + 312) = *v4;
  *(_QWORD *)(v5 + 240) = v5;
  *(_QWORD *)(v5 + 248) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 216) = 0;
  *(_BYTE *)(v5 + 416) = 0;
  v6 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v5 + 320) = v6;
  *(_QWORD *)(v5 + 328) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 336) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InvitationIDSMessage?);
  *(_QWORD *)(v5 + 344) = swift_task_alloc();
  v7 = type metadata accessor for InvitationIDSMessage();
  *(_QWORD *)(v5 + 352) = v7;
  *(_QWORD *)(v5 + 360) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 368) = swift_task_alloc();
  *(_QWORD *)(v5 + 248) = a1;
  *(_QWORD *)(v5 + 160) = a2;
  *(_QWORD *)(v5 + 168) = a3;
  *(_QWORD *)(v5 + 256) = a4;
  *(_QWORD *)(v5 + 264) = v4;
  return swift_task_switch();
}

uint64_t PeerMessagingService.invitationReceived(message:fromID:invitationID:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[38];
  v0[30] = v0;
  outlined init with copy of ReadinessChecking(v1 + 176, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 376) = v2;
  *v2 = *(_QWORD *)(v4 + 240);
  v2[1] = PeerMessagingService.invitationReceived(message:fromID:invitationID:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 240) = *v1;
  *(_QWORD *)(v2 + 384) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = v0[45];
  v40 = v0[44];
  v39 = v0[43];
  v36 = v0[34];
  v0[30] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  IDSMessageCoder.init()();
  v37 = lazy protocol witness table accessor for type InvitationIDSMessage and conformance InvitationIDSMessage();
  v1 = lazy protocol witness table accessor for type InvitationIDSMessage and conformance InvitationIDSMessage();
  IDSMessageCoder.decode<A>(_:from:)(v40, v36, v40, v37, v1, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v40) == 1)
  {
    v13 = *(_QWORD *)(v35 + 336);
    v12 = *(_QWORD *)(v35 + 328);
    v14 = *(_QWORD *)(v35 + 320);
    outlined destroy of InvitationIDSMessage?(*(_QWORD *)(v35 + 344));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown invitation received from IDS", 0x24uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = *(_QWORD *)(v35 + 304);
    v29 = *(_QWORD *)(v35 + 288);
    v32 = *(_QWORD *)(v35 + 280);
    outlined init with take of InvitationIDSMessage(*(_QWORD *)(v35 + 344), *(_QWORD *)(v35 + 368));
    outlined init with copy of IdentityServiceUtils(v28 + 136, v35 + 56);
    v30 = *(_QWORD *)(v35 + 80);
    v31 = *(_QWORD *)(v35 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v35 + 56), v30);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 8))(v32, v29, v30);
    v34 = v2;
    *(_QWORD *)(v35 + 392) = v2;
    if (v2)
    {
      v27 = *(_QWORD *)(v35 + 304);
      *(_QWORD *)(v35 + 208) = v33;
      *(_QWORD *)(v35 + 216) = v2;
      __swift_destroy_boxed_opaque_existential_1(v35 + 56);
      swift_beginAccess();
      v3 = MEMORY[0x242635600](v27 + 216);
      v4 = *(_QWORD *)(v27 + 224);
      *(_QWORD *)(v35 + 224) = v3;
      *(_QWORD *)(v35 + 232) = v4;
      if (*(_QWORD *)(v35 + 224))
      {
        v22 = *(_QWORD *)(v35 + 312);
        v23 = *(_QWORD *)(v35 + 304);
        *(_QWORD *)(v35 + 400) = *(_QWORD *)(v35 + 224);
        v25 = *(_QWORD *)(v35 + 232);
        swift_unknownObjectRetain();
        outlined destroy of PeerMessagingServiceDelegate?();
        swift_endAccess();
        ObjectType = swift_getObjectType();
        swift_retain();
        *(_QWORD *)(v35 + 120) = v22;
        *(_QWORD *)(v35 + 128) = &protocol witness table for PeerMessagingService;
        *(_QWORD *)(v35 + 96) = v23;
        v26 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 + 8)
                                                                                                  + **(int **)(v25 + 8));
        v5 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v35 + 408) = v5;
        *v5 = *(_QWORD *)(v35 + 240);
        v5[1] = PeerMessagingService.invitationReceived(message:fromID:invitationID:);
        return v26(v35 + 96, *(_QWORD *)(v35 + 368), v33, v34, *(_QWORD *)(v35 + 296), ObjectType, v25);
      }
      while (1)
      {
        outlined destroy of PeerMessagingServiceDelegate?();
        swift_endAccess();
        v8 = v7;
        if ((v8 & 1) != 0)
          break;
        *(_BYTE *)(v35 + 416) = 3;
        __break(1u);
      }
      v21 = *(_QWORD *)(v35 + 368);
      swift_bridgeObjectRelease();
      outlined destroy of InvitationIDSMessage(v21);
    }
    else
    {
      v20 = *(_QWORD *)(v35 + 368);
      v18 = *(_QWORD *)(v35 + 336);
      v17 = *(_QWORD *)(v35 + 328);
      v19 = *(_QWORD *)(v35 + 320);
      v16 = *(_QWORD *)(v35 + 288);
      v15 = *(_QWORD *)(v35 + 280);
      __swift_destroy_boxed_opaque_existential_1(v35 + 56);
      *(_QWORD *)(v35 + 176) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v35 + 184) = v9;
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid fromID received from IDS ", 0x21uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v35 + 192) = v15;
      *(_QWORD *)(v35 + 200) = v16;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of InvitationIDSMessage(v20);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v35 + 240) + 8))();
}

{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  *(_QWORD *)(v0 + 240) = v0;
  swift_unknownObjectRelease();
  v7 = *(unsigned __int8 *)(v0 + 417);
  if (v7 != 3)
  {
    *(_BYTE *)(v6 + 416) = v7;
    if (v7 >= 2)
    {
      v5 = *(_QWORD *)(v6 + 296);
      v4 = *(_QWORD *)(*(_QWORD *)(v6 + 304) + 128);
      swift_unknownObjectRetain();
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v4 + 80))(v5, ObjectType);
      swift_unknownObjectRelease();
    }
  }
  v3 = *(_QWORD *)(v6 + 368);
  swift_bridgeObjectRelease();
  outlined destroy of InvitationIDSMessage(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 240) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 240) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 240) + 8))();
}

uint64_t PeerMessagingService.invitationReceived(message:fromID:invitationID:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *v1 + 96;
  *(_QWORD *)(v4 + 240) = *v1;
  *(_BYTE *)(v4 + 417) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return swift_task_switch();
}

uint64_t outlined destroy of InvitationIDSMessage?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = type metadata accessor for InvitationIDSMessage();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKGroupID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(v15 + 28)), *(_QWORD *)(a1 + *(int *)(v15 + 28) + 8));
    v11 = a1 + *(int *)(v15 + 32);
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32));
    v10 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v7 = v11 + v10[7];
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7);
    v12 = v11 + v10[8];
    v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v9)(v12 + *(int *)(v13 + 20), v8);
    }
    v5 = v11 + v10[9];
    v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
      ((void (*)(uint64_t, uint64_t))v9)(v5 + *(int *)(v6 + 32), v8);
    }
    v3 = v11 + v10[10];
    v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
      ((void (*)(uint64_t, uint64_t))v9)(v3 + *(int *)(v4 + 28), v8);
    }
  }
  return a1;
}

uint64_t outlined init with take of InvitationIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v20 = (int *)type metadata accessor for InvitationIDSMessage();
  *(_QWORD *)(a2 + v20[5]) = *(_QWORD *)(a1 + v20[5]);
  *(_OWORD *)(a2 + v20[6]) = *(_OWORD *)(a1 + v20[6]);
  *(_OWORD *)(a2 + v20[7]) = *(_OWORD *)(a1 + v20[7]);
  v21 = v20[8];
  v22 = a2 + v21;
  *(_DWORD *)v22 = *(_DWORD *)(a1 + v21);
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(a1 + v21 + 8);
  *(_OWORD *)(v22 + 24) = *(_OWORD *)(a1 + v21 + 24);
  v26 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v23 = v26[7];
  v24 = type metadata accessor for UnknownStorage();
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  ((void (*)(uint64_t, uint64_t))v25)(a2 + v21 + v23, a1 + v21 + v23);
  v27 = v26[8];
  v28 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v29 + 48))(a1 + v21 + v27, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v21 + v27), (const void *)(a1 + v21 + v27), *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v3 = (char *)(a1 + v21 + v27);
    v17 = (char *)(a2 + v21 + v27);
    *(_QWORD *)v17 = *(_QWORD *)v3;
    v25(&v17[*(int *)(v28 + 20)], &v3[*(int *)(v28 + 20)], v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v17, 0, 1, v28);
  }
  __dst = (_OWORD *)(a2 + v21 + v26[9]);
  __src = (_OWORD *)(a1 + v21 + v26[9]);
  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v16 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    v25((char *)__dst + *(int *)(v15 + 32), (char *)__src + *(int *)(v15 + 32), v24);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v9 = (_OWORD *)(a2 + v21 + v26[10]);
  v10 = (_OWORD *)(a1 + v21 + v26[10]);
  v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v12 + 48))(v10, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v9[1] = v10[1];
    v9[2] = v10[2];
    v25((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v24);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v7 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(a2 + v21 + *(int *)(v7 + 20)) = *(_DWORD *)(a1 + v21 + *(int *)(v7 + 20));
  return result;
}

uint64_t PeerMessagingService.invitationAccepted(message:invitationID:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[27] = v2;
  v3[26] = a2;
  v3[25] = a1;
  v3[28] = *v2;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = 0;
  v3[24] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[29] = v4;
  v3[30] = *(_QWORD *)(v4 - 8);
  v3[31] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v3[32] = v5;
  v3[33] = *(_QWORD *)(v5 - 8);
  v3[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RSVPResponseIDSMessage?);
  v3[35] = swift_task_alloc();
  v6 = type metadata accessor for RSVPResponseIDSMessage();
  v3[36] = v6;
  v3[37] = *(_QWORD *)(v6 - 8);
  v3[38] = swift_task_alloc();
  v3[22] = a1;
  v3[23] = a2;
  v3[24] = v2;
  return swift_task_switch();
}

uint64_t PeerMessagingService.invitationAccepted(message:invitationID:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[27];
  v0[21] = v0;
  outlined init with copy of ReadinessChecking(v1 + 176, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 312) = v2;
  *v2 = *(_QWORD *)(v4 + 168);
  v2[1] = PeerMessagingService.invitationAccepted(message:invitationID:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = v0[37];
  v34 = v0[36];
  v33 = v0[35];
  v30 = v0[25];
  v0[21] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  IDSMessageCoder.init()();
  v31 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
  v1 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
  IDSMessageCoder.decode<A>(_:from:)(v34, v30, v34, v31, v1, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v34) == 1)
  {
    v12 = v29[31];
    v11 = v29[30];
    v13 = v29[29];
    outlined destroy of RSVPResponseIDSMessage?(v29[35]);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown invitation acceptance received from IDS", 0x2FuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v29[38];
    v21 = v29[34];
    v20 = v29[33];
    v22 = v29[32];
    v26 = v29[31];
    v25 = v29[30];
    v27 = v29[29];
    v28 = v29[27];
    outlined init with take of RSVPResponseIDSMessage(v29[35], v19);
    v29[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v29[16] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation acceptance received for group with ID: ", 0x32uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v19, v22);
    v23 = GPKGroupID.hexString.getter();
    v24 = v4;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    v29[17] = v23;
    v29[18] = v24;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitationID: ", 0x10uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v7 = MEMORY[0x242635600](v28 + 216);
    v8 = *(_QWORD *)(v28 + 224);
    v29[19] = v7;
    v29[20] = v8;
    if (v29[19])
    {
      v14 = v29[28];
      v15 = v29[27];
      v29[41] = v29[19];
      v17 = v29[20];
      swift_unknownObjectRetain();
      outlined destroy of PeerMessagingServiceDelegate?();
      swift_endAccess();
      ObjectType = swift_getObjectType();
      swift_retain();
      v29[10] = v14;
      v29[11] = &protocol witness table for PeerMessagingService;
      v29[7] = v15;
      v18 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 + 16) + **(int **)(v17 + 16));
      v9 = (_QWORD *)swift_task_alloc();
      v29[42] = v9;
      *v9 = v29[21];
      v9[1] = PeerMessagingService.invitationAccepted(message:invitationID:);
      return v18(v29 + 7, v29[38], ObjectType, v17);
    }
    outlined destroy of PeerMessagingServiceDelegate?();
    swift_endAccess();
    outlined destroy of RSVPResponseIDSMessage(v29[38]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v29[21] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0 + 56;
  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = v0;
  swift_unknownObjectRelease();
  outlined destroy of RSVPResponseIDSMessage(*(_QWORD *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 168) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 168) + 8))();
}

uint64_t PeerMessagingService.invitationDeclined(message:invitationID:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[27] = v2;
  v3[26] = a2;
  v3[25] = a1;
  v3[28] = *v2;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = 0;
  v3[24] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[29] = v4;
  v3[30] = *(_QWORD *)(v4 - 8);
  v3[31] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v3[32] = v5;
  v3[33] = *(_QWORD *)(v5 - 8);
  v3[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RSVPResponseIDSMessage?);
  v3[35] = swift_task_alloc();
  v6 = type metadata accessor for RSVPResponseIDSMessage();
  v3[36] = v6;
  v3[37] = *(_QWORD *)(v6 - 8);
  v3[38] = swift_task_alloc();
  v3[22] = a1;
  v3[23] = a2;
  v3[24] = v2;
  return swift_task_switch();
}

uint64_t PeerMessagingService.invitationDeclined(message:invitationID:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[27];
  v0[21] = v0;
  outlined init with copy of ReadinessChecking(v1 + 176, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 312) = v2;
  *v2 = *(_QWORD *)(v4 + 168);
  v2[1] = PeerMessagingService.invitationDeclined(message:invitationID:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  *(_QWORD *)(v2 + 320) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = v0[37];
  v34 = v0[36];
  v33 = v0[35];
  v30 = v0[25];
  v0[21] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  IDSMessageCoder.init()();
  v31 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
  v1 = lazy protocol witness table accessor for type RSVPResponseIDSMessage and conformance RSVPResponseIDSMessage();
  IDSMessageCoder.decode<A>(_:from:)(v34, v30, v34, v31, v1, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v34) == 1)
  {
    v12 = v29[31];
    v11 = v29[30];
    v13 = v29[29];
    outlined destroy of RSVPResponseIDSMessage?(v29[35]);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown invitation decline received from IDS", 0x2CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v29[38];
    v21 = v29[34];
    v20 = v29[33];
    v22 = v29[32];
    v26 = v29[31];
    v25 = v29[30];
    v27 = v29[29];
    v28 = v29[27];
    outlined init with take of RSVPResponseIDSMessage(v29[35], v19);
    v29[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v29[16] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation decline received for group with ID: ", 0x2FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v19, v22);
    v23 = GPKGroupID.hexString.getter();
    v24 = v4;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    v29[17] = v23;
    v29[18] = v24;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitationID: ", 0x10uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/PeerMessagingService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v7 = MEMORY[0x242635600](v28 + 216);
    v8 = *(_QWORD *)(v28 + 224);
    v29[19] = v7;
    v29[20] = v8;
    if (v29[19])
    {
      v14 = v29[28];
      v15 = v29[27];
      v29[41] = v29[19];
      v17 = v29[20];
      swift_unknownObjectRetain();
      outlined destroy of PeerMessagingServiceDelegate?();
      swift_endAccess();
      ObjectType = swift_getObjectType();
      swift_retain();
      v29[10] = v14;
      v29[11] = &protocol witness table for PeerMessagingService;
      v29[7] = v15;
      v18 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 + 16) + **(int **)(v17 + 16));
      v9 = (_QWORD *)swift_task_alloc();
      v29[42] = v9;
      *v9 = v29[21];
      v9[1] = PeerMessagingService.invitationDeclined(message:invitationID:);
      return v18(v29 + 7, v29[38], ObjectType, v17);
    }
    outlined destroy of PeerMessagingServiceDelegate?();
    swift_endAccess();
    outlined destroy of RSVPResponseIDSMessage(v29[38]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v29[21] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0 + 56;
  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = v0;
  swift_unknownObjectRelease();
  outlined destroy of RSVPResponseIDSMessage(*(_QWORD *)(v0 + 304));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 168) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 168) + 8))();
}

unint64_t base witness table accessor for Equatable in PeerMessageResult()
{
  return lazy protocol witness table accessor for type PeerMessageResult and conformance PeerMessageResult();
}

uint64_t protocol witness for InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:) in conformance PeerMessagingService;
  return PeerMessagingService.invitationReceived(message:fromID:invitationID:)(a1, a2, a3, a4);
}

_QWORD *protocol witness for InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for InvitationServiceEventDelegate.invitationAccepted(message:invitationID:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationServiceEventDelegate.invitationAccepted(message:invitationID:) in conformance PeerMessagingService;
  return PeerMessagingService.invitationAccepted(message:invitationID:)(a1, a2);
}

_QWORD *protocol witness for InvitationServiceEventDelegate.invitationAccepted(message:invitationID:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for InvitationServiceEventDelegate.invitationDeclined(message:invitationID:) in conformance PeerMessagingService(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationServiceEventDelegate.invitationDeclined(message:invitationID:) in conformance PeerMessagingService;
  return PeerMessagingService.invitationDeclined(message:invitationID:)(a1, a2);
}

_QWORD *protocol witness for InvitationServiceEventDelegate.invitationDeclined(message:invitationID:) in conformance PeerMessagingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t getEnumTagSinglePayload for PeerMessageResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for PeerMessageResult(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for PeerMessageResult(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PeerMessageResult(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PeerMessageResult()
{
  return &type metadata for PeerMessageResult;
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v7 + 16) = v7;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 + 8)
                                                                                              + **(int **)(a7 + 8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v8;
  *v8 = *(_QWORD *)(v7 + 16);
  v8[1] = dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:);
  return v16(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:)(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 16) + **(int **)(a4 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 24) + **(int **)(a4 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 32)
                                                                                     + **(int **)(a6 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v8 + 16) = v8;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 32) + **(int **)(a8 + 32));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = dispatch thunk of PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:);
  return v18(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v20)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v10 + 16) = v10;
  v20 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a10 + 40) + **(int **)(a10 + 40));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 24) = v11;
  *v11 = *(_QWORD *)(v10 + 16);
  v11[1] = dispatch thunk of PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:);
  return v20(a1 & 1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.send(message:to:from:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v7 + 16) = v7;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 + 48)
                                                                                              + **(int **)(a7 + 48));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v8;
  *v8 = *(_QWORD *)(v7 + 16);
  v8[1] = dispatch thunk of PeerMessagingServiceProviding.send(message:to:from:priority:);
  return v16(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.send(message:to:from:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v22)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v8[7] = v8;
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  v22 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 56) + **(int **)(a8 + 56));
  v9 = (_QWORD *)swift_task_alloc();
  v8[8] = v9;
  v8[2] = v11;
  v8[3] = v12;
  v8[4] = v13;
  v8[5] = v14;
  v8[6] = v15;
  *v9 = v8[7];
  v9[1] = dispatch thunk of PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:);
  return v22(a1, v8 + 2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 56) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 64) + **(int **)(a4 + 64));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.sendMetaDataUpdate(to:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.fetchPendingInvitationsSilently()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.fetchPendingInvitationsAndWait()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 80) + **(int **)(a2 + 80));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of PeerMessagingServiceProviding.fetchPendingInvitationsAndWait();
  return v6(a1, a2);
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.fetchPendingInvitationsAndWait()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of PeerMessagingServiceProviding.deleteInvitation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t type metadata accessor for PeerMessagingService()
{
  return objc_opt_self();
}

uint64_t method lookup function for PeerMessagingService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PeerMessagingService.__allocating_init(identityService:invitationService:utils:readinessChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

_QWORD *outlined init with copy of PeerMessagingServiceDelegate?(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v6;

  v6 = *a1;
  swift_unknownObjectRetain();
  result = a2;
  v3 = a1[1];
  *a2 = v6;
  a2[1] = v3;
  return result;
}

uint64_t one-time initialization function for kAppTokenID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gs.gpk.auth", 0x15uLL, 1);
  result = v1._countAndFlagsBits;
  kAppTokenID = v1;
  return result;
}

Swift::String *kAppTokenID.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppTokenID != -1)
    swift_once();
  return &kAppTokenID;
}

uint64_t one-time initialization function for initRegisterUserKeyInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initRegisterUserKeyInfo", 0x17uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initRegisterUserKeyInfo = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initRegisterUserKeyInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for initRegisterUserKeyInfo != -1)
    swift_once();
  return &static URLBagKey.initRegisterUserKeyInfo;
}

uint64_t static URLBagKey.initRegisterUserKeyInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initRegisterUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeRegisterUserKeyInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeRegisterUserKeyInfo", 0x1BuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeRegisterUserKeyInfo = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeRegisterUserKeyInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for completeRegisterUserKeyInfo != -1)
    swift_once();
  return &static URLBagKey.completeRegisterUserKeyInfo;
}

uint64_t static URLBagKey.completeRegisterUserKeyInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeRegisterUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for fetchUserKeyInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkFetchUserKeyInfo", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.fetchUserKeyInfo = (__int128)v1;
  return result;
}

__int128 *URLBagKey.fetchUserKeyInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for fetchUserKeyInfo != -1)
    swift_once();
  return &static URLBagKey.fetchUserKeyInfo;
}

uint64_t static URLBagKey.fetchUserKeyInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.fetchUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for lookupUserKeyInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkLookupUserKeyInfo", 0x14uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.lookupUserKeyInfo = (__int128)v1;
  return result;
}

__int128 *URLBagKey.lookupUserKeyInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for lookupUserKeyInfo != -1)
    swift_once();
  return &static URLBagKey.lookupUserKeyInfo;
}

uint64_t static URLBagKey.lookupUserKeyInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.lookupUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for lookupMultiUserKeyInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lookupUserKeyInfoMultiFetch", 0x1BuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.lookupMultiUserKeyInfo = (__int128)v1;
  return result;
}

__int128 *URLBagKey.lookupMultiUserKeyInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for lookupMultiUserKeyInfo != -1)
    swift_once();
  return &static URLBagKey.lookupMultiUserKeyInfo;
}

uint64_t static URLBagKey.lookupMultiUserKeyInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.lookupMultiUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initCreateGroup()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkCreateGroup", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initCreateGroup = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initCreateGroup.unsafeMutableAddressor()
{
  if (one-time initialization token for initCreateGroup != -1)
    swift_once();
  return &static URLBagKey.initCreateGroup;
}

uint64_t static URLBagKey.initCreateGroup.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initCreateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeCreateGroup()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkCreateGroup", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeCreateGroup = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeCreateGroup.unsafeMutableAddressor()
{
  if (one-time initialization token for completeCreateGroup != -1)
    swift_once();
  return &static URLBagKey.completeCreateGroup;
}

uint64_t static URLBagKey.completeCreateGroup.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeCreateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initUpdateGroup()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkUpdateGroup", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initUpdateGroup = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initUpdateGroup.unsafeMutableAddressor()
{
  if (one-time initialization token for initUpdateGroup != -1)
    swift_once();
  return &static URLBagKey.initUpdateGroup;
}

uint64_t static URLBagKey.initUpdateGroup.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initUpdateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeUpdateGroup()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkUpdateGroup", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeUpdateGroup = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeUpdateGroup.unsafeMutableAddressor()
{
  if (one-time initialization token for completeUpdateGroup != -1)
    swift_once();
  return &static URLBagKey.completeUpdateGroup;
}

uint64_t static URLBagKey.completeUpdateGroup.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeUpdateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initFetchGroupBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initFetchGroupBlob", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initFetchGroupBlob = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initFetchGroupBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for initFetchGroupBlob != -1)
    swift_once();
  return &static URLBagKey.initFetchGroupBlob;
}

uint64_t static URLBagKey.initFetchGroupBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchGroupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeFetchGroupBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeFetchGroupBlob", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeFetchGroupBlob = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeFetchGroupBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for completeFetchGroupBlob != -1)
    swift_once();
  return &static URLBagKey.completeFetchGroupBlob;
}

uint64_t static URLBagKey.completeFetchGroupBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchGroupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initRSVP()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkRsvp", 0xBuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initRSVP = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initRSVP.unsafeMutableAddressor()
{
  if (one-time initialization token for initRSVP != -1)
    swift_once();
  return &static URLBagKey.initRSVP;
}

uint64_t static URLBagKey.initRSVP.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initRSVP.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeRSVP()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkRsvp", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeRSVP = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeRSVP.unsafeMutableAddressor()
{
  if (one-time initialization token for completeRSVP != -1)
    swift_once();
  return &static URLBagKey.completeRSVP;
}

uint64_t static URLBagKey.completeRSVP.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeRSVP.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initFetchRSVPQueue()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkFetchGroupRsvpQueue", 0x1AuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initFetchRSVPQueue = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initFetchRSVPQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for initFetchRSVPQueue != -1)
    swift_once();
  return &static URLBagKey.initFetchRSVPQueue;
}

uint64_t static URLBagKey.initFetchRSVPQueue.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchRSVPQueue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeFetchRSVPQueue()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkFetchGroupRsvpQueue", 0x1EuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeFetchRSVPQueue = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeFetchRSVPQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for completeFetchRSVPQueue != -1)
    swift_once();
  return &static URLBagKey.completeFetchRSVPQueue;
}

uint64_t static URLBagKey.completeFetchRSVPQueue.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchRSVPQueue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initFetchSeedHistory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkFetchSeedHistory", 0x17uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initFetchSeedHistory = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initFetchSeedHistory.unsafeMutableAddressor()
{
  if (one-time initialization token for initFetchSeedHistory != -1)
    swift_once();
  return &static URLBagKey.initFetchSeedHistory;
}

uint64_t static URLBagKey.initFetchSeedHistory.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchSeedHistory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeFetchSeedHistory()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkFetchSeedHistory", 0x1BuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeFetchSeedHistory = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeFetchSeedHistory.unsafeMutableAddressor()
{
  if (one-time initialization token for completeFetchSeedHistory != -1)
    swift_once();
  return &static URLBagKey.completeFetchSeedHistory;
}

uint64_t static URLBagKey.completeFetchSeedHistory.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchSeedHistory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initFetchMetadata()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkFetchGroupMetadata", 0x19uLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initFetchMetadata = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initFetchMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for initFetchMetadata != -1)
    swift_once();
  return &static URLBagKey.initFetchMetadata;
}

uint64_t static URLBagKey.initFetchMetadata.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeFetchMetadata()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkFetchGroupMetadata", 0x1DuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeFetchMetadata = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeFetchMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for completeFetchMetadata != -1)
    swift_once();
  return &static URLBagKey.completeFetchMetadata;
}

uint64_t static URLBagKey.completeFetchMetadata.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for initUpdateMetadata()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("initGpkUpdateGroupMetadata", 0x1AuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.initUpdateMetadata = (__int128)v1;
  return result;
}

__int128 *URLBagKey.initUpdateMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for initUpdateMetadata != -1)
    swift_once();
  return &static URLBagKey.initUpdateMetadata;
}

uint64_t static URLBagKey.initUpdateMetadata.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initUpdateMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for completeUpdateMetadata()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completeGpkUpdateGroupMetadata", 0x1EuLL, 1);
  result = v1._countAndFlagsBits;
  static URLBagKey.completeUpdateMetadata = (__int128)v1;
  return result;
}

__int128 *URLBagKey.completeUpdateMetadata.unsafeMutableAddressor()
{
  if (one-time initialization token for completeUpdateMetadata != -1)
    swift_once();
  return &static URLBagKey.completeUpdateMetadata;
}

uint64_t static URLBagKey.completeUpdateMetadata.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeUpdateMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t *URLBagKey.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static URLBagKey.allCases;
}

uint64_t static URLBagKey.allCases.getter()
{
  uint64_t v1;

  v1 = *URLBagKey.allCases.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLBagConfigurationKey.isOptional.getter()
{
  return 1;
}

uint64_t URLBagConfigurationKey.init(rawValue:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  Swift::String string;
  Swift::Int v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v3 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v4 = "gpk-met-max-ops";
  *(_QWORD *)(v4 + 8) = 15;
  *(_BYTE *)(v4 + 16) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v3, string);
  swift_bridgeObjectRelease();
  if (v8)
  {
    result = swift_bridgeObjectRelease();
    *a3 = 1;
  }
  else
  {
    *a3 = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static URLBagConfigurationKey.allCases.getter()
{
  uint64_t result;

  result = _allocateUninitializedArray<A>(_:)();
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t URLBagConfigurationKey.rawValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpk-met-max-ops", 0xFuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance URLBagConfigurationKey()
{
  lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey;
  if (!lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for URLBagConfigurationKey, &type metadata for URLBagConfigurationKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey;
  if (!lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for URLBagConfigurationKey, &type metadata for URLBagConfigurationKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type URLBagConfigurationKey and conformance URLBagConfigurationKey);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance URLBagConfigurationKey()
{
  lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance URLBagConfigurationKey()
{
  lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance URLBagConfigurationKey()
{
  lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URLBagConfigurationKey@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return URLBagConfigurationKey.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance URLBagConfigurationKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = URLBagConfigurationKey.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance URLBagConfigurationKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static URLBagConfigurationKey.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for keyInfos()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.keyInfos = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.keyInfos.unsafeMutableAddressor()
{
  if (one-time initialization token for keyInfos != -1)
    swift_once();
  return &static HTTPBodyKey.keyInfos;
}

uint64_t static HTTPBodyKey.keyInfos.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.keyInfos.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyNameSpace()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.keyNameSpace = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.keyNameSpace.unsafeMutableAddressor()
{
  if (one-time initialization token for keyNameSpace != -1)
    swift_once();
  return &static HTTPBodyKey.keyNameSpace;
}

uint64_t static HTTPBodyKey.keyNameSpace.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.keyNameSpace.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for publicKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("publicKey", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.publicKey = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.publicKey.unsafeMutableAddressor()
{
  if (one-time initialization token for publicKey != -1)
    swift_once();
  return &static HTTPBodyKey.publicKey;
}

uint64_t static HTTPBodyKey.publicKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.publicKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyVersion()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyVersion", 0xAuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.keyVersion = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.keyVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for keyVersion != -1)
    swift_once();
  return &static HTTPBodyKey.keyVersion;
}

uint64_t static HTTPBodyKey.keyVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.keyVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyAlgorithm()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyAlgorithm", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.keyAlgorithm = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.keyAlgorithm.unsafeMutableAddressor()
{
  if (one-time initialization token for keyAlgorithm != -1)
    swift_once();
  return &static HTTPBodyKey.keyAlgorithm;
}

uint64_t static HTTPBodyKey.keyAlgorithm.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.keyAlgorithm.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for metadata()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadata", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.metadata = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.metadata.unsafeMutableAddressor()
{
  if (one-time initialization token for metadata != -1)
    swift_once();
  return &static HTTPBodyKey.metadata;
}

uint64_t static HTTPBodyKey.metadata.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.metadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for altDSID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("alternateDsId", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.altDSID = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.altDSID.unsafeMutableAddressor()
{
  if (one-time initialization token for altDSID != -1)
    swift_once();
  return &static HTTPBodyKey.altDSID;
}

uint64_t static HTTPBodyKey.altDSID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.altDSID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for gpkUserID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.gpkUserID = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.gpkUserID.unsafeMutableAddressor()
{
  if (one-time initialization token for gpkUserID != -1)
    swift_once();
  return &static HTTPBodyKey.gpkUserID;
}

uint64_t static HTTPBodyKey.gpkUserID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.gpkUserID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for email()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("email", 5uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.email = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.email.unsafeMutableAddressor()
{
  if (one-time initialization token for email != -1)
    swift_once();
  return &static HTTPBodyKey.email;
}

uint64_t static HTTPBodyKey.email.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.email.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for emailHash()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("emailHash", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.emailHash = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.emailHash.unsafeMutableAddressor()
{
  if (one-time initialization token for emailHash != -1)
    swift_once();
  return &static HTTPBodyKey.emailHash;
}

uint64_t static HTTPBodyKey.emailHash.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.emailHash.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for phoneNumber()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumber", 0xBuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.phoneNumber = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.phoneNumber.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneNumber != -1)
    swift_once();
  return &static HTTPBodyKey.phoneNumber;
}

uint64_t static HTTPBodyKey.phoneNumber.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.phoneNumber.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for phoneNumberHash()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumberHash", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.phoneNumberHash = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.phoneNumberHash.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneNumberHash != -1)
    swift_once();
  return &static HTTPBodyKey.phoneNumberHash;
}

uint64_t static HTTPBodyKey.phoneNumberHash.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.phoneNumberHash.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for encryptionPublicKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKey", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.encryptionPublicKey = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.encryptionPublicKey.unsafeMutableAddressor()
{
  if (one-time initialization token for encryptionPublicKey != -1)
    swift_once();
  return &static HTTPBodyKey.encryptionPublicKey;
}

uint64_t static HTTPBodyKey.encryptionPublicKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.encryptionPublicKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for encryptionPublicKeySignature()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKeySignature", 0x1CuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.encryptionPublicKeySignature = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.encryptionPublicKeySignature.unsafeMutableAddressor()
{
  if (one-time initialization token for encryptionPublicKeySignature != -1)
    swift_once();
  return &static HTTPBodyKey.encryptionPublicKeySignature;
}

uint64_t static HTTPBodyKey.encryptionPublicKeySignature.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.encryptionPublicKeySignature.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for verificationPublicKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKey", 0x15uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.verificationPublicKey = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.verificationPublicKey.unsafeMutableAddressor()
{
  if (one-time initialization token for verificationPublicKey != -1)
    swift_once();
  return &static HTTPBodyKey.verificationPublicKey;
}

uint64_t static HTTPBodyKey.verificationPublicKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.verificationPublicKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for verificationPublicKeySignature()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKeySignature", 0x1EuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.verificationPublicKeySignature = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.verificationPublicKeySignature.unsafeMutableAddressor()
{
  if (one-time initialization token for verificationPublicKeySignature != -1)
    swift_once();
  return &static HTTPBodyKey.verificationPublicKeySignature;
}

uint64_t static HTTPBodyKey.verificationPublicKeySignature.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.verificationPublicKeySignature.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.groupID = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.groupID = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.groupID.unsafeMutableAddressor()
{
  if (one-time initialization token for groupID != -1)
    swift_once();
  return &static HTTPBodyKey.groupID;
}

uint64_t static HTTPBodyKey.groupID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.groupID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlob", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.groupBlob = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlob", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.groupBlob = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.groupBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for groupBlob != -1)
    swift_once();
  return &static HTTPBodyKey.groupBlob;
}

uint64_t static HTTPBodyKey.groupBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.groupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for rsvpResponseBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponseBlob", 0x10uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.rsvpResponseBlob = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.rsvpResponseBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for rsvpResponseBlob != -1)
    swift_once();
  return &static HTTPBodyKey.rsvpResponseBlob;
}

uint64_t static HTTPBodyKey.rsvpResponseBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.rsvpResponseBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for signedUserRSVPBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signedUserRsvpBlob", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.signedUserRSVPBlob = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.signedUserRSVPBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for signedUserRSVPBlob != -1)
    swift_once();
  return &static HTTPBodyKey.signedUserRSVPBlob;
}

uint64_t static HTTPBodyKey.signedUserRSVPBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.signedUserRSVPBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for adminSeedBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("adminSeedBlob", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.adminSeedBlob = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.adminSeedBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for adminSeedBlob != -1)
    swift_once();
  return &static HTTPBodyKey.adminSeedBlob;
}

uint64_t static HTTPBodyKey.adminSeedBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.adminSeedBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for memberSeedBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memberSeedBlob", 0xEuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.memberSeedBlob = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.memberSeedBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for memberSeedBlob != -1)
    swift_once();
  return &static HTTPBodyKey.memberSeedBlob;
}

uint64_t static HTTPBodyKey.memberSeedBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.memberSeedBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for isDigestOnly()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isDigestOnly", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.isDigestOnly = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.isDigestOnly.unsafeMutableAddressor()
{
  if (one-time initialization token for isDigestOnly != -1)
    swift_once();
  return &static HTTPBodyKey.isDigestOnly;
}

uint64_t static HTTPBodyKey.isDigestOnly.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.isDigestOnly.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for signature()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.signature = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.signature.unsafeMutableAddressor()
{
  if (one-time initialization token for signature != -1)
    swift_once();
  return &static HTTPBodyKey.signature;
}

uint64_t static HTTPBodyKey.signature.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.signature.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for seedType()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("seedType", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.seedType = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("seedType", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.seedType = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.seedType.unsafeMutableAddressor()
{
  if (one-time initialization token for seedType != -1)
    swift_once();
  return &static HTTPBodyKey.seedType;
}

uint64_t static HTTPBodyKey.seedType.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.seedType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for fromSeedVersion()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fromSeedVersion", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.fromSeedVersion = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fromSeedVersion", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.fromSeedVersion = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.fromSeedVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for fromSeedVersion != -1)
    swift_once();
  return &static HTTPBodyKey.fromSeedVersion;
}

uint64_t static HTTPBodyKey.fromSeedVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.fromSeedVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for toSeedVersion()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("toSeedVersion", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.toSeedVersion = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("toSeedVersion", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.toSeedVersion = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.toSeedVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for toSeedVersion != -1)
    swift_once();
  return &static HTTPBodyKey.toSeedVersion;
}

uint64_t static HTTPBodyKey.toSeedVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.toSeedVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for nonce()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.nonce = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.nonce = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.nonce.unsafeMutableAddressor()
{
  if (one-time initialization token for nonce != -1)
    swift_once();
  return &static HTTPBodyKey.nonce;
}

uint64_t static HTTPBodyKey.nonce.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.nonce.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for protobufVersion()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("protobufVersion", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.protobufVersion = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.protobufVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for protobufVersion != -1)
    swift_once();
  return &static HTTPBodyKey.protobufVersion;
}

uint64_t static HTTPBodyKey.protobufVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.protobufVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for verificationKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationKey", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.verificationKey = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.verificationKey.unsafeMutableAddressor()
{
  if (one-time initialization token for verificationKey != -1)
    swift_once();
  return &static HTTPBodyKey.verificationKey;
}

uint64_t static HTTPBodyKey.verificationKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.verificationKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for lastKnownRSVPQueueSeqNumber()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lastKnownRsvpQueueSeqNumber", 0x1BuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.lastKnownRSVPQueueSeqNumber = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.lastKnownRSVPQueueSeqNumber.unsafeMutableAddressor()
{
  if (one-time initialization token for lastKnownRSVPQueueSeqNumber != -1)
    swift_once();
  return &static HTTPBodyKey.lastKnownRSVPQueueSeqNumber;
}

uint64_t static HTTPBodyKey.lastKnownRSVPQueueSeqNumber.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.lastKnownRSVPQueueSeqNumber.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyProtocolVersion()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyProtocolVersion", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyKey.keyProtocolVersion = (__int128)v1;
  return result;
}

__int128 *HTTPBodyKey.keyProtocolVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for keyProtocolVersion != -1)
    swift_once();
  return &static HTTPBodyKey.keyProtocolVersion;
}

uint64_t static HTTPBodyKey.keyProtocolVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyKey.keyProtocolVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for payloadHash()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-I-Payload-Hash", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.payloadHash = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.payloadHash.unsafeMutableAddressor()
{
  if (one-time initialization token for payloadHash != -1)
    swift_once();
  return &static HTTPHeaderKey.payloadHash;
}

uint64_t static HTTPHeaderKey.payloadHash.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.payloadHash.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for baaSignedClientInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-MMe-Client-Info-S", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.baaSignedClientInfo = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.baaSignedClientInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for baaSignedClientInfo != -1)
    swift_once();
  return &static HTTPHeaderKey.baaSignedClientInfo;
}

uint64_t static HTTPHeaderKey.baaSignedClientInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.baaSignedClientInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for clientInfo()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-MMe-Client-Info", 0x11uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.clientInfo = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.clientInfo.unsafeMutableAddressor()
{
  if (one-time initialization token for clientInfo != -1)
    swift_once();
  return &static HTTPHeaderKey.clientInfo;
}

uint64_t static HTTPHeaderKey.clientInfo.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.clientInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for baaSignedDeviceID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Mme-Device-Id-S", 0x11uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.baaSignedDeviceID = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.baaSignedDeviceID.unsafeMutableAddressor()
{
  if (one-time initialization token for baaSignedDeviceID != -1)
    swift_once();
  return &static HTTPHeaderKey.baaSignedDeviceID;
}

uint64_t static HTTPHeaderKey.baaSignedDeviceID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.baaSignedDeviceID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for deviceID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Mme-Device-Id", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.deviceID = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.deviceID.unsafeMutableAddressor()
{
  if (one-time initialization token for deviceID != -1)
    swift_once();
  return &static HTTPHeaderKey.deviceID;
}

uint64_t static HTTPHeaderKey.deviceID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.deviceID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupIDHash()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-I-GroupId-Hash", 0x16uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.groupIDHash = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.groupIDHash.unsafeMutableAddressor()
{
  if (one-time initialization token for groupIDHash != -1)
    swift_once();
  return &static HTTPHeaderKey.groupIDHash;
}

uint64_t static HTTPHeaderKey.groupIDHash.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.groupIDHash.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for baaCertificate()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-Baa", 0xBuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.baaCertificate = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.baaCertificate.unsafeMutableAddressor()
{
  if (one-time initialization token for baaCertificate != -1)
    swift_once();
  return &static HTTPHeaderKey.baaCertificate;
}

uint64_t static HTTPHeaderKey.baaCertificate.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.baaCertificate.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for baaSignedPayloadHashAndTime()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-I-Baa-S", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.baaSignedPayloadHashAndTime = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.baaSignedPayloadHashAndTime.unsafeMutableAddressor()
{
  if (one-time initialization token for baaSignedPayloadHashAndTime != -1)
    swift_once();
  return &static HTTPHeaderKey.baaSignedPayloadHashAndTime;
}

uint64_t static HTTPHeaderKey.baaSignedPayloadHashAndTime.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.baaSignedPayloadHashAndTime.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for clientTime()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-I-Client-Time", 0x15uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.clientTime = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.clientTime.unsafeMutableAddressor()
{
  if (one-time initialization token for clientTime != -1)
    swift_once();
  return &static HTTPHeaderKey.clientTime;
}

uint64_t static HTTPHeaderKey.clientTime.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.clientTime.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for grandslamToken()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-GS-Token", 0x10uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.grandslamToken = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.grandslamToken.unsafeMutableAddressor()
{
  if (one-time initialization token for grandslamToken != -1)
    swift_once();
  return &static HTTPHeaderKey.grandslamToken;
}

uint64_t static HTTPHeaderKey.grandslamToken.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.grandslamToken.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for bundleID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("X-Apple-I-Group-BundleId", 0x18uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.bundleID = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.bundleID.unsafeMutableAddressor()
{
  if (one-time initialization token for bundleID != -1)
    swift_once();
  return &static HTTPHeaderKey.bundleID;
}

uint64_t static HTTPHeaderKey.bundleID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.bundleID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for contentType()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Content-Type", 0xCuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPHeaderKey.contentType = (__int128)v1;
  return result;
}

__int128 *HTTPHeaderKey.contentType.unsafeMutableAddressor()
{
  if (one-time initialization token for contentType != -1)
    swift_once();
  return &static HTTPHeaderKey.contentType;
}

uint64_t static HTTPHeaderKey.contentType.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPHeaderKey.contentType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyNameSpaceValue()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPBodyValue.keyNameSpaceValue = (__int128)v1;
  return result;
}

__int128 *HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor()
{
  if (one-time initialization token for keyNameSpaceValue != -1)
    swift_once();
  return &static HTTPBodyValue.keyNameSpaceValue;
}

uint64_t static HTTPBodyValue.keyNameSpaceValue.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.errorCode.unsafeMutableAddressor()
{
  if (one-time initialization token for errorCode != -1)
    swift_once();
  return &static HTTPResponseKey.errorCode;
}

uint64_t static HTTPResponseKey.errorCode.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.errorCode.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for errorMessage()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("em", 2uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.errorMessage = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.errorMessage.unsafeMutableAddressor()
{
  if (one-time initialization token for errorMessage != -1)
    swift_once();
  return &static HTTPResponseKey.errorMessage;
}

uint64_t static HTTPResponseKey.errorMessage.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.errorMessage.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.nonce.unsafeMutableAddressor()
{
  if (one-time initialization token for nonce != -1)
    swift_once();
  return &static HTTPResponseKey.nonce;
}

uint64_t static HTTPResponseKey.nonce.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.nonce.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupDigest()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDigest", 0xBuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.groupDigest = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.groupDigest.unsafeMutableAddressor()
{
  if (one-time initialization token for groupDigest != -1)
    swift_once();
  return &static HTTPResponseKey.groupDigest;
}

uint64_t static HTTPResponseKey.groupDigest.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.groupDigest.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for rsvpQueueBlob()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueBlob", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.rsvpQueueBlob = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.rsvpQueueBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for rsvpQueueBlob != -1)
    swift_once();
  return &static HTTPResponseKey.rsvpQueueBlob;
}

uint64_t static HTTPResponseKey.rsvpQueueBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.rsvpQueueBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for rsvpQueueData()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueData", 0xDuLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.rsvpQueueData = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.rsvpQueueData.unsafeMutableAddressor()
{
  if (one-time initialization token for rsvpQueueData != -1)
    swift_once();
  return &static HTTPResponseKey.rsvpQueueData;
}

uint64_t static HTTPResponseKey.rsvpQueueData.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.rsvpQueueData.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for maxRSVPQueueSeqNumber()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("maxRsvpQueueSeqNumber", 0x15uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.maxRSVPQueueSeqNumber = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.maxRSVPQueueSeqNumber.unsafeMutableAddressor()
{
  if (one-time initialization token for maxRSVPQueueSeqNumber != -1)
    swift_once();
  return &static HTTPResponseKey.maxRSVPQueueSeqNumber;
}

uint64_t static HTTPResponseKey.maxRSVPQueueSeqNumber.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.maxRSVPQueueSeqNumber.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupKitBlobSeed()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupKitBlobSeed", 0x10uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.groupKitBlobSeed = (__int128)v1;
  return result;
}

__int128 *HTTPResponseKey.groupKitBlobSeed.unsafeMutableAddressor()
{
  if (one-time initialization token for groupKitBlobSeed != -1)
    swift_once();
  return &static HTTPResponseKey.groupKitBlobSeed;
}

uint64_t static HTTPResponseKey.groupKitBlobSeed.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.groupKitBlobSeed.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.groupID.unsafeMutableAddressor()
{
  if (one-time initialization token for groupID != -1)
    swift_once();
  return &static HTTPResponseKey.groupID;
}

uint64_t static HTTPResponseKey.groupID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.groupID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.groupBlob.unsafeMutableAddressor()
{
  if (one-time initialization token for groupBlob != -1)
    swift_once();
  return &static HTTPResponseKey.groupBlob;
}

uint64_t static HTTPResponseKey.groupBlob.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.groupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.seedType.unsafeMutableAddressor()
{
  if (one-time initialization token for seedType != -1)
    swift_once();
  return &static HTTPResponseKey.seedType;
}

uint64_t static HTTPResponseKey.seedType.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.seedType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.fromSeedVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for fromSeedVersion != -1)
    swift_once();
  return &static HTTPResponseKey.fromSeedVersion;
}

uint64_t static HTTPResponseKey.fromSeedVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.fromSeedVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

__int128 *HTTPResponseKey.toSeedVersion.unsafeMutableAddressor()
{
  if (one-time initialization token for toSeedVersion != -1)
    swift_once();
  return &static HTTPResponseKey.toSeedVersion;
}

uint64_t static HTTPResponseKey.toSeedVersion.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)HTTPResponseKey.toSeedVersion.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t base witness table accessor for Equatable in URLBagConfigurationKey()
{
  return lazy protocol witness table accessor for type URLBagConfigurationKey and conformance URLBagConfigurationKey();
}

unint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in URLBagConfigurationKey()
{
  return lazy protocol witness table accessor for type [URLBagConfigurationKey] and conformance [A]();
}

unint64_t lazy protocol witness table accessor for type [URLBagConfigurationKey] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [URLBagConfigurationKey] and conformance [A];
  if (!lazy protocol witness table cache variable for type [URLBagConfigurationKey] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [URLBagConfigurationKey]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [URLBagConfigurationKey] and conformance [A]);
    return v1;
  }
  return v3;
}

ValueMetadata *type metadata accessor for URLBagKey()
{
  return &type metadata for URLBagKey;
}

uint64_t getEnumTagSinglePayload for URLBagConfigurationKey(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for URLBagConfigurationKey(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for URLBagConfigurationKey()
{
  return 0;
}

ValueMetadata *type metadata accessor for URLBagConfigurationKey()
{
  return &type metadata for URLBagConfigurationKey;
}

ValueMetadata *type metadata accessor for HTTPBodyKey()
{
  return &type metadata for HTTPBodyKey;
}

ValueMetadata *type metadata accessor for HTTPHeaderKey()
{
  return &type metadata for HTTPHeaderKey;
}

ValueMetadata *type metadata accessor for HTTPBodyValue()
{
  return &type metadata for HTTPBodyValue;
}

ValueMetadata *type metadata accessor for HTTPResponseKey()
{
  return &type metadata for HTTPResponseKey;
}

uint64_t ProfileService.accountStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AccountStore(v1, a1);
}

uint64_t ProfileService.profilePictureFetcher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ProfilePictureFetching(v1 + 40, a1);
}

uint64_t ProfileService.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1 + 80, a1);
}

uint64_t ProfileService.fetchProfileInformation(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[37] = v1;
  v2[36] = a1;
  v2[32] = v2;
  v2[33] = 0;
  v2[34] = 0;
  v2[35] = 0;
  memset(v2 + 27, 0, 0x28uLL);
  v3 = type metadata accessor for InternalErrorCode();
  v2[38] = v3;
  v2[39] = *(_QWORD *)(v3 - 8);
  v2[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKProfileInformationResponse.ProfilePicture?);
  v2[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v2[42] = swift_task_alloc();
  v4 = type metadata accessor for GPKProfileInformationRequest.Scope();
  v2[43] = v4;
  v2[44] = *(_QWORD *)(v4 - 8);
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKProfileInformationRequest.Scope?);
  v2[47] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[48] = v5;
  v2[49] = *(_QWORD *)(v5 - 8);
  v2[50] = swift_task_alloc();
  v2[33] = a1;
  v2[34] = v1;
  return swift_task_switch();
}

uint64_t ProfileService.fetchProfileInformation(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;

  v48 = v0[50];
  v47 = v0[49];
  v49 = v0[48];
  v51 = v0[37];
  v0[32] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received profile information request", 0x24uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v48);
  gpklog(_:type:fileID:line:subsystem:)();
  v50 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  v0[51] = v50;
  v50(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(v51 + 80, (uint64_t)(v0 + 7));
  v52 = v0[10];
  v53 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v52);
  v55 = 1;
  v54 = (*(uint64_t (**)(char *, uint64_t))(v53 + 32))(&v55, v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  if ((v54 & 1) == 0)
  {
    v4 = v46[50];
    v5 = v46[48];
    v8 = v46[40];
    v6 = v46[39];
    v7 = v46[38];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client doesn't have entitlement to fetch user profile", 0x35uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
    gpklog(_:type:fileID:line:subsystem:)();
    v50(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE3DE70], v7);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    goto LABEL_16;
  }
  type metadata accessor for GPKProfileInformationResponse();
  v44 = GPKProfileInformationResponse.__allocating_init()();
  v46[52] = v44;
  v46[35] = v44;
  GPKProfileInformationRequest.scopes.getter();
  lazy protocol witness table accessor for type GPKProfileInformationRequest.Scope and conformance GPKProfileInformationRequest.Scope();
  v45 = Set.isEmpty.getter();
  swift_bridgeObjectRelease();
  if ((v45 & 1) != 0)
  {
    v41 = v46[50];
    v42 = v46[48];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Empty scopes in request", 0x17uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v41);
    gpklog(_:type:fileID:line:subsystem:)();
    v50(v41, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = v44;
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v46[32] + 8))(v43);
  }
  outlined init with copy of AccountStore(v46[37], (uint64_t)(v46 + 17));
  v40 = v46[20];
  v39 = v46[21];
  __swift_project_boxed_opaque_existential_1(v46 + 17, v40);
  (*(void (**)(uint64_t))(v39 + 8))(v40);
  if (!v46[25])
  {
    v9 = v46[50];
    v10 = v46[48];
    v13 = v46[40];
    v11 = v46[39];
    v12 = v46[38];
    outlined destroy of Account?((uint64_t)(v46 + 22));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v46 + 17));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Primary Apple Account not found", 0x1FuLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v50(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BE3DCD8], v12);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v46[32] + 8))();
  }
  outlined init with take of Account(v46 + 22, v46 + 12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v46 + 17));
  GPKProfileInformationRequest.scopes.getter();
  Set.makeIterator()();
  memcpy(v46 + 27, v46 + 2, 0x28uLL);
  while (1)
  {
    v37 = v46[47];
    v36 = v46[44];
    v38 = v46[43];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKProfileInformationRequest.Scope>.Iterator);
    Set.Iterator.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v38) == 1)
    {
      v16 = (void (*)(uint64_t, uint64_t))v46[51];
      v14 = v46[50];
      v15 = v46[48];
      outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Returning profile information", 0x21uLL, 0);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
      gpklog(_:type:fileID:line:subsystem:)();
      v16(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v46 + 12));
      v43 = v46[52];
      goto LABEL_15;
    }
    v31 = v46[46];
    v34 = v46[45];
    v32 = v46[44];
    v33 = v46[43];
    (*(void (**)(void))(v32 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v34, v31, v33);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 88))(v34, v33);
    if (v35 != *MEMORY[0x24BE3E1B0])
      break;
    v30 = v46[42];
    v29 = v46[15];
    v28 = v46[16];
    __swift_project_boxed_opaque_existential_1(v46 + 12, v29);
    (*(void (**)(uint64_t))(v28 + 40))(v29);
    v1 = type metadata accessor for PersonNameComponents();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v30, 0, 1);
    dispatch thunk of GPKProfileInformationResponse.setName(_:)();
    outlined destroy of PersonNameComponents?(v30);
    (*(void (**)(_QWORD, _QWORD))(v46[44] + 8))(v46[46], v46[43]);
  }
  if (v35 != *MEMORY[0x24BE3E1B8])
  {
    v19 = (void (*)(uint64_t, uint64_t))v46[51];
    v17 = v46[50];
    v18 = v46[48];
    v25 = v46[46];
    v24 = v46[45];
    v23 = v46[44];
    v26 = v46[43];
    v22 = v46[40];
    v20 = v46[39];
    v21 = v46[38];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown scopes in request", 0x19uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
    gpklog(_:type:fileID:line:subsystem:)();
    v19(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BE3DE20], v21);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v27(v24, v26);
    v27(v25, v26);
    outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v46 + 12));
    swift_release();
    goto LABEL_16;
  }
  v2 = (_QWORD *)swift_task_alloc();
  v46[53] = v2;
  *v2 = v46[32];
  v2[1] = ProfileService.fetchProfileInformation(with:);
  return ProfileService.fetchPrimaryAppleAccountPicture(_:)(v46[41], (uint64_t)(v46 + 12));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 432) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;

  v31 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 256) = v0;
  dispatch thunk of GPKProfileInformationResponse.setProfilePicture(_:)();
  outlined destroy of GPKProfileInformationResponse.ProfilePicture?(v31);
  while (1)
  {
    (*(void (**)(_QWORD, _QWORD))(v30[44] + 8))(v30[46], v30[43]);
    v9 = v30[47];
    v8 = v30[44];
    v10 = v30[43];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKProfileInformationRequest.Scope>.Iterator);
    Set.Iterator.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v10) == 1)
    {
      v6 = (void (*)(uint64_t, uint64_t))v30[51];
      v4 = v30[50];
      v5 = v30[48];
      outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Returning profile information", 0x21uLL, 0);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
      gpklog(_:type:fileID:line:subsystem:)();
      v6(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 12));
      v7 = v30[52];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v30[32] + 8))(v7);
    }
    v25 = v30[46];
    v28 = v30[45];
    v26 = v30[44];
    v27 = v30[43];
    (*(void (**)(void))(v26 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v28, v25, v27);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v28, v27);
    if (v29 != *MEMORY[0x24BE3E1B0])
      break;
    v24 = v30[42];
    v23 = v30[15];
    v22 = v30[16];
    __swift_project_boxed_opaque_existential_1(v30 + 12, v23);
    (*(void (**)(uint64_t))(v22 + 40))(v23);
    v1 = type metadata accessor for PersonNameComponents();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v24, 0, 1);
    dispatch thunk of GPKProfileInformationResponse.setName(_:)();
    outlined destroy of PersonNameComponents?(v24);
  }
  if (v29 == *MEMORY[0x24BE3E1B8])
  {
    v2 = (_QWORD *)swift_task_alloc();
    v30[53] = v2;
    *v2 = v30[32];
    v2[1] = ProfileService.fetchProfileInformation(with:);
    return ProfileService.fetchPrimaryAppleAccountPicture(_:)(v30[41], (uint64_t)(v30 + 12));
  }
  else
  {
    v13 = (void (*)(uint64_t, uint64_t))v30[51];
    v11 = v30[50];
    v12 = v30[48];
    v19 = v30[46];
    v18 = v30[45];
    v17 = v30[44];
    v20 = v30[43];
    v16 = v30[40];
    v14 = v30[39];
    v15 = v30[38];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown scopes in request", 0x19uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    v13(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BE3DE20], v15);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v18, v20);
    v21(v19, v20);
    outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 12));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v30[32] + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[46];
  v2 = v0[44];
  v3 = v0[43];
  v0[32] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[32] + 8))();
}

unint64_t lazy protocol witness table accessor for type GPKProfileInformationRequest.Scope and conformance GPKProfileInformationRequest.Scope()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKProfileInformationRequest.Scope and conformance GPKProfileInformationRequest.Scope;
  if (!lazy protocol witness table cache variable for type GPKProfileInformationRequest.Scope and conformance GPKProfileInformationRequest.Scope)
  {
    v0 = type metadata accessor for GPKProfileInformationRequest.Scope();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E1D0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKProfileInformationRequest.Scope and conformance GPKProfileInformationRequest.Scope);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<GPKProfileInformationRequest.Scope>.Iterator()
{
  outlined consume of Set<GPKProfileInformationRequest.Scope>.Iterator._Variant();
}

uint64_t outlined consume of Set<GPKProfileInformationRequest.Scope>.Iterator._Variant()
{
  return swift_release();
}

uint64_t ProfileService.fetchPrimaryAppleAccountPicture(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[26] = v2;
  v3[25] = a2;
  v3[24] = a1;
  v3[21] = v3;
  v3[22] = 0;
  v3[23] = 0;
  memset(v3 + 8, 0, 0x30uLL);
  v3[19] = 0;
  v3[20] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[27] = v4;
  v3[28] = *(_QWORD *)(v4 - 8);
  v3[29] = swift_task_alloc();
  v3[22] = a2;
  v3[23] = v2;
  return swift_task_switch();
}

uint64_t ProfileService.fetchPrimaryAppleAccountPicture(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, _QWORD, uint64_t, uint64_t);

  v1 = v0[26];
  v0[21] = v0;
  outlined init with copy of ProfilePictureFetching(v1 + 40, (uint64_t)(v0 + 14));
  v5 = v0[17];
  v6 = v0[18];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v5);
  v7 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8) + **(int **)(v6 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  v4[30] = v2;
  *v2 = v4[21];
  v2[1] = ProfileService.fetchPrimaryAppleAccountPicture(_:);
  return v7(v4 + 2, v4[25], v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[21] = *v1;
  v2[31] = v0;
  v2[32] = v2[2];
  v2[33] = v2[3];
  v2[34] = v2[4];
  v2[35] = v2[5];
  v2[36] = v2[6];
  v2[37] = v2[7];
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;

  v1 = v0[37];
  v2 = v0[36];
  v3 = v0[35];
  v4 = v0[34];
  v19 = v0[33];
  v18 = v0[32];
  v0[21] = v0;
  v0[8] = v18;
  v0[9] = v19;
  v0[10] = v4;
  v0[11] = v3;
  v0[12] = v2;
  v0[13] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
  outlined copy of Data?(v18, v19);
  if ((v19 & 0xF000000000000000) == 0xF000000000000000)
  {
    v13 = v17[33];
    v12 = v17[32];
    v9 = v17[29];
    v8 = v17[28];
    v10 = v17[27];
    v11 = v17[24];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Photo not available for primary Apple Account", 0x2DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ProfileService.swift", 0x21uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for GPKProfileInformationResponse.ProfilePicture();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v11, 1);
    outlined consume of Data?(v12, v13);
  }
  else
  {
    v16 = v17[33];
    v15 = v17[32];
    v14 = v17[24];
    v17[19] = v15;
    v17[20] = v16;
    GPKProfileInformationResponse.ProfilePicture.init(imageData:cropRect:)();
    v5 = type metadata accessor for GPKProfileInformationResponse.ProfilePicture();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v14, 0, 1);
    outlined consume of Data?(v15, v16);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v17[21] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 168) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 168) + 8))();
}

uint64_t outlined destroy of GPKProfileInformationResponse.ProfilePicture?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKProfileInformationResponse.ProfilePicture();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of PersonNameComponents?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for PersonNameComponents();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void *ProfileService.init(accountStore:profilePictureFetcher:client:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of AccountStore(a1, (void *)a4);
  outlined init with take of ProfilePictureFetching(a2, (void *)(a4 + 40));
  return outlined init with take of Client(a3, (void *)(a4 + 80));
}

uint64_t initializeBufferWithCopyOfBuffer for ProfileService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ProfileService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

_QWORD *initializeWithCopy for ProfileService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t assignWithCopy for ProfileService(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 80, a2 + 10);
  return a1;
}

uint64_t assignWithTake for ProfileService(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileService(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileService()
{
  return &type metadata for ProfileService;
}

void static UserKeyProtocolVersion.current.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

GroupKitCore::UserKeyProtocolVersion_optional __swiftcall UserKeyProtocolVersion.init(rawValue:)(Swift::UInt32 rawValue)
{
  char *v1;
  char v3;

  switch(rawValue)
  {
    case 0u:
      v3 = 0;
LABEL_10:
      *v1 = v3;
      return (GroupKitCore::UserKeyProtocolVersion_optional)rawValue;
    case 1u:
      v3 = 1;
      goto LABEL_10;
    case 2u:
      v3 = 2;
      goto LABEL_10;
    case 3u:
      v3 = 3;
      goto LABEL_10;
  }
  *v1 = 4;
  return (GroupKitCore::UserKeyProtocolVersion_optional)rawValue;
}

void UserKeyProtocolVersion.rawValue.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D45757C()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserKeyProtocolVersion()
{
  lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion;
  if (!lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyProtocolVersion, &type metadata for UserKeyProtocolVersion);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion;
  if (!lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyProtocolVersion, &type metadata for UserKeyProtocolVersion);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UserKeyProtocolVersion()
{
  lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UserKeyProtocolVersion()
{
  lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UserKeyProtocolVersion()
{
  lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::UserKeyProtocolVersion_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UserKeyProtocolVersion(Swift::UInt32 *a1)
{
  return UserKeyProtocolVersion.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UserKeyProtocolVersion(_DWORD *a1@<X8>)
{
  int v1;

  UserKeyProtocolVersion.rawValue.getter();
  *a1 = v1;
}

uint64_t KeyDistributionService.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 112, a1);
}

uint64_t KeyDistributionService.accountManager.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 152);
  swift_retain();
  return v2;
}

uint64_t KeyDistributionService.cryptographyService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 160, a1);
}

uint64_t KeyDistributionService.securityService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecurityServiceProviding(v1 + 200, a1);
}

uint64_t KeyDistributionService.networkService.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 240);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t KeyDistributionService.userHandleFormattingUtils.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserHandleFormattingUtils(v1 + 256, a1);
}

uint64_t KeyDistributionService.currentKeyProtocolVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 500);
}

uint64_t variable initialization expression of KeyDistributionService.inProgressRegistrationResult()
{
  return 0;
}

uint64_t KeyDistributionService.inProgressRegistrationResult.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 512);
  swift_retain();
  swift_endAccess();
  return v2;
}

uint64_t KeyDistributionService.inProgressRegistrationResult.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 512) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*KeyDistributionService.inProgressRegistrationResult.modify())()
{
  swift_beginAccess();
  return KeyDistributionService.inProgressRegistrationResult.modify;
}

uint64_t KeyDistributionService.inProgressRegistrationResult.modify()
{
  return swift_endAccess();
}

uint64_t KeyDistributionService.__allocating_init(userStore:accountManager:cryptographyService:securityService:networkService:userHandleFormattingUtils:metrics:currentKeyProtocolVersion:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  swift_allocObject();
  return KeyDistributionService.init(userStore:accountManager:cryptographyService:securityService:networkService:userHandleFormattingUtils:metrics:currentKeyProtocolVersion:maxRetries:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t KeyDistributionService.init(userStore:accountManager:cryptographyService:securityService:networkService:userHandleFormattingUtils:metrics:currentKeyProtocolVersion:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v20;
  _BYTE v21[208];
  _BYTE v22[40];
  _BYTE v23[40];
  _BYTE v24[40];
  _BYTE v25[40];
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v35 = a2;
  v34 = a3;
  v33 = a4;
  v31 = a5;
  v32 = a6;
  v30 = a7;
  v29 = a8;
  v28 = a9;
  v27 = a10;
  v26 = v10;
  swift_defaultActor_initialize();
  *(_QWORD *)(v10 + 512) = 0;
  outlined init with copy of UserStore(a1, (uint64_t)v25);
  outlined init with take of UserStore(v25, (void *)(v10 + 112));
  swift_retain();
  *(_QWORD *)(v10 + 152) = a2;
  outlined init with copy of CryptographyServiceProviding(a3, (uint64_t)v24);
  outlined init with take of CryptographyServiceProviding(v24, (void *)(v10 + 160));
  outlined init with copy of SecurityServiceProviding(a4, (uint64_t)v23);
  outlined init with take of SecurityServiceProviding(v23, (void *)(v10 + 200));
  swift_unknownObjectRetain();
  *(_QWORD *)(v10 + 240) = a5;
  *(_QWORD *)(v10 + 248) = a6;
  outlined init with copy of UserHandleFormattingUtils(a7, (uint64_t)v22);
  outlined init with take of UserHandleFormattingUtils(v22, (void *)(v10 + 256));
  outlined init with copy of Metrics(a8, (uint64_t)v21);
  memcpy((void *)(v10 + 296), v21, 0xCAuLL);
  *(_DWORD *)(v10 + 500) = a9;
  *(_QWORD *)(v10 + 504) = a10;
  outlined destroy of Metrics(a8);
  __swift_destroy_boxed_opaque_existential_1(a7);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v20;
}

GroupKitCore::KeyDistributionService::RegistrationResult_optional __swiftcall KeyDistributionService.RegistrationResult.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  GroupKitCore::KeyDistributionService::RegistrationResult_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "meUserAlreadyInLocalDB";
  *(_QWORD *)(v2 + 8) = 22;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "keyAvailableInKDS";
  *(_QWORD *)(v2 + 32) = 17;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "createdNewKeys";
  *(_QWORD *)(v2 + 56) = 14;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = GroupKitCore_KeyDistributionService_RegistrationResult_meUserAlreadyInLocalDB;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = GroupKitCore_KeyDistributionService_RegistrationResult_keyAvailableInKDS;
      goto LABEL_8;
    case 2:
      v7.value = GroupKitCore_KeyDistributionService_RegistrationResult_createdNewKeys;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (GroupKitCore::KeyDistributionService::RegistrationResult_optional)3;
}

uint64_t KeyDistributionService.RegistrationResult.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("meUserAlreadyInLocalDB", 0x16uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyAvailableInKDS", 0x11uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("createdNewKeys", 0xEuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyDistributionService.RegistrationResult()
{
  lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyDistributionService.RegistrationResult()
{
  lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyDistributionService.RegistrationResult()
{
  lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance KeyDistributionService.RegistrationResult()
{
  lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::KeyDistributionService::RegistrationResult_optional protocol witness for RawRepresentable.init(rawValue:) in conformance KeyDistributionService.RegistrationResult@<W0>(Swift::String *a1@<X0>, GroupKitCore::KeyDistributionService::RegistrationResult_optional *a2@<X8>)
{
  GroupKitCore::KeyDistributionService::RegistrationResult_optional result;

  result.value = KeyDistributionService.RegistrationResult.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance KeyDistributionService.RegistrationResult@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = KeyDistributionService.RegistrationResult.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;

  *(_QWORD *)(v4 + 128) = v3;
  *(_BYTE *)(v4 + 221) = a3 & 1;
  *(_BYTE *)(v4 + 220) = a2 & 1;
  *(_BYTE *)(v4 + 219) = a1 & 1;
  *(_QWORD *)(v4 + 96) = v4;
  *(_BYTE *)(v4 + 216) = 0;
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_BYTE *)(v4 + 240) = 0;
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v4 + 136) = v5;
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 152) = swift_task_alloc();
  *(_BYTE *)(v4 + 216) = a1 & 1;
  *(_BYTE *)(v4 + 224) = a2 & 1;
  *(_BYTE *)(v4 + 232) = a3 & 1;
  *(_QWORD *)(v4 + 104) = v9;
  return swift_task_switch();
}

uint64_t KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v14 = v0[19];
  v13 = v0[18];
  v15 = v0[17];
  v17 = v0[16];
  v0[12] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("beginning outer key registration flow", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[20] = v16;
  v16(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v18 = *(_QWORD *)(v17 + 512);
  v0[21] = v18;
  swift_retain();
  swift_endAccess();
  if (v18)
  {
    v10 = *(_QWORD *)(v12 + 152);
    v11 = *(_QWORD *)(v12 + 136);
    *(_QWORD *)(v12 + 120) = v18;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key registration already in progress, waiting for that result", 0x3DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    v16(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v12 + 176) = v1;
    *v1 = *(_QWORD *)(v12 + 96);
    v1[1] = KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  }
  else
  {
    v9 = *(_QWORD *)(v12 + 128);
    v8 = *(_BYTE *)(v12 + 221);
    v7 = *(_BYTE *)(v12 + 220);
    v6 = *(_BYTE *)(v12 + 219);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Promise<KeyDistributionService.RegistrationResult>);
    swift_retain();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v9;
    *(_BYTE *)(v2 + 24) = v6 & 1;
    *(_BYTE *)(v2 + 25) = v7 & 1;
    *(_BYTE *)(v2 + 26) = v8 & 1;
    v3 = Promise.__allocating_init(_:)();
    *(_QWORD *)(v12 + 192) = v3;
    *(_QWORD *)(v12 + 112) = v3;
    swift_retain();
    swift_beginAccess();
    *(_QWORD *)(v9 + 512) = v3;
    swift_release();
    swift_endAccess();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v12 + 200) = v4;
    *v4 = *(_QWORD *)(v12 + 96);
    v4[1] = KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  }
  return Promise.get()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 96) = v0;
  v6 = *(_BYTE *)(v0 + 218);
  *(_BYTE *)(v0 + 240) = v6;
  *(_QWORD *)(v0 + 64) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 72) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("done waiting for in-progress registration. got result ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = KeyDistributionService.RegistrationResult.rawValue.getter(v6);
  *(_QWORD *)(v0 + 88) = v3;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  $defer #1 () in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 96) = v0;
  swift_release();
  $defer #1 () in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

uint64_t $defer #1 () in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 512) = 0;
  swift_release();
  return swift_endAccess();
}

uint64_t closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 220) = a5 & 1;
  *(_BYTE *)(v5 + 219) = a4 & 1;
  *(_BYTE *)(v5 + 218) = a3 & 1;
  *(_QWORD *)(v5 + 248) = a2;
  *(_QWORD *)(v5 + 240) = a1;
  *(_QWORD *)(v5 + 224) = v5;
  *(_QWORD *)(v5 + 232) = 0;
  *(_BYTE *)(v5 + 280) = 0;
  *(_BYTE *)(v5 + 288) = 0;
  *(_BYTE *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 232) = a2;
  *(_BYTE *)(v5 + 280) = a3 & 1;
  *(_BYTE *)(v5 + 288) = a4 & 1;
  *(_BYTE *)(v5 + 296) = a5 & 1;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  _QWORD *v1;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *(_BYTE *)(v0 + 220);
  v5 = *(_BYTE *)(v0 + 219);
  v3 = *(_BYTE *)(v0 + 218);
  v4 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 224) = v0;
  outlined init with copy of Metrics(v4 + 296, v0 + 16);
  swift_retain();
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v8;
  *(_BYTE *)(v8 + 16) = v3 & 1;
  *(_QWORD *)(v8 + 24) = v4;
  *(_BYTE *)(v8 + 32) = v5 & 1;
  *(_BYTE *)(v8 + 33) = v6 & 1;
  v1 = (_QWORD *)swift_task_alloc();
  v7[33] = v1;
  *v1 = v7[28];
  v1[1] = closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return Metrics.callAsFunction<A>(_:worker:)(v7[30], 4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:), v8, (uint64_t)&type metadata for KeyDistributionService.RegistrationResult, (uint64_t)&protocol witness table for KeyDistributionService.RegistrationResult);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 224) = *v1;
  v2 += 224;
  v4 = v2 - 208;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_release();
    outlined destroy of Metrics(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 224) = v0;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 224) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 224) = v0;
  swift_task_dealloc();
  swift_release();
  outlined destroy of Metrics(v0 + 16);
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 224) + 8))();
}

uint64_t sub_23D458DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 25);
  v8 = *(_BYTE *)(v1 + 26);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1, v5, v6 & 1, v7 & 1, v8 & 1);
}

uint64_t partial apply for closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 165) = a5 & 1;
  *(_BYTE *)(v5 + 164) = a4 & 1;
  *(_QWORD *)(v5 + 88) = a3;
  *(_BYTE *)(v5 + 163) = a2 & 1;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 48) = v5;
  *(_BYTE *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 168) = 0;
  *(_BYTE *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  type metadata accessor for Transaction();
  *(_QWORD *)(v5 + 96) = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = swift_task_alloc();
  *(_BYTE *)(v5 + 160) = a2 & 1;
  *(_QWORD *)(v5 + 56) = a3;
  *(_BYTE *)(v5 + 168) = a4 & 1;
  *(_BYTE *)(v5 + 176) = a5 & 1;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  double v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[5];

  v12 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 96);
  v22 = *(_BYTE *)(v0 + 165);
  v21 = *(_BYTE *)(v0 + 164);
  v23 = *(_QWORD *)(v0 + 88);
  v20 = *(_BYTE *)(v0 + 163);
  *(_QWORD *)(v0 + 48) = v0;
  *(_QWORD *)(v0 + 16) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("calling into inner registration, should force key roll: ", 0x38uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 161) = v20 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.info.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v23 + 504);
  *(_QWORD *)(v0 + 64) = v14;
  v16 = type metadata accessor for ExponentialRetryScheduler();
  v4 = default argument 1 of ExponentialRetryScheduler.init(maxRetries:power:)();
  v17 = ExponentialRetryScheduler.__allocating_init(maxRetries:power:)(v14, v4);
  *(_QWORD *)(v0 + 128) = v17;
  *(_QWORD *)(v0 + 72) = v17;
  *(_QWORD *)(v0 + 32) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 40) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Key Registration(forceKeyRoll: ", 0x1FuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 162) = v20 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v15 = String.init(stringInterpolation:)();
  v19 = v8;
  swift_retain();
  v26[3] = v16;
  v26[4] = &protocol witness table for ExponentialRetryScheduler;
  v26[0] = v17;
  Transaction.init(name:retryScheduler:)(v15, v19, (uint64_t)v26, v18);
  swift_retain();
  v25 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v25;
  *(_QWORD *)(v25 + 16) = v23;
  *(_BYTE *)(v25 + 24) = v20 & 1;
  *(_BYTE *)(v25 + 25) = v21 & 1;
  *(_BYTE *)(v25 + 26) = v22 & 1;
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  v24[18] = v9;
  *v9 = v24[6];
  v9[1] = closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return Transaction.perform<A>(_:shouldRetry:)(v24[10], (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:), v25, (uint64_t)partial apply for closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:), v23, (uint64_t)&type metadata for KeyDistributionService.RegistrationResult);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:));
    swift_task_dealloc();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 48) = v0;
  outlined destroy of Transaction(v1);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 48) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 48) = v0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:));
  swift_task_dealloc();
  swift_release();
  outlined destroy of Transaction(v2);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 48) + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  *(_QWORD *)(v5 + 40) = a2;
  *(_QWORD *)(v5 + 32) = a1;
  *(_QWORD *)(v5 + 16) = v5;
  *(_QWORD *)(v5 + 24) = 0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 24) = a2;
  *(_BYTE *)(v5 + 64) = a3 & 1;
  *(_BYTE *)(v5 + 72) = a4 & 1;
  *(_BYTE *)(v5 + 80) = a5 & 1;
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 48) = v6;
  *v6 = *(_QWORD *)(v8 + 16);
  v6[1] = closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a3 & 1, a4 & 1, a5 & 1);
}

uint64_t closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  *(_BYTE *)(v3 + 65) = a1;
  *(_QWORD *)(v3 + 56) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 65);
  v2 = *(_BYTE **)(v0 + 32);
  *(_QWORD *)(v0 + 16) = v0;
  *v2 = v1;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;

  *(_QWORD *)(v4 + 2144) = v3;
  *(_BYTE *)(v4 + 2308) = a3 & 1;
  *(_BYTE *)(v4 + 2307) = a2 & 1;
  *(_BYTE *)(v4 + 2306) = a1 & 1;
  *(_QWORD *)(v4 + 2096) = v4;
  *(_BYTE *)(v4 + 2304) = 0;
  *(_BYTE *)(v4 + 2312) = 0;
  *(_BYTE *)(v4 + 2320) = 0;
  *(_QWORD *)(v4 + 2104) = 0;
  memset((void *)(v4 + 16), 0, 0x88uLL);
  *(_QWORD *)(v4 + 2112) = 0;
  *(_QWORD *)(v4 + 2080) = 0;
  *(_QWORD *)(v4 + 2088) = 0;
  *(_QWORD *)(v4 + 2120) = 0;
  *(_QWORD *)(v4 + 2128) = 0;
  *(_QWORD *)(v4 + 2136) = 0;
  v5 = type metadata accessor for Date();
  *(_QWORD *)(v4 + 2152) = v5;
  *(_QWORD *)(v4 + 2160) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 2168) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo)?);
  *(_QWORD *)(v4 + 2176) = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v4 + 2184) = v6;
  *(_QWORD *)(v4 + 2192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 2200) = swift_task_alloc();
  v7 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v4 + 2208) = v7;
  *(_QWORD *)(v4 + 2216) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 2224) = swift_task_alloc();
  *(_QWORD *)(v4 + 2232) = swift_task_alloc();
  *(_QWORD *)(v4 + 2240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CachedKeyInfo?);
  *(_QWORD *)(v4 + 2248) = swift_task_alloc();
  *(_BYTE *)(v4 + 2304) = a1 & 1;
  *(_BYTE *)(v4 + 2312) = a2 & 1;
  *(_BYTE *)(v4 + 2320) = a3 & 1;
  *(_QWORD *)(v4 + 2104) = v11;
  return swift_task_switch();
}

uint64_t KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_BYTE *)(v0 + 2308);
  *(_QWORD *)(v0 + 2096) = v0;
  if ((v1 & 1) != 0)
    goto LABEL_12;
  outlined init with copy of UserStore(*(_QWORD *)(v26 + 2144) + 112, v26 + 2000);
  v24 = *(_QWORD *)(v26 + 2024);
  v23 = *(_QWORD *)(v26 + 2032);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v26 + 2000), v24);
  v25 = (*(uint64_t (**)(uint64_t))(v23 + 40))(v24);
  __swift_destroy_boxed_opaque_existential_1(v26 + 2000);
  if (!v25)
    goto LABEL_12;
  v20 = *(_QWORD *)(v26 + 2240);
  v2 = *(_QWORD *)(v26 + 2144);
  *(_QWORD *)(v26 + 2128) = v25;
  outlined init with copy of UserStore(v2 + 112, v26 + 2040);
  v21 = *(_QWORD *)(v26 + 2064);
  v22 = *(_QWORD *)(v26 + 2072);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v26 + 2040), v21);
  GPKUser.userID.getter();
  (*(void (**)(uint64_t, uint64_t))(v22 + 56))(v20, v21);
  v18 = *(_QWORD *)(v26 + 2248);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v26 + 2216) + 8))(*(_QWORD *)(v26 + 2240), *(_QWORD *)(v26 + 2208));
  v19 = type metadata accessor for CachedKeyInfo();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1) == 1)
  {
    v12 = *(_QWORD *)(v26 + 2248);
    __swift_destroy_boxed_opaque_existential_1(v26 + 2040);
    outlined destroy of CachedKeyInfo?(v12);
    _s12GroupKitCore11UserKeyInfoVSgWOi0_((_QWORD *)(v26 + 1376));
    outlined init with take of UserKeyInfo?((const void *)(v26 + 1376), (void *)(v26 + 1240));
  }
  else
  {
    v17 = *(_QWORD *)(v26 + 2248);
    memcpy((void *)(v26 + 1784), (const void *)(v17 + *(int *)(v19 + 20)), 0x88uLL);
    outlined retain of UserKeyInfo((_QWORD *)(v26 + 1784));
    outlined destroy of CachedKeyInfo(v17);
    memcpy((void *)(v26 + 1648), (const void *)(v26 + 1784), 0x88uLL);
    _s12GroupKitCore11UserKeyInfoVSgWOi_(v26 + 1648);
    __swift_destroy_boxed_opaque_existential_1(v26 + 2040);
    outlined init with take of UserKeyInfo?((const void *)(v26 + 1648), (void *)(v26 + 1240));
  }
  outlined init with take of UserKeyInfo?((const void *)(v26 + 1240), (void *)(v26 + 1512));
  if (_s12GroupKitCore11UserKeyInfoVSgWOg(v26 + 1512) == 1)
  {
    swift_release();
LABEL_12:
    if ((*(_BYTE *)(v26 + 2307) & 1) != 0)
    {
      _s12GroupKitCore11UserKeyInfoVSgWOi0_((_QWORD *)(v26 + 152));
      outlined init with take of UserKeyInfo?((const void *)(v26 + 152), (void *)(v26 + 288));
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v26 + 2272) = v6;
      *v6 = *(_QWORD *)(v26 + 2096);
      v6[1] = KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
      return KeyDistributionService.registerNewKeys(previousKey:)((const void *)(v26 + 288));
    }
    else
    {
      v4 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v26 + 2256) = v4;
      *v4 = *(_QWORD *)(v26 + 2096);
      v4[1] = KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
      return KeyDistributionService.fetchCurrentUserKeyInfo()(*(_QWORD *)(v26 + 2176));
    }
  }
  v14 = *(_QWORD *)(v26 + 2200);
  v13 = *(_QWORD *)(v26 + 2192);
  v15 = *(_QWORD *)(v26 + 2184);
  *(_QWORD *)(v26 + 2136) = v26 + 1512;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("found existing user and keys in database", 0x28uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined retain of UserKeyInfo((_QWORD *)(v26 + 1512));
  memcpy((void *)(v26 + 16), (const void *)(v26 + 1512), 0x88uLL);
  *(_BYTE *)(v26 + 2305) = 0;
  outlined release of UserKeyInfo((_QWORD *)(v26 + 1512));
  swift_release();
  memcpy((void *)(v26 + 560), (const void *)(v26 + 16), 0x88uLL);
  outlined retain of UserKeyInfo((_QWORD *)(v26 + 560));
  memcpy((void *)(v26 + 696), (const void *)(v26 + 560), 0x88uLL);
  v16 = KeyDistributionService.shouldRegisterNewKeyVersion(keyInfo:)(v26 + 696);
  outlined destroy of UserKeyInfo(v26 + 696);
  if (v16 || (*(_BYTE *)(v26 + 2306) & 1) != 0)
  {
    v10 = *(_QWORD *)(v26 + 2200);
    v9 = *(_QWORD *)(v26 + 2192);
    v11 = *(_QWORD *)(v26 + 2184);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("registering new version of keys", 0x1FuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy((void *)(v26 + 968), (const void *)(v26 + 16), 0x88uLL);
    outlined retain of UserKeyInfo((_QWORD *)(v26 + 968));
    memcpy((void *)(v26 + 832), (const void *)(v26 + 968), 0x88uLL);
    _s12GroupKitCore11UserKeyInfoVSgWOi_(v26 + 832);
    outlined init with take of UserKeyInfo?((const void *)(v26 + 832), (void *)(v26 + 1104));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 2288) = v7;
    *v7 = *(_QWORD *)(v26 + 2096);
    v7[1] = KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
    return KeyDistributionService.registerNewKeys(previousKey:)((const void *)(v26 + 1104));
  }
  else
  {
    v8 = *(unsigned __int8 *)(v26 + 2305);
    outlined destroy of UserKeyInfo(v26 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v26 + 2096) + 8))(v8);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 2096) = *v1;
  *(_QWORD *)(v2 + 2264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[136];

  v43 = *(_QWORD *)(v0 + 2176);
  *(_QWORD *)(v0 + 2096) = v0;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo));
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1) == 1)
  {
    outlined destroy of (GPKUserID, UserKeyInfo)?(*(_QWORD *)(v42 + 2176));
    _s12GroupKitCore11UserKeyInfoVSgWOi0_((_QWORD *)(v42 + 152));
    outlined init with take of UserKeyInfo?((const void *)(v42 + 152), (void *)(v42 + 288));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v42 + 2272) = v1;
    *v1 = *(_QWORD *)(v42 + 2096);
    v1[1] = KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
    return KeyDistributionService.registerNewKeys(previousKey:)((const void *)(v42 + 288));
  }
  else
  {
    v34 = *(_QWORD *)(v42 + 2232);
    v36 = *(_QWORD *)(v42 + 2216);
    v38 = *(_QWORD *)(v42 + 2208);
    v40 = *(_QWORD *)(v42 + 2200);
    v39 = *(_QWORD *)(v42 + 2192);
    v41 = *(_QWORD *)(v42 + 2184);
    v37 = *(_QWORD *)(v42 + 2176);
    v35 = (const void *)(v37 + *(int *)(v44 + 48));
    memcpy((void *)(v42 + 424), v35, 0x88uLL);
    *(_QWORD *)(v42 + 2112) = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v34, v37, v38);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fetched existing user from KDS", 0x1EuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v40);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v2 = DaemonAccountManager.preferredHandle()();
    if (v3)
    {
      v11 = *(_QWORD *)(v42 + 2232);
      v9 = *(_QWORD *)(v42 + 2216);
      v10 = *(_QWORD *)(v42 + 2208);
      swift_release();
      outlined release of UserKeyInfo((_QWORD *)(v42 + 424));
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v8 = swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v42 + 2096) + 8))(v8);
    }
    else
    {
      v27 = *(_QWORD *)(v42 + 2232);
      v29 = *(_QWORD *)(v42 + 2224);
      v25 = *(_QWORD *)(v42 + 2216);
      v26 = *(_QWORD *)(v42 + 2208);
      v30 = *(_QWORD *)(v42 + 2144);
      swift_release();
      *(Swift::String *)(v42 + 2080) = v2;
      type metadata accessor for GPKUser();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v29, v27, v26);
      _allocateUninitializedArray<A>(_:)();
      v28 = v4;
      swift_bridgeObjectRetain();
      *v28 = v2;
      _finalizeUninitializedArray<A>(_:)();
      v31 = GPKUser.__allocating_init(userID:handles:isMe:)();
      *(_QWORD *)(v42 + 2120) = v31;
      outlined init with copy of UserStore(v30 + 112, v42 + 1920);
      v33 = *(_QWORD *)(v42 + 1952);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v42 + 1920), *(_QWORD *)(v42 + 1944));
      _allocateUninitializedArray<A>(_:)();
      v32 = v5;
      swift_retain();
      *v32 = v31;
      _finalizeUninitializedArray<A>(_:)();
      (*(void (**)(void))(v33 + 24))();
      v21 = *(_QWORD *)(v42 + 2232);
      v22 = *(_QWORD *)(v42 + 2168);
      v20 = *(_QWORD *)(v42 + 2144);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v42 + 1920);
      outlined init with copy of UserStore(v20 + 112, v42 + 1960);
      v23 = *(_QWORD *)(v42 + 1984);
      v24 = *(_QWORD *)(v42 + 1992);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v42 + 1960), v23);
      Date.init()();
      memcpy(v45, (const void *)(v42 + 424), sizeof(v45));
      (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(v24 + 64))(v21, v22, v45, v23);
      v18 = *(_QWORD *)(v42 + 2232);
      v16 = *(_QWORD *)(v42 + 2216);
      v17 = *(_QWORD *)(v42 + 2208);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v42 + 2160) + 8))(*(_QWORD *)(v42 + 2168), *(_QWORD *)(v42 + 2152));
      __swift_destroy_boxed_opaque_existential_1(v42 + 1960);
      outlined retain of UserKeyInfo((_QWORD *)(v42 + 424));
      memcpy((void *)(v42 + 16), (const void *)(v42 + 424), 0x88uLL);
      *(_BYTE *)(v42 + 2305) = 1;
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of UserKeyInfo((_QWORD *)(v42 + 424));
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
      memcpy((void *)(v42 + 560), (const void *)(v42 + 16), 0x88uLL);
      outlined retain of UserKeyInfo((_QWORD *)(v42 + 560));
      memcpy((void *)(v42 + 696), (const void *)(v42 + 560), 0x88uLL);
      v19 = KeyDistributionService.shouldRegisterNewKeyVersion(keyInfo:)(v42 + 696);
      outlined destroy of UserKeyInfo(v42 + 696);
      if (v19 || (*(_BYTE *)(v42 + 2306) & 1) != 0)
      {
        v14 = *(_QWORD *)(v42 + 2200);
        v13 = *(_QWORD *)(v42 + 2192);
        v15 = *(_QWORD *)(v42 + 2184);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("registering new version of keys", 0x1FuLL, 1);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        memcpy((void *)(v42 + 968), (const void *)(v42 + 16), 0x88uLL);
        outlined retain of UserKeyInfo((_QWORD *)(v42 + 968));
        memcpy((void *)(v42 + 832), (const void *)(v42 + 968), 0x88uLL);
        _s12GroupKitCore11UserKeyInfoVSgWOi_(v42 + 832);
        outlined init with take of UserKeyInfo?((const void *)(v42 + 832), (void *)(v42 + 1104));
        v6 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v42 + 2288) = v6;
        *v6 = *(_QWORD *)(v42 + 2096);
        v6[1] = KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
        return KeyDistributionService.registerNewKeys(previousKey:)((const void *)(v42 + 1104));
      }
      else
      {
        v12 = *(unsigned __int8 *)(v42 + 2305);
        outlined destroy of UserKeyInfo(v42 + 16);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v42 + 2096) + 8))(v12);
      }
    }
  }
}

{
  uint64_t v0;
  unsigned int v2;

  *(_QWORD *)(v0 + 2096) = v0;
  v2 = *(unsigned __int8 *)(v0 + 2309);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 2096) + 8))(v2);
}

{
  uint64_t v0;
  unsigned int v2;

  *(_QWORD *)(v0 + 2096) = v0;
  outlined destroy of UserKeyInfo(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 2310);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 2096) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 2096) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 2096) + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 2096) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 2096) + 8))(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 2096) = v0;
  outlined destroy of UserKeyInfo?((_QWORD *)(v0 + 1104));
  outlined destroy of UserKeyInfo(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 2096) + 8))(v1);
}

uint64_t KeyDistributionService._register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 2096) = *v2;
  *(_BYTE *)(v4 + 2309) = a1;
  *(_QWORD *)(v4 + 2280) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v5 = *v2;
  v4 = (_QWORD *)(*v2 + 1104);
  *(_QWORD *)(v5 + 2096) = *v2;
  *(_BYTE *)(v5 + 2310) = a1;
  *(_QWORD *)(v5 + 2296) = v1;
  swift_task_dealloc();
  if (!v1)
    outlined destroy of UserKeyInfo?(v4);
  return swift_task_switch();
}

_QWORD *_s12GroupKitCore11UserKeyInfoVSgWOi0_(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  result[13] = 0;
  result[14] = 0;
  result[15] = 0;
  result[16] = 0;
  return result;
}

void *outlined init with take of UserKeyInfo?(const void *a1, void *a2)
{
  memcpy(a2, a1, 0x88uLL);
  return a2;
}

uint64_t closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  outlined init with copy of CryptographyServiceProviding(a2 + 160, (uint64_t)v7);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(a1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v6 & 1;
}

uint64_t KeyDistributionService.fetchCurrentUserKeyInfo()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t UserKeyInfo;
  uint64_t v5;

  *(_QWORD *)(v2 + 520) = v1;
  *(_QWORD *)(v2 + 512) = a1;
  *(_QWORD *)(v2 + 456) = v2;
  *(_QWORD *)(v2 + 464) = 0;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_QWORD *)(v2 + 472) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 504) = 0;
  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  *(_QWORD *)(v2 + 528) = UserKeyInfo;
  *(_QWORD *)(v2 + 536) = *(_QWORD *)(UserKeyInfo - 8);
  *(_QWORD *)(v2 + 544) = swift_task_alloc();
  *(_QWORD *)(v2 + 552) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<FetchUserKeyInfoRequest.Response>);
  *(_QWORD *)(v2 + 560) = swift_task_alloc();
  type metadata accessor for FetchUserKeyInfoRequest.Response();
  *(_QWORD *)(v2 + 568) = swift_task_alloc();
  *(_QWORD *)(v2 + 576) = swift_task_alloc();
  *(_QWORD *)(v2 + 464) = v5;
  return swift_task_switch();
}

uint64_t KeyDistributionService.fetchCurrentUserKeyInfo()()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t UserKeyInfoRequest;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(v0 + 520);
  *(_QWORD *)(v0 + 456) = v0;
  v6 = v0 + 424;
  FetchUserKeyInfoRequest.init(keyProtocolVersion:)(*(_DWORD *)(v4 + 500), (_OWORD *)(v0 + 424));
  *(_QWORD *)(v0 + 584) = *(_QWORD *)(v4 + 240);
  v8 = *(_QWORD *)(v4 + 248);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v9 = (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 32) + **(int **)(v8 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  v5[74] = v1;
  UserKeyInfoRequest = lazy protocol witness table accessor for type FetchUserKeyInfoRequest and conformance FetchUserKeyInfoRequest();
  *v1 = v5[57];
  v1[1] = KeyDistributionService.fetchCurrentUserKeyInfo();
  return v9(v5[70], v6, &type metadata for FetchUserKeyInfoRequest, UserKeyInfoRequest, ObjectType, v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 456) = *v1;
  *(_QWORD *)(v2 + 600) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v1 = (char *)v0[72];
  v24 = v1;
  v27 = (char *)v0[71];
  v23 = v0[70];
  v2 = v0[69];
  v25 = v0[67];
  v26 = v0[66];
  v0[57] = v0;
  outlined init with copy of FetchUserKeyInfoRequest.Response((char *)(v23 + *(int *)(v2 + 36)), v1);
  outlined destroy of NetworkResponse<FetchUserKeyInfoRequest.Response>(v23);
  swift_unknownObjectRelease();
  outlined init with copy of FetchUserKeyInfoRequest.Response(v24, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
  {
    v21 = v22[72];
    v20 = v22[64];
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v20, 1);
    outlined destroy of FetchUserKeyInfoRequest.Response(v21);
    outlined destroy of FetchUserKeyInfoRequest((uint64_t)(v22 + 53));
  }
  else
  {
    v4 = v22[75];
    v17 = v22[68];
    v16 = v22[66];
    outlined init with take of FetchUserKeyInfoRequest.ExistingKey(v22[71], v17);
    v22[59] = v17;
    v18 = *(_QWORD *)(v17 + *(int *)(v16 + 20));
    swift_bridgeObjectRetain();
    v22[60] = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
    result = Sequence.sorted(by:)();
    v19 = result;
    if (v4)
      return result;
    outlined destroy of [UserKeyInfo]();
    v22[61] = result;
    swift_bridgeObjectRetain();
    v22[62] = v19;
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
    BidirectionalCollection.last.getter();
    outlined destroy of [UserKeyInfo]();
    outlined init with take of UserKeyInfo?(v22 + 36, v22 + 19);
    outlined init with take of UserKeyInfo?(v22 + 19, v22 + 2);
    if (_s12GroupKitCore11UserKeyInfoVSgWOg((uint64_t)(v22 + 2)) == 1)
    {
      v10 = v22[72];
      v9 = v22[68];
      v8 = v22[64];
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v8, 1);
      swift_bridgeObjectRelease();
      outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v9);
      outlined destroy of FetchUserKeyInfoRequest.Response(v10);
    }
    else
    {
      v15 = v22[72];
      v14 = v22[68];
      v12 = v22[64];
      v22[63] = v22 + 2;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo));
      __dst = (void *)(v12 + *(int *)(v13 + 48));
      v6 = type metadata accessor for GPKUserID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v12, v14);
      outlined retain of UserKeyInfo(v22 + 2);
      memcpy(__dst, v22 + 2, 0x88uLL);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1);
      outlined release of UserKeyInfo(v22 + 2);
      swift_bridgeObjectRelease();
      outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v14);
      outlined destroy of FetchUserKeyInfoRequest.Response(v15);
    }
    outlined destroy of FetchUserKeyInfoRequest((uint64_t)(v22 + 53));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v22[57] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 456) = v0;
  swift_unknownObjectRelease();
  outlined destroy of FetchUserKeyInfoRequest(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 456) + 8))();
}

uint64_t KeyDistributionService.registerNewKeys(previousKey:)(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)(v2 + 936) = v1;
  *(_QWORD *)(v2 + 896) = v2;
  *(_QWORD *)(v2 + 904) = 0;
  *(_QWORD *)(v2 + 912) = 0;
  *(_DWORD *)(v2 + 1136) = 0;
  *(_OWORD *)(v2 + 800) = 0u;
  *(_OWORD *)(v2 + 816) = 0u;
  *(_OWORD *)(v2 + 832) = 0u;
  *(_OWORD *)(v2 + 848) = 0u;
  *(_QWORD *)(v2 + 880) = 0;
  *(_QWORD *)(v2 + 888) = 0;
  *(_QWORD *)(v2 + 920) = 0;
  *(_QWORD *)(v2 + 928) = 0;
  v3 = type metadata accessor for Date();
  *(_QWORD *)(v2 + 944) = v3;
  *(_QWORD *)(v2 + 952) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 960) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteRegisterUserKeyInfoRequest.Response>);
  *(_QWORD *)(v2 + 968) = swift_task_alloc();
  type metadata accessor for InitRegisterUserKeyInfoRequest.Response();
  *(_QWORD *)(v2 + 976) = swift_task_alloc();
  *(_QWORD *)(v2 + 984) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitRegisterUserKeyInfoRequest.Response>);
  *(_QWORD *)(v2 + 992) = swift_task_alloc();
  v4 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v2 + 1000) = v4;
  *(_QWORD *)(v2 + 1008) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 1016) = swift_task_alloc();
  *(_QWORD *)(v2 + 1024) = swift_task_alloc();
  *(_QWORD *)(v2 + 1032) = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 1040) = v5;
  *(_QWORD *)(v2 + 1048) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 1056) = swift_task_alloc();
  outlined init with take of UserKeyInfo?(a1, (void *)(v2 + 152));
  *(_QWORD *)(v2 + 904) = a1;
  *(_QWORD *)(v2 + 912) = v7;
  return swift_task_switch();
}

uint64_t KeyDistributionService.registerNewKeys(previousKey:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  unint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _BYTE v15[136];

  *(_QWORD *)(v0 + 896) = v0;
  *(_DWORD *)(v0 + 1136) = 1;
  outlined retain of UserKeyInfo?(v0 + 152);
  outlined init with take of UserKeyInfo?((const void *)(v0 + 152), (void *)(v0 + 16));
  if (_s12GroupKitCore11UserKeyInfoVSgWOg(v0 + 16) != 1)
  {
    *(_QWORD *)(v14 + 928) = v14 + 16;
    memcpy(v15, (const void *)(v14 + 16), sizeof(v15));
    *(_DWORD *)(v14 + 1136) = KeyDistributionService.newKeyVersion(incrementing:)((uint64_t)v15);
    outlined release of UserKeyInfo((_QWORD *)(v14 + 16));
  }
  v8 = *(_QWORD *)(v14 + 1056);
  v7 = *(_QWORD *)(v14 + 1048);
  v9 = *(_QWORD *)(v14 + 1040);
  v10 = *(_QWORD *)(v14 + 936);
  *(_QWORD *)(v14 + 864) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v14 + 872) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("registering keys with version ", 0x1EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + 1140) = *(_DWORD *)(v14 + 1136);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  InitRegisterUserKeyInfoRequest.init(keyProtocolVersion:)(*(_DWORD *)(v10 + 500), (_OWORD *)(v14 + 800));
  *(_QWORD *)(v14 + 1064) = *(_QWORD *)(v10 + 240);
  v12 = *(_QWORD *)(v10 + 248);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v13 = (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 32) + **(int **)(v12 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 1072) = v4;
  inited = lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest and conformance InitRegisterUserKeyInfoRequest();
  *v4 = *(_QWORD *)(v14 + 896);
  v4[1] = KeyDistributionService.registerNewKeys(previousKey:);
  return v13(*(_QWORD *)(v14 + 992), v14 + 800, &type metadata for InitRegisterUserKeyInfoRequest, inited, ObjectType, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 896) = *v1;
  *(_QWORD *)(v2 + 1080) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *, _QWORD, uint64_t, uint64_t);

  v9 = v0[129];
  v7 = v0[126];
  v8 = v0[125];
  v6 = v0[124];
  v1 = v0[123];
  v2 = v0[122];
  v10 = v2;
  v11 = v0[117];
  v0[112] = v0;
  outlined init with copy of InitRegisterUserKeyInfoRequest.Response(v6 + *(int *)(v1 + 36), v2);
  outlined destroy of NetworkResponse<InitRegisterUserKeyInfoRequest.Response>(v6);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[136] = v3;
  v3(v9, v10, v8);
  outlined destroy of InitRegisterUserKeyInfoRequest.Response(v10);
  swift_unknownObjectRelease();
  outlined init with copy of CryptographyServiceProviding(v11 + 160, (uint64_t)(v0 + 75));
  v13 = v0[78];
  v14 = v0[79];
  __swift_project_boxed_opaque_existential_1(v0 + 75, v13);
  v15 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 + 64) + **(int **)(v14 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  v12[137] = v4;
  *v4 = v12[112];
  v4[1] = KeyDistributionService.registerNewKeys(previousKey:);
  return v15(v12 + 70, v12[129], v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 896) = *v1;
  *(_QWORD *)(v2 + 1104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 1104);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  v21 = *(_QWORD *)(v0 + 1032);
  v45 = *(_QWORD *)(v0 + 1024);
  v22 = *(_QWORD *)(v0 + 1000);
  v34 = *(_QWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 896) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 600);
  v23(v45, v21, v22);
  v25 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 592);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 560), v25);
  v46 = (*(uint64_t (**)(uint64_t))(v24 + 16))(v25);
  v39 = v2;
  v27 = *(_QWORD *)(v0 + 584);
  v26 = *(_QWORD *)(v0 + 592);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 560), v27);
  v40 = (*(uint64_t (**)(uint64_t))(v26 + 24))(v27);
  v41 = v3;
  v29 = *(_QWORD *)(v0 + 584);
  v28 = *(_QWORD *)(v0 + 592);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 560), v29);
  v42 = (*(uint64_t (**)(uint64_t))(v28 + 32))(v29);
  v43 = v4;
  v31 = *(_QWORD *)(v0 + 584);
  v30 = *(_QWORD *)(v0 + 592);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 560), v31);
  v44 = (*(uint64_t (**)(uint64_t))(v30 + 40))(v31);
  v35 = v5;
  v36 = *(_DWORD *)(v0 + 1136);
  outlined init with copy of CryptographyServiceProviding(v34 + 160, v0 + 640);
  v33 = *(_QWORD *)(v0 + 664);
  v32 = *(_QWORD *)(v0 + 672);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 640), v33);
  v37 = (*(uint64_t (**)(uint64_t))(v32 + 8))(v33);
  v38 = v6;
  v7 = static UserKeyInfo.serializedMetadata(keyProtocolVersion:)(*(_DWORD *)(v34 + 500));
  CompleteRegisterUserKeyInfoRequest.init(userID:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:metadata:keyProtocolVersion:)(v45, v46, v39, v40, v41, v42, v43, v44, v0 + 832, v35, v36, v37, v38, v7, v8, *(_DWORD *)(v34 + 500));
  if (v1)
  {
    v14 = v20[129];
    v13 = v20[126];
    v15 = v20[125];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v20 + 80));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v20 + 70));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    outlined destroy of InitRegisterUserKeyInfoRequest((uint64_t)(v20 + 100));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v12 = swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v20[112] + 8))(v12);
  }
  else
  {
    v16 = v20[117];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v20 + 80));
    v20[139] = *(_QWORD *)(v16 + 240);
    v18 = *(_QWORD *)(v16 + 248);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v19 = (uint64_t (*)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 32) + **(int **)(v18 + 32));
    v9 = (_QWORD *)swift_task_alloc();
    v20[140] = v9;
    v10 = lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest and conformance CompleteRegisterUserKeyInfoRequest();
    *v9 = v20[112];
    v9[1] = KeyDistributionService.registerNewKeys(previousKey:);
    return v19(v20[121], v20 + 104, &type metadata for CompleteRegisterUserKeyInfoRequest, v10, ObjectType, v18);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 896) = *v1;
  *(_QWORD *)(v2 + 1128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  size_t __n;
  uint64_t v68;
  void *__src;
  void *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE __dst[272];

  v97 = v0[139];
  v1 = v0[121];
  v98 = v0[117];
  v0[112] = v0;
  outlined destroy of NetworkResponse<CompleteRegisterUserKeyInfoRequest.Response>(v1);
  swift_unknownObjectRelease();
  v99 = *(_QWORD *)(v98 + 152);
  swift_retain();
  v100 = DaemonAccountManager.preferredHandle()();
  v101 = v2;
  if (v2)
  {
    v25 = *(_QWORD *)(v96 + 1032);
    v24 = *(_QWORD *)(v96 + 1008);
    v26 = *(_QWORD *)(v96 + 1000);
    swift_release();
    outlined destroy of CompleteRegisterUserKeyInfoRequest(v96 + 832);
    __swift_destroy_boxed_opaque_existential_1(v96 + 560);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    outlined destroy of InitRegisterUserKeyInfoRequest(v96 + 800);
    v27 = v101;
    v23[9] = *(_QWORD *)(v96 + 1032);
    v23[10] = *(_QWORD *)(v96 + 1024);
    v23[11] = *(_QWORD *)(v96 + 1016);
    v23[12] = *(_QWORD *)(v96 + 992);
    v23[13] = *(_QWORD *)(v96 + 976);
    v23[14] = *(_QWORD *)(v96 + 968);
    v23[15] = *(_QWORD *)(v96 + 960);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v22 = swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v96 + 896) + 8))(v22);
  }
  else
  {
    v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 1088);
    v78 = *(_QWORD *)(v96 + 1032);
    v82 = *(_QWORD *)(v96 + 1016);
    v76 = *(_QWORD *)(v96 + 1000);
    v83 = *(_QWORD *)(v96 + 936);
    swift_release();
    object = v100._object;
    v4 = v96;
    v90 = v96 + 880;
    *(_QWORD *)(v96 + 880) = v100._countAndFlagsBits;
    *(_QWORD *)(v4 + 888) = object;
    v89 = type metadata accessor for GPKUser();
    v77(v82, v78, v76);
    v85 = 1;
    v81 = MEMORY[0x24BEE0D00];
    v79 = _allocateUninitializedArray<A>(_:)();
    v80 = v5;
    swift_bridgeObjectRetain();
    v6 = v100._object;
    v7 = v80;
    *v80 = v100._countAndFlagsBits;
    v7[1] = (uint64_t)v6;
    _finalizeUninitializedArray<A>(_:)();
    v8 = GPKUser.__allocating_init(userID:handles:isMe:)();
    v9 = v83;
    v10 = v96;
    v87 = v8;
    v91 = v96 + 920;
    *(_QWORD *)(v96 + 920) = v8;
    v84 = (_QWORD *)(v10 + 680);
    outlined init with copy of UserStore(v9 + 112, v10 + 680);
    v92 = *(_QWORD *)(v96 + 704);
    v93 = *(_QWORD *)(v96 + 712);
    __swift_project_boxed_opaque_existential_1(v84, v92);
    v86 = _allocateUninitializedArray<A>(_:)();
    v88 = v11;
    swift_retain();
    v12 = v86;
    *v88 = v87;
    _finalizeUninitializedArray<A>(_:)();
    v94 = v12;
    (*(void (**)(void))(v93 + 24))();
    v95 = 0;
    v68 = *(_QWORD *)(v96 + 1032);
    v71 = *(_QWORD *)(v96 + 960);
    v65 = *(_QWORD *)(v96 + 936);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v96 + 680);
    v13 = (uint64_t *)HTTPBodyKey.keyNameSpace.unsafeMutableAddressor();
    v61 = *v13;
    v62 = v13[1];
    swift_bridgeObjectRetain();
    v40 = *(_QWORD *)(v96 + 584);
    v39 = *(_QWORD *)(v96 + 592);
    v45 = v96 + 560;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 560), v40);
    v55 = (*(uint64_t (**)(uint64_t))(v39 + 16))(v40);
    v56 = v14;
    v42 = *(_QWORD *)(v96 + 584);
    v41 = *(_QWORD *)(v96 + 592);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 560), v42);
    v57 = (*(uint64_t (**)(uint64_t))(v41 + 24))(v42);
    v58 = v15;
    v44 = *(_QWORD *)(v96 + 584);
    v43 = *(_QWORD *)(v96 + 592);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 560), v44);
    v59 = (*(uint64_t (**)(uint64_t))(v43 + 32))(v44);
    v60 = v16;
    v47 = *(_QWORD *)(v96 + 584);
    v46 = *(_QWORD *)(v96 + 592);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 560), v47);
    v50 = (*(uint64_t (**)(uint64_t))(v46 + 40))(v47);
    v51 = v17;
    v52 = *(_DWORD *)(v96 + 1136);
    v64 = v96 + 720;
    outlined init with copy of CryptographyServiceProviding(v65 + 160, v96 + 720);
    v49 = *(_QWORD *)(v96 + 744);
    v48 = *(_QWORD *)(v96 + 752);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v96 + 720), v49);
    v53 = (*(uint64_t (**)(uint64_t))(v48 + 8))(v49);
    v54 = v18;
    v19 = Data.init()();
    LODWORD(v102) = *(_DWORD *)(v65 + 500);
    BYTE4(v102) = 0;
    v63 = v23;
    __src = (void *)(v96 + 424);
    UserKeyInfo.init(keyNameSpace:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:signatureVerificationKeyPair:keyProtocolVersion:)(v61, v62, v55, v56, v57, v58, v59, v60, (void *)(v96 + 424), v50, v51, v52, v53, v54, v19, v20, v102);
    __swift_destroy_boxed_opaque_existential_1(v64);
    v70 = (void *)(v96 + 288);
    __n = 136;
    memcpy((void *)(v96 + 288), __src, 0x88uLL);
    v66 = (_QWORD *)(v96 + 760);
    outlined init with copy of UserStore(v65 + 112, v96 + 760);
    v73 = *(_QWORD *)(v96 + 784);
    v74 = *(_QWORD *)(v96 + 792);
    __swift_project_boxed_opaque_existential_1(v66, v73);
    Date.init()();
    v72 = __dst;
    memcpy(__dst, v70, __n);
    (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(v74 + 64))(v68, v71, v72, v73);
    v75 = 0;
    v30 = *(_QWORD *)(v96 + 1056);
    v31 = *(_QWORD *)(v96 + 1032);
    v32 = *(_QWORD *)(v96 + 1024);
    v33 = *(_QWORD *)(v96 + 1016);
    v28 = *(_QWORD *)(v96 + 1008);
    v29 = *(_QWORD *)(v96 + 1000);
    v34 = *(_QWORD *)(v96 + 992);
    v35 = *(_QWORD *)(v96 + 976);
    v36 = *(_QWORD *)(v96 + 968);
    v37 = *(_QWORD *)(v96 + 960);
    (*(void (**)(void))(*(_QWORD *)(v96 + 952) + 8))();
    __swift_destroy_boxed_opaque_existential_1(v96 + 760);
    v38 = v96 + 288;
    outlined release of UserKeyInfo((_QWORD *)(v96 + 288));
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of CompleteRegisterUserKeyInfoRequest(v96 + 832);
    __swift_destroy_boxed_opaque_existential_1(v96 + 560);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v29);
    outlined destroy of InitRegisterUserKeyInfoRequest(v96 + 800);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v96 + 896) + 8))(2);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 896) = v0;
  swift_unknownObjectRelease();
  outlined destroy of InitRegisterUserKeyInfoRequest(v0 + 800);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 896) + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[129];
  v3 = v0[126];
  v5 = v0[125];
  v0[112] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 75));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  outlined destroy of InitRegisterUserKeyInfoRequest((uint64_t)(v0 + 100));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[112] + 8))(v1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[129];
  v3 = v0[126];
  v5 = v0[125];
  v0[112] = v0;
  swift_unknownObjectRelease();
  outlined destroy of CompleteRegisterUserKeyInfoRequest((uint64_t)(v0 + 104));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 70));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  outlined destroy of InitRegisterUserKeyInfoRequest((uint64_t)(v0 + 100));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[112] + 8))(v1);
}

uint64_t outlined destroy of (GPKUserID, UserKeyInfo)?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, UserKeyInfo));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    v3 = a1 + *(int *)(v5 + 48);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
    swift_bridgeObjectRelease();
    if ((*(_QWORD *)(v3 + 112) & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 112));
    swift_bridgeObjectRelease();
  }
  return a1;
}

BOOL KeyDistributionService.shouldRegisterNewKeyVersion(keyInfo:)(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _BYTE *v17;
  void *object;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Builtin::Word v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t countAndFlagsBits;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[136];
  uint64_t v44;
  uint64_t v45;
  _QWORD __dst[17];

  v14 = a1;
  v45 = 0;
  v44 = 0;
  v42 = 0;
  v22 = 0;
  v34 = type metadata accessor for LogSubsystem();
  v32 = *(_QWORD *)(v34 - 8);
  v13 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v33 = (uint64_t)&v12 - v13;
  v15 = __dst;
  v16 = 136;
  memcpy(__dst, v2, sizeof(__dst));
  v45 = v14;
  v44 = v1;
  outlined retain of UserKeyInfo(__dst);
  v17 = v43;
  memcpy(v43, v15, v16);
  v37 = UserKeyInfo.metadataEncodedKeyProtocolVersion.getter();
  outlined destroy of UserKeyInfo((uint64_t)v17);
  v42 = v37;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v25 = &v40;
  v40 = v3;
  v41 = v4;
  v28 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("existing keys' protocol version: ", 0x21uLL, 1);
  object = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v39 = v37;
  v20 = MEMORY[0x24BEE44F0];
  v21 = MEMORY[0x24BEE4548];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". current protocol version: ", 0x1CuLL, v28 & 1);
  v19 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v38 = *(_DWORD *)(v23 + 500);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v22, v28 & 1);
  v24 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  v8 = v23;
  swift_bridgeObjectRelease();
  v27 = v40;
  v26 = v41;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v29 = String.init(stringInterpolation:)();
  v36 = v9;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, v28 & 1);
  countAndFlagsBits = v10._countAndFlagsBits;
  v35 = v10._object;
  v30 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v33);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v37 < *(_DWORD *)(v8 + 500);
}

_QWORD *outlined destroy of UserKeyInfo?(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1[2], a1[3]);
    outlined consume of Data._Representation(a1[4], a1[5]);
    outlined consume of Data._Representation(a1[6], a1[7]);
    outlined consume of Data._Representation(a1[8], a1[9]);
    swift_bridgeObjectRelease();
    if ((a1[14] & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(a1[13], a1[14]);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of CachedKeyInfo?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for CachedKeyInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for Date();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    v3 = a1 + *(int *)(v5 + 20);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
    swift_bridgeObjectRelease();
    if ((*(_QWORD *)(v3 + 112) & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 112));
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t _s12GroupKitCore11UserKeyInfoVSgWOg(uint64_t a1)
{
  int v2;

  v2 = -1;
  if (!HIDWORD(*(_QWORD *)(a1 + 8)))
    v2 = *(_QWORD *)(a1 + 8);
  return (v2 + 1);
}

uint64_t outlined destroy of CachedKeyInfo(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v4 = *(int *)(type metadata accessor for CachedKeyInfo() + 20);
  v5 = a1 + v4;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v4 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v4 + 104), *(_QWORD *)(a1 + v4 + 112));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest and conformance FetchUserKeyInfoRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest and conformance FetchUserKeyInfoRequest;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest and conformance FetchUserKeyInfoRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest, &type metadata for FetchUserKeyInfoRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest and conformance FetchUserKeyInfoRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of FetchUserKeyInfoRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

char *outlined init with copy of FetchUserKeyInfoRequest.Response(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *UserKeyInfo;
  uint64_t v14;

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v14 = *((_QWORD *)UserKeyInfo - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(a1, 1))
  {
    v3 = type metadata accessor for FetchUserKeyInfoRequest.Response();
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v5 = UserKeyInfo[5];
    v6 = *(_QWORD *)&a1[v5];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a2[v5] = v6;
    v7 = UserKeyInfo[6];
    v8 = *(_QWORD *)&a1[v7];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a2[v7] = v8;
    v9 = UserKeyInfo[7];
    v10 = *(_QWORD *)&a1[v9];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a2[v9] = v10;
    (*(void (**)(void))(v14 + 56))();
  }
  return a2;
}

uint64_t outlined destroy of NetworkResponse<FetchUserKeyInfoRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t UserKeyInfo;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<FetchUserKeyInfoRequest.Response>)
              + 36);
  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 48))(v3, 1))
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined init with take of FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *UserKeyInfo;
  uint64_t result;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  result = a2;
  *(_QWORD *)(a2 + UserKeyInfo[5]) = *(_QWORD *)(a1 + UserKeyInfo[5]);
  *(_QWORD *)(a2 + UserKeyInfo[6]) = *(_QWORD *)(a1 + UserKeyInfo[6]);
  *(_QWORD *)(a2 + UserKeyInfo[7]) = *(_QWORD *)(a1 + UserKeyInfo[7]);
  return result;
}

uint64_t KeyDistributionService.newKeyVersion(incrementing:)(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result + 80);
  if (v1 != -1)
    return (v1 + 1);
  __break(1u);
  return result;
}

uint64_t KeyDistributionService.lookupKeyInfo(for:handle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;

  *(_QWORD *)(v6 + 936) = v5;
  *(_QWORD *)(v6 + 928) = a5;
  *(_QWORD *)(v6 + 920) = a4;
  *(_QWORD *)(v6 + 912) = a3;
  *(_QWORD *)(v6 + 904) = a2;
  *(_QWORD *)(v6 + 896) = a1;
  *(_QWORD *)(v6 + 840) = v6;
  *(_QWORD *)(v6 + 848) = 0;
  *(_QWORD *)(v6 + 536) = 0;
  *(_QWORD *)(v6 + 544) = 0;
  *(_QWORD *)(v6 + 856) = 0;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_QWORD *)(v6 + 872) = 0;
  *(_QWORD *)(v6 + 888) = 0;
  *(_QWORD *)(v6 + 808) = 0;
  *(_QWORD *)(v6 + 816) = 0;
  *(_QWORD *)(v6 + 824) = 0;
  *(_QWORD *)(v6 + 832) = 0;
  v7 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v6 + 944) = v7;
  *(_QWORD *)(v6 + 952) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 960) = swift_task_alloc();
  *(_QWORD *)(v6 + 968) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<LookupUserKeyInfoRequest.Response>);
  *(_QWORD *)(v6 + 976) = swift_task_alloc();
  *(_QWORD *)(v6 + 984) = type metadata accessor for LookupUserKeyInfoRequest.Response();
  *(_QWORD *)(v6 + 992) = swift_task_alloc();
  *(_QWORD *)(v6 + 1000) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v6 + 1008) = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v6 + 1016) = v8;
  *(_QWORD *)(v6 + 1024) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 1032) = swift_task_alloc();
  *(_QWORD *)(v6 + 848) = a3;
  *(_QWORD *)(v6 + 536) = a4;
  *(_QWORD *)(v6 + 544) = a5;
  *(_QWORD *)(v6 + 856) = v13;
  return swift_task_switch();
}

uint64_t KeyDistributionService.lookupKeyInfo(for:handle:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t (*v54)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;

  v66 = v0[116];
  v0[105] = v0;
  v0[69] = 0;
  v0[70] = 0;
  v0[71] = 0;
  v0[72] = 0;
  v0[73] = 0;
  v0[74] = 0;
  v0[75] = 0;
  v0[76] = 0;
  swift_bridgeObjectRetain();
  if (v66)
  {
    v55 = v65[116];
    v59 = v65[117];
    v58 = v65[115];
    v65[101] = v58;
    v65[102] = v55;
    outlined init with copy of UserHandleFormattingUtils(v59 + 256, (uint64_t)(v65 + 53));
    v56 = v65[56];
    v57 = v65[57];
    __swift_project_boxed_opaque_existential_1(v65 + 53, v56);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 16))(v58, v55, 1, v56);
    v60 = v1;
    v65[103] = v63;
    v65[104] = v1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v65 + 53));
    outlined init with copy of UserHandleFormattingUtils(v59 + 256, (uint64_t)(v65 + 58));
    v61 = v65[61];
    v62 = v65[62];
    __swift_project_boxed_opaque_existential_1(v65 + 58, v61);
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 8))(v63, v60, v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v65 + 58));
    swift_bridgeObjectRetain();
    if ((v64 & 1) != 0)
    {
      v65[71] = v63;
      v65[72] = v60;
      swift_bridgeObjectRelease();
      v65[75] = String.utf8toHexHash.getter(v63, v60);
      v65[76] = v2;
    }
    else
    {
      v65[69] = v63;
      v65[70] = v60;
      swift_bridgeObjectRelease();
      v65[73] = String.utf8toHexHash.getter(v63, v60);
      v65[74] = v3;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v42 = v65[129];
  v41 = v65[128];
  v43 = v65[127];
  v48 = (void *)v65[126];
  v51 = v65[117];
  v22 = v65[116];
  v21 = v65[115];
  v44 = (const void *)v65[114];
  v65[77] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v65[78] = v4;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Looking up user info. userID ", 0x1DuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v65[79] = Optional.logInfo.getter();
  v65[80] = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". unformattedHandle: ", 0x15uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v65[81] = v21;
  v65[82] = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v23 = Optional.logInfo.getter();
  v24 = v8;
  outlined destroy of String?();
  v65[83] = v23;
  v65[84] = v24;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". email: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  v25 = v65[69];
  v26 = v65[70];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65[85] = v25;
  v65[86] = v26;
  v27 = Optional.logInfo.getter();
  v28 = v10;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v65[87] = v27;
  v65[88] = v28;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". emailHash: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v29 = v65[73];
  v30 = v65[74];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65[89] = v29;
  v65[90] = v30;
  v31 = Optional.logInfo.getter();
  v32 = v12;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v65[91] = v31;
  v65[92] = v32;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". phoneNumber: ", 0xFuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  v33 = v65[71];
  v34 = v65[72];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65[93] = v33;
  v65[94] = v34;
  v35 = Optional.logInfo.getter();
  v36 = v14;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v65[95] = v35;
  v65[96] = v36;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". phoneNumberHash: ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v15);
  swift_bridgeObjectRelease();
  v37 = v65[75];
  v38 = v65[76];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65[97] = v37;
  v65[98] = v38;
  v39 = Optional.logInfo.getter();
  v40 = v16;
  outlined destroy of String?();
  swift_bridgeObjectRelease();
  v65[99] = v39;
  v65[100] = v40;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v42);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = *(_DWORD *)(v51 + 500);
  outlined init with copy of GPKUserID?(v44, v48);
  v49 = v65[73];
  v50 = v65[74];
  swift_bridgeObjectRetain();
  v46 = v65[75];
  v47 = v65[76];
  swift_bridgeObjectRetain();
  LookupUserKeyInfoRequest.init(keyProtocolVersion:altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(v45, 0, 0, v48, 0, 0, v49, v50, (uint64_t)(v65 + 63), 0, 0, v46, v47);
  v65[130] = *(_QWORD *)(v51 + 240);
  v53 = *(_QWORD *)(v51 + 248);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v54 = (uint64_t (*)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 + 32) + **(int **)(v53 + 32));
  v18 = (_QWORD *)swift_task_alloc();
  v65[131] = v18;
  v19 = lazy protocol witness table accessor for type LookupUserKeyInfoRequest and conformance LookupUserKeyInfoRequest();
  *v18 = v65[105];
  v18[1] = KeyDistributionService.lookupKeyInfo(for:handle:);
  return v54(v65[122], v65 + 63, &type metadata for LookupUserKeyInfoRequest, v19, ObjectType, v53);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 840) = *v1;
  *(_QWORD *)(v2 + 1056) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[132];
  v2 = v0[124];
  v16 = v2;
  v15 = v0[123];
  v14 = v0[122];
  v3 = v0[121];
  v0[105] = v0;
  outlined init with copy of LookupUserKeyInfoRequest.Response(v14 + *(int *)(v3 + 36), v2);
  outlined destroy of NetworkResponse<LookupUserKeyInfoRequest.Response>(v14);
  swift_unknownObjectRelease();
  v17 = *(_QWORD *)(v16 + *(int *)(v15 + 20));
  swift_bridgeObjectRetain();
  v0[108] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
  lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
  result = Sequence.sorted(by:)();
  v18 = result;
  if (!v1)
  {
    outlined destroy of [UserKeyInfo]();
    v13[109] = result;
    swift_bridgeObjectRetain();
    v13[110] = v18;
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
    BidirectionalCollection.last.getter();
    outlined destroy of [UserKeyInfo]();
    outlined init with take of UserKeyInfo?(v13 + 36, v13 + 19);
    outlined init with take of UserKeyInfo?(v13 + 19, v13 + 2);
    if (_s12GroupKitCore11UserKeyInfoVSgWOg((uint64_t)(v13 + 2)) == 1)
    {
      v9 = v13[124];
      v8 = v13[120];
      v6 = v13[119];
      v7 = v13[118];
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE3DD20], v7);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
      outlined destroy of LookupUserKeyInfoRequest.Response(v9);
    }
    else
    {
      v12 = v13[124];
      __dst = (void *)v13[113];
      v10 = v13[112];
      v13[111] = v13 + 2;
      v5 = type metadata accessor for GPKUserID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v10, v12);
      outlined retain of UserKeyInfo(v13 + 2);
      memcpy(__dst, v13 + 2, 0x88uLL);
      outlined release of UserKeyInfo(v13 + 2);
      swift_bridgeObjectRelease();
      outlined destroy of LookupUserKeyInfoRequest.Response(v12);
    }
    outlined destroy of LookupUserKeyInfoRequest((uint64_t)(v13 + 63));
    outlined destroy of String?();
    outlined destroy of String?();
    outlined destroy of String?();
    outlined destroy of String?();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v13[105] + 8))();
  }
  return result;
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 840) = v0;
  swift_unknownObjectRelease();
  outlined destroy of LookupUserKeyInfoRequest(v0 + 504);
  outlined destroy of String?();
  outlined destroy of String?();
  outlined destroy of String?();
  outlined destroy of String?();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 840) + 8))();
}

BOOL implicit closure #1 in KeyDistributionService.lookupKeyInfo(for:handle:)(const void *a1, const void *a2)
{
  _BYTE v5[136];
  _BYTE v6[136];
  const void *v7;
  const void *v8;
  _BYTE __dst[136];
  _BYTE v10[136];

  memcpy(__dst, a1, sizeof(__dst));
  v8 = a1;
  memcpy(v10, a2, sizeof(v10));
  v7 = a2;
  type metadata accessor for KeyDistributionService();
  memcpy(v6, __dst, sizeof(v6));
  memcpy(v5, v10, sizeof(v5));
  return static KeyDistributionService.areInIncreasingOrder(_:_:)(v6, v5);
}

BOOL static KeyDistributionService.areInIncreasingOrder(_:_:)(const void *a1, const void *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  int v9;
  int v10;
  _BYTE v11[136];
  _BYTE v12[136];
  _BYTE v13[136];
  _BYTE v14[136];
  uint64_t v15;
  const void *v16;
  const void *v17;
  _QWORD __dst[17];
  _QWORD v19[17];

  memcpy(__dst, a1, sizeof(__dst));
  v17 = a1;
  memcpy(v19, a2, sizeof(v19));
  v16 = a2;
  v15 = v2;
  outlined retain of UserKeyInfo(__dst);
  memcpy(v14, __dst, sizeof(v14));
  v10 = UserKeyInfo.metadataEncodedKeyProtocolVersion.getter();
  outlined destroy of UserKeyInfo((uint64_t)v14);
  outlined retain of UserKeyInfo(v19);
  memcpy(v13, v19, sizeof(v13));
  v9 = UserKeyInfo.metadataEncodedKeyProtocolVersion.getter();
  outlined destroy of UserKeyInfo((uint64_t)v13);
  if (v10 == v9)
  {
    return LODWORD(__dst[10]) < LODWORD(v19[10]);
  }
  else
  {
    outlined retain of UserKeyInfo(__dst);
    memcpy(v12, __dst, sizeof(v12));
    v5 = UserKeyInfo.metadataEncodedKeyProtocolVersion.getter();
    outlined destroy of UserKeyInfo((uint64_t)v12);
    outlined retain of UserKeyInfo(v19);
    memcpy(v11, v19, sizeof(v11));
    v4 = UserKeyInfo.metadataEncodedKeyProtocolVersion.getter();
    outlined destroy of UserKeyInfo((uint64_t)v11);
    return v5 < v4;
  }
}

uint64_t KeyDistributionService.lookupKeyInfos(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Type;
  uint64_t v8;

  *(_QWORD *)(v2 + 944) = v1;
  *(_QWORD *)(v2 + 936) = a1;
  *(_QWORD *)(v2 + 800) = v2;
  *(_QWORD *)(v2 + 808) = 0;
  *(_QWORD *)(v2 + 816) = 0;
  *(_QWORD *)(v2 + 824) = 0;
  *(_QWORD *)(v2 + 832) = 0;
  *(_QWORD *)(v2 + 840) = 0;
  *(_QWORD *)(v2 + 848) = 0;
  *(_QWORD *)(v2 + 856) = 0;
  *(_OWORD *)(v2 + 672) = 0u;
  *(_OWORD *)(v2 + 688) = 0u;
  *(_QWORD *)(v2 + 864) = 0;
  *(_QWORD *)(v2 + 872) = 0;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 712) = 0;
  memset((void *)(v2 + 632), 0, 0x28uLL);
  memset((void *)(v2 + 536), 0, 0x38uLL);
  *(_QWORD *)(v2 + 768) = 0;
  *(_QWORD *)(v2 + 776) = 0;
  *(_QWORD *)(v2 + 896) = 0;
  *(_QWORD *)(v2 + 912) = 0;
  *(_QWORD *)(v2 + 928) = 0;
  *(_QWORD *)(v2 + 784) = 0;
  *(_QWORD *)(v2 + 792) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyFetchType?);
  *(_QWORD *)(v2 + 952) = swift_task_alloc();
  v3 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v2 + 960) = v3;
  *(_QWORD *)(v2 + 968) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 976) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>?);
  *(_QWORD *)(v2 + 984) = swift_task_alloc();
  *(_QWORD *)(v2 + 992) = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 1000) = v4;
  *(_QWORD *)(v2 + 1008) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 1016) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v2 + 1024) = swift_task_alloc();
  *(_QWORD *)(v2 + 1032) = swift_task_alloc();
  v5 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v2 + 1040) = v5;
  *(_QWORD *)(v2 + 1048) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 1056) = swift_task_alloc();
  *(_QWORD *)(v2 + 1064) = swift_task_alloc();
  *(_QWORD *)(v2 + 1072) = swift_task_alloc();
  Type = type metadata accessor for KeyFetchType();
  *(_QWORD *)(v2 + 1080) = Type;
  *(_QWORD *)(v2 + 1088) = *(_QWORD *)(Type - 8);
  *(_QWORD *)(v2 + 1096) = swift_task_alloc();
  *(_QWORD *)(v2 + 1104) = swift_task_alloc();
  *(_QWORD *)(v2 + 1112) = swift_task_alloc();
  *(_QWORD *)(v2 + 1120) = swift_task_alloc();
  *(_QWORD *)(v2 + 808) = a1;
  *(_QWORD *)(v2 + 816) = v8;
  return swift_task_switch();
}

uint64_t KeyDistributionService.lookupKeyInfos(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  *(_QWORD *)(v0 + 800) = v0;
  *(_QWORD *)(v0 + 1128) = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  if ((Set.isEmpty.getter() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
    _allocateUninitializedArray<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
    v8 = Dictionary.init(dictionaryLiteral:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v18[100] + 8))(v8);
  }
  else
  {
    v12 = v18[118];
    v15 = KeyDistributionService.splitUserIDsAndHandles(items:)(v18[117]);
    v18[142] = v15;
    v18[143] = v1;
    v18[103] = v15;
    v18[104] = v1;
    v13 = KeyDistributionService.computeHandleHashes(handles:)();
    v16 = v2;
    v17 = v3;
    v18[144] = v13;
    v18[145] = v2;
    v18[146] = v3;
    v18[105] = v13;
    v18[106] = v2;
    v18[107] = v3;
    v14 = *(_DWORD *)(v12 + 500);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LookupMultiUserKeyInfoRequest.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:)(v14, v15, v16, v17, (uint64_t)(v18 + 84));
    v4 = v18[118];
    v18[147] = *(_QWORD *)(v4 + 240);
    v10 = *(_QWORD *)(v4 + 248);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v11 = (uint64_t (*)(_QWORD *, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 32) + **(int **)(v10 + 32));
    v5 = (_QWORD *)swift_task_alloc();
    v18[148] = v5;
    v6 = lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest and conformance LookupMultiUserKeyInfoRequest();
    *v5 = v18[100];
    v5[1] = KeyDistributionService.lookupKeyInfos(for:);
    return v11(v18 + 53, v18 + 84, &type metadata for LookupMultiUserKeyInfoRequest, v6, ObjectType, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 800) = *v1;
  *(_QWORD *)(v2 + 1192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[136];

  v0[100] = v0;
  v66 = v0[58];
  swift_bridgeObjectRetain();
  outlined destroy of NetworkResponse<LookupMultiUserKeyInfoRequest.Response>((uint64_t)(v0 + 53));
  v0[108] = v66;
  swift_unknownObjectRelease();
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v0[109] = Dictionary.init()();
  swift_bridgeObjectRetain();
  v0[110] = v66;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.KeyLookupResult]);
  lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance [A]();
  Collection<>.makeIterator()();
  v67 = v0[149];
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[LookupMultiUserKeyInfoRequest.KeyLookupResult]>);
    IndexingIterator.next()();
    v57 = *(_QWORD *)(v64 + 480);
    v58 = *(_QWORD *)(v64 + 488);
    v59 = *(_QWORD *)(v64 + 496);
    v60 = *(_QWORD *)(v64 + 504);
    v61 = *(_QWORD *)(v64 + 512);
    v62 = *(_QWORD *)(v64 + 520);
    v63 = *(_QWORD *)(v64 + 528);
    if (!v60)
      break;
    v53 = *(_QWORD *)(v64 + 1048);
    v55 = *(_QWORD *)(v64 + 1040);
    v54 = *(_QWORD *)(v64 + 1032);
    *(_QWORD *)(v64 + 536) = v57;
    *(_QWORD *)(v64 + 544) = v58;
    *(_QWORD *)(v64 + 552) = v59;
    *(_QWORD *)(v64 + 560) = v60;
    *(_QWORD *)(v64 + 568) = v61;
    *(_BYTE *)(v64 + 576) = v62 & 1;
    *(_QWORD *)(v64 + 584) = v63;
    swift_bridgeObjectRetain();
    GPKUserID.init(from:)();
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    if (v56(v54, 1, v55) != 1)
    {
      v49 = *(void **)(v64 + 1120);
      v48 = *(const void **)(v64 + 1112);
      v52 = *(_QWORD *)(v64 + 1072);
      v50 = *(_QWORD *)(v64 + 1048);
      v51 = *(_QWORD *)(v64 + 1040);
      (*(void (**)(void))(v50 + 32))();
      (*(void (**)(const void *, uint64_t, uint64_t))(v50 + 16))(v48, v52, v51);
      swift_storeEnumTagMultiPayload();
      outlined init with take of KeyFetchType(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v51);
      goto LABEL_8;
    }
    outlined destroy of GPKUserID?(*(_QWORD *)(v64 + 1032));
    swift_bridgeObjectRetain();
    *(_QWORD *)(v64 + 752) = v59;
    *(_QWORD *)(v64 + 760) = v60;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    v46 = *(_QWORD *)(v64 + 736);
    v47 = *(_QWORD *)(v64 + 744);
    if (v47)
    {
      v45 = *(void **)(v64 + 1120);
      v44 = *(_QWORD **)(v64 + 1112);
      *(_QWORD *)(v64 + 768) = v46;
      *(_QWORD *)(v64 + 776) = v47;
      swift_bridgeObjectRetain();
      *v44 = v46;
      v44[1] = v47;
      swift_storeEnumTagMultiPayload();
      outlined init with take of KeyFetchType(v44, v45);
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRetain();
      *(_QWORD *)(v64 + 888) = v63;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]);
      lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance [A]();
      result = Sequence.compactMap<A>(_:)();
      if (v67)
        return result;
      outlined destroy of [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]();
      *(_QWORD *)(v64 + 896) = result;
      *(_QWORD *)(v64 + 904) = result;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
      lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
      v40 = Sequence.sorted(by:)();
      *(_QWORD *)(v64 + 912) = v40;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v64 + 920) = v40;
      lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]();
      BidirectionalCollection.last.getter();
      outlined destroy of [UserKeyInfo]();
      outlined init with take of UserKeyInfo?((const void *)(v64 + 288), (void *)(v64 + 152));
      outlined init with take of UserKeyInfo?((const void *)(v64 + 152), (void *)(v64 + 16));
      if (_s12GroupKitCore11UserKeyInfoVSgWOg(v64 + 16) != 1)
      {
        *(_QWORD *)(v64 + 928) = v64 + 16;
        swift_bridgeObjectRetain();
        if (v58)
        {
          v39 = *(_QWORD *)(v64 + 1040);
          v38 = *(_QWORD *)(v64 + 1024);
          *(_QWORD *)(v64 + 784) = v57;
          *(_QWORD *)(v64 + 792) = v58;
          swift_bridgeObjectRetain();
          GPKUserID.init(from:)();
          if (v56(v38, 1, v39) != 1)
          {
            v31 = *(_QWORD **)(v64 + 1120);
            v33 = *(_QWORD **)(v64 + 1112);
            v36 = *(_QWORD *)(v64 + 1064);
            v32 = *(_QWORD *)(v64 + 1056);
            v35 = *(_QWORD *)(v64 + 1048);
            v37 = *(_QWORD *)(v64 + 1040);
            v34 = *(_QWORD *)(v64 + 992);
            (*(void (**)(void))(v35 + 32))();
            outlined init with copy of KeyFetchType(v31, v33);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v32, v36, v37);
            outlined retain of UserKeyInfo((_QWORD *)(v64 + 16));
            memcpy(v68, (const void *)(v64 + 16), sizeof(v68));
            KeyFetchResult.init(userID:keyInfo:)(v32, v68, v34);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v34, 0, 1);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
            Dictionary.subscript.setter();
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
            swift_bridgeObjectRelease();
            outlined release of UserKeyInfo((_QWORD *)(v64 + 16));
            goto LABEL_16;
          }
          outlined destroy of GPKUserID?(*(_QWORD *)(v64 + 1024));
          swift_bridgeObjectRelease();
          outlined release of UserKeyInfo((_QWORD *)(v64 + 16));
        }
        else
        {
          outlined release of UserKeyInfo((_QWORD *)(v64 + 16));
        }
      }
      v30 = *(uint64_t **)(v64 + 992);
      v29 = *(_QWORD *)(v64 + 976);
      v27 = *(_QWORD *)(v64 + 968);
      v28 = *(_QWORD *)(v64 + 960);
      outlined init with copy of KeyFetchType(*(_QWORD **)(v64 + 1120), *(_QWORD **)(v64 + 1112));
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v29, *MEMORY[0x24BE3DD38], v28);
      *v30 = InternalError.__allocating_init(_:internalInfo:)();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v30, 0, 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
      Dictionary.subscript.setter();
LABEL_16:
      v26 = *(_QWORD *)(v64 + 1120);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of KeyFetchType(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = 0;
    }
    else
    {
      v42 = *(_QWORD *)(v64 + 1016);
      v41 = *(_QWORD *)(v64 + 1008);
      v43 = *(_QWORD *)(v64 + 1000);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("error: resulting lookupHandle does not appear to be a userID or match an expected handle hash", 0x5DuLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v42);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  outlined destroy of IndexingIterator<[LookupMultiUserKeyInfoRequest.KeyLookupResult]>();
  swift_bridgeObjectRetain();
  Set.makeIterator()();
  memcpy((void *)(v64 + 632), (const void *)(v64 + 592), 0x28uLL);
  while (1)
  {
    v23 = *(_QWORD *)(v64 + 1088);
    v25 = *(_QWORD *)(v64 + 1080);
    v24 = *(_QWORD *)(v64 + 952);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>.Iterator);
    Set.Iterator.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v25) == 1)
      break;
    v19 = *(_QWORD *)(v64 + 1128);
    v17 = *(_QWORD **)(v64 + 1104);
    v20 = *(_QWORD **)(v64 + 1096);
    v18 = *(_QWORD *)(v64 + 1080);
    v21 = *(_QWORD *)(v64 + 984);
    outlined init with take of KeyFetchType(*(const void **)(v64 + 952), v17);
    outlined init with copy of KeyFetchType(v17, v20);
    MEMORY[0x24263485C](v20, *(_QWORD *)(v64 + 872), v18, v65, v19);
    v22 = *(_QWORD *)(v65 - 8);
    v16 = (*(unsigned int (**)(uint64_t, uint64_t))(v22 + 48))(v21, 1) == 1;
    v15 = *(_QWORD *)(v64 + 1096);
    outlined destroy of Result<KeyFetchResult, Error>?(*(id **)(v64 + 984));
    outlined destroy of KeyFetchType(v15);
    if (v16)
    {
      v12 = *(_QWORD **)(v64 + 1112);
      v14 = *(_QWORD **)(v64 + 1104);
      v7 = *(_QWORD *)(v64 + 1016);
      v6 = *(_QWORD *)(v64 + 1008);
      v8 = *(_QWORD *)(v64 + 1000);
      v13 = *(uint64_t **)(v64 + 992);
      v11 = *(_QWORD *)(v64 + 976);
      v9 = *(_QWORD *)(v64 + 968);
      v10 = *(_QWORD *)(v64 + 960);
      *(_QWORD *)(v64 + 720) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v64 + 728) = v2;
      v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("KDS returned no result for item ", 0x20uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v3);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyDistributionService.swift", 0x29uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of KeyFetchType(v14, v12);
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3DD38], v10);
      *v13 = InternalError.__allocating_init(_:internalInfo:)();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v65);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
      Dictionary.subscript.setter();
      outlined destroy of KeyFetchType((uint64_t)v14);
    }
    else
    {
      outlined destroy of KeyFetchType(*(_QWORD *)(v64 + 1104));
    }
  }
  outlined destroy of Set<KeyFetchType>.Iterator();
  v5 = *(_QWORD *)(v64 + 872);
  swift_bridgeObjectRetain();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  swift_bridgeObjectRelease();
  outlined destroy of LookupMultiUserKeyInfoRequest(v64 + 672);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v64 + 800) + 8))(v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 800) = v0;
  swift_unknownObjectRelease();
  outlined destroy of LookupMultiUserKeyInfoRequest(v0 + 672);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 800) + 8))();
}

uint64_t KeyDistributionService.splitUserIDsAndHandles(items:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t Type;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE __b[40];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;

  v27 = a1;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v28 = __b;
  v30 = 40;
  memset(__b, 0, sizeof(__b));
  v33 = 0;
  v34 = 0;
  v41 = 0;
  v12 = 0;
  v23 = type metadata accessor for GPKUserID();
  v13 = *(_QWORD *)(v23 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v15 = (char *)v8 - v14;
  v16 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v17 = (char *)v8 - v16;
  v41 = (char *)v8 - v16;
  Type = type metadata accessor for KeyFetchType();
  v18 = *(_QWORD *)(Type - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](Type);
  v20 = (_QWORD *)((char *)v8 - v19);
  v21 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v22 = (char *)v8 - v21;
  v40 = (char *)v8 - v21;
  v24 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyFetchType?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v8 - v24;
  v39 = v6;
  v38 = v1;
  v37 = Array.init()();
  v36 = specialized Array.init()();
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  v29 = &v42;
  Set.makeIterator()();
  memcpy(v28, v29, v30);
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>.Iterator);
    Set.Iterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1, Type) == 1)
      break;
    outlined init with take of KeyFetchType(v25, v22);
    outlined init with copy of KeyFetchType(v22, v20);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = *v20;
      v11 = v20[1];
      v33 = v10;
      v34 = v11;
      swift_bridgeObjectRetain();
      v31 = v10;
      v32 = v11;
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 32))(v17, v20, v23);
      v41 = v17;
      (*(void (**)(char *))(v13 + 16))(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v23);
    }
    outlined destroy of KeyFetchType((uint64_t)v22);
  }
  outlined destroy of Set<KeyFetchType>.Iterator();
  v8[2] = &v37;
  v9 = v37;
  swift_bridgeObjectRetain();
  v8[1] = &v36;
  v8[3] = v36;
  swift_bridgeObjectRetain();
  outlined destroy of [String]();
  outlined destroy of [GPKUserID]();
  return v9;
}

uint64_t KeyDistributionService.computeHandleHashes(handles:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = Dictionary.init()();
  specialized Array.init()();
  specialized Array.init()();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
    IndexingIterator.next()();
    if (!v2)
      break;
    KeyDistributionService.userHandleHash(for:)(v1, v2);
    swift_bridgeObjectRetain();
    specialized Array.append(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined destroy of IndexingIterator<[String]>();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of [String]();
  outlined destroy of [String]();
  outlined destroy of [String : String]();
  return v3;
}

_QWORD *closure #1 in KeyDistributionService.lookupKeyInfos(for:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  _BYTE __dst[136];
  _QWORD v6[18];
  _BYTE v7[136];
  _QWORD v8[17];

  outlined init with take of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(a1, v7);
  v6[17] = a1;
  outlined init with take of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(v7, v8);
  if (_s12GroupKitCore29LookupMultiUserKeyInfoRequestV05MaybegH0OWOg((uint64_t)v8) == 1)
  {
    _s12GroupKitCore11UserKeyInfoVSgWOi0_(v6);
    return outlined init with take of UserKeyInfo?(v6, a2);
  }
  else
  {
    outlined retain of UserKeyInfo(v8);
    outlined retain of UserKeyInfo(v8);
    memcpy(__dst, v8, sizeof(__dst));
    _s12GroupKitCore11UserKeyInfoVSgWOi_(__dst);
    outlined init with take of UserKeyInfo?(__dst, a2);
    return outlined release of UserKeyInfo(v8);
  }
}

BOOL implicit closure #1 in KeyDistributionService.lookupKeyInfos(for:)(const void *a1, const void *a2)
{
  _BYTE v5[136];
  _BYTE v6[136];
  const void *v7;
  const void *v8;
  _BYTE __dst[136];
  _BYTE v10[136];

  memcpy(__dst, a1, sizeof(__dst));
  v8 = a1;
  memcpy(v10, a2, sizeof(v10));
  v7 = a2;
  type metadata accessor for KeyDistributionService();
  memcpy(v6, __dst, sizeof(v6));
  memcpy(v5, v10, sizeof(v5));
  return static KeyDistributionService.areInIncreasingOrder(_:_:)(v6, v5);
}

BOOL implicit closure #1 in KeyDistributionService.fetchCurrentUserKeyInfo()(const void *a1, const void *a2)
{
  _BYTE v5[136];
  _BYTE v6[136];
  const void *v7;
  const void *v8;
  _BYTE __dst[136];
  _BYTE v10[136];

  memcpy(__dst, a1, sizeof(__dst));
  v8 = a1;
  memcpy(v10, a2, sizeof(v10));
  v7 = a2;
  type metadata accessor for KeyDistributionService();
  memcpy(v6, __dst, sizeof(v6));
  memcpy(v5, v10, sizeof(v5));
  return static KeyDistributionService.areInIncreasingOrder(_:_:)(v6, v5);
}

unint64_t lazy protocol witness table accessor for type [UserKeyInfo] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UserKeyInfo]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UserKeyInfo]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UserKeyInfo] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of FetchUserKeyInfoRequest.ExistingKey(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of FetchUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of UserKeyInfo?(uint64_t a1)
{
  outlined copy of UserKeyInfo?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
}

uint64_t outlined copy of UserKeyInfo?(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(a3, a4);
    outlined copy of Data._Representation(a5, a6);
    outlined copy of Data._Representation(a7, a8);
    outlined copy of Data._Representation(a9, a10);
    swift_bridgeObjectRetain();
    outlined copy of Data?(a14, a15);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest and conformance InitRegisterUserKeyInfoRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest and conformance InitRegisterUserKeyInfoRequest;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest and conformance InitRegisterUserKeyInfoRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest, &type metadata for InitRegisterUserKeyInfoRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest and conformance InitRegisterUserKeyInfoRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of InitRegisterUserKeyInfoRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined destroy of NetworkResponse<InitRegisterUserKeyInfoRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitRegisterUserKeyInfoRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest and conformance CompleteRegisterUserKeyInfoRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest and conformance CompleteRegisterUserKeyInfoRequest;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest and conformance CompleteRegisterUserKeyInfoRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest, &type metadata for CompleteRegisterUserKeyInfoRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest and conformance CompleteRegisterUserKeyInfoRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of CompleteRegisterUserKeyInfoRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined destroy of NetworkResponse<CompleteRegisterUserKeyInfoRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteRegisterUserKeyInfoRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type LookupUserKeyInfoRequest and conformance LookupUserKeyInfoRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupUserKeyInfoRequest and conformance LookupUserKeyInfoRequest;
  if (!lazy protocol witness table cache variable for type LookupUserKeyInfoRequest and conformance LookupUserKeyInfoRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupUserKeyInfoRequest, &type metadata for LookupUserKeyInfoRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupUserKeyInfoRequest and conformance LookupUserKeyInfoRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of NetworkResponse<LookupUserKeyInfoRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<LookupUserKeyInfoRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  type metadata accessor for LookupUserKeyInfoRequest.Response();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest and conformance LookupMultiUserKeyInfoRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest and conformance LookupMultiUserKeyInfoRequest;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest and conformance LookupMultiUserKeyInfoRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest, &type metadata for LookupMultiUserKeyInfoRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest and conformance LookupMultiUserKeyInfoRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of NetworkResponse<LookupMultiUserKeyInfoRequest.Response>(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.KeyLookupResult]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[LookupMultiUserKeyInfoRequest.KeyLookupResult]>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<KeyFetchType>.Iterator()
{
  outlined consume of Set<KeyFetchType>.Iterator._Variant();
}

uint64_t outlined consume of Set<KeyFetchType>.Iterator._Variant()
{
  return swift_release();
}

id *outlined destroy of Result<KeyFetchResult, Error>?(id *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  if (!(*(unsigned int (**)(id *, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {

    }
    else
    {
      v1 = type metadata accessor for GPKUserID();
      (*(void (**)(id *))(*(_QWORD *)(v1 - 8) + 8))(a1);
      v3 = (char *)a1 + *(int *)(type metadata accessor for KeyFetchResult() + 20);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3));
      outlined consume of Data._Representation(*((_QWORD *)v3 + 4), *((_QWORD *)v3 + 5));
      outlined consume of Data._Representation(*((_QWORD *)v3 + 6), *((_QWORD *)v3 + 7));
      outlined consume of Data._Representation(*((_QWORD *)v3 + 8), *((_QWORD *)v3 + 9));
      swift_bridgeObjectRelease();
      if ((*((_QWORD *)v3 + 14) & 0xF000000000000000) != 0xF000000000000000)
        outlined consume of Data._Representation(*((_QWORD *)v3 + 13), *((_QWORD *)v3 + 14));
      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKUserID]()
{
  swift_bridgeObjectRelease();
}

uint64_t KeyDistributionService.userHandleHash(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = 0;
  v21 = 0;
  v22 = 0;
  v27 = a1;
  v28 = a2;
  outlined init with copy of UserHandleFormattingUtils(v2 + 256, (uint64_t)v23);
  v9 = v24;
  v10 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, a2, 1, v9);
  v13 = v3;
  v21 = v16;
  v22 = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  outlined init with copy of UserHandleFormattingUtils(v12 + 256, (uint64_t)v18);
  v14 = v19;
  v15 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 8))(v16, v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if ((v17 & 1) != 0)
  {
    v6 = String.utf8toHexHash.getter(v16, v13);
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    v5 = String.utf8toHexHash.getter(v16, v13);
    swift_bridgeObjectRelease();
    return v5;
  }
}

uint64_t KeyDistributionService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  __swift_destroy_boxed_opaque_existential_1(v0 + 200);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  outlined destroy of Metrics(v0 + 296);
  outlined destroy of Promise<KeyDistributionService.RegistrationResult>?();
  swift_defaultActor_destroy();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Promise<KeyDistributionService.RegistrationResult>?()
{
  swift_release();
}

uint64_t KeyDistributionService.__deallocating_deinit()
{
  KeyDistributionService.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t KeyDistributionService.unownedExecutor.getter()
{
  return UnownedSerialExecutor.init(_:)();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance KeyDistributionService()
{
  return KeyDistributionService.unownedExecutor.getter();
}

uint64_t protocol witness for KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:) in conformance KeyDistributionService(char a1, char a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:) in conformance KeyDistributionService;
  return KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1 & 1, a2 & 1, a3 & 1);
}

_QWORD *protocol witness for KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:) in conformance KeyDistributionService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for KeyDistributionServiceProviding.lookupKeyInfo(for:handle:) in conformance KeyDistributionService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v5 + 16) = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = protocol witness for KeyDistributionServiceProviding.lookupKeyInfo(for:handle:) in conformance KeyDistributionService;
  return KeyDistributionService.lookupKeyInfo(for:handle:)(a1, a2, a3, a4, a5);
}

_QWORD *protocol witness for KeyDistributionServiceProviding.lookupKeyInfo(for:handle:) in conformance KeyDistributionService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for KeyDistributionServiceProviding.lookupKeyInfos(for:) in conformance KeyDistributionService(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for KeyDistributionServiceProviding.lookupKeyInfos(for:) in conformance KeyDistributionService;
  return KeyDistributionService.lookupKeyInfos(for:)(a1);
}

_QWORD *protocol witness for KeyDistributionServiceProviding.lookupKeyInfos(for:) in conformance KeyDistributionService(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for KeyDistributionServiceProviding.fetchCurrentUserPublicKey() in conformance KeyDistributionService()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for KeyDistributionServiceProviding.fetchCurrentUserPublicKey() in conformance KeyDistributionService;
  return KeyDistributionService.fetchCurrentUserPublicKey()();
}

_QWORD *protocol witness for KeyDistributionServiceProviding.fetchCurrentUserPublicKey() in conformance KeyDistributionService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v5 = *v4;
  *(_QWORD *)(v5 + 16) = *v4;
  v8 = (_QWORD *)(v5 + 16);
  v6 = swift_task_dealloc();
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v8 + 8))(v8, v6);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*v8 + 8))(v8, a1, a2, a3);
}

uint64_t KeyDistributionService.fetchCurrentUserPublicKey()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  Swift::String v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("API deprecated", 0xEuLL, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(v0 + 16) + 8))(-1, v1._countAndFlagsBits, v1._object);
}

uint64_t protocol witness for KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:) in conformance KeyDistributionService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v8 + 16) = v8;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = protocol witness for KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:) in conformance KeyDistributionService;
  return KeyDistributionService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *protocol witness for KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:) in conformance KeyDistributionService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v5 = *v4;
  *(_QWORD *)(v5 + 16) = *v4;
  v8 = (_QWORD *)(v5 + 16);
  v6 = swift_task_dealloc();
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v8 + 8))(v8, v6);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*v8 + 8))(v8, a1, a2, a3);
}

uint64_t KeyDistributionService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9[12] = v9;
  v9[2] = 0;
  v9[3] = 0;
  v9[13] = 0;
  v9[4] = 0;
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[9] = 0;
  v9[10] = 0;
  v9[11] = 0;
  v9[14] = 0;
  v9[2] = a1;
  v9[3] = a2;
  v9[13] = a3;
  v9[4] = a4;
  v9[5] = a5;
  v9[6] = a6;
  v9[7] = a7;
  v9[8] = a8;
  v9[9] = v11;
  v9[10] = v12;
  v9[11] = v13;
  v9[14] = v8;
  return swift_task_switch();
}

uint64_t KeyDistributionService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)()
{
  uint64_t v0;
  Swift::String v1;

  *(_QWORD *)(v0 + 96) = v0;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("API deprecated", 0xEuLL, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(v0 + 96) + 8))(-1, v1._countAndFlagsBits, v1._object);
}

unint64_t base witness table accessor for Equatable in UserKeyProtocolVersion()
{
  return lazy protocol witness table accessor for type UserKeyProtocolVersion and conformance UserKeyProtocolVersion();
}

unint64_t base witness table accessor for Equatable in KeyDistributionService.RegistrationResult()
{
  return lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult();
}

unint64_t lazy protocol witness table accessor for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult;
  if (!lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for KeyDistributionService.RegistrationResult, &type metadata for KeyDistributionService.RegistrationResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult;
  if (!lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for KeyDistributionService.RegistrationResult, &type metadata for KeyDistributionService.RegistrationResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyDistributionService.RegistrationResult and conformance KeyDistributionService.RegistrationResult);
    return v0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for UserKeyProtocolVersion(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for UserKeyProtocolVersion(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for UserKeyProtocolVersion(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for UserKeyProtocolVersion(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserKeyProtocolVersion()
{
  return &type metadata for UserKeyProtocolVersion;
}

uint64_t type metadata accessor for KeyDistributionService()
{
  return objc_opt_self();
}

uint64_t method lookup function for KeyDistributionService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KeyDistributionService.__allocating_init(userStore:accountManager:cryptographyService:securityService:networkService:userHandleFormattingUtils:metrics:currentKeyProtocolVersion:maxRetries:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 168))(a1, a2);
}

uint64_t getEnumTagSinglePayload for KeyDistributionService.RegistrationResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for KeyDistributionService.RegistrationResult(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for KeyDistributionService.RegistrationResult(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for KeyDistributionService.RegistrationResult(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionService.RegistrationResult()
{
  return &type metadata for KeyDistributionService.RegistrationResult;
}

uint64_t initializeBufferWithCopyOfBuffer for KeyDistributionService.UserHandleHash(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of KeyDistributionService.UserHandleHash();
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t outlined copy of KeyDistributionService.UserHandleHash()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for KeyDistributionService.UserHandleHash()
{
  return outlined consume of KeyDistributionService.UserHandleHash();
}

uint64_t outlined consume of KeyDistributionService.UserHandleHash()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyDistributionService.UserHandleHash(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of KeyDistributionService.UserHandleHash();
  result = a1;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t assignWithCopy for KeyDistributionService.UserHandleHash(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of KeyDistributionService.UserHandleHash();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  outlined consume of KeyDistributionService.UserHandleHash();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for KeyDistributionService.UserHandleHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3 & 1;
  outlined consume of KeyDistributionService.UserHandleHash();
}

uint64_t getEnumTagSinglePayload for KeyDistributionService.UserHandleHash(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      v4 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v2 = *(unsigned __int8 *)(a1 + 16) ^ 0xFF;
      if (v2 >= 0xFE)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDistributionService.UserHandleHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 17);
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_BYTE *)(result + 16) = 0;
    if (a3 >= 0xFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *v3 = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for KeyDistributionService.UserHandleHash(uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) & 1;
}

uint64_t destructiveInjectEnumTag for KeyDistributionService.UserHandleHash(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDistributionService.UserHandleHash()
{
  return &type metadata for KeyDistributionService.UserHandleHash;
}

uint64_t _s12GroupKitCore29LookupMultiUserKeyInfoRequestV05MaybegH0OWOg(uint64_t a1)
{
  int v2;

  v2 = -1;
  if (!HIDWORD(*(_QWORD *)(a1 + 8)))
    v2 = *(_QWORD *)(a1 + 8);
  return (v2 + 1);
}

uint64_t partial apply for closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char v5;
  uint64_t v6;
  char v7;
  char v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_BYTE *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 33);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1, v5 & 1, v6, v7 & 1, v8 & 1);
}

uint64_t partial apply for closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 25);
  v8 = *(_BYTE *)(v1 + 26);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1, v5, v6 & 1, v7 & 1, v8 & 1);
}

