uint64_t AsyncSequence<>.buffer(policy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  result = type metadata accessor for AsyncBufferSequence(0, a2, a3, v14);
  v16 = a4 + *(int *)(result + 36);
  *(_QWORD *)v16 = v12;
  *(_BYTE *)(v16 + 8) = v13;
  return result;
}

uint64_t static AsyncBufferSequencePolicy.bounded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243B4CCC8(a1, 0, a2);
}

void static AsyncBufferSequencePolicy.unbounded.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 3;
}

uint64_t static AsyncBufferSequencePolicy.bufferingLatest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243B4CCC8(a1, 1, a2);
}

uint64_t static AsyncBufferSequencePolicy.bufferingOldest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243B4CCC8(a1, 2, a2);
}

uint64_t sub_243B4CCC8@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a3 = result;
    *(_BYTE *)(a3 + 8) = a2;
  }
  return result;
}

void AsyncBufferSequence.makeAsyncIterator()(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = type metadata accessor for AsyncBufferSequence.StorageType(0, v3, *(_QWORD *)(v4 + 24), v5);
  MEMORY[0x24BDAC7A8](v6);
  __asm { BR              X10 }
}

uint64_t sub_243B4CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v11 < 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v5, v8);
    sub_243BFDB14();
  }
  else
  {
    type metadata accessor for BoundedBufferStorage(0, v8, v9, a4);
    *v7 = sub_243B59324(v5, v11);
  }
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v12 + 32))(v4, v7, v6);
}

uint64_t type metadata accessor for AsyncBufferSequence.StorageType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferSequence.StorageType);
}

uint64_t AsyncBufferSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v3[2] = a1;
  v3[3] = v2;
  v4 = *(_QWORD *)(a2 + 24);
  v3[4] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v3[5] = v5;
  v3[6] = swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v3[7] = sub_243BFE1EC();
  v6 = sub_243BFDD0C();
  v3[8] = v6;
  v3[9] = *(_QWORD *)(v6 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v7 = sub_243BFDD0C();
  v3[12] = v7;
  v3[13] = *(_QWORD *)(v7 - 8);
  v3[14] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[15] = AssociatedTypeWitness;
  v3[16] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[17] = swift_task_alloc();
  v10 = type metadata accessor for AsyncBufferSequence.StorageType(0, v5, v4, v9);
  v3[18] = v10;
  v3[19] = *(_QWORD *)(v10 - 8);
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B4D068()
{
  _QWORD *v0;
  int EnumCaseMultiPayload;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[19] + 16))(v0[20], v0[3], v0[18]);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v0[24] = *(_QWORD *)v0[20];
      v2 = (_QWORD *)swift_task_alloc();
      v0[25] = v2;
      *v2 = v0;
      v2[1] = sub_243B4D310;
      return sub_243B574DC(v0[11]);
    }
    else
    {
      v0[26] = *(_QWORD *)v0[20];
      v9 = (_QWORD *)swift_task_alloc();
      v0[27] = v9;
      *v9 = v0;
      v9[1] = sub_243B4D4E8;
      return sub_243B5F650(v0[10]);
    }
  }
  else
  {
    v4 = v0[20];
    v5 = v0[17];
    v6 = v0[15];
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 32);
    v0[21] = v7;
    v7(v5, v4, v6);
    swift_getAssociatedConformanceWitness();
    v8 = (_QWORD *)swift_task_alloc();
    v0[22] = v8;
    *v8 = v0;
    v8[1] = sub_243B4D1D0;
    return sub_243BFDA30();
  }
}

uint64_t sub_243B4D1D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B4D234()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(v7, *(_QWORD *)(v0 + 144));
  v1(v7, v2, v3);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B4D310()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B4D364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 16);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v7, 1, 1, v6);
  }
  else
  {
    v8 = MEMORY[0x249502B6C](&unk_243BFFA50, v2);
    sub_243B6A5DC(v2, v8);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 48));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B4D4E8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B4D53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 16);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v7, 1, 1, v6);
  }
  else
  {
    v8 = MEMORY[0x249502B6C](&unk_243BFFA50, v2);
    sub_243B6A5DC(v2, v8);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 48) - 8) + 56))(*(_QWORD *)(v0 + 16), 0, 1, *(_QWORD *)(v0 + 48));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B4D6C0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B4D740(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B4D7A0;
  return AsyncBufferSequence.Iterator.next()(a1, a2);
}

uint64_t sub_243B4D7A0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B4D7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  _QWORD *v6;

  v4[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[3] = AssociatedTypeWitness;
  v4[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4[5] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_243B4D8BC;
  return sub_243BFDA48();
}

uint64_t sub_243B4D8BC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*v1;
  v3 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t sub_243B4D934(uint64_t a1)
{
  uint64_t v1;

  AsyncBufferSequence.makeAsyncIterator()(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t default argument 1 of DatabaseConnection.query<A>(sql:bindings:step:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 0 of PhotosFaceDatabase.init(location:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  v2 = sub_243BFD10C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2543CE008 != -1)
    swift_once();
  __swift_project_value_buffer(v6, (uint64_t)qword_2543CDFF0);
  sub_243BFD13C();
  v12[0] = 0x6146736F746F6850;
  v12[1] = 0xEA00000000006563;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCD7A0], v2);
  sub_243B4DDA4();
  sub_243BFD184();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
}

uint64_t default argument 1 of PhotosFaceDatabase.queryPhotos(sql:bindings:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of PhotosFaceDatabase.queryPhotos<A>(sql:bindings:extraReading:)()
{
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_243B4DB44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA18);
  v2 = (_QWORD *)sub_243BFDFDC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_243B7CFDC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t default argument 1 of DatabaseConnection.queryUnique<A>(sql:bindings:step:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 4 of SyncedPhotosFace.init(id:day:photos:cached:complete:)()
{
  return 1;
}

uint64_t default argument 1 of SyncedPhotosFace.init(photoDay:photos:cached:complete:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of SyncedPhotosFace.init(photoDay:photos:cached:complete:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 3 of SyncedPhotosFace.init(photoDay:photos:cached:complete:)()
{
  return 1;
}

uint64_t default argument 1 of LazyData.init(filename:isTempFile:)()
{
  return 0;
}

unint64_t default argument 1 of MessageBody.init(metadata:files:version:)()
{
  return sub_243B4DB44(MEMORY[0x24BEE4AF8]);
}

unint64_t default argument 1 of MessageBody.init(data:files:version:)()
{
  return sub_243B4DB44(MEMORY[0x24BEE4AF8]);
}

uint64_t default argument 2 of Message.init(operation:data:files:complete:)()
{
  return MEMORY[0x24BEE4B00];
}

unint64_t default argument 0 of MessageDemultiplexer.init(timeout:logTag:)()
{
  return 0x86AC351052600000;
}

unint64_t default argument 1 of MessageDemultiplexer.init(timeout:logTag:)()
{
  return 0xD000000000000010;
}

uint64_t default argument 0 of Collection<>.parallelForEach(parallelism:block:)()
{
  return 5;
}

uint64_t default argument 0 of Collection<>.parallelMap<A>(parallelism:transform:)()
{
  return 5;
}

uint64_t default argument 0 of Collection<>.parallelFilter(parallelism:predicate:)()
{
  return 5;
}

uint64_t default argument 0 of SeedableRandom.init(bits:)()
{
  return 64;
}

uint64_t default argument 1 of SeedableRandom.init(seed:bits:)()
{
  return 64;
}

_QWORD *sub_243B4DD18@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_243B4DD28(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_243B4DD34(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249502B60](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_243B4DDA4()
{
  unint64_t result;

  result = qword_2543CE440;
  if (!qword_2543CE440)
  {
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2543CE440);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249502B54]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_243B4DE28()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

void sub_243B4DEB4()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AsyncBufferSequencePolicy()
{
  return &type metadata for AsyncBufferSequencePolicy;
}

uint64_t sub_243B4DEF4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_243B4DEFC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B4DF70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_BYTE *)(v10 + 8);
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v10;
    *(_BYTE *)(v12 + 8) = v11;
  }
  return v4;
}

uint64_t sub_243B4E028(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_243B4E038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_243B4E09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_243B4E100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_243B4E164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t sub_243B4E1C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFC)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFC)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_243B4E250 + 4 * byte_243BFE9F4[v12]))();
  }
}

void sub_243B4E2DC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFCu)
    v6 = 252;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_243B4E3F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x243B4E474);
}

void sub_243B4E400(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x243B4E408);
  JUMPOUT(0x243B4E474);
}

void sub_243B4E44C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x243B4E474);
}

void sub_243B4E454()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x243B4E474);
}

uint64_t sub_243B4E45C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFC)
  {
    if (a2 > 0xFC)
      JUMPOUT(0x243B4E468);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x243B4E474);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for AsyncBufferSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferSequence);
}

uint64_t sub_243B4E498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AsyncBufferSequence.StorageType(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243B4E508(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 3)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 == 2 || v5 == 1)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

_QWORD *sub_243B4E5F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    v9 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v6) = 0;
      return a1;
    }
    *a1 = *a2;
    v9 = 1;
  }
  *((_BYTE *)a1 + v6) = v9;
  swift_retain();
  return a1;
}

_QWORD *sub_243B4E710(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 3)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 2 || v7 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 3)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 2)
    {
      *a1 = *a2;
      v11 = 2;
    }
    else
    {
      if (v9 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v6) = 0;
        return a1;
      }
      *a1 = *a2;
      v11 = 1;
    }
    *((_BYTE *)a1 + v6) = v11;
    swift_retain();
  }
  return a1;
}

_QWORD *sub_243B4E8DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    v9 = 2;
  }
  else if (v7 == 1)
  {
    *a1 = *a2;
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *sub_243B4E9F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 3)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 2 || v7 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 3)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 2)
    {
      *a1 = *a2;
      v11 = 2;
    }
    else if (v9 == 1)
    {
      *a1 = *a2;
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v11 = 0;
    }
    *((_BYTE *)a1 + v6) = v11;
  }
  return a1;
}

uint64_t sub_243B4EBBC(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = 8;
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > 8uLL)
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 3)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 254);
}

void sub_243B4ED00(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = v6 + 1;
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for AsyncBufferSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferSequence.Iterator);
}

uint64_t getEnumTagSinglePayload for Message.Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Message.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_243B4EF60(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_243B4EF7C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AsyncBufferSequencePolicy._Policy()
{
  return &type metadata for AsyncBufferSequencePolicy._Policy;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_243B4EFCC(a1, &qword_2572EB970);
}

void type metadata accessor for PFCTimePosition(uint64_t a1)
{
  sub_243B4EFCC(a1, qword_2572EB978);
}

void sub_243B4EFCC(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_243B4F010()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B4F098(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 3)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
    {
      *a1 = *a2;
      v12 = 2;
    }
    else
    {
      if (v10 != 1)
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v6) = 0;
        return a1;
      }
      *a1 = *a2;
      v12 = 1;
    }
    *((_BYTE *)a1 + v6) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_243B4F1F0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 >= 3)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X14 }
  }
  if (v5 == 2 || v5 == 1)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

_QWORD *sub_243B4F2DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    v9 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v6) = 0;
      return a1;
    }
    *a1 = *a2;
    v9 = 1;
  }
  *((_BYTE *)a1 + v6) = v9;
  swift_retain();
  return a1;
}

_QWORD *sub_243B4F3F8(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 3)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 2 || v7 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 3)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 2)
    {
      *a1 = *a2;
      v11 = 2;
    }
    else
    {
      if (v9 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v6) = 0;
        return a1;
      }
      *a1 = *a2;
      v11 = 1;
    }
    *((_BYTE *)a1 + v6) = v11;
    swift_retain();
  }
  return a1;
}

_QWORD *sub_243B4F5C4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    v9 = 2;
  }
  else if (v7 == 1)
  {
    *a1 = *a2;
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *sub_243B4F6DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v5 + 64) <= 8uLL)
      v6 = 8;
    else
      v6 = *(_QWORD *)(v5 + 64);
    v7 = *((unsigned __int8 *)a1 + v6);
    if (v7 >= 3)
    {
      if (v6 <= 3)
        v8 = v6;
      else
        v8 = 4;
      __asm { BR              X12 }
    }
    if (v7 == 2 || v7 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v9 = *((unsigned __int8 *)a2 + v6);
    if (v9 >= 3)
    {
      if (v6 <= 3)
        v10 = v6;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 2)
    {
      *a1 = *a2;
      v11 = 2;
    }
    else if (v9 == 1)
    {
      *a1 = *a2;
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v11 = 0;
    }
    *((_BYTE *)a1 + v6) = v11;
  }
  return a1;
}

uint64_t sub_243B4F8A4(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = 8;
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > 8uLL)
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 3)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 254);
}

void sub_243B4F9E8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = v6 + 1;
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B4FBB0(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  result = *(unsigned __int8 *)(a1 + v2);
  if (result >= 3)
  {
    if (v2 <= 3)
      v4 = v2;
    else
      v4 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_243B4FC70(_BYTE *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (a2 > 2)
  {
    v6 = a2 - 3;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

unint64_t sub_243B4FD54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
    v7 = (_QWORD *)sub_243BFDFDC();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_243B50168(v9, (uint64_t)v5, &qword_2572EBA28);
      v11 = *v5;
      result = sub_243B7CE78(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for StoredPhotoLayout(0);
      result = sub_243B501AC(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_243B4FEB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE4A0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (unsigned int *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA08);
    v7 = (_QWORD *)sub_243BFDFDC();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_243B50168(v9, (uint64_t)v5, &qword_2543CE4A0);
      v11 = *v5;
      result = sub_243B7D040(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v7[6] + 4 * result) = v11;
      v15 = v7[7];
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA10);
      result = sub_243B5001C(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_243B5001C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_243B50064(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE480);
  v3 = (_QWORD *)sub_243BFDFDC();
  v4 = *(_BYTE *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 40);
  result = sub_243B7D074(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!--v1)
      goto LABEL_8;
    v11 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_BYTE *)v7 - 8);
    v13 = *v7;
    swift_retain();
    result = sub_243B7D074(v4);
    v7 = v11;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_243B50168(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_243B501AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoredPhotoLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x249502AF4](a1, v6, a5);
}

uint64_t sub_243B50220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for BoundedBufferStateMachine.State(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_243B50298(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x20uLL)
    v6 = 32;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *__src;
    *v4 = *__src;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)__src + v6);
    if (v10 >= 3)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
    {
      *(_QWORD *)__dst = *__src;
      __dst[v6] = 2;
      swift_retain();
    }
    else if (v10 == 1)
    {
      v12 = __src[1];
      *(_QWORD *)__dst = *__src;
      *((_QWORD *)__dst + 1) = v12;
      *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
      __dst[v6] = 1;
      swift_retain();
      swift_retain();
    }
    else
    {
      (*(void (**)(_BYTE *, _QWORD *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + v6) = 0;
    }
    *(_QWORD *)(((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

_BYTE *sub_243B5042C(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x20uLL)
    v6 = 32;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)__src + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *(_QWORD *)__dst = *__src;
    __dst[v6] = 2;
    swift_retain();
  }
  else if (v7 == 1)
  {
    v9 = __src[1];
    *(_QWORD *)__dst = *__src;
    *((_QWORD *)__dst + 1) = v9;
    *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
    __dst[v6] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(_BYTE *, _QWORD *))(v5 + 16))(__dst, __src);
    __dst[v6] = 0;
  }
  *(_QWORD *)((unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFF8);
  return __dst;
}

unsigned __int8 *sub_243B50578(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x20uLL)
    v7 = 32;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == __src)
    goto LABEL_26;
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
    swift_retain();
  }
  else if (v10 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)__dst + 3) = *((_QWORD *)__src + 3);
    __dst[v7] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v7] = 0;
  }
LABEL_26:
  *(_QWORD *)((unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFF8);
  return __dst;
}

_BYTE *sub_243B50798(_BYTE *__dst, _OWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x20uLL)
    v6 = 32;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)__src + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v6] = 2;
  }
  else if (v7 == 1)
  {
    v9 = __src[1];
    *(_OWORD *)__dst = *__src;
    *((_OWORD *)__dst + 1) = v9;
    __dst[v6] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, _OWORD *))(v5 + 32))(__dst, __src);
    __dst[v6] = 0;
  }
  *(_QWORD *)((unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFF8);
  return __dst;
}

unsigned __int8 *sub_243B508CC(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x20uLL)
    v7 = 32;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == __src)
    goto LABEL_26;
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
  }
  else if (v10 == 1)
  {
    v12 = *((_OWORD *)__src + 1);
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_OWORD *)__dst + 1) = v12;
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v7] = 0;
  }
LABEL_26:
  *(_QWORD *)((unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFF8);
  return __dst;
}

uint64_t sub_243B50AC4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x20)
    v3 = 32;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_23;
  v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  v5 = a2 - 251;
  v6 = v4 & 0xFFFFFFF8;
  if ((v4 & 0xFFFFFFF8) != 0)
    v5 = 2;
  if (v5 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v5 < 0x100)
    v8 = 1;
  else
    v8 = v7;
  if (v8 == 4)
  {
    v9 = *(_DWORD *)((char *)a1 + v4);
    if (!v9)
      goto LABEL_23;
  }
  else if (v8 == 2)
  {
    v9 = *(unsigned __int16 *)((char *)a1 + v4);
    if (!v9)
    {
LABEL_23:
      v12 = *((unsigned __int8 *)a1 + v3);
      if (v12 >= 4)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + v4);
    if (!v9)
      goto LABEL_23;
  }
  v11 = v9 - 1;
  if (v6)
  {
    v11 = 0;
    LODWORD(v6) = *a1;
  }
  return (v6 | v11) + 253;
}

void sub_243B50B7C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x20)
    v5 = 32;
  if (a3 < 0xFD)
  {
    v8 = 0;
    if (a2 > 0xFC)
      goto LABEL_13;
  }
  else
  {
    v6 = a3 - 251;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
      v6 = 2;
    if (v6 >= 0x10000)
      v7 = 4;
    else
      v7 = 2;
    if (v6 < 0x100)
      v8 = 1;
    else
      v8 = v7;
    if (a2 > 0xFC)
    {
LABEL_13:
      if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
      {
        v9 = a2 - 253;
        bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 16);
        *a1 = v9;
      }
      __asm { BR              X10 }
    }
  }
  __asm { BR              X11 }
}

void sub_243B50C54(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + v3) = 0;
  if (a1)
    *(_BYTE *)(v2 + a2) = -(char)a1;
}

void sub_243B50C7C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x243B50C70);
}

uint64_t type metadata accessor for BoundedBufferStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine);
}

uint64_t type metadata accessor for BoundedBufferStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.State);
}

uint64_t sub_243B50CBC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *sub_243B50D3C(_BYTE *__dst, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x20uLL)
    v5 = 32;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 3)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X14 }
    }
    if (v10 == 2)
    {
      *(_QWORD *)__dst = *a2;
      __dst[v5] = 2;
    }
    else
    {
      if (v10 != 1)
      {
        (*(void (**)(_BYTE *))(v4 + 16))(__dst);
        *((_BYTE *)v3 + v5) = 0;
        return v3;
      }
      v12 = a2[1];
      *(_QWORD *)__dst = *a2;
      *((_QWORD *)__dst + 1) = v12;
      *((_OWORD *)__dst + 1) = *((_OWORD *)a2 + 1);
      __dst[v5] = 1;
      swift_retain();
    }
  }
  swift_retain();
  return v3;
}

uint64_t sub_243B50E98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x20)
    v3 = 32;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 >= 3)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X14 }
  }
  if (v4 != 2)
  {
    if (v4 != 1)
      return (*(uint64_t (**)(uint64_t))(v2 + 8))(a1);
    swift_release();
  }
  return swift_release();
}

_BYTE *sub_243B50F84(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x20uLL)
    v5 = 32;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)a2;
    __dst[v5] = 2;
    swift_retain();
  }
  else if (v6 == 1)
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)__dst = *(_QWORD *)a2;
    *((_QWORD *)__dst + 1) = v8;
    *((_OWORD *)__dst + 1) = *(_OWORD *)(a2 + 16);
    __dst[v5] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_243B510A8(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x20uLL)
    v7 = 32;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
    swift_retain();
  }
  else if (v10 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)__dst + 3) = *((_QWORD *)__src + 3);
    __dst[v7] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v7] = 0;
  }
  return __dst;
}

_BYTE *sub_243B512AC(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x20uLL)
    v5 = 32;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)a2;
    __dst[v5] = 2;
  }
  else if (v6 == 1)
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((_OWORD *)__dst + 1) = v8;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_243B513B0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x20uLL)
    v7 = 32;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
  }
  else if (v10 == 1)
  {
    v12 = *((_OWORD *)__src + 1);
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_OWORD *)__dst + 1) = v12;
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v7] = 0;
  }
  return __dst;
}

uint64_t sub_243B5158C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 32;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x20uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 252) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 4)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 253);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B51650 + 4 * byte_243BFECF5[(v4 - 1)]))();
}

void sub_243B5169C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x20)
    v5 = 32;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B51844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 32;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x20uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B5188C + 4 * byte_243BFED03[v3]))();
}

void sub_243B518D4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x20uLL)
    v4 = 32;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_243B5199C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  type metadata accessor for BoundedBufferStateMachine.State(0, a3, a4, v9);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for BoundedBufferStateMachine(0, a3, a4, v10);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t sub_243B51A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for BoundedBufferStateMachine.State(0, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (_QWORD *)((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v20 - v12, v4, v7);
  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 0:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v16, v17);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v20[1] = sub_243BFD97C();
      v18 = sub_243BFD9DC();
      MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v18);
      v19 = sub_243BFD370();
      *v11 = a1;
      v11[1] = v19;
      v11[2] = 0;
      v11[3] = 0;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v8 + 40))(v4, v11, v7);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v13, v6);
    case 1:
      goto LABEL_6;
    case 2:
      __break(1u);
LABEL_6:
      __break(1u);
      break;
  }
  __break(1u);
  return result;
}

void sub_243B51BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v5 = type metadata accessor for BoundedBufferStateMachine.State(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v7, v4, v5);
  v8 = (char *)&loc_243B51C6C + *((int *)qword_243B51D88 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

BOOL sub_243B51C7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v2[1];
  v6 = v2[2];
  v5 = v2[3];
  swift_release();
  if (v6)
  {
    __break(1u);
    JUMPOUT(0x243B51D88);
  }
  if (v5)
  {
    swift_release();
    return 0;
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v9, v10);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    v11 = sub_243BFE1EC();
    sub_243B53B80((uint64_t)sub_243B53B74, 0, v4, MEMORY[0x24BE18CF0], v11, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v12);
    swift_release();
    return *(_QWORD *)(v3 - 72) >= *(_QWORD *)(v1 + *(int *)(v0 + 36));
  }
}

BOOL sub_243B51D98(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_243B51DA8()
{
  return sub_243BFE1B0();
}

uint64_t sub_243B51DCC()
{
  sub_243BFE1A4();
  sub_243BFE1B0();
  return sub_243BFE1E0();
}

BOOL sub_243B51E10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_243B51D98(*a1, *a2);
}

uint64_t sub_243B51E1C()
{
  return sub_243B51DCC();
}

uint64_t sub_243B51E24()
{
  return sub_243B51DA8();
}

uint64_t sub_243B51E2C()
{
  sub_243BFE1A4();
  sub_243B51DA8();
  return sub_243BFE1E0();
}

void sub_243B51E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v5 = type metadata accessor for BoundedBufferStateMachine.State(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v7, v4, v5);
  v8 = (char *)&loc_243B51EFC + dword_243B520EC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B51F0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (v4[2])
  {
    __break(1u);
    JUMPOUT(0x243B520ECLL);
  }
  v8 = *v4;
  v7 = v4[1];
  if (v4[3])
  {
    swift_release();
    *(_QWORD *)(v6 - 88) = v7;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v10, v11);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    sub_243BFE1EC();
    v12 = sub_243BFD364();
    MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v12);
    v13 = sub_243BFDC64();
    swift_release();
    if ((v13 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x243B51FC4);
    }
    return 1;
  }
  v15 = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, v15, v16, v17);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v18 = sub_243BFE1EC();
  sub_243B53B80((uint64_t)sub_243B53B74, 0, v7, MEMORY[0x24BE18CF0], v18, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v19);
  if (*(_QWORD *)(v6 - 88) < *(_QWORD *)((char *)v0 + *(int *)(v3 + 36)))
  {
    swift_release();
    swift_release();
    return 1;
  }
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v0, v2);
  *v0 = v8;
  v0[1] = v7;
  v0[2] = v1;
  v0[3] = 0;
  swift_storeEnumTagMultiPayload();
  return 0;
}

void sub_243B520FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[10];

  v15[4] = a1;
  v15[6] = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v7, v8);
  v15[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v9 = sub_243BFE1EC();
  v15[2] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = type metadata accessor for BoundedBufferStateMachine.State(0, v5, v4, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v15 - v13, v3, v11);
  v14 = (char *)&loc_243B52250 + *((int *)qword_243B52578 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B52260()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  _QWORD *v14;
  char *v15;
  void (*v17)(_QWORD *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = v1[1];
  if (v1[2])
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x243B52578);
  }
  *(_QWORD *)(v9 - 152) = *v1;
  if (v1[3])
  {
    v11 = v1[3];
    *(_QWORD *)(v9 - 88) = v10;
    v12 = sub_243BFD364();
    MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v12);
    if ((sub_243BFDC64() & 1) != 0)
    {
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v3, v6);
      *v3 = *(_QWORD *)(v9 - 152);
      v3[1] = v10;
      v3[2] = 0;
      v3[3] = 0;
      swift_storeEnumTagMultiPayload();
      sub_243BFE1EC();
      sub_243BFDD0C();
      sub_243BFDAF0();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v14 = *(_QWORD **)(v9 - 112);
      v15 = (char *)v14 + *(int *)(TupleTypeMetadata2 + 48);
      *v14 = v11;
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 136) + 16))(v15, *(_QWORD *)(v9 - 128), v2);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v14, 0, 1, TupleTypeMetadata2);
    }
    __break(1u);
LABEL_8:
    __break(1u);
    JUMPOUT(0x243B52564);
  }
  *(_QWORD *)(v9 - 88) = v10;
  swift_retain();
  sub_243B53B80((uint64_t)sub_243B53B74, 0, v10, MEMORY[0x24BE18CF0], v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v20);
  swift_release();
  if (*(_QWORD *)(v9 - 96) >= *(_QWORD *)((char *)v3 + *(int *)(v8 + 36)))
    goto LABEL_8;
  v17 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v17(v3, v6);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 136) + 16))(v0, *(_QWORD *)(v9 - 128), v2);
  sub_243B6A7E4(v0, v2, v4);
  swift_storeEnumTagMultiPayload();
  sub_243BFD364();
  sub_243BFD34C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 144) + 8))(v4, v7);
  v17(v3, v6);
  v18 = *(_QWORD *)(v9 - 88);
  *v3 = *(_QWORD *)(v9 - 152);
  v3[1] = v18;
  v3[2] = 0;
  v3[3] = 0;
  swift_storeEnumTagMultiPayload();
  sub_243BFE1EC();
  sub_243BFDD0C();
  sub_243BFDAF0();
  v19 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(*(_QWORD *)(v9 - 112), 1, 1, v19);
}

void sub_243B52588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  MEMORY[0x24BDAC7A8](v8);
  v10 = type metadata accessor for BoundedBufferStateMachine.State(0, v4, v3, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v13, v2, v10);
  v14 = (char *)&loc_243B526BC + dword_243B52864[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B526CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;

  *(_QWORD *)(v9 - 96) = v0;
  v10 = v1;
  v11 = v6[1];
  v12 = v6[2];
  v13 = v6[3];
  swift_release();
  if (v12)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x243B52864);
  }
  if (v13)
  {
    *(_QWORD *)(v9 - 88) = v11;
    v14 = sub_243BFD364();
    MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v14);
    if ((sub_243BFDC64() & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x243B52850);
    }
    *(_QWORD *)(v9 - 88) = sub_243BFD97C();
    v15 = sub_243BFD9DC();
    MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v15);
    v16 = sub_243BFD370();
    swift_release();
    *v4 = v16;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD, uint64_t *, uint64_t))(v7 + 40))(*(_QWORD *)(v9 - 96), v4, v2);
  }
  else
  {
    *(_QWORD *)(v9 - 88) = v11;
    if (v10)
    {
      *v5 = v10;
      swift_storeEnumTagMultiPayload();
      v17 = v10;
      sub_243BFD364();
      sub_243BFD34C();
      (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v5, v3);
    }
    v18 = *(_QWORD **)(v9 - 96);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v18, v2);
    *v18 = *(_QWORD *)(v9 - 88);
    swift_storeEnumTagMultiPayload();
    return 1;
  }
  return v13;
}

void sub_243B52874(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[7];
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v22 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  v18[6] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  v9 = sub_243BFDD0C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v20 = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v21 = v4;
  v14 = type metadata accessor for BoundedBufferStateMachine.State(0, v5, v4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - v16, v3, v14);
  v17 = (char *)&loc_243B52A0C + dword_243B52F6C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B52A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(*(_QWORD *)(v2 - 96), v0, v1);
  type metadata accessor for BoundedBufferStateMachine.NextAction(0, v1, *(_QWORD *)(v2 - 104), v3);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_243B52F7C@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 32))(a3, v12, *(_QWORD *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_243BFE1EC();
  return swift_storeEnumTagMultiPayload();
}

void sub_243B530D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[7];
  uint64_t AssociatedTypeWitness;
  uint64_t v20;

  v3 = v2;
  v18[2] = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  v18[6] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  v9 = sub_243BFDD0C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v20 = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v18[4] = v5;
  v18[5] = v4;
  v14 = type metadata accessor for BoundedBufferStateMachine.State(0, v5, v4, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - v16, v3, v14);
  v17 = (char *)&loc_243B5326C + dword_243B537DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B5327C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  void (*v16)(_QWORD *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v8 - 136) = v3;
  v9 = v0[1];
  if (v0[3])
  {
    swift_release();
    __break(1u);
    goto LABEL_9;
  }
  v10 = *v0;
  v11 = v0[2];
  *(_QWORD *)(v8 - 152) = v11;
  if (!v11)
  {
    *(_QWORD *)(v8 - 88) = v9;
    v12 = sub_243BFD364();
    swift_retain();
    swift_retain();
    MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v12);
    if ((sub_243BFDC64() & 1) != 0)
    {
      swift_release();
      swift_release();
      (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v5, v6);
      *v5 = v10;
      v5[1] = v9;
      v13 = *(_QWORD *)(v8 - 144);
      v5[2] = 0;
      v5[3] = v13;
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      sub_243BFE1EC();
      sub_243BFDD0C();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(*(_QWORD *)(v8 - 136), 1, 1, TupleTypeMetadata2);
    }
    swift_release();
    swift_release();
  }
  *(_QWORD *)(v8 - 144) = v10;
  *(_QWORD *)(v8 - 88) = v9;
  v16 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v16(v5, v6);
  swift_storeEnumTagMultiPayload();
  sub_243BFD364();
  sub_243BFD358();
  v17 = *(_QWORD *)(v8 - 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v1, 1, v2) == 1)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x243B537D8);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v7, v1, v2);
  v16(v5, v6);
  v18 = *(_QWORD *)(v8 - 88);
  *v5 = *(_QWORD *)(v8 - 144);
  v5[1] = v18;
  v5[2] = 0;
  v5[3] = 0;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
  v19 = sub_243BFE1EC();
  sub_243BFDD0C();
  v20 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v8 - 112) = &v23;
  v21 = *(_QWORD **)(v8 - 136);
  v22 = (uint64_t)v21 + *(int *)(v20 + 48);
  *v21 = *(_QWORD *)(v8 - 152);
  MEMORY[0x24BDAC7A8](v20);
  swift_retain();
  swift_retain();
  sub_243B52F7C((void (*)(char *))sub_243B53B70, v2, v22);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 96) + 8))(v7, v2);
  swift_release();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v22, 0, 1, v19);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v21, 0, 1, v20);
}

void sub_243B537EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = type metadata accessor for BoundedBufferStateMachine.State(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v8, v4, v5);
  v9 = (char *)&loc_243B53898 + *((int *)qword_243B53B60 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B538A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v8, v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  *(_QWORD *)(v6 - 88) = sub_243BFD97C();
  v10 = sub_243BFD9DC();
  MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v10);
  *v2 = sub_243BFD370();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 40))(v1, v2, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4, v3);
  return 0;
}

uint64_t sub_243B53B74@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_243B53B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, char *);
  uint64_t result;
  uint64_t v19;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80);
  result = v17(v16 + ((v15 + 16) & ~v15), v13);
  if (v9)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.NextAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.NextAction);
}

uint64_t sub_243B53C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_243B53C78()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Platform(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_243B53D1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_243B53D68 + 4 * byte_243BFED0D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_243B53D9C + 4 * byte_243BFED08[v4]))();
}

uint64_t sub_243B53D9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B53DA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243B53DACLL);
  return result;
}

uint64_t sub_243B53DB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243B53DC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_243B53DC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B53DCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B53DD8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_243B53DE0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.ProducerSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.ProducerSuspendedAction);
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_243B53E04(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t sub_243B53E60(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_243B53EBC(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_243B53EE0(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.FinishAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.FinishAction);
}

uint64_t sub_243B53F14()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  result = sub_243BFE1EC();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B53FC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  _QWORD *v12;
  id *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  v9 = v5 + (((v6 & 0xF8) + 15) & ~v7) + 1;
  if ((v6 & 0x1000F8) != 0 || v9 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & v8));
    swift_retain();
  }
  else if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    memcpy(a1, a2, v9);
  }
  else
  {
    *a1 = *a2;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & v8);
    v13 = (id *)(((unint64_t)a2 + 15) & v8);
    v14 = *((unsigned __int8 *)v13 + v5);
    if (v14 >= 2)
    {
      if (v5 <= 3)
        v15 = v5;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 1)
    {
      v16 = *v13;
      v17 = *v13;
      *v12 = v16;
      *((_BYTE *)v12 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(v12);
      *((_BYTE *)v12 + v5) = 0;
    }
  }
  return a1;
}

void sub_243B5414C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id *v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  if (*a1 >= 0xFFFFFFFFuLL)
  {
    v4 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
    v5 = (id *)(((unint64_t)a1 + v4 + 8) & ~v4);
    v6 = *((unsigned __int8 *)v5 + v3);
    if (v6 >= 2)
    {
      if (v3 <= 3)
        v7 = v3;
      else
        v7 = 4;
      __asm { BR              X14 }
    }
    if (v6 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
}

_QWORD *sub_243B54260(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  id *v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  id v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  if (*a2 < 0xFFFFFFFFuLL)
  {
    memcpy(a1, a2, v5 + ((v6 + 8) & v7) + 1);
  }
  else
  {
    *a1 = *a2;
    v8 = (char *)a1 + v6;
    v9 = (char *)a2 + v6;
    v10 = (_QWORD *)((unint64_t)(v8 + 8) & v7);
    v11 = (id *)((unint64_t)(v9 + 8) & v7);
    v12 = *((unsigned __int8 *)v11 + v5);
    if (v12 >= 2)
    {
      if (v5 <= 3)
        v13 = v5;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 1)
    {
      v14 = *v11;
      v15 = *v11;
      *v10 = v14;
      *((_BYTE *)v10 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(v10);
      *((_BYTE *)v10 + v5) = 0;
    }
  }
  return a1;
}

unint64_t *sub_243B543C0(unint64_t *a1, unint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  id *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  id v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = v6 + ((v7 + 15) & v9) + 1;
  v11 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *a1 = v11;
      v18 = (char *)a1 + v8;
      v19 = (char *)a2 + v8;
      v14 = (id *)((unint64_t)(v18 + 8) & v9);
      v20 = (void **)((unint64_t)(v19 + 8) & v9);
      v21 = *((unsigned __int8 *)v20 + v6);
      if (v21 >= 2)
      {
        if (v6 <= 3)
          v22 = v6;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      if (v21 == 1)
      {
        v26 = *v20;
LABEL_40:
        v29 = v26;
        *v14 = v26;
        *((_BYTE *)v14 + v6) = 1;
        return a1;
      }
      (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v14, v20, AssociatedTypeWitness);
LABEL_42:
      *((_BYTE *)v14 + v6) = 0;
      return a1;
    }
    goto LABEL_29;
  }
  if (v11 < 0xFFFFFFFF)
  {
    v23 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v24 = *((unsigned __int8 *)v23 + v6);
    if (v24 >= 2)
    {
      if (v6 <= 3)
        v25 = v6;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)

    else
      (*(void (**)(void))(v5 + 8))();
LABEL_29:
    memcpy(a1, a2, v10);
    return a1;
  }
  *a1 = v11;
  v12 = (unint64_t)a1 + v8;
  v13 = (unint64_t)a2 + v8;
  v12 += 8;
  v14 = (id *)(v12 & v9);
  v13 += 8;
  v15 = (void **)(v13 & v9);
  if ((v12 & v9) != (v13 & v9))
  {
    v16 = *((unsigned __int8 *)v14 + v6);
    if (v16 >= 2)
    {
      if (v6 <= 3)
        v17 = v6;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v14, AssociatedTypeWitness);
    v27 = *((unsigned __int8 *)v15 + v6);
    if (v27 >= 2)
    {
      if (v6 <= 3)
        v28 = v6;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      v26 = *v15;
      goto LABEL_40;
    }
    (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    goto LABEL_42;
  }
  return a1;
}

_QWORD *sub_243B54730(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  if (*a2 < 0xFFFFFFFFuLL)
  {
    memcpy(a1, a2, v5 + ((v6 + 8) & v7) + 1);
  }
  else
  {
    *a1 = *a2;
    v8 = (char *)a1 + v6;
    v9 = (char *)a2 + v6;
    v10 = (_QWORD *)((unint64_t)(v8 + 8) & v7);
    v11 = (_QWORD *)((unint64_t)(v9 + 8) & v7);
    v12 = *((unsigned __int8 *)v11 + v5);
    if (v12 >= 2)
    {
      if (v5 <= 3)
        v13 = v5;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 1)
    {
      *v10 = *v11;
      *((_BYTE *)v10 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 32))(v10);
      *((_BYTE *)v10 + v5) = 0;
    }
  }
  return a1;
}

unint64_t *sub_243B54888(unint64_t *a1, unint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  id *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = v6 + ((v7 + 15) & v9) + 1;
  v11 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *a1 = v11;
      v18 = (char *)a1 + v8;
      v19 = (char *)a2 + v8;
      v14 = (id *)((unint64_t)(v18 + 8) & v9);
      v20 = (void **)((unint64_t)(v19 + 8) & v9);
      v21 = *((unsigned __int8 *)v20 + v6);
      if (v21 >= 2)
      {
        if (v6 <= 3)
          v22 = v6;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      if (v21 == 1)
      {
        v26 = *v20;
LABEL_40:
        *v14 = v26;
        *((_BYTE *)v14 + v6) = 1;
        return a1;
      }
      (*(void (**)(id *, void **, uint64_t))(v5 + 32))(v14, v20, AssociatedTypeWitness);
LABEL_42:
      *((_BYTE *)v14 + v6) = 0;
      return a1;
    }
    goto LABEL_29;
  }
  if (v11 < 0xFFFFFFFF)
  {
    v23 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v24 = *((unsigned __int8 *)v23 + v6);
    if (v24 >= 2)
    {
      if (v6 <= 3)
        v25 = v6;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)

    else
      (*(void (**)(void))(v5 + 8))();
LABEL_29:
    memcpy(a1, a2, v10);
    return a1;
  }
  *a1 = v11;
  v12 = (unint64_t)a1 + v8;
  v13 = (unint64_t)a2 + v8;
  v12 += 8;
  v14 = (id *)(v12 & v9);
  v13 += 8;
  v15 = (void **)(v13 & v9);
  if ((v12 & v9) != (v13 & v9))
  {
    v16 = *((unsigned __int8 *)v14 + v6);
    if (v16 >= 2)
    {
      if (v6 <= 3)
        v17 = v6;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v14, AssociatedTypeWitness);
    v27 = *((unsigned __int8 *)v15 + v6);
    if (v27 >= 2)
    {
      if (v6 <= 3)
        v28 = v6;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      v26 = *v15;
      goto LABEL_40;
    }
    (*(void (**)(id *, void **, uint64_t))(v5 + 32))(v14, v15, AssociatedTypeWitness);
    goto LABEL_42;
  }
  return a1;
}

uint64_t sub_243B54BF0(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_21;
  v6 = v5
     + ((unsigned __int16)((*(_WORD *)(v4 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v4 + 80) & 0xF8) & 0x1F8)
     + 1;
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_6;
  v10 = (a2 - 2147483646 + ~(-1 << v7)) >> v7;
  if (v10 > 0xFFFE)
  {
    v8 = *(_DWORD *)((char *)a1 + v6);
    if (v8)
      goto LABEL_14;
LABEL_21:
    v12 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v12) = -1;
    if ((v12 + 1) >= 2)
      return v12;
    else
      return 0;
  }
  if (v10 > 0xFE)
  {
    v8 = *(unsigned __int16 *)((char *)a1 + v6);
    if (*(_WORD *)((char *)a1 + v6))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (!v10)
    goto LABEL_21;
LABEL_6:
  v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((_BYTE *)a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 0x7FFFFFFF);
}

void sub_243B54D64(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = (unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v9 = 8;
  v10 = v9 + v8 + 1;
  if (a3 < 0x7FFFFFFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = (a3 - 2147483646 + ~(-1 << (8 * v10))) >> (8 * v10);
    if (v13 > 0xFFFE)
    {
      v11 = 4u;
    }
    else if (v13 >= 0xFF)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 != 0;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  v12 = a2 - 0x7FFFFFFF;
  if (v10 < 4)
  {
    if ((_DWORD)v10)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B54F58(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  size_t v8;
  int v9;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 8)
    LODWORD(v6) = 8;
  if (a2 < 0)
  {
    v7 = *(_DWORD *)(v5 + 80) & 0xF8;
    v8 = v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) + 1;
    if ((_DWORD)v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) != -1)
    {
      if (v8 <= 3)
        v9 = v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) + 1;
      else
        v9 = 4;
      bzero(a1, v8);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *a1 = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.ElementProducedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.ElementProducedAction);
}

uint64_t sub_243B5505C()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  result = sub_243BFDD0C();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B55114(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id *v14;
  unsigned int v15;
  id v16;
  id v17;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  v9 = (((v6 & 0xF8) + 15) & ~v7) + v5 + 1;
  if ((v6 & 0x1000F8) != 0 || v9 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    LODWORD(v12) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF)
      v12 = *a2;
    if ((v12 + 1) > 1)
    {
      memcpy(a1, a2, v9);
    }
    else
    {
      *a1 = *a2;
      v13 = (_QWORD *)(((unint64_t)a1 + 15) & v8);
      v14 = (id *)(((unint64_t)a2 + 15) & v8);
      v15 = *((unsigned __int8 *)v14 + v5);
      if (v15 > 1)
      {
        memcpy((void *)(((unint64_t)a1 + 15) & v8), v14, v5 + 1);
      }
      else if (v15 == 1)
      {
        v16 = *v14;
        v17 = *v14;
        *v13 = v16;
        *((_BYTE *)v13 + v5) = 1;
      }
      else
      {
        (*(void (**)(unint64_t))(v4 + 16))(((unint64_t)a1 + 15) & v8);
        *((_BYTE *)v13 + v5) = 0;
      }
    }
  }
  return a1;
}

void sub_243B55254(uint64_t *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id *v7;
  unsigned int v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) <= 1)
  {
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v4 + 64);
    if (v6 <= 8)
      v6 = 8;
    v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    v7 = (id *)(((unint64_t)a1 + v5 + 8) & ~v5);
    v8 = *((unsigned __int8 *)v7 + v6);
    if (v8 <= 1)
    {
      if (v8 == 1)

      else
        (*(void (**)(void))(v4 + 8))();
    }
  }
}

id *sub_243B5530C(id *a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  id v9;
  char *v10;
  char *v11;
  id *v12;
  id *v13;
  unsigned int v14;
  id v15;
  id v16;
  id *v17;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  v8 = v5 + 1;
  LODWORD(v9) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v9 = *a2;
  if (((_DWORD)v9 + 1) > 1)
  {
    v8 += (v6 + 8) & v7;
    v17 = a1;
    v13 = a2;
LABEL_13:
    memcpy(v17, v13, v8);
    return a1;
  }
  *a1 = *a2;
  v10 = (char *)a1 + v6;
  v11 = (char *)a2 + v6;
  v12 = (id *)((unint64_t)(v10 + 8) & v7);
  v13 = (id *)((unint64_t)(v11 + 8) & v7);
  v14 = *((unsigned __int8 *)v13 + v5);
  if (v14 > 1)
  {
    v17 = v12;
    goto LABEL_13;
  }
  if (v14 == 1)
  {
    v15 = *v13;
    v16 = *v13;
    *v12 = v15;
    *((_BYTE *)v12 + v5) = 1;
  }
  else
  {
    (*(void (**)(id *))(v4 + 16))(v12);
    *((_BYTE *)v12 + v5) = 0;
  }
  return a1;
}

id *sub_243B5541C(id *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  id *v18;
  void **v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void **v24;
  unsigned int v25;
  void *v26;
  id *v27;
  unsigned int v28;
  id v29;
  id *v30;
  size_t v31;
  unsigned int v33;
  uint64_t v34;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = (v7 + 15) & v9;
  v11 = *a1;
  LODWORD(v12) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  v13 = (_DWORD)v11 + 1;
  v14 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v12 = *a2;
  v15 = (_DWORD)v12 + 1;
  if (v13 > 1)
  {
    if (v15 <= 1)
    {
      *a1 = v14;
      v22 = (char *)a1 + v8;
      v23 = (char *)a2 + v8;
      v18 = (id *)((unint64_t)(v22 + 8) & v9);
      v24 = (void **)((unint64_t)(v23 + 8) & v9);
      v25 = *((unsigned __int8 *)v24 + v6);
      if (v25 <= 1)
      {
        if (v25 != 1)
        {
          (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v18, v24, AssociatedTypeWitness);
LABEL_45:
          *((_BYTE *)v18 + v6) = 0;
          return a1;
        }
        v26 = *v24;
        goto LABEL_27;
      }
      v30 = v18;
      goto LABEL_34;
    }
LABEL_31:
    v31 = v10 + v6 + 1;
    v30 = a1;
    v24 = a2;
LABEL_35:
    memcpy(v30, v24, v31);
    return a1;
  }
  if (v15 > 1)
  {
    v27 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v28 = *((unsigned __int8 *)v27 + v6);
    if (v28 <= 1)
    {
      if (v28 == 1)

      else
        (*(void (**)(void))(v5 + 8))();
    }
    goto LABEL_31;
  }
  *a1 = v14;
  v16 = (char *)a1 + v8;
  v17 = (char *)a2 + v8;
  v18 = (id *)((unint64_t)(v16 + 8) & v9);
  v19 = (void **)((unint64_t)(v17 + 8) & v9);
  v20 = *((unsigned __int8 *)v18 + v6);
  v21 = *((unsigned __int8 *)v19 + v6);
  if (v20 > 1)
  {
    if (v21 <= 1)
    {
      if (v21 != 1)
      {
LABEL_44:
        (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v18, v19, AssociatedTypeWitness);
        goto LABEL_45;
      }
      goto LABEL_26;
    }
    goto LABEL_33;
  }
  if (v21 > 1)
  {
    if (v20 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v18, AssociatedTypeWitness);
LABEL_33:
    v30 = v18;
    v24 = v19;
LABEL_34:
    v31 = v6 + 1;
    goto LABEL_35;
  }
  if (v18 != v19)
  {
    if (v20 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v18, AssociatedTypeWitness);
    v33 = *((unsigned __int8 *)v19 + v6);
    if (v33 >= 2)
    {
      if (v6 <= 3)
        v34 = v6;
      else
        v34 = 4;
      __asm { BR              X12 }
    }
    if (v33 != 1)
      goto LABEL_44;
LABEL_26:
    v26 = *v19;
LABEL_27:
    v29 = v26;
    *v18 = v26;
    *((_BYTE *)v18 + v6) = 1;
  }
  return a1;
}

_QWORD *sub_243B556C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  void *v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  v8 = v5 + 1;
  LODWORD(v9) = -1;
  if (*a2 < 0xFFFFFFFFuLL)
    v9 = *a2;
  if ((v9 + 1) > 1)
  {
    v8 += (v6 + 8) & v7;
    v15 = a1;
    v13 = a2;
LABEL_13:
    memcpy(v15, v13, v8);
    return a1;
  }
  *a1 = *a2;
  v10 = (char *)a1 + v6;
  v11 = (char *)a2 + v6;
  v12 = (_QWORD *)((unint64_t)(v10 + 8) & v7);
  v13 = (_QWORD *)((unint64_t)(v11 + 8) & v7);
  v14 = *((unsigned __int8 *)v13 + v5);
  if (v14 > 1)
  {
    v15 = v12;
    goto LABEL_13;
  }
  if (v14 == 1)
  {
    *v12 = *v13;
    *((_BYTE *)v12 + v5) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(v12);
    *((_BYTE *)v12 + v5) = 0;
  }
  return a1;
}

id *sub_243B557C8(id *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  id *v18;
  id *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void **v24;
  unsigned int v25;
  void *v26;
  id *v27;
  unsigned int v28;
  id *v29;
  size_t v30;
  unsigned int v32;
  uint64_t v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = (v7 + 15) & v9;
  v11 = *a1;
  LODWORD(v12) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  v13 = (_DWORD)v11 + 1;
  v14 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v12 = *a2;
  v15 = (_DWORD)v12 + 1;
  if (v13 > 1)
  {
    if (v15 <= 1)
    {
      *a1 = v14;
      v22 = (char *)a1 + v8;
      v23 = (char *)a2 + v8;
      v18 = (id *)((unint64_t)(v22 + 8) & v9);
      v24 = (void **)((unint64_t)(v23 + 8) & v9);
      v25 = *((unsigned __int8 *)v24 + v6);
      if (v25 <= 1)
      {
        if (v25 != 1)
        {
          (*(void (**)(id *, void **, uint64_t))(v5 + 32))(v18, v24, AssociatedTypeWitness);
LABEL_45:
          *((_BYTE *)v18 + v6) = 0;
          return a1;
        }
        v26 = *v24;
        goto LABEL_27;
      }
      v29 = v18;
      goto LABEL_34;
    }
LABEL_31:
    v30 = v10 + v6 + 1;
    v29 = a1;
    v24 = a2;
LABEL_35:
    memcpy(v29, v24, v30);
    return a1;
  }
  if (v15 > 1)
  {
    v27 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v28 = *((unsigned __int8 *)v27 + v6);
    if (v28 <= 1)
    {
      if (v28 == 1)

      else
        (*(void (**)(void))(v5 + 8))();
    }
    goto LABEL_31;
  }
  *a1 = v14;
  v16 = (char *)a1 + v8;
  v17 = (char *)a2 + v8;
  v18 = (id *)((unint64_t)(v16 + 8) & v9);
  v19 = (id *)((unint64_t)(v17 + 8) & v9);
  v20 = *((unsigned __int8 *)v18 + v6);
  v21 = *((unsigned __int8 *)v19 + v6);
  if (v20 > 1)
  {
    if (v21 <= 1)
    {
      if (v21 != 1)
      {
LABEL_44:
        (*(void (**)(id *, id *, uint64_t))(v5 + 32))(v18, v19, AssociatedTypeWitness);
        goto LABEL_45;
      }
      goto LABEL_26;
    }
    goto LABEL_33;
  }
  if (v21 > 1)
  {
    if (v20 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v18, AssociatedTypeWitness);
LABEL_33:
    v29 = v18;
    v24 = v19;
LABEL_34:
    v30 = v6 + 1;
    goto LABEL_35;
  }
  if (v18 != v19)
  {
    if (v20 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v18, AssociatedTypeWitness);
    v32 = *((unsigned __int8 *)v19 + v6);
    if (v32 >= 2)
    {
      if (v6 <= 3)
        v33 = v6;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 != 1)
      goto LABEL_44;
LABEL_26:
    v26 = *v19;
LABEL_27:
    *v18 = v26;
    *((_BYTE *)v18 + v6) = 1;
  }
  return a1;
}

uint64_t sub_243B55A64(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFE)
    goto LABEL_21;
  v6 = v5
     + ((unsigned __int16)((*(_WORD *)(v4 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v4 + 80) & 0xF8) & 0x1F8)
     + 1;
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_6;
  v10 = (a2 - 2147483645 + ~(-1 << v7)) >> v7;
  if (v10 > 0xFFFE)
  {
    v8 = *(_DWORD *)((char *)a1 + v6);
    if (v8)
      goto LABEL_14;
LABEL_21:
    v12 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v12) = -1;
    if ((v12 + 1) < 2)
      LODWORD(v12) = 0;
    if (v12 >= 2)
      return (v12 - 1);
    else
      return 0;
  }
  if (v10 > 0xFE)
  {
    v8 = *(unsigned __int16 *)((char *)a1 + v6);
    if (*(_WORD *)((char *)a1 + v6))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (!v10)
    goto LABEL_21;
LABEL_6:
  v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((_BYTE *)a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 2147483646);
}

void sub_243B55BE0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 8)
    v7 = 8;
  v8 = v7
     + ((unsigned __int16)((*(_WORD *)(v6 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v6 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 <= 0x7FFFFFFD)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = (a3 - 2147483645 + ~(-1 << (8 * v8))) >> (8 * v8);
    if (v11 > 0xFFFE)
    {
      v9 = 4u;
    }
    else if (v11 >= 0xFF)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 != 0;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0x7FFFFFFD)
    __asm { BR              X10 }
  v10 = a2 - 2147483646;
  if (v8 < 4)
  {
    if ((_DWORD)v8)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v8);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B55DD0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

uint64_t sub_243B55DF0(_QWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int v8;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 8)
    LODWORD(v6) = 8;
  if (a2 > 0x7FFFFFFE)
  {
    v7 = v6
       + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
       + 1;
    if ((_DWORD)v6
       + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8) != -1)
    {
      if (v7 <= 3)
        v8 = v6
           + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
           + 1;
      else
        v8 = 4;
      bzero(a1, v7);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *a1 = a2;
  }
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.NextSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.NextSuspendedAction);
}

uint64_t sub_243B55F04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[6];

  v0 = swift_checkMetadataState();
  v1 = v0;
  if (v2 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(v0 - 8) + 64;
    swift_getAssociatedTypeWitness();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    sub_243BFE1EC();
    v1 = sub_243BFDD0C();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v5[5] = v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

uint64_t *sub_243B55FF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  id *v21;
  unsigned int v22;
  id v23;
  id v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 & 0xF8 | 7;
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v8 + 64);
  if ((((v9 & 0xF8) + 15) & (unint64_t)~v10) + v11 + 1 > v7)
    v7 = (((v9 & 0xF8) + 15) & ~v10) + v11 + 1;
  v12 = v9 | *(_DWORD *)(v6 + 80);
  if ((v12 & 0x1000F8) != 0 || v7 + 1 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + (((v12 & 0xF8 | 7u) + 16) & ~(unint64_t)(v12 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    v15 = *((unsigned __int8 *)a2 + v7);
    if (v15 >= 2)
    {
      if (v7 <= 3)
        v16 = v7;
      else
        v16 = 4;
      __asm { BR              X16 }
    }
    if (v15 == 1)
    {
      v17 = ~v10;
      *a1 = *a2;
      v18 = (char *)a1 + v10;
      v19 = (char *)a2 + v10;
      v20 = (_QWORD *)((unint64_t)(v18 + 8) & v17);
      v21 = (id *)((unint64_t)(v19 + 8) & v17);
      v22 = *((unsigned __int8 *)v21 + v11);
      if (v22 > 1)
      {
        memcpy(v20, v21, v11 + 1);
      }
      else if (v22 == 1)
      {
        v23 = *v21;
        v24 = *v21;
        *v20 = v23;
        *((_BYTE *)v20 + v11) = 1;
      }
      else
      {
        (*(void (**)(_QWORD *))(v8 + 16))(v20);
        *((_BYTE *)v20 + v11) = 0;
      }
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

void sub_243B561F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  id *v16;
  unsigned int v17;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = v8 | 7;
  v10 = (v8 + 15) & ~(v8 | 7);
  v11 = *(_QWORD *)(v7 + 64);
  if (v11 <= 8)
    v11 = 8;
  v12 = v11 + v10;
  if (v12 + 1 > v5)
    v13 = v12 + 1;
  else
    v13 = v5;
  v14 = *(unsigned __int8 *)(a1 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X16 }
  }
  if (v14 == 1)
  {
    v16 = (id *)((a1 + v9 + 8) & ~v9);
    v17 = *((unsigned __int8 *)v16 + v11);
    if (v17 <= 1)
    {
      if (v17 == 1)

      else
        (*(void (**)(id *, uint64_t))(v7 + 8))(v16, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
}

_QWORD *sub_243B5634C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  id *v20;
  unsigned int v21;
  id v22;
  id v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = (v9 + 15) & ~(v9 | 7);
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = v11 + v12 + 1;
  if (v13 > v7)
    v7 = v13;
  v14 = *((unsigned __int8 *)a2 + v7);
  if (v14 >= 2)
  {
    if (v7 <= 3)
      v15 = v7;
    else
      v15 = 4;
    __asm { BR              X15 }
  }
  if (v14 == 1)
  {
    v16 = ~v10;
    *a1 = *a2;
    v17 = (char *)a1 + v10;
    v18 = (char *)a2 + v10;
    v19 = (_QWORD *)((unint64_t)(v17 + 8) & v16);
    v20 = (id *)((unint64_t)(v18 + 8) & v16);
    v21 = *((unsigned __int8 *)v20 + v12);
    if (v21 > 1)
    {
      memcpy((void *)((unint64_t)(v17 + 8) & v16), v20, v12 + 1);
    }
    else if (v21 == 1)
    {
      v22 = *v20;
      v23 = *v20;
      *v19 = v22;
      *((_BYTE *)v19 + v12) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v8 + 16))((unint64_t)(v17 + 8) & v16);
      *((_BYTE *)v19 + v12) = 0;
    }
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

_QWORD *sub_243B56508(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  id *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  id *v33;
  unsigned int v34;
  id v35;
  id v36;
  uint64_t v38;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v9 = *(_DWORD *)(v8 + 80) & 0xF8;
    v10 = v9 | 7;
    v11 = (v9 + 15) & ~(v9 | 7);
    if (*(_QWORD *)(v8 + 64) <= 8uLL)
      v12 = 8;
    else
      v12 = *(_QWORD *)(v8 + 64);
    v13 = v12 + 1;
    v14 = v11 + v12 + 1;
    if (v14 <= v7)
      v15 = v7;
    else
      v15 = v14;
    v16 = *((unsigned __int8 *)a1 + v15);
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = ~v10;
    if (v16 == 1)
    {
      v27 = (id *)(((unint64_t)a1 + v10 + 8) & v18);
      v28 = *((unsigned __int8 *)v27 + v12);
      if (v28 <= 1)
      {
        if (v28 == 1)

        else
          (*(void (**)(void))(v8 + 8))();
        v13 = v12 + 1;
      }
    }
    else
    {
      v19 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
      v20 = v5;
      v38 = v10;
      v21 = v5;
      v22 = v18;
      v23 = v8;
      v24 = v12;
      v25 = v6;
      v26 = v13;
      v19(a1, v20);
      v13 = v26;
      v6 = v25;
      v12 = v24;
      v8 = v23;
      v18 = v22;
      v5 = v21;
      v10 = v38;
    }
    v29 = *((unsigned __int8 *)a2 + v15);
    if (v29 >= 2)
    {
      if (v15 <= 3)
        v30 = v15;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      *a1 = *a2;
      v31 = (char *)a2 + v10;
      v32 = (_QWORD *)(((unint64_t)a1 + v10 + 8) & v18);
      v33 = (id *)((unint64_t)(v31 + 8) & v18);
      v34 = *((unsigned __int8 *)v33 + v12);
      if (v34 > 1)
      {
        memcpy((void *)(((unint64_t)a1 + v10 + 8) & v18), v33, v13);
      }
      else if (v34 == 1)
      {
        v35 = *v33;
        v36 = *v33;
        *v32 = v35;
        *((_BYTE *)v32 + v12) = 1;
      }
      else
      {
        (*(void (**)(unint64_t))(v8 + 16))(((unint64_t)a1 + v10 + 8) & v18);
        *((_BYTE *)v32 + v12) = 0;
      }
      *((_BYTE *)a1 + v15) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v15) = 0;
    }
  }
  return a1;
}

_QWORD *sub_243B5681C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = (v9 + 15) & ~(v9 | 7);
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = v11 + v12 + 1;
  if (v13 > v7)
    v7 = v13;
  v14 = *((unsigned __int8 *)a2 + v7);
  if (v14 >= 2)
  {
    if (v7 <= 3)
      v15 = v7;
    else
      v15 = 4;
    __asm { BR              X15 }
  }
  if (v14 == 1)
  {
    v16 = ~v10;
    *a1 = *a2;
    v17 = (char *)a1 + v10;
    v18 = (char *)a2 + v10;
    v19 = (_QWORD *)((unint64_t)(v17 + 8) & v16);
    v20 = (_QWORD *)((unint64_t)(v18 + 8) & v16);
    v21 = *((unsigned __int8 *)v20 + v12);
    if (v21 > 1)
    {
      memcpy((void *)((unint64_t)(v17 + 8) & v16), v20, v12 + 1);
    }
    else if (v21 == 1)
    {
      *v19 = *v20;
      *((_BYTE *)v19 + v12) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v8 + 32))((unint64_t)(v17 + 8) & v16);
      *((_BYTE *)v19 + v12) = 0;
    }
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

_QWORD *sub_243B569D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  id *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v36;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v9 = *(_DWORD *)(v8 + 80) & 0xF8;
    v10 = v9 | 7;
    v11 = (v9 + 15) & ~(v9 | 7);
    if (*(_QWORD *)(v8 + 64) <= 8uLL)
      v12 = 8;
    else
      v12 = *(_QWORD *)(v8 + 64);
    v13 = v12 + 1;
    v14 = v11 + v12 + 1;
    if (v14 <= v7)
      v15 = v7;
    else
      v15 = v14;
    v16 = *((unsigned __int8 *)a1 + v15);
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = ~v10;
    if (v16 == 1)
    {
      v27 = (id *)(((unint64_t)a1 + v10 + 8) & v18);
      v28 = *((unsigned __int8 *)v27 + v12);
      if (v28 <= 1)
      {
        if (v28 == 1)

        else
          (*(void (**)(void))(v8 + 8))();
        v13 = v12 + 1;
      }
    }
    else
    {
      v19 = *(void (**)(_QWORD *, uint64_t))(v6 + 8);
      v20 = v5;
      v36 = v10;
      v21 = v5;
      v22 = v18;
      v23 = v8;
      v24 = v12;
      v25 = v6;
      v26 = v13;
      v19(a1, v20);
      v13 = v26;
      v6 = v25;
      v12 = v24;
      v8 = v23;
      v18 = v22;
      v5 = v21;
      v10 = v36;
    }
    v29 = *((unsigned __int8 *)a2 + v15);
    if (v29 >= 2)
    {
      if (v15 <= 3)
        v30 = v15;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      *a1 = *a2;
      v31 = (char *)a2 + v10;
      v32 = (_QWORD *)(((unint64_t)a1 + v10 + 8) & v18);
      v33 = (_QWORD *)((unint64_t)(v31 + 8) & v18);
      v34 = *((unsigned __int8 *)v33 + v12);
      if (v34 > 1)
      {
        memcpy((void *)(((unint64_t)a1 + v10 + 8) & v18), v33, v13);
      }
      else if (v34 == 1)
      {
        *v32 = *v33;
        *((_BYTE *)v32 + v12) = 1;
      }
      else
      {
        (*(void (**)(unint64_t))(v8 + 32))(((unint64_t)a1 + v10 + 8) & v18);
        *((_BYTE *)v32 + v12) = 0;
      }
      *((_BYTE *)a1 + v15) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      *((_BYTE *)a1 + v15) = 0;
    }
  }
  return a1;
}

uint64_t sub_243B56CDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = (unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v9 = 8;
  v10 = v9 + v8;
  if (v10 + 1 > v5)
    v11 = v10 + 1;
  else
    v11 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_24;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    v16 = ((a2 + ~(-1 << v13) - 253) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 < 2)
    {
LABEL_24:
      v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 3)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_24;
LABEL_17:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X11 }
  }
  return (v17 + 254);
}

void sub_243B56E58(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8;
  v10 = (unsigned __int16)(v9 + 15) & (unsigned __int16)~v9 & 0x1F8;
  v11 = *(_QWORD *)(v8 + 64);
  if (v11 <= 8)
    v11 = 8;
  v12 = v11 + v10;
  if (v12 + 1 > v7)
    v13 = v12 + 1;
  else
    v13 = v7;
  v14 = v13 + 1;
  if (a3 < 0xFE)
  {
    v15 = 0;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 + ~(-1 << (8 * v14)) - 253) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v16 = a2 - 254;
  if (v14 < 4)
  {
    if ((_DWORD)v13 != -1)
    {
      v18 = v16 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if ((_DWORD)v14 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, v13 + 1);
    *(_DWORD *)a1 = v16;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B5704C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = (unsigned __int16)(v5 + 15) & (unsigned __int16)~v5 & 0x1F8;
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + v6;
  if (v8 + 1 > v3)
    v9 = v8 + 1;
  else
    v9 = v3;
  result = *(unsigned __int8 *)(a1 + v9);
  if (result >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_243B57134(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  char v19;
  int v20;

  if (a2 > 1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v14 = *(_DWORD *)(v13 + 80) & 0xF8;
    v15 = (unsigned __int16)(v14 + 15) & (unsigned __int16)~v14 & 0x1F8;
    v16 = *(_QWORD *)(v13 + 64);
    if (v16 <= 8)
      v16 = 8;
    v17 = v16 + v15;
    if (v17 + 1 > v12)
      v18 = v17 + 1;
    else
      v18 = v12;
    if (v18 <= 3)
      v19 = ((a2 - 2) >> (8 * v18)) + 2;
    else
      v19 = 2;
    a1[v18] = v19;
    if (v18 >= 4)
      v20 = 4;
    else
      v20 = v18;
    bzero(a1, v18);
    __asm { BR              X10 }
  }
  v5 = *(_QWORD *)(a3 + 16);
  result = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(result - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= 8)
    v8 = 8;
  v9 = *(_DWORD *)(v7 + 80) & 0xF8;
  v10 = v8 + ((unsigned __int16)(v9 + 15) & (unsigned __int16)~v9 & 0x1F8);
  if (v10 + 1 > *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64))
    v11 = v10 + 1;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  a1[v11] = a2;
  return result;
}

uint64_t sub_243B572B0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_243B572E4()
{
  return swift_release();
}

_QWORD *sub_243B572EC(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_243B57354(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t sub_243B57390(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_243B573E0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_243B57438(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_243B57450(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for BoundedBufferStateMachine.InterruptedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStateMachine.InterruptedAction);
}

void sub_243B5747C()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B57498()
{
  return swift_initClassMetadata2();
}

uint64_t sub_243B574DC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_243B574FC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  sub_243BFDD0C();
  *v1 = v0;
  v1[1] = sub_243B575C0;
  return sub_243BFE0FC();
}

uint64_t sub_243B575C0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B57608(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = a2;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 88);
  v2[4] = v4;
  v5 = *(_QWORD *)(v3 + 80);
  v2[5] = v5;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  v6 = sub_243BFDD0C();
  v2[6] = v6;
  v2[7] = *(_QWORD *)(v6 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for BoundedBufferStateMachine.NextAction(255, v5, v4, v7);
  v8 = sub_243BFDD0C();
  v2[10] = v8;
  v2[11] = *(_QWORD *)(v8 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B57720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  void (*v19)(uint64_t, char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 + 96);
  v6 = *(_QWORD *)(v4 + 104);
  v7 = *(_QWORD *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 88);
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v10 + 16);
  type metadata accessor for BoundedBufferStateMachine(0, *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 32), a4);
  sub_243B6A46C((void (*)(uint64_t))sub_243B58EE0, v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
    goto LABEL_7;
  v12 = *(char **)(v4 + 96);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return sub_243BFDF70();
  if (EnumCaseMultiPayload != 1)
  {
LABEL_7:
    v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2572EBF40
                                                                                       + dword_2572EBF40);
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 112) = v24;
    *v24 = v4;
    v24[1] = sub_243B57968;
    return v25(*(_QWORD *)(v4 + 16), 0, 0, (uint64_t)sub_243B58EF8, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 48));
  }
  v15 = *(_QWORD *)(v4 + 56);
  v14 = *(_QWORD *)(v4 + 64);
  v16 = *(_QWORD *)(v4 + 48);
  v17 = *(_QWORD *)v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v19(v14, &v12[*(int *)(TupleTypeMetadata2 + 48)], v16);
  if (v17)
    swift_continuation_throwingResume();
  v20 = *(char **)(v4 + 64);
  v21 = *(_QWORD *)(v4 + 48);
  v22 = *(_QWORD *)(v4 + 16);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 88) + 8))(*(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 80));
  v19(v22, v20, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_243B57968()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B579BC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B57A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Action;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 88);
  Action = type metadata accessor for BoundedBufferStateMachine.NextAction(0, v4, v9, v10);
  v12 = *(_QWORD *)(Action - 8);
  v13 = MEMORY[0x24BDAC7A8](Action);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v26 - v16;
  v19 = type metadata accessor for BoundedBufferStateMachine(0, v4, v9, v18);
  sub_243B52874(v19, (uint64_t)v17);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, Action);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      swift_getAssociatedTypeWitness();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v21 = sub_243BFDD0C();
      v22 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      v23 = v27;
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27, v17, Action);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, Action);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v22, v21);
    }
    else
    {
      v25 = v27;
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v27, v17, Action);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, Action);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    sub_243B57C94(a1, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, Action);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v27, 1, 1, Action);
  }
}

uint64_t sub_243B57C94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v3 = v2;
  v24[1] = a1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = v6;
  v17 = *(_QWORD *)(v5 + 88);
  *((_QWORD *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v14], v9, v6);
  *(_QWORD *)&v16[v15] = v3;
  swift_retain();
  v18 = sub_243BD73EC((uint64_t)v12, (uint64_t)&unk_2572EBF58, (uint64_t)v16);
  v20 = type metadata accessor for BoundedBufferStateMachine(0, v6, v17, v19);
  sub_243B51A18(v18, v20, v21, v22);
  return swift_release();
}

uint64_t sub_243B57E24(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t SuspendedAction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(*a2 + 80);
  v4 = *(_QWORD *)(*a2 + 88);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  v6 = sub_243BFDD0C();
  v28 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v27 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - v9;
  SuspendedAction = type metadata accessor for BoundedBufferStateMachine.NextSuspendedAction(0, v5, v4, v11);
  v13 = *(_QWORD *)(SuspendedAction - 8);
  v14 = MEMORY[0x24BDAC7A8](SuspendedAction);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v26 - v17;
  v19 = a2[2];
  v31 = v5;
  v32 = v4;
  v29 = a1;
  v33 = a1;
  type metadata accessor for BoundedBufferStateMachine(0, v5, v4, v20);
  sub_243B6A46C((void (*)(uint64_t))sub_243B58F00, (uint64_t)v30, v19);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, SuspendedAction);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v16, 1, TupleTypeMetadata2) != 1)
  {
    v23 = (uint64_t)v27;
    v22 = v28;
    v24 = *(_QWORD *)v16;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, &v16[*(int *)(TupleTypeMetadata2 + 48)], v6);
    if (v24)
      swift_continuation_throwingResume();
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v23, v10, v6);
    sub_243B5F734(v23, v29, v6);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, SuspendedAction);
}

uint64_t sub_243B5808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a1;
  v6[11] = a4;
  if (a2)
  {
    swift_getObjectType();
    sub_243BFD9F4();
  }
  return swift_task_switch();
}

uint64_t sub_243B580F4()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = v0[13];
  v2 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_243B58168;
  v3 = swift_continuation_init();
  v4 = nullsub_1(v3, v1, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v2(v4);
  return swift_continuation_await();
}

uint64_t sub_243B58168()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

void sub_243B581A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v3 = sub_243BFE1EC();
  v4 = sub_243BFDD0C();
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v12[-v5];
  v7 = v0[2];
  v13 = v2;
  v14 = v1;
  type metadata accessor for BoundedBufferStateMachine(0, v2, v1, v8);
  type metadata accessor for BoundedBufferStateMachine.InterruptedAction(0, v2, v1, v9);
  sub_243B6A46C((void (*)(uint64_t))sub_243B58E3C, (uint64_t)v12, v7);
  if (v15)
  {
    v11 = v16;
    v10 = v17;
    swift_retain();
    sub_243BFDAD8();
    if (v11)
      swift_continuation_throwingResume();
    if (v10)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v6, 1, 1, v3);
      sub_243B5F734((uint64_t)v6, v10, v4);
    }
    swift_release_n();
  }
}

uint64_t sub_243B58338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[12] = a4;
  v5[13] = a5;
  v6 = *a5;
  v7 = *(_QWORD *)(*a5 + 88);
  v5[14] = v7;
  v8 = *(_QWORD *)(v6 + 80);
  v5[15] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[16] = AssociatedTypeWitness;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v10 = sub_243BFE1EC();
  v5[17] = v10;
  v5[18] = sub_243BFDD0C();
  v5[19] = swift_task_alloc();
  v5[20] = *(_QWORD *)(v10 - 8);
  v5[21] = swift_task_alloc();
  v12 = type metadata accessor for BoundedBufferStateMachine.ElementProducedAction(0, v8, v7, v11);
  v5[22] = v12;
  v5[23] = *(_QWORD *)(v12 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v13 = sub_243BFDD0C();
  v5[26] = v13;
  v5[27] = *(_QWORD *)(v13 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[30] = swift_task_alloc();
  v5[31] = *(_QWORD *)(v8 - 8);
  v5[32] = swift_task_alloc();
  v14 = swift_getAssociatedTypeWitness();
  v5[33] = v14;
  v5[34] = *(_QWORD *)(v14 - 8);
  v5[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B58510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 16))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  sub_243BFDB14();
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 288) = v2;
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v0 + 296) = type metadata accessor for BoundedBufferStateMachine(0, v3, v4, v6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B5907C, v5, v2);
  swift_task_dealloc();
  if (*(_BYTE *)(v0 + 320) == 1)
    return swift_task_switch();
  swift_getAssociatedConformanceWitness();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v8;
  *v8 = v0;
  v8[1] = sub_243B58758;
  return sub_243BFDA30();
}

uint64_t sub_243B58674()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)v0[13];
  v0[2] = v0;
  v0[3] = sub_243B586C4;
  v2 = swift_continuation_init();
  sub_243B58D64(v2, v1, v3, v4);
  return swift_continuation_await();
}

uint64_t sub_243B586C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_getAssociatedConformanceWitness();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 304) = v3;
  *v3 = v2;
  v3[1] = sub_243B58758;
  return sub_243BFDA30();
}

uint64_t sub_243B58758()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B587BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(v2, *(_QWORD *)(v0 + 208));
    v7 = swift_task_alloc();
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    type metadata accessor for BoundedBufferStateMachine.FinishAction(0, v5, v6, v8);
    sub_243B6A46C((void (*)(uint64_t))sub_243B5911C, v7, v4);
    swift_task_dealloc();
    v9 = *(_QWORD *)(v0 + 88);
    if (v9 > 1)
    {
      v34 = *(_QWORD *)(v0 + 272);
      v33 = *(_QWORD *)(v0 + 280);
      v35 = *(_QWORD *)(v0 + 264);
      v36 = *(_QWORD *)(v0 + 152);
      v37 = *(_QWORD *)(v0 + 144);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(v36, 1, 1, *(_QWORD *)(v0 + 136));
      sub_243B5F734(v36, v9, v37);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    v39 = *(_QWORD *)(v0 + 184);
    v40 = *(_QWORD *)(v0 + 192);
    v38 = *(int8x16_t *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v11, v2, v3);
    v14 = (int8x16_t *)swift_task_alloc();
    v14[1] = vextq_s8(v38, v38, 8uLL);
    v14[2].i64[0] = v11;
    sub_243B6A46C((void (*)(uint64_t))sub_243B5916C, (uint64_t)v14, v10);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v40, v12, v13);
    sub_243BFDAF0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v40, 1, TupleTypeMetadata2) != 1)
    {
      v16 = *(uint64_t **)(v0 + 192);
      v18 = *(_QWORD *)(v0 + 160);
      v17 = *(_QWORD *)(v0 + 168);
      v20 = *(_QWORD *)(v0 + 144);
      v19 = *(_QWORD *)(v0 + 152);
      v21 = *(_QWORD *)(v0 + 136);
      v22 = *v16;
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v17, (char *)v16 + *(int *)(TupleTypeMetadata2 + 48), v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v19, v17, v21);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v19, 0, 1, v21);
      sub_243B5F734(v19, v22, v20);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v21);
    }
    v24 = *(_QWORD *)(v0 + 232);
    v23 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v26 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 120);
    v29 = swift_task_alloc();
    *(_QWORD *)(v29 + 16) = v27;
    *(_QWORD *)(v29 + 24) = v28;
    *(_QWORD *)(v0 + 296) = type metadata accessor for BoundedBufferStateMachine(0, v27, v28, v30);
    sub_243B6A46C((void (*)(uint64_t))sub_243B5907C, v29, v26);
    swift_task_dealloc();
    if ((*(_BYTE *)(v0 + 320) & 1) != 0)
    {
      return swift_task_switch();
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      v32 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 304) = v32;
      *v32 = v0;
      v32[1] = sub_243B58758;
      return sub_243BFDA30();
    }
  }
}

uint64_t sub_243B58BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  v5 = (_QWORD *)swift_task_alloc();
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v1;
  type metadata accessor for BoundedBufferStateMachine.FinishAction(0, v3, v4, v6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B590C8, (uint64_t)v5, v2);
  swift_task_dealloc();
  v7 = *(_QWORD *)(v0 + 80);
  if (v7 > 1)
  {
    v8 = *(_QWORD **)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144);
    *v8 = *(_QWORD *)(v0 + 312);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v11);
    sub_243B5F734((uint64_t)v8, v7, v10);
  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_243B58D64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = a2[2];
  v5 = *(_QWORD *)(*a2 + 88);
  v8 = *(_QWORD *)(*a2 + 80);
  v9 = v5;
  v10 = a1;
  type metadata accessor for BoundedBufferStateMachine(0, v8, v5, a4);
  type metadata accessor for BoundedBufferStateMachine.ProducerSuspendedAction(0, v8, v5, v6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B591C0, (uint64_t)&v7, v4);
  if (v11 == 1)
    swift_continuation_throwingResume();
}

uint64_t sub_243B58E08()
{
  sub_243B581A8();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BoundedBufferStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BoundedBufferStorage);
}

void sub_243B58E3C(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for BoundedBufferStateMachine(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_243B537EC(v4, v5, v6, v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
}

uint64_t sub_243B58E88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B4D7A0;
  return sub_243B57608(a1, v1);
}

uint64_t sub_243B58EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_243B57A14(a1, v2, a2);
}

uint64_t sub_243B58EF8(uint64_t a1)
{
  _QWORD *v1;

  return sub_243B57E24(a1, v1);
}

void sub_243B58F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = type metadata accessor for BoundedBufferStateMachine(0, v5, v6, a4);
  sub_243B530D0(v7, v8);
}

uint64_t sub_243B58F54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243B58FDC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  v4 = v1[3];
  v5 = *(_QWORD *)(v1[4] - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v1[2];
  v8 = (uint64_t)v1 + v6;
  v9 = *(uint64_t **)((char *)v1 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_243B4D7A0;
  return sub_243B58338(a1, v7, v4, v8, v9);
}

void sub_243B5907C(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = type metadata accessor for BoundedBufferStateMachine(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_243B51BE0(v4, v5, v6, v7);
  *a2 = v8 & 1;
}

void sub_243B590C8(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = type metadata accessor for BoundedBufferStateMachine(0, v4, v5, a1);
  sub_243B52588(v6, v7);
  *a2 = v8;
}

void sub_243B5911C(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for BoundedBufferStateMachine(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_243B52588(0, v4);
  *a2 = v5;
}

void sub_243B5916C(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = type metadata accessor for BoundedBufferStateMachine(0, v4, v5, a1);
  sub_243B520FC(v6, v7, a2);
}

void sub_243B591C0(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = type metadata accessor for BoundedBufferStateMachine(0, v4, v5, a1);
  sub_243B51E68(v6, v7, v8, v9);
  *a2 = v10 & 1;
}

_QWORD *sub_243B59218(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 88);
  v12 = type metadata accessor for BoundedBufferStateMachine(0, v5, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  sub_243B5199C((uint64_t)v8, a2, v5, v10, (uint64_t)v15);
  v18 = sub_243B6A530((uint64_t)v15, v12, v16, v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v2[2] = v18;
  return v2;
}

_QWORD *sub_243B59324(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_243B59218(a1, a2);
}

uint64_t sub_243B5936C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for UnboundedBufferStateMachine.State(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B593E0(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *__src;
    *v4 = *__src;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)__src + v6);
    if (v10 >= 3)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
    {
      *__dst = *__src;
      *((_BYTE *)__dst + v6) = 2;
      swift_retain();
    }
    else if (v10 == 1)
    {
      v12 = __src[1];
      *__dst = *__src;
      __dst[1] = v12;
      __dst[2] = __src[2];
      *((_BYTE *)__dst + v6) = 1;
      swift_retain();
      swift_retain();
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + v6) = 0;
    }
    v13 = ((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)v13;
    v15 = ((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v13 + 8);
    *(_QWORD *)v15 = v14;
  }
  return v4;
}

_BYTE *sub_243B5957C(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)__src + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *(_QWORD *)__dst = *__src;
    __dst[v6] = 2;
    swift_retain();
  }
  else if (v7 == 1)
  {
    v9 = __src[1];
    *(_QWORD *)__dst = *__src;
    *((_QWORD *)__dst + 1) = v9;
    *((_QWORD *)__dst + 2) = __src[2];
    __dst[v6] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(_BYTE *, _QWORD *))(v5 + 16))(__dst, __src);
    __dst[v6] = 0;
  }
  v10 = ((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  v12 = (unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v12 = v11;
  return __dst;
}

unsigned __int8 *sub_243B596D0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == __src)
    goto LABEL_26;
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
    swift_retain();
  }
  else if (v10 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    __dst[v7] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v7] = 0;
  }
LABEL_26:
  v12 = (unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  v14 = (unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v14 = v13;
  return __dst;
}

_BYTE *sub_243B598F0(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x18uLL)
    v6 = 24;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)__src + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    *(_QWORD *)__dst = *__src;
    __dst[v6] = 2;
  }
  else if (v7 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_QWORD *)__dst + 2) = __src[2];
    __dst[v6] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, _QWORD *))(v5 + 32))(__dst, __src);
    __dst[v6] = 0;
  }
  v9 = ((unint64_t)__src + v6 + 8) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v11 = (unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v11 = v10;
  return __dst;
}

unsigned __int8 *sub_243B59A34(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst == __src)
    goto LABEL_26;
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
  }
  else if (v10 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v7] = 0;
  }
LABEL_26:
  v12 = (unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  v14 = (unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v14 = v13;
  return __dst;
}

uint64_t sub_243B59C3C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x18)
    v3 = 24;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v9 = *(unsigned __int8 *)(((a1 + v3 + 8) & 0xFFFFFFFFFFFFF8) + 8);
    if (v9 > 2)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v4 = (v3 & 0xFFFFFFF8) + 17;
    if (v4 < 4)
      v5 = ((a2 + 2) >> (8 * v4)) + 1;
    else
      v5 = 2;
    if (v5 >= 0x10000)
      v6 = 4;
    else
      v6 = 2;
    if (v5 < 0x100)
      v6 = 1;
    if (v5 >= 2)
      v7 = v6;
    else
      v7 = 0;
    return ((uint64_t (*)(void))((char *)&loc_243B59CB4 + 4 * byte_243BFF023[v7]))();
  }
}

void sub_243B59D2C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x18)
    v5 = 24;
  v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 17;
  if (a3 < 0xFE)
  {
    v9 = 0;
    if (a2 > 0xFD)
      goto LABEL_16;
  }
  else
  {
    if (v6 <= 3)
      v7 = ((a3 + 2) >> (8 * v6)) + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 > 0xFD)
    {
LABEL_16:
      if (v6 >= 4)
        v10 = a2 - 254;
      else
        v10 = (a2 + 2);
      bzero(a1, v6);
      if ((_DWORD)v6 == 1)
        *a1 = v10;
      else
        *(_DWORD *)a1 = v10;
      __asm { BR              X10 }
    }
  }
  __asm { BR              X11 }
}

void sub_243B59E34()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_243B59E3C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x243B59E44);
}

void sub_243B59E5C(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a1)
    *(_BYTE *)(((v2 + a2 + 8) & 0xFFFFFFFFFFFFF8) + 8) = -(char)a1;
}

void sub_243B59E68()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine);
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.State);
}

uint64_t sub_243B59EA4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B59F24(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 3)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X14 }
    }
    if (v10 == 2)
    {
      *__dst = *a2;
      *((_BYTE *)__dst + v5) = 2;
    }
    else
    {
      if (v10 != 1)
      {
        (*(void (**)(uint64_t *))(v4 + 16))(__dst);
        *((_BYTE *)v3 + v5) = 0;
        return v3;
      }
      v12 = a2[1];
      *__dst = *a2;
      __dst[1] = v12;
      __dst[2] = a2[2];
      *((_BYTE *)__dst + v5) = 1;
      swift_retain();
    }
  }
  swift_retain();
  return v3;
}

uint64_t sub_243B5A080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x18)
    v3 = 24;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 >= 3)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X14 }
  }
  if (v4 != 2)
  {
    if (v4 != 1)
      return (*(uint64_t (**)(uint64_t))(v2 + 8))(a1);
    swift_release();
  }
  return swift_release();
}

_BYTE *sub_243B5A16C(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 2;
    swift_retain();
  }
  else if (v6 == 1)
  {
    v8 = a2[1];
    *(_QWORD *)__dst = *a2;
    *((_QWORD *)__dst + 1) = v8;
    *((_QWORD *)__dst + 2) = a2[2];
    __dst[v5] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_243B5A290(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
    swift_retain();
  }
  else if (v10 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    __dst[v7] = 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    __dst[v7] = 0;
  }
  return __dst;
}

_BYTE *sub_243B5A48C(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x18uLL)
    v5 = 24;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 2;
  }
  else if (v6 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = a2[2];
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_243B5A598(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 0x18uLL)
    v7 = 24;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = __dst[v7];
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 2)
    goto LABEL_15;
  if (v8 == 1)
  {
    swift_release();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
LABEL_16:
  v10 = __src[v7];
  if (v10 >= 3)
  {
    if (v7 <= 3)
      v11 = v7;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 2)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v7] = 2;
  }
  else if (v10 == 1)
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
    __dst[v7] = 0;
  }
  return __dst;
}

uint64_t sub_243B5A77C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x18uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 252) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 4)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 253);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B5A840 + 4 * byte_243BFF05A[(v4 - 1)]))();
}

void sub_243B5A88C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x18)
    v5 = 24;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B5AA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 24;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x18uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B5AA7C + 4 * byte_243BFF068[v3]))();
}

void sub_243B5AAC4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x18uLL)
    v4 = 24;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_243B5AB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  type metadata accessor for UnboundedBufferStateMachine.State(0, a4, a5, v11);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for UnboundedBufferStateMachine(0, a4, a5, v12);
  v14 = a6 + *(int *)(result + 36);
  *(_QWORD *)v14 = a2;
  *(_BYTE *)(v14 + 8) = a3;
  return result;
}

uint64_t sub_243B5AC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for UnboundedBufferStateMachine.State(0, v6, *(_QWORD *)(a2 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (_QWORD *)((char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v20 - v12, v4, v7);
  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 0:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v16, v17);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v20[1] = sub_243BFD97C();
      v18 = sub_243BFD9DC();
      MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v18);
      v19 = sub_243BFD370();
      *v11 = a1;
      v11[1] = v19;
      v11[2] = 0;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v8 + 40))(v4, v11, v7);
      return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v13, v6);
    case 1:
      goto LABEL_6;
    case 2:
      __break(1u);
LABEL_6:
      __break(1u);
      break;
  }
  __break(1u);
  return result;
}

void sub_243B5ADE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[14];

  v18[8] = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  v18[9] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  v9 = sub_243BFDD0C();
  v18[3] = *(_QWORD *)(v9 - 8);
  v18[4] = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v18[10] = AssociatedTypeWitness;
  v18[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v18[5] = (char *)v18 - v12;
  v18[6] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = type metadata accessor for UnboundedBufferStateMachine.State(0, v4, v3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v18 - v16, v2, v14);
  v17 = (char *)&loc_243B5AF7C + *((int *)qword_243B5B358 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B5AF8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  void (*v18)(_QWORD *, uint64_t);
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;

  v10 = v2[1];
  *(_QWORD *)(v9 - 184) = *v2;
  *(_QWORD *)(v9 - 176) = v3;
  v11 = v2[2];
  if (!v11)
  {
    *(_QWORD *)(v9 - 88) = v10;
    v18 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
    swift_retain();
    v18(v5, v7);
    swift_storeEnumTagMultiPayload();
    v19 = (char *)v5 + *(int *)(v1 + 36);
    v20 = *(_QWORD *)v19;
    v21 = v19[8];
    if (v21)
    {
      v22 = *(_QWORD *)(v9 - 176);
      if (v21 == 1)
      {
        sub_243B53B80((uint64_t)sub_243B53B74, 0, v10, MEMORY[0x24BE18CF0], v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v27);
        swift_release();
        v23 = *(_QWORD *)(v9 - 112);
        if (*(_QWORD *)(v9 - 96) >= v20)
          goto LABEL_12;
      }
      else
      {
        swift_release();
        v23 = *(_QWORD *)(v9 - 112);
      }
    }
    else
    {
      sub_243B53B80((uint64_t)sub_243B53B74, 0, v10, MEMORY[0x24BE18CF0], v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v27);
      swift_release();
      v22 = *(_QWORD *)(v9 - 176);
      v23 = *(_QWORD *)(v9 - 112);
      if (*(_QWORD *)(v9 - 96) >= v20)
      {
        sub_243BFD364();
        sub_243BFD358();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 168) + 8))(v4, *(_QWORD *)(v9 - 160));
      }
    }
    v24 = *(_QWORD *)(v9 - 152);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 136) + 16))(v24, *(_QWORD *)(v9 - 128), v23);
    sub_243B6A7E4(v24, v23, v0);
    swift_storeEnumTagMultiPayload();
    sub_243BFD364();
    sub_243BFD34C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 144) + 8))(v0, v6);
LABEL_12:
    v18(v5, v7);
    v25 = *(_QWORD *)(v9 - 88);
    *v5 = *(_QWORD *)(v9 - 184);
    v5[1] = v25;
    v5[2] = 0;
    swift_storeEnumTagMultiPayload();
    sub_243BFE1EC();
    sub_243BFDD0C();
    sub_243BFDAF0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v22, 1, 1, TupleTypeMetadata2);
  }
  *(_QWORD *)(v9 - 88) = v10;
  v12 = sub_243BFD364();
  MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v12);
  if ((sub_243BFDC64() & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x243B5B350);
  }
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v5, v7);
  *v5 = *(_QWORD *)(v9 - 184);
  v5[1] = v10;
  v5[2] = 0;
  swift_storeEnumTagMultiPayload();
  v13 = *(_QWORD *)(v9 - 112);
  sub_243BFE1EC();
  sub_243BFDD0C();
  sub_243BFDAF0();
  v14 = swift_getTupleTypeMetadata2();
  v15 = *(_QWORD **)(v9 - 176);
  v16 = (char *)v15 + *(int *)(v14 + 48);
  *v15 = v11;
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 136) + 16))(v16, *(_QWORD *)(v9 - 128), v13);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v15, 0, 1, v14);
}

void sub_243B5B368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  MEMORY[0x24BDAC7A8](v8);
  v10 = type metadata accessor for UnboundedBufferStateMachine.State(0, v4, v3, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v13, v2, v10);
  v14 = (char *)&loc_243B5B49C + *((int *)qword_243B5B628 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B5B4AC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v10 = *(_QWORD *)(v6 + 8);
  v11 = *(_QWORD *)(v6 + 16);
  swift_release();
  if (v11)
  {
    *(_QWORD *)(v9 - 88) = v10;
    v12 = sub_243BFD364();
    MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v12);
    if ((sub_243BFDC64() & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x243B5B620);
    }
    *(_QWORD *)(v9 - 88) = sub_243BFD97C();
    v13 = sub_243BFD9DC();
    MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v13);
    v14 = sub_243BFD370();
    swift_release();
    *v4 = v14;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 40))(v0, v4, v2);
  }
  else
  {
    *(_QWORD *)(v9 - 88) = v10;
    if (v1)
    {
      *v5 = v1;
      swift_storeEnumTagMultiPayload();
      v15 = v1;
      sub_243BFD364();
      sub_243BFD34C();
      (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v5, v3);
    }
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v0, v2);
    *v0 = *(_QWORD *)(v9 - 88);
    swift_storeEnumTagMultiPayload();
    return 1;
  }
  return v11;
}

void sub_243B5B638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[4];
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v5, v6);
  v17[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v7 = sub_243BFE1EC();
  v8 = sub_243BFDD0C();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v17[2] = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v19 = v4;
  v20 = v3;
  v13 = type metadata accessor for UnboundedBufferStateMachine.State(0, v4, v3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v17 - v15, v2, v13);
  v16 = (char *)&loc_243B5B7D0 + *((int *)qword_243B5BC00 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B5B7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v1, v0, v3);
  type metadata accessor for UnboundedBufferStateMachine.NextAction(0, v3, *(_QWORD *)(v2 - 96), v4);
  return swift_storeEnumTagMultiPayload();
}

void sub_243B5BC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[8];
  uint64_t AssociatedTypeWitness;

  v3 = v2;
  v19[3] = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v6, v7);
  v19[7] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v8 = sub_243BFE1EC();
  v9 = sub_243BFDD0C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v19[6] = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  v19[2] = (char *)v19 - v13;
  v19[4] = v5;
  v19[5] = v4;
  v15 = type metadata accessor for UnboundedBufferStateMachine.State(0, v5, v4, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v19 - v17, v3, v15);
  v18 = (char *)&loc_243B5BDB0 + dword_243B5C214[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B5BDC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(_QWORD *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v7 - 152) = v6;
  v8 = *v0;
  v9 = v0[1];
  v10 = v0[2];
  *(_QWORD *)(v7 - 88) = v9;
  v11 = sub_243BFD364();
  swift_retain();
  swift_retain();
  MEMORY[0x249502B6C](MEMORY[0x24BE18D68], v11);
  if ((sub_243BFDC64() & 1) != 0)
  {
    swift_release();
    swift_release();
    if (!v10)
    {
      (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v4, v5);
      *v4 = v8;
      v4[1] = v9;
      v4[2] = *(_QWORD *)(v7 - 136);
      swift_storeEnumTagMultiPayload();
      sub_243BFE1EC();
      v12 = sub_243BFDD0C();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(*(_QWORD *)(v7 - 152), 1, 1, v12);
    }
    __break(1u);
LABEL_8:
    __break(1u);
    JUMPOUT(0x243B5C204);
  }
  swift_release();
  swift_release();
  *(_QWORD *)(v7 - 88) = v9;
  if (v10)
    goto LABEL_8;
  v14 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v14(v4, v5);
  swift_storeEnumTagMultiPayload();
  sub_243BFD358();
  v15 = *(_QWORD *)(v7 - 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v1, 1, v2) == 1)
  {
    __break(1u);
    JUMPOUT(0x243B5C210);
  }
  v16 = *(_QWORD *)(v7 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v1, v2);
  v14(v4, v5);
  v17 = *(_QWORD *)(v7 - 88);
  *v4 = v8;
  v4[1] = v17;
  v4[2] = 0;
  v18 = swift_storeEnumTagMultiPayload();
  MEMORY[0x24BDAC7A8](v18);
  swift_retain();
  swift_retain();
  v19 = *(_QWORD *)(v7 - 152);
  sub_243B52F7C((void (*)(char *))sub_243B53B70, v2, v19);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v2);
  swift_release();
  v20 = sub_243BFE1EC();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
  v21 = sub_243BFDD0C();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 0, 1, v21);
}

void sub_243B5C224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v5 = type metadata accessor for UnboundedBufferStateMachine.State(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v8, v4, v5);
  v9 = (char *)&loc_243B5C2CC + *((int *)qword_243B5C588 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

uint64_t sub_243B5C2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for UnsafeTransfer(255, AssociatedTypeWitness, v8, v9);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  *(_QWORD *)(v6 - 72) = sub_243BFD97C();
  v10 = sub_243BFD9DC();
  MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v10);
  *v2 = sub_243BFD370();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 40))(v1, v2, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v4, v3);
  return 0;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.NextAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.NextAction);
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.FinishAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.FinishAction);
}

uint64_t sub_243B5C5B0()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  result = sub_243BFE1EC();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B5C65C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v11;
  _QWORD *v12;
  id *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  v9 = v5 + (((v6 & 0xF8) + 15) & ~v7) + 1;
  if ((v6 & 0x1000F8) != 0 || v9 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & v8));
    swift_retain();
  }
  else if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    memcpy(a1, a2, v9);
  }
  else
  {
    *a1 = *a2;
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & v8);
    v13 = (id *)(((unint64_t)a2 + 15) & v8);
    v14 = *((unsigned __int8 *)v13 + v5);
    if (v14 >= 2)
    {
      if (v5 <= 3)
        v15 = v5;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    if (v14 == 1)
    {
      v16 = *v13;
      v17 = *v13;
      *v12 = v16;
      *((_BYTE *)v12 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(v12);
      *((_BYTE *)v12 + v5) = 0;
    }
  }
  return a1;
}

void sub_243B5C7E8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id *v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  if (*a1 >= 0xFFFFFFFFuLL)
  {
    v4 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
    v5 = (id *)(((unint64_t)a1 + v4 + 8) & ~v4);
    v6 = *((unsigned __int8 *)v5 + v3);
    if (v6 >= 2)
    {
      if (v3 <= 3)
        v7 = v3;
      else
        v7 = 4;
      __asm { BR              X14 }
    }
    if (v6 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
}

_QWORD *sub_243B5C8FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  id *v11;
  unsigned int v12;
  uint64_t v13;
  id v14;
  id v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  if (*a2 < 0xFFFFFFFFuLL)
  {
    memcpy(a1, a2, v5 + ((v6 + 8) & v7) + 1);
  }
  else
  {
    *a1 = *a2;
    v8 = (char *)a1 + v6;
    v9 = (char *)a2 + v6;
    v10 = (_QWORD *)((unint64_t)(v8 + 8) & v7);
    v11 = (id *)((unint64_t)(v9 + 8) & v7);
    v12 = *((unsigned __int8 *)v11 + v5);
    if (v12 >= 2)
    {
      if (v5 <= 3)
        v13 = v5;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 1)
    {
      v14 = *v11;
      v15 = *v11;
      *v10 = v14;
      *((_BYTE *)v10 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(v10);
      *((_BYTE *)v10 + v5) = 0;
    }
  }
  return a1;
}

unint64_t *sub_243B5CA5C(unint64_t *a1, unint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  id *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  id v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = v6 + ((v7 + 15) & v9) + 1;
  v11 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *a1 = v11;
      v18 = (char *)a1 + v8;
      v19 = (char *)a2 + v8;
      v14 = (id *)((unint64_t)(v18 + 8) & v9);
      v20 = (void **)((unint64_t)(v19 + 8) & v9);
      v21 = *((unsigned __int8 *)v20 + v6);
      if (v21 >= 2)
      {
        if (v6 <= 3)
          v22 = v6;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      if (v21 == 1)
      {
        v26 = *v20;
LABEL_40:
        v29 = v26;
        *v14 = v26;
        *((_BYTE *)v14 + v6) = 1;
        return a1;
      }
      (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v14, v20, AssociatedTypeWitness);
LABEL_42:
      *((_BYTE *)v14 + v6) = 0;
      return a1;
    }
    goto LABEL_29;
  }
  if (v11 < 0xFFFFFFFF)
  {
    v23 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v24 = *((unsigned __int8 *)v23 + v6);
    if (v24 >= 2)
    {
      if (v6 <= 3)
        v25 = v6;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)

    else
      (*(void (**)(void))(v5 + 8))();
LABEL_29:
    memcpy(a1, a2, v10);
    return a1;
  }
  *a1 = v11;
  v12 = (unint64_t)a1 + v8;
  v13 = (unint64_t)a2 + v8;
  v12 += 8;
  v14 = (id *)(v12 & v9);
  v13 += 8;
  v15 = (void **)(v13 & v9);
  if ((v12 & v9) != (v13 & v9))
  {
    v16 = *((unsigned __int8 *)v14 + v6);
    if (v16 >= 2)
    {
      if (v6 <= 3)
        v17 = v6;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v14, AssociatedTypeWitness);
    v27 = *((unsigned __int8 *)v15 + v6);
    if (v27 >= 2)
    {
      if (v6 <= 3)
        v28 = v6;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      v26 = *v15;
      goto LABEL_40;
    }
    (*(void (**)(id *, void **, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    goto LABEL_42;
  }
  return a1;
}

_QWORD *sub_243B5CDCC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v7 = ~v6;
  if (*a2 < 0xFFFFFFFFuLL)
  {
    memcpy(a1, a2, v5 + ((v6 + 8) & v7) + 1);
  }
  else
  {
    *a1 = *a2;
    v8 = (char *)a1 + v6;
    v9 = (char *)a2 + v6;
    v10 = (_QWORD *)((unint64_t)(v8 + 8) & v7);
    v11 = (_QWORD *)((unint64_t)(v9 + 8) & v7);
    v12 = *((unsigned __int8 *)v11 + v5);
    if (v12 >= 2)
    {
      if (v5 <= 3)
        v13 = v5;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 1)
    {
      *v10 = *v11;
      *((_BYTE *)v10 + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 32))(v10);
      *((_BYTE *)v10 + v5) = 0;
    }
  }
  return a1;
}

unint64_t *sub_243B5CF24(unint64_t *a1, unint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  unsigned int v21;
  uint64_t v22;
  id *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 | 7;
  v9 = ~(v7 | 7);
  v10 = v6 + ((v7 + 15) & v9) + 1;
  v11 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *a1 = v11;
      v18 = (char *)a1 + v8;
      v19 = (char *)a2 + v8;
      v14 = (id *)((unint64_t)(v18 + 8) & v9);
      v20 = (void **)((unint64_t)(v19 + 8) & v9);
      v21 = *((unsigned __int8 *)v20 + v6);
      if (v21 >= 2)
      {
        if (v6 <= 3)
          v22 = v6;
        else
          v22 = 4;
        __asm { BR              X12 }
      }
      if (v21 == 1)
      {
        v26 = *v20;
LABEL_40:
        *v14 = v26;
        *((_BYTE *)v14 + v6) = 1;
        return a1;
      }
      (*(void (**)(id *, void **, uint64_t))(v5 + 32))(v14, v20, AssociatedTypeWitness);
LABEL_42:
      *((_BYTE *)v14 + v6) = 0;
      return a1;
    }
    goto LABEL_29;
  }
  if (v11 < 0xFFFFFFFF)
  {
    v23 = (id *)(((unint64_t)a1 + v8 + 8) & v9);
    v24 = *((unsigned __int8 *)v23 + v6);
    if (v24 >= 2)
    {
      if (v6 <= 3)
        v25 = v6;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)

    else
      (*(void (**)(void))(v5 + 8))();
LABEL_29:
    memcpy(a1, a2, v10);
    return a1;
  }
  *a1 = v11;
  v12 = (unint64_t)a1 + v8;
  v13 = (unint64_t)a2 + v8;
  v12 += 8;
  v14 = (id *)(v12 & v9);
  v13 += 8;
  v15 = (void **)(v13 & v9);
  if ((v12 & v9) != (v13 & v9))
  {
    v16 = *((unsigned __int8 *)v14 + v6);
    if (v16 >= 2)
    {
      if (v6 <= 3)
        v17 = v6;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(v14, AssociatedTypeWitness);
    v27 = *((unsigned __int8 *)v15 + v6);
    if (v27 >= 2)
    {
      if (v6 <= 3)
        v28 = v6;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      v26 = *v15;
      goto LABEL_40;
    }
    (*(void (**)(id *, void **, uint64_t))(v5 + 32))(v14, v15, AssociatedTypeWitness);
    goto LABEL_42;
  }
  return a1;
}

uint64_t sub_243B5D28C(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_21;
  v6 = v5
     + ((unsigned __int16)((*(_WORD *)(v4 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v4 + 80) & 0xF8) & 0x1F8)
     + 1;
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_6;
  v10 = (a2 - 2147483646 + ~(-1 << v7)) >> v7;
  if (v10 > 0xFFFE)
  {
    v8 = *(_DWORD *)((char *)a1 + v6);
    if (v8)
      goto LABEL_14;
LABEL_21:
    v12 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v12) = -1;
    if ((v12 + 1) >= 2)
      return v12;
    else
      return 0;
  }
  if (v10 > 0xFE)
  {
    v8 = *(unsigned __int16 *)((char *)a1 + v6);
    if (*(_WORD *)((char *)a1 + v6))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (!v10)
    goto LABEL_21;
LABEL_6:
  v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((_BYTE *)a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 0x7FFFFFFF);
}

void sub_243B5D400(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = (unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v9 = 8;
  v10 = v9 + v8 + 1;
  if (a3 < 0x7FFFFFFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = (a3 - 2147483646 + ~(-1 << (8 * v10))) >> (8 * v10);
    if (v13 > 0xFFFE)
    {
      v11 = 4u;
    }
    else if (v13 >= 0xFF)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 != 0;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  v12 = a2 - 0x7FFFFFFF;
  if (v10 < 4)
  {
    if ((_DWORD)v10)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B5D5F4(_QWORD *a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  size_t v8;
  int v9;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 8)
    LODWORD(v6) = 8;
  if (a2 < 0)
  {
    v7 = *(_DWORD *)(v5 + 80) & 0xF8;
    v8 = v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) + 1;
    if ((_DWORD)v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) != -1)
    {
      if (v8 <= 3)
        v9 = v6 + ((unsigned __int16)(v7 + 15) & (unsigned __int16)~v7 & 0x1F8) + 1;
      else
        v9 = 4;
      bzero(a1, v8);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *a1 = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.ElementProducedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.ElementProducedAction);
}

uint64_t sub_243B5D6F8()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  result = sub_243BFDD0C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

char *sub_243B5D794(char *a1, char **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + 1;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || v7 > 0x18)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if ((v11 + 1) > 2u || v11 > 1)
    {
      memcpy(a1, a2, v7);
    }
    else if (v11 == 1)
    {
      v12 = *a2;
      v13 = v12;
      *(_QWORD *)a1 = v12;
      a1[v6] = 1;
    }
    else
    {
      (*(void (**)(char *, char **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
    }
  }
  return a1;
}

void sub_243B5D898(id *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *((unsigned __int8 *)a1 + v4);
  if (v5 <= 1)
  {
    if (v5 == 1)

    else
      (*(void (**)(id *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
}

_QWORD *sub_243B5D920(_QWORD *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  id v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if ((v7 + 1) > 2u || v7 > 1)
  {
    memcpy(a1, a2, v6 + 1);
  }
  else if (v7 == 1)
  {
    v8 = *a2;
    v9 = v8;
    *a1 = v8;
    *((_BYTE *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, void **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v6) = 0;
  }
  return a1;
}

id *sub_243B5D9E8(id *a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  id v10;
  unsigned int v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  v8 = *((unsigned __int8 *)a2 + v6);
  if ((v7 + 1) > 2u)
  {
    if ((v8 + 1) > 2u || v8 > 1)
      goto LABEL_23;
    if (v8 != 1)
      goto LABEL_20;
    goto LABEL_14;
  }
  if ((v8 + 1) > 2u)
  {
    if (v7 > 1)
    {
LABEL_23:
      memcpy(a1, a2, v6 + 1);
      return a1;
    }
    if (v7 != 1)
    {
LABEL_22:
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_23;
    }
LABEL_17:

    goto LABEL_23;
  }
  if (v7 > 1)
  {
    if (v8 > 1)
      goto LABEL_23;
    if (v8 != 1)
    {
LABEL_20:
      (*(void (**)(id *, void **, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v6) = 0;
      return a1;
    }
LABEL_14:
    v9 = *a2;
    v10 = v9;
    *a1 = v9;
    *((_BYTE *)a1 + v6) = 1;
    return a1;
  }
  if (v8 > 1)
  {
    if (v7 != 1)
      goto LABEL_22;
    goto LABEL_17;
  }
  if (a1 != a2)
  {
    if (v7 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v12 = *((unsigned __int8 *)a2 + v6);
    if (v12 >= 2)
    {
      if (v6 <= 3)
        v13 = v6;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 != 1)
      goto LABEL_20;
    goto LABEL_14;
  }
  return a1;
}

_QWORD *sub_243B5DBD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if ((v7 + 1) > 2u || v7 > 1)
  {
    memcpy(a1, a2, v6 + 1);
  }
  else if (v7 == 1)
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *((_BYTE *)a1 + v6) = 0;
  }
  return a1;
}

id *sub_243B5DC94(id *a1, id *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v6 = 8;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *((unsigned __int8 *)a1 + v6);
  v8 = *((unsigned __int8 *)a2 + v6);
  if ((v7 + 1) > 2u)
  {
    if ((v8 + 1) > 2u || v8 > 1)
      goto LABEL_23;
    if (v8 != 1)
      goto LABEL_20;
    goto LABEL_14;
  }
  if ((v8 + 1) > 2u)
  {
    if (v7 > 1)
    {
LABEL_23:
      memcpy(a1, a2, v6 + 1);
      return a1;
    }
    if (v7 != 1)
    {
LABEL_22:
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      goto LABEL_23;
    }
LABEL_17:

    goto LABEL_23;
  }
  if (v7 > 1)
  {
    if (v8 > 1)
      goto LABEL_23;
    if (v8 != 1)
    {
LABEL_20:
      (*(void (**)(id *, id *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v6) = 0;
      return a1;
    }
LABEL_14:
    *a1 = *a2;
    *((_BYTE *)a1 + v6) = 1;
    return a1;
  }
  if (v8 > 1)
  {
    if (v7 != 1)
      goto LABEL_22;
    goto LABEL_17;
  }
  if (a1 != a2)
  {
    if (v7 == 1)

    else
      (*(void (**)(id *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 != 1)
      goto LABEL_20;
    goto LABEL_14;
  }
  return a1;
}

uint64_t sub_243B5DE78(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = 8;
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > 8uLL)
    v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) > 3)
    goto LABEL_6;
  v10 = ((a2 + ~(-1 << v7) - 252) >> v7) + 1;
  if (HIWORD(v10))
  {
    v8 = *(_DWORD *)(a1 + v6);
    if (v8)
      goto LABEL_14;
LABEL_21:
    v12 = *(unsigned __int8 *)(a1 + v5);
    if (v12 >= 2)
      v13 = (v12 ^ 0xFF) + 1;
    else
      v13 = 0;
    if (v13 >= 2)
      v14 = v13 - 1;
    else
      v14 = 0;
    if (v14 >= 2)
      return v14 - 1;
    else
      return 0;
  }
  if (v10 > 0xFF)
  {
    v8 = *(unsigned __int16 *)(a1 + v6);
    if (*(_WORD *)(a1 + v6))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v10 < 2)
    goto LABEL_21;
LABEL_6:
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 253);
}

void sub_243B5DFD4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = v6 + 1;
  if (a3 < 0xFD)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 252) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v9 = a2 - 253;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B5E1A0(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 2)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 2)
    return v4 - 1;
  else
    return 0;
}

uint64_t sub_243B5E20C(void *a1, unsigned int a2)
{
  uint64_t result;
  unint64_t v5;
  size_t v6;
  int v7;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  if (a2 > 0xFD)
  {
    v6 = (v5 + 1);
    if ((_DWORD)v5 != -1)
    {
      if (v6 <= 3)
        v7 = v5 + 1;
      else
        v7 = 4;
      bzero(a1, v6);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *((_BYTE *)a1 + v5) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.NextSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.NextSuspendedAction);
}

uint64_t sub_243B5E300()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    sub_243BFE1EC();
    v0 = sub_243BFDD0C();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

char *sub_243B5E3D8(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  char *v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  if (v10 + 1 > v7)
    v7 = v10 + 1;
  v11 = *(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80);
  if ((v11 & 0x1000F8) != 0 || v7 + 1 > 0x18)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v13[((v11 & 0xF8 | 7u) + 16) & ~(unint64_t)(v11 & 0xF8 | 7u)];
    swift_retain();
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X15 }
    }
    if (v14 == 1)
    {
      v16 = *((unsigned __int8 *)a2 + v10);
      if (v16 > 1)
      {
        memcpy(a1, a2, v10 + 1);
      }
      else if (v16 == 1)
      {
        v17 = *a2;
        v18 = v17;
        *(_QWORD *)a1 = v17;
        a1[v10] = 1;
      }
      else
      {
        (*(void (**)(char *, char **, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v10] = 0;
      }
      a1[v7] = 1;
    }
    else
    {
      (*(void (**)(char *, char **, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

void sub_243B5E5A8(id *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= 8)
    v8 = 8;
  if (v8 + 1 > v5)
    v9 = v8 + 1;
  else
    v9 = v5;
  v10 = *((unsigned __int8 *)a1 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X15 }
  }
  if (v10 == 1)
  {
    v12 = *((unsigned __int8 *)a1 + v8);
    if (v12 <= 1)
    {
      if (v12 == 1)

      else
        (*(void (**)(id *, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(id *, uint64_t))(v4 + 8))(a1, v3);
  }
}

_QWORD *sub_243B5E6E0(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  id v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  if (v10 + 1 > v7)
    v7 = v10 + 1;
  v11 = *((unsigned __int8 *)a2 + v7);
  if (v11 >= 2)
  {
    if (v7 <= 3)
      v12 = v7;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 1)
  {
    v13 = *((unsigned __int8 *)a2 + v10);
    if (v13 > 1)
    {
      memcpy(a1, a2, v10 + 1);
    }
    else if (v13 == 1)
    {
      v14 = *a2;
      v15 = v14;
      *a1 = v14;
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, void **, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v10) = 0;
    }
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

id *sub_243B5E868(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  id v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v9 + 64) <= 8uLL)
      v10 = 8;
    else
      v10 = *(_QWORD *)(v9 + 64);
    if (v10 + 1 > v7)
      v7 = v10 + 1;
    v11 = *((unsigned __int8 *)a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      v13 = *((unsigned __int8 *)a1 + v10);
      if (v13 <= 1)
      {
        if (v13 == 1)

        else
          (*(void (**)(id *, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
      }
    }
    else
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
      v16 = *((unsigned __int8 *)a2 + v10);
      if (v16 > 1)
      {
        memcpy(a1, a2, v10 + 1);
      }
      else if (v16 == 1)
      {
        v17 = *a2;
        v18 = v17;
        *a1 = v17;
        *((_BYTE *)a1 + v10) = 1;
      }
      else
      {
        (*(void (**)(id *, void **, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v10) = 0;
      }
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_QWORD *sub_243B5EAC4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  if (v10 + 1 > v7)
    v7 = v10 + 1;
  v11 = *((unsigned __int8 *)a2 + v7);
  if (v11 >= 2)
  {
    if (v7 <= 3)
      v12 = v7;
    else
      v12 = 4;
    __asm { BR              X14 }
  }
  if (v11 == 1)
  {
    v13 = *((unsigned __int8 *)a2 + v10);
    if (v13 > 1)
    {
      memcpy(a1, a2, v10 + 1);
    }
    else if (v13 == 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 32))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v10) = 0;
    }
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

id *sub_243B5EC44(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if (*(_QWORD *)(v9 + 64) <= 8uLL)
      v10 = 8;
    else
      v10 = *(_QWORD *)(v9 + 64);
    if (v10 + 1 > v7)
      v7 = v10 + 1;
    v11 = *((unsigned __int8 *)a1 + v7);
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      v13 = *((unsigned __int8 *)a1 + v10);
      if (v13 <= 1)
      {
        if (v13 == 1)

        else
          (*(void (**)(id *, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
      }
    }
    else
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
      v16 = *((unsigned __int8 *)a2 + v10);
      if (v16 > 1)
      {
        memcpy(a1, a2, v10 + 1);
      }
      else if (v16 == 1)
      {
        *a1 = *a2;
        *((_BYTE *)a1 + v10) = 1;
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v9 + 32))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v10) = 0;
      }
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

uint64_t sub_243B5EE98(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= 8)
    v6 = 8;
  if (v6 + 1 > v5)
    v7 = v6 + 1;
  else
    v7 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_24;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v12 < 2)
    {
LABEL_24:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_17:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 254);
}

void sub_243B5EFFC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= 8)
    v8 = 8;
  if (v8 + 1 > v7)
    v9 = v8 + 1;
  else
    v9 = v7;
  v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B5F1D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= 8)
    v4 = 8;
  if (v4 + 1 > v3)
    v5 = v4 + 1;
  else
    v5 = v3;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_243B5F2A8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char v12;
  int v13;

  if (a2 > 1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v10 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v10 <= 8)
      v10 = 8;
    if (v10 + 1 > v9)
      v11 = v10 + 1;
    else
      v11 = v9;
    if (v11 <= 3)
      v12 = ((a2 - 2) >> (8 * v11)) + 2;
    else
      v12 = 2;
    a1[v11] = v12;
    if (v11 >= 4)
      v13 = 4;
    else
      v13 = v11;
    bzero(a1, v11);
    __asm { BR              X10 }
  }
  v5 = *(_QWORD *)(a3 + 16);
  result = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v7 <= 8)
    v7 = 8;
  if (v7 + 1 > *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64))
    v8 = v7 + 1;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  a1[v8] = a2;
  return result;
}

_QWORD *sub_243B5F3F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_QWORD *sub_243B5F420(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_243B5F478(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_243B5F4B4(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_243B5F504(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_243B5F558(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.InterruptedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.InterruptedAction);
}

uint64_t sub_243B5F584(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_243B5F5CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_243B5F610(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_243B5F628(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for UnboundedBufferStateMachine.Policy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStateMachine.Policy);
}

uint64_t sub_243B5F650(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_243B5F670()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  sub_243BFDD0C();
  *v1 = v0;
  v1[1] = sub_243B575C0;
  return sub_243BFE0FC();
}

uint64_t sub_243B5F734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_resume();
}

uint64_t sub_243B5F76C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 80);
  v4[4] = v6;
  v7 = *(_QWORD *)(v5 + 88);
  v4[5] = v7;
  v4[6] = type metadata accessor for UnboundedBufferStateMachine.NextAction(255, v6, v7, a4);
  v8 = sub_243BFDD0C();
  v4[7] = v8;
  v4[8] = *(_QWORD *)(v8 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B5F800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 56);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(v10 + 16);
  type metadata accessor for UnboundedBufferStateMachine(0, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a4);
  sub_243B6A46C((void (*)(uint64_t))sub_243B60CBC, v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v6, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
LABEL_5:
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2572EBF40
                                                                                       + dword_2572EBF40);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 88) = v17;
    swift_getAssociatedTypeWitness();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    sub_243BFE1EC();
    v18 = sub_243BFDD0C();
    *v17 = v4;
    v17[1] = sub_243B5FA90;
    return v19(*(_QWORD *)(v4 + 16), 0, 0, (uint64_t)sub_243B60CD4, *(_QWORD *)(v4 + 24), v18);
  }
  v12 = *(_QWORD *)(v4 + 72);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *(_QWORD *)(v4 + 16);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 64) + 8))(*(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 56));
      swift_getAssociatedTypeWitness();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v15 = sub_243BFDD0C();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, v12, v15);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v4 + 8))();
    }
    goto LABEL_5;
  }
  return sub_243BFDF70();
}

uint64_t sub_243B5FA90()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B5FAE4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B5FB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Action;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 88);
  Action = type metadata accessor for UnboundedBufferStateMachine.NextAction(0, v4, v9, v10);
  v12 = *(_QWORD *)(Action - 8);
  v13 = MEMORY[0x24BDAC7A8](Action);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v23 - v16;
  v19 = type metadata accessor for UnboundedBufferStateMachine(0, v4, v9, v18);
  sub_243B5B638(v19);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, Action);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v21 = v24;
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24, v17, Action);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, Action);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, Action);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24, v17, Action);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, Action);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v4);
    sub_243B5FD20(a1, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, Action);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v24, 1, 1, Action);
  }
}

uint64_t sub_243B5FD20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v3 = v2;
  v24[1] = a1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = v6;
  v17 = *(_QWORD *)(v5 + 88);
  *((_QWORD *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v14], v9, v6);
  *(_QWORD *)&v16[v15] = v3;
  swift_retain();
  v18 = sub_243BD73EC((uint64_t)v12, (uint64_t)&unk_2572EC400, (uint64_t)v16);
  v20 = type metadata accessor for UnboundedBufferStateMachine(0, v6, v17, v19);
  sub_243B5AC20(v18, v20, v21, v22);
  return swift_release();
}

uint64_t sub_243B5FEB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t SuspendedAction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v24;
  uint64_t v25;
  char v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a1;
  v4 = *(_QWORD *)(*a2 + 80);
  v3 = *(_QWORD *)(*a2 + 88);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFE1EC();
  v5 = sub_243BFDD0C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v24 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - v9;
  SuspendedAction = type metadata accessor for UnboundedBufferStateMachine.NextSuspendedAction(0, v4, v3, v11);
  v13 = *(_QWORD *)(SuspendedAction - 8);
  v14 = MEMORY[0x24BDAC7A8](SuspendedAction);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - v17;
  v19 = a2[2];
  v27 = v4;
  v28 = v3;
  v29 = v25;
  type metadata accessor for UnboundedBufferStateMachine(0, v4, v3, v20);
  sub_243B6A46C((void (*)(uint64_t))sub_243B60CDC, (uint64_t)v26, v19);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, SuspendedAction);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) != 1)
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v21(v10, v16, v5);
    v22 = v24;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v24, v10, v5);
    v21(*(char **)(*(_QWORD *)(v25 + 64) + 40), v22, v5);
    swift_continuation_resume();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, SuspendedAction);
}

void sub_243B600E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*v0 + 80);
  v1 = *(_QWORD *)(*v0 + 88);
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v3 = sub_243BFE1EC();
  v4 = sub_243BFDD0C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v12[-v6];
  v8 = v0[2];
  v13 = v2;
  v14 = v1;
  type metadata accessor for UnboundedBufferStateMachine(0, v2, v1, v9);
  type metadata accessor for UnboundedBufferStateMachine.InterruptedAction(0, v2, v1, v10);
  sub_243B6A46C((void (*)(uint64_t))sub_243B60C1C, (uint64_t)v12, v8);
  if (v15)
  {
    v11 = v16;
    swift_retain();
    sub_243BFDAD8();
    if (v11)
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 1, 1, v3);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 64) + 40), v7, v4);
      swift_continuation_resume();
    }
    swift_release_n();
  }
}

uint64_t sub_243B60274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[4] = a4;
  v5[5] = a5;
  v6 = *a5;
  v7 = *(_QWORD *)(*a5 + 88);
  v5[6] = v7;
  v8 = *(_QWORD *)(v6 + 80);
  v5[7] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[8] = AssociatedTypeWitness;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v10 = sub_243BFE1EC();
  v5[9] = v10;
  v11 = sub_243BFDD0C();
  v5[10] = v11;
  v5[11] = *(_QWORD *)(v11 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = *(_QWORD *)(v10 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[16] = swift_task_alloc();
  v13 = type metadata accessor for UnboundedBufferStateMachine.ElementProducedAction(0, v8, v7, v12);
  v5[17] = v13;
  v5[18] = *(_QWORD *)(v13 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v14 = swift_getAssociatedTypeWitness();
  v5[21] = v14;
  v5[22] = *(_QWORD *)(v14 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  sub_243BFDD0C();
  v5[25] = swift_task_alloc();
  v5[26] = *(_QWORD *)(v8 - 8);
  v5[27] = swift_task_alloc();
  v15 = swift_getAssociatedTypeWitness();
  v5[28] = v15;
  v5[29] = *(_QWORD *)(v15 - 8);
  v5[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B60494()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[26] + 16))(v0[27], v0[4], v0[7]);
  sub_243BFDB14();
  v0[31] = swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[32] = v1;
  *v1 = v0;
  v1[1] = sub_243B60558;
  return sub_243BFDA3C();
}

uint64_t sub_243B60558()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B605BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
    v7 = *(_QWORD *)(v6 + 16);
    v8 = swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v4;
    *(_QWORD *)(v8 + 24) = v5;
    type metadata accessor for UnboundedBufferStateMachine(0, v4, v5, v9);
    type metadata accessor for UnboundedBufferStateMachine.FinishAction(0, v4, v5, v10);
    sub_243B6A46C((void (*)(uint64_t))sub_243B60EAC, v8, v7);
    swift_task_dealloc();
    v11 = *(_QWORD *)(v0 + 24);
    if (v11 >= 2)
    {
      v12 = *(_QWORD *)(v0 + 96);
      v13 = *(_QWORD *)(v0 + 80);
      v14 = *(_QWORD *)(v0 + 88);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 56))(v12, 1, 1, *(_QWORD *)(v0 + 72));
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 64) + 40), v12, v13);
      swift_continuation_resume();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 56);
    v21 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v18, v1, v3);
    v22 = (_QWORD *)swift_task_alloc();
    v22[2] = v19;
    v22[3] = v20;
    v22[4] = v18;
    type metadata accessor for UnboundedBufferStateMachine(0, v19, v20, v23);
    sub_243B6A46C((void (*)(uint64_t))sub_243B60EFC, (uint64_t)v22, v21);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v35, v16, v17);
    sub_243BFDAF0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v35, 1, TupleTypeMetadata2) != 1)
    {
      v25 = *(char **)(v0 + 152);
      v27 = *(_QWORD *)(v0 + 104);
      v26 = *(_QWORD *)(v0 + 112);
      v29 = *(_QWORD *)(v0 + 88);
      v28 = *(_QWORD *)(v0 + 96);
      v31 = *(_QWORD *)(v0 + 72);
      v30 = *(_QWORD *)(v0 + 80);
      v32 = *(_QWORD *)v25;
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, &v25[*(int *)(TupleTypeMetadata2 + 48)], v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v28, v26, v31);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v31);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v29 + 32))(*(_QWORD *)(*(_QWORD *)(v32 + 64) + 40), v28, v30);
      swift_continuation_resume();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v31);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v0 + 248) = swift_getAssociatedConformanceWitness();
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v33;
    *v33 = v0;
    v33[1] = sub_243B60558;
    return sub_243BFDA3C();
  }
}

uint64_t sub_243B6099C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 32);
  v1(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  swift_getAssociatedConformanceWitness();
  v2 = sub_243BFE0CC();
  v3 = *(_QWORD *)(v0 + 184);
  if (v2)
  {
    v4 = (void *)v2;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 168);
    v4 = (void *)swift_allocError();
    v1(v6, v3, v5);
  }
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
  v10 = *(_QWORD *)(v9 + 16);
  v11 = (_QWORD *)swift_task_alloc();
  v11[2] = v7;
  v11[3] = v8;
  v11[4] = v4;
  type metadata accessor for UnboundedBufferStateMachine(0, v7, v8, v12);
  type metadata accessor for UnboundedBufferStateMachine.FinishAction(0, v7, v8, v13);
  sub_243B6A46C((void (*)(uint64_t))sub_243B60E58, (uint64_t)v11, v10);
  swift_task_dealloc();
  v14 = *(_QWORD *)(v0 + 16);
  if (v14 > 1)
  {
    v15 = *(_QWORD **)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 72);
    *v15 = v4;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v19);
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(v18 + 32))(*(_QWORD *)(*(_QWORD *)(v14 + 64) + 40), v15, v17);
    swift_continuation_resume();
  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B60BE8()
{
  sub_243B600E0();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnboundedBufferStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnboundedBufferStorage);
}

void sub_243B60C1C(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for UnboundedBufferStateMachine(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_243B5C224(v4, v5, v6, v7);
  *a2 = v8;
  a2[1] = v9;
}

uint64_t sub_243B60C64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B4D7A0;
  return sub_243B5F76C(a1, v1, v5, v6);
}

uint64_t sub_243B60CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_243B5FB30(a1, v2, a2);
}

uint64_t sub_243B60CD4(uint64_t a1)
{
  _QWORD *v1;

  return sub_243B5FEB0(a1, v1);
}

void sub_243B60CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = type metadata accessor for UnboundedBufferStateMachine(0, v5, v6, a4);
  sub_243B5BC10(v7, v8);
}

uint64_t sub_243B60D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243B60DB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  v4 = v1[3];
  v5 = *(_QWORD *)(v1[4] - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v1[2];
  v8 = (uint64_t)v1 + v6;
  v9 = *(uint64_t **)((char *)v1 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_243B4D7A0;
  return sub_243B60274(a1, v7, v4, v8, v9);
}

void sub_243B60E58(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = type metadata accessor for UnboundedBufferStateMachine(0, v4, v5, a1);
  sub_243B5B368(v6, v7);
  *a2 = v8;
}

void sub_243B60EAC(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UnboundedBufferStateMachine(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  sub_243B5B368(0, v4);
  *a2 = v5;
}

void sub_243B60EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[4];
  v8 = type metadata accessor for UnboundedBufferStateMachine(0, v5, v6, a4);
  sub_243B5ADE8(v7, v8);
}

_QWORD *sub_243B60F50(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[12];
  int v22;

  v22 = a3;
  v6 = *(_QWORD *)(*v3 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(v10 + 88);
  v13 = type metadata accessor for UnboundedBufferStateMachine(0, v6, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v21[-v15];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  sub_243B5AB8C((uint64_t)v9, a2, v22, v6, v11, (uint64_t)v16);
  v19 = sub_243B6A530((uint64_t)v16, v13, v17, v18);
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
  v3[2] = v19;
  return v3;
}

_QWORD *sub_243B61068(uint64_t a1, uint64_t a2, int a3)
{
  swift_allocObject();
  return sub_243B60F50(a1, a2, a3);
}

_QWORD *AsyncChannel.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v0[2] = sub_243B687E4(*(_QWORD *)(*v0 + 80), MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v0[3] = v1;
  return v0;
}

_QWORD *AsyncChannel.init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0[2] = sub_243B687E4(*(_QWORD *)(*v0 + 80), MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v0[3] = v1;
  return v0;
}

uint64_t AsyncChannel.send(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_243B6115C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[3];
  v2 = v0[4];
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = *(_QWORD *)(v2 + 80);
  *v5 = v0;
  v5[1] = sub_243B575C0;
  return sub_243B68894(v0[2], v4, v3, v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
}

Swift::Void __swiftcall AsyncChannel.finish()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *v0;
  v2 = v0[2];
  v3 = v0[3];
  v4 = 1;
  sub_243B68BA8((uint64_t)&v4, v2, v3, *(_QWORD *)(v1 + 80), MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
}

uint64_t AsyncChannel.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t AsyncChannel.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B6125C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[3];
  v1 = (uint64_t *)v0[4];
  v4 = *v1;
  v3 = v1[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = *(_QWORD *)(v2 + 16);
  *v5 = v0;
  v5[1] = sub_243B612D4;
  return sub_243B68F24(v0[2], v4, v3, v6, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
}

uint64_t sub_243B612D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B61340()
{
  return swift_unexpectedError();
}

uint64_t sub_243B6135C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B613CC;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B613CC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B61418()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_243B6149C;
  return sub_243BFDA48();
}

uint64_t sub_243B6149C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AsyncChannel.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t AsyncChannel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B6154C()
{
  return MEMORY[0x24BEE40A8];
}

void sub_243B61558()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B61568@<X0>(_QWORD *a1@<X8>)
{
  AsyncChannel.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t sub_243B6158C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel);
}

uint64_t method lookup function for AsyncChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncChannel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_243B615F0()
{
  swift_release();
  return swift_release();
}

_QWORD *sub_243B61618(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *sub_243B6164C(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_243B616A8(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncFacesRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyncFacesRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AsyncChannel.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.Iterator);
}

uint64_t Sequence.async.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t AsyncSyncSequence.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t AsyncSyncSequence.Iterator.iterator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_getAssociatedTypeWitness();
  v3 = sub_243BFDD0C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AsyncSyncSequence.Iterator.iterator.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_getAssociatedTypeWitness();
  v3 = sub_243BFDD0C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AsyncSyncSequence.Iterator.iterator.modify())()
{
  return nullsub_1;
}

uint64_t AsyncSyncSequence.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v8(a2, 1, 1, AssociatedTypeWitness);
  v6 = sub_243BFDD0C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a2, a1, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v8)(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t AsyncSyncSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a1;
  v3[3] = v2;
  v3[4] = *(_QWORD *)(a2 + 24);
  v3[5] = *(_QWORD *)(a2 + 16);
  v3[6] = swift_getAssociatedTypeWitness();
  v4 = sub_243BFDD0C();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B61A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if ((sub_243BFDAE4() & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v1, 1, AssociatedTypeWitness);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 48);
    if (v3)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 8) + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 48));
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      sub_243BFDD48();
      v6 = *(_QWORD *)(v5 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v13 = *(_QWORD *)(v0 + 48);
        v14 = *(_QWORD *)(v0 + 16);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v14, *(_QWORD *)(v0 + 72), v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v13);
        goto LABEL_7;
      }
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v0 + 16);
  v10 = swift_getAssociatedTypeWitness();
  v11 = sub_243BFDD0C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v9, 1, 1, v7);
LABEL_7:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B61BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B613CC;
  return AsyncSyncSequence.Iterator.next()(a1, a2);
}

uint64_t AsyncSyncSequence.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AsyncSyncSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  sub_243BFD8BC();
  return AsyncSyncSequence.Iterator.init(_:)((uint64_t)v10, a2);
}

void sub_243B61D54()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B61D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  AsyncSyncSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_243B61D94()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B61E00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_243B61E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_243B61EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_243B61ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_243B61F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_243B61F30(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B61FE0 + 4 * byte_243BFF3E0[(v7 - 1)]))();
}

void sub_243B62030(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AsyncSyncSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncSyncSequence);
}

uint64_t sub_243B621EC()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = sub_243BFDD0C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B62274(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  size_t v7;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  if (*(_DWORD *)(v5 + 80) > 7u || (v6 & 0x100000) != 0 || v7 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v11 = AssociatedTypeWitness;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_243B62368(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return result;
}

void *sub_243B623E8(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84))
      v6 = *(_QWORD *)(v5 + 64);
    else
      v6 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(a1, a2, v6);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_243B6249C(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_243B6259C(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v5 + 84))
      v6 = *(_QWORD *)(v5 + 64);
    else
      v6 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(a1, a2, v6);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_243B62650(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  size_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, AssociatedTypeWitness);
  v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_243B62750(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v13;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  if (a2 > v6)
  {
    v8 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (v9)
        goto LABEL_15;
    }
    else
    {
      if (v10 <= 0xFF)
      {
        if (v10 < 2)
          goto LABEL_22;
LABEL_8:
        v9 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_22;
LABEL_15:
        v11 = (v9 - 1) << v8;
        if (v7 > 3)
          v11 = 0;
        if ((_DWORD)v7)
        {
          if (v7 > 3)
            LODWORD(v7) = 4;
          __asm { BR              X12 }
        }
        return v6 + v11 + 1;
      }
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v5 < 2)
    return 0;
  v13 = (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  if (v13 >= 2)
    return v13 - 1;
  else
    return 0;
}

void sub_243B628AC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  if (a3 > v9)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 >= a2)
LABEL_20:
        __asm { BR              X11 }
LABEL_13:
      v12 = ~v9 + a2;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v13 = v12 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *(_WORD *)a1 = v13;
            a1[2] = BYTE2(v13);
          }
          else if ((_DWORD)v10 == 2)
          {
            *(_WORD *)a1 = v13;
          }
          else
          {
            *a1 = v13;
          }
        }
      }
      else
      {
        bzero(a1, v10);
        *(_DWORD *)a1 = v12;
      }
      __asm { BR              X10 }
    }
    v11 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v11))
    {
      v6 = 4u;
      if (v9 >= a2)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v11 >= 0x100)
      v6 = 2;
    else
      v6 = v11 > 1;
  }
  if (v9 >= a2)
    goto LABEL_20;
  goto LABEL_13;
}

void sub_243B62A74()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_243B62A7C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for AsyncSyncSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncSyncSequence.Iterator);
}

_QWORD *AsyncThrowingChannel.__allocating_init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)swift_allocObject();
  v0[2] = sub_243B687E4(*(_QWORD *)(*v0 + 80), *(_QWORD *)(*v0 + 88), *(_QWORD *)(*v0 + 96));
  v0[3] = v1;
  return v0;
}

_QWORD *AsyncThrowingChannel.init()()
{
  _QWORD *v0;
  uint64_t v1;

  v0[2] = sub_243B687E4(*(_QWORD *)(*v0 + 80), *(_QWORD *)(*v0 + 88), *(_QWORD *)(*v0 + 96));
  v0[3] = v1;
  return v0;
}

uint64_t AsyncThrowingChannel.send(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch();
}

uint64_t sub_243B62B38()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[3];
  v2 = (_QWORD *)v0[4];
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = v2[10];
  v7 = v2[11];
  v8 = v2[12];
  *v5 = v0;
  v5[1] = sub_243B575C0;
  return sub_243B68894(v0[2], v4, v3, v6, v7, v8);
}

void AsyncThrowingChannel.fail<>(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;

  v3 = *v1;
  v5 = v1[2];
  v4 = v1[3];
  v7 = a1;
  v6 = a1;
  sub_243B68BA8((uint64_t)&v7, v5, v4, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), MEMORY[0x24BEE3F20]);

}

Swift::Void __swiftcall AsyncThrowingChannel.finish()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = sub_243BFDD0C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - v6;
  v9 = v0[2];
  v8 = v0[3];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v2 - 8) + 56))((char *)&v10 - v6, 1, 1, v2, v5);
  sub_243B68BA8((uint64_t)v7, v9, v8, *(_QWORD *)(v1 + 80), v2, *(_QWORD *)(v1 + 96));
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AsyncThrowingChannel.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t AsyncThrowingChannel.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B62D08()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)v0[3];
  v1 = (uint64_t *)v0[4];
  v4 = *v1;
  v3 = v1[1];
  v5 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v5;
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  *v5 = v0;
  v5[1] = sub_243B575C0;
  return sub_243B68F24(v0[2], v4, v3, v6, v7, v8);
}

uint64_t sub_243B62D74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B4D7A0;
  v6[3] = a2;
  v6[4] = v2;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B62DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_243B62E7C;
  return sub_243BFDA48();
}

uint64_t sub_243B62E7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t AsyncThrowingChannel.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t AsyncThrowingChannel.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B62F38()
{
  return MEMORY[0x24BEE3F20];
}

void sub_243B62F44()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B62F54@<X0>(_QWORD *a1@<X8>)
{
  AsyncThrowingChannel.makeAsyncIterator()(a1);
  return swift_release();
}

uint64_t sub_243B62F78()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncThrowingChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingChannel);
}

uint64_t method lookup function for AsyncThrowingChannel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncThrowingChannel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_243B62FD8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for AsyncThrowingChannel.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncThrowingChannel.Iterator);
}

id sub_243B62FEC(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
    return a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return (id)swift_bridgeObjectRetain();
}

void sub_243B63074(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 0)
  {

  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine);
}

uint64_t sub_243B6312C()
{
  return sub_243BFE1D4();
}

uint64_t sub_243B63154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v10 = sub_243BFDD0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))((char *)&v16 - v12, 1, 1, a2);
  *(_QWORD *)a5 = a1;
  *((_QWORD *)a5 + 1) = 0;
  v14 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, a2, a3, a4);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(&a5[*(int *)(v14 + 48)], v13, v10);
}

uint64_t sub_243B6321C()
{
  sub_243BFE1A4();
  sub_243BFE1D4();
  return sub_243BFE1E0();
}

uint64_t sub_243B63264()
{
  sub_243BFE1A4();
  sub_243B6312C();
  return sub_243BFE1E0();
}

BOOL sub_243B632A4(_QWORD *a1, _QWORD *a2)
{
  return sub_243B4DD34(a1, a2);
}

uint64_t sub_243B632B4()
{
  return sub_243BFE1D4();
}

BOOL sub_243B632D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t sub_243B632E4()
{
  sub_243BFE1A4();
  sub_243BFE1D4();
  return sub_243BFE1E0();
}

uint64_t sub_243B63328()
{
  return sub_243B632E4();
}

uint64_t sub_243B6333C()
{
  return sub_243B632B4();
}

uint64_t sub_243B63350()
{
  sub_243BFE1A4();
  sub_243B632B4();
  return sub_243BFE1E0();
}

BOOL sub_243B63398(uint64_t *a1, uint64_t *a2)
{
  return sub_243B632D8(*a1, a1[1], *a2);
}

uint64_t sub_243B633B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 32);
  if (v2 < 0)
    return 0;
  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, a1[2], a1[3], a1[4]);
  v9 = sub_243BFDEE0();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x249502B6C](MEMORY[0x24BEE2A60], v9);
  if ((sub_243BFDC64() & 1) != 0)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    MEMORY[0x249502B6C](&unk_243BFF908, v8);
    sub_243BFD2BC();
    sub_243BFD28C();
    sub_243B63074(v3, v4, v5, v6, v2);
    result = v11;
    *(_QWORD *)v1 = v3;
    *(_QWORD *)(v1 + 8) = v4;
    *(_QWORD *)(v1 + 16) = v5;
    *(_QWORD *)(v1 + 24) = v6;
    *(_QWORD *)(v1 + 32) = v2;
    *(_QWORD *)(v1 + 40) = v7;
  }
  return result;
}

uint64_t sub_243B6352C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;

  v5 = v4;
  v66 = a2;
  v67 = a1;
  v8 = a4[2];
  v7 = a4[3];
  v69 = a4[4];
  v70 = v7;
  v9 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v8, v7, v69);
  v10 = sub_243BFDD0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v59 - v12;
  v14 = sub_243BFDD0C();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v59 - v21;
  v23 = *(_QWORD *)(v5 + 32);
  if (v23 < 0)
    return 1;
  v59 = v11;
  v60 = v10;
  v68 = *(_QWORD *)(v5 + 40);
  v63 = *(_QWORD *)(v5 + 24);
  v64 = v13;
  v61 = a3;
  v62 = v18;
  v25 = *(_QWORD *)(v5 + 8);
  v24 = *(_QWORD *)(v5 + 16);
  v76 = *(id *)v5;
  v26 = v76;
  v77 = v25;
  v74 = v23;
  v75 = v24;
  v73 = v63;
  v27 = v9;
  v28 = *(_QWORD *)(v8 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v30 = v66;
  v65 = v19;
  v66 = v20;
  v29(v17, v30, v8);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v32 = v27;
  v31(v17, 0, 1, v8);
  v33 = v67;
  *(_QWORD *)v22 = v61;
  *((_QWORD *)v22 + 1) = v33;
  v34 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v8, v70, v69);
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v22[*(int *)(v34 + 48)], v17, v62);
  v35 = v26;
  v36 = v64;
  v37 = v65;
  sub_243B62FEC(v35, v25, v24, v63, v23);
  swift_retain();
  swift_retain();
  v38 = MEMORY[0x249502B6C](&unk_243BFF948, v27);
  sub_243BFDBC8();
  sub_243BFDBA4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v36, 1, v27) == 1)
  {
    v67 = v38;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v60);
    v71 = v23;
    v39 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v8, v70, v69);
    v40 = sub_243BFDEE0();
    MEMORY[0x249502B6C](MEMORY[0x24BEE2A60], v40);
    v41 = sub_243BFDC64();
    swift_release();
    swift_release();
    if ((v41 & 1) != 0)
    {
      sub_243BFD2BC();
      sub_243BFD2B0();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v32);
      v42 = v76;
      v43 = v77;
      v45 = v74;
      v44 = v75;
      v46 = v73;
      sub_243B63074(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      *(_QWORD *)v5 = v42;
      *(_QWORD *)(v5 + 8) = v43;
      *(_QWORD *)(v5 + 16) = v44;
      *(_QWORD *)(v5 + 24) = v46;
      v47 = 2;
      *(_QWORD *)(v5 + 32) = v45;
    }
    else
    {
      MEMORY[0x249502B6C](&unk_243BFF908, v39);
      sub_243BFD2BC();
      sub_243BFD28C();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v32);
      v47 = v72;
      v53 = v73;
      v54 = v76;
      v55 = v77;
      v57 = v74;
      v56 = v75;
      sub_243B63074(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      *(_QWORD *)v5 = v54;
      *(_QWORD *)(v5 + 8) = v55;
      *(_QWORD *)(v5 + 16) = v56;
      *(_QWORD *)(v5 + 24) = v53;
      *(_QWORD *)(v5 + 32) = v57;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v27);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v36, v60);
    v48 = v76;
    v49 = v77;
    v51 = v74;
    v50 = v75;
    v52 = v73;
    sub_243B63074(*(id *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    *(_QWORD *)v5 = v48;
    *(_QWORD *)(v5 + 8) = v49;
    *(_QWORD *)(v5 + 16) = v50;
    *(_QWORD *)(v5 + 24) = v52;
    v47 = 1;
    *(_QWORD *)(v5 + 32) = v51;
  }
  *(_QWORD *)(v5 + 40) = v68;
  return v47;
}

uint64_t sub_243B63904(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;

  v3 = v2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v5, v6, v7);
  v9 = sub_243BFDD0C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v23 = (char *)&v49 - v19;
  if ((*(_QWORD *)(v3 + 32) & 0x8000000000000000) != 0)
    return 1;
  v24 = *(_QWORD *)(v3 + 32);
  v50 = v18;
  v51 = v17;
  v52 = v22;
  v53 = v21;
  v54 = v16;
  v55 = v20;
  v25 = a1;
  v26 = *(_QWORD *)(v3 + 40);
  v56 = *(_QWORD *)(v3 + 24);
  v57 = v26;
  v27 = v5;
  v29 = *(_QWORD *)(v3 + 8);
  v28 = *(_QWORD *)(v3 + 16);
  v59 = *(id *)v3;
  v60 = v29;
  v58 = v28;
  sub_243B63154(v25, v27, v6, v7, (char *)&v49 - v19);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x249502B6C](&unk_243BFF948, v8);
  sub_243BFD2BC();
  sub_243BFD2A4();
  v30 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v8) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v50 + 8);
    v32 = v13;
    v33 = v54;
    v31(v32, v54);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v51, v23, v8);
    sub_243BFDBC8();
    v34 = v53;
    sub_243BFDBB0();
    v31(v34, v33);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v8);
    v35 = v59;
    v36 = v60;
    v37 = v58;
    sub_243B63074(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_QWORD *)v3 = v35;
    *(_QWORD *)(v3 + 8) = v36;
    v38 = v56;
    *(_QWORD *)(v3 + 16) = v37;
    *(_QWORD *)(v3 + 24) = v38;
    v39 = 1;
    v40 = v57;
    *(_QWORD *)(v3 + 32) = v24;
    *(_QWORD *)(v3 + 40) = v40;
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v30 + 8);
    v41(v23, v8);
    v42 = v52;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v52, v13, v8);
    v43 = v59;
    v44 = v60;
    v45 = v58;
    sub_243B63074(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_QWORD *)v3 = v43;
    *(_QWORD *)(v3 + 8) = v44;
    v46 = v56;
    *(_QWORD *)(v3 + 16) = v45;
    *(_QWORD *)(v3 + 24) = v46;
    v47 = v57;
    *(_QWORD *)(v3 + 32) = v24;
    *(_QWORD *)(v3 + 40) = v47;
    v39 = *(_QWORD *)(v42 + 8);
    v41((char *)v42, v8);
  }
  return v39;
}

uint64_t sub_243B63C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = sub_243BFDD0C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v47 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v12);
  v16 = *(_QWORD *)(v3 + 32);
  if ((v16 & 0x8000000000000000) != 0)
    return 0;
  v49 = (char *)&v47 - v13;
  v50 = a2;
  v48 = v15;
  v17 = *(id *)v3;
  v18 = *(_QWORD *)(v3 + 24);
  v53 = v14;
  v19 = *(_QWORD *)(v3 + 8);
  v51 = v18;
  swift_retain();
  swift_retain();
  v55 = (unint64_t)v17;
  swift_retain();
  v54 = v19;
  v20 = v53;
  swift_retain();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v6);
  v52 = v16;
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_243B63074(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = xmmword_243BFF600;
    v23 = *(_QWORD *)(v50 + 16);
    v24 = *(_QWORD *)(v50 + 32);
  }
  else
  {
    v47 = (_QWORD *)(v3 + 8);
    v26 = v49;
    v27 = v11;
    v28 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v28(v49, v27, v6);
    v56 = v16;
    v23 = *(_QWORD *)(v50 + 16);
    v24 = *(_QWORD *)(v50 + 32);
    type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v23, v6, v24);
    v29 = sub_243BFDEE0();
    MEMORY[0x249502B6C](MEMORY[0x24BEE2A60], v29);
    if ((sub_243BFDC64() & 1) != 0)
    {
      v30 = v48;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))((char *)v48, v26, v6);
      v31 = sub_243BFE0CC();
      if (v31)
      {
        v32 = v31;
        v33 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
        v33(v30, v6);
      }
      else
      {
        v32 = swift_allocError();
        v28((char *)v34, (char *)v30, v6);
        v33 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      }
      v35 = v47;
      v33((uint64_t)v49, v6);
      sub_243B63074(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      *(_QWORD *)v3 = v32;
      v35[1] = 0;
      v35[2] = 0;
      *v35 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v26, v6);
      sub_243B63074(*(id *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
    }
    *(_OWORD *)(v3 + 32) = xmmword_243BFF600;
  }
  v56 = v55;
  v57 = v54;
  MEMORY[0x24BDAC7A8](v22);
  *(&v47 - 4) = (_QWORD *)v23;
  *(&v47 - 3) = (_QWORD *)v6;
  *(&v47 - 2) = (_QWORD *)v24;
  v36 = type metadata accessor for ChannelStateMachine.SuspendedProducer(255, v23, v6, v24);
  MEMORY[0x249502B6C](&unk_243BFF948, v36);
  v37 = sub_243BFD2BC();
  v38 = __swift_instantiateConcreteTypeFromMangledName(qword_2572EBBA0);
  v39 = MEMORY[0x249502B6C](MEMORY[0x24BE18B88], v37);
  v25 = sub_243B76E5C((void (*)(char *, char *))sub_243B53B74, (uint64_t)(&v47 - 6), v37, v38, MEMORY[0x24BEE4078], v39, MEMORY[0x24BEE40A8], v40);
  v56 = v51;
  v57 = v52;
  MEMORY[0x24BDAC7A8](v25);
  *(&v47 - 4) = (_QWORD *)v23;
  *(&v47 - 3) = (_QWORD *)v6;
  *(&v47 - 2) = (_QWORD *)v24;
  v41 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v23, v6, v24);
  MEMORY[0x249502B6C](&unk_243BFF908, v41);
  v42 = sub_243BFD2BC();
  sub_243BFDD0C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDAF0();
  v43 = sub_243BFDD0C();
  v44 = MEMORY[0x249502B6C](MEMORY[0x24BE18B88], v42);
  sub_243B76E5C((void (*)(char *, char *))sub_243B53B74, (uint64_t)(&v47 - 6), v42, v43, MEMORY[0x24BEE4078], v44, MEMORY[0x24BEE40A8], v45);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v25;
}

uint64_t type metadata accessor for ChannelStateMachine.SuspendedProducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SuspendedProducer);
}

uint64_t type metadata accessor for ChannelStateMachine.SuspendedConsumer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SuspendedConsumer);
}

uint64_t sub_243B64124@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t TupleTypeMetadata2;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v5 = a1[2];
  v6 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v5, a1[3], a1[4]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  v9 = (void *)*v2;
  v10 = v2[4];
  if (v10 < 0)
  {
    if (v9)
    {
      *(_OWORD *)v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = xmmword_243BFF600;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v19 = (_QWORD *)((char *)a2 + *(int *)(TupleTypeMetadata2 + 48));
      *a2 = 0;
      *v19 = v9;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v27 = (char *)a2 + *(int *)(TupleTypeMetadata2 + 48);
      *a2 = 0;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v27, 1, 1, v5);
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a2, 0, 1, TupleTypeMetadata2);
  }
  else
  {
    v30 = v5;
    v31 = a2;
    v11 = v2[1];
    v12 = v2[2];
    v13 = v2[3];
    v14 = v2[5];
    v32 = v11;
    v15 = sub_243BFDEE0();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v29 = v14;
    swift_bridgeObjectRetain();
    MEMORY[0x249502B6C](MEMORY[0x24BEE2A60], v15);
    if ((sub_243BFDC64() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v16 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v31, 1, 1, v16);
    }
    else
    {
      v32 = (uint64_t)v9;
      v33 = v11;
      MEMORY[0x249502B6C](&unk_243BFF948, v6);
      sub_243BFD2BC();
      sub_243BFD28C();
      v20 = v11;
      v21 = v29;
      sub_243B63074(v9, v20, v12, v13, v10);
      v22 = v33;
      *v3 = v32;
      v3[1] = v22;
      v3[2] = v12;
      v3[3] = v13;
      v3[4] = v10;
      v3[5] = v21;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      v23 = sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFE1EC();
      v24 = swift_getTupleTypeMetadata2();
      v25 = v31;
      v26 = (char *)v31 + *(int *)(v24 + 48);
      *v31 = *((_QWORD *)v8 + 1);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v26, &v8[*(int *)(v6 + 48)], v23);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v25, 0, 1, v24);
    }
  }
}

uint64_t sub_243B64574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t SuspendedAction;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t TupleTypeMetadata2;
  _QWORD *v51;
  char *v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v5 = v4;
  v10 = a3[2];
  v9 = a3[3];
  v11 = a3[4];
  v12 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, v10, v9, v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v53 - v14;
  v16 = *(void **)v5;
  v17 = *(_QWORD *)(v5 + 32);
  if (v17 < 0)
  {
    if (v16)
    {
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = xmmword_243BFF600;
      *a4 = v16;
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
    }
    SuspendedAction = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v10, v9, v11);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(SuspendedAction - 8) + 56))(a4, 0, 1, SuspendedAction);
  }
  else
  {
    v57 = v15;
    v58 = v13;
    v62 = a4;
    v18 = *(_QWORD *)(v5 + 8);
    v19 = *(_QWORD *)(v5 + 16);
    v20 = a2;
    v21 = *(_QWORD *)(v5 + 24);
    v22 = a1;
    v23 = *(_QWORD *)(v5 + 40);
    v70 = v16;
    v71 = v18;
    v68 = v21;
    v69 = v17;
    v67 = v23;
    v55 = v20;
    v56 = v22;
    v63 = v20;
    v64 = v22;
    swift_retain();
    v59 = v19;
    sub_243B62FEC(v16, v18, v19, v21, v17);
    v24 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, v10, v9, v11);
    v60 = v9;
    v25 = v24;
    swift_retain();
    v26 = MEMORY[0x249502B6C](&unk_243BFF908, v25);
    sub_243BFDBC8();
    v61 = v11;
    sub_243BFDBA4();
    if (v66 == 1)
    {
      v53[1] = v26;
      v53[2] = v23;
      v54 = v10;
      v65 = v18;
      v27 = v58;
      v28 = sub_243BFDEE0();
      MEMORY[0x249502B6C](MEMORY[0x24BEE2A60], v28);
      v29 = sub_243BFDC64();
      swift_release();
      swift_release();
      if ((v29 & 1) != 0)
      {
        v65 = v55;
        v66 = v56;
        sub_243BFD2BC();
        sub_243BFD2B0();
        v30 = v59;
        sub_243B63074(v16, v18, v59, v21, v17);
        v31 = v68;
        v32 = v69;
        v33 = v67;
        *(_QWORD *)v5 = v16;
        *(_QWORD *)(v5 + 8) = v18;
        *(_QWORD *)(v5 + 16) = v30;
        *(_QWORD *)(v5 + 24) = v31;
        *(_QWORD *)(v5 + 32) = v32;
        *(_QWORD *)(v5 + 40) = v33;
        v34 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v54, v60, v61);
        return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v62, 1, 1, v34);
      }
      MEMORY[0x249502B6C](&unk_243BFF948, v27);
      sub_243BFD2BC();
      v43 = v57;
      sub_243BFD28C();
      v44 = v27;
      v45 = v59;
      sub_243B63074(v16, v18, v59, v21, v17);
      v46 = v71;
      v47 = v67;
      *(_QWORD *)v5 = v70;
      *(_QWORD *)(v5 + 8) = v46;
      *(_QWORD *)(v5 + 16) = v45;
      *(_QWORD *)(v5 + 24) = v21;
      *(_QWORD *)(v5 + 32) = v17;
      *(_QWORD *)(v5 + 40) = v47;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
      v48 = v54;
      v49 = sub_243BFDD0C();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v51 = v62;
      v52 = (char *)v62 + *(int *)(TupleTypeMetadata2 + 48);
      *v62 = *((_QWORD *)v43 + 1);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v52, &v43[*(int *)(v44 + 48)], v49);
      v40 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v48, v60, v61);
      swift_storeEnumTagMultiPayload();
      v41 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
      v42 = v51;
    }
    else
    {
      swift_release();
      swift_release();
      v37 = v59;
      sub_243B63074(v16, v18, v59, v21, v17);
      v38 = v67;
      *(_QWORD *)v5 = v16;
      *(_QWORD *)(v5 + 8) = v18;
      *(_QWORD *)(v5 + 16) = v37;
      *(_QWORD *)(v5 + 24) = v21;
      *(_QWORD *)(v5 + 32) = v17;
      *(_QWORD *)(v5 + 40) = v38;
      v39 = v62;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v62, 1, 1, v10);
      v40 = type metadata accessor for ChannelStateMachine.NextSuspendedAction(0, v10, v60, v61);
      swift_storeEnumTagMultiPayload();
      v41 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
      v42 = v39;
    }
    return v41(v42, 0, 1, v40);
  }
}

uint64_t sub_243B64A24(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = v2[4];
  if ((v3 & 0x8000000000000000) == 0)
  {
    v4 = v2;
    v6 = (void *)*v2;
    v5 = v2[1];
    v7 = v2[2];
    v8 = v4[3];
    v9 = v4[5];
    v10 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(255, a2[2], a2[3], a2[4]);
    swift_retain();
    v13 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    MEMORY[0x249502B6C](&unk_243BFF908, v10);
    sub_243BFD2BC();
    sub_243BFD2A4();
    v11 = v14;
    if (v14 != 1)
    {
      sub_243B63074(v6, v5, v13, v8, v3);
      *v4 = v6;
      v4[1] = v5;
      v4[2] = v13;
      v4[3] = v8;
      v4[4] = v3;
      v4[5] = v9;
      return v11;
    }
    sub_243BFDBC8();
    sub_243BFDBB0();
    sub_243B63074(v6, v5, v13, v8, v3);
    *v4 = v6;
    v4[1] = v5;
    v4[2] = v13;
    v4[3] = v8;
    v4[4] = v3;
    v4[5] = v9;
  }
  return 1;
}

uint64_t type metadata accessor for ChannelStateMachine.NextSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextSuspendedAction);
}

uint64_t sub_243B64BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v8 = type metadata accessor for ChannelStateMachine.SuspendedProducer(0, a1, a2, a3);
  sub_243BFD97C();
  v9 = MEMORY[0x249502B6C](&unk_243BFF948, v8);
  v10 = sub_243BFD298();
  v12 = v11;
  v13 = sub_243BFD97C();
  if (MEMORY[0x249501D80](v13, v8))
    v14 = sub_243B64D48(v13, v8, v9);
  else
    v14 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for ChannelStateMachine.SuspendedConsumer(0, a1, a2, a3);
  sub_243BFD97C();
  v16 = MEMORY[0x249502B6C](&unk_243BFF908, v15);
  v17 = sub_243BFD298();
  v19 = v18;
  v20 = sub_243BFD97C();
  if (MEMORY[0x249501D80](v20, v15))
    v21 = sub_243B64D48(v20, v15, v16);
  else
    v21 = MEMORY[0x24BEE4B08];
  result = swift_bridgeObjectRelease();
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v14;
  a4[3] = v17;
  a4[4] = v19;
  a4[5] = v21;
  return result;
}

uint64_t sub_243B64D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x249501D50](v12))
  {
    sub_243BFDE2C();
    v15 = sub_243BFDE20();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B08];
  }
  v40 = MEMORY[0x249501D80](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    v17 = sub_243BFD994();
    sub_243BFD970();
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = sub_243BFDE5C();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = sub_243BFD79C();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v8, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = sub_243BFD7D8();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v8, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.SendSuspendedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendSuspendedAction);
}

uint64_t type metadata accessor for ChannelStateMachine.SendCancelledAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendCancelledAction);
}

uint64_t type metadata accessor for ChannelStateMachine.SendAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.SendAction);
}

unint64_t sub_243B65080(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_243B650C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *sub_243B65110(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_243B651C8(_QWORD *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ChannelStateMachine.FinishAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.FinishAction);
}

uint64_t sub_243B65248()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  const char *v4;
  char *v5;

  result = sub_243BFDD0C();
  if (v1 <= 0x3F)
  {
    v3 = *(_QWORD *)(result - 8) + 64;
    v4 = "\b";
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *sub_243B652D0(id *a1, id *a2, uint64_t a3)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  const void *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v13 = (char *)*a2;
    *v4 = *a2;
    v4 = (id *)&v13[(v8 & 0xF8 ^ 0x1F8) & (v8 + 16)];
    swift_retain();
  }
  else
  {
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v18 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
      v19 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
      {
        memcpy(v18, v19, v7);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 2;
    }
    else if (v14 == 1)
    {
      v16 = *a2;
      v17 = *a2;
      *v4 = v16;
      *((_BYTE *)v4 + v10) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 0;
    }
  }
  return v4;
}

void sub_243B65504(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = (uint64_t)a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84))
    ++v5;
  v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= ((v6 + 8) & ~v6) + v5)
    v5 += (v6 + 8) & ~v6;
  if (v5 <= 8)
    v5 = 8;
  v7 = *((unsigned __int8 *)a1 + v5);
  if (v7 >= 3)
  {
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (v7 == 2)
  {
    v2 = ((unint64_t)a1 + v6 + 8) & ~v6;
  }
  else if (v7 == 1)
  {

    return;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
}

id *sub_243B6563C(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  id v14;
  char v15;
  void *v16;
  const void *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v16 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    v17 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
    {
      memcpy(v16, v17, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
    }
    v15 = 2;
  }
  else if (v11 == 1)
  {
    v13 = *a2;
    v14 = *a2;
    *a1 = v13;
    v15 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v15 = 0;
  }
  *((_BYTE *)a1 + v10) = v15;
  return a1;
}

id *sub_243B65830(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  id v17;
  char v18;
  const void *v19;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = ((v8 + 8) & ~v8) + v7;
    if (v7 > v9)
      v9 = v7;
    if (v9 <= 8)
      v10 = 8;
    else
      v10 = v9;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v6 + 48))(((unint64_t)a1 + v8 + 8) & v13, 1, *(_QWORD *)(a3 + 16)))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v8 + 8) & v13, v5);
    }
    else if (v11 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v19 = (const void *)(((unint64_t)a2 + v8 + 8) & v13);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
      {
        memcpy((void *)(((unint64_t)a1 + v8 + 8) & v13), v19, v7);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(((unint64_t)a1 + v8 + 8) & v13, v19, v5);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v8 + 8) & v13, 0, 1, v5);
      }
      v18 = 2;
    }
    else if (v14 == 1)
    {
      v16 = *a2;
      v17 = *a2;
      *a1 = v16;
      v18 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v18 = 0;
    }
    *((_BYTE *)a1 + v10) = v18;
  }
  return a1;
}

_QWORD *sub_243B65B50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  void *v14;
  const void *v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + v7;
  if (v7 > v9)
    v9 = v7;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 2)
  {
    *a1 = *a2;
    v14 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    v15 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5))
    {
      memcpy(v14, v15, v7);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v13 = 2;
  }
  else if (v11 == 1)
  {
    *a1 = *a2;
    v13 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v13 = 0;
  }
  *((_BYTE *)a1 + v10) = v13;
  return a1;
}

id *sub_243B65D3C(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  const void *v17;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = ((v8 + 8) & ~v8) + v7;
    if (v7 > v9)
      v9 = v7;
    if (v9 <= 8)
      v10 = 8;
    else
      v10 = v9;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    if (v11 == 2)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v6 + 48))(((unint64_t)a1 + v8 + 8) & v13, 1, *(_QWORD *)(a3 + 16)))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v8 + 8) & v13, v5);
    }
    else if (v11 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v17 = (const void *)(((unint64_t)a2 + v8 + 8) & v13);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
      {
        memcpy((void *)(((unint64_t)a1 + v8 + 8) & v13), v17, v7);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 32))(((unint64_t)a1 + v8 + 8) & v13, v17, v5);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)a1 + v8 + 8) & v13, 0, 1, v5);
      }
      v16 = 2;
    }
    else if (v14 == 1)
    {
      *a1 = *a2;
      v16 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      v16 = 0;
    }
    *((_BYTE *)a1 + v10) = v16;
  }
  return a1;
}

uint64_t sub_243B66054(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 84) == 0;
  v6 = (*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (v5)
    v7 = v4 + 1;
  else
    v7 = v4;
  v8 = v6 + v7;
  if (v7 > v8)
    v8 = v7;
  v9 = 8;
  if (v8 > 8)
    v9 = v8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_26;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 253) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 < 2)
    {
LABEL_26:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 3)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_26;
LABEL_19:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return (v15 + 254);
  if (v10 > 3)
    LODWORD(v10) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B6613C + 4 * byte_243BFF638[(v10 - 1)]))();
}

void sub_243B66188(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (v7)
    v9 = v6 + 1;
  else
    v9 = v6;
  v10 = v8 + v9;
  if (v9 > v10)
    v10 = v9;
  if (v10 <= 8)
    v10 = 8;
  v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v13 = a2 - 254;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *a1 = v15;
        *((_BYTE *)a1 + 2) = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *a1 = v15;
      }
      else
      {
        *(_BYTE *)a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_243B66354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84))
    v3 = *(_QWORD *)(v2 + 64);
  else
    v3 = *(_QWORD *)(v2 + 64) + 1;
  v4 = ((*(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v3 > v4)
    v4 = v3;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 3u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B663C0 + 4 * byte_243BFF646[v6]))();
}

_BYTE *sub_243B66408(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  char v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  v5 = ((*(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v4 > v5)
    v5 = v4;
  if (v5 <= 8)
    v5 = 8;
  if (a2 > 2)
  {
    if (v5 <= 3)
      v6 = ((a2 - 3) >> (8 * v5)) + 3;
    else
      v6 = 3;
    result[v5] = v6;
    if (v5 >= 4)
      v7 = 4;
    else
      v7 = v5;
    bzero(result, v5);
    __asm { BR              X10 }
  }
  result[v5] = a2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.NextCancelledAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextCancelledAction);
}

uint64_t sub_243B6650C()
{
  uint64_t result;
  unint64_t v1;

  sub_243BFDD0C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  result = sub_243BFE1EC();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_243B665A8(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id *v16;
  unsigned int v17;
  uint64_t v18;
  id v19;
  id v20;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = v10 + (((v6 & 0xF8) + 15) & ~v7) + 1;
  if ((v6 & 0x1000F8) != 0 || v11 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    LODWORD(v14) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF)
      v14 = *a2;
    if ((v14 + 1) > 1)
    {
      memcpy(__dst, a2, v11);
    }
    else
    {
      *__dst = *a2;
      v15 = (_QWORD *)(((unint64_t)__dst + 15) & v8);
      v16 = (id *)(((unint64_t)a2 + 15) & v8);
      v17 = *((unsigned __int8 *)v16 + v10);
      if (v17 >= 2)
      {
        if (v10 <= 3)
          v18 = v10;
        else
          v18 = 4;
        __asm { BR              X12 }
      }
      if (v17 == 1)
      {
        v19 = *v16;
        v20 = *v16;
        *v15 = v19;
        *((_BYTE *)v15 + v10) = 1;
      }
      else
      {
        if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
        {
          memcpy(v15, v16, v9);
        }
        else
        {
          (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v15, v16, v4);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
        }
        *((_BYTE *)v15 + v10) = 0;
      }
    }
  }
  return v3;
}

void sub_243B6677C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  if ((v2 + 1) <= 1)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    v6 = (id *)(((unint64_t)a1 + v5 + 8) & ~v5);
    if (*(_DWORD *)(v4 + 84))
      v7 = *(_QWORD *)(v4 + 64);
    else
      v7 = *(_QWORD *)(v4 + 64) + 1;
    if (v7 <= 8)
      v7 = 8;
    v8 = *((unsigned __int8 *)v6 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X13 }
    }
    if (v8 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3))
    {
      (*(void (**)(id *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
}

uint64_t *sub_243B668B0(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id *v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  LODWORD(v10) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v10 = *a2;
  if ((v10 + 1) > 1)
  {
    v17 = (v8 + 8) & v9;
    if (!v7)
      ++v6;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v17 + 1);
  }
  else
  {
    *__dst = *a2;
    v11 = (_QWORD *)(((unint64_t)__dst + v8 + 8) & v9);
    v12 = (id *)(((unint64_t)a2 + v8 + 8) & v9);
    if (v7)
      v13 = v6;
    else
      v13 = v6 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *((unsigned __int8 *)v12 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      v18 = *v12;
      v19 = *v12;
      *v11 = v18;
      *((_BYTE *)v11 + v14) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
      {
        memcpy(v11, v12, v13);
      }
      else
      {
        (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v11, v12, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
      }
      *((_BYTE *)v11 + v14) = 0;
    }
  }
  return __dst;
}

char *sub_243B66A70(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  id *v19;
  unint64_t v20;
  id *v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  unsigned int v35;
  uint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v12 = (v9 + 15) & v11;
  v13 = *(_QWORD *)__dst;
  LODWORD(v14) = -1;
  if (*(_QWORD *)__dst >= 0xFFFFFFFFuLL)
    LODWORD(v13) = -1;
  v15 = v13 + 1;
  v16 = *(_QWORD *)__src;
  if (*(_QWORD *)__src < 0xFFFFFFFFuLL)
    v14 = *(_QWORD *)__src;
  v17 = v14 + 1;
  if (v15 > 1)
  {
    if (v17 <= 1)
    {
      *(_QWORD *)__dst = v16;
      v19 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
      v21 = (id *)((unint64_t)&__src[v10 + 8] & v11);
      if (v8)
        v22 = v7;
      else
        v22 = v7 + 1;
      if (v22 <= 8)
        v23 = 8;
      else
        v23 = v22;
      v26 = *((unsigned __int8 *)v21 + v23);
      if (v26 >= 2)
      {
        if (v23 <= 3)
          v27 = v23;
        else
          v27 = 4;
        __asm { BR              X12 }
      }
      if (v26 != 1)
        goto LABEL_64;
LABEL_47:
      v33 = *v21;
      v34 = *v21;
      *v19 = v33;
      *((_BYTE *)v19 + v23) = 1;
      return __dst;
    }
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v7 = 8;
    v32 = v7 + v12;
LABEL_53:
    memcpy(__dst, __src, v32 + 1);
    return __dst;
  }
  if (v17 > 1)
  {
    v28 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v29 = 8;
    else
      v29 = v7;
    v30 = *((unsigned __int8 *)v28 + v29);
    if (v30 >= 2)
    {
      if (v29 <= 3)
        v31 = v29;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(v28, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(v28, v5);
    }
    v32 = v29 + v12;
    goto LABEL_53;
  }
  *(_QWORD *)__dst = v16;
  v18 = (unint64_t)&__dst[v10 + 8];
  v19 = (id *)(v18 & v11);
  v20 = (unint64_t)&__src[v10 + 8];
  v21 = (id *)(v20 & v11);
  if ((v18 & v11) == (v20 & v11))
    return __dst;
  if (v8)
    v22 = v7;
  else
    v22 = v7 + 1;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)v19 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
  {

  }
  else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v18 & v11, 1, v5))
  {
    (*(void (**)(id *, uint64_t))(v6 + 8))(v19, v5);
  }
  v35 = *((unsigned __int8 *)v21 + v23);
  if (v35 >= 2)
  {
    if (v23 <= 3)
      v36 = v23;
    else
      v36 = 4;
    __asm { BR              X12 }
  }
  if (v35 == 1)
    goto LABEL_47;
LABEL_64:
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v5))
  {
    memcpy(v19, v21, v22);
  }
  else
  {
    (*(void (**)(id *, id *, uint64_t))(v6 + 16))(v19, v21, v5);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  *((_BYTE *)v19 + v23) = 0;
  return __dst;
}

uint64_t *sub_243B66E8C(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v9 = ~v8;
  LODWORD(v10) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v10 = *a2;
  if ((v10 + 1) > 1)
  {
    v17 = (v8 + 8) & v9;
    if (!v7)
      ++v6;
    if (v6 <= 8)
      v6 = 8;
    memcpy(__dst, a2, v6 + v17 + 1);
  }
  else
  {
    *__dst = *a2;
    v11 = (_QWORD *)(((unint64_t)__dst + v8 + 8) & v9);
    v12 = (_QWORD *)(((unint64_t)a2 + v8 + 8) & v9);
    if (v7)
      v13 = v6;
    else
      v13 = v6 + 1;
    if (v13 <= 8)
      v14 = 8;
    else
      v14 = v13;
    v15 = *((unsigned __int8 *)v12 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      *v11 = *v12;
      *((_BYTE *)v11 + v14) = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
      {
        memcpy(v11, v12, v13);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v11, v12, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
      }
      *((_BYTE *)v11 + v14) = 0;
    }
  }
  return __dst;
}

char *sub_243B67044(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  id *v19;
  unint64_t v20;
  id *v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  v10 = v9 | 7;
  v11 = ~(v9 | 7);
  v12 = (v9 + 15) & v11;
  v13 = *(_QWORD *)__dst;
  LODWORD(v14) = -1;
  if (*(_QWORD *)__dst >= 0xFFFFFFFFuLL)
    LODWORD(v13) = -1;
  v15 = v13 + 1;
  v16 = *(_QWORD *)__src;
  if (*(_QWORD *)__src < 0xFFFFFFFFuLL)
    v14 = *(_QWORD *)__src;
  v17 = v14 + 1;
  if (v15 > 1)
  {
    if (v17 <= 1)
    {
      *(_QWORD *)__dst = v16;
      v19 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
      v21 = (id *)((unint64_t)&__src[v10 + 8] & v11);
      if (v8)
        v22 = v7;
      else
        v22 = v7 + 1;
      if (v22 <= 8)
        v23 = 8;
      else
        v23 = v22;
      v26 = *((unsigned __int8 *)v21 + v23);
      if (v26 >= 2)
      {
        if (v23 <= 3)
          v27 = v23;
        else
          v27 = 4;
        __asm { BR              X12 }
      }
      if (v26 != 1)
        goto LABEL_64;
LABEL_47:
      *v19 = *v21;
      *((_BYTE *)v19 + v23) = 1;
      return __dst;
    }
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v7 = 8;
    v32 = v7 + v12;
LABEL_53:
    memcpy(__dst, __src, v32 + 1);
    return __dst;
  }
  if (v17 > 1)
  {
    v28 = (id *)((unint64_t)&__dst[v10 + 8] & v11);
    if (!v8)
      ++v7;
    if (v7 <= 8)
      v29 = 8;
    else
      v29 = v7;
    v30 = *((unsigned __int8 *)v28 + v29);
    if (v30 >= 2)
    {
      if (v29 <= 3)
        v31 = v29;
      else
        v31 = 4;
      __asm { BR              X12 }
    }
    if (v30 == 1)
    {

    }
    else if (!(*(unsigned int (**)(id *, uint64_t, _QWORD))(v6 + 48))(v28, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(v28, v5);
    }
    v32 = v29 + v12;
    goto LABEL_53;
  }
  *(_QWORD *)__dst = v16;
  v18 = (unint64_t)&__dst[v10 + 8];
  v19 = (id *)(v18 & v11);
  v20 = (unint64_t)&__src[v10 + 8];
  v21 = (id *)(v20 & v11);
  if ((v18 & v11) == (v20 & v11))
    return __dst;
  if (v8)
    v22 = v7;
  else
    v22 = v7 + 1;
  if (v22 <= 8)
    v23 = 8;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)v19 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
  {

  }
  else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v18 & v11, 1, v5))
  {
    (*(void (**)(id *, uint64_t))(v6 + 8))(v19, v5);
  }
  v33 = *((unsigned __int8 *)v21 + v23);
  if (v33 >= 2)
  {
    if (v23 <= 3)
      v34 = v23;
    else
      v34 = 4;
    __asm { BR              X12 }
  }
  if (v33 == 1)
    goto LABEL_47;
LABEL_64:
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v5))
  {
    memcpy(v19, v21, v22);
  }
  else
  {
    (*(void (**)(id *, id *, uint64_t))(v6 + 32))(v19, v21, v5);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v5);
  }
  *((_BYTE *)v19 + v23) = 0;
  return __dst;
}

uint64_t sub_243B67458(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (v4 <= 8)
    v4 = 8;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFE)
    goto LABEL_24;
  v5 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  v6 = 8 * v5;
  if (v5 > 3)
    goto LABEL_9;
  v9 = (a2 - 2147483645 + ~(-1 << v6)) >> v6;
  if (v9 > 0xFFFE)
  {
    v7 = *(_DWORD *)((char *)a1 + v5);
    if (v7)
      goto LABEL_17;
LABEL_24:
    v11 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v11) = -1;
    if ((v11 + 1) < 2)
      LODWORD(v11) = 0;
    if (v11 >= 2)
      return (v11 - 1);
    else
      return 0;
  }
  if (v9 > 0xFE)
  {
    v7 = *(unsigned __int16 *)((char *)a1 + v5);
    if (*(_WORD *)((char *)a1 + v5))
      goto LABEL_17;
    goto LABEL_24;
  }
  if (!v9)
    goto LABEL_24;
LABEL_9:
  v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((_BYTE *)a1 + v5))
    goto LABEL_24;
LABEL_17:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 2147483646);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B67544 + 4 * byte_243BFF68B[(v5 - 1)]))();
}

void sub_243B675AC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 15) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8;
  if (v7)
    ++v6;
  if (v6 <= 8)
    v6 = 8;
  v9 = v6 + v8 + 1;
  if (a3 <= 0x7FFFFFFD)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = (a3 - 2147483645 + ~(-1 << (8 * v9))) >> (8 * v9);
    if (v12 > 0xFFFE)
    {
      v10 = 4u;
    }
    else if (v12 >= 0xFF)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 != 0;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0x7FFFFFFD)
    __asm { BR              X10 }
  v11 = a2 - 2147483646;
  if (v9 < 4)
  {
    if ((_DWORD)v9)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v9);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

_QWORD *sub_243B67784(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  size_t v6;
  int v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (v4 <= 8)
    LODWORD(v4) = 8;
  if (a2 > 0x7FFFFFFE)
  {
    v5 = *(_DWORD *)(v3 + 80) & 0xF8;
    v6 = v4 + ((unsigned __int16)(v5 + 15) & (unsigned __int16)~v5 & 0x1F8) + 1;
    if ((_DWORD)v6)
    {
      if (v6 <= 3)
        v7 = v6;
      else
        v7 = 4;
      bzero(result, v6);
      __asm { BR              X10 }
    }
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.NextAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.NextAction);
}

uint64_t sub_243B6788C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_243B67894()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFDD0C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B67918(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = (void *)(((unint64_t)v13 + v7 + 8) & ~v7);
    v16 = (const void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4))
    {
      memcpy(v15, v16, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v15, v16, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_243B67A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_QWORD *sub_243B67AA8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_243B67B78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

_QWORD *sub_243B67C94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_243B67D64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
  return a1;
}

uint64_t sub_243B67E80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_243B68014(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_243B68284()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_243B6828C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_243B682AC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_243B682BC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_243B682C4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_243B682D0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_243B6832C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StoredPhotoLayout.Rect(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void sub_243B683AC(uint64_t a1)
{
  sub_243B63074(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

_QWORD *sub_243B683C0(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_243B62FEC(*(id *)a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t sub_243B6842C(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_243B62FEC(*(id *)a2, v4, v5, v6, v7);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  sub_243B63074(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t sub_243B684A8(uint64_t a1, _OWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = a2[2];
  sub_243B63074(v3, v5, v4, v6, v7);
  return a1;
}

uint64_t sub_243B684F0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 32) >> 50) >> 13) | (2
                                                            * ((*(_QWORD *)(a1 + 32) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 32) & 7) << 7) | (*(_QWORD *)(a1 + 8) >> 57) & 0x78 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_243B6856C(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_QWORD *)(result + 40) = 0;
    }
  }
  return result;
}

uint64_t sub_243B685F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >> 63;
}

uint64_t sub_243B685FC(uint64_t result)
{
  *(_QWORD *)(result + 32) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_243B6860C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *(_QWORD *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  *(_QWORD *)(result + 32) = v2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.State);
}

void sub_243B68638()
{
  JUMPOUT(0x249502B6CLL);
}

void sub_243B68648()
{
  JUMPOUT(0x249502B6CLL);
}

_QWORD *sub_243B68658(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void sub_243B68688(id *a1)
{

}

void **sub_243B68690(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

void **sub_243B686C8(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_243B686F8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_243B68748(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *sub_243B6879C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

uint64_t type metadata accessor for ChannelStateMachine.Termination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStateMachine.Termination);
}

uint64_t type metadata accessor for ChannelStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChannelStorage);
}

uint64_t sub_243B687E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[3];
  _OWORD v13[3];

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  sub_243B64BC4(a1, a2, a3, (uint64_t *)v13);
  v12[0] = v13[0];
  v12[1] = v13[1];
  v12[2] = v13[2];
  v7 = type metadata accessor for ChannelStateMachine(0, a1, a2, a3);
  v10 = sub_243B6A530((uint64_t)v12, v7, v8, v9);
  sub_243B6A3F4((uint64_t)v13);
  return v10;
}

uint64_t sub_243B68894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = sub_243BFDD0C();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B68900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  type metadata accessor for ChannelStateMachine(0, v3, v2, v1);
  type metadata accessor for ChannelStateMachine.SendAction(0, v3, v2, v1);
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A224, (uint64_t)v5, v4);
  swift_task_dealloc();
  v6 = *(_QWORD *)(v0 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      v8 = *(_QWORD *)(v0 + 56);
      v7 = *(_QWORD *)(v0 + 64);
      v10 = *(_QWORD *)(v0 + 40);
      v9 = *(_QWORD *)(v0 + 48);
      v11 = *(_QWORD *)(v0 + 24);
      v12 = *(_QWORD *)(v0 + 32);
      os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
      v13 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = v13 + 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 24));
      v14 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 96) = v14;
      v14[2] = v9;
      v14[3] = v8;
      v14[4] = v7;
      v14[5] = v12;
      v14[6] = v10;
      v14[7] = v11;
      v14[8] = v13;
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v15;
      v15[2] = v9;
      v15[3] = v8;
      v15[4] = v7;
      v15[5] = v12;
      v15[6] = v10;
      v15[7] = v13;
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v16;
      *v16 = v0;
      v16[1] = sub_243B68B10;
      return sub_243BFE0FC();
    }
    v19 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 48);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 16))(v18, *(_QWORD *)(v0 + 24), v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v19 + 32))(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 40), v18, v20);
    swift_continuation_throwingResume();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B68B10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B68B78()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_243B68BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v11 = sub_243BFDD0C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v29 - v14;
  v32 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v37 = a1;
  v31 = a1;
  type metadata accessor for ChannelStateMachine(0, a4, a5, a6);
  type metadata accessor for ChannelStateMachine.FinishAction(0, a4, a5, a6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A16C, (uint64_t)v33, a2);
  v18 = v39;
  if (v39)
  {
    v30 = v17;
    v19 = v40;
    v20 = *(_QWORD *)(v39 + 16);
    if (v20)
    {
      v29 = 0;
      v21 = v40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)(v18 + 8 * i + 32))
          swift_continuation_throwingResume();
      }
      swift_bridgeObjectRelease();
      v19 = v21;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v31, v11);
    v23 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, a5) == 1)
    {
      v24 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      v38 = v19;
      MEMORY[0x24BDAC7A8](v24);
      *(&v29 - 4) = a4;
      *(&v29 - 3) = a5;
      *(&v29 - 2) = a6;
      sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFDAF0();
      sub_243BFDD0C();
      v25 = sub_243BFD9DC();
      MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v25);
      sub_243BFD910();
      sub_243B6A1DC(v18);
    }
    else
    {
      v26 = v30;
      v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v30, v15, a5);
      v38 = v19;
      MEMORY[0x24BDAC7A8](v27);
      *(&v29 - 4) = a4;
      *(&v29 - 3) = a5;
      *(&v29 - 2) = a6;
      *(&v29 - 1) = (uint64_t)v26;
      sub_243BFDD0C();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
      sub_243BFDAF0();
      sub_243BFDD0C();
      v28 = sub_243BFD9DC();
      MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v28);
      sub_243BFD910();
      sub_243B6A1DC(v18);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, a5);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_243B68F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t Action;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = sub_243BFDD0C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v10 = sub_243BFE1EC();
  v6[9] = v10;
  v6[10] = *(_QWORD *)(v10 - 8);
  v6[11] = swift_task_alloc();
  Action = type metadata accessor for ChannelStateMachine.NextAction(0, a4, a5, a6);
  v6[12] = Action;
  v6[13] = *(_QWORD *)(Action - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B69014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = (_QWORD *)swift_task_alloc();
  v9[2] = v7;
  v9[3] = v6;
  v9[4] = v5;
  type metadata accessor for ChannelStateMachine(0, v7, v6, v5);
  sub_243B6A46C((void (*)(uint64_t))sub_243B698E4, (uint64_t)v9, v8);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v2, 1, TupleTypeMetadata2) == 1)
  {
    v12 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
    v16 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v16 + 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v17;
    v17[2] = v13;
    v17[3] = v12;
    v17[4] = v11;
    v17[5] = v15;
    v17[6] = v14;
    v17[7] = v16;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v18;
    v18[2] = v13;
    v18[3] = v12;
    v18[4] = v11;
    v18[5] = v15;
    v18[6] = v14;
    v18[7] = v16;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v19;
    *v19 = v0;
    v19[1] = sub_243B692AC;
    return sub_243BFE0FC();
  }
  else
  {
    v21 = *(char **)(v0 + 112);
    v22 = *(_QWORD *)v21;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), &v21[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v0 + 72));
    if (v22)
      swift_continuation_throwingResume();
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 72);
    v29 = MEMORY[0x249502B6C](&unk_243BFFA50, v28);
    sub_243B6A5DC(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_243B692AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6932C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B69384()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B693E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[11] = a3;
  v8[12] = a4;
  v8[10] = a2;
  return swift_task_switch();
}

uint64_t sub_243B69408()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v6 = v0[11];
  v5 = v0[12];
  v7 = v0[10];
  v0[2] = v0;
  v0[3] = sub_243B69494;
  v8 = swift_continuation_init();
  sub_243B694D8(v8, v7, v6, v5, v4, v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_243B69494()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 8))();
}

void sub_243B694D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v15 = sub_243BFDD0C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v21[-v17];
  v22 = a6;
  v23 = a7;
  v24 = a8;
  v25 = a1;
  v26 = a4;
  v27 = a5;
  type metadata accessor for ChannelStateMachine(0, a6, a7, a8);
  type metadata accessor for ChannelStateMachine.SendSuspendedAction(255, a6, a7, a8);
  sub_243BFDD0C();
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A38C, (uint64_t)v21, a2);
  v19 = v28;
  if (v28 != 2)
  {
    if (v28 != 1)
    {
      swift_continuation_throwingResume();
      if (!v19)
        return;
      v20 = *(_QWORD *)(a6 - 8);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16))(v18, a4, a6);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, a6);
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v16 + 32))(*(_QWORD *)(*(_QWORD *)(v19 + 64) + 40), v18, v15);
    }
    swift_continuation_throwingResume();
  }
}

uint64_t sub_243B69644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _QWORD v11[7];
  unint64_t v12;

  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a6;
  v11[5] = a3;
  type metadata accessor for ChannelStateMachine(0, a4, a5, a6);
  type metadata accessor for ChannelStateMachine.SendCancelledAction(0, a4, a5, a6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A310, (uint64_t)v11, a1);
  result = v12;
  if (v12 >= 2)
    return swift_continuation_throwingResume();
  return result;
}

_QWORD *sub_243B696EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a4 - 8);
  result = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*result)
  {
    (*(void (**)(char *))(v5 + 16))(v8);
    v9 = sub_243BFE0CC();
    if (v9)
    {
      v10 = v9;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a4);
    }
    else
    {
      v10 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11, v8, a4);
    }
    v15 = v10;
    sub_243BFDD0C();
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v13, &v15, v12);
    return (_QWORD *)swift_continuation_throwingResumeWithError();
  }
  return result;
}

uint64_t sub_243B69830(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_243BFDD0C();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - v7;
  v9 = *a1;
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v8, 1, 1, a2);
    (*(void (**)(_QWORD, char *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 40), v8, v4);
    return swift_continuation_throwingResume();
  }
  return result;
}

uint64_t sub_243B698E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  _QWORD *v3;

  v3 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v1[2], v1[3], v1[4]);
  return sub_243B64124(v3, a1);
}

uint64_t sub_243B69930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B69954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v3 + 32) = v1;
  *(_OWORD *)(v3 + 40) = v4;
  *(_QWORD *)(v3 + 56) = v2;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2572ECD78 + dword_2572ECD78);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  sub_243BFDD0C();
  *v5 = v0;
  v5[1] = sub_243B69A18;
  return v7(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)sub_243B6A0F8, v3);
}

uint64_t sub_243B69A18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B69A8C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B69AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 40);
  v8 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_243B4D7A0;
  *(_QWORD *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 40) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_243B69B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SuspendedAction;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v13 = sub_243BFDD0C();
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v45 = (char *)&v45 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v47 = (char *)&v45 - v18;
  SuspendedAction = type metadata accessor for ChannelStateMachine.NextSuspendedAction(255, a5, a6, a7);
  v20 = sub_243BFDD0C();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v45 - v24;
  v52 = a5;
  v53 = a6;
  v54 = a7;
  v55 = a1;
  v50 = a1;
  v56 = a4;
  v26 = a5;
  v28 = v27;
  type metadata accessor for ChannelStateMachine(0, v26, a6, a7);
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A108, (uint64_t)v51, a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 16))(v23, v25, v20);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(SuspendedAction - 8) + 48))(v23, 1, SuspendedAction) != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v57 = *v23;
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v31, &v57, v30);
        swift_continuation_throwingResumeWithError();
      }
      else
      {
        v37 = *v23;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2572EBBA0);
        v38 = v49;
        v39 = (char *)v23 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        v40 = v48;
        v41 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
        v42 = v46;
        v41(v46, v39, v38);
        if (v37)
          swift_continuation_throwingResume();
        v43 = v47;
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v47, v42, v38);
        v41(*(char **)(*(_QWORD *)(v50 + 64) + 40), v43, v38);
        swift_continuation_throwingResume();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v38);
      }
    }
    else
    {
      v33 = v47;
      v32 = v48;
      v34 = *(void (**)(char *, uint64_t *, uint64_t))(v48 + 32);
      v35 = v49;
      v34(v47, v23, v49);
      v36 = v45;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v45, v33, v35);
      v34(*(char **)(*(_QWORD *)(v50 + 64) + 40), (uint64_t *)v36, v35);
      swift_continuation_throwingResume();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v35);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v25, v20);
}

uint64_t sub_243B69E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_243BFD9F4();
  }
  return swift_task_switch();
}

uint64_t sub_243B69EFC()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_243B69F58;
  v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_243B69F58()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_243B69FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v11 = sub_243BFDD0C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v16[-v13];
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a3;
  type metadata accessor for ChannelStateMachine(0, a4, a5, a6);
  type metadata accessor for ChannelStateMachine.NextCancelledAction(0, a4, a5, a6);
  sub_243B6A46C((void (*)(uint64_t))sub_243B6A0DC, (uint64_t)v16, a1);
  v15 = v21;
  if (v21 >= 2)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v14, 1, 1, a4);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(v12 + 32))(*(_QWORD *)(*(_QWORD *)(v15 + 64) + 40), v14, v11);
    swift_continuation_throwingResume();
  }
}

uint64_t sub_243B6A0D0()
{
  return sub_243B6A2FC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_243B69FAC);
}

uint64_t sub_243B6A0DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_243B6A32C((uint64_t (*)(uint64_t, uint64_t))sub_243B64A24, a1);
}

uint64_t sub_243B6A0F8(uint64_t a1)
{
  uint64_t *v1;

  return sub_243B69B48(a1, v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_243B6A108@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  return sub_243B64574(v6, v7, v8, a1);
}

uint64_t sub_243B6A16C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  result = sub_243B63C14(v6, v7);
  *a1 = result;
  a1[1] = v9;
  return result;
}

uint64_t sub_243B6A1C0(uint64_t *a1)
{
  uint64_t v1;

  return sub_243B69830(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B6A1DC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_243B6A208(uint64_t a1)
{
  uint64_t *v1;

  return sub_243B696EC(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_243B6A224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)type metadata accessor for ChannelStateMachine(0, v1[2], v1[3], v1[4]);
  result = sub_243B633B8(v3);
  *a1 = result;
  return result;
}

uint64_t sub_243B6A270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_243B6A428;
  *(_QWORD *)(v5 + 128) = v2;
  *(_OWORD *)(v5 + 112) = v7;
  *(_QWORD *)(v5 + 96) = v3;
  *(_QWORD *)(v5 + 104) = v4;
  *(_OWORD *)(v5 + 80) = v6;
  return swift_task_switch();
}

uint64_t sub_243B6A2F0()
{
  return sub_243B6A2FC(sub_243B69644);
}

uint64_t sub_243B6A2FC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[5], v1[6], v1[7], v1[2], v1[3], v1[4]);
}

uint64_t sub_243B6A310@<X0>(uint64_t *a1@<X8>)
{
  return sub_243B6A32C((uint64_t (*)(uint64_t, uint64_t))sub_243B63904, a1);
}

uint64_t sub_243B6A32C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = type metadata accessor for ChannelStateMachine(0, v5, v6, v7);
  result = a1(v8, v9);
  *a2 = result;
  return result;
}

uint64_t sub_243B6A38C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v7 = v1[7];
  v9 = (_QWORD *)type metadata accessor for ChannelStateMachine(0, v3, v4, v5);
  result = sub_243B6352C(v6, v8, v7, v9);
  *a1 = result;
  return result;
}

uint64_t sub_243B6A3F4(uint64_t a1)
{
  sub_243B63074(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_243B6A42C()
{
  return swift_initClassMetadata2();
}

void sub_243B6A46C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_243B6A4F8()
{
  MEMORY[0x249502254]();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ManagedCriticalState.LockedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState.LockedBuffer);
}

uint64_t type metadata accessor for ManagedCriticalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState);
}

uint64_t sub_243B6A530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ManagedCriticalState.LockedBuffer(0, a2, a3, a4);
  return sub_243BFDE98();
}

uint64_t sub_243B6A584@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2, v3);
}

uint64_t sub_243B6A5DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_243B6A5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v18 - v11;
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_243B6A750(a1, (uint64_t)v12, a2);
  if (v2)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v9, v12, v5);
    if (sub_243BFE0CC())
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    else
    {
      swift_allocError();
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v17, v9, v5);
    }
  }
  return result;
}

uint64_t sub_243B6A750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t sub_243B6A7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_243B6A7FC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243B6A868(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243B6A918 + 4 * byte_243BFFA88[(v7 - 1)]))();
}

void sub_243B6A968(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UnsafeTransfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeTransfer);
}

uint64_t sub_243B6AB24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v61 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v71 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED120);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v72 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (!v9)
    return v10;
  v58 = v6;
  v54 = v1;
  v73 = MEMORY[0x24BEE4AF8];
  sub_243B7CBF4(0, v9, 0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED138);
  v11 = *(_QWORD *)(v57 - 8);
  v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v56 = *(_QWORD *)(v11 + 72);
  v13 = (int *)type metadata accessor for StoredLayoutView();
  v55 = v5;
  while ((*(_QWORD *)(v12 + v13[8]) & 0x8000000000000000) == 0)
  {
    v70 = *(_QWORD *)(v12 + v13[8]);
    v14 = *(_QWORD *)(v12 + v13[7]);
    if (v14 < 0)
      break;
    v68 = *(_QWORD *)(v12 + *(int *)(v57 + 48));
    v15 = sub_243BFD280();
    v16 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v72, v12, v15);
    v17 = v12 + v13[5];
    v18 = (int *)type metadata accessor for StoredPhoto(0);
    v19 = v16 + v18[5];
    v20 = sub_243BFD22C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v17, v20);
    v21 = (uint64_t *)(v12 + v13[23]);
    v22 = *v21;
    v23 = v21[1];
    *(_QWORD *)(v16 + v18[6]) = *(_QWORD *)(v12 + v13[6]);
    *(_QWORD *)(v16 + v18[7]) = v14;
    *(_QWORD *)(v16 + v18[8]) = MEMORY[0x24BEE4B00];
    v24 = (_QWORD *)(v16 + v18[9]);
    *v24 = v22;
    v24[1] = v23;
    v67 = v23;
    v25 = sub_243BFD190();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
    v26(v71, 1, 1, v25);
    v27 = *(unsigned __int8 *)(v12 + v13[9]);
    v69 = v9;
    if (v27 == 1)
    {
      v26((uint64_t)v5, 1, 1, v25);
      v28 = v5;
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56);
      v30 = 0;
    }
    else
    {
      v28 = v5;
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56);
      v30 = 1;
    }
    v31 = v58;
    v29(v28, v30, 1, v58);
    v32 = v13[14];
    v33 = *(_QWORD *)(v12 + v13[15]);
    v34 = *(_QWORD *)(v12 + v13[16]);
    v35 = *(_QWORD *)(v12 + v13[17]);
    v36 = *(_QWORD *)(v12 + v13[18]);
    v37 = *(_QWORD *)(v12 + v13[19]);
    v38 = *(_QWORD *)(v12 + v13[20]);
    v39 = *(_QWORD *)(v12 + v13[21]);
    v40 = *(_QWORD *)(v12 + v13[22]);
    v41 = *(_QWORD *)(v12 + v13[11]);
    v62 = *(_QWORD *)(v12 + v13[10]);
    v63 = v41;
    v42 = v72;
    v43 = v72 + *(int *)(v60 + 48);
    v44 = *(_QWORD *)(v12 + v13[13]);
    v64 = *(_QWORD *)(v12 + v13[12]);
    v65 = v44;
    v66 = *(int *)(v60 + 64);
    v45 = *(_BYTE *)(v12 + v32);
    v46 = (int *)type metadata accessor for StoredPhotoLayout(0);
    v47 = v43 + v46[5];
    v29((char *)v47, 1, 1, v31);
    sub_243B6F934(v71, v43, type metadata accessor for StoredPhotoLayout.ImageLocation);
    swift_bridgeObjectRetain();
    sub_243B6F978(v47, &qword_2572ED130);
    v5 = v55;
    sub_243B6F9B4((uint64_t)v55, v47, &qword_2572ED130);
    v48 = (_QWORD *)(v43 + v46[6]);
    *v48 = v33;
    v48[1] = v34;
    v48[2] = v35;
    v48[3] = v36;
    *(_QWORD *)(v43 + v46[7]) = v70;
    v49 = (_QWORD *)(v43 + v46[8]);
    *v49 = v37;
    v49[1] = v38;
    v49[2] = v39;
    v49[3] = v40;
    *(_QWORD *)(v43 + v46[9]) = v62;
    *(_QWORD *)(v43 + v46[10]) = v63;
    *(_QWORD *)(v43 + v46[11]) = v64;
    *(_QWORD *)(v43 + v46[12]) = v65;
    *(_BYTE *)(v43 + v46[13]) = v45;
    *(_QWORD *)(v42 + v66) = v68;
    v10 = v73;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CBF4(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v10 = v73;
    }
    v50 = v69;
    v52 = *(_QWORD *)(v10 + 16);
    v51 = *(_QWORD *)(v10 + 24);
    if (v52 >= v51 >> 1)
    {
      sub_243B7CBF4(v51 > 1, v52 + 1, 1);
      v10 = v73;
    }
    *(_QWORD *)(v10 + 16) = v52 + 1;
    sub_243B6F9B4(v72, v10+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v52, &qword_2572ED120);
    v12 += v56;
    v9 = v50 - 1;
    if (!v9)
      return v10;
  }
  result = sub_243BFDF64();
  __break(1u);
  return result;
}

uint64_t sub_243B6B084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED110);
  v3 = MEMORY[0x24BDAC7A8](v51);
  v50 = (uint64_t)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v49 = (uint64_t)v40 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v46 = (uint64_t)v40 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0C0);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v52 = (uint64_t)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v40[1] = v1;
  v53 = MEMORY[0x24BEE4AF8];
  sub_243B7CBBC(0, v10, 0);
  result = sub_243BE4C6C(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v41 = a1 + 80;
  v42 = v10;
  v43 = v13;
  v44 = a1 + 64;
  v45 = a1;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v19 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_26;
    v20 = v51;
    v21 = *(int *)(v51 + 48);
    v22 = *(_QWORD *)(a1 + 48);
    v23 = v22
        + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED118) - 8) + 72) * v14;
    v24 = a1;
    v25 = v46;
    sub_243B50168(v23, v46, &qword_2572ED118);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v14);
    *(_QWORD *)(v25 + v21) = v26;
    v27 = v49;
    sub_243B50168(v25, v49, &qword_2572ED118);
    *(_QWORD *)(v27 + *(int *)(v20 + 48)) = v26;
    v28 = v27;
    v29 = v50;
    sub_243B6F9B4(v28, v50, &qword_2572ED110);
    swift_bridgeObjectRetain_n();
    sub_243B6F978(v25, &qword_2572ED110);
    v30 = *(_QWORD *)(v29 + *(int *)(v20 + 48));
    v31 = *(int *)(v48 + 48);
    v32 = v52;
    *(_QWORD *)(v32 + v31) = sub_243B79198(v52, v29, v30);
    sub_243B6F978(v29, &qword_2572ED110);
    v11 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CBBC(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v53;
    }
    v34 = *(_QWORD *)(v11 + 16);
    v33 = *(_QWORD *)(v11 + 24);
    a1 = v45;
    if (v34 >= v33 >> 1)
    {
      sub_243B7CBBC(v33 > 1, v34 + 1, 1);
      v11 = v53;
    }
    *(_QWORD *)(v11 + 16) = v34 + 1;
    result = sub_243B6F9B4(v52, v11+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v34, &qword_2572ED0C0);
    v17 = 1 << *(_BYTE *)(a1 + 32);
    if (v14 >= v17)
      goto LABEL_27;
    v16 = v44;
    v35 = *(_QWORD *)(v44 + 8 * v19);
    if ((v35 & (1 << v14)) == 0)
      goto LABEL_28;
    LODWORD(v13) = v43;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v43)
      goto LABEL_29;
    v36 = v35 & (-2 << (v14 & 0x3F));
    if (v36)
    {
      v17 = __clz(__rbit64(v36)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v18 = v42;
    }
    else
    {
      v37 = v19 + 1;
      v38 = (unint64_t)(v17 + 63) >> 6;
      v18 = v42;
      if (v19 + 1 < v38)
      {
        v39 = *(_QWORD *)(v44 + 8 * v37);
        if (v39)
        {
LABEL_22:
          v17 = __clz(__rbit64(v39)) + (v37 << 6);
        }
        else
        {
          while (v38 - 2 != v19)
          {
            v39 = *(_QWORD *)(v41 + 8 * v19++);
            if (v39)
            {
              v37 = v19 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v15;
    v14 = v17;
    if (v15 == v18)
      return v11;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243B6B450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0C0);
  v3 = *(_QWORD *)(v25 - 8);
  v4 = MEMORY[0x24BDAC7A8](v25);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - v7;
  v9 = type metadata accessor for StoredPhoto(0);
  v24 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v22 = v1;
    v26 = MEMORY[0x24BEE4AF8];
    sub_243B7CC10(0, v12, 0);
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    do
    {
      v15 = v25;
      v16 = *(int *)(v25 + 48);
      sub_243B6F8F0(v14, (uint64_t)v8, type metadata accessor for StoredPhoto);
      v17 = *(_QWORD *)(v14 + v16);
      *(_QWORD *)&v8[v16] = v17;
      v18 = *(int *)(v15 + 48);
      sub_243B6F934((uint64_t)v8, (uint64_t)v6, type metadata accessor for StoredPhoto);
      *(_QWORD *)&v6[v18] = v17;
      sub_243B6F8F0((uint64_t)v6, (uint64_t)v11, type metadata accessor for StoredPhoto);
      sub_243B6F978((uint64_t)v6, &qword_2572ED0C0);
      v13 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC10(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v26;
      }
      v20 = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_243B7CC10(v19 > 1, v20 + 1, 1);
        v13 = v26;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      sub_243B6F934((uint64_t)v11, v13+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v20, type metadata accessor for StoredPhoto);
      v14 += v23;
      --v12;
    }
    while (v12);
  }
  return v13;
}

uint64_t AlbumDatabase.database.getter()
{
  return swift_retain();
}

uint64_t AlbumDatabase.__allocating_init(database:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t AlbumDatabase.init(database:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t AlbumDatabase.insert(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6B6D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6B720()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6B910);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6B790(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  Swift::String v13;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_243BFFAC0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_243BFFAD0;
  v8 = v7 + v6;
  v9 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a2, v9);
  swift_storeEnumTagMultiPayload();
  v10 = (_QWORD *)(v8 + v5);
  v11 = (_QWORD *)(a2 + *(int *)(type metadata accessor for AlbumID() + 20));
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(inited + 32) = v7;
  swift_bridgeObjectRetain();
  v13._object = (void *)0x8000000243C05E70;
  v13._countAndFlagsBits = 0xD00000000000005ELL;
  DatabaseConnection.insert(sql:bindings:)(v13, (Swift::OpaquePointer)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D8);
  return swift_arrayDestroy();
}

uint64_t sub_243B6B910(uint64_t a1)
{
  uint64_t v1;

  return sub_243B6B790(a1, *(_QWORD *)(v1 + 16));
}

uint64_t AlbumDatabase.queryList()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = sub_243BFD280();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v3 = type metadata accessor for AlbumID();
  v1[6] = v3;
  v1[7] = *(_QWORD *)(v3 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B6BA2C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  return swift_task_switch();
}

uint64_t sub_243B6BA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *v5;
  void *v6;
  sqlite3_stmt *v7;
  int v8;
  unint64_t v9;
  uint64_t (*v10)();
  const void *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  unsigned int v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  sqlite3_stmt *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE __dst[14];
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 104);
  v2 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v3)
  {
    sub_243B72E90();
    v3 = *(_QWORD *)(v1 + v2);
    if (!v3)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v35 = 0;
      goto LABEL_39;
    }
  }
  *(_QWORD *)__dst = v3;
  v4._countAndFlagsBits = 0x6E69676562;
  v4._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v4);
  v6 = v5;
  if (v5)
    goto LABEL_37;
  *(_QWORD *)__dst = v3;
  v7 = sub_243B81BB0();
  sub_243B8693C(v7);
  v8 = sqlite3_step(v7);
  if (v8 != 100)
  {
    v36 = v8;
    v9 = MEMORY[0x24BEE4AF8];
    if (v8 == 101)
      goto LABEL_25;
LABEL_32:
    swift_bridgeObjectRelease();
    if (sqlite3_errstr(v36))
    {
      v45 = sub_243BFD868();
      v47 = v46;
    }
    else
    {
      v47 = 0xE300000000000000;
      v45 = 4271950;
    }
    sub_243B6DB18();
    v6 = (void *)swift_allocError();
    *v48 = v36 | 0xA000000000000000;
    v48[1] = v45;
    v48[2] = v47;
    swift_willThrow();
LABEL_36:
    sub_243B86B4C(v7);
LABEL_37:
    *(_QWORD *)__dst = v3;
    v49._countAndFlagsBits = 0x6B6361626C6C6F72;
    v49._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v49);
    if (v50)
    {

LABEL_40:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_39:
    swift_willThrow();
    goto LABEL_40;
  }
  v53 = *(_QWORD *)(v0 + 48);
  v54 = *(_QWORD *)(v0 + 56);
  v9 = MEMORY[0x24BEE4AF8];
  v10 = type metadata accessor for AlbumID;
  v51 = *(_QWORD *)(v0 + 32);
  v52 = v7;
  do
  {
    if (sqlite3_column_type(v7, 0) == 5 || (v11 = sqlite3_column_blob(v7, 0)) == 0)
    {
      sub_243B6DB5C();
      v6 = (void *)swift_allocError();
      *(_DWORD *)v39 = 0;
      *(_BYTE *)(v39 + 4) = 0;
      swift_willThrow();
LABEL_30:
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    v12 = v11;
    v13 = sqlite3_column_bytes(v7, 0);
    if (v13)
    {
      v14 = v13;
      if (v13 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v56 = v13;
        memcpy(__dst, v12, v13);
        v16 = *(_QWORD *)__dst;
        v17 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v56 << 48);
      }
      else
      {
        sub_243BFD0E8();
        swift_allocObject();
        if ((_DWORD)v14 == 0x7FFFFFFF)
        {
          v15 = sub_243BFD0AC();
          sub_243BFD1B4();
          v16 = swift_allocObject();
          *(_OWORD *)(v16 + 16) = xmmword_243BFFAE0;
          v17 = v15 | 0x8000000000000000;
        }
        else
        {
          v18 = sub_243BFD0AC();
          v16 = v14 << 32;
          v17 = v18 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = 0xC000000000000000;
    }
    UUID.init(serialized:version:)(v16, v17);
    if (sqlite3_column_type(v7, 1) == 5 || !sqlite3_column_text(v7, 1))
    {
      sub_243B6DB5C();
      v6 = (void *)swift_allocError();
      v41 = *(_QWORD *)(v0 + 32);
      v40 = *(_QWORD *)(v0 + 40);
      v42 = *(_QWORD *)(v0 + 24);
      *(_DWORD *)v43 = 1;
      *(_BYTE *)(v43 + 4) = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      goto LABEL_30;
    }
    v20 = *(_QWORD *)(v0 + 64);
    v19 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 40);
    v22 = v9;
    v23 = v10;
    v24 = *(_QWORD *)(v0 + 24);
    v25 = sub_243BFD874();
    v27 = v26;
    v28 = v24;
    v10 = v23;
    v9 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v19, v21, v28);
    v29 = (uint64_t *)(v19 + *(int *)(v53 + 20));
    *v29 = v25;
    v29[1] = v27;
    sub_243B6F8F0(v19, v20, (uint64_t (*)(_QWORD))v10);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_243B6DF30(0, *(_QWORD *)(v22 + 16) + 1, 1, v22, &qword_2572ED148, (uint64_t (*)(_QWORD))v10);
    v31 = *(_QWORD *)(v9 + 16);
    v30 = *(_QWORD *)(v9 + 24);
    v7 = v52;
    if (v31 >= v30 >> 1)
      v9 = sub_243B6DF30(v30 > 1, v31 + 1, 1, v9, &qword_2572ED148, (uint64_t (*)(_QWORD))v10);
    v32 = *(_QWORD *)(v0 + 64);
    v33 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v9 + 16) = v31 + 1;
    sub_243B6F934(v32, v9+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v31, (uint64_t (*)(_QWORD))v10);
    sub_243B6DCAC(v33);
    v34 = sqlite3_step(v52);
  }
  while (v34 == 100);
  v36 = v34;
  if (v34 != 101)
    goto LABEL_32;
LABEL_25:
  sub_243B86B4C(v7);
  *(_QWORD *)__dst = v3;
  v37._countAndFlagsBits = 0x74696D6D6F63;
  v37._object = (void *)0xE600000000000000;
  DatabaseConnection.execute(sql:)(v37);
  if (v38)
  {
    v6 = v38;
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
}

uint64_t AlbumDatabase.queryByDay(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DatabaseBinding();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B6C170()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[3];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v7 = *(_QWORD *)(v3 + 72);
  v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAD0;
  v10 = v9 + v8;
  v11 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9 + v8, v6, v11);
  swift_storeEnumTagMultiPayload();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v12(v10, 0, 1, v4);
  v13 = v10 + v7;
  *(_QWORD *)(v10 + v7) = 15;
  swift_storeEnumTagMultiPayload();
  v12(v10 + v7, 0, 1, v4);
  sub_243B50168(v10, v2, &qword_2572ECF80);
  sub_243B6F9B4(v2, v1, &qword_2572ECF80);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v15 = v14(v1, 1, v4);
  v16 = v0[11];
  if (v15 == 1)
  {
    sub_243B6F978(v16, &qword_2572ECF80);
    v17 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = v0[7];
    v18 = v0[8];
    sub_243B6F934(v16, v18, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v17 = MEMORY[0x24BEE4AF8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF30(0, *(_QWORD *)(v17 + 16) + 1, 1, v17, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    if (v21 >= v20 >> 1)
      v17 = sub_243B6DF30(v20 > 1, v21 + 1, 1, v17, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v22 = v0[7];
    *(_QWORD *)(v17 + 16) = v21 + 1;
    sub_243B6F934(v22, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v24 = v0[11];
  v23 = v0[12];
  v25 = v0[5];
  sub_243B50168(v13, v23, &qword_2572ECF80);
  sub_243B6F9B4(v23, v24, &qword_2572ECF80);
  v26 = v14(v24, 1, v25);
  v27 = v0[11];
  if (v26 == 1)
  {
    sub_243B6F978(v27, &qword_2572ECF80);
  }
  else
  {
    v29 = v0[7];
    v28 = v0[8];
    sub_243B6F934(v27, v28, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v28, v29, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF30(0, *(_QWORD *)(v17 + 16) + 1, 1, v17, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v31 = *(_QWORD *)(v17 + 16);
    v30 = *(_QWORD *)(v17 + 24);
    if (v31 >= v30 >> 1)
      v17 = sub_243B6DF30(v30 > 1, v31 + 1, 1, v17, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v32 = v0[7];
    *(_QWORD *)(v17 + 16) = v31 + 1;
    sub_243B6F934(v32, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v31, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v0[16] = v17;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t sub_243B6C5A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0[15];
  v2 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_243B74808(v4, v3, v1, v2, (uint64_t)sub_243B6C7AC, 0);
  v6 = sub_243B6AB24(v5);
  swift_bridgeObjectRelease();
  v8 = sub_243B6EA10(v6);
  swift_bridgeObjectRelease();
  v0[17] = sub_243B6B084(v8);
  v0[18] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_243B6C69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_243B6ED7C(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  v2 = sub_243B6E718(v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_243B6C738()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B6C7AC@<X0>(sqlite3_stmt **a1@<X0>, _QWORD *a2@<X8>)
{
  sqlite3_stmt *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  if (sqlite3_column_type(*a1, 21) == 5)
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v4 = 21;
    *(_BYTE *)(v4 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    result = sqlite3_column_int(v3, 21);
    *a2 = (int)result;
  }
  return result;
}

uint64_t AlbumDatabase.query(id:day:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DatabaseBinding();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B6C8EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v1 = v0[10];
  v3 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v5 = v0[2];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = 2 * v6;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAF0;
  v10 = v9 + v7;
  v11 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, v5, v11);
  swift_storeEnumTagMultiPayload();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v12(v10, 0, 1, v3);
  v13 = v6;
  v14 = (_QWORD *)(v10 + v6);
  *v14 = v4;
  swift_storeEnumTagMultiPayload();
  v12((uint64_t)v14, 0, 1, v3);
  v15 = (_QWORD *)(v10 + v8);
  *v15 = 15;
  swift_storeEnumTagMultiPayload();
  v12((uint64_t)v15, 0, 1, v3);
  v16 = MEMORY[0x24BEE4AF8];
  v17 = 3;
  v18 = v10;
  do
  {
    v19 = v0[11];
    v20 = v0[12];
    v21 = v0[5];
    sub_243B50168(v18, v20, &qword_2572ECF80);
    sub_243B6F9B4(v20, v19, &qword_2572ECF80);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v19, 1, v21);
    v23 = v0[11];
    if (v22 == 1)
    {
      sub_243B6F978(v23, &qword_2572ECF80);
    }
    else
    {
      v25 = v0[7];
      v24 = v0[8];
      sub_243B6F934(v23, v24, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      sub_243B6F934(v24, v25, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = sub_243B6DF30(0, *(_QWORD *)(v16 + 16) + 1, 1, v16, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      v27 = *(_QWORD *)(v16 + 16);
      v26 = *(_QWORD *)(v16 + 24);
      if (v27 >= v26 >> 1)
        v16 = sub_243B6DF30(v26 > 1, v27 + 1, 1, v16, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      v28 = v0[7];
      *(_QWORD *)(v16 + 16) = v27 + 1;
      sub_243B6F934(v28, v16+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v27, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    }
    v0[17] = v16;
    v18 += v13;
    --v17;
  }
  while (v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t sub_243B6CC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = PhotosFaceDatabase.queryPhotos(sql:bindings:)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136));
  *(_QWORD *)(v0 + 128) = 0;
  v2 = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_243B6CD0C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AlbumDatabase.delete(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6CD9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6CDEC()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6F0FC);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6CE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t AlbumDatabase.relate(photos:to:on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243B6CFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D020()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6F114);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6D090()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B6D09C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B6D0A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v5;
  _QWORD v7[6];

  v7[5] = *a1;
  v7[2] = a3;
  v7[3] = a4;
  v4 = sub_243B9A750((void (*)(uint64_t *__return_ptr, uint64_t))sub_243B6F8D4, (uint64_t)v7, a2);
  v5._object = (void *)0x8000000243C05D60;
  v5._countAndFlagsBits = 0xD000000000000078;
  DatabaseConnection.insert(sql:bindings:)(v5, (Swift::OpaquePointer)v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B6D128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v6 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAF0;
  v10 = v9 + v8;
  v11 = sub_243BFD280();
  v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v10, a2, v11);
  swift_storeEnumTagMultiPayload();
  v12(v10 + v7, a1, v11);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v10 + 2 * v7) = a3;
  result = swift_storeEnumTagMultiPayload();
  *a4 = v9;
  return result;
}

uint64_t AlbumDatabase.clearPhotos(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D260()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D2B0()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6F130);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6D320()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B6D32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t AlbumDatabase.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AlbumDatabase.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B6D4BC()
{
  return swift_retain();
}

uint64_t sub_243B6D4C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B6D4E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D534()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6FA40);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6D5A4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_243B6FA00;
  return AlbumDatabase.queryList()();
}

uint64_t sub_243B6D5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B6FA00;
  return AlbumDatabase.query(id:day:)(a1, a2);
}

uint64_t sub_243B6D64C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6D69C;
  return AlbumDatabase.queryByDay(id:)(a1);
}

uint64_t sub_243B6D69C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_243B6D6F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B6D70C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D75C()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6FA2C);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6D7CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B6D7E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D838()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6FA18);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6D8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return swift_task_switch();
}

uint64_t sub_243B6D8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6D920()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B6FA04);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_243B6D990(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  void *v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v5)
  {
    sub_243B72E90();
    if (v2)
      return;
    v5 = *(_QWORD *)(v1 + v4);
    if (!v5)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v13 = 0;
LABEL_9:
      swift_willThrow();
      return;
    }
  }
  v14 = v5;
  v6._countAndFlagsBits = 0x6E69676562;
  v6._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v6);
  v8 = v7;
  if (v7
    || (v14 = v5,
        a1(&v14),
        v14 = v5,
        v9._countAndFlagsBits = 0x74696D6D6F63,
        v9._object = (void *)0xE600000000000000,
        DatabaseConnection.execute(sql:)(v9),
        (v8 = v10) != 0))
  {
    v14 = v5;
    v11._countAndFlagsBits = 0x6B6361626C6C6F72;
    v11._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v11);
    if (v12)
    {

      return;
    }
    goto LABEL_9;
  }
}

unint64_t sub_243B6DAD4()
{
  unint64_t result;

  result = qword_2572ECF60;
  if (!qword_2572ECF60)
  {
    result = MEMORY[0x249502B6C](&unk_243BFFCD8, &type metadata for PhotosFaceDatabase.Failure);
    atomic_store(result, (unint64_t *)&qword_2572ECF60);
  }
  return result;
}

unint64_t sub_243B6DB18()
{
  unint64_t result;

  result = qword_2572ECF68;
  if (!qword_2572ECF68)
  {
    result = MEMORY[0x249502B6C](&unk_243C00204, &type metadata for DatabaseStatement.Failure);
    atomic_store(result, (unint64_t *)&qword_2572ECF68);
  }
  return result;
}

unint64_t sub_243B6DB5C()
{
  unint64_t result;

  result = qword_2572ECF70;
  if (!qword_2572ECF70)
  {
    result = MEMORY[0x249502B6C](&unk_243C00198, &type metadata for DatabaseRow.Failure);
    atomic_store(result, (unint64_t *)&qword_2572ECF70);
  }
  return result;
}

_QWORD *sub_243B6DBA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED068);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6E920(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_243B6DCAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AlbumID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243B6DCE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED0B8, &qword_2572ED0C0);
}

uint64_t sub_243B6DCFC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_243BFDF64();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_243B6F3E8(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_243B6DF08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED140, &qword_2572ED138);
}

uint64_t sub_243B6DF1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DF30(a1, a2, a3, a4, &qword_2572ED0E0, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
}

uint64_t sub_243B6DF30(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_243BFDF64();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_243B6F2D0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_243B6E13C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED0E8, &qword_2572ED0F0);
}

uint64_t sub_243B6E150(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED0F8, &qword_2572ED100);
}

uint64_t sub_243B6E164(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DF30(a1, a2, a3, a4, &qword_2572ED0C8, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
}

_QWORD *sub_243B6E178(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6F1C8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_243B6E284(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DF30(a1, a2, a3, a4, &qword_2572ED0B0, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t sub_243B6E298(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED0A0, &qword_2572ED0A8);
}

uint64_t sub_243B6E2AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DF30(a1, a2, a3, a4, &qword_2572ED098, type metadata accessor for StoredPhoto);
}

_QWORD *sub_243B6E2C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_243B6E2EC(a1, a2, a3, a4, &qword_2572ED080);
}

uint64_t sub_243B6E2CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_243B6DCFC(a1, a2, a3, a4, &qword_2572ED088, &qword_2572ED090);
}

_QWORD *sub_243B6E2E0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_243B6E2EC(a1, a2, a3, a4, &qword_2572ED050);
}

_QWORD *sub_243B6E2EC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6F608(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_243B6E3F4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED058);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6F500(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_243B6E500(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED078);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6F6F4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_243B6E60C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED070);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_243B6F7E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_243B6E718(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED108);
  result = sub_243BFDFC4();
  v3 = (_QWORD *)result;
  v4 = 0;
  v23 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v21 = (unint64_t)(v8 + 63) >> 6;
  v22 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * i);
    v17 = swift_bridgeObjectRetain();
    v18 = sub_243B6B450(v17);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v22 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = v18;
    v19 = v3[2];
    v13 = __OFADD__(v19, 1);
    v20 = v19 + 1;
    if (v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v3[2] = v20;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = __OFADD__(v4++, 1);
    if (v13)
      goto LABEL_25;
    if (v4 >= v21)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    if (!v14)
      break;
LABEL_15:
    v10 = (v14 - 1) & v14;
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v21)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v4 + 2;
  if (v4 + 2 >= v21)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v4 + 3;
  if (v4 + 3 >= v21)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v4 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v21)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_243B6E920(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6EA10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED118);
  v44 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v47 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED120);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v46 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v37 - v8;
  v10 = (_QWORD *)MEMORY[0x24BEE4B00];
  v48 = (_QWORD *)MEMORY[0x24BEE4B00];
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (uint64_t)v10;
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v7 + 72);
  v45 = v13;
  v39 = v12 | 7;
  v40 = v15 + v13;
  v38 = xmmword_243BFFAC0;
  v42 = v4;
  v43 = v2;
  v41 = (char *)&v37 - v8;
  while (1)
  {
    sub_243B50168(v14, (uint64_t)v9, &qword_2572ED120);
    v16 = *(_QWORD *)&v9[*(int *)(v4 + 64)];
    v17 = v47;
    sub_243B6F8F0((uint64_t)v9, v47, type metadata accessor for StoredPhoto);
    *(_QWORD *)(v17 + *(int *)(v2 + 28)) = v16;
    v19 = sub_243B7CF00(v17);
    v20 = v10[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v10[3] < v22)
    {
      sub_243BA10FC(v22, 1);
      v10 = v48;
      v24 = sub_243B7CF00(v47);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_19;
      v19 = v24;
    }
    if ((v23 & 1) != 0)
    {
      sub_243B6F978(v47, &qword_2572ED118);
      v10 = v48;
      v26 = (uint64_t)v9;
      v27 = v48[7];
      sub_243B6F9B4(v26, v46, &qword_2572ED120);
      v28 = *(_QWORD *)(v27 + 8 * v19);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v27 + 8 * v19) = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v28 = sub_243B6DCFC(0, *(_QWORD *)(v28 + 16) + 1, 1, v28, &qword_2572ED128, &qword_2572ED120);
        *(_QWORD *)(v27 + 8 * v19) = v28;
      }
      v31 = *(_QWORD *)(v28 + 16);
      v30 = *(_QWORD *)(v28 + 24);
      if (v31 >= v30 >> 1)
      {
        v28 = sub_243B6DCFC(v30 > 1, v31 + 1, 1, v28, &qword_2572ED128, &qword_2572ED120);
        *(_QWORD *)(v27 + 8 * v19) = v28;
      }
      v9 = v41;
      *(_QWORD *)(v28 + 16) = v31 + 1;
      sub_243B6F9B4(v46, v28 + v45 + v31 * v15, &qword_2572ED120);
      v4 = v42;
      v2 = v43;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED128);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = v38;
      sub_243B6F9B4((uint64_t)v9, v32 + v45, &qword_2572ED120);
      v10[(v19 >> 6) + 8] |= 1 << v19;
      sub_243B6F9B4(v47, v10[6] + *(_QWORD *)(v44 + 72) * v19, &qword_2572ED118);
      *(_QWORD *)(v10[7] + 8 * v19) = v32;
      v33 = v10[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_18;
      v10[2] = v35;
    }
    v14 += v15;
    if (!--v11)
      return (uint64_t)v10;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243B6ED7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0C0);
  v2 = MEMORY[0x24BDAC7A8](v53);
  v50 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v52 = (uint64_t)&v44 - v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v51 = (uint64_t)&v44 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v44 - v9;
  v10 = (_QWORD *)MEMORY[0x24BEE4B00];
  v56 = (_QWORD *)MEMORY[0x24BEE4B00];
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (uint64_t)v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v8 + 72);
  v49 = v13;
  v46 = v12 | 7;
  v47 = v15 + v13;
  v45 = xmmword_243BFFAC0;
  v48 = v15;
  while (1)
  {
    v54 = v11;
    v18 = v55;
    sub_243B50168(v14, v55, &qword_2572ED0C0);
    v19 = v53;
    v20 = *(int *)(v53 + 48);
    v21 = v51;
    sub_243B6F8F0(v18, v51, type metadata accessor for StoredPhoto);
    v22 = *(_QWORD *)(v18 + v20);
    *(_QWORD *)(v21 + v20) = v22;
    v23 = *(int *)(v19 + 48);
    v24 = v21;
    v25 = v52;
    sub_243B6F934(v24, v52, type metadata accessor for StoredPhoto);
    *(_QWORD *)(v25 + v23) = v22;
    sub_243B6F978(v25, &qword_2572ED0C0);
    v27 = sub_243B7CED0(v22);
    v28 = v10[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v10[3] < v30)
    {
      sub_243BA0DB0(v30, 1);
      v10 = v56;
      v32 = sub_243B7CED0(v22);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_19;
      v27 = v32;
    }
    if ((v31 & 1) != 0)
    {
      v34 = v10[7];
      sub_243B6F9B4(v55, v50, &qword_2572ED0C0);
      v35 = *(_QWORD *)(v34 + 8 * v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v34 + 8 * v27) = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = sub_243B6DCFC(0, *(_QWORD *)(v35 + 16) + 1, 1, v35, &qword_2572ED0B8, &qword_2572ED0C0);
        *(_QWORD *)(v34 + 8 * v27) = v35;
      }
      v38 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      if (v38 >= v37 >> 1)
      {
        v35 = sub_243B6DCFC(v37 > 1, v38 + 1, 1, v35, &qword_2572ED0B8, &qword_2572ED0C0);
        *(_QWORD *)(v34 + 8 * v27) = v35;
      }
      v16 = v54;
      *(_QWORD *)(v35 + 16) = v38 + 1;
      v17 = v48;
      sub_243B6F9B4(v50, v35 + v49 + v38 * v48, &qword_2572ED0C0);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0B8);
      v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v45;
      sub_243B6F9B4(v55, v39 + v49, &qword_2572ED0C0);
      v10[(v27 >> 6) + 8] |= 1 << v27;
      *(_QWORD *)(v10[6] + 8 * v27) = v22;
      *(_QWORD *)(v10[7] + 8 * v27) = v39;
      v40 = v10[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_18;
      v10[2] = v42;
      v17 = v48;
      v16 = v54;
    }
    v14 += v17;
    v11 = v16 - 1;
    if (!v11)
      return (uint64_t)v10;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243B6F0FC(uint64_t a1)
{
  uint64_t v1;

  return sub_243B6CE5C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B6F114(_QWORD *a1)
{
  uint64_t *v1;

  return sub_243B6D0A8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_243B6F130(uint64_t a1)
{
  uint64_t v1;

  return sub_243B6D32C(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_243B6F14C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572ECFB0[0];
  if (!qword_2572ECFB0[0])
  {
    v1 = type metadata accessor for AlbumID();
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for AlbumID, v1);
    atomic_store(result, qword_2572ECFB0);
  }
  return result;
}

uint64_t type metadata accessor for AlbumDatabase()
{
  return objc_opt_self();
}

uint64_t method lookup function for AlbumDatabase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AlbumDatabase.__allocating_init(database:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_243B6F1C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F2D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F3E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F500(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED060);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

char *sub_243B6F608(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F6F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F7E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B6F8D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_243B6D128(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_243B6F8F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_243B6F934(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_243B6F978(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_243B6F9B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_243B6FA04(_QWORD *a1)
{
  return sub_243B6F114(a1);
}

uint64_t sub_243B6FA18(uint64_t a1)
{
  return sub_243B6F130(a1);
}

uint64_t sub_243B6FA2C(uint64_t a1)
{
  return sub_243B6F0FC(a1);
}

uint64_t sub_243B6FA40(uint64_t a1)
{
  return sub_243B6B910(a1);
}

uint64_t sub_243B6FA54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED230);
  v3 = MEMORY[0x24BDAC7A8](v53);
  v52 = (uint64_t)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)v42 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)v42 - v7;
  v8 = type metadata accessor for ShuffleID();
  v49 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (!v11)
    return v12;
  v42[1] = v1;
  v55 = MEMORY[0x24BEE4AF8];
  sub_243B7CC80(0, v11, 0);
  result = sub_243BE4C6C(a1);
  v15 = result;
  v16 = 0;
  v17 = a1 + 64;
  v43 = a1 + 80;
  v44 = v11;
  v47 = v10;
  v48 = a1;
  v45 = v14;
  v46 = a1 + 64;
  v18 = (uint64_t)v50;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_26;
    v54 = v16;
    v22 = v53;
    v23 = *(int *)(v53 + 48);
    v24 = *(_QWORD *)(a1 + 48);
    v25 = sub_243BFD280();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = v24 + *(_QWORD *)(v26 + 72) * v15;
    v28 = a1;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v29(v18, v27, v25);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v15);
    *(_QWORD *)(v18 + v23) = v30;
    v31 = (uint64_t)v51;
    v29((uint64_t)v51, v18, v25);
    *(_QWORD *)(v31 + *(int *)(v22 + 48)) = v30;
    v32 = v52;
    sub_243B6F9B4(v31, v52, &qword_2572ED230);
    swift_bridgeObjectRetain_n();
    sub_243B6F978(v18, &qword_2572ED230);
    v33 = *(int *)(v22 + 48);
    v34 = (uint64_t)v47;
    sub_243B70978(*(_QWORD *)(v32 + v33), (uint64_t)v47);
    sub_243B6F978(v32, &qword_2572ED230);
    v12 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CC80(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = v55;
    }
    v36 = *(_QWORD *)(v12 + 16);
    v35 = *(_QWORD *)(v12 + 24);
    a1 = v48;
    if (v36 >= v35 >> 1)
    {
      sub_243B7CC80(v35 > 1, v36 + 1, 1);
      v12 = v55;
    }
    *(_QWORD *)(v12 + 16) = v36 + 1;
    result = sub_243B6F934(v34, v12+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v36, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
    v19 = 1 << *(_BYTE *)(a1 + 32);
    if (v15 >= v19)
      goto LABEL_27;
    v17 = v46;
    v37 = *(_QWORD *)(v46 + 8 * v21);
    if ((v37 & (1 << v15)) == 0)
      goto LABEL_28;
    LODWORD(v14) = v45;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v45)
      goto LABEL_29;
    v38 = v37 & (-2 << (v15 & 0x3F));
    if (v38)
    {
      v19 = __clz(__rbit64(v38)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v20 = v44;
    }
    else
    {
      v39 = v21 + 1;
      v40 = (unint64_t)(v19 + 63) >> 6;
      v20 = v44;
      if (v21 + 1 < v40)
      {
        v41 = *(_QWORD *)(v46 + 8 * v39);
        if (v41)
        {
LABEL_22:
          v19 = __clz(__rbit64(v41)) + (v39 << 6);
        }
        else
        {
          while (v40 - 2 != v21)
          {
            v41 = *(_QWORD *)(v43 + 8 * v21++);
            if (v41)
            {
              v39 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v16 = v54 + 1;
    v15 = v19;
    if (v54 + 1 == v20)
      return v12;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t GalleryDatabase.database.getter()
{
  return swift_retain();
}

uint64_t GalleryDatabase.__allocating_init(database:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t GalleryDatabase.init(database:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t GalleryDatabase.insert(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6FE70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B6FEC0()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B70198);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B6FF30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  Swift::String v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD v18[5];
  uint64_t v19;

  v3 = *a1;
  v19 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_243BFFAC0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v5 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_243BFFB50;
  v9 = v8 + v7;
  v10 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a2, v10);
  swift_storeEnumTagMultiPayload();
  v11 = (int *)type metadata accessor for ShuffleID();
  *(_BYTE *)(v9 + v6) = *(_BYTE *)(a2 + v11[6]);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(v9 + 2 * v6) = *(_BYTE *)(a2 + v11[7]);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(v9 + 3 * v6) = *(_BYTE *)(a2 + v11[8]);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(inited + 32) = v8;
  v12._countAndFlagsBits = 0xD00000000000008ALL;
  v12._object = (void *)0x8000000243C06680;
  DatabaseConnection.insert(sql:bindings:)(v12, (Swift::OpaquePointer)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D8);
  result = swift_arrayDestroy();
  if (!v14)
  {
    v19 = v3;
    v15 = *(_QWORD *)(a2 + v11[5]);
    MEMORY[0x24BDAC7A8](result);
    v18[2] = a2;
    swift_bridgeObjectRetain();
    v16 = sub_243B9A86C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_243B72948, (uint64_t)v18, v15);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x8000000243C06710;
    v17._countAndFlagsBits = 0xD000000000000075;
    DatabaseConnection.insert(sql:bindings:)(v17, (Swift::OpaquePointer)v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_243B70198(uint64_t *a1)
{
  uint64_t v1;

  return sub_243B6FF30(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B701B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v6 = *a1;
  v5 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v7 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_243BFFAD0;
  v11 = (char *)(v10 + v9);
  *(_QWORD *)v11 = v6;
  *((_QWORD *)v11 + 1) = v5;
  swift_storeEnumTagMultiPayload();
  v12 = sub_243BFD280();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(&v11[v8], a2, v12);
  swift_storeEnumTagMultiPayload();
  *a3 = v10;
  return swift_bridgeObjectRetain();
}

uint64_t GalleryDatabase.queryList()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B702BC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  return swift_task_switch();
}

uint64_t sub_243B702D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  Swift::String v4;
  void *v5;
  void *v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;
  sqlite3_stmt *v14;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v3 = *(sqlite3_stmt **)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v3)
  {
    sub_243B72E90();
    v3 = *(sqlite3_stmt **)(v1 + v2);
    if (!v3)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v11 = 0;
      goto LABEL_9;
    }
  }
  v14 = v3;
  v4._countAndFlagsBits = 0x6E69676562;
  v4._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v4);
  v6 = v5;
  if (v5)
  {
LABEL_5:
    v14 = v3;
    v9._countAndFlagsBits = 0x6B6361626C6C6F72;
    v9._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v9);
    if (v10)
    {

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_9:
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = v3;
  sub_243B70440(&v14, &v13);
  v14 = v3;
  v7._countAndFlagsBits = 0x74696D6D6F63;
  v7._object = (void *)0xE600000000000000;
  DatabaseConnection.execute(sql:)(v7);
  if (v8)
  {
    v6 = v8;
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

void sub_243B70440(sqlite3_stmt **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t *v26;
  sqlite3_stmt *v27;

  v5 = type metadata accessor for ShuffleID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v27 = *a1;
  v12 = sub_243B81BB0();
  if (v2)
    return;
  v13 = v12;
  sub_243B8693C(v12);
  v14 = sqlite3_step(v13);
  if (v14 == 100)
  {
    v26 = a2;
    v15 = MEMORY[0x24BEE4AF8];
    do
    {
      v27 = v13;
      sub_243B706FC(&v27, (uint64_t)v11);
      sub_243B6F8F0((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_243B6E164(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
        v15 = sub_243B6E164(v16 > 1, v17 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v17 + 1;
      sub_243B6F934((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      sub_243B7290C((uint64_t)v11);
      v18 = sqlite3_step(v13);
    }
    while (v18 == 100);
    v19 = v18;
    a2 = v26;
    if (v18 != 101)
      goto LABEL_13;
LABEL_11:
    sub_243B86B4C(v13);
    v20 = sub_243B725E8(v15);
    swift_bridgeObjectRelease();
    v21 = sub_243B6FA54(v20);
    swift_bridgeObjectRelease();
    *a2 = v21;
    return;
  }
  v19 = v14;
  v15 = MEMORY[0x24BEE4AF8];
  if (v14 == 101)
    goto LABEL_11;
LABEL_13:
  swift_bridgeObjectRelease();
  if (sqlite3_errstr(v19))
  {
    v22 = sub_243BFD868();
    v24 = v23;
  }
  else
  {
    v24 = 0xE300000000000000;
    v22 = 4271950;
  }
  sub_243B6DB18();
  swift_allocError();
  *v25 = v19 | 0xA000000000000000;
  v25[1] = v22;
  v25[2] = v24;
  swift_willThrow();
  sub_243B86B4C(v13);
}

void sub_243B706FC(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_stmt *v22;

  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v22 = *a1;
  DatabaseRow.readUUID(column:)(0);
  if (!v2)
  {
    if (sqlite3_column_type(v9, 1) == 5 || !sqlite3_column_text(v9, 1))
    {
      v13 = MEMORY[0x24BEE4B08];
    }
    else
    {
      v10 = sub_243BFD874();
      v21 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED068);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_243BFFAC0;
      *(_QWORD *)(inited + 32) = v10;
      *(_QWORD *)(inited + 40) = v21;
      v13 = sub_243B765D0(inited);
      swift_setDeallocating();
      swift_arrayDestroy();
    }
    v14 = 2;
    if (sqlite3_column_type(v9, 2) == 5 || (v15 = sqlite3_column_int(v9, 2), v14 = 3, sqlite3_column_type(v9, 3) == 5))
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v16 = v14;
    }
    else
    {
      v17 = sqlite3_column_int(v9, 3);
      if (sqlite3_column_type(v9, 4) != 5)
      {
        v18 = sqlite3_column_int(v9, 4) == 1;
        (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
        v19 = (int *)type metadata accessor for ShuffleID();
        *(_QWORD *)(a2 + v19[5]) = v13;
        *(_BYTE *)(a2 + v19[6]) = v15 == 1;
        *(_BYTE *)(a2 + v19[7]) = v17 == 1;
        *(_BYTE *)(a2 + v19[8]) = v18;
        return;
      }
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v16 = 4;
    }
    *(_BYTE *)(v16 + 4) = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_243B70978@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = sub_243BFD280();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ShuffleID();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v27 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v31 = a2;
    v17 = v5;
    v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v27 = v14;
    sub_243B6F8F0(v18, (uint64_t)&v27 - v13, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
    v28 = v7;
    v29 = v17;
    v19 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v30 = v4;
    v19(v7, v15, v4);
    v32 = MEMORY[0x24BEE4AF8];
    v20 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_243B6F8F0(v18, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      v21 = *(_QWORD *)&v11[v8[5]];
      swift_bridgeObjectRetain();
      sub_243B7290C((uint64_t)v11);
      sub_243B7C250(v21);
      v18 += v20;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v22 = sub_243B91EF4(v32);
    swift_bridgeObjectRelease();
    v23 = v15[v8[6]];
    v24 = v15[v8[7]];
    v25 = v15[v8[8]];
    sub_243B7290C((uint64_t)v15);
    v26 = v31;
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v28, v30);
    *(_QWORD *)(v26 + v8[5]) = v22;
    *(_BYTE *)(v26 + v8[6]) = v23;
    *(_BYTE *)(v26 + v8[7]) = v24;
    *(_BYTE *)(v26 + v8[8]) = v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t GalleryDatabase.queryByDay(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DatabaseBinding();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B70C24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[3];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v7 = *(_QWORD *)(v3 + 72);
  v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAD0;
  v10 = v9 + v8;
  v11 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9 + v8, v6, v11);
  swift_storeEnumTagMultiPayload();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v12(v10, 0, 1, v4);
  v13 = v10 + v7;
  *(_QWORD *)(v10 + v7) = 15;
  swift_storeEnumTagMultiPayload();
  v12(v10 + v7, 0, 1, v4);
  sub_243B50168(v10, v2, &qword_2572ECF80);
  sub_243B6F9B4(v2, v1, &qword_2572ECF80);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v15 = v14(v1, 1, v4);
  v16 = v0[11];
  if (v15 == 1)
  {
    sub_243B6F978(v16, &qword_2572ECF80);
    v17 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = v0[7];
    v18 = v0[8];
    sub_243B6F934(v16, v18, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v17 = MEMORY[0x24BEE4AF8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF1C(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    if (v21 >= v20 >> 1)
      v17 = sub_243B6DF1C(v20 > 1, v21 + 1, 1, v17);
    v22 = v0[7];
    *(_QWORD *)(v17 + 16) = v21 + 1;
    sub_243B6F934(v22, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v24 = v0[11];
  v23 = v0[12];
  v25 = v0[5];
  sub_243B50168(v13, v23, &qword_2572ECF80);
  sub_243B6F9B4(v23, v24, &qword_2572ECF80);
  v26 = v14(v24, 1, v25);
  v27 = v0[11];
  if (v26 == 1)
  {
    sub_243B6F978(v27, &qword_2572ECF80);
  }
  else
  {
    v29 = v0[7];
    v28 = v0[8];
    sub_243B6F934(v27, v28, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v28, v29, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF1C(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v31 = *(_QWORD *)(v17 + 16);
    v30 = *(_QWORD *)(v17 + 24);
    if (v31 >= v30 >> 1)
      v17 = sub_243B6DF1C(v30 > 1, v31 + 1, 1, v17);
    v32 = v0[7];
    *(_QWORD *)(v17 + 16) = v31 + 1;
    sub_243B6F934(v32, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v31, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v0[16] = v17;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t sub_243B71018()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0[15];
  v2 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_243B74808(v4, v3, v1, v2, (uint64_t)sub_243B6C7AC, 0);
  v6 = sub_243B6AB24(v5);
  swift_bridgeObjectRelease();
  v8 = sub_243B6EA10(v6);
  swift_bridgeObjectRelease();
  v0[17] = sub_243B6B084(v8);
  v0[18] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_243B71110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_243B721C8(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  v2 = sub_243B6E718(v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t GalleryDatabase.query(id:day:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DatabaseBinding();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B7125C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = v0[10];
  v3 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v5 = v0[2];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_243BFFAF0;
  v9 = v8 + v7;
  v10 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v5, v10);
  swift_storeEnumTagMultiPayload();
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v11(v9, 0, 1, v3);
  v12 = v6;
  *(_QWORD *)(v9 + v6) = v4;
  swift_storeEnumTagMultiPayload();
  v11(v9 + v6, 0, 1, v3);
  *(_QWORD *)(v9 + 2 * v6) = 15;
  swift_storeEnumTagMultiPayload();
  v11(v9 + 2 * v6, 0, 1, v3);
  v13 = MEMORY[0x24BEE4AF8];
  v14 = 3;
  v15 = v9;
  do
  {
    v17 = v0[11];
    v16 = v0[12];
    v18 = v0[5];
    sub_243B50168(v15, v16, &qword_2572ECF80);
    sub_243B6F9B4(v16, v17, &qword_2572ECF80);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v17, 1, v18);
    v20 = v0[11];
    if (v19 == 1)
    {
      sub_243B6F978(v20, &qword_2572ECF80);
    }
    else
    {
      v22 = v0[7];
      v21 = v0[8];
      sub_243B6F934(v20, v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      sub_243B6F934(v21, v22, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_243B6DF1C(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      v24 = *(_QWORD *)(v13 + 16);
      v23 = *(_QWORD *)(v13 + 24);
      if (v24 >= v23 >> 1)
        v13 = sub_243B6DF1C(v23 > 1, v24 + 1, 1, v13);
      v25 = v0[7];
      *(_QWORD *)(v13 + 16) = v24 + 1;
      sub_243B6F934(v25, v13+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v24, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    }
    v0[17] = v13;
    v15 += v12;
    --v14;
  }
  while (v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t GalleryDatabase.delete(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B715A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B715F4()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B7251C);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B71664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t GalleryDatabase.deleteAll()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B717CC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  return swift_task_switch();
}

uint64_t sub_243B717E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *v4;
  void *v5;
  sqlite3_stmt *v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t (*v12)(void);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection))
  {
    sub_243B72E90();
    if (!*(_QWORD *)(v1 + v2))
    {
      sub_243B6DAD4();
      swift_allocError();
      *v11 = 0;
LABEL_8:
      swift_willThrow();
      goto LABEL_9;
    }
  }
  v3._countAndFlagsBits = 0x6E69676562;
  v3._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v3);
  v5 = v4;
  if (!v4)
  {
    v6 = sub_243B81BB0();
    sub_243B86334(MEMORY[0x24BEE4AF8], v6);
    sub_243B86B4C(v6);
    v7._countAndFlagsBits = 0x74696D6D6F63;
    v7._object = (void *)0xE600000000000000;
    DatabaseConnection.execute(sql:)(v7);
    v5 = v8;
    if (!v8)
    {
      v12 = *(uint64_t (**)(void))(v0 + 8);
      return v12();
    }
  }
  v9._countAndFlagsBits = 0x6B6361626C6C6F72;
  v9._object = (void *)0xE800000000000000;
  DatabaseConnection.execute(sql:)(v9);
  if (!v10)
    goto LABEL_8;

LABEL_9:
  v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t GalleryDatabase.relate(photos:to:on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243B7198C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B719E4()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B72534);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B71A54(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v5;
  _QWORD v7[6];

  v7[5] = *a1;
  v7[2] = a3;
  v7[3] = a4;
  v4 = sub_243B9A750((void (*)(uint64_t *__return_ptr, uint64_t))sub_243B6F8D4, (uint64_t)v7, a2);
  v5._object = (void *)0x8000000243C06540;
  v5._countAndFlagsBits = 0xD00000000000007CLL;
  DatabaseConnection.insert(sql:bindings:)(v5, (Swift::OpaquePointer)v4);
  return swift_bridgeObjectRelease();
}

uint64_t GalleryDatabase.clearPhotos(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B71AEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B71B3C()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B72550);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B71BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t GalleryDatabase.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t GalleryDatabase.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B71D3C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B71D58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B71DA8()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B729A0);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B71E18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6FA00;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_243B71E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B6FA00;
  return GalleryDatabase.query(id:day:)(a1, a2);
}

uint64_t sub_243B71ED8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6D69C;
  return GalleryDatabase.queryByDay(id:)(a1);
}

uint64_t sub_243B71F28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B71F44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B71F94()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B7298C);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B72004(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B72020()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B72070()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B72978);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B720E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return swift_task_switch();
}

uint64_t sub_243B72100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B72158()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B72964);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B721C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0C0);
  v2 = MEMORY[0x24BDAC7A8](v52);
  v49 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v51 = (uint64_t)&v44 - v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v50 = (uint64_t)&v44 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v44 - v9;
  v10 = (_QWORD *)MEMORY[0x24BEE4B00];
  v56 = (_QWORD *)MEMORY[0x24BEE4B00];
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (uint64_t)v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v8 + 72);
  v48 = v13;
  v46 = v12 | 7;
  v47 = v15 + v13;
  v45 = xmmword_243BFFAC0;
  v16 = v55;
  while (1)
  {
    v53 = v14;
    v54 = v11;
    sub_243B50168(v14, v16, &qword_2572ED0C0);
    v19 = v52;
    v20 = *(int *)(v52 + 48);
    v21 = v50;
    sub_243B6F8F0(v16, v50, type metadata accessor for StoredPhoto);
    v22 = *(_QWORD *)(v16 + v20);
    *(_QWORD *)(v21 + v20) = v22;
    v23 = *(int *)(v19 + 48);
    v24 = v21;
    v25 = v51;
    sub_243B6F934(v24, v51, type metadata accessor for StoredPhoto);
    *(_QWORD *)(v25 + v23) = v22;
    sub_243B6F978(v25, &qword_2572ED0C0);
    v27 = sub_243B7CED0(v22);
    v28 = v10[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v10[3] < v30)
    {
      sub_243BA0DB0(v30, 1);
      v10 = v56;
      v32 = sub_243B7CED0(v22);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_19;
      v27 = v32;
    }
    if ((v31 & 1) != 0)
    {
      v34 = v10[7];
      sub_243B6F9B4(v55, v49, &qword_2572ED0C0);
      v35 = *(_QWORD *)(v34 + 8 * v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v34 + 8 * v27) = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = sub_243B6DCE8(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v27) = v35;
      }
      v38 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      if (v38 >= v37 >> 1)
      {
        v35 = sub_243B6DCE8(v37 > 1, v38 + 1, 1, v35);
        *(_QWORD *)(v34 + 8 * v27) = v35;
      }
      v18 = v53;
      v17 = v54;
      *(_QWORD *)(v35 + 16) = v38 + 1;
      sub_243B6F9B4(v49, v35 + v48 + v38 * v15, &qword_2572ED0C0);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0B8);
      v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v45;
      sub_243B6F9B4(v55, v39 + v48, &qword_2572ED0C0);
      v10[(v27 >> 6) + 8] |= 1 << v27;
      *(_QWORD *)(v10[6] + 8 * v27) = v22;
      *(_QWORD *)(v10[7] + 8 * v27) = v39;
      v40 = v10[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_18;
      v10[2] = v42;
      v18 = v53;
      v17 = v54;
    }
    v14 = v18 + v15;
    v11 = v17 - 1;
    if (!v11)
      return (uint64_t)v10;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243B7251C(uint64_t a1)
{
  uint64_t v1;

  return sub_243B71664(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B72534(_QWORD *a1)
{
  uint64_t *v1;

  return sub_243B71A54(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_243B72550(uint64_t a1)
{
  uint64_t v1;

  return sub_243B71BAC(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_243B7256C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572ED190[0];
  if (!qword_2572ED190[0])
  {
    v1 = type metadata accessor for ShuffleID();
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for ShuffleID, v1);
    atomic_store(result, qword_2572ED190);
  }
  return result;
}

uint64_t type metadata accessor for GalleryDatabase()
{
  return objc_opt_self();
}

uint64_t method lookup function for GalleryDatabase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GalleryDatabase.__allocating_init(database:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_243B725E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v2 = sub_243BFD280();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ShuffleID();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v44 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (uint64_t)&v36 - v10;
  v11 = (_QWORD *)MEMORY[0x24BEE4B00];
  v46 = (_QWORD *)MEMORY[0x24BEE4B00];
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return (uint64_t)v11;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = a1 + v14;
  v16 = *(_QWORD *)(v9 + 72);
  v43 = v14;
  v38 = v13 | 7;
  v39 = v16 + v14;
  v37 = xmmword_243BFFAC0;
  v41 = v3;
  v42 = v2;
  v40 = v5;
  while (1)
  {
    v17 = v45;
    sub_243B6F8F0(v15, v45, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v17, v2);
    v19 = sub_243B7CF78((uint64_t)v5);
    v20 = v11[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v11[3] < v22)
    {
      sub_243BA1534(v22, 1);
      v11 = v46;
      v24 = sub_243B7CF78((uint64_t)v5);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_19;
      v19 = v24;
    }
    if ((v23 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v11 = v46;
      v26 = v46[7];
      sub_243B6F934(v45, v44, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      v27 = *(_QWORD *)(v26 + 8 * v19);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v26 + 8 * v19) = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = sub_243B6E164(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
        *(_QWORD *)(v26 + 8 * v19) = v27;
      }
      v30 = *(_QWORD *)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      if (v30 >= v29 >> 1)
      {
        v27 = sub_243B6E164(v29 > 1, v30 + 1, 1, v27);
        *(_QWORD *)(v26 + 8 * v19) = v27;
      }
      *(_QWORD *)(v27 + 16) = v30 + 1;
      sub_243B6F934(v44, v27 + v43 + v30 * v16, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      v3 = v41;
      v2 = v42;
      v5 = v40;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0C8);
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = v37;
      sub_243B6F934(v45, v31 + v43, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      v11[(v19 >> 6) + 8] |= 1 << v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v11[6] + *(_QWORD *)(v3 + 72) * v19, v5, v2);
      *(_QWORD *)(v11[7] + 8 * v19) = v31;
      v32 = v11[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_18;
      v11[2] = v34;
    }
    v15 += v16;
    if (!--v12)
      return (uint64_t)v11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243B7290C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShuffleID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243B72948@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_243B701B0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_243B72964(_QWORD *a1)
{
  return sub_243B72534(a1);
}

uint64_t sub_243B72978(uint64_t a1)
{
  return sub_243B72550(a1);
}

uint64_t sub_243B7298C(uint64_t a1)
{
  return sub_243B7251C(a1);
}

uint64_t sub_243B729A0(uint64_t *a1)
{
  return sub_243B70198(a1);
}

uint64_t sub_243B729B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B729D0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_243B72A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_243B7341C(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B72AA0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PhotosFaceIDDatabase.insert(storedPhotos:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243B72AF0()
{
  _QWORD *v0;

  v0[6] = (*(uint64_t (**)(_QWORD))(v0[4] + 24))(v0[3]);
  return swift_task_switch();
}

uint64_t sub_243B72B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_243B7341C(v1, v2);
  *(_QWORD *)(v0 + 56) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B72BC0()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B72BF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B72C10()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_243B72C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_243B7341C(v1, v2);
  *(_QWORD *)(v0 + 40) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_243B72CE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_243B72CF4()
{
  sub_243BFE1A4();
  sub_243BFE1B0();
  return sub_243BFE1E0();
}

uint64_t sub_243B72D38()
{
  return sub_243BFE1B0();
}

uint64_t sub_243B72D60()
{
  sub_243BFE1A4();
  sub_243BFE1B0();
  return sub_243BFE1E0();
}

uint64_t PhotosFaceDatabase.__allocating_init(location:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection) = 0;
  sub_243B73964(a1, v2 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location);
  return v2;
}

uint64_t PhotosFaceDatabase.init(location:)(uint64_t a1)
{
  uint64_t v1;

  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection) = 0;
  sub_243B73964(a1, v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location);
  return v1;
}

void sub_243B72E50()
{
  sub_243B72E90();
}

void sub_243B72E90()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  sqlite3 *v20;
  void *v21;
  void *v22;
  sqlite3 *v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  void *v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  sqlite3 *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  sqlite3 *v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v0;
  v3 = sub_243BFD190();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DatabaseConnection.Location();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection))
  {
    sub_243B6DAD4();
    swift_allocError();
    *v11 = 1;
    swift_willThrow();
    return;
  }
  v41 = v1;
  if (qword_2543CE3C8 != -1)
    swift_once();
  v12 = sub_243BFD598();
  v13 = __swift_project_value_buffer(v12, (uint64_t)qword_2543CE3A8);
  swift_retain_n();
  v14 = sub_243BFD580();
  v40 = sub_243BFDCB8();
  if (os_log_type_enabled(v14, (os_log_type_t)v40))
  {
    v39 = v13;
    v15 = (uint8_t *)swift_slowAlloc();
    v38 = (sqlite3 *)swift_slowAlloc();
    v43 = (uint64_t)v38;
    *(_DWORD *)v15 = 136315138;
    sub_243B73FE8(v0 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location, (uint64_t)v9);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v9, 1, v16) == 1)
    {
      v17 = 0xE900000000000079;
      v18 = 0x726F6D654D2D6E49;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
      sub_243B7402C();
      v18 = sub_243BFE0A8();
      v17 = v19;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    v42 = sub_243B739A8(v18, v17, &v43);
    sub_243BFDD54();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_243B4B000, v14, (os_log_type_t)v40, "Attempting to connect to db at %s", v15, 0xCu);
    v20 = v38;
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v20, -1, -1);
    MEMORY[0x249502C5C](v15, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v21 = v41;
  static DatabaseConnection.open(location:)(v2 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location, (sqlite3 **)&v43);
  v22 = v21;
  if (!v21)
  {
    v23 = (sqlite3 *)v43;
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v25 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    DatabaseConnection.migrate(bundle:migrations:)((NSBundle)v25, (Swift::OpaquePointer)&unk_25144EF58);
    if (!v26)
    {
      swift_arrayDestroy();

      *(_QWORD *)(v2 + v10) = v23;
      v29 = sub_243BFD580();
      v35 = sub_243BFDCB8();
      if (os_log_type_enabled(v29, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v36 = 134217984;
        v43 = 15;
        sub_243BFDD54();
        _os_log_impl(&dword_243B4B000, v29, v35, "DB Initialized. Photo version: %ld", v36, 0xCu);
        MEMORY[0x249502C5C](v36, -1, -1);
      }
      goto LABEL_17;
    }
    swift_arrayDestroy();

    v22 = v26;
  }
  v27 = v22;
  v28 = v22;
  v29 = sub_243BFD580();
  v30 = sub_243BFDCA0();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v31 = 138412290;
    v33 = v22;
    v34 = (sqlite3 *)_swift_stdlib_bridgeErrorToNSError();
    v43 = (uint64_t)v34;
    sub_243BFDD54();
    *v32 = v34;

    _os_log_impl(&dword_243B4B000, v29, v30, "Error connecting to DB: %@", v31, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED240);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v32, -1, -1);
    MEMORY[0x249502C5C](v31, -1, -1);

    return;
  }

LABEL_17:
}

uint64_t sub_243B7341C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  void *v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  _BYTE *v15;
  uint64_t v16;

  v4 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (v5)
    goto LABEL_2;
  sub_243B72E90();
  if (!v2)
  {
    v5 = *(_QWORD *)(a1 + v4);
    if (!v5)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v15 = 0;
LABEL_9:
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_2:
    v16 = v5;
    v6._countAndFlagsBits = 0x6E69676562;
    v6._object = (void *)0xE500000000000000;
    DatabaseConnection.execute(sql:)(v6);
    v8 = v7;
    if (!v7)
    {
      v16 = v5;
      sub_243B7A008(&v16, a2);
      v16 = v5;
      v9._countAndFlagsBits = 0x74696D6D6F63;
      v9._object = (void *)0xE600000000000000;
      DatabaseConnection.execute(sql:)(v9);
      v8 = v10;
      if (!v10)
        return swift_bridgeObjectRelease();
    }
    v16 = v5;
    v11._countAndFlagsBits = 0x6B6361626C6C6F72;
    v11._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v11);
    if (v12)
    {

      return swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  return swift_bridgeObjectRelease();
}

unint64_t *sub_243B73568(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  void *v10;
  Swift::String v11;
  void *v12;
  unint64_t *v13;
  Swift::String v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  unint64_t *v19;

  v6 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v7 = *(unint64_t *)((char *)a1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v7)
  {
    v13 = a1;
    sub_243B72E90();
    if (v4)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v13;
    }
    v7 = *(unint64_t *)((char *)v13 + v6);
    if (!v7)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v16 = 0;
LABEL_10:
      swift_willThrow();
      goto LABEL_11;
    }
  }
  v19 = (unint64_t *)v7;
  v8._countAndFlagsBits = 0x6E69676562;
  v8._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v8);
  v10 = v9;
  if (!v9)
  {
    v18 = v7;
    sub_243B7B878(&v18, a4, (unint64_t *)&v19);
    v18 = v7;
    v11._countAndFlagsBits = 0x74696D6D6F63;
    v11._object = (void *)0xE600000000000000;
    DatabaseConnection.execute(sql:)(v11);
    v10 = v12;
    if (!v12)
    {
      swift_bridgeObjectRelease();
      v13 = v19;
      swift_bridgeObjectRelease();
      return v13;
    }
    swift_bridgeObjectRelease();
  }
  v19 = (unint64_t *)v7;
  v13 = (unint64_t *)&v19;
  v14._countAndFlagsBits = 0x6B6361626C6C6F72;
  v14._object = (void *)0xE800000000000000;
  DatabaseConnection.execute(sql:)(v14);
  if (!v15)
    goto LABEL_10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

void sub_243B73714(void (*a1)(uint64_t *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  void *v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v8 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (v9)
    goto LABEL_2;
  sub_243B72E90();
  if (v4)
    return;
  v9 = *(_QWORD *)(v3 + v8);
  if (v9)
  {
LABEL_2:
    v18 = v9;
    v10._countAndFlagsBits = 0x6E69676562;
    v10._object = (void *)0xE500000000000000;
    DatabaseConnection.execute(sql:)(v10);
    v12 = v11;
    if (!v11)
    {
      v18 = v9;
      a1(&v18);
      v18 = v9;
      v13._countAndFlagsBits = 0x74696D6D6F63;
      v13._object = (void *)0xE600000000000000;
      DatabaseConnection.execute(sql:)(v13);
      v12 = v14;
      if (!v14)
        return;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a3, a2);
    }
    v18 = v9;
    v15._countAndFlagsBits = 0x6B6361626C6C6F72;
    v15._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v15);
    if (v16)
    {

      return;
    }
  }
  else
  {
    sub_243B6DAD4();
    swift_allocError();
    *v17 = 0;
  }
  swift_willThrow();
}

uint64_t PhotosFaceDatabase.deinit()
{
  uint64_t v0;

  sub_243B74074(v0 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PhotosFaceDatabase.__deallocating_deinit()
{
  uint64_t v0;

  sub_243B74074(v0 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_location);
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t PhotosFaceDatabase.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_243B738E4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_243B738F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_243B4D7A0;
  v8[4] = a3;
  v8[5] = v3;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243B73964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseConnection.Location();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_243B739A8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_243B73A78(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_243B747CC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_243B747CC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_243B73A78(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_243BFDD60();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_243B73C30(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_243BFDEB0();
  if (!v8)
  {
    sub_243BFDF64();
    __break(1u);
LABEL_17:
    result = sub_243BFDFE8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_243B73C30(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_243B73CC4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_243B73E9C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_243B73E9C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_243B73CC4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_243B73E38(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_243BFDE50();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_243BFDF64();
      __break(1u);
LABEL_10:
      v2 = sub_243BFD880();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_243BFDFE8();
    __break(1u);
LABEL_14:
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_243B73E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED2B0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_243B73E9C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED2B0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B73FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseConnection.Location();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_243B7402C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2543CDE60;
  if (!qword_2543CDE60)
  {
    v1 = sub_243BFD190();
    result = MEMORY[0x249502B6C](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&qword_2543CDE60);
  }
  return result;
}

uint64_t sub_243B74074(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DatabaseConnection.Location();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243B740B0()
{
  return type metadata accessor for PhotosFaceDatabase();
}

uint64_t type metadata accessor for PhotosFaceDatabase()
{
  uint64_t result;

  result = qword_2543CDE80;
  if (!qword_2543CDE80)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_243B740F4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DatabaseConnection.Location();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PhotosFaceDatabase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhotosFaceDatabase.__allocating_init(location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PhotosFaceDatabase.activate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PhotosFaceDatabase.connect()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PhotosFaceDatabase.transaction<A>(block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.database.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.insert(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B6A428;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.queryList()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B74A58;
  return v7(a1, a2);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.query(id:day:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 48) + *(_QWORD *)(a4 + 48));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_243B74A58;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.queryByDay(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 56) + *(_QWORD *)(a3 + 56));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B743B8;
  return v9(a1, a2, a3);
}

uint64_t sub_243B743B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.delete(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 64) + *(_QWORD *)(a3 + 64));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B6A428;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.clearPhotos(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 72) + *(_QWORD *)(a3 + 72));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B4D7A0;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.relate(photos:to:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 80) + *(_QWORD *)(a5 + 80));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_243B6A428;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of PhotosFaceIDDatabase.insert(storedPhotos:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 88) + *(_QWORD *)(a3 + 88));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B6A428;
  return v9(a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for PhotosFaceDatabase.Failure(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotosFaceDatabase.Failure(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243B746DC + 4 * byte_243BFFBD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243B74710 + 4 * byte_243BFFBD0[v4]))();
}

uint64_t sub_243B74710(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B74718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243B74720);
  return result;
}

uint64_t sub_243B7472C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243B74734);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243B74738(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B74740(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_243B7474C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PhotosFaceDatabase.Failure()
{
  return &type metadata for PhotosFaceDatabase.Failure;
}

unint64_t sub_243B74768()
{
  unint64_t result;

  result = qword_2572ED290[0];
  if (!qword_2572ED290[0])
  {
    result = MEMORY[0x249502B6C](&unk_243BFFCB0, &type metadata for PhotosFaceDatabase.Failure);
    atomic_store(result, qword_2572ED290);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_243B747CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_243B74808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_243B74840(a1, a2, a3, a4, a5, a6, sub_243B85AE0);
}

uint64_t sub_243B74824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_243B74840(a1, a2, a3, a4, a5, a6, sub_243B85B0C);
}

uint64_t sub_243B74840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, sqlite3_stmt *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  void *v15;
  sqlite3_stmt *v17;
  _BYTE *v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;

  v10 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection))
  {
    v11 = a5;
    v12 = a6;
    goto LABEL_3;
  }
  v11 = a5;
  v12 = a6;
  sub_243B72E90();
  if (v7)
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    return a3;
  }
  if (!*(_QWORD *)(a1 + v10))
  {
    sub_243B6DAD4();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();
    goto LABEL_6;
  }
LABEL_3:
  v13._countAndFlagsBits = 0x6E69676562;
  v13._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v13);
  v15 = v14;
  if (!v14)
  {
    v17 = sub_243B81BB0();
    a3 = a7(a4, v17, v11, v12);
    sub_243B86B4C(v17);
    v19._countAndFlagsBits = 0x74696D6D6F63;
    v19._object = (void *)0xE600000000000000;
    DatabaseConnection.execute(sql:)(v19);
    v15 = v20;
    if (!v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a3;
    }
    swift_bridgeObjectRelease();
  }
  v21._countAndFlagsBits = 0x6B6361626C6C6F72;
  v21._object = (void *)0xE800000000000000;
  DatabaseConnection.execute(sql:)(v21);
  if (!v22)
  {
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t ShuffleDatabase.database.getter()
{
  return swift_retain();
}

uint64_t ShuffleDatabase.__allocating_init(database:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t ShuffleDatabase.init(database:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t ShuffleDatabase.insert(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B74AB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B74B08()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B74DE0);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B74B78(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  Swift::String v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD v18[5];
  uint64_t v19;

  v3 = *a1;
  v19 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_243BFFAC0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v5 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_243BFFB50;
  v9 = v8 + v7;
  v10 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a2, v10);
  swift_storeEnumTagMultiPayload();
  v11 = (int *)type metadata accessor for ShuffleID();
  *(_BYTE *)(v9 + v6) = *(_BYTE *)(a2 + v11[6]);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(v9 + 2 * v6) = *(_BYTE *)(a2 + v11[7]);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(v9 + 3 * v6) = *(_BYTE *)(a2 + v11[8]);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(inited + 32) = v8;
  v12._countAndFlagsBits = 0xD00000000000008ALL;
  v12._object = (void *)0x8000000243C07140;
  DatabaseConnection.insert(sql:bindings:)(v12, (Swift::OpaquePointer)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D8);
  result = swift_arrayDestroy();
  if (!v14)
  {
    v19 = v3;
    v15 = *(_QWORD *)(a2 + v11[5]);
    MEMORY[0x24BDAC7A8](result);
    v18[2] = a2;
    swift_bridgeObjectRetain();
    v16 = sub_243B9A86C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_243B72948, (uint64_t)v18, v15);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x8000000243C071D0;
    v17._countAndFlagsBits = 0xD000000000000075;
    DatabaseConnection.insert(sql:bindings:)(v17, (Swift::OpaquePointer)v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_243B74DE0(uint64_t *a1)
{
  uint64_t v1;

  return sub_243B74B78(a1, *(_QWORD *)(v1 + 16));
}

uint64_t ShuffleDatabase.queryList()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B74E10()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  return swift_task_switch();
}

uint64_t sub_243B74E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  Swift::String v4;
  void *v5;
  void *v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;
  sqlite3_stmt *v14;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v3 = *(sqlite3_stmt **)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v3)
  {
    sub_243B72E90();
    v3 = *(sqlite3_stmt **)(v1 + v2);
    if (!v3)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v11 = 0;
      goto LABEL_9;
    }
  }
  v14 = v3;
  v4._countAndFlagsBits = 0x6E69676562;
  v4._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v4);
  v6 = v5;
  if (v5)
  {
LABEL_5:
    v14 = v3;
    v9._countAndFlagsBits = 0x6B6361626C6C6F72;
    v9._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v9);
    if (v10)
    {

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_9:
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = v3;
  sub_243B74F94(&v14, &v13);
  v14 = v3;
  v7._countAndFlagsBits = 0x74696D6D6F63;
  v7._object = (void *)0xE600000000000000;
  DatabaseConnection.execute(sql:)(v7);
  if (v8)
  {
    v6 = v8;
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

void sub_243B74F94(sqlite3_stmt **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t *v26;
  sqlite3_stmt *v27;

  v5 = type metadata accessor for ShuffleID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v27 = *a1;
  v12 = sub_243B81BB0();
  if (v2)
    return;
  v13 = v12;
  sub_243B8693C(v12);
  v14 = sqlite3_step(v13);
  if (v14 == 100)
  {
    v26 = a2;
    v15 = MEMORY[0x24BEE4AF8];
    do
    {
      v27 = v13;
      sub_243B706FC(&v27, (uint64_t)v11);
      sub_243B6F8F0((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_243B6E164(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
        v15 = sub_243B6E164(v16 > 1, v17 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v17 + 1;
      sub_243B6F934((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      sub_243B7290C((uint64_t)v11);
      v18 = sqlite3_step(v13);
    }
    while (v18 == 100);
    v19 = v18;
    a2 = v26;
    if (v18 != 101)
      goto LABEL_13;
LABEL_11:
    sub_243B86B4C(v13);
    v20 = sub_243B725E8(v15);
    swift_bridgeObjectRelease();
    v21 = sub_243B6FA54(v20);
    swift_bridgeObjectRelease();
    *a2 = v21;
    return;
  }
  v19 = v14;
  v15 = MEMORY[0x24BEE4AF8];
  if (v14 == 101)
    goto LABEL_11;
LABEL_13:
  swift_bridgeObjectRelease();
  if (sqlite3_errstr(v19))
  {
    v22 = sub_243BFD868();
    v24 = v23;
  }
  else
  {
    v24 = 0xE300000000000000;
    v22 = 4271950;
  }
  sub_243B6DB18();
  swift_allocError();
  *v25 = v19 | 0xA000000000000000;
  v25[1] = v22;
  v25[2] = v24;
  swift_willThrow();
  sub_243B86B4C(v13);
}

uint64_t ShuffleDatabase.queryByDay(id:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for DatabaseBinding();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B752FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[3];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v7 = *(_QWORD *)(v3 + 72);
  v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAD0;
  v10 = v9 + v8;
  v11 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9 + v8, v6, v11);
  swift_storeEnumTagMultiPayload();
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v12(v10, 0, 1, v4);
  v13 = v10 + v7;
  *(_QWORD *)(v10 + v7) = 15;
  swift_storeEnumTagMultiPayload();
  v12(v10 + v7, 0, 1, v4);
  sub_243B50168(v10, v2, &qword_2572ECF80);
  sub_243B6F9B4(v2, v1, &qword_2572ECF80);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v15 = v14(v1, 1, v4);
  v16 = v0[11];
  if (v15 == 1)
  {
    sub_243B6F978(v16, &qword_2572ECF80);
    v17 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = v0[7];
    v18 = v0[8];
    sub_243B6F934(v16, v18, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v18, v19, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v17 = MEMORY[0x24BEE4AF8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF1C(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    if (v21 >= v20 >> 1)
      v17 = sub_243B6DF1C(v20 > 1, v21 + 1, 1, v17);
    v22 = v0[7];
    *(_QWORD *)(v17 + 16) = v21 + 1;
    sub_243B6F934(v22, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v24 = v0[11];
  v23 = v0[12];
  v25 = v0[5];
  sub_243B50168(v13, v23, &qword_2572ECF80);
  sub_243B6F9B4(v23, v24, &qword_2572ECF80);
  v26 = v14(v24, 1, v25);
  v27 = v0[11];
  if (v26 == 1)
  {
    sub_243B6F978(v27, &qword_2572ECF80);
  }
  else
  {
    v29 = v0[7];
    v28 = v0[8];
    sub_243B6F934(v27, v28, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v28, v29, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_243B6DF1C(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    v31 = *(_QWORD *)(v17 + 16);
    v30 = *(_QWORD *)(v17 + 24);
    if (v31 >= v30 >> 1)
      v17 = sub_243B6DF1C(v30 > 1, v31 + 1, 1, v17);
    v32 = v0[7];
    *(_QWORD *)(v17 + 16) = v31 + 1;
    sub_243B6F934(v32, v17+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v31, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  v0[16] = v17;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t ShuffleDatabase.query(id:day:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for DatabaseBinding();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v3[9] = v5;
  v3[10] = *(_QWORD *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B757A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = v0[10];
  v3 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v5 = v0[2];
  v0[13] = *(_QWORD *)(v0[4] + 16);
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_243BFFAF0;
  v9 = v8 + v7;
  v10 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v5, v10);
  swift_storeEnumTagMultiPayload();
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v11(v9, 0, 1, v3);
  v12 = v6;
  *(_QWORD *)(v9 + v6) = v4;
  swift_storeEnumTagMultiPayload();
  v11(v9 + v6, 0, 1, v3);
  *(_QWORD *)(v9 + 2 * v6) = 15;
  swift_storeEnumTagMultiPayload();
  v11(v9 + 2 * v6, 0, 1, v3);
  v13 = MEMORY[0x24BEE4AF8];
  v14 = 3;
  v15 = v9;
  do
  {
    v17 = v0[11];
    v16 = v0[12];
    v18 = v0[5];
    sub_243B50168(v15, v16, &qword_2572ECF80);
    sub_243B6F9B4(v16, v17, &qword_2572ECF80);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v17, 1, v18);
    v20 = v0[11];
    if (v19 == 1)
    {
      sub_243B6F978(v20, &qword_2572ECF80);
    }
    else
    {
      v22 = v0[7];
      v21 = v0[8];
      sub_243B6F934(v20, v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      sub_243B6F934(v21, v22, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_243B6DF1C(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      v24 = *(_QWORD *)(v13 + 16);
      v23 = *(_QWORD *)(v13 + 24);
      if (v24 >= v23 >> 1)
        v13 = sub_243B6DF1C(v23 > 1, v24 + 1, 1, v13);
      v25 = v0[7];
      *(_QWORD *)(v13 + 16) = v24 + 1;
      sub_243B6F934(v25, v13+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v24, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    }
    v0[17] = v13;
    v15 += v12;
    --v14;
  }
  while (v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_task_switch();
}

uint64_t ShuffleDatabase.delete(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B75AE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B75B38()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76550);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B75BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t ShuffleDatabase.relate(photos:to:on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243B75D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B75D6C()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76568);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B75DDC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::String v5;
  _QWORD v7[6];

  v7[5] = *a1;
  v7[2] = a3;
  v7[3] = a4;
  v4 = sub_243B9A750((void (*)(uint64_t *__return_ptr, uint64_t))sub_243B6F8D4, (uint64_t)v7, a2);
  v5._object = (void *)0x8000000243C07000;
  v5._countAndFlagsBits = 0xD00000000000007CLL;
  DatabaseConnection.insert(sql:bindings:)(v5, (Swift::OpaquePointer)v4);
  return swift_bridgeObjectRelease();
}

uint64_t ShuffleDatabase.clearPhotos(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B75E74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B75EC4()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76584);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B75F34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_243BFFAC0;
  v7 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6 + v5, a2, v7);
  swift_storeEnumTagMultiPayload();
  v8 = sub_243B81BB0();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v8;
  sub_243B86334(v6, v8);
  sub_243B86B4C(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t ShuffleDatabase.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t ShuffleDatabase.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B760C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B760E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B76130()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B767AC);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B761A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6FA00;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_243B76200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B6FA00;
  return ShuffleDatabase.query(id:day:)(a1, a2);
}

uint64_t sub_243B76260(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6D69C;
  return ShuffleDatabase.queryByDay(id:)(a1);
}

uint64_t sub_243B762B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B762CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B7631C()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76798);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B7638C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_243B763A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v0[4] = *(_QWORD *)(v0[3] + 16);
  v2 = swift_task_alloc();
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch();
}

uint64_t sub_243B763F8()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76784);
  *(_QWORD *)(v0 + 48) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B76468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return swift_task_switch();
}

uint64_t sub_243B76488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t sub_243B764E0()
{
  uint64_t v0;

  sub_243B6D990((void (*)(uint64_t *))sub_243B76770);
  *(_QWORD *)(v0 + 64) = 0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B76550(uint64_t a1)
{
  uint64_t v1;

  return sub_243B75BA8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B76568(_QWORD *a1)
{
  uint64_t *v1;

  return sub_243B75DDC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_243B76584(uint64_t a1)
{
  uint64_t v1;

  return sub_243B75F34(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for ShuffleDatabase()
{
  return objc_opt_self();
}

uint64_t method lookup function for ShuffleDatabase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ShuffleDatabase.__allocating_init(database:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_243B765D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED388);
    v3 = sub_243BFDE20();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_243BFE1A4();
      swift_bridgeObjectRetain();
      sub_243BFD850();
      result = sub_243BFE1E0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_243BFE0F0(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_243BFE0F0();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_243B76770(_QWORD *a1)
{
  return sub_243B76568(a1);
}

uint64_t sub_243B76784(uint64_t a1)
{
  return sub_243B76584(a1);
}

uint64_t sub_243B76798(uint64_t a1)
{
  return sub_243B76550(a1);
}

uint64_t sub_243B767AC(uint64_t *a1)
{
  return sub_243B74DE0(a1);
}

uint64_t sub_243B767C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0F0);
  v3 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_243B7CC48(0, v6, 0);
    v7 = v17;
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED100) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      sub_243B78628((uint64_t)v5, (uint64_t)&v5[*(int *)(v16 + 48)], v8, v10);
      if (v1)
        break;
      v17 = v7;
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_243B7CC48(v12 > 1, v13 + 1, 1);
        v7 = v17;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      sub_243B6F9B4((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, &qword_2572ED0F0);
      v10 += v11;
      if (!--v6)
        return v7;
    }
    swift_release();
  }
  return v7;
}

uint64_t sub_243B76938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED540);
  v3 = MEMORY[0x24BDAC7A8](v48);
  v47 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t)&v38 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v44 = (uint64_t)&v38 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED390);
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v38 = v1;
  v50 = MEMORY[0x24BEE4AF8];
  sub_243B7CC2C(0, v10, 0);
  result = sub_243BE4C6C(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v39 = a1 + 80;
  v40 = v10;
  v41 = v13;
  v42 = a1 + 64;
  v43 = a1;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v19 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_26;
    v20 = v48;
    v21 = *(int *)(v48 + 48);
    v22 = *(_QWORD *)(a1 + 48);
    v23 = v22
        + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED548) - 8) + 72) * v14;
    v24 = a1;
    v25 = v44;
    sub_243B50168(v23, v44, &qword_2572ED548);
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v14);
    *(_QWORD *)(v25 + v21) = v26;
    v27 = v46;
    sub_243B50168(v25, v46, &qword_2572ED548);
    *(_QWORD *)(v27 + *(int *)(v20 + 48)) = v26;
    v28 = v27;
    v29 = v47;
    sub_243B6F9B4(v28, v47, &qword_2572ED540);
    swift_bridgeObjectRetain_n();
    sub_243B6F978(v25, &qword_2572ED540);
    sub_243B795B8(v49, v30, v29, *(_QWORD *)(v29 + *(int *)(v20 + 48)));
    sub_243B6F978(v29, &qword_2572ED540);
    v11 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CC2C(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v50;
    }
    v32 = *(_QWORD *)(v11 + 16);
    v31 = *(_QWORD *)(v11 + 24);
    a1 = v43;
    if (v32 >= v31 >> 1)
    {
      sub_243B7CC2C(v31 > 1, v32 + 1, 1);
      v11 = v50;
    }
    *(_QWORD *)(v11 + 16) = v32 + 1;
    result = sub_243B6F9B4(v49, v11+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v32, &qword_2572ED390);
    v17 = 1 << *(_BYTE *)(a1 + 32);
    if (v14 >= v17)
      goto LABEL_27;
    v16 = v42;
    v33 = *(_QWORD *)(v42 + 8 * v19);
    if ((v33 & (1 << v14)) == 0)
      goto LABEL_28;
    LODWORD(v13) = v41;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v41)
      goto LABEL_29;
    v34 = v33 & (-2 << (v14 & 0x3F));
    if (v34)
    {
      v17 = __clz(__rbit64(v34)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v18 = v40;
    }
    else
    {
      v35 = v19 + 1;
      v36 = (unint64_t)(v17 + 63) >> 6;
      v18 = v40;
      if (v19 + 1 < v36)
      {
        v37 = *(_QWORD *)(v42 + 8 * v35);
        if (v37)
        {
LABEL_22:
          v17 = __clz(__rbit64(v37)) + (v35 << 6);
        }
        else
        {
          while (v36 - 2 != v19)
          {
            v37 = *(_QWORD *)(v39 + 8 * v19++);
            if (v37)
            {
              v35 = v19 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v15;
    v14 = v17;
    if (v15 == v18)
      return v11;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243B76CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_243BFD280();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v15 = v1;
    v17 = MEMORY[0x24BEE4AF8];
    sub_243B7CCB8(0, v7, 0);
    v8 = v17;
    v9 = *(_QWORD *)(type metadata accessor for StoredPhoto(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v16 = *(_QWORD *)(v9 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v11(v6, v10, v3);
      v17 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_243B7CCB8(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, v6, v3);
      v10 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_243B76E5C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_243BFDC28();
  if (!v20)
    return sub_243BFD97C();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_243BFD718();
  v34 = sub_243BFDEE0();
  sub_243BFDEBC();
  v37 = v8;
  result = sub_243BFDC1C();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_243BFDC7C();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_243BFDEC8();
      result = sub_243BFDC34();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PhotosFaceDatabase.queryPhotos<A>(sql:bindings:extraReading:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[16];
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = a6;
  v37 = a6;
  v38 = a1;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  type metadata accessor for StoredLayoutView();
  swift_getTupleTypeMetadata2();
  v8 = sub_243BFD9DC();
  sub_243B73714((void (*)(uint64_t *))sub_243B77EDC, v8, (uint64_t)&v44);
  if (!v6)
  {
    v10 = MEMORY[0x24BDAC7A8](v9);
    v35 = v7;
    MEMORY[0x24BDAC7A8](v10);
    v32 = v7;
    v33 = sub_243B78EB0;
    v34 = v11;
    v12 = type metadata accessor for StoredPhoto(255);
    type metadata accessor for StoredPhotoLayout(255);
    v36 = v12;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
    v15 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v8);
    v16 = sub_243B76E5C((void (*)(char *, char *))sub_243B78FA8, (uint64_t)v31, v8, TupleTypeMetadata3, v14, v15, MEMORY[0x24BEE3F20], (uint64_t)&v43);
    v17 = swift_bridgeObjectRelease();
    v44 = v16;
    v18 = MEMORY[0x24BDAC7A8](v17);
    v35 = v7;
    MEMORY[0x24BDAC7A8](v18);
    v32 = v7;
    v33 = sub_243B790CC;
    v34 = v19;
    v22 = _s19ExtraPhotoContainerVMa(0, v7, v20, v21);
    v23 = sub_243BFD9DC();
    MEMORY[0x249502B6C](&unk_243BFFE40, v22);
    MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v23);
    v44 = sub_243BFD76C();
    v24 = MEMORY[0x24BDAC7A8](v44);
    v35 = v7;
    MEMORY[0x24BDAC7A8](v24);
    v32 = v7;
    v33 = sub_243B79B7C;
    v34 = v25;
    v26 = sub_243BFD778();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v28 = MEMORY[0x249502B6C](MEMORY[0x24BEE04E8], v26);
    v7 = sub_243B76E5C((void (*)(char *, char *))sub_243B79E80, (uint64_t)v31, v26, TupleTypeMetadata2, MEMORY[0x24BEE4078], v28, MEMORY[0x24BEE40A8], v29);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t PhotosFaceDatabase.queryPhotos(sql:bindings:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED390);
  v29 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v30 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v28 - v11;
  v13 = type metadata accessor for StoredPhoto(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = sub_243B74824(v3, a1, a2, a3, (uint64_t)nullsub_1, 0);
  if (!v4)
  {
    v18 = sub_243B767C0(v17);
    swift_bridgeObjectRelease();
    v20 = sub_243B7DDD0(v18);
    swift_bridgeObjectRelease();
    v21 = sub_243B76938(v20);
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      v28[2] = 0;
      v31 = MEMORY[0x24BEE4AF8];
      sub_243B7CC10(0, v22, 0);
      v23 = *(unsigned __int8 *)(v29 + 80);
      v28[1] = v21;
      v24 = v21 + ((v23 + 32) & ~v23);
      v29 = *(_QWORD *)(v29 + 72);
      v3 = v31;
      do
      {
        sub_243B50168(v24, (uint64_t)v12, &qword_2572ED390);
        v25 = v30;
        sub_243B6F8F0((uint64_t)v12, v30, type metadata accessor for StoredPhoto);
        sub_243B6F934(v25, (uint64_t)v16, type metadata accessor for StoredPhoto);
        sub_243B6F978((uint64_t)v12, &qword_2572ED390);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_243B7CC10(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v31;
        }
        v27 = *(_QWORD *)(v3 + 16);
        v26 = *(_QWORD *)(v3 + 24);
        if (v27 >= v26 >> 1)
        {
          sub_243B7CC10(v26 > 1, v27 + 1, 1);
          v3 = v31;
        }
        *(_QWORD *)(v3 + 16) = v27 + 1;
        sub_243B6F934((uint64_t)v16, v3+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v27, type metadata accessor for StoredPhoto);
        v24 += v29;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PhotosFaceDatabase.insert(storedPhotos:)(Swift::OpaquePointer storedPhotos)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_243B7341C(v1, (uint64_t)storedPhotos._rawValue);
}

uint64_t PhotosFaceDatabase.queryPhotos(identifiers:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF80);
  v2 = *(_QWORD *)(v44 - 8);
  v3 = MEMORY[0x24BDAC7A8](v44);
  v42 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v39 = (uint64_t)&v36 - v5;
  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DatabaseBinding();
  v50 = *(_QWORD *)(v47 - 8);
  v10 = MEMORY[0x24BDAC7A8](v47);
  v43 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v38 = (uint64_t)&v36 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v36 - v14;
  v45 = a1;
  v16 = *(_QWORD *)(a1 + 16);
  v48 = sub_243B77D40(63, 0xE100000000000000, v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED398);
  sub_243B7E110();
  v46 = sub_243BFD7B4();
  swift_bridgeObjectRelease();
  v48 = 0;
  v49 = 0xE000000000000000;
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD85C();
  v40 = v48;
  v41 = v49;
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v37 = v2;
    v48 = MEMORY[0x24BEE4AF8];
    sub_243B7CC9C(0, v16, 0);
    v18 = v45 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v45 = *(_QWORD *)(v7 + 72);
    v46 = v7;
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, v18, v6);
      v19(v15, (uint64_t)v9, v6);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v17 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC9C(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v48;
      }
      v21 = *(_QWORD *)(v17 + 16);
      v20 = *(_QWORD *)(v17 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_243B7CC9C(v20 > 1, v21 + 1, 1);
        v17 = v48;
      }
      *(_QWORD *)(v17 + 16) = v21 + 1;
      sub_243B6F934((uint64_t)v15, v17+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      v7 = v46;
      v18 += v45;
      --v16;
    }
    while (v16);
    v2 = v37;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF88);
  v22 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_243BFFAC0;
  v24 = v23 + v22;
  *(_QWORD *)(v23 + v22) = 15;
  v25 = v47;
  swift_storeEnumTagMultiPayload();
  v26 = v50;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v24, 0, 1, v25);
  v27 = v39;
  sub_243B50168(v24, v39, &qword_2572ECF80);
  v28 = v27;
  v29 = v42;
  sub_243B6F9B4(v28, v42, &qword_2572ECF80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v29, 1, v25) == 1)
  {
    sub_243B6F978(v29, &qword_2572ECF80);
    v30 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v31 = v38;
    sub_243B6F934(v29, v38, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F934(v31, v43, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v30 = MEMORY[0x24BEE4AF8];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = sub_243B6DF1C(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
    v33 = *(_QWORD *)(v30 + 16);
    v32 = *(_QWORD *)(v30 + 24);
    if (v33 >= v32 >> 1)
      v30 = sub_243B6DF1C(v32 > 1, v33 + 1, 1, v30);
    *(_QWORD *)(v30 + 16) = v33 + 1;
    sub_243B6F934(v43, v30+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v33, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v48 = v17;
  sub_243B7C640(v30, (uint64_t (*)(void))sub_243B6DF1C, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  v34 = PhotosFaceDatabase.queryPhotos(sql:bindings:)(v40, v41, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_243B77D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  if (a3 < 0)
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      v6 = (_QWORD *)sub_243BFD988();
      v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        v8 = a3 - 2;
        if (v8)
        {
          v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_243B77E38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t result;
  _QWORD v16[6];

  v13 = *a1;
  v16[4] = a6;
  v16[5] = v13;
  v16[2] = a7;
  v16[3] = a5;
  type metadata accessor for StoredLayoutView();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = DatabaseConnection.query<A>(sql:bindings:step:)(a2, a3, a4, (void (*)(sqlite3_stmt **))sub_243B7FA04, (uint64_t)v16, TupleTypeMetadata2);
  if (!v8)
    *a8 = result;
  return result;
}

uint64_t sub_243B77EDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_243B77E38(a1, v2[3], v2[4], v2[5], v2[6], v2[7], v2[2], a2);
}

uint64_t type metadata accessor for StoredLayoutView()
{
  uint64_t result;

  result = qword_2572ED498;
  if (!qword_2572ED498)
    return swift_getSingletonMetadata();
  return result;
}

void sub_243B77F38(sqlite3_stmt **a1@<X0>, void (*a2)(sqlite3_stmt **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  sqlite3_stmt *v15;
  uint64_t v16;
  sqlite3_stmt *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  int v37;
  sqlite3_stmt *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(sqlite3_stmt **);
  uint64_t v65;
  sqlite3_stmt *v66;

  v62 = a4;
  v63 = a3;
  v64 = a2;
  v65 = a5;
  v7 = sub_243BFD22C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_243BFD280();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v66 = *a1;
  DatabaseRow.readUUID(column:)(0);
  if (!v5)
  {
    v58 = v10;
    v59 = v14;
    v56 = v8;
    v57 = v7;
    v60 = v12;
    v61 = v11;
    if (sqlite3_column_type(v15, 1) == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v16 = 1;
      *(_BYTE *)(v16 + 4) = 0;
      swift_willThrow();
LABEL_4:
      (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
      return;
    }
    v17 = v15;
    sqlite3_column_double(v15, 1);
    v18 = v58;
    sub_243BFD1FC();
    v19 = sqlite3_column_type(v15, 2);
    v21 = v60;
    v20 = v61;
    v22 = v59;
    if (v19 == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v23 = 2;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v18, v57);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
      return;
    }
    v24 = sqlite3_column_double(v17, 2);
    v25 = 3;
    v26 = sqlite3_column_type(v17, 3);
    v28 = v56;
    v27 = v57;
    if (v26 == 5)
      goto LABEL_18;
    *(_QWORD *)&v55 = sqlite3_column_int(v17, 3);
    v25 = 4;
    if (sqlite3_column_type(v17, 4) == 5)
      goto LABEL_18;
    v54 = sqlite3_column_int(v17, 4);
    v25 = 5;
    if (sqlite3_column_type(v17, 5) == 5)
      goto LABEL_18;
    v53 = sqlite3_column_int(v17, 5);
    v25 = 6;
    if (sqlite3_column_type(v17, 6) == 5)
      goto LABEL_18;
    v29 = sqlite3_column_double(v17, 6);
    v25 = 7;
    if (sqlite3_column_type(v17, 7) == 5)
      goto LABEL_18;
    v30 = sqlite3_column_double(v17, 7);
    v25 = 8;
    if (sqlite3_column_type(v17, 8) == 5)
      goto LABEL_18;
    v31 = sqlite3_column_double(v17, 8);
    v25 = 9;
    if (sqlite3_column_type(v17, 9) == 5)
      goto LABEL_18;
    v32 = sqlite3_column_double(v17, 9);
    v25 = 10;
    if (sqlite3_column_type(v17, 10) == 5
      || (v52 = sqlite3_column_int(v17, 10), v25 = 11, sqlite3_column_type(v17, 11) == 5)
      || (v33 = sqlite3_column_double(v17, 11), v25 = 12, sqlite3_column_type(v17, 12) == 5)
      || (v34 = sqlite3_column_double(v17, 12), v25 = 13, sqlite3_column_type(v17, 13) == 5))
    {
LABEL_18:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v35 = v25;
      *(_BYTE *)(v35 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
      goto LABEL_19;
    }
    v36 = sqlite3_column_double(v17, 13);
    v37 = 14;
    v38 = v17;
    if (sqlite3_column_type(v17, 14) == 5)
      goto LABEL_26;
    v51 = sqlite3_column_double(v17, 14);
    v37 = 15;
    if (sqlite3_column_type(v17, 15) == 5
      || (v50 = sqlite3_column_double(v17, 15), v37 = 16, sqlite3_column_type(v17, 16) == 5)
      || (v49 = sqlite3_column_double(v17, 16), v37 = 17, sqlite3_column_type(v17, 17) == 5)
      || (v48 = sqlite3_column_double(v17, 17), v37 = 18, sqlite3_column_type(v17, 18) == 5))
    {
LABEL_26:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v39 = v37;
      *(_BYTE *)(v39 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
      goto LABEL_4;
    }
    v40 = SLODWORD(v55);
    v41 = (int)v54;
    v55 = sqlite3_column_double(v17, 18);
    if (sqlite3_column_type(v17, 19) == 5 || !sqlite3_column_text(v17, 19))
    {
      v42 = 0;
      v44 = 0;
    }
    else
    {
      v42 = sub_243BFD874();
      v44 = v43;
    }
    v53 = v53 == 1;
    LODWORD(v54) = v52 == 1;
    v45 = (int *)type metadata accessor for StoredLayoutView();
    swift_getTupleTypeMetadata2();
    v46 = v65;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v65, v59, v61);
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v46 + v45[5], v58, v57);
    *(double *)(v46 + v45[6]) = v24;
    *(_QWORD *)(v46 + v45[7]) = v40;
    *(_QWORD *)(v46 + v45[8]) = v41;
    *(_BYTE *)(v46 + v45[9]) = v53;
    *(double *)(v46 + v45[10]) = v29;
    *(double *)(v46 + v45[11]) = v30;
    *(double *)(v46 + v45[12]) = v31;
    *(double *)(v46 + v45[13]) = v32;
    *(_BYTE *)(v46 + v45[14]) = v54;
    *(double *)(v46 + v45[15]) = v33;
    *(double *)(v46 + v45[16]) = v34;
    *(double *)(v46 + v45[17]) = v36;
    *(double *)(v46 + v45[18]) = v51;
    *(double *)(v46 + v45[19]) = v50;
    *(double *)(v46 + v45[20]) = v49;
    *(double *)(v46 + v45[21]) = v48;
    *(double *)(v46 + v45[22]) = v55;
    v47 = (uint64_t *)(v46 + v45[23]);
    *v47 = v42;
    v47[1] = v44;
    v66 = v38;
    v64(&v66);
  }
}

uint64_t sub_243B78628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(void);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  char *v48;
  char *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v58 = a2;
  v6 = (int *)type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v60 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for StoredLayoutView();
  if ((*(_QWORD *)(a4 + *(int *)(v15 + 32)) & 0x8000000000000000) != 0
    || (v16 = (int *)v15,
        v55 = *(_QWORD *)(a4 + *(int *)(v15 + 32)),
        v59 = a1,
        v17 = *(_QWORD *)(a4 + *(int *)(v15 + 28)),
        v17 < 0))
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    v18 = sub_243BFD280();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, a4, v18);
    v19 = a4 + v16[5];
    v20 = &v14[v12[5]];
    v21 = sub_243BFD22C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v19, v21);
    v22 = *(_QWORD *)(a4 + v16[6]);
    v23 = sub_243B4FD54(MEMORY[0x24BEE4AF8]);
    v24 = (uint64_t *)(a4 + v16[23]);
    v25 = *v24;
    v26 = v24[1];
    *(_QWORD *)&v14[v12[6]] = v22;
    *(_QWORD *)&v14[v12[7]] = v17;
    *(_QWORD *)&v14[v12[8]] = v23;
    v27 = &v14[v12[9]];
    *(_QWORD *)v27 = v25;
    *((_QWORD *)v27 + 1) = v26;
    v53 = v26;
    v28 = sub_243BFD190();
    v29 = *(void (**)(void))(*(_QWORD *)(v28 - 8) + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29)(v60, 1, 1, v28);
    if (*(_BYTE *)(a4 + v16[9]) == 1)
    {
      v30 = (uint64_t)v57;
      v29();
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
      v32 = (char *)v30;
      v33 = 0;
    }
    else
    {
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
      v30 = (uint64_t)v57;
      v32 = v57;
      v33 = 1;
    }
    v34 = v56;
    v31(v32, v33, 1, v56);
    v35 = v16[14];
    v36 = *(_QWORD *)(a4 + v16[15]);
    v37 = *(_QWORD *)(a4 + v16[16]);
    v38 = *(_QWORD *)(a4 + v16[17]);
    v39 = *(_QWORD *)(a4 + v16[18]);
    v40 = *(_QWORD *)(a4 + v16[19]);
    v41 = *(_QWORD *)(a4 + v16[20]);
    v42 = *(_QWORD *)(a4 + v16[21]);
    v43 = *(_QWORD *)(a4 + v16[22]);
    v44 = v16[11];
    v52 = *(_QWORD *)(a4 + v16[10]);
    v54 = *(_QWORD *)(a4 + v44);
    v45 = *(char **)(a4 + v16[13]);
    v56 = *(_QWORD *)(a4 + v16[12]);
    v57 = v45;
    v46 = (uint64_t)&v8[v6[5]];
    v47 = *(_BYTE *)(a4 + v35);
    v31((char *)v46, 1, 1, v34);
    sub_243B6F934(v60, (uint64_t)v8, type metadata accessor for StoredPhotoLayout.ImageLocation);
    swift_bridgeObjectRetain();
    sub_243B6F978(v46, &qword_2572ED130);
    sub_243B6F9B4(v30, v46, &qword_2572ED130);
    v48 = &v8[v6[6]];
    *(_QWORD *)v48 = v36;
    *((_QWORD *)v48 + 1) = v37;
    *((_QWORD *)v48 + 2) = v38;
    *((_QWORD *)v48 + 3) = v39;
    *(_QWORD *)&v8[v6[7]] = v55;
    v49 = &v8[v6[8]];
    *(_QWORD *)v49 = v40;
    *((_QWORD *)v49 + 1) = v41;
    *((_QWORD *)v49 + 2) = v42;
    *((_QWORD *)v49 + 3) = v43;
    *(_QWORD *)&v8[v6[9]] = v52;
    *(_QWORD *)&v8[v6[10]] = v54;
    *(_QWORD *)&v8[v6[11]] = v56;
    *(_QWORD *)&v8[v6[12]] = v57;
    v8[v6[13]] = v47;
    sub_243B6F934((uint64_t)v8, v58, type metadata accessor for StoredPhotoLayout);
    return sub_243B6F934((uint64_t)v14, v59, type metadata accessor for StoredPhoto);
  }
  return result;
}

uint64_t sub_243B78A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v62 = a1;
  v63 = a3;
  v61 = a2;
  v9 = (int *)type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v12);
  v60 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v66 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for StoredLayoutView();
  if ((*(_QWORD *)(a4 + *(int *)(v18 + 32)) & 0x8000000000000000) != 0
    || (v19 = (int *)v18,
        v58 = *(_QWORD *)(a4 + *(int *)(v18 + 32)),
        v64 = a5,
        v65 = a6,
        v20 = *(_QWORD *)(a4 + *(int *)(v18 + 28)),
        v20 < 0))
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    v21 = sub_243BFD280();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, a4, v21);
    v22 = a4 + v19[5];
    v23 = &v17[v15[5]];
    v24 = sub_243BFD22C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, v22, v24);
    v25 = *(_QWORD *)(a4 + v19[6]);
    v26 = sub_243B4FD54(MEMORY[0x24BEE4AF8]);
    v27 = (uint64_t *)(a4 + v19[23]);
    v28 = *v27;
    v29 = v27[1];
    *(_QWORD *)&v17[v15[6]] = v25;
    *(_QWORD *)&v17[v15[7]] = v20;
    *(_QWORD *)&v17[v15[8]] = v26;
    v30 = &v17[v15[9]];
    *(_QWORD *)v30 = v28;
    *((_QWORD *)v30 + 1) = v29;
    v56 = v29;
    v31 = sub_243BFD190();
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
    v32(v66, 1, 1, v31);
    if (*(_BYTE *)(a4 + v19[9]) == 1)
    {
      v33 = (uint64_t)v60;
      v32((uint64_t)v60, 1, 1, v31);
      v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v35 = (char *)v33;
      v36 = 0;
    }
    else
    {
      v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v33 = (uint64_t)v60;
      v35 = v60;
      v36 = 1;
    }
    v37 = v59;
    v34(v35, v36, 1, v59);
    v38 = v19[14];
    v39 = *(_QWORD *)(a4 + v19[15]);
    v40 = *(_QWORD *)(a4 + v19[16]);
    v41 = *(_QWORD *)(a4 + v19[17]);
    v42 = *(_QWORD *)(a4 + v19[18]);
    v43 = *(_QWORD *)(a4 + v19[19]);
    v44 = *(_QWORD *)(a4 + v19[20]);
    v45 = *(_QWORD *)(a4 + v19[21]);
    v46 = *(_QWORD *)(a4 + v19[22]);
    v47 = v19[11];
    v55 = *(_QWORD *)(a4 + v19[10]);
    v57 = *(_QWORD *)(a4 + v47);
    v48 = *(char **)(a4 + v19[13]);
    v59 = *(_QWORD *)(a4 + v19[12]);
    v60 = v48;
    v49 = (uint64_t)&v11[v9[5]];
    v50 = *(_BYTE *)(a4 + v38);
    v34((char *)v49, 1, 1, v37);
    sub_243B6F934(v66, (uint64_t)v11, type metadata accessor for StoredPhotoLayout.ImageLocation);
    swift_bridgeObjectRetain();
    sub_243B7F9BC(v33, v49);
    v51 = &v11[v9[6]];
    *(_QWORD *)v51 = v39;
    *((_QWORD *)v51 + 1) = v40;
    *((_QWORD *)v51 + 2) = v41;
    *((_QWORD *)v51 + 3) = v42;
    *(_QWORD *)&v11[v9[7]] = v58;
    v52 = &v11[v9[8]];
    *(_QWORD *)v52 = v43;
    *((_QWORD *)v52 + 1) = v44;
    *((_QWORD *)v52 + 2) = v45;
    *((_QWORD *)v52 + 3) = v46;
    *(_QWORD *)&v11[v9[9]] = v55;
    *(_QWORD *)&v11[v9[10]] = v57;
    *(_QWORD *)&v11[v9[11]] = v59;
    *(_QWORD *)&v11[v9[12]] = v60;
    v11[v9[13]] = v50;
    sub_243B6F934((uint64_t)v11, v61, type metadata accessor for StoredPhotoLayout);
    sub_243B6F934((uint64_t)v17, v62, type metadata accessor for StoredPhoto);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64);
  }
  return result;
}

uint64_t sub_243B78EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_243B78A68(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t sub_243B78EC8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, _QWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t result;

  type metadata accessor for StoredLayoutView();
  v9 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  type metadata accessor for StoredPhoto(255);
  type metadata accessor for StoredPhotoLayout(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  result = a2(a4, a4 + *(int *)(TupleTypeMetadata3 + 48), a4 + *(int *)(TupleTypeMetadata3 + 64), a1, v9);
  if (v4)
    *a3 = v4;
  return result;
}

uint64_t sub_243B78FA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_243B78EC8(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24), a2, a3);
}

uint64_t sub_243B78FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(a1, (uint64_t)v13, type metadata accessor for StoredPhoto);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  sub_243B6F934((uint64_t)v13, a4, type metadata accessor for StoredPhoto);
  v16 = _s19ExtraPhotoContainerVMa(0, a3, v14, v15);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4 + *(int *)(v16 + 28), v10, a3);
}

uint64_t sub_243B790CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_243B78FC8(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_243B790D4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata3;

  type metadata accessor for StoredPhoto(255);
  type metadata accessor for StoredPhotoLayout(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata3 + 48), a1 + *(int *)(TupleTypeMetadata3 + 64));
}

uint64_t sub_243B79170(uint64_t a1)
{
  uint64_t v1;

  return sub_243B790D4(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 24));
}

uint64_t _s19ExtraPhotoContainerVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s19ExtraPhotoContainerVMn);
}

uint64_t sub_243B79198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;

  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED120);
  v6 = *(_QWORD *)(v52 - 8);
  v7 = MEMORY[0x24BDAC7A8](v52);
  v51 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v41 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v41 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v48 = *(_QWORD *)(v12 - 8);
  v49 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v44);
  v45 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(a2, v45, v16);
  v17 = *(_QWORD *)(a3 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v42 = a1;
    v43 = a2;
    v57 = MEMORY[0x24BEE4AF8];
    v53 = v14;
    sub_243B7CBD8(0, v17, 0);
    v19 = v53;
    v20 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v46 = *(_QWORD *)(v6 + 72);
    v18 = v57;
    v21 = (uint64_t)v47;
    v22 = (uint64_t)v50;
    do
    {
      v55 = v18;
      v56 = v17;
      sub_243B50168(v20, v21, &qword_2572ED120);
      v54 = (uint64_t)v19 + *(int *)(v49 + 48);
      v23 = v52;
      v24 = *(int *)(v52 + 48);
      v25 = v22 + v24;
      v26 = *(int *)(v52 + 64);
      v27 = v21 + v24;
      sub_243B6F8F0(v21, v22, type metadata accessor for StoredPhoto);
      sub_243B6F8F0(v27, v25, type metadata accessor for StoredPhotoLayout);
      *(_QWORD *)(v22 + v26) = *(_QWORD *)(v21 + v26);
      v28 = *(_QWORD *)(v25 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 28));
      sub_243B7FA20(v25, type metadata accessor for StoredPhotoLayout);
      *v19 = v28;
      v29 = v51;
      v30 = v51 + *(int *)(v23 + 48);
      v31 = *(int *)(v23 + 64);
      v18 = v55;
      sub_243B6F8F0(v21, v51, type metadata accessor for StoredPhoto);
      sub_243B6F8F0(v27, v30, type metadata accessor for StoredPhotoLayout);
      *(_QWORD *)(v29 + v31) = *(_QWORD *)(v21 + v26);
      sub_243B6F934(v30, v54, type metadata accessor for StoredPhotoLayout);
      sub_243B7FA20(v29, type metadata accessor for StoredPhoto);
      sub_243B7FA20(v22, type metadata accessor for StoredPhoto);
      sub_243B6F978(v21, &qword_2572ED120);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CBD8(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v57;
      }
      v33 = *(_QWORD *)(v18 + 16);
      v32 = *(_QWORD *)(v18 + 24);
      v19 = v53;
      v34 = v56;
      if (v33 >= v32 >> 1)
      {
        sub_243B7CBD8(v32 > 1, v33 + 1, 1);
        v19 = v53;
        v18 = v57;
      }
      *(_QWORD *)(v18 + 16) = v33 + 1;
      sub_243B6F9B4((uint64_t)v19, v18+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v33, &qword_2572EBA28);
      v20 += v46;
      v17 = v34 - 1;
    }
    while (v17);
    a1 = v42;
    a2 = v43;
  }
  if (*(_QWORD *)(v18 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
    v35 = sub_243BFDFDC();
  }
  else
  {
    v35 = MEMORY[0x24BEE4B00];
  }
  v57 = v35;
  sub_243B7D698(v18, 1, &v57);
  swift_bridgeObjectRelease();
  v36 = v57;
  v37 = v45;
  v38 = *(int *)(v44 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v37 + v38) = v36;
  sub_243B6F8F0(v37, a1, type metadata accessor for StoredPhoto);
  v39 = *(_QWORD *)(a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED118) + 28));
  sub_243B7FA20(v37, type metadata accessor for StoredPhoto);
  return v39;
}

uint64_t sub_243B795B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;

  v40 = a1;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0F0);
  v6 = *(_QWORD *)(v48 - 8);
  v7 = MEMORY[0x24BDAC7A8](v48);
  v47 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)&v38 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v43 = (uint64_t)&v38 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v44 = *(_QWORD *)(v12 - 8);
  v45 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(a3, v39, v16);
  v17 = *(_QWORD *)(a4 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v52 = MEMORY[0x24BEE4AF8];
    sub_243B7CBD8(0, v17, 0);
    v19 = a4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v41 = *(_QWORD *)(v6 + 72);
    v42 = v14;
    v18 = v52;
    v20 = v48;
    v21 = (uint64_t)v46;
    do
    {
      v50 = v17;
      v51 = v18;
      v22 = v43;
      sub_243B50168(v19, v43, &qword_2572ED0F0);
      v49 = (uint64_t)v14 + *(int *)(v45 + 48);
      v23 = *(int *)(v20 + 48);
      v24 = v21 + v23;
      v25 = v22 + v23;
      sub_243B6F8F0(v22, v21, type metadata accessor for StoredPhoto);
      sub_243B6F8F0(v25, v24, type metadata accessor for StoredPhotoLayout);
      v26 = *(_QWORD *)(v24 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 28));
      sub_243B7FA20(v24, type metadata accessor for StoredPhotoLayout);
      *v14 = v26;
      v27 = v47;
      v28 = v47 + *(int *)(v20 + 48);
      sub_243B6F8F0(v22, v47, type metadata accessor for StoredPhoto);
      sub_243B6F8F0(v25, v28, type metadata accessor for StoredPhotoLayout);
      sub_243B6F934(v28, v49, type metadata accessor for StoredPhotoLayout);
      sub_243B7FA20(v27, type metadata accessor for StoredPhoto);
      sub_243B7FA20(v21, type metadata accessor for StoredPhoto);
      v29 = v22;
      v18 = v51;
      sub_243B6F978(v29, &qword_2572ED0F0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CBD8(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v52;
      }
      v31 = *(_QWORD *)(v18 + 16);
      v30 = *(_QWORD *)(v18 + 24);
      v14 = v42;
      v32 = v50;
      if (v31 >= v30 >> 1)
      {
        sub_243B7CBD8(v30 > 1, v31 + 1, 1);
        v18 = v52;
      }
      *(_QWORD *)(v18 + 16) = v31 + 1;
      sub_243B6F9B4((uint64_t)v14, v18+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v31, &qword_2572EBA28);
      v19 += v41;
      v17 = v32 - 1;
    }
    while (v17);
  }
  if (*(_QWORD *)(v18 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
    v33 = sub_243BFDFDC();
  }
  else
  {
    v33 = MEMORY[0x24BEE4B00];
  }
  v52 = v33;
  sub_243B7D698(v18, 1, &v52);
  swift_bridgeObjectRelease();
  v34 = v52;
  v35 = v39;
  v36 = *(int *)(v38 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v35 + v36) = v34;
  sub_243B6F8F0(v35, v40, type metadata accessor for StoredPhoto);
  return sub_243B7FA20(v35, type metadata accessor for StoredPhoto);
}

uint64_t sub_243B7998C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;

  v10 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_243B6F8F0(a3, (uint64_t)v12, v13);
  v28 = a4;
  v27 = a5;
  type metadata accessor for StoredPhotoLayout(255);
  swift_getTupleTypeMetadata3();
  v14 = sub_243BFD9DC();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v16 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v14);
  v18 = sub_243B76E5C((void (*)(char *, char *))sub_243B7F9A0, (uint64_t)v26, v14, v15, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
  if (*(_QWORD *)(v18 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
    v19 = sub_243BFDFDC();
  }
  else
  {
    v19 = MEMORY[0x24BEE4B00];
  }
  v28 = v19;
  sub_243B7D698(v18, 1, &v28);
  swift_bridgeObjectRelease();
  v20 = v28;
  v21 = *(int *)(v10 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v12[v21] = v20;
  sub_243B6F8F0((uint64_t)v12, a1, type metadata accessor for StoredPhoto);
  v24 = _s19ExtraPhotoContainerVMa(0, a5, v22, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a2, a3 + *(int *)(v24 + 28), a5);
  return sub_243B7FA20((uint64_t)v12, type metadata accessor for StoredPhoto);
}

uint64_t sub_243B79B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_243B7998C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_243B79B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a3;
  type metadata accessor for StoredPhoto(255);
  v35 = type metadata accessor for StoredPhotoLayout(255);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v29 - v10;
  v36 = (uint64_t)a3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28) + 48);
  v12 = *(int *)(TupleTypeMetadata3 + 48);
  v13 = (uint64_t)&v11[v12];
  v14 = *(int *)(TupleTypeMetadata3 + 64);
  v15 = &v11[v14];
  v34 = &v11[v14];
  v16 = a1;
  v31 = a1;
  v17 = a1 + v12;
  v18 = a1 + v14;
  v30 = v18;
  sub_243B6F8F0(v16, (uint64_t)v11, type metadata accessor for StoredPhoto);
  sub_243B6F8F0(v17, v13, type metadata accessor for StoredPhotoLayout);
  v19 = a2;
  v33 = *(_QWORD *)(a2 - 8);
  v20 = *(void (**)(char *, uint64_t))(v33 + 16);
  v21 = v18;
  v22 = v19;
  v20(v15, v21);
  v23 = *(_QWORD *)(v13 + *(int *)(v35 + 28));
  sub_243B7FA20(v13, type metadata accessor for StoredPhotoLayout);
  v24 = v31;
  *v32 = v23;
  v25 = (uint64_t)&v9[*(int *)(TupleTypeMetadata3 + 48)];
  v26 = &v9[*(int *)(TupleTypeMetadata3 + 64)];
  sub_243B6F8F0(v24, (uint64_t)v9, type metadata accessor for StoredPhoto);
  sub_243B6F8F0(v17, v25, type metadata accessor for StoredPhotoLayout);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v26, v30, v22);
  sub_243B6F934(v25, v36, type metadata accessor for StoredPhotoLayout);
  v27 = *(void (**)(char *, uint64_t))(v33 + 8);
  v27(v26, v22);
  sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhoto);
  v27(v34, v22);
  return sub_243B7FA20((uint64_t)v11, type metadata accessor for StoredPhoto);
}

uint64_t sub_243B79D94@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t TupleTypeMetadata2;

  _s19ExtraPhotoContainerVMa(255, a4, a3, a4);
  type metadata accessor for StoredPhoto(255);
  type metadata accessor for StoredPhotoLayout(255);
  swift_getTupleTypeMetadata3();
  sub_243BFD9DC();
  v8 = *(_QWORD *)(a1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a5, a5 + *(int *)(TupleTypeMetadata2 + 48), a1, v8);
}

uint64_t sub_243B79E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_243B79D94(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t _s10PhotosFace11StoredPhotoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;

  if ((sub_243BFD250() & 1) != 0)
  {
    v4 = (int *)type metadata accessor for StoredPhoto(0);
    if ((sub_243BFD214() & 1) != 0
      && *(double *)(a1 + v4[6]) == *(double *)(a2 + v4[6])
      && *(_QWORD *)(a1 + v4[7]) == *(_QWORD *)(a2 + v4[7])
      && (sub_243B7C7B8(*(_QWORD *)(a1 + v4[8]), *(_QWORD *)(a2 + v4[8])) & 1) != 0)
    {
      v5 = v4[9];
      v6 = (_QWORD *)(a1 + v5);
      v7 = *(_QWORD *)(a1 + v5 + 8);
      v8 = (_QWORD *)(a2 + v5);
      v9 = v8[1];
      if (v7)
      {
        if (v9)
        {
          v10 = *v6 == *v8 && v7 == v9;
          if (v10 || (sub_243BFE0F0() & 1) != 0)
            return 1;
        }
      }
      else if (!v9)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_243B79F7C()
{
  __int128 v1[4];

  sub_243BFE1A4();
  StoredPhoto.hash(into:)(v1);
  return sub_243BFE1E0();
}

uint64_t sub_243B79FC0()
{
  __int128 v1[4];

  sub_243BFE1A4();
  j___s10PhotosFace11StoredPhotoV4hash4intoys6HasherVz_tF(v1);
  return sub_243BFE1E0();
}

uint64_t sub_243B7A000(uint64_t a1, uint64_t a2)
{
  return _s10PhotosFace11StoredPhotoV2eeoiySbAC_ACtFZ_0(a1, a2);
}

uint64_t sub_243B7A008(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  sqlite3_stmt *v26;
  sqlite3_stmt *v27;
  uint64_t result;
  uint64_t v29;
  int64_t v30;
  Swift::OpaquePointer v31;
  uint64_t v32;
  int64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  int64_t v60;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  Swift::String v69;
  char v70[8];
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;

  v5 = type metadata accessor for StoredPhoto(0);
  v74 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v81 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_243BFD280();
  v7 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DatabaseBinding();
  v85 = *(_QWORD *)(v10 - 8);
  v86 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v79 = (uint64_t *)((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v73 - v13;
  v78 = *a1;
  v76 = a2;
  v15 = sub_243B76CF4(a2);
  v80 = v2;
  v84 = v15;
  v16 = *(_QWORD *)(v15 + 16);
  v90 = sub_243B77D40(63, 0xE100000000000000, v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED398);
  sub_243B7E110();
  sub_243BFD7B4();
  swift_bridgeObjectRelease();
  v90 = 0;
  v91 = 0xE000000000000000;
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  v82 = (int *)v5;
  v87 = v7;
  v77 = v90;
  if (v16)
  {
    v75 = v91;
    v90 = MEMORY[0x24BEE4AF8];
    sub_243B7CC9C(0, v16, 0);
    v17 = v84 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    *(_QWORD *)&v83 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19 = v88;
      v18(v9, v17, v88);
      v18(v14, (unint64_t)v9, v19);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v9, v19);
      v20 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC9C(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v90;
      }
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_243B7CC9C(v21 > 1, v22 + 1, 1);
        v20 = v90;
      }
      *(_QWORD *)(v20 + 16) = v22 + 1;
      sub_243B6F934((uint64_t)v14, v20+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v22, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      v17 += v83;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v23 = v82;
  }
  else
  {
    v23 = (int *)v5;
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v24 = v78;
  v90 = v78;
  v25 = v80;
  v26 = sub_243B81BB0();
  if (v25)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v27 = v26;
  sub_243B86334(v20, v26);
  sub_243B86B4C(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90 = v24;
  v29 = v76;
  v30 = *(_QWORD *)(v76 + 16);
  v31._rawValue = (void *)MEMORY[0x24BEE4AF8];
  if (!v30)
  {
LABEL_26:
    v49._countAndFlagsBits = 0xD0000000000000DBLL;
    v49._object = (void *)0x8000000243C079E0;
    DatabaseConnection.insert(sql:bindings:)(v49, v31);
    if (!v50)
    {
      swift_bridgeObjectRelease();
      v90 = v24;
      if (v30)
      {
        v51 = v29 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
        v52 = *(_QWORD *)(v74 + 72);
        v53 = swift_bridgeObjectRetain();
        v54 = (_QWORD *)MEMORY[0x24BEE4AF8];
        while (1)
        {
          v55 = v30;
          MEMORY[0x24BDAC7A8](v53);
          v72 = v51;
          v56 = swift_bridgeObjectRetain();
          v57 = sub_243B7DA78(v56, (uint64_t (*)(_QWORD, char *))sub_243B7F954, (uint64_t)v70);
          swift_bridgeObjectRelease();
          v58 = *(_QWORD *)(v57 + 16);
          v59 = v54[2];
          v60 = v59 + v58;
          if (__OFADD__(v59, v58))
            goto LABEL_53;
          isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
          if ((_DWORD)isUniquelyReferenced_nonNull_native && v60 <= v54[3] >> 1)
          {
            if (*(_QWORD *)(v57 + 16))
              goto LABEL_40;
          }
          else
          {
            if (v59 <= v60)
              v62 = v59 + v58;
            else
              v62 = v59;
            v54 = sub_243B6E178(isUniquelyReferenced_nonNull_native, v62, 1, v54);
            if (*(_QWORD *)(v57 + 16))
            {
LABEL_40:
              v63 = v54[2];
              if ((v54[3] >> 1) - v63 < v58)
                goto LABEL_55;
              v64 = (unint64_t)&v54[v63 + 4];
              if (v57 + 32 < v64 + 8 * v58 && v64 < v57 + 32 + 8 * v58)
                goto LABEL_57;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0D8);
              swift_arrayInitWithCopy();
              if (v58)
              {
                v66 = v54[2];
                v67 = __OFADD__(v66, v58);
                v68 = v66 + v58;
                if (v67)
                  goto LABEL_56;
                v54[2] = v68;
              }
              goto LABEL_30;
            }
          }
          if (v58)
            goto LABEL_54;
LABEL_30:
          v53 = swift_bridgeObjectRelease();
          v51 += v52;
          v30 = v55 - 1;
          if (v55 == 1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_51;
          }
        }
      }
      v54 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_51:
      v69._countAndFlagsBits = 0xD0000000000001FBLL;
      v69._object = (void *)0x8000000243C07AC0;
      DatabaseConnection.insert(sql:bindings:)(v69, (Swift::OpaquePointer)v54);
    }
    return swift_bridgeObjectRelease();
  }
  v77 = 0;
  v89 = (void *)MEMORY[0x24BEE4AF8];
  sub_243B7CC64(0, v30, 0);
  v32 = v29 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
  v80 = *(_QWORD *)(v74 + 72);
  v83 = xmmword_243BFFD70;
  v75 = v30;
  v33 = v30;
  v34 = v23;
  while (1)
  {
    v84 = v33;
    v35 = v81;
    sub_243B6F8F0(v32, v81, type metadata accessor for StoredPhoto);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
    v36 = *(_QWORD *)(v85 + 72);
    v37 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = v83;
    v39 = v38 + v37;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 16))(v39, v35, v88);
    swift_storeEnumTagMultiPayload();
    v40 = v35 + v34[5];
    v41 = sub_243BFD22C();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39 + v36, v40, v41);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v39 + 2 * v36) = *(_QWORD *)(v35 + v34[6]);
    swift_storeEnumTagMultiPayload();
    v42 = *(_QWORD *)(v35 + v34[7]);
    if (v42 < 0)
      break;
    *(_QWORD *)(v39 + 3 * v36) = v42;
    swift_storeEnumTagMultiPayload();
    v43 = (_QWORD *)(v35 + v34[9]);
    v44 = v43[1];
    if (v44)
    {
      v45 = (uint64_t)v79;
      *v79 = *v43;
      *(_QWORD *)(v45 + 8) = v44;
      swift_storeEnumTagMultiPayload();
      sub_243B6F934(v45, v39 + 4 * v36, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
    }
    *(_QWORD *)(v39 + 5 * v36) = 15;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    sub_243B7FA20(v35, type metadata accessor for StoredPhoto);
    v31._rawValue = v89;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CC64(0, *((_QWORD *)v31._rawValue + 2) + 1, 1);
      v31._rawValue = v89;
    }
    v46 = v84;
    v48 = *((_QWORD *)v31._rawValue + 2);
    v47 = *((_QWORD *)v31._rawValue + 3);
    if (v48 >= v47 >> 1)
    {
      sub_243B7CC64(v47 > 1, v48 + 1, 1);
      v31._rawValue = v89;
    }
    *((_QWORD *)v31._rawValue + 2) = v48 + 1;
    *((_QWORD *)v31._rawValue + v48 + 4) = v38;
    v32 += v80;
    v33 = v46 - 1;
    v34 = v82;
    if (!v33)
    {
      v29 = v76;
      v24 = v78;
      v30 = v75;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  LODWORD(v72) = 0;
  v71 = 1092;
  v70[0] = 2;
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B7A8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int *v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v9 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_243BFFD80;
  v13 = v12 + v11;
  v14 = sub_243BFD280();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a3, v14);
  result = swift_storeEnumTagMultiPayload();
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v13 + v10) = a1;
    swift_storeEnumTagMultiPayload();
    v16 = (int *)type metadata accessor for StoredPhotoLayout(0);
    sub_243B50168(a2 + v16[5], (uint64_t)v8, &qword_2572ED130);
    v17 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    v18 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v8, 1, v17) != 1;
    v22 = v12;
    sub_243B6F978((uint64_t)v8, &qword_2572ED130);
    *(_BYTE *)(v13 + 2 * v10) = v18;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 3 * v10) = *(_QWORD *)(a2 + v16[9]);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 4 * v10) = *(_QWORD *)(a2 + v16[10]);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 5 * v10) = *(_QWORD *)(a2 + v16[11]);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 6 * v10) = *(_QWORD *)(a2 + v16[12]);
    swift_storeEnumTagMultiPayload();
    *(_BYTE *)(v13 + 7 * v10) = *(_BYTE *)(a2 + v16[13]);
    swift_storeEnumTagMultiPayload();
    v19 = (_QWORD *)(a2 + v16[6]);
    *(_QWORD *)(v13 + 8 * v10) = *v19;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 9 * v10) = v19[1];
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 10 * v10) = v19[2];
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 11 * v10) = v19[3];
    swift_storeEnumTagMultiPayload();
    v20 = (_QWORD *)(a2 + v16[8]);
    *(_QWORD *)(v13 + 12 * v10) = *v20;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 13 * v10) = v20[1];
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 + 14 * v10) = v20[2];
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v13 - v10 + 16 * v10) = v20[3];
    swift_storeEnumTagMultiPayload();
    return v22;
  }
  return result;
}

void PhotosFaceDatabase.deleteStoredPhoto(identifier:)()
{
  sub_243B6D990((void (*)(uint64_t *))sub_243B7E15C);
}

uint64_t sub_243B7AC18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  sqlite3_stmt *v23;
  sqlite3_stmt *v24;
  uint8_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *a1;
  if (qword_2543CD828 != -1)
    swift_once();
  v10 = sub_243BFD598();
  __swift_project_value_buffer(v10, (uint64_t)qword_2543CE350);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v30 = a2;
  v28 = v11;
  v11((uint64_t)v9, a2, v6);
  v12 = sub_243BFD580();
  v13 = sub_243BFDCB8();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v27 = v2;
    v16 = v15;
    v32 = v15;
    *(_DWORD *)v14 = 136315138;
    v26 = v14 + 4;
    sub_243B7F914(&qword_2572ED528, MEMORY[0x24BDCEAB8]);
    v17 = sub_243BFE0A8();
    v31 = sub_243B739A8(v17, v18, &v32);
    sub_243BFDD54();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_243B4B000, v12, v13, "Deleting Stored Photo %s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    v3 = v27;
    MEMORY[0x249502C5C](v19, -1, -1);
    MEMORY[0x249502C5C](v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_243BFFAC0;
  v28(v22 + v21, v30, v6);
  swift_storeEnumTagMultiPayload();
  v32 = v29;
  v23 = sub_243B81BB0();
  if (v3)
    return swift_bridgeObjectRelease();
  v24 = v23;
  sub_243B86334(v22, v23);
  sub_243B86B4C(v24);
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t PhotosFaceDatabase.storedPhotos()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_243BFD280();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  v1[7] = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B7B034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  sqlite3_stmt *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  const void *v28;
  const void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t *v54;
  _BYTE __dst[14];
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 16);
  v2 = OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10PhotosFace18PhotosFaceDatabase_connection);
  if (!v3)
  {
    sub_243B72E90();
    v3 = *(_QWORD *)(v1 + v2);
    if (!v3)
    {
      sub_243B6DAD4();
      swift_allocError();
      *v11 = 0;
      goto LABEL_35;
    }
  }
  *(_QWORD *)__dst = v3;
  v4._countAndFlagsBits = 0x6E69676562;
  v4._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v4);
  v6 = v5;
  if (v5)
  {
LABEL_33:
    *(_QWORD *)__dst = v3;
    v44._countAndFlagsBits = 0x6B6361626C6C6F72;
    v44._object = (void *)0xE800000000000000;
    DatabaseConnection.execute(sql:)(v44);
    if (v45)
    {

LABEL_36:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_35:
    swift_willThrow();
    goto LABEL_36;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DatabaseBinding() - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_243BFFAC0;
  v10 = v9 + v8;
  *(_QWORD *)(v9 + v8) = 15;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)__dst = v3;
  v12 = sub_243B81BB0();
  v13 = *(_QWORD **)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD **)(v0 + 64);
  v16 = v10;
  v17 = *(_QWORD *)(v0 + 72) + *(int *)(v15 + 48);
  swift_bridgeObjectRetain();
  sub_243B6F8F0(v16, v17, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  v18 = (uint64_t)v13 + *(int *)(v15 + 48);
  *v13 = 0;
  sub_243B6F934(v17, v18, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  sub_243B6F9B4((uint64_t)v13, (uint64_t)v14, &qword_2572ECF58);
  v19 = *v14 + 1;
  if (__OFADD__(*v14, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v19 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
  }
  if (v19 > 0x7FFFFFFF)
    goto LABEL_49;
  sub_243B86D24((uint64_t)v14 + *(int *)(v15 + 48), v19, (uint64_t)v12);
  if (v20)
  {
    v21 = v20;
    if (sqlite3_errstr(v20))
    {
      v22 = sub_243BFD868();
      v24 = v23;
    }
    else
    {
      v22 = 4271950;
      v24 = 0xE300000000000000;
    }
    v42 = *(_QWORD *)(v0 + 64);
    sub_243B6DB18();
    v6 = (void *)swift_allocError();
    *v43 = v21;
    v43[1] = v22;
    v43[2] = v24;
    swift_willThrow();
    sub_243B6F978(v42, &qword_2572ECF58);
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    sub_243B86B4C(v12);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    goto LABEL_33;
  }
  sub_243B6F978(*(_QWORD *)(v0 + 64), &qword_2572ECF58);
  swift_bridgeObjectRelease();
  sub_243B8693C(v12);
  v25 = sqlite3_step(v12);
  if (v25 == 100)
  {
    v26 = *(_QWORD *)(v0 + 32);
    v27 = MEMORY[0x24BEE4AF8];
    while (sqlite3_column_type(v12, 0) != 5)
    {
      v28 = sqlite3_column_blob(v12, 0);
      if (!v28)
        break;
      v29 = v28;
      v30 = sqlite3_column_bytes(v12, 0);
      if (v30)
      {
        v31 = v30;
        if (v30 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          v56 = v30;
          memcpy(__dst, v29, v30);
          v33 = *(_QWORD *)__dst;
          v34 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v56 << 48);
        }
        else
        {
          sub_243BFD0E8();
          swift_allocObject();
          if ((_DWORD)v31 == 0x7FFFFFFF)
          {
            v32 = sub_243BFD0AC();
            sub_243BFD1B4();
            v33 = swift_allocObject();
            *(_OWORD *)(v33 + 16) = xmmword_243BFFAE0;
            v34 = v32 | 0x8000000000000000;
          }
          else
          {
            v35 = sub_243BFD0AC();
            v33 = v31 << 32;
            v34 = v35 | 0x4000000000000000;
          }
        }
      }
      else
      {
        v33 = 0;
        v34 = 0xC000000000000000;
      }
      UUID.init(serialized:version:)(v33, v34);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v26 + 16))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = sub_243B6E284(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
      v37 = *(_QWORD *)(v27 + 16);
      v36 = *(_QWORD *)(v27 + 24);
      if (v37 >= v36 >> 1)
        v27 = sub_243B6E284(v36 > 1, v37 + 1, 1, v27);
      v38 = *(_QWORD *)(v0 + 40);
      v39 = *(_QWORD *)(v0 + 48);
      v40 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v27 + 16) = v37 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v27+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v37, v38, v40);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v39, v40);
      v41 = sqlite3_step(v12);
      if (v41 != 100)
      {
        v53 = v41;
        goto LABEL_38;
      }
    }
    sub_243B6DB5C();
    v6 = (void *)swift_allocError();
    *(_DWORD *)v52 = 0;
    *(_BYTE *)(v52 + 4) = 0;
    swift_willThrow();
    goto LABEL_31;
  }
  v53 = v25;
  v27 = MEMORY[0x24BEE4AF8];
LABEL_38:
  if (v53 != 101)
  {
    swift_bridgeObjectRelease();
    if (sqlite3_errstr(v53))
    {
      v49 = sub_243BFD868();
      v51 = v50;
    }
    else
    {
      v49 = 4271950;
      v51 = 0xE300000000000000;
    }
    sub_243B6DB18();
    v6 = (void *)swift_allocError();
    *v54 = v53 | 0xA000000000000000;
    v54[1] = v49;
    v54[2] = v51;
    swift_willThrow();
    goto LABEL_32;
  }
  sub_243B86B4C(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)__dst = v3;
  v47._countAndFlagsBits = 0x74696D6D6F63;
  v47._object = (void *)0xE600000000000000;
  DatabaseConnection.execute(sql:)(v47);
  if (v48)
  {
    v6 = v48;
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v27);
}

uint64_t PhotosFaceDatabase.timePositions(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch();
}

uint64_t sub_243B7B790()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;

  v1 = *(unint64_t **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = sub_243B77D40(63, 0xE100000000000000, *(_QWORD *)(v2 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED398);
  sub_243B7E110();
  v3 = sub_243BFD7B4();
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_243B73568(v1, v3, v5, v2);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t *))(v0 + 8))(v6);
}

uint64_t sub_243B7B878@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  sqlite3_stmt *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  sqlite3_stmt *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  sqlite3_stmt *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t result;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  unint64_t *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  sqlite3_stmt *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  v4 = v3;
  v102 = a2;
  v86 = a3;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0A8);
  v88 = *(_QWORD *)(v92 - 8);
  v6 = MEMORY[0x24BDAC7A8](v92);
  v87 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v96 = (uint64_t)&v85 - v8;
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v9 = MEMORY[0x24BDAC7A8](v100);
  v91 = (uint64_t *)((char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v99 = (char *)&v85 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v98 = (uint64_t *)((char *)&v85 - v13);
  v105 = sub_243BFD280();
  v14 = *(_QWORD *)(v105 - 8);
  v15 = MEMORY[0x24BDAC7A8](v105);
  v97 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v85 - v17;
  v19 = (sqlite3_stmt *)type metadata accessor for DatabaseBinding();
  v20 = *((_QWORD *)v19 - 1);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = *a1;
  v106 = 0;
  v107 = 0xE000000000000000;
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD85C();
  sub_243BFD85C();
  v23 = v107;
  v94 = v106;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E0);
  v24 = *(_QWORD *)(v20 + 72);
  v25 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v108 = v24;
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_243BFFAC0;
  v103 = v19;
  v104 = v25;
  *(_QWORD *)(v26 + v25) = 15;
  v27 = v102;
  swift_storeEnumTagMultiPayload();
  v28 = *(_QWORD *)(v27 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  v101 = v14;
  v93 = v23;
  if (v28)
  {
    v89 = v26;
    v90 = v3;
    v106 = MEMORY[0x24BEE4AF8];
    sub_243B7CC9C(0, v28, 0);
    v30 = v27 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v102 = *(_QWORD *)(v14 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v32 = v14;
    do
    {
      v33 = v105;
      v31(v18, v30, v105);
      v31(v22, (uint64_t)v18, v33);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
      v29 = v106;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC9C(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v32 = v101;
        v29 = v106;
      }
      v35 = *(_QWORD *)(v29 + 16);
      v34 = *(_QWORD *)(v29 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_243B7CC9C(v34 > 1, v35 + 1, 1);
        v32 = v101;
        v29 = v106;
      }
      *(_QWORD *)(v29 + 16) = v35 + 1;
      sub_243B6F934((uint64_t)v22, v29 + v104 + v35 * v108, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
      v30 += v102;
      --v28;
    }
    while (v28);
    v26 = v89;
    v4 = v90;
    v36 = v95;
  }
  else
  {
    v36 = v95;
  }
  v106 = v26;
  sub_243B7C640(v29, (uint64_t (*)(void))sub_243B6DF1C, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  v37 = v106;
  v106 = v36;
  v38 = sub_243B81BB0();
  if (v4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v102 = 0;
  v103 = v38;
  v39 = *(_QWORD *)(v37 + 16);
  v95 = v37;
  swift_bridgeObjectRetain();
  v40 = v91;
  if (!v39)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    v50 = v103;
    sub_243B8693C(v103);
    v51 = sqlite3_step(v50);
    if (v51 == 100)
    {
      v52 = MEMORY[0x24BEE4AF8];
      v54 = (uint64_t)v87;
      v53 = v88;
      v55 = v96;
      do
      {
        if (sqlite3_column_type(v50, 0) == 5 || (v56 = sqlite3_column_blob(v50, 0)) == 0)
        {
          sub_243B6DB5C();
          swift_allocError();
          *(_DWORD *)v77 = 0;
          *(_BYTE *)(v77 + 4) = 0;
          swift_willThrow();
          goto LABEL_43;
        }
        v57 = v56;
        v58 = sqlite3_column_bytes(v50, 0);
        v59 = sub_243B84998(v57, v58);
        v60 = v102;
        UUID.init(serialized:version:)(v59, v61);
        if (v60)
          goto LABEL_43;
        if (sqlite3_column_type(v50, 1) == 5)
        {
          sub_243B6DB5C();
          swift_allocError();
          v80 = 1;
          goto LABEL_42;
        }
        v102 = 0;
        v62 = sqlite3_column_int(v50, 1);
        if (sqlite3_column_type(v50, 2) == 5)
        {
          sub_243B6DB5C();
          swift_allocError();
          v80 = 2;
LABEL_42:
          *(_DWORD *)v79 = v80;
          *(_BYTE *)(v79 + 4) = 0;
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v101 + 8))(v97, v105);
LABEL_43:
          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
        v63 = v62;
        v64 = sqlite3_column_int(v50, 2);
        if (v62 < 0)
          goto LABEL_54;
        v65 = v64 == 1;
        v66 = *(int *)(v92 + 48);
        v67 = *(int *)(v92 + 64);
        (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v55, v97, v105);
        *(_QWORD *)(v55 + v66) = v63;
        *(_BYTE *)(v55 + v67) = v65;
        sub_243B50168(v55, v54, &qword_2572ED0A8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v52 = sub_243B6E298(0, *(_QWORD *)(v52 + 16) + 1, 1, v52);
        v69 = *(_QWORD *)(v52 + 16);
        v68 = *(_QWORD *)(v52 + 24);
        v50 = v103;
        if (v69 >= v68 >> 1)
          v52 = sub_243B6E298(v68 > 1, v69 + 1, 1, v52);
        *(_QWORD *)(v52 + 16) = v69 + 1;
        sub_243B6F9B4(v54, v52+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v69, &qword_2572ED0A8);
        sub_243B6F978(v96, &qword_2572ED0A8);
        v70 = sqlite3_step(v50);
      }
      while (v70 == 100);
      v71 = v70;
      if (v70 != 101)
      {
LABEL_45:
        swift_bridgeObjectRelease();
        if (sqlite3_errstr(v71))
        {
          v81 = sub_243BFD868();
          v83 = v82;
        }
        else
        {
          v81 = 4271950;
          v83 = 0xE300000000000000;
        }
        sub_243B6DB18();
        swift_allocError();
        *v84 = v71 | 0xA000000000000000;
        v84[1] = v81;
        v84[2] = v83;
        swift_willThrow();
LABEL_49:
        sub_243B86B4C(v103);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v71 = v51;
      v52 = MEMORY[0x24BEE4AF8];
      if (v51 != 101)
        goto LABEL_45;
    }
    sub_243B86B4C(v103);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v86 = v52;
    return result;
  }
  v41 = 0;
  v42 = v95 + v104;
  while (1)
  {
    v43 = v100;
    v44 = (uint64_t)&v99[*(int *)(v100 + 48)];
    sub_243B6F8F0(v42, v44, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    v45 = *(int *)(v43 + 48);
    v46 = (uint64_t)v98;
    v47 = (uint64_t)v98 + v45;
    *v98 = v41;
    sub_243B6F934(v44, v47, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
    sub_243B6F9B4(v46, (uint64_t)v40, &qword_2572ECF58);
    v48 = *v40 + 1;
    if (__OFADD__(*v40, 1))
      break;
    if (v48 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_52;
    if (v48 > 0x7FFFFFFF)
      goto LABEL_53;
    sub_243B86D24((uint64_t)v40 + *(int *)(v100 + 48), v48, (uint64_t)v103);
    if (v49)
    {
      v73 = v49;
      if (sqlite3_errstr(v49))
      {
        v74 = sub_243BFD868();
        v76 = v75;
      }
      else
      {
        v74 = 4271950;
        v76 = 0xE300000000000000;
      }
      sub_243B6DB18();
      swift_allocError();
      *v78 = v73;
      v78[1] = v74;
      v78[2] = v76;
      swift_willThrow();
      sub_243B6F978((uint64_t)v91, &qword_2572ECF58);
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    ++v41;
    sub_243B6F978((uint64_t)v40, &qword_2572ECF58);
    v42 += v108;
    if (v39 == v41)
      goto LABEL_19;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  result = sub_243BFDF64();
  __break(1u);
  return result;
}

uint64_t PhotosFaceDatabase.unassociatedPhotos()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B7C1E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = PhotosFaceDatabase.queryPhotos(sql:bindings:)(0xD00000000000030DLL, 0x8000000243C07540, MEMORY[0x24BEE4AF8]);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_243B7C250(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_243B6DBA0(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = sub_243B935A0((uint64_t)v38, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v14 = v4[2];
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    result = sub_243B7F90C();
    *(_QWORD *)v1 = v4;
    return result;
  }
LABEL_16:
  v2 = v4[2];
  v3 = v38[0];
  v37 = v38[1];
  v13 = v39;
  v6 = v40;
  if (v41)
  {
    v17 = (v41 - 1) & v41;
    v18 = __clz(__rbit64(v41)) | (v40 << 6);
    v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  v32 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36)
    goto LABEL_13;
  v33 = *(_QWORD *)(v37 + 8 * v32);
  v34 = v6 + 1;
  if (!v33)
  {
    v34 = v6 + 2;
    if (v6 + 2 >= v36)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (!v33)
    {
      v34 = v6 + 3;
      if (v6 + 3 >= v36)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v6 + 4;
        if (v6 + 4 >= v36)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v6 + 5;
          if (v6 + 5 >= v36)
            goto LABEL_13;
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
          {
            v35 = v6 + 6;
            do
            {
              if (v36 == v35)
                goto LABEL_13;
              v33 = *(_QWORD *)(v37 + 8 * v35++);
            }
            while (!v33);
            v34 = v35 - 1;
          }
        }
      }
    }
  }
  v17 = (v33 - 1) & v33;
  v18 = __clz(__rbit64(v33)) + (v34 << 6);
  v6 = v34;
LABEL_18:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
  v21 = *v19;
  v20 = v19[1];
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v22 = v4[3];
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1)
      break;
    if (v2 < v23)
      goto LABEL_23;
LABEL_20:
    v4[2] = v2;
  }
  result = (uint64_t)sub_243B6DBA0((_QWORD *)(v22 > 1), v2 + 1, 1, v4);
  v4 = (_QWORD *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v23)
    goto LABEL_20;
  while (1)
  {
LABEL_23:
    v24 = &v4[2 * v2 + 4];
    *v24 = v21;
    v24[1] = v20;
    ++v2;
    if (v17)
    {
      v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v36)
      goto LABEL_45;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_45;
      v28 = *(_QWORD *)(v37 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_45;
        v28 = *(_QWORD *)(v37 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v36)
            goto LABEL_45;
          v28 = *(_QWORD *)(v37 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v36)
              goto LABEL_45;
            v28 = *(_QWORD *)(v37 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v36 != v30)
              {
                v28 = *(_QWORD *)(v37 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    v17 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_41:
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v26);
    v21 = *v31;
    v20 = v31[1];
    if (v2 >= v23)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_243B7C618(uint64_t a1)
{
  return sub_243B7C640(a1, (uint64_t (*)(void))sub_243B6E284, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

uint64_t sub_243B7C62C(uint64_t a1)
{
  return sub_243B7C640(a1, (uint64_t (*)(void))sub_243B6E2AC, type metadata accessor for StoredPhoto);
}

uint64_t sub_243B7C640(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B7C7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for StoredPhotoLayout(0);
  v43 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v38 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED518);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v38 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v17 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v41 = (unint64_t)(v18 + 63) >> 6;
  v42 = 0;
  v39 = v41 - 1;
  while (1)
  {
    if (v20)
    {
      v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v22 = v21 | (v42 << 6);
LABEL_8:
      v23 = *(_QWORD *)(a1 + 56);
      *v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v22);
      v24 = v23 + *(_QWORD *)(v43 + 72) * v22;
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
      sub_243B6F8F0(v24, (uint64_t)v13 + *(int *)(v25 + 48), type metadata accessor for StoredPhotoLayout);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
      goto LABEL_30;
    }
    v26 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v26 < v41)
    {
      v27 = *(_QWORD *)(v40 + 8 * v26);
      if (v27)
        goto LABEL_12;
      v28 = v42 + 2;
      ++v42;
      if (v26 + 1 < v41)
      {
        v27 = *(_QWORD *)(v40 + 8 * v28);
        if (v27)
          goto LABEL_15;
        v42 = v26 + 1;
        if (v26 + 2 < v41)
        {
          v27 = *(_QWORD *)(v40 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_12;
          }
          v42 = v26 + 2;
          if (v26 + 3 < v41)
          {
            v27 = *(_QWORD *)(v40 + 8 * (v26 + 3));
            if (v27)
            {
              v26 += 3;
              goto LABEL_12;
            }
            v28 = v26 + 4;
            v42 = v26 + 3;
            if (v26 + 4 < v41)
              break;
          }
        }
      }
    }
LABEL_29:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
    v20 = 0;
LABEL_30:
    sub_243B6F9B4((uint64_t)v13, (uint64_t)v16, &qword_2572ED518);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
    v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v16, 1, v30);
    v32 = v31 == 1;
    if (v31 == 1)
      return v32;
    v33 = (uint64_t)v16 + *(int *)(v30 + 48);
    v34 = *v16;
    sub_243B6F934(v33, (uint64_t)v9, type metadata accessor for StoredPhotoLayout);
    v35 = sub_243B7CE78(v34);
    if ((v36 & 1) == 0)
    {
      sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayout);
      return 0;
    }
    sub_243B6F8F0(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v43 + 72) * v35, (uint64_t)v7, type metadata accessor for StoredPhotoLayout);
    v37 = _s10PhotosFace17StoredPhotoLayoutV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v9);
    sub_243B7FA20((uint64_t)v7, type metadata accessor for StoredPhotoLayout);
    result = sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayout);
    if ((v37 & 1) == 0)
      return v32;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
LABEL_15:
    v26 = v28;
LABEL_12:
    v20 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v26 << 6);
    v42 = v26;
    goto LABEL_8;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v41)
    {
      v42 = v39;
      goto LABEL_29;
    }
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_243B7CBA0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF3DB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CBBC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F1C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CBD8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F30(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CBF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F44(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC10(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F58(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC2C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F6C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC48(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F80(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC64(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF3F94(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC80(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF411C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CC9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4130(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CCB8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4144(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CCD4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4158(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CCF0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF416C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CD0C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF42D4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CD28(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF4430(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CD44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF443C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CD60(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4448(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CD7C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF445C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CD98(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF4468(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CDB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF45CC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CDD0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF4754(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CDEC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF48B8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CE08(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF48CC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CE24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4A54(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_243B7CE40(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_243BF4C48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_243B7CE5C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_243BF4DA4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

unint64_t sub_243B7CE78(uint64_t a1)
{
  uint64_t v2;

  sub_243BFE1A4();
  sub_243BFE1B0();
  v2 = sub_243BFE1E0();
  return sub_243B7D0D8(a1, v2);
}

unint64_t sub_243B7CED0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_243BFE198();
  return sub_243B7D0D8(a1, v2);
}

unint64_t sub_243B7CF00(uint64_t a1)
{
  return sub_243B7CF0C(a1, &qword_2572ED118);
}

unint64_t sub_243B7CF0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v6[4];

  sub_243BFE1A4();
  StoredPhoto.hash(into:)(v6);
  v4 = sub_243BFE1E0();
  return sub_243B7D174(a1, v4, a2);
}

unint64_t sub_243B7CF78(uint64_t a1)
{
  uint64_t v2;

  sub_243BFD280();
  sub_243B7F914(&qword_2572ED530, MEMORY[0x24BDCEA88]);
  v2 = sub_243BFD79C();
  return sub_243B7D330(a1, v2);
}

unint64_t sub_243B7CFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_243BFE1A4();
  sub_243BFD850();
  v4 = sub_243BFE1E0();
  return sub_243B7D468(a1, a2, v4);
}

unint64_t sub_243B7D040(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x24950253C](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_243B7D548(a1, v3);
}

unint64_t sub_243B7D074(char a1)
{
  uint64_t v2;

  sub_243BFE1A4();
  sub_243BFE1B0();
  v2 = sub_243BFE1E0();
  return sub_243B7D5E4(a1, v2);
}

unint64_t sub_243B7D0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_243B7D174(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_243B50168(*(_QWORD *)(v3 + 48) + v14 * v12, (uint64_t)v10, a3);
      if ((sub_243BFD250() & 1) != 0)
      {
        v15 = (int *)type metadata accessor for StoredPhoto(0);
        if ((sub_243BFD214() & 1) != 0
          && *(double *)&v10[v15[6]] == *(double *)(a1 + v15[6])
          && *(_QWORD *)&v10[v15[7]] == *(_QWORD *)(a1 + v15[7])
          && (sub_243B7C7B8(*(_QWORD *)&v10[v15[8]], *(_QWORD *)(a1 + v15[8])) & 1) != 0)
        {
          v16 = v15[9];
          v17 = &v10[v16];
          v18 = *(_QWORD *)&v10[v16 + 8];
          v19 = (_QWORD *)(a1 + v16);
          v20 = v19[1];
          if (v18)
          {
            if (v20 && (*(_QWORD *)v17 == *v19 && v18 == v20 || (sub_243BFE0F0() & 1) != 0))
            {
LABEL_16:
              sub_243B6F978((uint64_t)v10, a3);
              return v12;
            }
          }
          else if (!v20)
          {
            goto LABEL_16;
          }
        }
      }
      sub_243B6F978((uint64_t)v10, a3);
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

unint64_t sub_243B7D330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_243B7F914(&qword_2572ED538, MEMORY[0x24BDCEA98]);
      v14 = sub_243BFD7D8();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_243B7D468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_243BFE0F0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_243BFE0F0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_243B7D548(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_243B7D5E4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = qword_243BFFE88[a1];
    v8 = *(_QWORD *)(v2 + 48);
    if (qword_243BFFE88[*(char *)(v8 + result)] != v7)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (qword_243BFFE88[*(char *)(v8 + result)] == v7)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_243B7D698(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for StoredPhotoLayout(0);
  v58 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v53 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = (uint64_t)v15 + *(int *)(result + 48);
    v53 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v54 = a1;
    v57 = *(_QWORD *)(v13 + 72);
    sub_243B50168(a1 + v53, (uint64_t)v15, &qword_2572EBA28);
    v18 = *v15;
    v56 = v17;
    sub_243B6F934(v17, (uint64_t)v10, type metadata accessor for StoredPhotoLayout);
    v19 = (_QWORD *)*a3;
    v21 = sub_243B7CE78(v18);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v25 = v20;
    if (v19[3] < v24)
    {
      sub_243BA0DBC(v24, a2 & 1);
      v26 = sub_243B7CE78(v18);
      if ((v25 & 1) != (v27 & 1))
      {
LABEL_26:
        type metadata accessor for PFCTimePosition(0);
        result = sub_243BFE138();
        __break(1u);
        return result;
      }
      v21 = v26;
      v28 = (_QWORD *)*a3;
      if ((v25 & 1) == 0)
        goto LABEL_11;
LABEL_9:
      v29 = v53;
      v30 = v28[7];
      v31 = *(_QWORD *)(v58 + 72) * v21;
      v32 = v55;
      sub_243B6F8F0(v30 + v31, v55, type metadata accessor for StoredPhotoLayout);
      sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhotoLayout);
      result = sub_243B7F95C(v32, *(_QWORD *)(*a3 + 56) + v31);
LABEL_13:
      v36 = v16 - 1;
      if (v16 == 1)
        return result;
      v37 = v54 + v57 + v29;
      while (1)
      {
        sub_243B50168(v37, (uint64_t)v15, &qword_2572EBA28);
        v41 = *v15;
        sub_243B6F934(v56, (uint64_t)v10, type metadata accessor for StoredPhotoLayout);
        v42 = *a3;
        v43 = sub_243B7CE78(v41);
        v45 = *(_QWORD *)(v42 + 16);
        v46 = (v44 & 1) == 0;
        v34 = __OFADD__(v45, v46);
        v47 = v45 + v46;
        if (v34)
          goto LABEL_24;
        v48 = v44;
        if (*(_QWORD *)(v42 + 24) < v47)
        {
          sub_243BA0DBC(v47, 1);
          v43 = sub_243B7CE78(v41);
          if ((v48 & 1) != (v49 & 1))
            goto LABEL_26;
        }
        v50 = (_QWORD *)*a3;
        if ((v48 & 1) != 0)
        {
          v38 = v50[7];
          v39 = *(_QWORD *)(v58 + 72) * v43;
          v40 = v55;
          sub_243B6F8F0(v38 + v39, v55, type metadata accessor for StoredPhotoLayout);
          sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhotoLayout);
          result = sub_243B7F95C(v40, *(_QWORD *)(*a3 + 56) + v39);
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          *(_QWORD *)(v50[6] + 8 * v43) = v41;
          result = sub_243B6F934((uint64_t)v10, v50[7] + *(_QWORD *)(v58 + 72) * v43, type metadata accessor for StoredPhotoLayout);
          v51 = v50[2];
          v34 = __OFADD__(v51, 1);
          v52 = v51 + 1;
          if (v34)
            goto LABEL_25;
          v50[2] = v52;
        }
        v37 += v57;
        if (!--v36)
          return result;
      }
    }
    if ((a2 & 1) != 0)
    {
      v28 = (_QWORD *)*a3;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_243BF9C14();
      v28 = (_QWORD *)*a3;
      if ((v25 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v28[(v21 >> 6) + 8] |= 1 << v21;
    *(_QWORD *)(v28[6] + 8 * v21) = v18;
    result = sub_243B6F934((uint64_t)v10, v28[7] + *(_QWORD *)(v58 + 72) * v21, type metadata accessor for StoredPhotoLayout);
    v33 = v28[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v29 = v53;
    v28[2] = v35;
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_243B7DA78(uint64_t a1, uint64_t (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, char *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v47 = a3;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
  v5 = MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v43 = (_QWORD *)((char *)v36 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)v36 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v36[1] = v3;
  v49 = MEMORY[0x24BEE4AF8];
  sub_243B7CC64(0, v10, 0);
  result = sub_243BE4C6C(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v37 = a1 + 80;
  v38 = v10;
  v40 = a1 + 64;
  v41 = a1;
  v39 = v13;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v19 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_26;
    v48 = v15;
    v20 = v45;
    v21 = v42;
    v22 = (uint64_t)&v42[*(int *)(v45 + 48)];
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    v25 = type metadata accessor for StoredPhotoLayout(0);
    sub_243B6F8F0(v23 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v14, v22, type metadata accessor for StoredPhotoLayout);
    *v21 = v24;
    v26 = (uint64_t)v43;
    *v43 = v24;
    sub_243B6F8F0(v22, v26 + *(int *)(v20 + 48), type metadata accessor for StoredPhotoLayout);
    v27 = v44;
    sub_243B6F9B4(v26, (uint64_t)v44, &qword_2572ED520);
    sub_243B6F978((uint64_t)v21, &qword_2572ED520);
    v28 = v46(*(_QWORD *)v27, &v27[*(int *)(v20 + 48)]);
    sub_243B6F978((uint64_t)v27, &qword_2572ED520);
    v11 = v49;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_243B7CC64(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v49;
    }
    v30 = *(_QWORD *)(v11 + 16);
    v29 = *(_QWORD *)(v11 + 24);
    if (v30 >= v29 >> 1)
    {
      result = sub_243B7CC64(v29 > 1, v30 + 1, 1);
      v11 = v49;
    }
    *(_QWORD *)(v11 + 16) = v30 + 1;
    *(_QWORD *)(v11 + 8 * v30 + 32) = v28;
    a1 = v41;
    v17 = 1 << *(_BYTE *)(v41 + 32);
    if (v14 >= v17)
      goto LABEL_27;
    v16 = v40;
    v31 = *(_QWORD *)(v40 + 8 * v19);
    if ((v31 & (1 << v14)) == 0)
      goto LABEL_28;
    LODWORD(v13) = v39;
    if (*(_DWORD *)(v41 + 36) != (_DWORD)v39)
      goto LABEL_29;
    v32 = v31 & (-2 << (v14 & 0x3F));
    if (v32)
    {
      v17 = __clz(__rbit64(v32)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v18 = v38;
    }
    else
    {
      v33 = v19 + 1;
      v34 = (unint64_t)(v17 + 63) >> 6;
      v18 = v38;
      if (v19 + 1 < v34)
      {
        v35 = *(_QWORD *)(v40 + 8 * v33);
        if (v35)
        {
LABEL_22:
          v17 = __clz(__rbit64(v35)) + (v33 << 6);
        }
        else
        {
          while (v34 - 2 != v19)
          {
            v35 = *(_QWORD *)(v37 + 8 * v19++);
            if (v35)
            {
              v33 = v19 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v15 = v48 + 1;
    v14 = v17;
    if (v48 + 1 == v18)
      return v11;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243B7DDD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED548);
  v43 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v44 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0F0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v36 - v9;
  v11 = (_QWORD *)MEMORY[0x24BEE4B00];
  v45 = (_QWORD *)MEMORY[0x24BEE4B00];
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return (uint64_t)v11;
  v36 = v2;
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = a1 + v14;
  v16 = *(_QWORD *)(v8 + 72);
  v38 = v13 | 7;
  v39 = v16 + v14;
  v37 = xmmword_243BFFAC0;
  v41 = (char *)&v36 - v9;
  v42 = v7;
  v40 = v14;
  while (1)
  {
    sub_243B50168(v15, (uint64_t)v10, &qword_2572ED0F0);
    v17 = v44;
    sub_243B6F8F0((uint64_t)v10, v44, type metadata accessor for StoredPhoto);
    v19 = sub_243B7CF0C(v17, &qword_2572ED548);
    v20 = v11[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v11[3] < v22)
    {
      sub_243BA1110(v22, 1);
      v11 = v45;
      v24 = sub_243B7CF0C(v44, &qword_2572ED548);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_19;
      v19 = v24;
    }
    if ((v23 & 1) != 0)
    {
      sub_243B6F978(v44, &qword_2572ED548);
      v11 = v45;
      v26 = v45[7];
      sub_243B6F9B4((uint64_t)v10, (uint64_t)v7, &qword_2572ED0F0);
      v27 = *(_QWORD *)(v26 + 8 * v19);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v26 + 8 * v19) = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = sub_243B6E13C(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
        *(_QWORD *)(v26 + 8 * v19) = v27;
      }
      v30 = *(_QWORD *)(v27 + 16);
      v29 = *(_QWORD *)(v27 + 24);
      if (v30 >= v29 >> 1)
      {
        v27 = sub_243B6E13C(v29 > 1, v30 + 1, 1, v27);
        *(_QWORD *)(v26 + 8 * v19) = v27;
      }
      *(_QWORD *)(v27 + 16) = v30 + 1;
      v14 = v40;
      v7 = v42;
      sub_243B6F9B4((uint64_t)v42, v27 + v40 + v30 * v16, &qword_2572ED0F0);
      v10 = v41;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED0E8);
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = v37;
      sub_243B6F9B4((uint64_t)v10, v31 + v14, &qword_2572ED0F0);
      v11[(v19 >> 6) + 8] |= 1 << v19;
      sub_243B6F9B4(v44, v11[6] + *(_QWORD *)(v43 + 72) * v19, &qword_2572ED548);
      *(_QWORD *)(v11[7] + 8 * v19) = v31;
      v32 = v11[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_18;
      v11[2] = v34;
    }
    v15 += v16;
    if (!--v12)
      return (uint64_t)v11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

unint64_t sub_243B7E110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572ED3A0;
  if (!qword_2572ED3A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572ED398);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2572ED3A0);
  }
  return result;
}

uint64_t sub_243B7E15C(uint64_t *a1)
{
  uint64_t v1;

  return sub_243B7AC18(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B7E174()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for StoredPhoto(319);
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_243B7E1FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = sub_243BFD22C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = ((((((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v15
      + 16;
  v17 = v15 | *(_DWORD *)(v6 + 80) & 0xF8 | v10;
  if (v17 > 7
    || ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || (v16 & ~v15) + *(_QWORD *)(v14 + 64) > 0x18)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
    swift_retain();
  }
  else
  {
    v21 = v8;
    v22 = ~v10;
    v33 = ~v15;
    v34 = v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v22, ((unint64_t)a2 + v11) & v22, v21);
    v23 = (_QWORD *)((v12 + (((unint64_t)a1 + v11) & v22)) & 0xFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((v12 + (((unint64_t)a2 + v11) & v22)) & 0xFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v29[1] = v30[1];
    v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(((unint64_t)a1 + v16) & v33, ((unint64_t)a2 + v16) & v33, v34);
  }
  return a1;
}

uint64_t sub_243B7E3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_243BFD280();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_243BFD22C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))((v6 + v9 + a1) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64) + 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + ((((((((v10 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_243B7E4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = sub_243BFD22C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, (v12 + a2) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + ((v12 + a2) & ~v11)) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v21[1] = v22[1];
  v23 = *(_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = ((((((((v14 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v25
      + 16;
  v27 = (v26 + a1) & ~v25;
  v28 = (v26 + a2) & ~v25;
  v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29(v27, v28, v23);
  return a1;
}

uint64_t sub_243B7E648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = sub_243BFD22C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, (v12 + a2) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + ((v12 + a2) & ~v11)) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v18 += 15;
  *(_QWORD *)v17 = v19;
  v17 += 15;
  v20 = (v18 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFF8);
  v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  *v22 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  v22[1] = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = ((((((((v14 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v24
      + 16;
  (*(void (**)(unint64_t, unint64_t))(v23 + 24))((v25 + a1) & ~v24, (v25 + a2) & ~v24);
  return a1;
}

uint64_t sub_243B7E7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = sub_243BFD22C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, (v12 + a2) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + ((v12 + a2) & ~v11)) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = ((((((((v14 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v22
      + 16;
  (*(void (**)(unint64_t, unint64_t))(v21 + 32))((v23 + a1) & ~v22, (v23 + a2) & ~v22);
  return a1;
}

uint64_t sub_243B7E8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = sub_243BFD22C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11;
  v13 = (v8 + v11 + a1) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, (v12 + a2) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (_QWORD *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + ((v12 + a2) & ~v11)) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v18 += 15;
  *v17 = v19;
  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (v18 & 0xFFFFFFFFFFFFF8) + 15;
  *v20 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  v22[1] = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = ((((((((v14 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v24
      + 16;
  (*(void (**)(unint64_t, unint64_t))(v23 + 40))((v25 + a1) & ~v24, (v25 + a2) & ~v24);
  return a1;
}

uint64_t sub_243B7EA44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  unsigned int v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t (*v32)(unint64_t, uint64_t, uint64_t);
  unint64_t v33;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = sub_243BFD22C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 84);
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = *(_DWORD *)(v15 + 84);
  if (!a2)
    return 0;
  v18 = v9;
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = *(_QWORD *)(v7 + 64) + v19;
  v21 = *(_QWORD *)(v10 + 64) + 7;
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = ((((((((v21 + (v20 & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v22
      + 16;
  if (a2 <= v17)
    goto LABEL_30;
  v24 = (v23 & ~v22) + *(_QWORD *)(v15 + 64);
  v25 = 8 * v24;
  if (v24 > 3)
    goto LABEL_13;
  v28 = ((a2 - v17 + ~(-1 << v25)) >> v25) + 1;
  if (HIWORD(v28))
  {
    v26 = *(_DWORD *)(a1 + v24);
    if (v26)
      goto LABEL_21;
  }
  else
  {
    if (v28 <= 0xFF)
    {
      if (v28 < 2)
        goto LABEL_30;
LABEL_13:
      v26 = *(unsigned __int8 *)(a1 + v24);
      if (!*(_BYTE *)(a1 + v24))
        goto LABEL_30;
LABEL_21:
      v29 = (v26 - 1) << v25;
      if (v24 > 3)
        v29 = 0;
      if ((_DWORD)v24)
      {
        if (v24 <= 3)
          v30 = (v23 & ~(_DWORD)v22) + *(_DWORD *)(v15 + 64);
        else
          v30 = 4;
        __asm { BR              X12 }
      }
      return v17 + v29 + 1;
    }
    v26 = *(unsigned __int16 *)(a1 + v24);
    if (*(_WORD *)(a1 + v24))
      goto LABEL_21;
  }
LABEL_30:
  if (v13 < v16)
  {
    v31 = (v23 + a1) & ~v22;
    v32 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
    v11 = *(unsigned int *)(v15 + 84);
    return v32(v31, v11, v14);
  }
  if ((_DWORD)v8 == v13)
  {
    v32 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v31 = a1;
    v11 = v8;
    v14 = v6;
    return v32(v31, v11, v14);
  }
  v31 = (v20 + a1) & ~v19;
  if ((_DWORD)v11 == v13)
  {
    v32 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    v14 = v18;
    return v32(v31, v11, v14);
  }
  v33 = *(_QWORD *)((((((v21 + v31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  if (v33 >= 0xFFFFFFFF)
    LODWORD(v33) = -1;
  return (v33 + 1);
}

void sub_243B7EC98(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v8 = *(_QWORD *)(sub_243BFD280() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(sub_243BFD22C() - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v13 + 84) <= v12)
    v14 = v12;
  else
    v14 = *(_DWORD *)(v13 + 84);
  v15 = ((((((((((*(_QWORD *)(v10 + 64)
                + 7
                + ((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16
        + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(_QWORD *)(v13 + 64);
  if (a3 <= v14)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 - v14 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (v14 < a2)
  {
    v17 = ~v14 + a2;
    if (v15 < 4)
    {
      if ((_DWORD)v15)
      {
        v19 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if ((_DWORD)v15 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if ((_DWORD)v15 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

_QWORD *sub_243B7EF9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD280();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_243BFD22C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
    v13 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[11];
    *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
    *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
    v15 = a3[13];
    *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
    v16 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
    v17 = a3[17];
    *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
    *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
    v18 = a3[19];
    *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
    *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
    v19 = a3[21];
    *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
    *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
    v20 = a3[23];
    *(_QWORD *)((char *)a1 + a3[22]) = *(_QWORD *)((char *)a2 + a3[22]);
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_243B7F10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B7F180(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_243B7F2C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + a3[21]) = *(_QWORD *)(a2 + a3[21]);
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  v11 = a3[23];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_243B7F440(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_243B7F578(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  v17 = a3[19];
  *(_QWORD *)(a1 + a3[18]) = *(_QWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v18 = a3[21];
  *(_QWORD *)(a1 + a3[20]) = *(_QWORD *)(a2 + a3[20]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[23];
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_243B7F6C0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B7F6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_243BFD22C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 92) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_243B7F784()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B7F790(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_243BFD280();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_243BFD22C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 92) + 8) = a2;
  return result;
}

uint64_t sub_243B7F838()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_243BFD280();
  if (v1 <= 0x3F)
  {
    result = sub_243BFD22C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_243B7F8FC()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B7F90C()
{
  return swift_release();
}

uint64_t sub_243B7F914(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_243BFD280();
    result = MEMORY[0x249502B6C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_243B7F954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_243B7A8B8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_243B7F95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoredPhotoLayout(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_243B7F9A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_243B79B84(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_243B7F9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_243B7FA04(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_243B77F38(a1, *(void (**)(sqlite3_stmt **))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_243B7FA20(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for DatabaseBinding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = sub_243BFD22C();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v10 = sub_243BFD190();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v13 = *a2;
        v12 = a2[1];
        sub_243B7FBDC(v13, v12);
        *a1 = v13;
        a1[1] = v12;
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v14 = sub_243BFD280();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_243B7FBDC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for DatabaseBinding(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = sub_243BFD22C();
      goto LABEL_7;
    case 3:
      v3 = sub_243BFD190();
      goto LABEL_7;
    case 4:
      return swift_bridgeObjectRelease();
    case 6:
      return sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    case 7:
      v3 = sub_243BFD280();
LABEL_7:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_243B7FCC0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t *initializeWithCopy for DatabaseBinding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = sub_243BFD22C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_8;
    case 3u:
      v7 = sub_243BFD190();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_8;
    case 4u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 6u:
      v10 = *a2;
      v9 = a2[1];
      sub_243B7FBDC(v10, v9);
      *a1 = v10;
      a1[1] = v9;
      goto LABEL_8;
    case 7u:
      v11 = sub_243BFD280();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for DatabaseBinding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_243B7FFAC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = sub_243BFD22C();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 3u:
        v7 = sub_243BFD190();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        v9 = *a2;
        v8 = a2[1];
        sub_243B7FBDC(v9, v8);
        *a1 = v9;
        a1[1] = v8;
        goto LABEL_9;
      case 7u:
        v10 = sub_243BFD280();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_243B7FFAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DatabaseBinding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DatabaseBinding()
{
  uint64_t result;

  result = qword_2572ED5C0;
  if (!qword_2572ED5C0)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for DatabaseBinding(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 7)
  {
    v8 = sub_243BFD280();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 3)
  {
    v9 = sub_243BFD190();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_243BFD22C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for DatabaseBinding(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_243B7FFAC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 7)
    {
      v8 = sub_243BFD280();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 3)
    {
      v9 = sub_243BFD190();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_243BFD22C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseBinding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for DatabaseBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_243B80250()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_243B80260()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_243BFD22C();
  if (v1 <= 0x3F)
  {
    result = sub_243BFD190();
    if (v2 <= 0x3F)
    {
      result = sub_243BFD280();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.insert(sql:bindings:)(Swift::String sql, Swift::OpaquePointer bindings)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  void *rawValue;
  uint64_t v49;
  uint64_t v50;
  sqlite3_stmt *v51;
  uint64_t v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (_QWORD *)((char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v45 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (_QWORD *)((char *)v45 - v12);
  v52 = *v2;
  v14 = sub_243B81BB0();
  if (v3)
    return;
  v15 = v14;
  v47 = *((_QWORD *)bindings._rawValue + 2);
  if (!v47)
    goto LABEL_21;
  v45[1] = 0;
  v16 = (char *)bindings._rawValue + 32;
  swift_bridgeObjectRetain();
  v17 = 0;
  rawValue = bindings._rawValue;
  v51 = v15;
  v46 = (char *)bindings._rawValue + 32;
  while (1)
  {
    v18 = *(_QWORD *)&v16[8 * v17];
    v19 = *(_QWORD *)(v18 + 16);
    v49 = v17;
    v50 = v18;
    swift_bridgeObjectRetain_n();
    if (v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
      v22 = v50 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      v23 = *(_QWORD *)(v21 + 72);
      while (1)
      {
        v24 = (uint64_t)&v11[*(int *)(v5 + 48)];
        sub_243B6F8F0(v22, v24, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
        v25 = (uint64_t)v13 + *(int *)(v5 + 48);
        *v13 = v20;
        sub_243B81CE4(v24, v25);
        sub_243B81D28((uint64_t)v13, (uint64_t)v8);
        v26 = *v8 + 1;
        if (__OFADD__(*v8, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          return;
        }
        if (v26 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_32;
        if (v26 > 0x7FFFFFFF)
          goto LABEL_33;
        sub_243B86D24((uint64_t)v8 + *(int *)(v5 + 48), v26, (uint64_t)v51);
        if (v27)
          break;
        ++v20;
        sub_243B6F978((uint64_t)v8, &qword_2572ECF58);
        v22 += v23;
        if (v19 == v20)
          goto LABEL_11;
      }
      v30 = v27;
      if (sqlite3_errstr(v27))
      {
        v31 = sub_243BFD868();
        v33 = v32;
      }
      else
      {
        v31 = 4271950;
        v33 = 0xE300000000000000;
      }
      sub_243B6DB18();
      swift_allocError();
      *v34 = v30;
      v34[1] = v31;
      v34[2] = v33;
      swift_willThrow();
      sub_243B6F978((uint64_t)v8, &qword_2572ECF58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v51;
      goto LABEL_19;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    v15 = v51;
    sub_243B8693C(v51);
    v28 = sqlite3_step(v15);
    if (v28 != 101)
    {
      v35 = v28;
      if (sqlite3_errstr(v28))
      {
        v36 = sub_243BFD868();
        v38 = v37;
      }
      else
      {
        v36 = 4271950;
        v38 = 0xE300000000000000;
      }
      sub_243B6DB18();
      swift_allocError();
      *v43 = v35 | 0x4000000000000000;
      v43[1] = v36;
      v43[2] = v38;
      swift_willThrow();
LABEL_19:
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    v29 = sqlite3_reset(v15);
    if (v29)
      break;
    v17 = v49 + 1;
    v16 = v46;
    if (v49 + 1 == v47)
      goto LABEL_20;
  }
  v39 = v29;
  if (sqlite3_errstr(v29))
  {
    v40 = sub_243BFD868();
    v42 = v41;
  }
  else
  {
    v40 = 4271950;
    v42 = 0xE300000000000000;
  }
  sub_243B6DB18();
  swift_allocError();
  *v44 = v39 | 0x8000000000000000;
  v44[1] = v40;
  v44[2] = v42;
  swift_willThrow();
  v15 = v51;
LABEL_20:
  swift_bridgeObjectRelease();
LABEL_21:
  sub_243B86B4C(v15);
}

uint64_t DatabaseConnection.query<A>(sql:bindings:step:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(sqlite3_stmt **), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;

  v11 = sub_243B81BB0();
  if (!v6)
  {
    v12 = v11;
    a6 = sub_243B85F7C(a3, a4, a5, v11, a6);
    sub_243B86B4C(v12);
  }
  return a6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.delete(sql:bindings:)(Swift::String sql, Swift::OpaquePointer bindings)
{
  uint64_t v2;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;

  v4 = sub_243B81BB0();
  if (!v2)
  {
    v5 = v4;
    sub_243B86334((uint64_t)bindings._rawValue, v4);
    sub_243B86B4C(v5);
  }
}

uint64_t static DatabaseConnection.open(location:)@<X0>(uint64_t a1@<X0>, sqlite3 **a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  sqlite3 *ppDb[2];

  ppDb[1] = *(sqlite3 **)MEMORY[0x24BDAC8D0];
  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v34 - v10;
  v12 = type metadata accessor for DatabaseConnection.Location();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ppDb[0] = 0;
  sub_243B6F8F0(a1, (uint64_t)v14, v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16) == 1)
  {
    v17 = 0xE800000000000000;
    v18 = 0x3A79726F6D656D3ALL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v14, v5);
    sub_243BFD148();
    v18 = sub_243BFD118();
    v17 = v19;
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v9, v5);
    v20(v11, v5);
  }
  if (qword_2543CE3C8 != -1)
    swift_once();
  v21 = sub_243BFD598();
  __swift_project_value_buffer(v21, (uint64_t)qword_2543CE3A8);
  swift_bridgeObjectRetain_n();
  v22 = sub_243BFD580();
  v23 = sub_243BFDCB8();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v35 = v25;
    v34[1] = v2;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain();
    v34[2] = sub_243B739A8(v18, v17, &v35);
    sub_243BFDD54();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_243B4B000, v22, v23, "Opening database connection: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v25, -1, -1);
    MEMORY[0x249502C5C](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v26 = sub_243BFD844();
  swift_bridgeObjectRelease();
  v27 = sqlite3_open_v2((const char *)(v26 + 32), ppDb, 6, 0);
  result = swift_release();
  if (v27)
  {
    if (sqlite3_errstr(v27))
    {
      v29 = sub_243BFD868();
      v31 = v30;
    }
    else
    {
      v31 = 0xE300000000000000;
      v29 = 4271950;
    }
    sub_243B83414();
    swift_allocError();
    *(_QWORD *)v32 = v27;
    *(_QWORD *)(v32 + 8) = v29;
    *(_QWORD *)(v32 + 16) = v31;
    *(_BYTE *)(v32 + 24) = 0;
  }
  else
  {
    if (ppDb[0])
    {
      *a2 = ppDb[0];
      return result;
    }
    sub_243B83414();
    swift_allocError();
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)v33 = 0;
    *(_BYTE *)(v33 + 24) = 4;
  }
  return swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.migrate(bundle:migrations:)(NSBundle bundle, Swift::OpaquePointer migrations)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  id v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  Swift::String v70;
  void *v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  int v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  unint64_t v107;
  char *v108;
  _QWORD *rawValue;
  Class isa;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;

  v4 = v3;
  rawValue = migrations._rawValue;
  isa = bundle.super.isa;
  v5 = sub_243BFD82C();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_243BFD190();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v91 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v112 = (char *)&v91 - v19;
  v20 = *v2;
  v118 = *v2;
  v21 = sub_243B81BB0();
  if (!v3)
  {
    v22 = v21;
    v105 = v11;
    v23 = rawValue;
    v101 = v18;
    v108 = v15;
    v102 = v12;
    v100 = v10;
    sub_243B8693C(v21);
    v24 = sqlite3_step(v22);
    v103 = v20;
    v98 = v7;
    if (v24 == 101)
    {
      v27 = 0;
    }
    else
    {
      v25 = v24;
      if (v24 != 100)
      {
        if (sqlite3_errstr(v24))
        {
          v28 = sub_243BFD868();
          v30 = v29;
        }
        else
        {
          v30 = 0xE300000000000000;
          v28 = 4271950;
        }
        sub_243B6DB18();
        swift_allocError();
        *v80 = v25 | 0xA000000000000000;
        v80[1] = v28;
        v80[2] = v30;
        goto LABEL_35;
      }
      if (sqlite3_column_type(v22, 0) == 5)
      {
        sub_243B6DB5C();
        swift_allocError();
        *(_DWORD *)v26 = 0;
        *(_BYTE *)(v26 + 4) = 0;
LABEL_35:
        swift_willThrow();
        sub_243B86B4C(v22);
        return;
      }
      v27 = sqlite3_column_int(v22, 0);
    }
    sub_243B86B4C(v22);
    v119 = v27;
    v31 = v105;
    if (qword_2543CE3C8 != -1)
      goto LABEL_50;
LABEL_11:
    v32 = sub_243BFD598();
    v104 = __swift_project_value_buffer(v32, (uint64_t)qword_2543CE3A8);
    v33 = sub_243BFD580();
    v34 = sub_243BFDCB8();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v35 = 134217984;
      swift_beginAccess();
      v118 = v119;
      sub_243BFDD54();
      _os_log_impl(&dword_243B4B000, v33, v34, "Current version is %ld", v35, 0xCu);
      MEMORY[0x249502C5C](v35, -1, -1);
    }

    v36 = v23;
    v37 = v108;
    v38 = v101;
    v39 = v23[2];
    v40 = v102;
    if (!v39)
      return;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v41 = 0;
    v91 = &v116;
    v42 = (unsigned __int8 *)(v36 + 6);
    *(_QWORD *)&v43 = 136315138;
    v95 = v43;
    v92 = MEMORY[0x24BEE4AD8] + 8;
    v94 = 0xD000000000000027;
    v93 = (void *)0x8000000243C07CF0;
    v96 = v39;
    while (1)
    {
      v44 = v41++;
      if (v44 == v119)
      {
        v111 = v41;
        v45 = *((_QWORD *)v42 - 2);
        v46 = *((_QWORD *)v42 - 1);
        v99 = *v42;
        swift_bridgeObjectRetain();
        v97 = v45;
        v107 = v46;
        v47 = (void *)sub_243BFD7F0();
        v48 = (void *)sub_243BFD7F0();
        v49 = -[objc_class URLForResource:withExtension:](isa, sel_URLForResource_withExtension_, v47, v48, v91, v92);

        if (!v49)
        {
          v51 = (uint64_t)v100;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v100, 1, 1, v31);
LABEL_37:
          sub_243B6F978(v51, &qword_2543CDE68);
          sub_243B83414();
          swift_allocError();
          v81 = v107;
          *(_QWORD *)v82 = v97;
          *(_QWORD *)(v82 + 8) = v81;
          *(_QWORD *)(v82 + 16) = 0;
          *(_BYTE *)(v82 + 24) = 3;
          swift_bridgeObjectRetain();
          swift_willThrow();
          swift_bridgeObjectRelease();
LABEL_39:
          swift_bridgeObjectRelease();
          return;
        }
        sub_243BFD160();

        v50 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
        v51 = (uint64_t)v100;
        v50(v100, v38, v31);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v51, 0, 1, v31);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v51, 1, v31) == 1)
          goto LABEL_37;
        v52 = v112;
        v50(v112, (char *)v51, v31);
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v52, v31);
        v53 = sub_243BFD580();
        v54 = sub_243BFDCB8();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = v31;
          v56 = swift_slowAlloc();
          v57 = v4;
          v58 = v40;
          v59 = swift_slowAlloc();
          v117._countAndFlagsBits = v59;
          *(_DWORD *)v56 = v95;
          sub_243B7402C();
          v60 = sub_243BFE0A8();
          *(_QWORD *)(v56 + 4) = sub_243B739A8(v60, v61, &v117._countAndFlagsBits);
          swift_bridgeObjectRelease();
          v62 = *(void (**)(char *, uint64_t))(v58 + 8);
          v4 = v57;
          v37 = v108;
          v63 = v55;
          v38 = v101;
          v106 = v62;
          v62(v108, v63);
          _os_log_impl(&dword_243B4B000, v53, v54, "Running migration: %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x249502C5C](v59, -1, -1);
          MEMORY[0x249502C5C](v56, -1, -1);
        }
        else
        {
          v106 = *(void (**)(char *, uint64_t))(v40 + 8);
          v106(v37, v31);
        }

        sub_243BFD820();
        v64 = sub_243BFD7E4();
        if (v4)
        {
          swift_bridgeObjectRelease();
          v106(v112, v105);
          goto LABEL_39;
        }
        v117._countAndFlagsBits = v64;
        v117._object = v65;
        v115 = 63;
        v116 = 0xE100000000000000;
        v113 = v111;
        v113 = sub_243BFE0A8();
        v114 = v66;
        sub_243B4DDA4();
        v67 = sub_243BFDD6C();
        v69 = v68;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = (_QWORD *)v103;
        v117._countAndFlagsBits = v103;
        v70._countAndFlagsBits = v67;
        v70._object = v69;
        DatabaseConnection.execute(sql:)(v70);
        v4 = v71;
        if (v71)
        {
          swift_bridgeObjectRelease();
          if (!v99)
          {
            swift_bridgeObjectRelease();
            v83 = v107;
            swift_bridgeObjectRetain();
            v84 = sub_243BFD580();
            v85 = sub_243BFDCA0();
            if (os_log_type_enabled(v84, v85))
            {
              v86 = (uint8_t *)swift_slowAlloc();
              v87 = swift_slowAlloc();
              v117._countAndFlagsBits = v87;
              *(_DWORD *)v86 = v95;
              swift_bridgeObjectRetain();
              v115 = sub_243B739A8(v97, v83, &v117._countAndFlagsBits);
              sub_243BFDD54();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_243B4B000, v84, v85, "Error while executing migration: %s.", v86, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x249502C5C](v87, -1, -1);
              MEMORY[0x249502C5C](v86, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            v88 = v105;
            v117._countAndFlagsBits = v103;
            v89._countAndFlagsBits = 0x6B6361626C6C6F72;
            v89._object = (void *)0xE800000000000000;
            DatabaseConnection.execute(sql:)(v89);
            if (v90)
            {
              v106(v112, v88);

            }
            else
            {
              swift_willThrow();
              v106(v112, v88);
            }
            return;
          }
          v72 = v107;
          swift_bridgeObjectRetain();
          v73 = sub_243BFD580();
          v74 = sub_243BFDCA0();
          if (os_log_type_enabled(v73, v74))
          {
            v75 = (uint8_t *)swift_slowAlloc();
            v76 = swift_slowAlloc();
            v117._countAndFlagsBits = v76;
            *(_DWORD *)v75 = v95;
            swift_bridgeObjectRetain();
            v115 = sub_243B739A8(v97, v72, &v117._countAndFlagsBits);
            v38 = v101;
            sub_243BFDD54();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_243B4B000, v73, v74, "Ignoring error while executing migration: %s.", v75, 0xCu);
            swift_arrayDestroy();
            v77 = v76;
            v23 = (_QWORD *)v103;
            MEMORY[0x249502C5C](v77, -1, -1);
            v78 = v75;
            v37 = v108;
            MEMORY[0x249502C5C](v78, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v31 = v105;
          v41 = v111;
          v115 = (uint64_t)v23;
          v117._countAndFlagsBits = 0;
          v117._object = (void *)0xE000000000000000;
          sub_243BFDE44();
          swift_bridgeObjectRelease();
          v117._countAndFlagsBits = v94;
          v117._object = v93;
          v113 = v41;
          sub_243BFE0A8();
          sub_243BFD85C();
          swift_bridgeObjectRelease();
          sub_243BFD85C();
          DatabaseConnection.execute(sql:)(v117);
          if (v79)
          {

            swift_bridgeObjectRelease();
            v106(v112, v31);
            swift_bridgeObjectRelease();
            return;
          }
          v106(v112, v31);

          swift_bridgeObjectRelease();
          if (__OFADD__(v119, 1))
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            swift_once();
            goto LABEL_11;
          }
          ++v119;
          v4 = 0;
          v40 = v102;
          v39 = v96;
        }
        else
        {
          v31 = v105;
          v106(v112, v105);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v39 = v96;
          if (__OFADD__(v119, 1))
            goto LABEL_49;
          ++v119;
          v40 = v102;
          v41 = v111;
        }
      }
      v42 += 24;
      if (v39 == v41)
        goto LABEL_39;
    }
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.beginTransaction()()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6E69676562;
  v0._object = (void *)0xE500000000000000;
  DatabaseConnection.execute(sql:)(v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.commitTransaction()()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x74696D6D6F63;
  v0._object = (void *)0xE600000000000000;
  DatabaseConnection.execute(sql:)(v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.rollbackTransaction()()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6B6361626C6C6F72;
  v0._object = (void *)0xE800000000000000;
  DatabaseConnection.execute(sql:)(v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseConnection.execute(sql:)(Swift::String sql)
{
  sqlite3 **v1;
  void *object;
  uint64_t countAndFlagsBits;
  sqlite3 *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  object = sql._object;
  countAndFlagsBits = sql._countAndFlagsBits;
  v4 = *v1;
  v5 = sub_243BFD844();
  v6 = sqlite3_exec(v4, (const char *)(v5 + 32), 0, 0, 0);
  swift_release();
  if (qword_2543CDEE0 != -1)
    swift_once();
  if (HIBYTE(word_2543CD810))
    v7 = 256;
  else
    v7 = 0;
  if ((sub_243B82288(v7 | word_2543CD810) & 1) != 0)
  {
    if (qword_2543CE3C8 != -1)
      swift_once();
    v8 = sub_243BFD598();
    __swift_project_value_buffer(v8, (uint64_t)qword_2543CE3A8);
    swift_bridgeObjectRetain_n();
    v9 = sub_243BFD580();
    v10 = sub_243BFDCB8();
    if (!os_log_type_enabled(v9, v10))
    {

      swift_bridgeObjectRelease_n();
      if (!v6)
        return;
      goto LABEL_12;
    }
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_243B739A8(countAndFlagsBits, (unint64_t)object, &v17);
    sub_243BFDD54();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_243B4B000, v9, v10, "%s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v12, -1, -1);
    MEMORY[0x249502C5C](v11, -1, -1);

  }
  if (!v6)
    return;
LABEL_12:
  if (sqlite3_errstr(v6))
  {
    v13 = sub_243BFD868();
    v15 = v14;
  }
  else
  {
    v15 = 0xE300000000000000;
    v13 = 4271950;
  }
  sub_243B83414();
  swift_allocError();
  *(_QWORD *)v16 = v6;
  *(_QWORD *)(v16 + 8) = v13;
  *(_QWORD *)(v16 + 16) = v15;
  *(_BYTE *)(v16 + 24) = 1;
  swift_willThrow();
}

sqlite3_stmt *sub_243B81BB0()
{
  sqlite3 **v0;
  sqlite3 *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  sqlite3_stmt *result;
  uint64_t v8;
  char v9;
  sqlite3_stmt *v10[2];

  v10[1] = *(sqlite3_stmt **)MEMORY[0x24BDAC8D0];
  v1 = *v0;
  v10[0] = 0;
  v2 = sub_243BFD844();
  v3 = sqlite3_prepare_v2(v1, (const char *)(v2 + 32), -1, v10, 0);
  swift_release();
  if (v3)
  {
    if (sqlite3_errstr(v3))
    {
      v4 = sub_243BFD868();
      v6 = v5;
    }
    else
    {
      v6 = 0xE300000000000000;
      v4 = 4271950;
    }
    sub_243B83414();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v4;
    *(_QWORD *)(v8 + 16) = v6;
    v9 = 2;
  }
  else
  {
    result = v10[0];
    if (v10[0])
      return result;
    sub_243B83414();
    swift_allocError();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 1;
    v9 = 4;
  }
  *(_BYTE *)(v8 + 24) = v9;
  return (sqlite3_stmt *)swift_willThrow();
}

uint64_t sub_243B81CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseBinding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_243B81D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *DatabaseConnection.insert<A>(sql:bindings:step:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(sqlite3_stmt **), uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  void (*v26)(sqlite3_stmt **);
  _QWORD *v27;

  v27 = (_QWORD *)*v6;
  v12 = &v27;
  v13 = sub_243B81BB0();
  if (!v7)
  {
    v14 = v13;
    v15 = sub_243BFD718();
    v27 = (_QWORD *)v15;
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
      v26 = a4;
      swift_bridgeObjectRetain();
      v17 = 0;
      while (1)
      {
        v18 = swift_bridgeObjectRetain();
        sub_243B85F7C(v18, v26, a5, v14, a6);
        swift_bridgeObjectRelease();
        v19 = sub_243BFD9DC();
        MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v19);
        sub_243BFD9AC();
        v20 = sqlite3_reset(v14);
        if (v20)
          break;
        if (v16 == ++v17)
        {
          swift_bridgeObjectRelease();
          v12 = v27;
          goto LABEL_8;
        }
      }
      v21 = v20;
      if (sqlite3_errstr(v20))
      {
        v22 = sub_243BFD868();
        v12 = v23;
      }
      else
      {
        v12 = (_QWORD *)0xE300000000000000;
        v22 = 4271950;
      }
      sub_243B6DB18();
      swift_allocError();
      *v24 = v21 | 0x8000000000000000;
      v24[1] = v22;
      v24[2] = (unint64_t)v12;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_243B86B4C(v14);
    }
    else
    {
      v12 = (_QWORD *)v15;
LABEL_8:
      sub_243B86B4C(v14);
    }
  }
  return v12;
}

void DatabaseConnection.queryUnique<A>(sql:bindings:step:)(uint64_t a1@<X2>, uint64_t (*a2)(sqlite3_stmt **)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;

  v11 = sub_243B81BB0();
  if (!v5)
  {
    v12 = v11;
    sub_243B865DC(a1, a2, a3, v11, a4, a5);
    sub_243B86B4C(v12);
  }
}

uint64_t DatabaseConnection.Location.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = sub_243BFD190();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DatabaseConnection.Location();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v1, (uint64_t)v8, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) == 1)
    return 0x726F6D654D2D6E49;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_243B7402C();
  v11 = sub_243BFE0A8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v11;
}

uint64_t sub_243B82114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = sub_243BFD190();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseConnection.Location);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
    return 0x726F6D654D2D6E49;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
  sub_243B7402C();
  v10 = sub_243BFE0A8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v10;
}

uint64_t type metadata accessor for DatabaseConnection.Location()
{
  uint64_t result;

  result = qword_2543CD818;
  if (!qword_2543CD818)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_243B82288(unsigned int a1)
{
  char v1;
  int v2;

  v1 = a1;
  v2 = (a1 >> 8) & 1;
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X9 }
  }
  return v2 & 1;
}

uint64_t sub_243B826D4(char a1, uint64_t a2)
{
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  return a2;
}

uint64_t sub_243B82B0C(char a1, uint64_t a2)
{
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  return a2;
}

uint64_t sub_243B82F94(char a1, uint64_t a2)
{
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  return a2;
}

unint64_t sub_243B83414()
{
  unint64_t result;

  result = qword_2572ED5F8;
  if (!qword_2572ED5F8)
  {
    result = MEMORY[0x249502B6C](&unk_243C00098, &type metadata for DatabaseConnection.Failure);
    atomic_store(result, (unint64_t *)&qword_2572ED5F8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DatabaseConnection(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseConnection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseConnection()
{
  return &type metadata for DatabaseConnection;
}

uint64_t *initializeBufferWithCopyOfBuffer for DatabaseConnection.Location(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_243BFD190();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for DatabaseConnection.Location(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_243BFD190();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for DatabaseConnection.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_243BFD190();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for DatabaseConnection.Location(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_243BFD190();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_243B6F978((uint64_t)a1, &qword_2543CDE58);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_243BFD190();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for DatabaseConnection.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_243BFD190();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for DatabaseConnection.Location(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_243BFD190();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_243B6F978((uint64_t)a1, &qword_2543CDE58);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_243BFD190();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseConnection.Location()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B839B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatabaseConnection.Location()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B83A10(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_243B83A64(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_243B83AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_243B83AE4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD190();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t destroy for DatabaseConnection.Migration()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10PhotosFace18DatabaseConnectionV9MigrationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DatabaseConnection.Migration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseConnection.Migration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseConnection.Migration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseConnection.Migration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseConnection.Migration()
{
  return &type metadata for DatabaseConnection.Migration;
}

uint64_t sub_243B83CB4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 < 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DatabaseConnection.Failure(uint64_t a1)
{
  return sub_243B83CF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_243B83CF0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 < 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for DatabaseConnection.Failure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_243B83CB4(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for DatabaseConnection.Failure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_243B83CB4(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_243B83CF0(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DatabaseConnection.Failure(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_243B83CF0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseConnection.Failure(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseConnection.Failure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_243B83ED0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 3u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_243B83EE8(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 4;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseConnection.Failure()
{
  return &type metadata for DatabaseConnection.Failure;
}

uint64_t destroy for DatabaseError()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10PhotosFace13DatabaseErrorVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DatabaseError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

void DatabaseRow.readUUID(column:)(int iCol)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  if (sqlite3_column_type(*v1, iCol) == 5 || (v4 = sqlite3_column_blob(v3, iCol)) == 0)
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v9 = iCol;
    *(_BYTE *)(v9 + 4) = 0;
    swift_willThrow();
  }
  else
  {
    v5 = v4;
    v6 = sqlite3_column_bytes(v3, iCol);
    v7 = sub_243B84998(v5, v6);
    UUID.init(serialized:version:)(v7, v8);
  }
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readString(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Swift::String result;

  v3 = *v1;
  if (sqlite3_column_type(v3, column) == 5 || !sqlite3_column_text(v3, column))
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v6 = column;
    *(_BYTE *)(v6 + 4) = 0;
    v4 = swift_willThrow();
  }
  else
  {
    v4 = sub_243BFD874();
  }
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readInt(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;

  v3 = *v1;
  if (sqlite3_column_type(*v1, column) != 5)
    return sqlite3_column_int(v3, column);
  sub_243B6DB5C();
  swift_allocError();
  *(_DWORD *)v4 = column;
  *(_BYTE *)(v4 + 4) = 0;
  return swift_willThrow();
}

Swift::String_optional __swiftcall DatabaseRow.readNullableString(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;
  void *v5;
  Swift::String_optional result;

  v3 = *v1;
  if (sqlite3_column_type(v3, column) == 5)
  {
    v4 = 0;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = (uint64_t)sqlite3_column_text(v3, column);
  if (!v4)
    goto LABEL_5;
  v4 = sub_243BFD874();
LABEL_6:
  result.value._object = v5;
  result.value._countAndFlagsBits = v4;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readBool(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;
  BOOL v5;

  v3 = *v1;
  if (sqlite3_column_type(*v1, column) == 5)
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v4 = column;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
  }
  else
  {
    return sqlite3_column_int(v3, column) == 1;
  }
  return v5;
}

uint64_t DatabaseRow.readDate(column:)(int iCol)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;

  v3 = *v1;
  if (sqlite3_column_type(*v1, iCol) == 5)
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v4 = iCol;
    *(_BYTE *)(v4 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    sqlite3_column_double(v3, iCol);
    return sub_243BFD1FC();
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readDouble(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  uint64_t v4;
  Swift::Double result;

  v3 = *v1;
  if (sqlite3_column_type(v3, column) != 5)
    return sqlite3_column_double(v3, column);
  sub_243B6DB5C();
  swift_allocError();
  *(_DWORD *)v4 = column;
  *(_BYTE *)(v4 + 4) = 0;
  swift_willThrow();
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readNullableInt(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  int v4;
  Swift::Int v5;
  Swift::Bool v6;
  Swift::Int_optional result;

  v3 = *v1;
  v4 = sqlite3_column_type(*v1, column);
  if (v4 == 5)
    v5 = 0;
  else
    v5 = sqlite3_column_int(v3, column);
  v6 = v4 == 5;
  result.value = v5;
  result.is_nil = v6;
  return result;
}

Swift::Double_optional __swiftcall DatabaseRow.readNullableDouble(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  double v4;
  Swift::Bool v5;
  Swift::Double_optional result;

  v3 = *v1;
  if (sqlite3_column_type(*v1, column) == 5)
  {
    v5 = 0;
  }
  else
  {
    v4 = sqlite3_column_double(v3, column);
    v5 = LOBYTE(v4);
  }
  result.value = v4;
  result.is_nil = v5;
  return result;
}

uint64_t DatabaseRow.readData(column:)(int iCol)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  uint64_t v8;

  v3 = *v1;
  if (sqlite3_column_type(v3, iCol) == 5 || (v4 = sqlite3_column_blob(v3, iCol)) == 0)
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v8 = iCol;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }
  else
  {
    v5 = v4;
    v6 = sqlite3_column_bytes(v3, iCol);
    return sub_243B84998(v5, v6);
  }
}

uint64_t DatabaseRow.readNullableDate(column:)@<X0>(int iCol@<W0>, uint64_t a2@<X8>)
{
  sqlite3_stmt **v2;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  if (sqlite3_column_type(*v2, iCol) == 5)
  {
    v6 = sub_243BFD22C();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  else
  {
    sqlite3_column_double(v5, iCol);
    sub_243BFD1FC();
    v6 = sub_243BFD22C();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a2;
    v9 = 0;
  }
  return v7(v8, v9, 1, v6);
}

Swift::Bool_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DatabaseRow.readNullableBool(column:)(Swift::Int32 column)
{
  sqlite3_stmt **v1;
  sqlite3_stmt *v3;

  v3 = *v1;
  if (sqlite3_column_type(*v1, column) == 5)
    return (Swift::Bool_optional)2;
  else
    return (Swift::Bool_optional)(sqlite3_column_int(v3, column) == 1);
}

uint64_t DatabaseRow.readLink(column:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  sqlite3_stmt **v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (sqlite3_column_type(*v2, a1) == 5 || !sqlite3_column_text(v8, a1))
  {
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v12 = a1;
    *(_BYTE *)(v12 + 4) = 0;
    return swift_willThrow();
  }
  sub_243BFD874();
  sub_243BFD16C();
  swift_bridgeObjectRelease();
  v9 = sub_243BFD190();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
  {
    sub_243B84A44((uint64_t)v7);
    sub_243B6DB5C();
    swift_allocError();
    *(_DWORD *)v11 = a1;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v7, v9);
}

uint64_t DatabaseRow.readNullableLink(column:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  sqlite3_stmt **v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (sqlite3_column_type(*v2, a1) == 5 || !sqlite3_column_text(v8, a1))
  {
    v13 = sub_243BFD190();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  else
  {
    sub_243BFD874();
    sub_243BFD16C();
    swift_bridgeObjectRelease();
    v9 = sub_243BFD190();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
    {
      sub_243B84A44((uint64_t)v7);
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v11 = a1;
      *(_BYTE *)(v11 + 4) = 1;
      return swift_willThrow();
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v7, v9);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
    }
  }
}

uint64_t sub_243B84998(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_243BC7224(__src, &__src[a2]);
  sub_243BFD0E8();
  swift_allocObject();
  sub_243BFD0AC();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_243BFD1B4();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_243B84A44(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseRow()
{
  return &type metadata for DatabaseRow;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DatabaseRow.Failure(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseRow.Failure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_243B84B34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_243B84B3C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseRow.Failure()
{
  return &type metadata for DatabaseRow.Failure;
}

unint64_t sub_243B84B5C(unint64_t result)
{
  if ((result >> 61) <= 5)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t destroy for DatabaseStatement.Failure(unint64_t *a1)
{
  return sub_243B84B84(*a1);
}

unint64_t sub_243B84B84(unint64_t result)
{
  if ((result >> 61) <= 5)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *_s10PhotosFace17DatabaseStatementV7FailureOwCP_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_243B84B5C(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

unint64_t *assignWithCopy for DatabaseStatement.Failure(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_243B84B5C(*a2);
  v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_243B84B84(v6);
  return a1;
}

unint64_t *assignWithTake for DatabaseStatement.Failure(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_243B84B84(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseStatement.Failure(uint64_t a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  HIDWORD(v3) = *(_DWORD *)(a1 + 4);
  LODWORD(v3) = HIDWORD(v3);
  v2 = v3 >> 29;
  if (v2 > 0x80000000)
    v4 = ~v2;
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatabaseStatement.Failure(uint64_t result, int a2, int a3)
{
  unint64_t v3;

  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      HIDWORD(v3) = -a2;
      LODWORD(v3) = -a2;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = (unint64_t)(v3 >> 3) << 32;
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_243B84D14(_QWORD *a1)
{
  return *a1 >> 61;
}

_QWORD *sub_243B84D20(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_243B84D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2 << 29;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseStatement.Failure()
{
  return &type metadata for DatabaseStatement.Failure;
}

void sub_243B84D4C(sqlite3_stmt *a1@<X0>, void (*a2)(sqlite3_stmt **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  int v35;
  sqlite3_stmt *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(sqlite3_stmt **);
  uint64_t v63;
  sqlite3_stmt *v64;

  v61 = a3;
  v62 = a2;
  v63 = a4;
  v6 = sub_243BFD22C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_243BFD280();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = a1;
  DatabaseRow.readUUID(column:)(0);
  if (!v4)
  {
    v57 = v9;
    v58 = v13;
    v55 = v7;
    v56 = v6;
    v59 = v11;
    v60 = v10;
    if (sqlite3_column_type(a1, 1) == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v14 = 1;
      *(_BYTE *)(v14 + 4) = 0;
      swift_willThrow();
LABEL_4:
      (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
      return;
    }
    v15 = a1;
    sqlite3_column_double(a1, 1);
    v16 = v57;
    sub_243BFD1FC();
    v17 = sqlite3_column_type(a1, 2);
    v19 = v59;
    v18 = v60;
    v20 = v58;
    if (v17 == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v21 = 2;
      *(_BYTE *)(v21 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v56);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
      return;
    }
    v22 = sqlite3_column_double(v15, 2);
    v23 = 3;
    v24 = sqlite3_column_type(v15, 3);
    v26 = v55;
    v25 = v56;
    if (v24 == 5)
      goto LABEL_18;
    *(_QWORD *)&v54 = sqlite3_column_int(v15, 3);
    v23 = 4;
    if (sqlite3_column_type(v15, 4) == 5)
      goto LABEL_18;
    v53 = sqlite3_column_int(v15, 4);
    v23 = 5;
    if (sqlite3_column_type(v15, 5) == 5)
      goto LABEL_18;
    v52 = sqlite3_column_int(v15, 5);
    v23 = 6;
    if (sqlite3_column_type(v15, 6) == 5)
      goto LABEL_18;
    v27 = sqlite3_column_double(v15, 6);
    v23 = 7;
    if (sqlite3_column_type(v15, 7) == 5)
      goto LABEL_18;
    v28 = sqlite3_column_double(v15, 7);
    v23 = 8;
    if (sqlite3_column_type(v15, 8) == 5)
      goto LABEL_18;
    v29 = sqlite3_column_double(v15, 8);
    v23 = 9;
    if (sqlite3_column_type(v15, 9) == 5)
      goto LABEL_18;
    v30 = sqlite3_column_double(v15, 9);
    v23 = 10;
    if (sqlite3_column_type(v15, 10) == 5
      || (v51 = sqlite3_column_int(v15, 10), v23 = 11, sqlite3_column_type(v15, 11) == 5)
      || (v31 = sqlite3_column_double(v15, 11), v23 = 12, sqlite3_column_type(v15, 12) == 5)
      || (v32 = sqlite3_column_double(v15, 12), v23 = 13, sqlite3_column_type(v15, 13) == 5))
    {
LABEL_18:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v33 = v23;
      *(_BYTE *)(v33 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
      goto LABEL_19;
    }
    v34 = sqlite3_column_double(v15, 13);
    v35 = 14;
    v36 = v15;
    if (sqlite3_column_type(v15, 14) == 5)
      goto LABEL_26;
    v50 = sqlite3_column_double(v15, 14);
    v35 = 15;
    if (sqlite3_column_type(v15, 15) == 5
      || (v49 = sqlite3_column_double(v15, 15), v35 = 16, sqlite3_column_type(v15, 16) == 5)
      || (v48 = sqlite3_column_double(v15, 16), v35 = 17, sqlite3_column_type(v15, 17) == 5)
      || (v47 = sqlite3_column_double(v15, 17), v35 = 18, sqlite3_column_type(v15, 18) == 5))
    {
LABEL_26:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v37 = v35;
      *(_BYTE *)(v37 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v56);
      goto LABEL_4;
    }
    v38 = SLODWORD(v54);
    v39 = (int)v53;
    v54 = sqlite3_column_double(v15, 18);
    if (sqlite3_column_type(v15, 19) == 5 || !sqlite3_column_text(v15, 19))
    {
      v40 = 0;
      v42 = 0;
    }
    else
    {
      v40 = sub_243BFD874();
      v42 = v41;
    }
    v52 = v52 == 1;
    LODWORD(v53) = v51 == 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED138);
    v43 = v63;
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v63, v58, v60);
    v44 = (int *)type metadata accessor for StoredLayoutView();
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v43 + v44[5], v57, v56);
    *(double *)(v43 + v44[6]) = v22;
    *(_QWORD *)(v43 + v44[7]) = v38;
    *(_QWORD *)(v43 + v44[8]) = v39;
    *(_BYTE *)(v43 + v44[9]) = v52;
    *(double *)(v43 + v44[10]) = v27;
    *(double *)(v43 + v44[11]) = v28;
    *(double *)(v43 + v44[12]) = v29;
    *(double *)(v43 + v44[13]) = v30;
    *(_BYTE *)(v43 + v44[14]) = v53;
    *(double *)(v43 + v44[15]) = v31;
    *(double *)(v43 + v44[16]) = v32;
    *(double *)(v43 + v44[17]) = v34;
    *(double *)(v43 + v44[18]) = v50;
    *(double *)(v43 + v44[19]) = v49;
    *(double *)(v43 + v44[20]) = v48;
    *(double *)(v43 + v44[21]) = v47;
    *(double *)(v43 + v44[22]) = v54;
    v45 = (uint64_t *)(v43 + v44[23]);
    *v45 = v40;
    v45[1] = v42;
    v64 = v36;
    v62(&v64);
  }
}

void sub_243B85424(sqlite3_stmt *a1@<X0>, void (*a2)(sqlite3_stmt **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  sqlite3_stmt *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  int v35;
  sqlite3_stmt *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int *v45;
  uint64_t *v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(sqlite3_stmt **);
  uint64_t v64;
  sqlite3_stmt *v65;

  v62 = a3;
  v63 = a2;
  v64 = a4;
  v6 = sub_243BFD22C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_243BFD280();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1;
  DatabaseRow.readUUID(column:)(0);
  if (!v4)
  {
    v58 = v9;
    v59 = v13;
    v56 = v7;
    v57 = v6;
    v60 = v11;
    v61 = v10;
    if (sqlite3_column_type(a1, 1) == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v14 = 1;
      *(_BYTE *)(v14 + 4) = 0;
      swift_willThrow();
LABEL_4:
      (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
      return;
    }
    v15 = a1;
    sqlite3_column_double(a1, 1);
    v16 = v58;
    sub_243BFD1FC();
    v17 = sqlite3_column_type(a1, 2);
    v19 = v60;
    v18 = v61;
    v20 = v59;
    if (v17 == 5)
    {
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v21 = 2;
      *(_BYTE *)(v21 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v16, v57);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
      return;
    }
    v22 = sqlite3_column_double(v15, 2);
    v23 = 3;
    v24 = sqlite3_column_type(v15, 3);
    v26 = v56;
    v25 = v57;
    if (v24 == 5)
      goto LABEL_18;
    *(_QWORD *)&v55 = sqlite3_column_int(v15, 3);
    v23 = 4;
    if (sqlite3_column_type(v15, 4) == 5)
      goto LABEL_18;
    v54 = sqlite3_column_int(v15, 4);
    v23 = 5;
    if (sqlite3_column_type(v15, 5) == 5)
      goto LABEL_18;
    v53 = sqlite3_column_int(v15, 5);
    v23 = 6;
    if (sqlite3_column_type(v15, 6) == 5)
      goto LABEL_18;
    v27 = sqlite3_column_double(v15, 6);
    v23 = 7;
    if (sqlite3_column_type(v15, 7) == 5)
      goto LABEL_18;
    v28 = sqlite3_column_double(v15, 7);
    v23 = 8;
    if (sqlite3_column_type(v15, 8) == 5)
      goto LABEL_18;
    v29 = sqlite3_column_double(v15, 8);
    v23 = 9;
    if (sqlite3_column_type(v15, 9) == 5)
      goto LABEL_18;
    v30 = sqlite3_column_double(v15, 9);
    v23 = 10;
    if (sqlite3_column_type(v15, 10) == 5
      || (v52 = sqlite3_column_int(v15, 10), v23 = 11, sqlite3_column_type(v15, 11) == 5)
      || (v31 = sqlite3_column_double(v15, 11), v23 = 12, sqlite3_column_type(v15, 12) == 5)
      || (v32 = sqlite3_column_double(v15, 12), v23 = 13, sqlite3_column_type(v15, 13) == 5))
    {
LABEL_18:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v33 = v23;
      *(_BYTE *)(v33 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
      goto LABEL_19;
    }
    v34 = sqlite3_column_double(v15, 13);
    v35 = 14;
    v36 = v15;
    if (sqlite3_column_type(v15, 14) == 5)
      goto LABEL_26;
    v51 = sqlite3_column_double(v15, 14);
    v35 = 15;
    if (sqlite3_column_type(v15, 15) == 5
      || (v50 = sqlite3_column_double(v15, 15), v35 = 16, sqlite3_column_type(v15, 16) == 5)
      || (v49 = sqlite3_column_double(v15, 16), v35 = 17, sqlite3_column_type(v15, 17) == 5)
      || (v48 = sqlite3_column_double(v15, 17), v35 = 18, sqlite3_column_type(v15, 18) == 5))
    {
LABEL_26:
      sub_243B6DB5C();
      swift_allocError();
      *(_DWORD *)v37 = v35;
      *(_BYTE *)(v37 + 4) = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
      goto LABEL_4;
    }
    v38 = SLODWORD(v55);
    v39 = (int)v54;
    v55 = sqlite3_column_double(v15, 18);
    if (sqlite3_column_type(v15, 19) == 5 || !sqlite3_column_text(v15, 19))
    {
      v40 = 0;
      v42 = 0;
    }
    else
    {
      v40 = sub_243BFD874();
      v42 = v41;
    }
    LODWORD(v54) = v52 == 1;
    v43 = v53 == 1;
    v44 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v64, v59, v61);
    v45 = (int *)type metadata accessor for StoredLayoutView();
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v44 + v45[5], v58, v57);
    *(double *)(v44 + v45[6]) = v22;
    *(_QWORD *)(v44 + v45[7]) = v38;
    *(_QWORD *)(v44 + v45[8]) = v39;
    *(_BYTE *)(v44 + v45[9]) = v43;
    *(double *)(v44 + v45[10]) = v27;
    *(double *)(v44 + v45[11]) = v28;
    *(double *)(v44 + v45[12]) = v29;
    *(double *)(v44 + v45[13]) = v30;
    *(_BYTE *)(v44 + v45[14]) = v54;
    *(double *)(v44 + v45[15]) = v31;
    *(double *)(v44 + v45[16]) = v32;
    *(double *)(v44 + v45[17]) = v34;
    *(double *)(v44 + v45[18]) = v51;
    *(double *)(v44 + v45[19]) = v50;
    *(double *)(v44 + v45[20]) = v49;
    *(double *)(v44 + v45[21]) = v48;
    *(double *)(v44 + v45[22]) = v55;
    v46 = (uint64_t *)(v44 + v45[23]);
    *v46 = v40;
    v46[1] = v42;
    v65 = v36;
    v63(&v65);
  }
}

uint64_t sub_243B85AE0(uint64_t a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  return sub_243B85B38(a1, a2, a3, a4, &qword_2572ED138, (void (*)(sqlite3_stmt *, uint64_t, uint64_t))sub_243B84D4C, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_243B6DF08);
}

uint64_t sub_243B85B0C(uint64_t a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  return sub_243B85B38(a1, a2, a3, a4, &qword_2572ED100, (void (*)(sqlite3_stmt *, uint64_t, uint64_t))sub_243B85424, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_243B6E150);
}

uint64_t sub_243B85B38(uint64_t a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(sqlite3_stmt *, uint64_t, uint64_t), uint64_t (*a7)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  sqlite3_stmt *v30;
  int v31;
  void (*v32)(sqlite3_stmt *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t (*v51)(BOOL, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  void (*v55)(sqlite3_stmt *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  sqlite3_stmt *v61;
  uint64_t v62;

  v51 = a7;
  v52 = a3;
  v55 = a6;
  v53 = a4;
  v54 = a5;
  v61 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v58 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v62 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v59 = (uint64_t)&v50 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v60 = (char *)&v50 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v50 - v18);
  v20 = *(_QWORD *)(a1 + 16);
  v57 = a1;
  swift_bridgeObjectRetain();
  if (v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
    v23 = v57 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v22 + 72);
    while (1)
    {
      v25 = (uint64_t)&v60[*(int *)(v12 + 48)];
      sub_243B868F8(v23, v25);
      v26 = (uint64_t)v19 + *(int *)(v12 + 48);
      *v19 = v21;
      sub_243B81CE4(v25, v26);
      result = sub_243B6F9B4((uint64_t)v19, v15, &qword_2572ECF58);
      v28 = *(_QWORD *)v15 + 1;
      if (__OFADD__(*(_QWORD *)v15, 1))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        return result;
      }
      if (v28 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_32;
      if (v28 > 0x7FFFFFFF)
        goto LABEL_33;
      sub_243B86D24(v15 + *(int *)(v12 + 48), v28, (uint64_t)v61);
      if (v29)
        break;
      ++v21;
      sub_243B6F978(v15, &qword_2572ECF58);
      v23 += v24;
      if (v20 == v21)
        goto LABEL_8;
    }
    v42 = v29;
    if (sqlite3_errstr(v29))
    {
      v43 = sub_243BFD868();
      v45 = v44;
    }
    else
    {
      v43 = 4271950;
      v45 = 0xE300000000000000;
    }
    sub_243B6DB18();
    swift_allocError();
    *v48 = v42;
    v48[1] = v43;
    v48[2] = v45;
    swift_willThrow();
    sub_243B6F978(v15, &qword_2572ECF58);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v30 = v61;
    sub_243B8693C(v61);
    v31 = sqlite3_step(v30);
    if (v31 != 100)
    {
      v41 = v31;
      v15 = MEMORY[0x24BEE4AF8];
      if (v31 != 101)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (sqlite3_errstr(v41))
        {
          v15 = sub_243BFD868();
          v47 = v46;
        }
        else
        {
          v15 = 4271950;
          v47 = 0xE300000000000000;
        }
        sub_243B6DB18();
        swift_allocError();
        *v49 = v41 | 0xA000000000000000;
        v49[1] = v15;
        v49[2] = v47;
        swift_willThrow();
      }
      return v15;
    }
    v15 = MEMORY[0x24BEE4AF8];
    v32 = v55;
    v33 = v56;
    v35 = v53;
    v34 = v54;
    v36 = v52;
    v37 = v59;
    while (1)
    {
      v32(v30, v36, v35);
      if (v33)
        break;
      sub_243B50168(v37, v62, v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = v51(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v39 = *(_QWORD *)(v15 + 16);
      v38 = *(_QWORD *)(v15 + 24);
      if (v39 >= v38 >> 1)
        v15 = v51(v38 > 1, v39 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v39 + 1;
      sub_243B6F9B4(v62, v15+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v39, v34);
      v37 = v59;
      sub_243B6F978(v59, v34);
      v40 = sqlite3_step(v30);
      if (v40 != 100)
      {
        v41 = v40;
        if (v40 == 101)
          return v15;
        goto LABEL_23;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_243B85F7C(uint64_t a1, void (*a2)(sqlite3_stmt **), uint64_t a3, sqlite3_stmt *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(sqlite3_stmt **);
  uint64_t v31;
  char *v32;
  char *i;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(sqlite3_stmt **);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  sqlite3_stmt *v56;
  uint64_t v57;

  v6 = v5;
  v49 = a2;
  v50 = a3;
  v51 = a5;
  v48 = *(_QWORD *)(a5 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v46 = (char *)&v45 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x24BDAC7A8](v13);
  v55 = (char *)&v45 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v45 - v18);
  v20 = *(_QWORD *)(a1 + 16);
  v52 = a1;
  swift_bridgeObjectRetain();
  v54 = v20;
  if (v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
    v23 = v52 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v53 = *(_QWORD *)(v22 + 72);
    while (1)
    {
      v24 = (uint64_t)&v55[*(int *)(v12 + 48)];
      sub_243B868F8(v23, v24);
      v25 = (uint64_t)v19 + *(int *)(v12 + 48);
      *v19 = v21;
      sub_243B81CE4(v24, v25);
      result = sub_243B6F9B4((uint64_t)v19, (uint64_t)v15, &qword_2572ECF58);
      v27 = *v15 + 1;
      if (__OFADD__(*v15, 1))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      if (v27 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_24;
      if (v27 > 0x7FFFFFFF)
        goto LABEL_25;
      sub_243B86D24((uint64_t)v15 + *(int *)(v12 + 48), v27, (uint64_t)a4);
      if (v28)
        break;
      ++v21;
      sub_243B6F978((uint64_t)v15, &qword_2572ECF58);
      v23 += v53;
      if (v54 == v21)
        goto LABEL_8;
    }
    v36 = v28;
    if (sqlite3_errstr(v28))
    {
      v37 = sub_243BFD868();
      v39 = v38;
    }
    else
    {
      v37 = 4271950;
      v39 = 0xE300000000000000;
    }
    sub_243B6DB18();
    swift_allocError();
    *v43 = v36;
    v43[1] = v37;
    v43[2] = v39;
    swift_willThrow();
    sub_243B6F978((uint64_t)v15, &qword_2572ECF58);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    sub_243B8693C(a4);
    v29 = v51;
    v57 = sub_243BFD718();
    v30 = v49;
    v32 = v47;
    v31 = v48;
    for (i = v46; ; (*(void (**)(char *, uint64_t))(v31 + 8))(i, v29))
    {
      v34 = sqlite3_step(a4);
      if (v34 != 100)
        break;
      v56 = a4;
      v30(&v56);
      if (v6)
        return swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v32, i, v29);
      sub_243BFD9DC();
      sub_243BFD9B8();
    }
    v35 = v34;
    if (v34 == 101)
    {
      return v57;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (sqlite3_errstr(v35))
      {
        v40 = sub_243BFD868();
        v42 = v41;
      }
      else
      {
        v40 = 4271950;
        v42 = 0xE300000000000000;
      }
      sub_243B6DB18();
      swift_allocError();
      *v44 = v35 | 0xA000000000000000;
      v44[1] = v40;
      v44[2] = v42;
      return swift_willThrow();
    }
  }
}

uint64_t sub_243B86334(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  sqlite3_stmt *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  sqlite3_stmt *v35;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v32 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v32 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  v33 = a1;
  swift_bridgeObjectRetain();
  if (v11)
  {
    v12 = 0;
    v13 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
    v14 = v33 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      v16 = (uint64_t)&v34[*(int *)(v3 + 48)];
      sub_243B868F8(v14, v16);
      v17 = (uint64_t)v10 + *(int *)(v3 + 48);
      *v10 = v12;
      sub_243B81CE4(v16, v17);
      result = sub_243B6F9B4((uint64_t)v10, (uint64_t)v6, &qword_2572ECF58);
      v19 = *v6 + 1;
      if (__OFADD__(*v6, 1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      if (v19 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_19;
      if (v19 > 0x7FFFFFFF)
        goto LABEL_20;
      sub_243B86D24((uint64_t)v6 + *(int *)(v3 + 48), v19, (uint64_t)v35);
      if (v20)
        break;
      ++v12;
      sub_243B6F978((uint64_t)v6, &qword_2572ECF58);
      v14 += v15;
      if (v11 == v12)
        goto LABEL_8;
    }
    v26 = v20;
    if (sqlite3_errstr(v20))
    {
      v27 = sub_243BFD868();
      v29 = v28;
    }
    else
    {
      v27 = 4271950;
      v29 = 0xE300000000000000;
    }
    sub_243B6DB18();
    swift_allocError();
    *v31 = v26;
    v31[1] = v27;
    v31[2] = v29;
    swift_willThrow();
    sub_243B6F978((uint64_t)v6, &qword_2572ECF58);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v21 = v35;
    sub_243B8693C(v35);
    result = sqlite3_step(v21);
    if ((_DWORD)result != 101)
    {
      v22 = result;
      if (sqlite3_errstr(result))
      {
        v23 = sub_243BFD868();
        v25 = v24;
      }
      else
      {
        v23 = 4271950;
        v25 = 0xE300000000000000;
      }
      sub_243B6DB18();
      swift_allocError();
      *v30 = v22 | 0x6000000000000000;
      v30[1] = v23;
      v30[2] = v25;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_243B865DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(sqlite3_stmt **)@<X1>, uint64_t a3@<X2>, sqlite3_stmt *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  sqlite3_stmt *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(sqlite3_stmt **);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  sqlite3_stmt *v47;
  sqlite3_stmt *v48;

  v42 = a5;
  v47 = a4;
  v40 = a3;
  v41 = a2;
  v44 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECF58);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v40 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v40 - v13);
  v15 = *(_QWORD *)(a1 + 16);
  v45 = a1;
  swift_bridgeObjectRetain();
  if (!v15)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v25 = v47;
    sub_243B8693C(v47);
    v26 = sqlite3_step(v25);
    if (v26 == 100)
    {
      v48 = v25;
      v34 = v43;
      v28 = v44;
      result = v41(&v48);
      if (v34)
        return result;
      v29 = 0;
    }
    else
    {
      v27 = v26;
      v28 = v44;
      if (v26 != 101)
      {
        if (sqlite3_errstr(v26))
        {
          v35 = sub_243BFD868();
          v37 = v36;
        }
        else
        {
          v35 = 4271950;
          v37 = 0xE300000000000000;
        }
        sub_243B6DB18();
        swift_allocError();
        *v39 = v27 | 0xA000000000000000;
        v39[1] = v35;
        v39[2] = v37;
        return swift_willThrow();
      }
      v29 = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v28, v29, 1);
  }
  v16 = 0;
  v17 = *(_QWORD *)(type metadata accessor for DatabaseBinding() - 8);
  v18 = v45 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  while (1)
  {
    v20 = (uint64_t)&v46[*(int *)(v7 + 48)];
    sub_243B868F8(v18, v20);
    v21 = (uint64_t)v14 + *(int *)(v7 + 48);
    *v14 = v16;
    sub_243B81CE4(v20, v21);
    result = sub_243B6F9B4((uint64_t)v14, (uint64_t)v10, &qword_2572ECF58);
    v23 = *v10 + 1;
    if (__OFADD__(*v10, 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    if (v23 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_24;
    if (v23 > 0x7FFFFFFF)
      goto LABEL_25;
    sub_243B86D24((uint64_t)v10 + *(int *)(v7 + 48), v23, (uint64_t)v47);
    if (v24)
      break;
    ++v16;
    sub_243B6F978((uint64_t)v10, &qword_2572ECF58);
    v18 += v19;
    if (v15 == v16)
      goto LABEL_8;
  }
  v30 = v24;
  if (sqlite3_errstr(v24))
  {
    v31 = sub_243BFD868();
    v33 = v32;
  }
  else
  {
    v31 = 4271950;
    v33 = 0xE300000000000000;
  }
  sub_243B6DB18();
  swift_allocError();
  *v38 = v30;
  v38[1] = v31;
  v38[2] = v33;
  swift_willThrow();
  sub_243B6F978((uint64_t)v10, &qword_2572ECF58);
  return swift_bridgeObjectRelease();
}

void sub_243B868E8()
{
  qword_2572F86C0 = -1;
}

uint64_t sub_243B868F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatabaseBinding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_243B8693C(sqlite3_stmt *a1)
{
  int v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_2543CDEE0 != -1)
    swift_once();
  if (HIBYTE(word_2543CD810))
    v2 = 256;
  else
    v2 = 0;
  if ((sub_243B82288(v2 | word_2543CD810) & 1) != 0)
  {
    v3 = sqlite3_expanded_sql(a1);
    if (v3)
    {
      v4 = v3;
      v5 = sub_243BFD868();
      v7 = v6;
      if (qword_2543CE3C8 != -1)
        swift_once();
      v8 = sub_243BFD598();
      __swift_project_value_buffer(v8, (uint64_t)qword_2543CE3A8);
      swift_bridgeObjectRetain();
      v9 = sub_243BFD580();
      v10 = sub_243BFDCB8();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v13 = v12;
        *(_DWORD *)v11 = 136315138;
        swift_bridgeObjectRetain();
        sub_243B739A8(v5, v7, &v13);
        sub_243BFDD54();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_243B4B000, v9, v10, "%s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x249502C5C](v12, -1, -1);
        MEMORY[0x249502C5C](v11, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sqlite3_free(v4);
    }
  }
}

void sub_243B86B4C(sqlite3_stmt *a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  NSObject *oslog;
  uint64_t v12;

  v1 = sqlite3_finalize(a1);
  if (v1)
  {
    v2 = v1;
    if (qword_2543CE3C8 != -1)
      swift_once();
    v3 = sub_243BFD598();
    __swift_project_value_buffer(v3, (uint64_t)qword_2543CE3A8);
    oslog = sub_243BFD580();
    v4 = sub_243BFDCA0();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v5 = 138412290;
      if (sqlite3_errstr(v2))
      {
        v7 = sub_243BFD868();
        v9 = v8;
      }
      else
      {
        v9 = 0xE300000000000000;
        v7 = 4271950;
      }
      sub_243B6DB18();
      swift_allocError();
      *v10 = v2 | 0x2000000000000000;
      v10[1] = v7;
      v10[2] = v9;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      sub_243BFDD54();
      *v6 = v12;
      _os_log_impl(&dword_243B4B000, oslog, v4, "%@", v5, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED240);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v6, -1, -1);
      MEMORY[0x249502C5C](v5, -1, -1);

    }
    else
    {

    }
  }
}

void sub_243B86D24(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = a3;
  v18 = a2;
  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_243BFD280();
  v14 = *(_QWORD *)(v4 - 8);
  v15 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v16 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_243BFD190();
  MEMORY[0x24BDAC7A8](v13);
  v6 = sub_243BFD22C();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for DatabaseBinding();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_243B868F8(a1, (uint64_t)&v12 - v10);
  v11 = (char *)&loc_243B86EA0 + dword_243B873F4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_243B86EB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v4);
  sub_243BFD208();
  *v2 = v6;
  swift_storeEnumTagMultiPayload();
  sub_243B86D24((uint64_t)v2, *(_DWORD *)(v5 - 108), *(_QWORD *)(v5 - 120));
  v8 = v7;
  sub_243B7FA20((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for DatabaseBinding);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v4);
  return v8;
}

uint64_t FetchFaceRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FetchFaceRequest.day.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FetchFaceRequest() + 20));
}

uint64_t type metadata accessor for FetchFaceRequest()
{
  uint64_t result;

  result = qword_2572ED6D8;
  if (!qword_2572ED6D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FetchFaceRequest.init(id:day:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for FetchFaceRequest();
  v10 = a4 + *(int *)(result + 20);
  *(_QWORD *)v10 = a2;
  *(_BYTE *)(v10 + 8) = a3 & 1;
  return result;
}

uint64_t FetchFaceRequest.init(protobuf:version:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unsigned int *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];

  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v9) = *a2;
  v11 = *a1;
  v12 = a1[1];
  v18[15] = v9;
  sub_243B7FBDC(v11, v12);
  UUID.init(serialized:version:)(v11, v12);
  if (v3)
    return sub_243B7FA20((uint64_t)a1, type metadata accessor for FetchFaceRequestProto);
  v14 = (unsigned int *)((char *)a1 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 24));
  v15 = *((_BYTE *)v14 + 4);
  if (v15)
    v16 = 0;
  else
    v16 = *v14;
  sub_243B7FA20((uint64_t)a1, type metadata accessor for FetchFaceRequestProto);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(a3, v10, v7);
  result = type metadata accessor for FetchFaceRequest();
  v17 = a3 + *(int *)(result + 20);
  *(_QWORD *)v17 = v16;
  *(_BYTE *)(v17 + 8) = v15;
  return result;
}

uint64_t FetchFaceRequest.protobuf(version:)()
{
  type metadata accessor for FetchFaceRequestProto(0);
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B876E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = UUID.serialized(version:)();
  v6 = v5;
  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  result = type metadata accessor for FetchFaceRequest();
  v8 = (unint64_t *)(a2 + *(int *)(result + 20));
  if ((v8[1] & 1) == 0)
  {
    v9 = *v8;
    if ((*v8 & 0x8000000000000000) != 0 || HIDWORD(v9))
    {
      result = sub_243BFDF64();
      __break(1u);
    }
    else
    {
      result = type metadata accessor for FetchFaceRequestProto(0);
      v10 = a1 + *(int *)(result + 24);
      *(_DWORD *)v10 = v9;
      *(_BYTE *)(v10 + 4) = 0;
    }
  }
  return result;
}

uint64_t sub_243B87800(uint64_t a1)
{
  uint64_t v1;

  return sub_243B876E0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B8781C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a2;
  return FetchFaceRequest.init(protobuf:version:)(a1, &v4, a3);
}

uint64_t sub_243B87844()
{
  type metadata accessor for FetchFaceRequestProto(0);
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  return sub_243BFD4CC();
}

uint64_t FetchByDayResponse.day.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FetchByDayResponse.photos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FetchByDayResponse.init(protobuf:version:)@<X0>(unsigned int *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  _QWORD v27[2];
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v7 = type metadata accessor for StoredPhotoProto(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (uint64_t)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v27 - v11;
  v13 = type metadata accessor for StoredPhoto(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *a1;
  v29 = a1;
  v17 = *((_QWORD *)a1 + 1);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v27[0] = a3;
    v31 = *a2;
    v34 = MEMORY[0x24BEE4AF8];
    v19 = v17;
    swift_bridgeObjectRetain();
    sub_243B7CC10(0, v18, 0);
    v20 = *(unsigned __int8 *)(v8 + 80);
    v27[1] = v19;
    v21 = v19 + ((v20 + 32) & ~v20);
    v30 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_243B6F8F0(v21, (uint64_t)v12, type metadata accessor for StoredPhotoProto);
      v22 = v32;
      sub_243B6F8F0((uint64_t)v12, v32, type metadata accessor for StoredPhotoProto);
      v33 = v31;
      StoredPhoto.init(protobuf:version:)(v22, &v33, (uint64_t)v16);
      sub_243B7FA20((uint64_t)v12, type metadata accessor for StoredPhotoProto);
      v23 = v34;
      if (v3)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC10(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v34;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_243B7CC10(v24 > 1, v25 + 1, 1);
        v23 = v34;
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      sub_243B6F934((uint64_t)v16, v23+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v25, type metadata accessor for StoredPhoto);
      v21 += v30;
      if (!--v18)
      {
        a3 = (_QWORD *)v27[0];
        goto LABEL_12;
      }
    }
    swift_release();
    sub_243B7FA20((uint64_t)v29, type metadata accessor for FetchByDayResponseProto);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v23 = MEMORY[0x24BEE4AF8];
LABEL_12:
    sub_243B7FA20((uint64_t)v29, type metadata accessor for FetchByDayResponseProto);
    result = swift_bridgeObjectRelease();
    *a3 = v28;
    a3[1] = v23;
  }
  return result;
}

uint64_t FetchByDayResponse.protobuf(version:)()
{
  type metadata accessor for FetchByDayResponseProto(0);
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B87C0C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v29 = a4;
  v7 = type metadata accessor for StoredPhoto(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoProto(0);
  v12 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  v28 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2))
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = a2;
    v15 = *(_QWORD *)(a3 + 16);
    v16 = MEMORY[0x24BEE4AF8];
    if (v15)
    {
      v25 = a1;
      v30 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_243B7CCD4(0, v15, 0);
      v17 = *(unsigned __int8 *)(v8 + 80);
      v24 = a3;
      v18 = a3 + ((v17 + 32) & ~v17);
      v26 = *(_QWORD *)(v8 + 72);
      do
      {
        v19 = sub_243B6F8F0(v18, (uint64_t)v10, type metadata accessor for StoredPhoto);
        MEMORY[0x24BDAC7A8](v19);
        sub_243B88508(&qword_2572ED710, v20, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
        sub_243BFD4CC();
        sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhoto);
        v16 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_243B7CCD4(0, *(_QWORD *)(v16 + 16) + 1, 1);
          v16 = v30;
        }
        v22 = *(_QWORD *)(v16 + 16);
        v21 = *(_QWORD *)(v16 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_243B7CCD4(v21 > 1, v22 + 1, 1);
          v16 = v30;
        }
        *(_QWORD *)(v16 + 16) = v22 + 1;
        sub_243B6F934((uint64_t)v14, v16+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v22, type metadata accessor for StoredPhotoProto);
        v18 += v26;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      a1 = v25;
    }
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 8) = v16;
  }
  return result;
}

uint64_t sub_243B87F10@<X0>(unsigned int *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;

  v4 = *a2;
  return FetchByDayResponse.init(protobuf:version:)(a1, &v4, a3);
}

uint64_t sub_243B87F38()
{
  type metadata accessor for FetchByDayResponseProto(0);
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B87FC8(uint64_t a1)
{
  uint64_t v1;

  return sub_243B87C0C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_243B87FE4()
{
  return sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243B88010()
{
  return sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchFaceRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD280();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t destroy for FetchFaceRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FetchFaceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for FetchFaceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for FetchFaceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for FetchFaceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchFaceRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B882C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FetchFaceRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B8830C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_243B8834C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD280();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FetchByDayResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FetchByDayResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FetchByDayResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchByDayResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchByDayResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchByDayResponse()
{
  return &type metadata for FetchByDayResponse;
}

uint64_t sub_243B884EC(uint64_t a1)
{
  uint64_t v1;

  return sub_243B9EC80(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_243B88508(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x249502B6C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_243B88548(uint64_t a1)
{
  return sub_243B87800(a1);
}

uint64_t sub_243B8855C(uint64_t a1)
{
  return sub_243B87FC8(a1);
}

uint64_t GeneratePhotoRequest.photoIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeneratePhotoRequest.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v10)
  {
    v18[0] = a2;
    v19 = a1;
    v20 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCB8(0, v10, 0);
    v11 = v20;
    v18[1] = v9;
    v12 = (unint64_t *)(v9 + 40);
    while (1)
    {
      v14 = *(v12 - 1);
      v13 = *v12;
      sub_243B7FBDC(v14, *v12);
      sub_243B7FBDC(v14, v13);
      UUID.init(serialized:version:)(v14, v13);
      if (v2)
        break;
      sub_243B7FCC0(v14, v13);
      v20 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_243B7CCB8(v15 > 1, v16 + 1, 1);
        v11 = v20;
      }
      v12 += 2;
      *(_QWORD *)(v11 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, v8, v5);
      if (!--v10)
      {
        a1 = v19;
        a2 = (_QWORD *)v18[0];
        goto LABEL_10;
      }
    }
    sub_243B7FCC0(v14, v13);
    swift_release();
    sub_243B7FA20(v19, type metadata accessor for GeneratePhotoRequestProto);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = MEMORY[0x24BEE4AF8];
LABEL_10:
    sub_243B7FA20(a1, type metadata accessor for GeneratePhotoRequestProto);
    result = swift_bridgeObjectRelease();
    *a2 = v11;
  }
  return result;
}

uint64_t GeneratePhotoRequest.protobuf(version:)(uint64_t a1)
{
  return sub_243B88D0C(a1, type metadata accessor for GeneratePhotoRequestProto, &qword_2572ED718, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243B88788(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[2];
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v29 = a1;
    v30 = v2;
    v42 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCF0(0, v9, 0);
    v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v28[1] = a2;
    v12 = a2 + v11;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = v6;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v32 = v13;
    do
    {
      v31(v8, v12, v5);
      v33 = sub_243BFD268();
      v34 = v15;
      v35 = v16;
      v36 = v17;
      v37 = v18;
      v38 = v19;
      v39 = v20;
      v40 = v21;
      v41 = v22;
      sub_243BFD268();
      sub_243BFD0E8();
      swift_allocObject();
      v23 = sub_243BFD0AC();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v5);
      v10 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCF0(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v42;
      }
      v25 = *(_QWORD *)(v10 + 16);
      v24 = *(_QWORD *)(v10 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_243B7CCF0(v24 > 1, v25 + 1, 1);
        v10 = v42;
      }
      *(_QWORD *)(v10 + 16) = v25 + 1;
      v26 = v10 + 16 * v25;
      *(_QWORD *)(v26 + 32) = 0x1000000000;
      *(_QWORD *)(v26 + 40) = v23 | 0x4000000000000000;
      v12 += v32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a1 = v29;
  }
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t sub_243B88A00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return GeneratePhotoRequest.init(protobuf:version:)(a1, a2);
}

uint64_t sub_243B88A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B8905C(a1, a2, a3, type metadata accessor for GeneratePhotoRequestProto, &qword_2572ED718, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

PhotosFace::GeneratePhotoResponse __swiftcall GeneratePhotoResponse.init(results:)(PhotosFace::GeneratePhotoResponse results)
{
  PhotosFace::GeneratePhotoResponse *v1;

  v1->results._rawValue = results.results._rawValue;
  return results;
}

uint64_t GeneratePhotoResponse.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  _QWORD *v26;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v29 = a3;
  v6 = type metadata accessor for StoredPhotoProto(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v32 = (uint64_t)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v27 - v10;
  v12 = type metadata accessor for StoredPhoto(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v17)
  {
    v28 = a1;
    v31 = *a2;
    v34 = MEMORY[0x24BEE4AF8];
    v18 = v16;
    swift_bridgeObjectRetain();
    sub_243B7CC10(0, v17, 0);
    v19 = *(unsigned __int8 *)(v7 + 80);
    v27[1] = v18;
    v20 = v18 + ((v19 + 32) & ~v19);
    v30 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_243B6F8F0(v20, (uint64_t)v11, type metadata accessor for StoredPhotoProto);
      v21 = v32;
      sub_243B6F8F0((uint64_t)v11, v32, type metadata accessor for StoredPhotoProto);
      v33 = v31;
      StoredPhoto.init(protobuf:version:)(v21, &v33, (uint64_t)v15);
      sub_243B7FA20((uint64_t)v11, type metadata accessor for StoredPhotoProto);
      v22 = v34;
      if (v3)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC10(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v34;
      }
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_243B7CC10(v23 > 1, v24 + 1, 1);
        v22 = v34;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      sub_243B6F934((uint64_t)v15, v22+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v24, type metadata accessor for StoredPhoto);
      v20 += v30;
      if (!--v17)
      {
        a1 = v28;
        v26 = v29;
        goto LABEL_12;
      }
    }
    swift_release();
    sub_243B7FA20(v28, type metadata accessor for GeneratePhotoResponseProto);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v22 = MEMORY[0x24BEE4AF8];
    v26 = v29;
LABEL_12:
    sub_243B7FA20(a1, type metadata accessor for GeneratePhotoResponseProto);
    result = swift_bridgeObjectRelease();
    *v26 = v22;
  }
  return result;
}

uint64_t GeneratePhotoResponse.protobuf(version:)(uint64_t a1)
{
  return sub_243B88D0C(a1, type metadata accessor for GeneratePhotoResponseProto, &qword_2572ED720, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243B88D0C(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  a2(0);
  sub_243B88508(a3, a2, a4);
  return sub_243BFD4CC();
}

uint64_t sub_243B88DA0(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v27 = a3;
  v5 = type metadata accessor for StoredPhoto(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StoredPhotoProto(0);
  v10 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v26 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v23 = a1;
    v28 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCD4(0, v13, 0);
    v15 = *(unsigned __int8 *)(v6 + 80);
    v22 = a2;
    v16 = a2 + ((v15 + 32) & ~v15);
    v24 = *(_QWORD *)(v6 + 72);
    do
    {
      v17 = sub_243B6F8F0(v16, (uint64_t)v8, type metadata accessor for StoredPhoto);
      MEMORY[0x24BDAC7A8](v17);
      *(&v22 - 2) = (uint64_t)v8;
      *((_BYTE *)&v22 - 8) = v27;
      sub_243B88508(&qword_2572ED710, v18, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
      sub_243BFD4CC();
      sub_243B7FA20((uint64_t)v8, type metadata accessor for StoredPhoto);
      v14 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCD4(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v28;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_243B7CCD4(v19 > 1, v20 + 1, 1);
        v14 = v28;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      sub_243B6F934((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v20, type metadata accessor for StoredPhotoProto);
      v16 += v24;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a1 = v23;
  }
  result = swift_bridgeObjectRelease();
  *a1 = v14;
  return result;
}

uint64_t sub_243B89000@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;

  v4 = *a2;
  return GeneratePhotoResponse.init(protobuf:version:)(a1, &v4, a3);
}

uint64_t sub_243B89028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B8905C(a1, a2, a3, type metadata accessor for GeneratePhotoResponseProto, &qword_2572ED720, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243B8905C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  a4(0);
  sub_243B88508(a5, a4, a6);
  return sub_243BFD4CC();
}

uint64_t sub_243B890FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_243B88788(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B89118(_QWORD *a1)
{
  uint64_t v1;

  return sub_243B88DA0(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_243B89134()
{
  return sub_243B88508(&qword_2572ED718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243B89160()
{
  return sub_243B88508(&qword_2572ED720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

ValueMetadata *type metadata accessor for GeneratePhotoRequest()
{
  return &type metadata for GeneratePhotoRequest;
}

ValueMetadata *type metadata accessor for GeneratePhotoResponse()
{
  return &type metadata for GeneratePhotoResponse;
}

uint64_t sub_243B891B0(_QWORD *a1)
{
  return sub_243B89118(a1);
}

uint64_t sub_243B891C4(_QWORD *a1)
{
  return sub_243B890FC(a1);
}

uint64_t SyncFacesRequest.trackedFaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncFacesRequest.cachedIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncFacesRequest.init(trackedFaces:cachedIdentifiers:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t SyncFacesRequest.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_243B8D850(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_243B8D850(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static SyncFacesRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_243B8A2D0(*a1, *a2) & 1) != 0)
    return sub_243B8A2D0(v2, v3);
  else
    return 0;
}

uint64_t sub_243B89294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = type metadata accessor for StoredPhotoLayoutProto(0);
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for StoredPhotoProto(0);
  MEMORY[0x24BDAC7A8](v6);
  v21 = (uint64_t)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v20 = (uint64_t)v18 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v18[0] = v4;
      v18[5] = 0;
      v12 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v13 = a2 + v12;
      v14 = *(_QWORD *)(v9 + 72);
      v18[3] = a1 + v12;
      v18[4] = v11;
      v18[1] = v14;
      v18[2] = a2 + v12;
      v18[7] = v6;
      v15 = v20;
      sub_243B6F8F0(a1 + v12, v20, type metadata accessor for StoredPhotoProto);
      sub_243B6F8F0(v13, v21, type metadata accessor for StoredPhotoProto);
      __asm { BR              X10 }
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_243B899BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_243B8A2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_243BFD280();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.n128_f64[0] = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == *(_QWORD *)(a2 + 16))
  {
    if (!v12 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
      v15 = v12 - 1;
      do
      {
        v16 = a1;
        v14(v11, a1 + v13, v4, v9);
        v17 = a2;
        ((void (*)(char *, unint64_t, uint64_t))v14)(v6, a2 + v13, v4);
        sub_243B88508(&qword_2572ED538, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v18 = sub_243BFD7D8();
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v6, v4);
        v19(v11, v4);
        v21 = v15-- != 0;
        if ((v18 & 1) == 0)
          break;
        v13 += v23;
        a2 = v17;
        a1 = v16;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_243B8A454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;

  v22 = type metadata accessor for StoredPhotoLayoutProto(0);
  MEMORY[0x24BDAC7A8](v22);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v17 = 0;
    return v17 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v21 = *(_QWORD *)(v7 + 72);
    v12 = v10 - 1;
    while (1)
    {
      sub_243B6F8F0(a1 + v11, (uint64_t)v9, type metadata accessor for StoredPhotoLayoutProto);
      sub_243B6F8F0(a2 + v11, (uint64_t)v5, type metadata accessor for StoredPhotoLayoutProto);
      v13 = *(int *)(v22 + 20);
      v14 = *(_QWORD *)&v9[v13];
      v15 = *(_QWORD *)&v5[v13];
      if (v14 != v15)
      {
        swift_retain();
        swift_retain();
        v16 = sub_243BBFAA8(v14, v15);
        swift_release();
        swift_release();
        if ((v16 & 1) == 0)
          break;
      }
      sub_243BFD394();
      sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = sub_243BFD7D8();
      sub_243B7FA20((uint64_t)v5, type metadata accessor for StoredPhotoLayoutProto);
      sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayoutProto);
      v19 = v12-- != 0;
      if ((v17 & 1) != 0)
      {
        v11 += v21;
        if (v19)
          continue;
      }
      return v17 & 1;
    }
    sub_243B7FA20((uint64_t)v5, type metadata accessor for StoredPhotoLayoutProto);
    sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayoutProto);
    goto LABEL_15;
  }
  v17 = 1;
  return v17 & 1;
}

uint64_t sub_243B8A63C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_243BFE0F0(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_243BFE0F0() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_243B8A700(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (int *)type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_243B6F8F0(a1 + v12, (uint64_t)v10, type metadata accessor for StoredPhoto);
      sub_243B6F8F0(a2 + v12, (uint64_t)v6, type metadata accessor for StoredPhoto);
      if ((sub_243BFD250() & 1) == 0
        || (sub_243BFD214() & 1) == 0
        || *(double *)&v10[v4[6]] != *(double *)&v6[v4[6]]
        || *(_QWORD *)&v10[v4[7]] != *(_QWORD *)&v6[v4[7]]
        || (sub_243B7C7B8(*(_QWORD *)&v10[v4[8]], *(_QWORD *)&v6[v4[8]]) & 1) == 0)
      {
        break;
      }
      v15 = v4[9];
      v16 = &v10[v15];
      v17 = *(_QWORD *)&v10[v15 + 8];
      v18 = &v6[v15];
      v19 = *((_QWORD *)v18 + 1);
      if (v17)
      {
        if (!v19 || (*(_QWORD *)v16 != *(_QWORD *)v18 || v17 != v19) && (sub_243BFE0F0() & 1) == 0)
          break;
      }
      else if (v19)
      {
        break;
      }
      sub_243B7FA20((uint64_t)v6, type metadata accessor for StoredPhoto);
      sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhoto);
      v12 += v13;
      result = 1;
      if (!--v11)
        return result;
    }
    sub_243B7FA20((uint64_t)v6, type metadata accessor for StoredPhoto);
    sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhoto);
  }
  return 0;
}

uint64_t SyncFacesRequest.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_243BFE1A4();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8A958()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_243BFE1A4();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8A9C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_243B8D850(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_243B8D850(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B8AA24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_243BFE1A4();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8AA90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_243B8A2D0(*a1, *a2) & 1) != 0)
    return sub_243B8A2D0(v2, v3);
  else
    return 0;
}

uint64_t SyncFacesRequest.init(protobuf:version:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v32 = sub_243BFD280();
  v4 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  v29 = a1;
  if (v10)
  {
    v33 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCB8(0, v10, 0);
    v12 = v33;
    v30 = v9;
    v13 = (unint64_t *)(v9 + 40);
    while (1)
    {
      v14 = *(v13 - 1);
      v15 = *v13;
      sub_243B7FBDC(v14, *v13);
      sub_243B7FBDC(v14, v15);
      UUID.init(serialized:version:)(v14, v15);
      if (v2)
        break;
      sub_243B7FCC0(v14, v15);
      v33 = v12;
      v17 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_243B7CCB8(v16 > 1, v17 + 1, 1);
        v12 = v33;
      }
      v13 += 2;
      *(_QWORD *)(v12 + 16) = v17 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v17, v8, v32);
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        a1 = v29;
        v11 = MEMORY[0x24BEE4AF8];
        goto LABEL_10;
      }
    }
    sub_243B7FCC0(v14, v15);
    goto LABEL_19;
  }
  v12 = MEMORY[0x24BEE4AF8];
LABEL_10:
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v33 = v11;
    swift_bridgeObjectRetain();
    sub_243B7CCB8(0, v19, 0);
    v20 = v33;
    v30 = v18;
    v21 = (unint64_t *)(v18 + 40);
    while (1)
    {
      v22 = *(v21 - 1);
      v23 = *v21;
      sub_243B7FBDC(v22, *v21);
      sub_243B7FBDC(v22, v23);
      UUID.init(serialized:version:)(v22, v23);
      if (v2)
        break;
      sub_243B7FCC0(v22, v23);
      v33 = v20;
      v25 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_243B7CCB8(v24 > 1, v25 + 1, 1);
        v20 = v33;
      }
      v21 += 2;
      *(_QWORD *)(v20 + 16) = v25 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v20+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v25, v31, v32);
      if (!--v19)
      {
        v27 = v28;
        a1 = v29;
        goto LABEL_20;
      }
    }
    sub_243B7FCC0(v22, v23);
    swift_bridgeObjectRelease();
LABEL_19:
    swift_release();
    sub_243B7FA20((uint64_t)v29, type metadata accessor for SyncFacesRequestProto);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x24BEE4AF8];
  v27 = v28;
LABEL_20:
  sub_243B7FA20((uint64_t)a1, type metadata accessor for SyncFacesRequestProto);
  result = swift_bridgeObjectRelease();
  *v27 = v12;
  v27[1] = v20;
  return result;
}

uint64_t SyncFacesRequest.protobuf(version:)()
{
  type metadata accessor for SyncFacesRequestProto(0);
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B8AE98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  v48 = v7;
  v45 = a3;
  v46 = a1;
  if (v10)
  {
    v58 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCF0(0, v10, 0);
    v12 = *(unsigned __int8 *)(v7 + 80);
    v44 = a2;
    v13 = a2 + ((v12 + 32) & ~v12);
    v47 = *(_QWORD *)(v7 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    do
    {
      v14(v9, v13, v6);
      v49 = sub_243BFD268();
      v50 = v15;
      v51 = v16;
      v52 = v17;
      v53 = v18;
      v54 = v19;
      v55 = v20;
      v56 = v21;
      v57 = v22;
      sub_243BFD268();
      sub_243BFD0E8();
      swift_allocObject();
      v23 = sub_243BFD0AC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v11 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCF0(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v58;
      }
      v25 = *(_QWORD *)(v11 + 16);
      v24 = *(_QWORD *)(v11 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_243B7CCF0(v24 > 1, v25 + 1, 1);
        v11 = v58;
      }
      *(_QWORD *)(v11 + 16) = v25 + 1;
      v26 = v11 + 16 * v25;
      *(_QWORD *)(v26 + 32) = 0x1000000000;
      *(_QWORD *)(v26 + 40) = v23 | 0x4000000000000000;
      v7 = v48;
      v13 += v47;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a3 = v45;
    a1 = v46;
  }
  swift_bridgeObjectRelease();
  *a1 = v11;
  v27 = *(_QWORD *)(a3 + 16);
  v28 = MEMORY[0x24BEE4AF8];
  if (v27)
  {
    v58 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CCF0(0, v27, 0);
    v29 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v47 = *(_QWORD *)(v7 + 72);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    do
    {
      v30(v9, v29, v6);
      v49 = sub_243BFD268();
      v50 = v31;
      v51 = v32;
      v52 = v33;
      v53 = v34;
      v54 = v35;
      v55 = v36;
      v56 = v37;
      v57 = v38;
      sub_243BFD268();
      sub_243BFD0E8();
      swift_allocObject();
      v39 = sub_243BFD0AC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v28 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCF0(0, *(_QWORD *)(v28 + 16) + 1, 1);
        v28 = v58;
      }
      v41 = *(_QWORD *)(v28 + 16);
      v40 = *(_QWORD *)(v28 + 24);
      if (v41 >= v40 >> 1)
      {
        sub_243B7CCF0(v40 > 1, v41 + 1, 1);
        v28 = v58;
      }
      *(_QWORD *)(v28 + 16) = v41 + 1;
      v42 = v28 + 16 * v41;
      *(_QWORD *)(v42 + 32) = 0x1000000000;
      *(_QWORD *)(v42 + 40) = v39 | 0x4000000000000000;
      v7 = v48;
      v29 += v47;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    a1 = v46;
  }
  result = swift_bridgeObjectRelease();
  a1[1] = v28;
  return result;
}

uint64_t sub_243B8B2C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SyncFacesRequest.init(protobuf:version:)(a1, a2);
}

uint64_t sub_243B8B2D8()
{
  type metadata accessor for SyncFacesRequestProto(0);
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  return sub_243BFD4CC();
}

uint64_t SyncedPhotosFace.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SyncedPhotosFace.day.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t SyncedPhotosFace.photos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncedPhotosFace.cached.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncedPhotosFace.complete.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

int *SyncedPhotosFace.init(id:day:photos:cached:complete:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  int *result;
  uint64_t v19;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a9, a1, a7);
  result = (int *)type metadata accessor for SyncedPhotosFace(0, a7, a8, v17);
  *(_QWORD *)(a9 + result[10]) = a4;
  v19 = a9 + result[9];
  *(_QWORD *)v19 = a2;
  *(_BYTE *)(v19 + 8) = a3 & 1;
  *(_QWORD *)(a9 + result[11]) = a5;
  *(_BYTE *)(a9 + result[12]) = a6;
  return result;
}

int *SyncedPhotosFace.init(photoDay:photos:cached:complete:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int *result;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v27 = a4;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, v17, v14);
  v19 = type metadata accessor for PhotoDay(0, a5, a6, v18);
  v20 = (uint64_t *)(a1 + *(int *)(v19 + 36));
  v21 = *v20;
  v22 = *((_BYTE *)v20 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v16, a5);
  result = (int *)type metadata accessor for SyncedPhotosFace(0, a5, a6, v23);
  *(_QWORD *)(a7 + result[10]) = a2;
  v25 = a7 + result[9];
  *(_QWORD *)v25 = v21;
  *(_BYTE *)(v25 + 8) = v22;
  *(_QWORD *)(a7 + result[11]) = a3;
  *(_BYTE *)(a7 + result[12]) = v27;
  return result;
}

uint64_t SyncedPhotosFace.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFE0D8();
  sub_243BFD85C();
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  v0 = sub_243BFD280();
  v1 = swift_bridgeObjectRetain();
  MEMORY[0x249501D08](v1, v0);
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  v2 = type metadata accessor for StoredPhoto(0);
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x249501D08](v3, v2);
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  return 0;
}

uint64_t SyncedPhotosFace.photoDay.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v2, v5, v7);
  v10 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v11 = *v10;
  v12 = *((_BYTE *)v10 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v9, v5);
  result = type metadata accessor for PhotoDay(0, v5, v13, v14);
  v16 = a2 + *(int *)(result + 36);
  *(_QWORD *)v16 = v11;
  *(_BYTE *)(v16 + 8) = v12;
  return result;
}

uint64_t SyncedPhotosFace.hash(into:)(__int128 *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v3 = v2;
  sub_243BFD7A8();
  if (*(_BYTE *)(v2 + a2[9] + 8) == 1)
  {
    sub_243BFE1BC();
  }
  else
  {
    sub_243BFE1BC();
    sub_243BFE1B0();
  }
  v6 = *(_QWORD *)(v2 + a2[10]);
  swift_bridgeObjectRetain();
  sub_243B8DA28(a1, v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v3 + a2[11]);
  swift_bridgeObjectRetain();
  sub_243B8D850((uint64_t)a1, v7);
  swift_bridgeObjectRelease();
  return sub_243BFE1BC();
}

uint64_t static SyncedPhotosFace.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  int v15;

  if ((sub_243BFD7D8() & 1) == 0)
    goto LABEL_11;
  v9 = type metadata accessor for SyncedPhotosFace(0, a3, a4, v8);
  v10 = v9;
  v11 = *(int *)(v9 + 36);
  v12 = (_QWORD *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 8);
  v14 = (_QWORD *)(a2 + v11);
  v15 = *(unsigned __int8 *)(a2 + v11 + 8);
  if ((v13 & 1) == 0)
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      goto LABEL_11;
    goto LABEL_8;
  }
  if (v15)
  {
LABEL_8:
    if ((sub_243B8A700(*(_QWORD *)(a1 + *(int *)(v9 + 40)), *(_QWORD *)(a2 + *(int *)(v9 + 40))) & 1) != 0
      && (sub_243B8A2D0(*(_QWORD *)(a1 + *(int *)(v10 + 44)), *(_QWORD *)(a2 + *(int *)(v10 + 44))) & 1) != 0)
    {
      LOBYTE(v15) = *(_BYTE *)(a1 + *(int *)(v10 + 48)) ^ *(_BYTE *)(a2 + *(int *)(v10 + 48)) ^ 1;
      return v15 & 1;
    }
LABEL_11:
    LOBYTE(v15) = 0;
  }
  return v15 & 1;
}

uint64_t SyncedPhotosFace.hashValue.getter(uint64_t a1)
{
  return sub_243B8BB80(a1, (void (*)(_BYTE *, uint64_t))SyncedPhotosFace.hash(into:));
}

uint64_t sub_243B8BA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B8BBE4(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SyncedPhotosFace.hash(into:));
}

uint64_t sub_243B8BA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SyncedPhotosFace.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t PhotoDay.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_243BFD7A8();
  if (*(_BYTE *)(v2 + *(int *)(a2 + 36) + 8) == 1)
    return sub_243BFE1BC();
  sub_243BFE1BC();
  return sub_243BFE1B0();
}

uint64_t static PhotoDay.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  char v13;

  if ((sub_243BFD7D8() & 1) == 0)
    return 0;
  v9 = *(int *)(type metadata accessor for PhotoDay(0, a3, a4, v8) + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = *(_BYTE *)(a1 + v9 + 8);
  v12 = (_QWORD *)(a2 + v9);
  v13 = *(_BYTE *)(a2 + v9 + 8);
  if ((v11 & 1) != 0)
  {
    if ((v13 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v10 != *v12)
      v13 = 1;
    if ((v13 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t PhotoDay.hashValue.getter(uint64_t a1)
{
  return sub_243B8BB80(a1, (void (*)(_BYTE *, uint64_t))PhotoDay.hash(into:));
}

uint64_t sub_243B8BB80(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v5[72];

  sub_243BFE1A4();
  a2(v5, a1);
  return sub_243BFE1E0();
}

uint64_t sub_243B8BBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B8BBE4(a1, a2, a3, (void (*)(_BYTE *, uint64_t))PhotoDay.hash(into:));
}

uint64_t sub_243B8BBE4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v7[72];

  sub_243BFE1A4();
  a4(v7, a2);
  return sub_243BFE1E0();
}

uint64_t sub_243B8BC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PhotoDay.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SyncedPhotosFace.streamify()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v4 = type metadata accessor for StoredPhoto(0);
  v41 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 24);
  v35 = *(_QWORD *)(a1 + 16);
  v12 = type metadata accessor for PhotoDay(0, v35, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v31 - v17;
  v44 = sub_243BFD718();
  SyncedPhotosFace.photoDay.getter(a1, (uint64_t)v18);
  v19 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  if (*(_QWORD *)(v19 + 16))
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
    swift_bridgeObjectRetain();
    SyncedPhotosFace.init(photoDay:photos:cached:complete:)((uint64_t)v15, MEMORY[0x24BEE4AF8], v19, 0, v35, v10, (uint64_t)v9);
    sub_243BFD9DC();
    sub_243BFD9B8();
  }
  v33 = v10;
  v34 = v18;
  v20 = *(_QWORD *)(v2 + *(int *)(a1 + 40));
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v31[1] = *(_QWORD *)(v2 + *(int *)(a1 + 40));
    v32 = v2;
    v22 = *(unsigned __int8 *)(v41 + 80);
    v42 = v12;
    v43 = a1;
    v23 = (v22 + 32) & ~v22;
    v24 = v20 + v23;
    v39 = *(_QWORD *)(v41 + 72);
    v40 = v23;
    v37 = v22 | 7;
    v38 = v39 + v23;
    swift_bridgeObjectRetain();
    v41 = v13;
    v36 = xmmword_243BFFAC0;
    v26 = v34;
    v25 = v35;
    v27 = v33;
    do
    {
      sub_243B6F8F0(v24, (uint64_t)v6, type metadata accessor for StoredPhoto);
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v15, v26, v42);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED098);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v36;
      sub_243B6F8F0((uint64_t)v6, v28 + v40, type metadata accessor for StoredPhoto);
      SyncedPhotosFace.init(photoDay:photos:cached:complete:)((uint64_t)v15, v28, MEMORY[0x24BEE4AF8], 0, v25, v27, (uint64_t)v9);
      sub_243BFD9DC();
      sub_243BFD9B8();
      sub_243B7FA20((uint64_t)v6, type metadata accessor for StoredPhoto);
      v24 += v39;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v12 = v42;
    a1 = v43;
    v2 = v32;
    v13 = v41;
  }
  v29 = v34;
  if (*(_BYTE *)(v2 + *(int *)(a1 + 48)) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v34, v12);
    SyncedPhotosFace.init(photoDay:photos:cached:complete:)((uint64_t)v15, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], 1, v35, v33, (uint64_t)v9);
    sub_243BFD9DC();
    sub_243BFD9B8();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v12);
  return v44;
}

uint64_t static SyncedPhotosFace.destreamify(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, int *);
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, int *);
  uint64_t v44;
  void (*v45)(char *, char *, int *);
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v7 = (int *)type metadata accessor for SyncedPhotosFace(255, a2, a3, a4);
  v8 = sub_243BFDD0C();
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v73 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v74 = (char *)&v62 - v11;
  v68 = a2;
  v69 = a3;
  v13 = type metadata accessor for PhotoDay(0, a2, a3, v12);
  v76 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v65 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v75 = (char *)&v62 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v78 = (uint64_t)&v62 - v18;
  v19 = *((_QWORD *)v7 - 1);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v64 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v62 - v23;
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v62 - v27;
  v29 = MEMORY[0x249502B6C](&protocol conformance descriptor for PhotoDay<A>, v13, v26);
  v81 = sub_243BFD70C();
  v30 = sub_243BFD718();
  v80 = v30;
  v31 = swift_bridgeObjectRetain();
  if (MEMORY[0x249501D74](v31, v7))
  {
    v63 = v20;
    v32 = 0;
    v71 = v28;
    v72 = a1;
    v70 = v29;
    while (1)
    {
      v40 = sub_243BFD994();
      sub_243BFD970();
      if ((v40 & 1) != 0)
      {
        v41 = a1
            + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
            + *(_QWORD *)(v19 + 72) * v32;
        v42 = v19;
        v43 = *(void (**)(char *, unint64_t, int *))(v19 + 16);
        v43(v28, v41, v7);
        v44 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_12;
      }
      else
      {
        result = sub_243BFDE5C();
        if (v63 != 8)
        {
          __break(1u);
          return result;
        }
        v79 = result;
        v42 = v19;
        v43 = *(void (**)(char *, unint64_t, int *))(v19 + 16);
        v43(v28, (unint64_t)&v79, v7);
        swift_unknownObjectRelease();
        v44 = v32 + 1;
        if (__OFADD__(v32, 1))
        {
LABEL_12:
          __break(1u);
LABEL_13:
          v56 = swift_bridgeObjectRelease();
          v30 = v80;
          goto LABEL_15;
        }
      }
      v77 = v44;
      v45 = *(void (**)(char *, char *, int *))(v42 + 32);
      v45(v24, v28, v7);
      v46 = v78;
      SyncedPhotosFace.photoDay.getter((uint64_t)v7, v78);
      v47 = v74;
      MEMORY[0x249501B34](v46, v81, v13, v7, v29);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v42 + 48))(v47, 1, v7) == 1)
      {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v67);
        v34 = v75;
        v33 = v76;
        v35 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
        v35(v75, v78, v13);
        sub_243BFD9DC();
        sub_243BFD9B8();
        v35(v34, v78, v13);
        v36 = (uint64_t)v73;
        v43(v73, (unint64_t)v24, v7);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v42 + 56))(v36, 0, 1, v7);
        v37 = v70;
        sub_243BFD778();
        sub_243BFD790();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v78, v13);
        v38 = *(void (**)(char *, int *))(v42 + 8);
        v29 = v37;
      }
      else
      {
        v48 = v64;
        v45(v64, v47, v7);
        v49 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
        v49(v75, v78, v13);
        v50 = (uint64_t)v65;
        v49(v65, v78, v13);
        v79 = *(_QWORD *)&v48[v7[10]];
        swift_bridgeObjectRetain();
        v51 = swift_bridgeObjectRetain();
        sub_243B7C62C(v51);
        v52 = v79;
        v79 = *(_QWORD *)&v48[v7[11]];
        swift_bridgeObjectRetain();
        v53 = swift_bridgeObjectRetain();
        sub_243B7C618(v53);
        v54 = (uint64_t)v73;
        SyncedPhotosFace.init(photoDay:photos:cached:complete:)(v50, v52, v79, v24[v7[12]], v68, v69, (uint64_t)v73);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v42 + 56))(v54, 0, 1, v7);
        v29 = v70;
        sub_243BFD778();
        sub_243BFD790();
        v38 = *(void (**)(char *, int *))(v42 + 8);
        v38(v48, v7);
        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v78, v13);
      }
      v19 = v42;
      v38(v24, v7);
      a1 = v72;
      v39 = MEMORY[0x249501D74](v72, v7);
      ++v32;
      v28 = v71;
      if (v77 == v39)
        goto LABEL_13;
    }
  }
  v56 = swift_bridgeObjectRelease();
LABEL_15:
  v79 = v30;
  MEMORY[0x24BDAC7A8](v56);
  v57 = v69;
  *(&v62 - 4) = v68;
  *(&v62 - 3) = v57;
  *(&v62 - 2) = (uint64_t)&v81;
  v58 = sub_243BFD9DC();
  swift_bridgeObjectRetain();
  v59 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v58);
  v61 = sub_243B76E5C((void (*)(char *, char *))sub_243B8DC14, (uint64_t)(&v62 - 6), v58, (uint64_t)v7, MEMORY[0x24BEE4078], v59, MEMORY[0x24BEE40A8], v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_243B8C578@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v10 = type metadata accessor for SyncedPhotosFace(255, a3, a4, a4);
  v11 = sub_243BFDD0C();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - v12;
  v14 = *a2;
  v16 = type metadata accessor for PhotoDay(0, a3, a4, v15);
  v17 = MEMORY[0x249502B6C](&protocol conformance descriptor for PhotoDay<A>, v16);
  MEMORY[0x249501B34](a1, v14, v16, v10, v17);
  v18 = *(_QWORD *)(v10 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v10);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a5, v13, v10);
  __break(1u);
  return result;
}

int *SyncedPhotosFace.init(protobuf:version:)@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t);
  int *result;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;

  v59 = a4;
  v55 = a5;
  v9 = sub_243BFD280();
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoProto(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v67 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v54 - v15;
  v17 = type metadata accessor for StoredPhoto(0);
  v66 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v60 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a1;
  LODWORD(v68) = *a2;
  v22 = a1[2];
  v23 = *(_QWORD *)(v22 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v23)
  {
    v58 = a3;
    v70 = MEMORY[0x24BEE4AF8];
    v25 = v22;
    swift_bridgeObjectRetain();
    sub_243B7CC10(0, v23, 0);
    v26 = *(unsigned __int8 *)(v12 + 80);
    v56 = v25;
    v27 = v25 + ((v26 + 32) & ~v26);
    v65 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      sub_243B6F8F0(v27, (uint64_t)v16, type metadata accessor for StoredPhotoProto);
      v28 = v67;
      sub_243B6F8F0((uint64_t)v16, v67, type metadata accessor for StoredPhotoProto);
      v69 = v68;
      StoredPhoto.init(protobuf:version:)(v28, &v69, (uint64_t)v19);
      sub_243B7FA20((uint64_t)v16, type metadata accessor for StoredPhotoProto);
      v24 = v70;
      if (v5)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC10(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v70;
      }
      v30 = *(_QWORD *)(v24 + 16);
      v29 = *(_QWORD *)(v24 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_243B7CC10(v29 > 1, v30 + 1, 1);
        v24 = v70;
      }
      *(_QWORD *)(v24 + 16) = v30 + 1;
      sub_243B6F934((uint64_t)v19, v24+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v30, type metadata accessor for StoredPhoto);
      v27 += v65;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        a3 = v58;
        goto LABEL_11;
      }
    }
    swift_release();
    sub_243B7FA20((uint64_t)v61, type metadata accessor for SyncedPhotosFaceProto);
    return (int *)swift_bridgeObjectRelease();
  }
LABEL_11:
  v31 = v61;
  v32 = *v61;
  v33 = v61[1];
  LOBYTE(v70) = v68;
  v34 = v59;
  v35 = *(_QWORD *)(v59 + 8);
  v36 = *(void (**)(uint64_t, unint64_t, uint64_t *, uint64_t, uint64_t))(v35 + 8);
  sub_243B7FBDC(v32, v33);
  v36(v32, v33, &v70, a3, v35);
  if (v5)
  {
    sub_243B7FA20((uint64_t)v31, type metadata accessor for SyncedPhotosFaceProto);
    return (int *)swift_bridgeObjectRelease();
  }
  v58 = a3;
  result = (int *)type metadata accessor for SyncedPhotosFaceProto(0);
  v38 = 0;
  v39 = (char *)v31 + result[9];
  v40 = v39[8];
  if ((v40 & 1) == 0 && (v38 = *(_QWORD *)v39, (*(_QWORD *)v39 & 0x8000000000000000) != 0))
  {
    __break(1u);
  }
  else
  {
    v68 = v38;
    v41 = v31[3];
    v42 = *(_QWORD *)(v41 + 16);
    v43 = MEMORY[0x24BEE4AF8];
    if (v42)
    {
      LODWORD(v67) = v40;
      v70 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_243B7CCB8(0, v42, 0);
      v43 = v70;
      v44 = (unint64_t *)(v41 + 40);
      do
      {
        v45 = *(v44 - 1);
        v46 = *v44;
        sub_243B7FBDC(v45, *v44);
        sub_243B7FBDC(v45, v46);
        UUID.init(serialized:version:)(v45, v46);
        sub_243B7FCC0(v45, v46);
        v70 = v43;
        v48 = *(_QWORD *)(v43 + 16);
        v47 = *(_QWORD *)(v43 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_243B7CCB8(v47 > 1, v48 + 1, 1);
          v43 = v70;
        }
        v44 += 2;
        *(_QWORD *)(v43 + 16) = v48 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v62 + 32))(v43+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(_QWORD *)(v62 + 72) * v48, v64, v63);
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease();
      v31 = v61;
      v34 = v59;
      LOBYTE(v40) = v67;
    }
    v49 = *((_BYTE *)v31 + 32);
    sub_243B7FA20((uint64_t)v31, type metadata accessor for SyncedPhotosFaceProto);
    v50 = v58;
    v51 = v55;
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v55, v60, v58);
    result = (int *)type metadata accessor for SyncedPhotosFace(0, v50, v34, v52);
    *(_QWORD *)(v51 + result[10]) = v24;
    v53 = v51 + result[9];
    *(_QWORD *)v53 = v68;
    *(_BYTE *)(v53 + 8) = v40;
    *(_QWORD *)(v51 + result[11]) = v43;
    *(_BYTE *)(v51 + result[12]) = v49;
  }
  return result;
}

uint64_t SyncedPhotosFace.protobuf(version:)()
{
  type metadata accessor for SyncedPhotosFaceProto(0);
  sub_243B88508(&qword_2572ED790, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B8CC68(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;

  v6 = v5;
  LODWORD(v76) = a3;
  v69 = a1;
  v87 = *MEMORY[0x24BDAC8D0];
  v10 = sub_243BFD280();
  v11 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  v72 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v70 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StoredPhoto(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StoredPhotoProto(0);
  v18 = *(_QWORD *)(v17 - 8);
  v74 = v17;
  v75 = v18;
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = (int *)type metadata accessor for SyncedPhotosFace(0, a4, a5, v21);
  v68 = a2;
  v22 = *(_QWORD *)(a2 + v67[10]);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v23)
  {
    v65 = a5;
    v66 = a4;
    v77 = MEMORY[0x24BEE4AF8];
    v25 = v22;
    swift_bridgeObjectRetain();
    sub_243B7CCD4(0, v23, 0);
    v26 = *(unsigned __int8 *)(v14 + 80);
    v64[1] = v25;
    v27 = v25 + ((v26 + 32) & ~v26);
    v73 = *(_QWORD *)(v14 + 72);
    do
    {
      v28 = sub_243B6F8F0(v27, (uint64_t)v16, type metadata accessor for StoredPhoto);
      MEMORY[0x24BDAC7A8](v28);
      sub_243B88508(&qword_2572ED710, v29, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
      sub_243BFD4CC();
      sub_243B7FA20((uint64_t)v16, type metadata accessor for StoredPhoto);
      v24 = v77;
      v30 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCD4(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v77;
      }
      v32 = *(_QWORD *)(v24 + 16);
      v31 = *(_QWORD *)(v24 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_243B7CCD4(v31 > 1, v32 + 1, 1);
        v24 = v77;
      }
      *(_QWORD *)(v24 + 16) = v32 + 1;
      sub_243B6F934((uint64_t)v20, v24+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v32, type metadata accessor for StoredPhotoProto);
      v27 += v73;
      --v23;
      v6 = v30;
    }
    while (v23);
    swift_bridgeObjectRelease();
    a5 = v65;
    a4 = v66;
  }
  v33 = v69;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v33 + 16) = v24;
  LOBYTE(v77) = v76;
  v34 = v68;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(a5 + 8) + 16))(&v77, a4);
  if (!v6)
  {
    v37 = result;
    v38 = v36;
    sub_243B7FCC0(*(_QWORD *)v33, *(_QWORD *)(v33 + 8));
    *(_QWORD *)v33 = v37;
    *(_QWORD *)(v33 + 8) = v38;
    v39 = *(_QWORD *)(v34 + v67[11]);
    v40 = *(_QWORD *)(v39 + 16);
    v41 = MEMORY[0x24BEE4AF8];
    if (v40)
    {
      v76 = 0;
      v86 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_243B7CCF0(0, v40, 0);
      v42 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v75 = v39;
      v43 = v39 + v42;
      v44 = *(_QWORD *)(v72 + 72);
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
      do
      {
        v47 = v70;
        v46 = v71;
        v45(v70, v43, v71);
        v77 = sub_243BFD268();
        v78 = v48;
        v79 = v49;
        v80 = v50;
        v81 = v51;
        v82 = v52;
        v83 = v53;
        v84 = v54;
        v85 = v55;
        sub_243BFD268();
        sub_243BFD0E8();
        swift_allocObject();
        v56 = sub_243BFD0AC();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v46);
        v41 = v86;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_243B7CCF0(0, *(_QWORD *)(v41 + 16) + 1, 1);
          v41 = v86;
        }
        v58 = *(_QWORD *)(v41 + 16);
        v57 = *(_QWORD *)(v41 + 24);
        if (v58 >= v57 >> 1)
        {
          sub_243B7CCF0(v57 > 1, v58 + 1, 1);
          v41 = v86;
        }
        *(_QWORD *)(v41 + 16) = v58 + 1;
        v59 = v41 + 16 * v58;
        *(_QWORD *)(v59 + 32) = 0x1000000000;
        *(_QWORD *)(v59 + 40) = v56 | 0x4000000000000000;
        v43 += v44;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
      v34 = v68;
      v33 = v69;
    }
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 24) = v41;
    v60 = v67;
    *(_BYTE *)(v33 + 32) = *(_BYTE *)(v34 + v67[12]);
    v61 = (uint64_t *)(v34 + v60[9]);
    if ((v61[1] & 1) == 0)
    {
      v62 = *v61;
      if (*v61 < 0)
      {
        result = sub_243BFDF64();
        __break(1u);
      }
      else
      {
        result = type metadata accessor for SyncedPhotosFaceProto(0);
        v63 = v33 + *(int *)(result + 36);
        *(_QWORD *)v63 = v62;
        *(_BYTE *)(v63 + 8) = 0;
      }
    }
  }
  return result;
}

Swift::Void __swiftcall SyncedPhotosFace.gather(attachments:version:)(Swift::OpaquePointer *attachments, PhotosFace::ProtocolVersion version)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = v2;
  v5 = (char *)version;
  v7 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v3 + *(int *)(v4 + 40));
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *v5;
    v14 = v11 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v15 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_243B6F8F0(v14, (uint64_t)v10, type metadata accessor for StoredPhoto);
      v17 = v13;
      StoredPhoto.gather(attachments:version:)(attachments, (PhotosFace::ProtocolVersion)&v17);
      sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhoto);
      v14 += v15;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SyncedPhotosFace.save(attachments:version:)(Swift::OpaquePointer attachments, PhotosFace::ProtocolVersion version)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint8_t *v22;
  char *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v4 = v3;
  v5 = v2;
  v6 = (char *)version;
  v8 = type metadata accessor for StoredPhoto(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v5;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v6;
  if (qword_2572EB820 != -1)
    swift_once();
  v17 = sub_243BFD598();
  __swift_project_value_buffer(v17, (uint64_t)qword_2572EF838);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v4, v38);
  v18 = sub_243BFD580();
  v37 = v12;
  v19 = v18;
  v20 = sub_243BFDCB8();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v36 = v9;
    v22 = v21;
    v35 = v4;
    *(_DWORD *)v21 = 134217984;
    v33 = *(_QWORD *)(*(_QWORD *)&v15[*(int *)(v38 + 40)] + 16);
    v34 = v21 + 4;
    v23 = v15;
    v24 = v38;
    (*(void (**)(char *))(v37 + 8))(v23);
    v39 = v33;
    v4 = v35;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v19, v20, "Saving %ld photos to disk.", v22, 0xCu);
    v25 = v22;
    v9 = v36;
    MEMORY[0x249502C5C](v25, -1, -1);
    v26 = v24;
  }
  else
  {
    v26 = v38;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
  }

  v27 = *(_QWORD *)(v4 + *(int *)(v26 + 40));
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = v27 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v30 = *(_QWORD *)(v9 + 72);
    v38 = v27;
    swift_bridgeObjectRetain();
    do
    {
      sub_243B6F8F0(v29, (uint64_t)v11, type metadata accessor for StoredPhoto);
      v40 = v16;
      StoredPhoto.save(attachments:version:)(attachments, (PhotosFace::ProtocolVersion)&v40);
      sub_243B7FA20((uint64_t)v11, type metadata accessor for StoredPhoto);
      if (v31)
        break;
      v29 += v30;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
}

int *sub_243B8D58C@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v5;

  v5 = *a2;
  return SyncedPhotosFace.init(protobuf:version:)(a1, &v5, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_243B8D5BC()
{
  return SyncedPhotosFace.protobuf(version:)();
}

void sub_243B8D5D4(Swift::OpaquePointer a1, PhotosFace::ProtocolVersion a2)
{
  SyncedPhotosFace.save(attachments:version:)(a1, a2);
}

void sub_243B8D5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_243B8D648(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x243B8D82CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_243B8D850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v17[2];

  v4 = sub_243BFD280();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED910);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v17[1] = a1;
  sub_243BFE1B0();
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_243BFD7A8();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

uint64_t sub_243B8D9F4(_QWORD *a1)
{
  uint64_t v1;

  return sub_243B8AE98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for SyncedPhotosFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SyncedPhotosFace);
}

uint64_t type metadata accessor for PhotoDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PhotoDay);
}

uint64_t sub_243B8DA28(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for StoredPhoto(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  result = sub_243BFE1B0();
  if (v8)
  {
    v10 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_243B6F8F0(v10, (uint64_t)v7, type metadata accessor for StoredPhoto);
      sub_243BFD280();
      sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_243BFD7A8();
      sub_243BFD22C();
      sub_243B88508(&qword_2572ED908, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      sub_243BFD7A8();
      sub_243BFE1D4();
      sub_243BFE1B0();
      v12 = *(_QWORD *)&v7[*(int *)(v4 + 32)];
      swift_bridgeObjectRetain();
      sub_243BA2DE0(a1, v12);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v7[*(int *)(v4 + 36) + 8])
      {
        sub_243BFE1BC();
        swift_bridgeObjectRetain();
        sub_243BFD850();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_243BFE1BC();
      }
      result = sub_243B7FA20((uint64_t)v7, type metadata accessor for StoredPhoto);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_243B8DC14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_243B8C578(a1, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_243B8DC34(uint64_t a1)
{
  uint64_t v1;

  return sub_243B8CC68(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_243B8DC58()
{
  unint64_t result;

  result = qword_2572ED798;
  if (!qword_2572ED798)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for SyncFacesRequest, &type metadata for SyncFacesRequest);
    atomic_store(result, (unint64_t *)&qword_2572ED798);
  }
  return result;
}

uint64_t sub_243B8DC9C()
{
  return sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

void sub_243B8DCC8()
{
  JUMPOUT(0x249502B6CLL);
}

void sub_243B8DCD8()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243B8DCE8()
{
  return sub_243B88508(&qword_2572ED790, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t destroy for SyncFacesRequest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s10PhotosFace16SyncFacesRequestVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SyncFacesRequest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SyncFacesRequest(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SyncFacesRequest()
{
  return &type metadata for SyncFacesRequest;
}

uint64_t sub_243B8DE1C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243B8DEAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    *(_QWORD *)v10 = v12;
    v13 = (_QWORD *)(((unint64_t)v4 + v6 + 23) & 0xFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + v6 + 23) & 0xFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_243B8DFA8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B8DFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  v12 = (_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_243B8E098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v7 += 23;
  v8 += 23;
  v12 = (v8 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFF8);
  v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v12 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t sub_243B8E150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  v12 = (_QWORD *)((v7 + 23) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_243B8E1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v7 += 23;
  v12 = (_QWORD *)((v8 + 23) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = *v12;
  v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t sub_243B8E290(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((a1 + v7 + 23) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((v7 + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_243B8E320 + 4 * byte_243C003B0[v12]))();
  }
}

void sub_243B8E3B4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_243B8E4D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x243B8E54CLL);
}

void sub_243B8E4E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x243B8E4E8);
  JUMPOUT(0x243B8E54CLL);
}

void sub_243B8E528()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x243B8E54CLL);
}

void sub_243B8E530()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x243B8E54CLL);
}

uint64_t sub_243B8E538(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x243B8E54CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x243B8E548);
    JUMPOUT(0x243B8E544);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_243B8E564()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243B8E5D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  v7 = (a2 - v5 + 255) >> (8 * v6);
  if (v6 < 4)
    v8 = v7 + 1;
  else
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_243B8E654 + 4 * byte_243C003BF[v10]))();
}

void sub_243B8E6BC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v7 >= a3)
  {
    v12 = 0;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_243B8E7CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_243B8E7D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x243B8E7DCLL);
}

void sub_243B8E7F8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_243B8E800()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_243B8E808(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x243B8E810);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t sub_243B8E830(_QWORD *a1)
{
  return sub_243B8D9F4(a1);
}

uint64_t AlbumID.init(id:album:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;

  v8 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for AlbumID();
  v10 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t type metadata accessor for AlbumID()
{
  uint64_t result;

  result = qword_2543CE3E8;
  if (!qword_2543CE3E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AlbumID.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AlbumID.album.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AlbumID() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AlbumID.hash(into:)()
{
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  type metadata accessor for AlbumID();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  return swift_bridgeObjectRelease();
}

uint64_t static AlbumID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if ((sub_243BFD250() & 1) == 0)
    return 0;
  v4 = *(int *)(type metadata accessor for AlbumID() + 20);
  v5 = *(_QWORD *)(a1 + v4);
  v6 = *(_QWORD *)(a1 + v4 + 8);
  v7 = (_QWORD *)(a2 + v4);
  if (v5 == *v7 && v6 == v7[1])
    return 1;
  else
    return sub_243BFE0F0();
}

uint64_t AlbumID.hashValue.getter()
{
  sub_243BFE1A4();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  type metadata accessor for AlbumID();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8EAF0()
{
  sub_243BFE1A4();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8EB94()
{
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B8EC1C()
{
  sub_243BFE1A4();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8ECBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_243B8ECF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if ((sub_243BFD250() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return sub_243BFE0F0();
}

uint64_t AlbumID.description.getter()
{
  _QWORD v1[2];

  sub_243BFDE44();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "AlbumID(id: ");
  sub_243BFD280();
  sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  type metadata accessor for AlbumID();
  swift_bridgeObjectRetain();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  return v1[0];
}

uint64_t AlbumID.init(protobuf:version:)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[16];

  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v9) = *a2;
  v11 = a1[2];
  v12 = a1[3];
  v17[15] = v9;
  sub_243B7FBDC(v11, v12);
  UUID.init(serialized:version:)(v11, v12);
  if (v3)
    return sub_243B8EF8C((uint64_t)a1);
  v15 = *a1;
  v14 = a1[1];
  swift_bridgeObjectRetain();
  sub_243B8EF8C((uint64_t)a1);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(a3, v10, v7);
  result = type metadata accessor for AlbumID();
  v16 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v16 = v15;
  v16[1] = v14;
  return result;
}

uint64_t sub_243B8EF8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AlbumIDProto();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AlbumID.protobuf(version:)()
{
  type metadata accessor for AlbumIDProto();
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B8F04C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AlbumID() + 20));
  v5 = *v3;
  v4 = v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v5;
  a1[1] = v4;
  v6 = UUID.serialized(version:)();
  v8 = v7;
  result = sub_243B7FCC0(a1[2], a1[3]);
  a1[2] = v6;
  a1[3] = v8;
  return result;
}

uint64_t sub_243B8F0CC(_QWORD *a1)
{
  uint64_t v1;

  return sub_243B8F04C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B8F0E8()
{
  return sub_243B88508(&qword_2543CE3D8, (uint64_t (*)(uint64_t))type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
}

uint64_t sub_243B8F114(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_243B88508(&qword_2543CE3E0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  result = sub_243B88508(&qword_2543CE3D0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumID, (uint64_t)&protocol conformance descriptor for AlbumID);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_243B8F170()
{
  return sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t sub_243B8F19C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v9 = sub_243BFD280();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v11) = *a2;
  v13 = a1[2];
  v14 = a1[3];
  v20 = v11;
  sub_243B7FBDC(v13, v14);
  UUID.init(serialized:version:)(v13, v14);
  if (v4)
    return sub_243B8EF8C((uint64_t)a1);
  v17 = *a1;
  v16 = a1[1];
  swift_bridgeObjectRetain();
  sub_243B8EF8C((uint64_t)a1);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4, v12, v9);
  v18 = (_QWORD *)(a4 + *(int *)(a3 + 20));
  *v18 = v17;
  v18[1] = v16;
  return result;
}

uint64_t sub_243B8F2A0()
{
  type metadata accessor for AlbumIDProto();
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  return sub_243BFD4CC();
}

uint64_t *initializeBufferWithCopyOfBuffer for AlbumID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD280();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AlbumID(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AlbumID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AlbumID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AlbumID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AlbumID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlbumID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B8F5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AlbumID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B8F650(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_243BFD280();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_243B8F6CC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD280();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243B8F73C(_QWORD *a1)
{
  return sub_243B8F0CC(a1);
}

uint64_t PhotosFaceType.description.getter(char a1)
{
  if (!a1)
    return 0x6D75626C61;
  if (a1 == 1)
    return 0x656C6666756873;
  return 0x7972656C6C6167;
}

uint64_t PhotosFaceType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6D75626C61;
  if (a1 == 1)
    return 0x656C6666756873;
  return 0x7972656C6C6167;
}

void *static PhotosFaceType.allCases.getter()
{
  return &unk_25144F070;
}

uint64_t sub_243B8F808(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 0x656C6666756873;
  if (v2 != 1)
    v3 = 0x7972656C6C6167;
  if (*a1)
    v4 = v3;
  else
    v4 = 0x6D75626C61;
  if (v2)
    v5 = 0xE700000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = 0x656C6666756873;
  if (*a2 != 1)
    v6 = 0x7972656C6C6167;
  if (*a2)
    v7 = v6;
  else
    v7 = 0x6D75626C61;
  if (*a2)
    v8 = 0xE700000000000000;
  else
    v8 = 0xE500000000000000;
  if (v4 == v7 && v5 == v8)
    v9 = 1;
  else
    v9 = sub_243BFE0F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_243B8F908@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s10PhotosFace0aB4TypeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_243B8F934(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0x656C6666756873;
  if (v2 != 1)
    v4 = 0x7972656C6C6167;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6D75626C61;
  if (!v5)
    v3 = 0xE700000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_243B8F990()
{
  sub_243BFE1A4();
  sub_243BFD850();
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8FA2C()
{
  sub_243BFD850();
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B8FAA4()
{
  sub_243BFE1A4();
  sub_243BFD850();
  swift_bridgeObjectRelease();
  return sub_243BFE1E0();
}

uint64_t sub_243B8FB3C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C6666756873;
  if (*v0 != 1)
    v1 = 0x7972656C6C6167;
  if (*v0)
    return v1;
  else
    return 0x6D75626C61;
}

void sub_243B8FB94(_QWORD *a1@<X8>)
{
  *a1 = &unk_25144F098;
}

uint64_t _s10PhotosFace0aB4TypeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_243BFDFF4();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

unint64_t sub_243B8FBF0()
{
  unint64_t result;

  result = qword_2572ED950;
  if (!qword_2572ED950)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for PhotosFaceType, &type metadata for PhotosFaceType);
    atomic_store(result, (unint64_t *)&qword_2572ED950);
  }
  return result;
}

unint64_t sub_243B8FC38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572ED958;
  if (!qword_2572ED958)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572ED960);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2572ED958);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PhotosFaceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243B8FCD0 + 4 * byte_243C0077D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243B8FD04 + 4 * byte_243C00778[v4]))();
}

uint64_t sub_243B8FD04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B8FD0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243B8FD14);
  return result;
}

uint64_t sub_243B8FD20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243B8FD28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243B8FD2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243B8FD34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PhotosFaceType()
{
  return &type metadata for PhotosFaceType;
}

uint64_t dispatch thunk of PhotosFaceID.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

int *ShuffleID.init(id:people:pets:nature:cityscape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *result;

  v12 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  result = (int *)type metadata accessor for ShuffleID();
  *(_QWORD *)(a6 + result[5]) = a2;
  *(_BYTE *)(a6 + result[6]) = a3;
  *(_BYTE *)(a6 + result[7]) = a4;
  *(_BYTE *)(a6 + result[8]) = a5;
  return result;
}

uint64_t type metadata accessor for ShuffleID()
{
  uint64_t result;

  result = qword_2543CE420;
  if (!qword_2543CE420)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ShuffleID.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ShuffleID.people.getter()
{
  type metadata accessor for ShuffleID();
  return swift_bridgeObjectRetain();
}

uint64_t ShuffleID.pets.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShuffleID() + 24));
}

uint64_t ShuffleID.nature.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShuffleID() + 28));
}

uint64_t ShuffleID.cityscape.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ShuffleID() + 32));
}

int *ShuffleID.init(people:pets:nature:cityscape:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *result;

  v10 = swift_bridgeObjectRetain();
  sub_243BD7108(v10, a2, a4, a3, a5);
  result = (int *)type metadata accessor for ShuffleID();
  *(_QWORD *)(a5 + result[5]) = a1;
  *(_BYTE *)(a5 + result[6]) = a2;
  *(_BYTE *)(a5 + result[7]) = a3;
  *(_BYTE *)(a5 + result[8]) = a4;
  return result;
}

void sub_243B8FF54(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  v9 = sub_243BFD82C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_bridgeObjectRetain();
  v14 = sub_243B92F2C(v13);
  swift_bridgeObjectRelease();
  v29[0] = (uint64_t)v14;
  sub_243B9101C(v29);
  if (*(_QWORD *)(v29[0] + 16))
  {
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = 0;
    v26 = v10;
    v21[1] = v29[0];
    v27 = v9;
    v28 = a1;
    swift_bridgeObjectRetain();
    sub_243BFD820();
    sub_243BFD808();
    v16 = v15;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v16 >> 60 != 15)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x243B905A0);
  }
  swift_release();
  if ((a3 & 1) != 0)
  {
    if ((a4 & 1) != 0)
      v17 = 3;
    else
      v17 = 1;
    if ((a5 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    if ((a4 & 1) != 0)
      v17 = 2;
    else
      v17 = 0;
    if ((a5 & 1) != 0)
LABEL_14:
      v17 |= 4u;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED2B0);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_243BFFAC0;
  *(_BYTE *)(v18 + 32) = v17;
  sub_243BE5394(v18);
  v20 = v19;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t ShuffleID.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ShuffleID() + 20));
  swift_bridgeObjectRetain();
  sub_243B91C84(a1, v3);
  swift_bridgeObjectRelease();
  sub_243BFE1BC();
  sub_243BFE1BC();
  return sub_243BFE1BC();
}

uint64_t sub_243B90688(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_243BFE1A4();
    swift_bridgeObjectRetain();
    sub_243BFD850();
    v18 = sub_243BFE1E0();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_243BFE0F0() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_243BFE0F0() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t ShuffleID.hashValue.getter()
{
  _BYTE v1[72];

  sub_243BFE1A4();
  ShuffleID.hash(into:)((uint64_t)v1);
  return sub_243BFE1E0();
}

uint64_t sub_243B90964()
{
  _BYTE v1[72];

  sub_243BFE1A4();
  ShuffleID.hash(into:)((uint64_t)v1);
  return sub_243BFE1E0();
}

uint64_t sub_243B909A4()
{
  _BYTE v1[72];

  sub_243BFE1A4();
  ShuffleID.hash(into:)((uint64_t)v1);
  return sub_243BFE1E0();
}

uint64_t ShuffleID.description.getter()
{
  sub_243BFDE44();
  sub_243BFD85C();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  type metadata accessor for ShuffleID();
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  return 0;
}

int *ShuffleID.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  int *result;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *a2;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v20 = v9;
  sub_243B7FBDC(v11, v12);
  UUID.init(serialized:version:)(v11, v12);
  if (v3)
    return (int *)sub_243B91EB8(a1);
  v14 = swift_bridgeObjectRetain();
  v19 = sub_243B91EF4(v14);
  swift_bridgeObjectRelease();
  v15 = *(_BYTE *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 25);
  v17 = *(_BYTE *)(a1 + 26);
  sub_243B91EB8(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
  result = (int *)type metadata accessor for ShuffleID();
  *(_QWORD *)(a3 + result[5]) = v19;
  *(_BYTE *)(a3 + result[6]) = v15;
  *(_BYTE *)(a3 + result[7]) = v16;
  *(_BYTE *)(a3 + result[8]) = v17;
  return result;
}

uint64_t ShuffleID.protobuf(version:)()
{
  type metadata accessor for ShuffleIDProto();
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B90DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v4 = UUID.serialized(version:)();
  v6 = v5;
  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (int *)type metadata accessor for ShuffleID();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_243B92F2C(v8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + v7[8]);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + v7[7]);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + v7[6]);
  return result;
}

int *sub_243B90EA0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a2;
  return ShuffleID.init(protobuf:version:)(a1, &v4, a3);
}

uint64_t sub_243B90EC8()
{
  type metadata accessor for ShuffleIDProto();
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  return sub_243BFD4CC();
}

uint64_t sub_243B90F58(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_243BFD0B8();
  if (!result || (result = sub_243BFD0DC(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_243BFD0D0();
      sub_243BFD700();
      sub_243B88508(&qword_2572ED9A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_243BFD6C4();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_243B9101C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_243BF6C90(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_243B91084(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_243B91084(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_243BFE09C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_243B9176C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_243B91838((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_243B91C70((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_243BFD988();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_243BFE0F0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_243BFE0F0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_243B91AD0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_243B91AD0((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_243B91838((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_243BFE0F0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_243BFDF64();
  __break(1u);
  return result;
}

uint64_t sub_243B9176C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_243BFE0F0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_243B91838(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_243BFE0F0() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_243BFE0F0() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_243B91BC8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

char *sub_243B91AD0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9A8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_243B91BC8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_243BFDFE8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_243B91C70(uint64_t a1)
{
  return sub_243B91AD0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_243B91C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_243BFE1E0();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_243BFE1B0();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_243BFE1A4();
    swift_bridgeObjectRetain();
    sub_243BFD850();
    v11 = sub_243BFE1E0();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t _s10PhotosFace9ShuffleIDV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  char v5;

  if ((sub_243BFD250() & 1) != 0
    && (v4 = (int *)type metadata accessor for ShuffleID(),
        (sub_243B90688(*(_QWORD *)(a1 + v4[5]), *(_QWORD *)(a2 + v4[5])) & 1) != 0)
    && *(unsigned __int8 *)(a1 + v4[6]) == *(unsigned __int8 *)(a2 + v4[6])
    && *(unsigned __int8 *)(a1 + v4[7]) == *(unsigned __int8 *)(a2 + v4[7]))
  {
    v5 = *(_BYTE *)(a1 + v4[8]) ^ *(_BYTE *)(a2 + v4[8]) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_243B91EB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShuffleIDProto();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243B91EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_243BFDB8C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_243BE44B4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_243B91F88(uint64_t a1)
{
  uint64_t v1;

  return sub_243B90DE8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243B91FA4()
{
  return sub_243B88508(&qword_2543CE410, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
}

uint64_t sub_243B91FD0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 16) = sub_243B88508(&qword_2543CE418, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  result = sub_243B88508(&qword_2543CE408, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleID, (uint64_t)&protocol conformance descriptor for ShuffleID);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_243B9202C()
{
  return sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

_QWORD *initializeBufferWithCopyOfBuffer for ShuffleID(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD280();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ShuffleID(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShuffleID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShuffleID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for ShuffleID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for ShuffleID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v7 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShuffleID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B92358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ShuffleID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243B923E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_243BFD280();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_243B92458()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD280();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243B924DC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_243B7FBDC(a1, a2);
  return a1;
}

uint64_t sub_243B924F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_243B7FCC0(a1, a2);
  return a1;
}

uint64_t sub_243B92504(uint64_t a1)
{
  return sub_243B91F88(a1);
}

int64_t *pickPhotos(totalCount:day:picking:)(int64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  char v43;
  uint64_t i;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t *result;
  uint64_t v62;

  if (a3 >= a1)
  {
    if (qword_2572EB820 == -1)
    {
LABEL_10:
      v13 = sub_243BFD598();
      __swift_project_value_buffer(v13, (uint64_t)qword_2572EF838);
      v14 = sub_243BFD580();
      v15 = sub_243BFDC94();
      if (os_log_type_enabled(v14, v15))
      {
        v3 = swift_slowAlloc();
        *(_DWORD *)v3 = 134218240;
        sub_243BFDD54();
        *(_WORD *)(v3 + 12) = 2048;
        v62 = a3;
        sub_243BFDD54();
        _os_log_impl(&dword_243B4B000, v14, v15, "Total Count (%ld) is less than %ld, using entire array.", (uint8_t *)v3, 0x16u);
        MEMORY[0x249502C5C](v3, -1, -1);
      }

      if ((a1 & 0x8000000000000000) == 0)
        return sub_243B93010(0, a1);
      __break(1u);
      goto LABEL_63;
    }
LABEL_61:
    swift_once();
    goto LABEL_10;
  }
  if (!a3)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v6 = a1 % a3 != 0;
  v7 = a1 / a3 + v6;
  if (__OFADD__(a1 / a3, v6))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v4 = v7 * a3;
  if ((unsigned __int128)(v7 * (__int128)a3) >> 64 == (v7 * a3) >> 63)
  {
    v3 = a2;
    if (qword_2572EB820 == -1)
      goto LABEL_6;
    goto LABEL_65;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_6:
  v8 = sub_243BFD598();
  __swift_project_value_buffer(v8, (uint64_t)qword_2572EF838);
  v9 = sub_243BFD580();
  v10 = sub_243BFDC94();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    *(_DWORD *)v11 = 134218496;
    v12 = a3;
    sub_243BFDD54();
    *(_WORD *)(v11 + 12) = 2048;
    sub_243BFDD54();
    *(_WORD *)(v11 + 22) = 2048;
    v62 = v4;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v9, v10, "Picking %ld from array of size %ld, picking from %ld elements", (uint8_t *)v11, 0x20u);
    MEMORY[0x249502C5C](v11, -1, -1);

    if (a3 != -1)
      goto LABEL_16;
  }
  else
  {

    v12 = a3;
    if (a3 != -1)
      goto LABEL_16;
  }
  if (v4 == 0x8000000000000000)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
LABEL_16:
  v17 = (uint64_t)v4 / v12;
  if (!v17)
  {
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v3 == 0x8000000000000000 && v17 == -1)
    goto LABEL_75;
  v18 = v3 / v17;
  v19 = v3 % v17;
  v20 = sub_243BFD580();
  v21 = sub_243BFDC94();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    *(_DWORD *)v22 = 134218496;
    sub_243BFDD54();
    *(_WORD *)(v22 + 12) = 2048;
    sub_243BFDD54();
    *(_WORD *)(v22 + 22) = 2048;
    v62 = v17;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v20, v21, "Position: Cycle %ld (%ld/%ld)", (uint8_t *)v22, 0x20u);
    MEMORY[0x249502C5C](v22, -1, -1);
  }

  v23 = __clz(v4);
  v24 = 64 - v23;
  v25 = sub_243BFD580();
  v26 = sub_243BFDC94();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    *(_DWORD *)v27 = 134218240;
    sub_243BFDD54();
    *(_WORD *)(v27 + 12) = 2048;
    v62 = v4;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v25, v26, "Need %ld bits for count of %ld", (uint8_t *)v27, 0x16u);
    MEMORY[0x249502C5C](v27, -1, -1);
  }

  v28 = 63 - v23;
  v29 = 2 << v28;
  if (!v4)
    v29 = 1;
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
    goto LABEL_67;
  if (!v31)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v18 == 0x8000000000000000 && v31 == -1)
    goto LABEL_76;
  v33 = v18 % v31;
  if ((v33 & 0x8000000000000000) == 0)
  {
    v4 = v33 + 1;
    v3 = sub_243BD6748(v24);
    v34 = sub_243BFD580();
    v35 = sub_243BFDC94();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      *(_DWORD *)v36 = 134218240;
      sub_243BFDD54();
      *(_WORD *)(v36 + 12) = 2048;
      v62 = v4;
      sub_243BFDD54();
      _os_log_impl(&dword_243B4B000, v34, v35, "Created RNG with size %ld and seed %llu", (uint8_t *)v36, 0x16u);
      MEMORY[0x249502C5C](v36, -1, -1);
    }

    v37 = sub_243BFD580();
    v38 = sub_243BFDC94();
    v39 = (unsigned __int128)(v19 * (__int128)a3) >> 64;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v40 = 134217984;
      if (v39 != (v19 * a3) >> 63)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      v41 = v40;
      v62 = v19 * a3;
      sub_243BFDD54();
      _os_log_impl(&dword_243B4B000, v37, v38, "Discarding %ld previous values", v41, 0xCu);
      MEMORY[0x249502C5C](v41, -1, -1);
    }

    if ((a1 & 0x8000000000000000) == 0)
    {
      v42 = v19 * a3;
      if (v39 == (v19 * a3) >> 63)
      {
        if ((v42 & 0x8000000000000000) == 0)
        {
          v43 = v28 & 0x3F;
          if (v42)
          {
            if (!a1)
            {
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
            for (i = 0; i != v42; ++i)
            {
              do
                v4 = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v4 & v3))) & 1) << v43) | (v4 >> 1);
              while (v4 - 1 >= a1);
            }
          }
          v45 = sub_243BFD580();
          v46 = sub_243BFDC94();
          if (os_log_type_enabled(v45, v46))
          {
            v47 = swift_slowAlloc();
            *(_DWORD *)v47 = 134218496;
            sub_243BFDD54();
            *(_WORD *)(v47 + 12) = 2048;
            sub_243BFDD54();
            *(_WORD *)(v47 + 22) = 2048;
            v62 = v18;
            sub_243BFDD54();
            _os_log_impl(&dword_243B4B000, v45, v46, "Using next %ld values for position %ld in cycle %ld", (uint8_t *)v47, 0x20u);
            MEMORY[0x249502C5C](v47, -1, -1);
          }

          if ((a3 & 0x8000000000000000) == 0)
          {
            v62 = MEMORY[0x24BEE4AF8];
            sub_243B7CD0C(0, a3, 0);
            if (a1)
            {
              v48 = 0;
              v16 = v62;
              v49 = a3;
              do
              {
                if (v48 == v49)
                {
                  __break(1u);
                  goto LABEL_60;
                }
                do
                  v4 = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v4 & v3))) & 1) << v43) | (v4 >> 1);
                while (v4 - 1 >= a1);
                v62 = v16;
                v51 = *(_QWORD *)(v16 + 16);
                v50 = *(_QWORD *)(v16 + 24);
                if (v51 >= v50 >> 1)
                {
                  sub_243B7CD0C(v50 > 1, v51 + 1, 1);
                  v49 = a3;
                  v16 = v62;
                }
                ++v48;
                *(_QWORD *)(v16 + 16) = v51 + 1;
                *(_QWORD *)(v16 + 8 * v51 + 32) = v4 - 1;
              }
              while (v48 != v49);
              swift_bridgeObjectRetain_n();
              v52 = sub_243BFD580();
              v53 = sub_243BFDC94();
              if (os_log_type_enabled(v52, v53))
              {
                v54 = (uint8_t *)swift_slowAlloc();
                v55 = swift_slowAlloc();
                v62 = v55;
                *(_DWORD *)v54 = 136315138;
                v56 = swift_bridgeObjectRetain();
                v57 = MEMORY[0x249501D08](v56, MEMORY[0x24BEE1768]);
                v59 = v58;
                swift_bridgeObjectRelease();
                sub_243B739A8(v57, v59, &v62);
                sub_243BFDD54();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_243B4B000, v52, v53, "Picked %s.", v54, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x249502C5C](v55, -1, -1);
                MEMORY[0x249502C5C](v54, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              return (int64_t *)v16;
            }
            goto LABEL_72;
          }
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
  }
LABEL_78:
  result = (int64_t *)sub_243BFDF64();
  __break(1u);
  return result;
}

_QWORD *sub_243B92F2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED068);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_243B935A0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_243B7F90C();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

int64_t *sub_243B93010(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9B0);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_243B9379C(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_243B930D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_243B932BC(a1, a2, a3, a4, &qword_2572ED080);
}

uint64_t sub_243B930E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED090) - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED088);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED090) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B932B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_243B932BC(a1, a2, a3, a4, &qword_2572ED050);
}

uint64_t sub_243B932BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6)
      return MEMORY[0x24BEE4AF8];
    v9 = 16 * v6;
    if (v6 <= 0)
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0)
          goto LABEL_19;
        v13 = v10 + 32;
        v14 = (char *)(a2 + 16 * a3);
        if (v14 < &v10[v9 + 32] && v13 < &v14[v9])
          goto LABEL_19;
        memcpy(v13, v14, 16 * v6);
        return (uint64_t)v10;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      *((_QWORD *)v10 + 2) = v6;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
      if (v5 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B93420(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 32 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED060);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED058);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 1;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 5);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B935A0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *sub_243B9379C(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_243C009F0);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PhotosFaceInterface.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(qword_2572ED9B8);
  swift_allocObject();
  v1 = sub_243B99664(0xD000000000000014, 0x8000000243C07DB0, 1);
  type metadata accessor for PhotosXPC();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t PhotosFaceInterface.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_2572ED9B8);
  swift_allocObject();
  v2 = sub_243B99664(0xD000000000000014, 0x8000000243C07DB0, 1);
  type metadata accessor for PhotosXPC();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  return v1;
}

uint64_t sub_243B939D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return PhotosXPC.generatePhoto(photos:)(a1, a2);
}

uint64_t sub_243B939F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B93A0C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_243B93A64;
  return PhotosXPC.generateMask(identifier:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_243B93A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_243B93AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243B93AE4()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_243B93B3C;
  return PhotosXPC.sendMessage(request:)(v0[2], v0[3]);
}

uint64_t sub_243B93B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_243B93BA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AlbumID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  sub_243B6F8F0(a1, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for AlbumID);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v3;
  sub_243B6F934((uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for AlbumID);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &unk_2572ED9D8;
  *(_QWORD *)(v14 + 24) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x24BEE4AF8];
  v18 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v20 = v19;
  v21 = sub_243BE2818(v17);
  v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 16) = v18;
  *(_QWORD *)(v24 + 24) = v20;
  v25 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 40) = v21;
  *(_QWORD *)(v24 + 48) = v23;
  *(_QWORD *)(v24 + 56) = v25;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = v16;
  v26 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = &unk_2572ED9E8;
  v27[5] = v14;
  v27[6] = v15;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDA00, (uint64_t)v27);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v15;
  return result;
}

uint64_t sub_243B93E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for AlbumIDProto();
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B93E68()
{
  _QWORD *v0;
  uint64_t v1;

  v0[8] = *(_QWORD *)(v0[4] + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[9] = sub_243BFD9F4();
  v0[10] = v1;
  return swift_task_switch();
}

uint64_t sub_243B93F14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[7];
  v2 = v0[5];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[11] = v4;
  v0[12] = v5;
  sub_243B7FA20(v1, (uint64_t (*)(_QWORD))type metadata accessor for AlbumIDProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[13] = v7;
  *v7 = v0;
  v7[1] = sub_243B94060;
  return v9(3, v4, v6);
}

uint64_t sub_243B94060(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 88);
  v6 = *(_QWORD *)(v4 + 96);
  if (v1)
  {
    sub_243B7FCC0(v5, v6);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    sub_243B7FCC0(v5, v6);
    return swift_task_switch();
  }
}

uint64_t sub_243B940EC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD38);
  type metadata accessor for StoredPhoto(0);
  sub_243B9A6CC(&qword_2572EDD40, &qword_2572EDD38, (uint64_t)&protocol conformance descriptor for AsyncThrowingChannel<A, B>);
  sub_243BFE0C0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B941A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B941B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  sub_243BFD9F4();
  return swift_task_switch();
}

uint64_t sub_243B94264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(char, uint64_t, uint64_t);

  v1 = UUID.serialized(version:)();
  v3 = v2;
  v0[5] = v1;
  v0[6] = v2;
  v6 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_243B942F4;
  return v6(4, v1, v3);
}

uint64_t sub_243B942F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  sub_243B7FCC0(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  if (!v0)
    swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243B94358()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B94370()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(char);

  v3 = (uint64_t (*)(char))((char *)&dword_2572EDA18 + dword_2572EDA18);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_243B943D4;
  return v3(0);
}

uint64_t sub_243B943D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_243B94428(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 80) = a1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v2 + 24) = sub_243BFD9F4();
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch();
}

uint64_t sub_243B944D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = 0xA0F05u >> (8 * *(_BYTE *)(v0 + 80));
  v4 = (char *)&dword_2572EF9B0 + dword_2572EF9B0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_243B94554;
  return ((uint64_t (*)(uint64_t, _QWORD, unint64_t))v4)(v1, 0, 0xC000000000000000);
}

uint64_t sub_243B94554(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  v8 = (uint64_t (__cdecl *)())((char *)&dword_2572EF9B8 + dword_2572EF9B8);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v7;
  *v7 = v5;
  v7[1] = sub_243B945F8;
  return v8();
}

uint64_t sub_243B945F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_243B9467C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v7;

  v1 = *(_QWORD **)(v0 + 64);
  if (v1[2] == 1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    v3 = v1[4];
    v4 = v1[5];
    sub_243B7FBDC(v3, v4);
    swift_bridgeObjectRelease();
    v5 = sub_243BD9AA8(v3, v4, 2);
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    sub_243B9A688();
    swift_allocError();
    *v7 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B94754(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 80) = a1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v2 + 24) = sub_243BFD9F4();
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch();
}

uint64_t sub_243B947FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = 0xA0F05u >> (8 * *(_BYTE *)(v0 + 80));
  v4 = (char *)&dword_2572EF9B0 + dword_2572EF9B0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_243B94880;
  return ((uint64_t (*)(uint64_t, _QWORD, unint64_t))v4)(v1, 0, 0xC000000000000000);
}

uint64_t sub_243B94880(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  v8 = (uint64_t (__cdecl *)())((char *)&dword_2572EF9B8 + dword_2572EF9B8);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v7;
  *v7 = v5;
  v7[1] = sub_243B94924;
  return v8();
}

uint64_t sub_243B94924(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_243B949A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v7;

  v1 = *(_QWORD **)(v0 + 64);
  if (v1[2] == 1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    v3 = v1[4];
    v4 = v1[5];
    sub_243B7FBDC(v3, v4);
    swift_bridgeObjectRelease();
    v5 = sub_243BDA040(v3, v4, 2);
    if (!v2)
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    sub_243B9A688();
    swift_allocError();
    *v7 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B94A80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_243BFD280();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &unk_2572EDA28;
  *(_QWORD *)(v15 + 24) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v16 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  swift_retain();
  swift_retain();
  v18 = MEMORY[0x24BEE4AF8];
  v19 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v21 = v20;
  v22 = sub_243BE2818(v18);
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
  v26 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 40) = v22;
  *(_QWORD *)(v25 + 48) = v24;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v16 + 16) = v25;
  *(_QWORD *)(v16 + 24) = v17;
  v27 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = &unk_2572EDA30;
  v28[5] = v15;
  v28[6] = v16;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDA38, (uint64_t)v28);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v16;
  return result;
}

uint64_t sub_243B94CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for FetchFaceRequestProto(0);
  v3[7] = swift_task_alloc();
  v3[8] = type metadata accessor for FetchFaceRequest();
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B94D70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[5];
  v0[10] = *(_QWORD *)(v0[4] + 16);
  v4 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v1, v3, v4);
  v5 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[11] = sub_243BFD9F4();
  v0[12] = v6;
  return swift_task_switch();
}

uint64_t sub_243B94E5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[9];
  v2 = v0[7];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[13] = v4;
  v0[14] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[15] = v7;
  *v7 = v0;
  v7[1] = sub_243B94FBC;
  return v9(6, v4, v6);
}

uint64_t sub_243B94FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 128) = v1;
  swift_task_dealloc();
  v5 = v4[13];
  v6 = v4[14];
  if (!v1)
    v4[17] = a1;
  sub_243B7FCC0(v5, v6);
  return swift_task_switch();
}

uint64_t sub_243B9503C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 136);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD38);
  type metadata accessor for StoredPhoto(0);
  sub_243B9A6CC(&qword_2572EDD40, &qword_2572EDD38, (uint64_t)&protocol conformance descriptor for AsyncThrowingChannel<A, B>);
  sub_243BFE0C0();
  sub_243B7FA20(v1, (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B95114()
{
  uint64_t *v0;

  v0[18] = v0[16];
  sub_243B7FA20(v0[9], (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  return swift_task_switch();
}

uint64_t sub_243B95160()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B951A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t *v35;

  v5 = v4;
  v35 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_243BFD280();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v15);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v18 = v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = a2;
  *(_BYTE *)(v18 + 8) = a3 & 1;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = &unk_2572EDA48;
  *(_QWORD *)(v19 + 24) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  swift_retain();
  swift_retain();
  v22 = MEMORY[0x24BEE4AF8];
  v23 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v25 = v24;
  v26 = sub_243BE2818(v22);
  v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v29 = swift_allocObject();
  *(_DWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 16) = v23;
  *(_QWORD *)(v29 + 24) = v25;
  v30 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 40) = v26;
  *(_QWORD *)(v29 + 48) = v28;
  *(_QWORD *)(v29 + 56) = v30;
  *(_QWORD *)(v20 + 16) = v29;
  *(_QWORD *)(v20 + 24) = v21;
  v31 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = &unk_2572EDA50;
  v32[5] = v19;
  v32[6] = v20;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v11, (uint64_t)&unk_2572EDA58, (uint64_t)v32);
  swift_release();
  swift_release();
  result = swift_release();
  *v35 = v20;
  return result;
}

uint64_t sub_243B95438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 160) = a5;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 56) = type metadata accessor for FetchFaceRequestProto(0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  *(_QWORD *)(v5 + 72) = type metadata accessor for FetchFaceRequest();
  *(_QWORD *)(v5 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B954C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v1, v4, v6);
  v7 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v7 = v5;
  *(_BYTE *)(v7 + 8) = v3 & 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v0 + 96) = sub_243BFD9F4();
  *(_QWORD *)(v0 + 104) = v8;
  return swift_task_switch();
}

uint64_t sub_243B955BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[10];
  v2 = v0[8];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[14] = v4;
  v0[15] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[16] = v7;
  *v7 = v0;
  v7[1] = sub_243B9571C;
  return v9(6, v4, v6);
}

uint64_t sub_243B9571C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 136) = v1;
  swift_task_dealloc();
  v5 = v4[14];
  v6 = v4[15];
  if (!v1)
    v4[18] = a1;
  sub_243B7FCC0(v5, v6);
  return swift_task_switch();
}

uint64_t sub_243B9579C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD38);
  type metadata accessor for StoredPhoto(0);
  sub_243B9A6CC(&qword_2572EDD40, &qword_2572EDD38, (uint64_t)&protocol conformance descriptor for AsyncThrowingChannel<A, B>);
  sub_243BFE0C0();
  sub_243B7FA20(v1, (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B95874()
{
  uint64_t *v0;

  v0[19] = v0[17];
  sub_243B7FA20(v0[10], (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  return swift_task_switch();
}

uint64_t sub_243B958C0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B95900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = type metadata accessor for AlbumID();
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B95960()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(char, uint64_t);

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[3];
  v4 = v0[2];
  sub_243BFD274();
  v5 = (_QWORD *)(v1 + *(int *)(v2 + 20));
  *v5 = v4;
  v5[1] = v3;
  v8 = (uint64_t (*)(char, uint64_t))((char *)&dword_2572EDA68 + dword_2572EDA68);
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[7] = v6;
  *v6 = v0;
  v6[1] = sub_243B95A00;
  return v8(0, v0[6]);
}

uint64_t sub_243B95A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 72) = a1;
  return swift_task_switch();
}

uint64_t sub_243B95A74()
{
  uint64_t v0;

  sub_243B7FA20(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AlbumID);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

uint64_t sub_243B95AC0()
{
  uint64_t v0;

  sub_243B7FA20(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AlbumID);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B95B08(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 32) = type metadata accessor for AlbumIDProto();
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v3 + 48) = sub_243BFD9F4();
  *(_QWORD *)(v3 + 56) = v4;
  return swift_task_switch();
}

uint64_t sub_243B95BD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(char, uint64_t, uint64_t);

  v1 = *(_BYTE *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 24) = 2;
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v5 = sub_243BFD4A8();
  v7 = v6;
  sub_243B7FA20(v3, (uint64_t (*)(_QWORD))type metadata accessor for AlbumIDProto);
  *(_QWORD *)(v0 + 64) = v7;
  *(_QWORD *)(v0 + 72) = v5;
  v10 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v8;
  *v8 = v0;
  v8[1] = sub_243B95D34;
  return v10(v1 + 18, v5, v7);
}

uint64_t sub_243B95D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  v6 = *(_QWORD *)(*v2 + 64);
  v7 = *v2;
  swift_task_dealloc();
  sub_243B7FCC0(v5, v6);
  if (v1)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v7 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 88) = a1;
    v10 = (uint64_t (__cdecl *)())((char *)&dword_2572EF9B8 + dword_2572EF9B8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 96) = v9;
    *v9 = v7;
    v9[1] = sub_243B95DFC;
    return v10();
  }
}

uint64_t sub_243B95DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_243B95E88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v8;

  v1 = *(_QWORD **)(v0 + 104);
  if (v1[2] == 1)
  {
    v2 = *(_QWORD *)(v0 + 112);
    v3 = v1[4];
    v4 = v1[5];
    sub_243B7FBDC(v3, v4);
    swift_bridgeObjectRelease();
    v5 = sub_243BE5444(v3, v4);
    if (!v2)
    {
      v6 = v5;
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
    }
  }
  else
  {
    sub_243B9A688();
    swift_allocError();
    *v8 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B95F74(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v2;
  *(_BYTE *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 32) = type metadata accessor for ShuffleIDProto();
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v3 + 48) = sub_243BFD9F4();
  *(_QWORD *)(v3 + 56) = v4;
  return swift_task_switch();
}

uint64_t sub_243B96040()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(char, uint64_t, uint64_t);

  v1 = *(_BYTE *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 24) = 2;
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v5 = sub_243BFD4A8();
  v7 = v6;
  sub_243B7FA20(v3, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
  *(_QWORD *)(v0 + 64) = v7;
  *(_QWORD *)(v0 + 72) = v5;
  v10 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v8;
  *v8 = v0;
  v8[1] = sub_243B961A0;
  return v10(v1 + 18, v5, v7);
}

uint64_t sub_243B961A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 72);
  v6 = *(_QWORD *)(*v2 + 64);
  v7 = *v2;
  swift_task_dealloc();
  sub_243B7FCC0(v5, v6);
  if (v1)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v7 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 88) = a1;
    v10 = (uint64_t (__cdecl *)())((char *)&dword_2572EF9B8 + dword_2572EF9B8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 96) = v9;
    *v9 = v7;
    v9[1] = sub_243B96268;
    return v10();
  }
}

uint64_t sub_243B96268(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_243B962F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShuffleID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  sub_243B6F8F0(a1, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v3;
  sub_243B6F934((uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &unk_2572EDA78;
  *(_QWORD *)(v14 + 24) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x24BEE4AF8];
  v18 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v20 = v19;
  v21 = sub_243BE2818(v17);
  v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 16) = v18;
  *(_QWORD *)(v24 + 24) = v20;
  v25 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 40) = v21;
  *(_QWORD *)(v24 + 48) = v23;
  *(_QWORD *)(v24 + 56) = v25;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = v16;
  v26 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = &unk_2572EDA80;
  v27[5] = v14;
  v27[6] = v15;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDA88, (uint64_t)v27);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v15;
  return result;
}

uint64_t sub_243B9655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for ShuffleIDProto();
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B965BC()
{
  _QWORD *v0;
  uint64_t v1;

  v0[8] = *(_QWORD *)(v0[4] + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[9] = sub_243BFD9F4();
  v0[10] = v1;
  return swift_task_switch();
}

uint64_t sub_243B96668()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[7];
  v2 = v0[5];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[11] = v4;
  v0[12] = v5;
  sub_243B7FA20(v1, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[13] = v7;
  *v7 = v0;
  v7[1] = sub_243B967B4;
  return v9(13, v4, v6);
}

uint64_t sub_243B967B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 88);
  v6 = *(_QWORD *)(v4 + 96);
  if (v1)
  {
    sub_243B7FCC0(v5, v6);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    sub_243B7FCC0(v5, v6);
    return swift_task_switch();
  }
}

uint64_t sub_243B96840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B96858()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  sub_243BFD9F4();
  return swift_task_switch();
}

uint64_t sub_243B96904()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(char, uint64_t, uint64_t);

  v1 = UUID.serialized(version:)();
  v3 = v2;
  v0[5] = v1;
  v0[6] = v2;
  v6 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_243B9A73C;
  return v6(14, v1, v3);
}

uint64_t sub_243B96994()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B969AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(char);

  v3 = (uint64_t (*)(char))((char *)&dword_2572EDAA0 + dword_2572EDAA0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_243B9A74C;
  return v3(1);
}

uint64_t sub_243B96A10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_243BFD280();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &unk_2572EDAB0;
  *(_QWORD *)(v15 + 24) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v16 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  swift_retain();
  swift_retain();
  v18 = MEMORY[0x24BEE4AF8];
  v19 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v21 = v20;
  v22 = sub_243BE2818(v18);
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
  v26 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 40) = v22;
  *(_QWORD *)(v25 + 48) = v24;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v16 + 16) = v25;
  *(_QWORD *)(v16 + 24) = v17;
  v27 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = &unk_2572EDAB8;
  v28[5] = v15;
  v28[6] = v16;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDAC0, (uint64_t)v28);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v16;
  return result;
}

uint64_t sub_243B96C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for FetchFaceRequestProto(0);
  v3[7] = swift_task_alloc();
  v3[8] = type metadata accessor for FetchFaceRequest();
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B96D00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[5];
  v0[10] = *(_QWORD *)(v0[4] + 16);
  v4 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v1, v3, v4);
  v5 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[11] = sub_243BFD9F4();
  v0[12] = v6;
  return swift_task_switch();
}

uint64_t sub_243B96DEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[9];
  v2 = v0[7];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[13] = v4;
  v0[14] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[15] = v7;
  *v7 = v0;
  v7[1] = sub_243B96F4C;
  return v9(16, v4, v6);
}

uint64_t sub_243B96F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 128) = v1;
  swift_task_dealloc();
  v5 = v4[13];
  v6 = v4[14];
  if (!v1)
    v4[17] = a1;
  sub_243B7FCC0(v5, v6);
  return swift_task_switch();
}

uint64_t sub_243B96FCC()
{
  uint64_t *v0;

  v0[18] = v0[16];
  sub_243B7FA20(v0[9], (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  return swift_task_switch();
}

uint64_t sub_243B97018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t *v35;

  v5 = v4;
  v35 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_243BFD280();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v15);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v18 = v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = a2;
  *(_BYTE *)(v18 + 8) = a3 & 1;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = &unk_2572EDAD0;
  *(_QWORD *)(v19 + 24) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  swift_retain();
  swift_retain();
  v22 = MEMORY[0x24BEE4AF8];
  v23 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v25 = v24;
  v26 = sub_243BE2818(v22);
  v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v29 = swift_allocObject();
  *(_DWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 16) = v23;
  *(_QWORD *)(v29 + 24) = v25;
  v30 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 40) = v26;
  *(_QWORD *)(v29 + 48) = v28;
  *(_QWORD *)(v29 + 56) = v30;
  *(_QWORD *)(v20 + 16) = v29;
  *(_QWORD *)(v20 + 24) = v21;
  v31 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = &unk_2572EDAD8;
  v32[5] = v19;
  v32[6] = v20;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v11, (uint64_t)&unk_2572EDAE0, (uint64_t)v32);
  swift_release();
  swift_release();
  result = swift_release();
  *v35 = v20;
  return result;
}

uint64_t sub_243B972B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 160) = a5;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 56) = type metadata accessor for FetchFaceRequestProto(0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  *(_QWORD *)(v5 + 72) = type metadata accessor for FetchFaceRequest();
  *(_QWORD *)(v5 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B97338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v1, v4, v6);
  v7 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v7 = v5;
  *(_BYTE *)(v7 + 8) = v3 & 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v0 + 96) = sub_243BFD9F4();
  *(_QWORD *)(v0 + 104) = v8;
  return swift_task_switch();
}

uint64_t sub_243B97434()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[10];
  v2 = v0[8];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[14] = v4;
  v0[15] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[16] = v7;
  *v7 = v0;
  v7[1] = sub_243B97594;
  return v9(16, v4, v6);
}

uint64_t sub_243B97594(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 136) = v1;
  swift_task_dealloc();
  v5 = v4[14];
  v6 = v4[15];
  if (!v1)
    v4[18] = a1;
  sub_243B7FCC0(v5, v6);
  return swift_task_switch();
}

uint64_t sub_243B97614()
{
  uint64_t *v0;

  v0[19] = v0[17];
  sub_243B7FA20(v0[10], (uint64_t (*)(_QWORD))type metadata accessor for FetchFaceRequest);
  return swift_task_switch();
}

uint64_t sub_243B97660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B97678()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_243B976D0;
  return PhotosXPC.fetchFaceByDay(type:request:)(1, *(_QWORD *)(v0 + 16));
}

uint64_t sub_243B976D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_243B97724(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 74) = a4;
  *(_BYTE *)(v5 + 73) = a3;
  *(_BYTE *)(v5 + 72) = a2;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = type metadata accessor for ShuffleID();
  *(_QWORD *)(v5 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B9778C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t);

  v2 = *(int **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(unsigned __int8 *)(v0 + 74);
  v4 = *(unsigned __int8 *)(v0 + 73);
  v5 = *(unsigned __int8 *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  sub_243BD7108(v6, v5, v3, v4, v1);
  *(_QWORD *)(v1 + v2[5]) = v6;
  *(_BYTE *)(v1 + v2[6]) = v5;
  *(_BYTE *)(v1 + v2[7]) = v4;
  *(_BYTE *)(v1 + v2[8]) = v3;
  v9 = (uint64_t (*)(char, uint64_t))((char *)&dword_2572EDAF8 + dword_2572EDAF8);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_243B97860;
  return v9(1, *(_QWORD *)(v0 + 40));
}

uint64_t sub_243B97860(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t sub_243B978D4()
{
  uint64_t v0;

  sub_243B7FA20(*(_QWORD *)(v0 + 40), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

uint64_t sub_243B97920()
{
  uint64_t v0;

  sub_243B7FA20(*(_QWORD *)(v0 + 40), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B97968(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDB08);
  v2[4] = swift_task_alloc();
  v3 = type metadata accessor for ShuffleID();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B979FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(char);

  v0[9] = *(_QWORD *)(v0[3] + 16);
  v3 = (uint64_t (*)(char))((char *)&dword_2572EDAA0 + dword_2572EDAA0);
  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = v1;
  *v1 = v0;
  v1[1] = sub_243B97A64;
  return v3(1);
}

uint64_t sub_243B97A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 88) = a1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_243B97B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  char *v14;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 48);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_243B6F8F0(v4, *(_QWORD *)(v0 + 56), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      if ((sub_243BFD250() & 1) != 0)
        break;
      sub_243B7FA20(*(_QWORD *)(v0 + 56), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease();
    sub_243B6F934(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
    v6 = 0;
  }
  else
  {
LABEL_6:
    v6 = 1;
  }
  v9 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v6, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    sub_243B99C1C(*(_QWORD *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
  }
  else
  {
    sub_243B6F934(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
    v14 = (char *)&dword_2572EDAF8 + dword_2572EDAF8;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v13;
    *v13 = v0;
    v13[1] = sub_243B97CC4;
    return ((uint64_t (*)(uint64_t, _QWORD))v14)(1, *(_QWORD *)(v0 + 64));
  }
}

uint64_t sub_243B97CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch();
}

uint64_t sub_243B97D38()
{
  uint64_t v0;
  uint64_t v1;

  sub_243B7FA20(*(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_243B97DA0()
{
  uint64_t v0;

  sub_243B7FA20(*(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B97E00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShuffleID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  sub_243B6F8F0(a1, (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v3;
  sub_243B6F934((uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleID);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &unk_2572EDB18;
  *(_QWORD *)(v14 + 24) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  swift_retain();
  swift_retain();
  v17 = MEMORY[0x24BEE4AF8];
  v18 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v20 = v19;
  v21 = sub_243BE2818(v17);
  v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 64) = 0;
  *(_QWORD *)(v24 + 16) = v18;
  *(_QWORD *)(v24 + 24) = v20;
  v25 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v24 + 40) = v21;
  *(_QWORD *)(v24 + 48) = v23;
  *(_QWORD *)(v24 + 56) = v25;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = v16;
  v26 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v8, 1, 1, v26);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = &unk_2572EDB20;
  v27[5] = v14;
  v27[6] = v15;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDB28, (uint64_t)v27);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v15;
  return result;
}

uint64_t sub_243B98068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for ShuffleIDProto();
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B980C8()
{
  _QWORD *v0;
  uint64_t v1;

  v0[8] = *(_QWORD *)(v0[4] + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[9] = sub_243BFD9F4();
  v0[10] = v1;
  return swift_task_switch();
}

uint64_t sub_243B98174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[7];
  v2 = v0[5];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[11] = v4;
  v0[12] = v5;
  sub_243B7FA20(v1, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[13] = v7;
  *v7 = v0;
  v7[1] = sub_243B967B4;
  return v9(8, v4, v6);
}

uint64_t sub_243B982C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243B982D8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  sub_243BFD9F4();
  return swift_task_switch();
}

uint64_t sub_243B98384()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(char, uint64_t, uint64_t);

  v1 = UUID.serialized(version:)();
  v3 = v2;
  v0[5] = v1;
  v0[6] = v2;
  v6 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_243B9A73C;
  return v6(9, v1, v3);
}

uint64_t sub_243B98414()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_243B9842C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(char);

  v3 = (uint64_t (*)(char))((char *)&dword_2572EDAA0 + dword_2572EDAA0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_243B9A74C;
  return v3(2);
}

uint64_t sub_243B98490@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  uint64_t v30;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_243BFD280();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = &unk_2572EDB48;
  *(_QWORD *)(v15 + 24) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v16 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  swift_retain();
  swift_retain();
  v18 = MEMORY[0x24BEE4AF8];
  v19 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v21 = v20;
  v22 = sub_243BE2818(v18);
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 16) = v19;
  *(_QWORD *)(v25 + 24) = v21;
  v26 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v25 + 40) = v22;
  *(_QWORD *)(v25 + 48) = v24;
  *(_QWORD *)(v25 + 56) = v26;
  *(_QWORD *)(v16 + 16) = v25;
  *(_QWORD *)(v16 + 24) = v17;
  v27 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = &unk_2572EDB50;
  v28[5] = v15;
  v28[6] = v16;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDB58, (uint64_t)v28);
  swift_release();
  swift_release();
  result = swift_release();
  *a2 = v16;
  return result;
}

uint64_t sub_243B986FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v3[6] = type metadata accessor for FetchFaceRequestProto(0);
  v3[7] = swift_task_alloc();
  v3[8] = type metadata accessor for FetchFaceRequest();
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B98780()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[5];
  v0[10] = *(_QWORD *)(v0[4] + 16);
  v4 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v1, v3, v4);
  v5 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v0[11] = sub_243BFD9F4();
  v0[12] = v6;
  return swift_task_switch();
}

uint64_t sub_243B9886C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[9];
  v2 = v0[7];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[13] = v4;
  v0[14] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[15] = v7;
  *v7 = v0;
  v7[1] = sub_243B96F4C;
  return v9(11, v4, v6);
}

uint64_t sub_243B989CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t *v35;

  v5 = v4;
  v35 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_243BFD280();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12, v15);
  v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v18 = v17 + ((v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = a2;
  *(_BYTE *)(v18 + 8) = a3 & 1;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = &unk_2572EDB68;
  *(_QWORD *)(v19 + 24) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v20 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  swift_retain();
  swift_retain();
  v22 = MEMORY[0x24BEE4AF8];
  v23 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v25 = v24;
  v26 = sub_243BE2818(v22);
  v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v29 = swift_allocObject();
  *(_DWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 16) = v23;
  *(_QWORD *)(v29 + 24) = v25;
  v30 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v29 + 40) = v26;
  *(_QWORD *)(v29 + 48) = v28;
  *(_QWORD *)(v29 + 56) = v30;
  *(_QWORD *)(v20 + 16) = v29;
  *(_QWORD *)(v20 + 24) = v21;
  v31 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = &unk_2572EDB70;
  v32[5] = v19;
  v32[6] = v20;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v11, (uint64_t)&unk_2572EDB78, (uint64_t)v32);
  swift_release();
  swift_release();
  result = swift_release();
  *v35 = v20;
  return result;
}

uint64_t sub_243B98C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 160) = a5;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 56) = type metadata accessor for FetchFaceRequestProto(0);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  *(_QWORD *)(v5 + 72) = type metadata accessor for FetchFaceRequest();
  *(_QWORD *)(v5 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243B98CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v1, v4, v6);
  v7 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v7 = v5;
  *(_BYTE *)(v7 + 8) = v3 & 1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v0 + 96) = sub_243BFD9F4();
  *(_QWORD *)(v0 + 104) = v8;
  return swift_task_switch();
}

uint64_t sub_243B98DE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(char, uint64_t, uint64_t);

  v1 = v0[10];
  v2 = v0[8];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 24) = 2;
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD4CC();
  swift_task_dealloc();
  v4 = sub_243BFD4A8();
  v6 = v5;
  v0[14] = v4;
  v0[15] = v5;
  sub_243B7FA20(v2, type metadata accessor for FetchFaceRequestProto);
  v9 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[16] = v7;
  *v7 = v0;
  v7[1] = sub_243B97594;
  return v9(11, v4, v6);
}

uint64_t PhotosFaceInterface.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PhotosFaceInterface.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_243B98F88(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v3[3] = a1;
  v3[4] = a2;
  v5 = type metadata accessor for StoredPhoto(0);
  v3[5] = v5;
  v3[6] = *(_QWORD *)(v5 - 8);
  v3[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD50);
  v3[8] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD58);
  v3[9] = v6;
  v3[10] = *(_QWORD *)(v6 - 8);
  v3[11] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD60);
  v3[12] = v7;
  v3[13] = *(_QWORD *)(v7 - 8);
  v3[14] = swift_task_alloc();
  v8 = swift_task_alloc();
  v3[15] = v8;
  v11 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v9 = (_QWORD *)swift_task_alloc();
  v3[16] = v9;
  *v9 = v3;
  v9[1] = sub_243B990AC;
  return v11(v8);
}

uint64_t sub_243B990AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B99110()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[13] + 16))(v0[14], v0[15], v0[12]);
  sub_243B9A6CC(&qword_2572EDD68, &qword_2572EDD60, MEMORY[0x24BEE7090]);
  sub_243BFDB14();
  v0[18] = sub_243B9A6CC(&qword_2572EDD70, &qword_2572EDD58, MEMORY[0x24BEE7070]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = v1;
  *v1 = v0;
  v1[1] = sub_243B991EC;
  return sub_243BFDA3C();
}

uint64_t sub_243B991EC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B99250()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B992BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v1 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 48))(v1, 1, *(_QWORD *)(v0 + 40)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v6 = *(int **)(v0 + 24);
    sub_243B6F934(v1, *(_QWORD *)(v0 + 56), type metadata accessor for StoredPhoto);
    v8 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = sub_243B99478;
    return v8(*(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_243B993E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B99478()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B994DC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_243B7FA20(*(_QWORD *)(v0 + 56), type metadata accessor for StoredPhoto);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_243B99554;
  return sub_243BFDA3C();
}

uint64_t sub_243B99554()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243B995B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  sub_243B7FA20(*(_QWORD *)(v0 + 56), type metadata accessor for StoredPhoto);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243B99664(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 48) = sub_243B50064(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 64) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE348);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = sub_243B4FEB4(v7);
  *(_QWORD *)(v8 + 72) = 0;
  *(_OWORD *)(v8 + 48) = xmmword_243C00A00;
  *(_BYTE *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 16) = 0xD000000000000010;
  *(_QWORD *)(v8 + 24) = 0x8000000243C054B0;
  *(_QWORD *)(v3 + 56) = v8;
  return v3;
}

uint64_t sub_243B9971C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlbumID() - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_243B997B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlbumID() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B93E08(a1, v5, v6);
}

uint64_t sub_243B99830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;

  v6 = *(int **)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_243B6A428;
  return sub_243B98F88(a1, a2, v6);
}

uint64_t sub_243B9989C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_243B6A428;
  return sub_243BDADEC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_243B99920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_243BFD280() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B94CEC(a1, v5, v6);
}

uint64_t sub_243B999A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_243BFD280() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_243B4D7A0;
  return sub_243B95438(a1, v6, v7, v9, v10);
}

uint64_t sub_243B99A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShuffleID() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B9655C(a1, v5, v6);
}

uint64_t sub_243B99AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_243BFD280() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B96C7C(a1, v5, v6);
}

uint64_t sub_243B99B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_243BFD280() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_243B6A428;
  return sub_243B972B0(a1, v6, v7, v9, v10);
}

uint64_t sub_243B99C1C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDB08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroy_49Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShuffleID() - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_243B99CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShuffleID() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B98068(a1, v5, v6);
}

uint64_t sub_243B99D70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243B99D98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_243B4D7A0;
  return sub_243BDADEC(a1, v4, v5, v6, v7, v8);
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_243BFD280();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_243B99E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_243BFD280() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_243B6A428;
  return sub_243B986FC(a1, v5, v6);
}

uint64_t objectdestroy_33Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_243BFD280();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_243B99F98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_243BFD280() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_243B6A428;
  return sub_243B98C64(a1, v6, v7, v9, v10);
}

uint64_t objectdestroy_11Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for PhotosFaceInterface()
{
  return objc_opt_self();
}

uint64_t method lookup function for PhotosFaceInterface()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PhotosFaceInterface.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PhotosFaceInterface.process(photos:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PhotosFaceInterface.makeFullMask(localIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 104) + *(_QWORD *)(*(_QWORD *)v1 + 104));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B9A120;
  return v6(a1);
}

uint64_t sub_243B9A120(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of PhotosFaceInterface.send(message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 112) + *(_QWORD *)(*(_QWORD *)v2 + 112));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B9A710;
  return v8(a1, a2);
}

uint64_t dispatch thunk of PhotosFaceInterface.track(album:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PhotosFaceInterface.untrack(album:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 128) + *(_QWORD *)(*(_QWORD *)v1 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B6A428;
  return v6(a1);
}

uint64_t dispatch thunk of PhotosFaceInterface.listAlbums()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 136) + *(_QWORD *)(*(_QWORD *)v0 + 136));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_243B74A58;
  return v4();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(album:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(album:day:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of PhotosFaceInterface.provideAlbumAssetList(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 160) + *(_QWORD *)(*(_QWORD *)v2 + 160));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B74A58;
  return v8(a1, a2);
}

uint64_t dispatch thunk of PhotosFaceInterface.track(shuffle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PhotosFaceInterface.untrack(shuffle:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B6A428;
  return v6(a1);
}

uint64_t dispatch thunk of PhotosFaceInterface.listShuffles()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 184) + *(_QWORD *)(*(_QWORD *)v0 + 184));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_243B74A58;
  return v4();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(shuffle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(shuffle:day:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 200))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of PhotosFaceInterface.fetchByDay(shuffle:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 208) + *(_QWORD *)(*(_QWORD *)v1 + 208));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B743B8;
  return v6(a1);
}

uint64_t dispatch thunk of PhotosFaceInterface.provideShuffleAssetList(people:pets:nature:cityscape:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 216)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 216));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_243B74A58;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of PhotosFaceInterface.provideShuffleAssetList(shuffle:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 224) + *(_QWORD *)(*(_QWORD *)v1 + 224));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B74A58;
  return v6(a1);
}

uint64_t dispatch thunk of PhotosFaceInterface.track(gallery:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PhotosFaceInterface.untrack(gallery:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 240) + *(_QWORD *)(*(_QWORD *)v1 + 240));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B6A428;
  return v6(a1);
}

uint64_t dispatch thunk of PhotosFaceInterface.listGalleries()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 248) + *(_QWORD *)(*(_QWORD *)v0 + 248));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_243B74A58;
  return v4();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(gallery:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PhotosFaceInterface.fetch(gallery:day:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 264))(a1, a2, a3 & 1);
}

uint64_t sub_243B9A65C()
{
  return sub_243B9A6CC(&qword_2572EDD30, &qword_2572ED9F0, (uint64_t)&protocol conformance descriptor for AsyncThrowingChannel<A, B>);
}

unint64_t sub_243B9A688()
{
  unint64_t result;

  result = qword_2572EDD48;
  if (!qword_2572EDD48)
  {
    result = MEMORY[0x249502B6C](&unk_243C04734, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_2572EDD48);
  }
  return result;
}

uint64_t sub_243B9A6CC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x249502B6C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_243B9A750(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_243B7CC64(0, v5, 0);
    v6 = v17;
    v8 = *(_QWORD *)(sub_243BFD280() - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(&v16, v9);
      if (v4)
        break;
      v4 = 0;
      v11 = v16;
      v17 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_243B7CC64(v12 > 1, v13 + 1, 1);
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13 + 32) = v11;
      v9 += v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_243B9A86C(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v7 = a3;
  v28 = MEMORY[0x24BEE4AF8];
  sub_243B7CC64(0, v5, 0);
  v6 = v28;
  result = sub_243BA3148(v7);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v23 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    if (((*(_QWORD *)(v23 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v7 + 36) != v11)
      goto LABEL_16;
    v14 = v6;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v9);
    v16 = v15[1];
    v26[0] = *v15;
    v26[1] = v16;
    swift_bridgeObjectRetain();
    v6 = a2;
    a1(&v27, v26);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v6;
    }
    v17 = v7;
    swift_bridgeObjectRelease();
    v18 = v27;
    v6 = v14;
    v28 = v14;
    v19 = *(_QWORD *)(v14 + 16);
    v20 = *(_QWORD *)(v6 + 24);
    if (v19 >= v20 >> 1)
    {
      sub_243B7CC64(v20 > 1, v19 + 1, 1);
      v6 = v28;
    }
    *(_QWORD *)(v6 + 16) = v19 + 1;
    *(_QWORD *)(v6 + 8 * v19 + 32) = v18;
    v7 = v17;
    result = sub_243BA31E8(v9, v11, v13 & 1, v17);
    v9 = result;
    v11 = v21;
    v13 = v22 & 1;
    --v5;
    v4 = 0;
    if (!v5)
    {
      sub_243BA5D14(result, v21, v22 & 1);
      return v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_243B9AA3C(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(id *);
  uint64_t v21;
  id v22;
  uint64_t v23;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    if (!v9)
      return v10;
    v23 = MEMORY[0x24BEE4AF8];
    result = sub_243B7CBD8(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v12 = 0;
    v10 = v23;
    v18 = a3 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v18)
        v13 = (id)MEMORY[0x249502218](v12, a3);
      else
        v13 = *(id *)(a3 + 8 * v12 + 32);
      v14 = v13;
      v22 = v13;
      v20(&v22);
      if (v4)
      {
        swift_release();

        return v10;
      }
      v4 = 0;

      v23 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_243B7CBD8(v15 > 1, v16 + 1, 1);
        v10 = v23;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v16 + 1;
      sub_243B6F9B4((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v16, &qword_2572EBA28);
      if (v9 == v12)
        return v10;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v9 = sub_243BFDFB8();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_243B9AC20(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a2;
  v4 = type metadata accessor for StoredPhotoLayout(0);
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v41 = (uint64_t)&v32 - v7;
  v8 = type metadata accessor for StoredPhotoLayoutProto(0);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v44 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v45 = v2;
  v46 = MEMORY[0x24BEE4AF8];
  sub_243B7CE24(0, v10, 0);
  result = sub_243BA32CC(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v17 = *(_BYTE *)(a1 + 32);
  v33 = a1 + 88;
  v34 = v10;
  v35 = v13;
  v36 = a1 + 64;
  v37 = a1;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v17)
  {
    v20 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_28;
    v21 = v41;
    sub_243B6F8F0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v42 + 72) * v14, v41, type metadata accessor for StoredPhotoLayout);
    v22 = v38;
    v23 = sub_243B6F934(v21, v38, type metadata accessor for StoredPhotoLayout);
    MEMORY[0x24BDAC7A8](v23);
    *(&v32 - 2) = v22;
    *((_BYTE *)&v32 - 8) = v43;
    sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
    v24 = v45;
    sub_243BFD4CC();
    v45 = v24;
    sub_243B7FA20(v22, type metadata accessor for StoredPhotoLayout);
    v11 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_243B7CE24(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v46;
    }
    v26 = *(_QWORD *)(v11 + 16);
    v25 = *(_QWORD *)(v11 + 24);
    a1 = v37;
    if (v26 >= v25 >> 1)
    {
      sub_243B7CE24(v25 > 1, v26 + 1, 1);
      v11 = v46;
    }
    *(_QWORD *)(v11 + 16) = v26 + 1;
    result = sub_243B6F934(v44, v11+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v26, type metadata accessor for StoredPhotoLayoutProto);
    v17 = *(_BYTE *)(a1 + 32);
    v18 = 1 << v17;
    if (v14 >= 1 << v17)
      goto LABEL_29;
    v16 = v36;
    v27 = *(_QWORD *)(v36 + 8 * v20);
    if ((v27 & (1 << v14)) == 0)
      goto LABEL_30;
    LODWORD(v13) = v35;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v35)
      goto LABEL_31;
    v28 = v27 & (-2 << (v14 & 0x3F));
    if (v28)
    {
      v18 = __clz(__rbit64(v28)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v29 = v20 + 1;
      v30 = (v18 + 63) >> 6;
      v19 = v34;
      if (v20 + 1 < v30)
      {
        v31 = *(_QWORD *)(v36 + 8 * v29);
        if (!v31)
        {
          v29 = v20 + 2;
          if (v20 + 2 >= v30)
            goto LABEL_4;
          v31 = *(_QWORD *)(v36 + 8 * v29);
          if (!v31)
          {
            while (v30 - 3 != v20)
            {
              v31 = *(_QWORD *)(v33 + 8 * v20++);
              if (v31)
              {
                v29 = v20 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v18 = __clz(__rbit64(v31)) + (v29 << 6);
      }
    }
LABEL_4:
    ++v15;
    v14 = v18;
    if (v15 == v19)
      return v11;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t StoredPhoto.init(localIdentifier:modificationDate:parallaxScale:preferredLayout:layouts:accessibilityDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;

  v16 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a7, a1, v16);
  v17 = (int *)type metadata accessor for StoredPhoto(0);
  v18 = a7 + v17[5];
  v19 = sub_243BFD22C();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a2, v19);
  *(double *)(a7 + v17[6]) = a8;
  *(_QWORD *)(a7 + v17[7]) = a3;
  *(_QWORD *)(a7 + v17[8]) = a4;
  v21 = (_QWORD *)(a7 + v17[9]);
  *v21 = a5;
  v21[1] = a6;
  return result;
}

uint64_t type metadata accessor for StoredPhoto(uint64_t a1)
{
  return sub_243BA3B6C(a1, (uint64_t *)&unk_2543CDE90);
}

PhotosFace::StoredPhotoLayout::Rect __swiftcall StoredPhotoLayout.Rect.init(x:y:width:height:)(Swift::Double x, Swift::Double y, Swift::Double width, Swift::Double height)
{
  Swift::Double *v4;
  PhotosFace::StoredPhotoLayout::Rect result;

  *v4 = x;
  v4[1] = y;
  v4[2] = width;
  v4[3] = height;
  result.height = height;
  result.width = width;
  result.y = y;
  result.x = x;
  return result;
}

__n128 StoredPhotoLayout.init(baseImage:maskImage:originalCrop:timePosition:timeRect:backgroundZorder:foregroundZorder:timeElementZorder:imageAOTBrightness:userEdited:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>, double a11@<D3>)
{
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  __n128 result;
  __int128 v30;
  __n128 v31;

  v20 = *((_QWORD *)a3 + 2);
  v21 = *((_QWORD *)a3 + 3);
  v30 = *a3;
  v31 = *a5;
  v22 = a5[1].n128_u64[0];
  v23 = a5[1].n128_u64[1];
  v24 = (int *)type metadata accessor for StoredPhotoLayout(0);
  v25 = a7 + v24[5];
  v26 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  sub_243B6F934(a1, a7, type metadata accessor for StoredPhotoLayout.ImageLocation);
  sub_243BA5C84(a2, v25, &qword_2572ED130);
  v27 = a7 + v24[6];
  *(_OWORD *)v27 = v30;
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = v21;
  *(_QWORD *)(a7 + v24[7]) = a4;
  v28 = (__n128 *)(a7 + v24[8]);
  result = v31;
  *v28 = v31;
  v28[1].n128_u64[0] = v22;
  v28[1].n128_u64[1] = v23;
  *(double *)(a7 + v24[9]) = a8;
  *(double *)(a7 + v24[10]) = a9;
  *(double *)(a7 + v24[11]) = a10;
  *(double *)(a7 + v24[12]) = a11;
  *(_BYTE *)(a7 + v24[13]) = a6;
  return result;
}

uint64_t type metadata accessor for StoredPhotoLayout(uint64_t a1)
{
  return sub_243BA3B6C(a1, (uint64_t *)&unk_2572EDF70);
}

uint64_t type metadata accessor for StoredPhotoLayout.ImageLocation(uint64_t a1)
{
  return sub_243BA3B6C(a1, (uint64_t *)&unk_2572EE040);
}

uint64_t StoredPhoto.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = v1;
  sub_243BFD280();
  sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_243BFD7A8();
  v4 = type metadata accessor for StoredPhoto(0);
  sub_243BFD22C();
  sub_243B88508(&qword_2572ED908, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_243BFD7A8();
  sub_243BFE1D4();
  sub_243BFE1B0();
  v5 = *(_QWORD *)(v1 + *(int *)(v4 + 32));
  swift_bridgeObjectRetain();
  sub_243BA2DE0(a1, v5);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v2 + *(int *)(v4 + 36) + 8))
    return sub_243BFE1BC();
  sub_243BFE1BC();
  swift_bridgeObjectRetain();
  sub_243BFD850();
  return swift_bridgeObjectRelease();
}

uint64_t StoredPhoto.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  _QWORD *v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = v3;
  v8 = sub_243BFD22C();
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_243BFD280();
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v57 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v62);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StoredPhotoLayoutProto(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v63 = (uint64_t)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v50 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  v60 = *(_QWORD *)(v20 - 8);
  v61 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (_QWORD *)((char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = *a2;
  v58 = a1;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
  v24 = MEMORY[0x24BEE4AF8];
  if (v23)
  {
    v50[0] = a3;
    v64 = MEMORY[0x24BEE4AF8];
    v25 = swift_bridgeObjectRetain();
    sub_243B7CBD8(0, v23, 0);
    v26 = *(unsigned __int8 *)(v15 + 80);
    v50[1] = v25;
    v27 = v25 + ((v26 + 32) & ~v26);
    v59 = *(_QWORD *)(v15 + 72);
    v28 = v3;
    while (1)
    {
      sub_243B6F8F0(v27, (uint64_t)v19, type metadata accessor for StoredPhotoLayoutProto);
      v29 = v63;
      sub_243B6F8F0((uint64_t)v19, v63, type metadata accessor for StoredPhotoLayoutProto);
      StoredPhotoLayout.init(protobuf:version:)(v29, (uint64_t)v13);
      if (v28)
        break;
      v30 = (uint64_t)v22 + *(int *)(v61 + 48);
      *v22 = *(_QWORD *)&v13[*(int *)(v62 + 28)];
      sub_243B6F934((uint64_t)v13, v30, type metadata accessor for StoredPhotoLayout);
      sub_243B7FA20((uint64_t)v19, type metadata accessor for StoredPhotoLayoutProto);
      v24 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CBD8(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v28 = 0;
        v24 = v64;
      }
      v32 = *(_QWORD *)(v24 + 16);
      v31 = *(_QWORD *)(v24 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_243B7CBD8(v31 > 1, v32 + 1, 1);
        v24 = v64;
      }
      *(_QWORD *)(v24 + 16) = v32 + 1;
      sub_243B6F9B4((uint64_t)v22, v24+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v32, &qword_2572EBA28);
      v27 += v59;
      if (!--v23)
      {
        v4 = v28;
        swift_bridgeObjectRelease();
        a3 = v50[0];
        goto LABEL_11;
      }
    }
    sub_243B7FA20((uint64_t)v19, type metadata accessor for StoredPhotoLayoutProto);
    swift_release();
    sub_243B7FA20(v58, type metadata accessor for StoredPhotoProto);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_11:
    if (*(_QWORD *)(v24 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
      v34 = sub_243BFDFDC();
    }
    else
    {
      v34 = MEMORY[0x24BEE4B00];
    }
    v64 = v34;
    v35 = swift_bridgeObjectRetain();
    sub_243BA24B0(v35, 1, &v64);
    if (v4)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = v64;
      v37 = v58;
      v38 = *(unsigned int *)(v58 + 32);
      v39 = *(_QWORD *)v58;
      v40 = *(_QWORD *)(v58 + 8);
      LOBYTE(v64) = v56;
      sub_243B7FBDC(v39, v40);
      v41 = v57;
      UUID.init(serialized:version:)(v39, v40);
      v42 = v41;
      v43 = v53;
      sub_243BFD1E4();
      v44 = *(_QWORD *)(v37 + 24);
      v45 = (uint64_t *)(v37 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
      v46 = *v45;
      v47 = v45[1];
      swift_bridgeObjectRetain();
      sub_243B7FA20(v37, type metadata accessor for StoredPhotoProto);
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(a3, v42, v52);
      v48 = (int *)type metadata accessor for StoredPhoto(0);
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(a3 + v48[5], v43, v55);
      *(_QWORD *)(a3 + v48[6]) = v44;
      *(_QWORD *)(a3 + v48[7]) = v38;
      *(_QWORD *)(a3 + v48[8]) = v36;
      v49 = (_QWORD *)(a3 + v48[9]);
      *v49 = v46;
      v49[1] = v47;
    }
  }
  return result;
}

uint64_t StoredPhoto.protobuf(version:)(uint64_t a1)
{
  return sub_243B9EE0C(a1, type metadata accessor for StoredPhotoProto, &qword_2572ED710, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

Swift::Void __swiftcall StoredPhoto.gather(attachments:version:)(Swift::OpaquePointer *attachments, PhotosFace::ProtocolVersion version)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  unsigned int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t *v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  void (*v121)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  void (*v123)(char *, uint64_t);
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  Swift::OpaquePointer *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  int64_t v135;
  char *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;

  v131 = attachments;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v3);
  v130 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for LazyDataState();
  MEMORY[0x24BDAC7A8](v113);
  v112 = (__int128 *)((char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v111 = (uint64_t)&v99 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v8);
  v110 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v129 = (char *)&v99 - v11;
  v128 = sub_243BFD10C();
  v109 = *(_QWORD *)(v128 - 8);
  MEMORY[0x24BDAC7A8](v128);
  v127 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_243BFD190();
  v13 = *(_QWORD *)(v141 - 8);
  MEMORY[0x24BDAC7A8](v141);
  v126 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v125 = (char *)&v99 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v136 = (char *)&v99 - v18;
  v108 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v99 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v102 = (uint64_t)&v99 - v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v99 - v23;
  v132 = type metadata accessor for StoredPhotoLayout(0);
  v105 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v104 = (uint64_t)&v99 - v28;
  v29 = *(int *)(type metadata accessor for StoredPhoto(0) + 32);
  v137 = v2;
  v30 = *(_QWORD *)(v2 + v29);
  v31 = *(_QWORD *)(v30 + 64);
  v100 = v30 + 64;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v101 = (unint64_t)(v32 + 63) >> 6;
  v138 = *MEMORY[0x24BDCD7A0];
  v114 = v30;
  swift_bridgeObjectRetain();
  v35 = 0;
  v103 = xmmword_243C00A50;
  v106 = v24;
  v115 = v13;
  v124 = v26;
  while (1)
  {
    if (v34)
    {
      v134 = (v34 - 1) & v34;
      v135 = v35;
      v54 = __clz(__rbit64(v34)) | (v35 << 6);
      goto LABEL_25;
    }
    v55 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v55 >= v101)
      goto LABEL_33;
    v56 = *(_QWORD *)(v100 + 8 * v55);
    v57 = v35 + 1;
    if (!v56)
    {
      v57 = v35 + 2;
      if (v35 + 2 >= v101)
        goto LABEL_33;
      v56 = *(_QWORD *)(v100 + 8 * v57);
      if (!v56)
      {
        v57 = v35 + 3;
        if (v35 + 3 >= v101)
          goto LABEL_33;
        v56 = *(_QWORD *)(v100 + 8 * v57);
        if (!v56)
        {
          v57 = v35 + 4;
          if (v35 + 4 >= v101)
            goto LABEL_33;
          v56 = *(_QWORD *)(v100 + 8 * v57);
          if (!v56)
            break;
        }
      }
    }
LABEL_24:
    v134 = (v56 - 1) & v56;
    v135 = v57;
    v54 = __clz(__rbit64(v56)) + (v57 << 6);
LABEL_25:
    v59 = v104;
    sub_243B6F8F0(*(_QWORD *)(v114 + 56) + *(_QWORD *)(v105 + 72) * v54, v104, type metadata accessor for StoredPhotoLayout);
    sub_243B6F934(v59, (uint64_t)v26, type metadata accessor for StoredPhotoLayout);
    sub_243B6F8F0((uint64_t)v26, (uint64_t)v24, type metadata accessor for StoredPhotoLayout.ImageLocation);
    v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v61 = v60(v24, 1, v141);
    v122 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v60;
    if (v61 == 1)
    {
      v142 = 0x5F65736162;
      v143 = 0xE500000000000000;
      sub_243BFDCC4();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      sub_243BFD280();
      sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      sub_243BFE0A8();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      v139 = v142;
      v140 = v143;
    }
    else
    {
      v62 = v136;
      v63 = v24;
      v64 = v141;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v136, v63, v141);
      v139 = sub_243BFD124();
      v140 = v65;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v64);
    }
    if (qword_2543CE008 != -1)
      swift_once();
    v66 = __swift_project_value_buffer(v141, (uint64_t)qword_2543CDFF0);
    v67 = v126;
    v118 = v66;
    sub_243BFD13C();
    v142 = sub_243BFD244();
    v143 = v68;
    v69 = v109;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 104);
    v72 = v127;
    v71 = v128;
    v70(v127, v138, v128);
    v73 = sub_243B4DDA4();
    v74 = v125;
    sub_243BFD184();
    v75 = *(void (**)(char *, uint64_t))(v69 + 8);
    v75(v72, v71);
    swift_bridgeObjectRelease();
    v76 = *(void (**)(char *, uint64_t))(v13 + 8);
    v77 = v141;
    v76(v67, v141);
    v133 = v76;
    v142 = v139;
    v143 = v140;
    v117 = v70;
    v70(v72, v138, v71);
    v78 = v77;
    v79 = v136;
    v116 = v73;
    sub_243BFD184();
    v123 = v75;
    v75(v72, v71);
    v76(v74, v78);
    v80 = (uint64_t)v129;
    v120 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v120(v129, v79, v78);
    v81 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v81(v80, 0, 1, v78);
    v119 = type metadata accessor for LazyData();
    v82 = swift_allocObject();
    v83 = v110;
    sub_243B50168(v80, v110, &qword_2543CDE68);
    v84 = v113;
    v85 = v112;
    v86 = (uint64_t)v112 + *(int *)(v113 + 20);
    v121 = v81;
    v81(v86, 1, 1, v78);
    *v85 = v103;
    sub_243BA5C84(v83, v86, &qword_2543CDE68);
    *((_BYTE *)v85 + *(int *)(v84 + 24)) = 0;
    v87 = v79;
    v88 = v111;
    sub_243B6F934((uint64_t)v85, v111, (uint64_t (*)(_QWORD))type metadata accessor for LazyDataState);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD78);
    v89 = swift_allocObject();
    *(_DWORD *)(v89 + ((*(unsigned int *)(*(_QWORD *)v89 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
    sub_243B6F8F0(v88, v89 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v89 + 16), (uint64_t (*)(_QWORD))type metadata accessor for LazyDataState);
    sub_243B7FA20(v88, (uint64_t (*)(_QWORD))type metadata accessor for LazyDataState);
    v90 = v80;
    v91 = v133;
    sub_243B6F978(v90, &qword_2543CDE68);
    *(_QWORD *)(v82 + 16) = v89;
    v91(v79, v78);
    v92 = (uint64_t *)v131;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v142 = *v92;
    *v92 = 0x8000000000000000;
    sub_243BA291C(v82, v139, v140, isUniquelyReferenced_nonNull_native);
    *v92 = v142;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v124;
    v94 = v130;
    sub_243B50168((uint64_t)&v124[*(int *)(v132 + 20)], v130, &qword_2572ED130);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v94, 1, v108) != 1)
    {
      v95 = v117;
      v96 = v102;
      sub_243B6F934(v130, v102, type metadata accessor for StoredPhotoLayout.ImageLocation);
      v97 = v96;
      v98 = v99;
      sub_243B6F8F0(v97, v99, type metadata accessor for StoredPhotoLayout.ImageLocation);
      if (v122(v98, 1, v141) == 1)
      {
        v142 = 0x5F6B73616DLL;
        v143 = 0xE500000000000000;
        sub_243BFDCC4();
        sub_243BFD85C();
        swift_bridgeObjectRelease();
        sub_243BFD85C();
        sub_243BFD280();
        sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        sub_243BFE0A8();
        sub_243BFD85C();
        swift_bridgeObjectRelease();
        sub_243BFD85C();
        v139 = v142;
        v140 = v143;
      }
      else
      {
        v36 = v98;
        v37 = v141;
        (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v87, v36, v141);
        v139 = sub_243BFD124();
        v140 = v38;
        v91(v87, v37);
      }
      v39 = v91;
      sub_243B7FA20(v102, type metadata accessor for StoredPhotoLayout.ImageLocation);
      v40 = v126;
      sub_243BFD13C();
      v142 = sub_243BFD244();
      v143 = v41;
      v43 = v127;
      v42 = v128;
      v44 = v138;
      v95(v127, v138, v128);
      v45 = v125;
      sub_243BFD184();
      v46 = v123;
      v123(v43, v42);
      swift_bridgeObjectRelease();
      v47 = v40;
      v48 = v141;
      v39(v47, v141);
      v142 = v139;
      v143 = v140;
      v95(v43, v44, v42);
      v49 = v136;
      sub_243BFD184();
      v46(v43, v42);
      v39(v45, v48);
      v50 = (uint64_t)v129;
      v120(v129, v49, v48);
      v121(v50, 0, 1, v48);
      swift_allocObject();
      v51 = sub_243BA9AD4(0, 0xF000000000000000, v50, 0);
      v39(v49, v48);
      v52 = (uint64_t *)v131;
      v53 = swift_isUniquelyReferenced_nonNull_native();
      v142 = *v52;
      *v52 = 0x8000000000000000;
      sub_243BA291C(v51, v139, v140, v53);
      *v52 = v142;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v124;
    }
    sub_243B7FA20((uint64_t)v26, type metadata accessor for StoredPhotoLayout);
    v13 = v115;
    v24 = v106;
    v34 = v134;
    v35 = v135;
  }
  v58 = v35 + 5;
  if (v35 + 5 >= v101)
  {
LABEL_33:
    swift_release();
    return;
  }
  v56 = *(_QWORD *)(v100 + 8 * v58);
  if (v56)
  {
    v57 = v35 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v57 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    if (v57 >= v101)
      goto LABEL_33;
    v56 = *(_QWORD *)(v100 + 8 * v57);
    ++v58;
    if (v56)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> StoredPhoto.save(attachments:version:)(Swift::OpaquePointer attachments, PhotosFace::ProtocolVersion version)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  unsigned int v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *rawValue;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v3 = v2;
  rawValue = attachments._rawValue;
  v78 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v4);
  v67 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v59 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v64 = (uint64_t)&v59 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v70 = (char *)&v59 - v11;
  v75 = type metadata accessor for StoredPhotoLayout(0);
  v69 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v68 = (uint64_t)&v59 - v15;
  v74 = (char *)sub_243BFD10C();
  v16 = *((_QWORD *)v74 - 1);
  MEMORY[0x24BDAC7A8](v74);
  v18 = (int64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_243BFD190();
  v72 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v59 - v23;
  if (qword_2543CE008 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    __swift_project_value_buffer(v19, (uint64_t)qword_2543CDFF0);
    sub_243BFD13C();
    v76 = sub_243BFD244();
    v77 = v25;
    v26 = (uint64_t)v74;
    (*(void (**)(int64_t, _QWORD, char *))(v16 + 104))(v18, *MEMORY[0x24BDCD7A0], v74);
    sub_243B4DDA4();
    sub_243BFD184();
    (*(void (**)(int64_t, uint64_t))(v16 + 8))(v18, v26);
    swift_bridgeObjectRelease();
    v62 = *(void (**)(char *, uint64_t))(v72 + 8);
    v62(v21, v19);
    v27 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v74 = v24;
    v28 = (void *)sub_243BFD130();
    v76 = 0;
    v29 = objc_msgSend(v27, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v28, 1, 0, &v76);

    if (v29)
    {
      v30 = (id)v76;
    }
    else
    {
      v31 = (id)v76;
      v32 = (void *)sub_243BFD100();

      swift_willThrow();
      v3 = 0;
    }
    v33 = *(_QWORD *)(v63 + *(int *)(type metadata accessor for StoredPhoto(0) + 32));
    v34 = *(_QWORD *)(v33 + 64);
    v60 = v33 + 64;
    v35 = 1 << *(_BYTE *)(v33 + 32);
    v36 = -1;
    if (v35 < 64)
      v36 = ~(-1 << v35);
    v37 = v36 & v34;
    v61 = (unint64_t)(v35 + 63) >> 6;
    v71 = v33;
    swift_bridgeObjectRetain();
    v18 = 0;
    v38 = (uint64_t)v70;
    v24 = v74;
    if (v37)
    {
      while (1)
      {
        v39 = __clz(__rbit64(v37));
        v37 &= v37 - 1;
        v40 = v39 | (v18 << 6);
LABEL_24:
        v44 = v68;
        sub_243B6F8F0(*(_QWORD *)(v71 + 56) + *(_QWORD *)(v69 + 72) * v40, v68, type metadata accessor for StoredPhotoLayout);
        sub_243B6F934(v44, (uint64_t)v13, type metadata accessor for StoredPhotoLayout);
        sub_243B6F8F0((uint64_t)v13, v38, type metadata accessor for StoredPhotoLayout.ImageLocation);
        v45 = v72;
        v16 = *(_QWORD *)(v72 + 48);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v16)(v38, 1, v19) == 1)
        {
          v76 = 0x5F65736162;
          v77 = 0xE500000000000000;
          sub_243BFDCC4();
          sub_243BFD85C();
          swift_bridgeObjectRelease();
          sub_243BFD85C();
          sub_243BFD280();
          sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          sub_243BFE0A8();
          sub_243BFD85C();
          swift_bridgeObjectRelease();
          sub_243BFD85C();
          v47 = v76;
          v46 = v77;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v21, v38, v19);
          v47 = sub_243BFD124();
          v46 = v48;
          v62(v21, v19);
        }
        v49 = v47;
        v24 = v74;
        sub_243B9E910(v49, v46, (uint64_t)v74, (uint64_t)rawValue);
        if (v3)
          break;
        swift_bridgeObjectRelease();
        v50 = v67;
        sub_243B50168((uint64_t)&v13[*(int *)(v75 + 20)], v67, &qword_2572ED130);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v50, 1, v66) == 1)
        {
          sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayout);
          v38 = (uint64_t)v70;
          if (!v37)
            goto LABEL_11;
        }
        else
        {
          v51 = v50;
          v52 = v64;
          sub_243B6F934(v51, v64, type metadata accessor for StoredPhotoLayout.ImageLocation);
          v53 = v52;
          v54 = v59;
          sub_243B6F8F0(v53, v59, type metadata accessor for StoredPhotoLayout.ImageLocation);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v16)(v54, 1, v19) == 1)
          {
            v76 = 0x5F6B73616DLL;
            v77 = 0xE500000000000000;
            sub_243BFDCC4();
            sub_243BFD85C();
            swift_bridgeObjectRelease();
            sub_243BFD85C();
            sub_243BFD280();
            sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
            sub_243BFE0A8();
            sub_243BFD85C();
            swift_bridgeObjectRelease();
            sub_243BFD85C();
            v56 = v76;
            v55 = v77;
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v21, v54, v19);
            v56 = sub_243BFD124();
            v55 = v57;
            v62(v21, v19);
          }
          sub_243B7FA20(v64, type metadata accessor for StoredPhotoLayout.ImageLocation);
          v58 = v56;
          v24 = v74;
          sub_243B9E910(v58, v55, (uint64_t)v74, (uint64_t)rawValue);
          sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayout);
          swift_bridgeObjectRelease();
          v38 = (uint64_t)v70;
          if (!v37)
            goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayout);
      goto LABEL_39;
    }
LABEL_11:
    if (!__OFADD__(v18++, 1))
      break;
    __break(1u);
  }
  if (v18 < v61)
  {
    v42 = *(_QWORD *)(v60 + 8 * v18);
    if (v42)
    {
LABEL_23:
      v37 = (v42 - 1) & v42;
      v40 = __clz(__rbit64(v42)) + (v18 << 6);
      goto LABEL_24;
    }
    v43 = v18 + 1;
    if (v18 + 1 < v61)
    {
      v42 = *(_QWORD *)(v60 + 8 * v43);
      if (v42)
        goto LABEL_22;
      v43 = v18 + 2;
      if (v18 + 2 < v61)
      {
        v42 = *(_QWORD *)(v60 + 8 * v43);
        if (v42)
          goto LABEL_22;
        v43 = v18 + 3;
        if (v18 + 3 < v61)
        {
          v42 = *(_QWORD *)(v60 + 8 * v43);
          if (v42)
            goto LABEL_22;
          v43 = v18 + 4;
          if (v18 + 4 < v61)
          {
            v42 = *(_QWORD *)(v60 + 8 * v43);
            if (v42)
            {
LABEL_22:
              v18 = v43;
              goto LABEL_23;
            }
            while (1)
            {
              v18 = v43 + 1;
              if (__OFADD__(v43, 1))
                __break(1u);
              if (v18 >= v61)
                break;
              v42 = *(_QWORD *)(v60 + 8 * v18);
              ++v43;
              if (v42)
                goto LABEL_23;
            }
          }
        }
      }
    }
  }
LABEL_39:
  swift_release();
  v62(v24, v19);
}

uint64_t StoredPhoto.localIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD280();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t StoredPhoto.modificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhoto(0) + 20);
  v4 = sub_243BFD22C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double StoredPhoto.parallaxScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoredPhoto(0) + 24));
}

uint64_t StoredPhoto.preferredLayout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhoto(0) + 28));
}

uint64_t StoredPhoto.preferredLayout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for StoredPhoto(0);
  *(_QWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*StoredPhoto.preferredLayout.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhoto(0);
  return nullsub_1;
}

uint64_t StoredPhoto.layouts.getter()
{
  type metadata accessor for StoredPhoto(0);
  return swift_bridgeObjectRetain();
}

uint64_t StoredPhoto.layouts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for StoredPhoto(0) + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*StoredPhoto.layouts.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhoto(0);
  return nullsub_1;
}

uint64_t StoredPhoto.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhoto(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StoredPhoto.hashValue.getter()
{
  return sub_243B9FDCC((void (*)(_BYTE *))StoredPhoto.hash(into:));
}

uint64_t sub_243B9D01C(uint64_t a1, uint64_t a2)
{
  return sub_243B9FE18(a1, a2, (void (*)(_BYTE *))StoredPhoto.hash(into:));
}

uint64_t sub_243B9D028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B9FE68(a1, a2, a3, (void (*)(_BYTE *))StoredPhoto.hash(into:));
}

void static StoredPhoto.localIdentifier(from:)()
{
  void *ObjCClassFromMetadata;
  void *v1;
  id v2;

  sub_243BA3BA0(0, &qword_2572EDD80);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_243BFD244();
  v1 = (void *)sub_243BFD7F0();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(ObjCClassFromMetadata, sel_localIdentifierWithUUID_, v1);

  if (v2)
  {
    sub_243BFD7FC();

  }
  else
  {
    __break(1u);
  }
}

uint64_t static StoredPhoto.uuid(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *ObjCClassFromMetadata;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED910);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BA3BA0(0, &qword_2572EDD80);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v6 = (void *)sub_243BFD7F0();
  v7 = objc_msgSend(ObjCClassFromMetadata, sel_uuidFromLocalIdentifier_, v6);

  if (!v7)
    goto LABEL_4;
  sub_243BFD7FC();

  sub_243BFD238();
  swift_bridgeObjectRelease();
  v8 = sub_243BFD280();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_243B6F978((uint64_t)v4, &qword_2572ED910);
LABEL_4:
    type metadata accessor for StoredPhotoError(0);
    sub_243B88508(&qword_2572EDD88, type metadata accessor for StoredPhotoError, (uint64_t)&unk_243C00E34);
    swift_allocError();
    v11 = v10;
    v12 = sub_243BFD190();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 2, 2, v12);
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v4, v8);
}

uint64_t StoredPhoto.init(pfcStoredPhoto:baseURL:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[3];
  uint64_t v74[2];

  v70 = a3;
  v71 = a2;
  v5 = sub_243BFD22C();
  v68 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_243BFD280();
  v8 = *(_QWORD *)(v67 - 8);
  v9 = MEMORY[0x24BDAC7A8](v67);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_layouts, v9);
  v13 = sub_243BA3BA0(0, &qword_2572EDD90);
  v14 = sub_243BFD94C();

  v74[1] = v14;
  v69 = v5;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_243BFDFB8();
    swift_bridgeObjectRelease();
    if (v15 < 0)
    {
      __break(1u);
LABEL_22:
      swift_once();
LABEL_8:
      v19 = sub_243BFD598();
      __swift_project_value_buffer(v19, (uint64_t)qword_2543CE350);
      v20 = a1;
      v21 = sub_243BFD580();
      v22 = sub_243BFDCAC();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc();
        v70 = swift_slowAlloc();
        v74[0] = v70;
        *(_DWORD *)v23 = 136315394;
        v24 = objc_msgSend(v20, sel_layouts);
        v25 = sub_243BFD94C();

        v26 = MEMORY[0x249501D08](v25, v13);
        v28 = v27;
        swift_bridgeObjectRelease();
        v73[0] = sub_243B739A8(v26, v28, v74);
        sub_243BFDD54();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        swift_beginAccess();
        v29 = swift_bridgeObjectRetain();
        v30 = MEMORY[0x249501D08](v29, v13);
        v32 = v31;
        swift_bridgeObjectRelease();
        v72 = sub_243B739A8(v30, v32, v74);
        sub_243BFDD54();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_243B4B000, v21, v22, "Invalid layout index: %s in layouts %s", (uint8_t *)v23, 0x16u);
        v33 = v70;
        swift_arrayDestroy();
        MEMORY[0x249502C5C](v33, -1, -1);
        MEMORY[0x249502C5C](v23, -1, -1);

        type metadata accessor for StoredPhotoError(0);
        sub_243B88508(&qword_2572EDD88, type metadata accessor for StoredPhotoError, (uint64_t)&unk_243C00E34);
        swift_allocError();
        v35 = v34;
        v36 = sub_243BFD190();
        v37 = *(_QWORD *)(v36 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 2, v36);
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v71, v36);
      }
      else
      {

        type metadata accessor for StoredPhotoError(0);
        sub_243B88508(&qword_2572EDD88, type metadata accessor for StoredPhotoError, (uint64_t)&unk_243C00E34);
        swift_allocError();
        v39 = v38;
        v40 = sub_243BFD190();
        v41 = *(_QWORD *)(v40 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v39, 1, 2, v40);
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v71, v40);
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v16 = (uint64_t)objc_msgSend(a1, sel_preferredLayout);
  if (v16 < 0 || v16 >= v15)
  {
    if (qword_2543CD828 == -1)
      goto LABEL_8;
    goto LABEL_22;
  }
  v66 = v8;
  v17 = (void *)sub_243B9D9F4((unint64_t)objc_msgSend(a1, sel_preferredLayout));
  v18 = objc_msgSend(a1, sel_localIdentifier);
  sub_243BFD7FC();

  static StoredPhoto.uuid(from:)((uint64_t)v11);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(a1, sel_modificationDate);
    sub_243BFD220();

    objc_msgSend(a1, sel_parallaxScale);
    v44 = v43;
    v65 = v17;
    v64 = objc_msgSend(v17, sel_timePosition);
    v45 = objc_msgSend(a1, sel_layouts);
    v46 = sub_243BFD94C();

    MEMORY[0x24BDAC7A8](v47);
    *(&v63 - 2) = v71;
    v48 = sub_243B9AA3C((void (*)(id *))sub_243BA3BD8, (uint64_t)(&v63 - 4), v46);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v48 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
      v49 = sub_243BFDFDC();
    }
    else
    {
      v49 = MEMORY[0x24BEE4B00];
    }
    v50 = v66;
    v73[0] = v49;
    v51 = swift_bridgeObjectRetain();
    sub_243BA24B0(v51, 1, v73);
    v52 = v65;
    swift_bridgeObjectRelease();
    v66 = v73[0];
    v53 = objc_msgSend(a1, sel_accessibilityDescription);
    if (v53)
    {
      v54 = v53;
      v55 = sub_243BFD7FC();
      v57 = v56;

    }
    else
    {

      v55 = 0;
      v57 = 0;
    }
    v58 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v70, v11, v67);
    v59 = (int *)type metadata accessor for StoredPhoto(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v58 + v59[5], v7, v69);
    *(_QWORD *)(v58 + v59[6]) = v44;
    *(_QWORD *)(v58 + v59[7]) = v64;
    *(_QWORD *)(v58 + v59[8]) = v66;
    v60 = (uint64_t *)(v58 + v59[9]);
    *v60 = v55;
    v60[1] = v57;
  }
  v61 = sub_243BFD190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v71, v61);
  return swift_bridgeObjectRelease();
}

uint64_t sub_243B9D9F4(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_243BA2D78(v3);
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      sub_243BFD964();
      return v10;
    }
  }
  result = sub_243BFDFE8();
  __break(1u);
  return result;
}

uint64_t sub_243B9DAD4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = (uint64_t)a3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28) + 48);
  *a3 = objc_msgSend(v10, sel_timePosition);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  return StoredPhotoLayout.init(pfcStoredLayout:baseURL:)(v10, (uint64_t)v9, v11);
}

uint64_t StoredPhotoLayout.init(pfcStoredLayout:baseURL:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD);
  CGFloat v34;
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  id v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  int *v58;
  uint64_t v59;
  CGFloat *v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat *v63;
  _QWORD v65[2];
  CGFloat v66;
  CGFloat v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  CGFloat MinY;
  CGFloat MinX;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  v73 = a3;
  v69 = type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v69);
  v6 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)&MinX = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_243BFD10C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MinY = COERCE_DOUBLE(type metadata accessor for StoredPhotoLayout.ImageLocation(0));
  v67 = *(double *)(*(_QWORD *)&MinY - 8);
  v13 = MEMORY[0x24BDAC7A8](*(_QWORD *)&MinY);
  v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, sel_baseImageName, v13);
  v17 = sub_243BFD7FC();
  v19 = v18;

  v75 = v17;
  v76 = v19;
  v20 = *(void (**)(char *))(v10 + 104);
  LODWORD(v66) = *MEMORY[0x24BDCD7A0];
  v20(v12);
  v65[1] = sub_243B4DDA4();
  v74 = a2;
  sub_243BFD184();
  v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v12, v9);
  swift_bridgeObjectRelease();
  v22 = sub_243BFD190();
  v68 = *(_QWORD *)(v22 - 8);
  v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56);
  v70 = v15;
  v24 = v15;
  v25 = v22;
  v23(v24, 0, 1, v22);
  v26 = objc_msgSend(a1, sel_maskImageName);
  if (v26)
  {
    v27 = v26;
    v28 = sub_243BFD7FC();
    v65[0] = v21;
    v29 = v20;
    v31 = v30;

    v75 = v28;
    v76 = v31;
    ((void (*)(char *, _QWORD, uint64_t))v29)(v12, LODWORD(v66), v9);
    v32 = *(_QWORD *)&MinX;
    sub_243BFD184();
    ((void (*)(char *, uint64_t))v65[0])(v12, v9);
    v23((char *)v32, 0, 1, v25);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)&v67 + 56);
    v34 = MinY;
    v33(v32, 0, 1, *(_QWORD *)&MinY);
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)&v67 + 56);
    v34 = MinY;
    v32 = *(_QWORD *)&MinX;
    v33(*(_QWORD *)&MinX, 1, 1, *(_QWORD *)&MinY);
  }
  v35 = v25;
  objc_msgSend(a1, sel_originalCrop);
  x = v77.origin.x;
  y = v77.origin.y;
  width = v77.size.width;
  height = v77.size.height;
  MinX = CGRectGetMinX(v77);
  v78.origin.x = x;
  v78.origin.y = y;
  v78.size.width = width;
  v78.size.height = height;
  MinY = CGRectGetMinY(v78);
  v79.origin.x = x;
  v79.origin.y = y;
  v79.size.width = width;
  v79.size.height = height;
  v67 = CGRectGetWidth(v79);
  v80.origin.x = x;
  v80.origin.y = y;
  v80.size.width = width;
  v80.size.height = height;
  v66 = CGRectGetHeight(v80);
  v40 = objc_msgSend(a1, sel_timePosition);
  objc_msgSend(a1, sel_timeRect);
  v41 = v81.origin.x;
  v42 = v81.origin.y;
  v43 = v81.size.width;
  v44 = v81.size.height;
  v45 = CGRectGetMinX(v81);
  v82.origin.x = v41;
  v82.origin.y = v42;
  v82.size.width = v43;
  v82.size.height = v44;
  v46 = CGRectGetMinY(v82);
  v83.origin.x = v41;
  v83.origin.y = v42;
  v83.size.width = v43;
  v83.size.height = v44;
  v47 = CGRectGetWidth(v83);
  v84.origin.x = v41;
  v84.origin.y = v42;
  v84.size.width = v43;
  v84.size.height = v44;
  v48 = CGRectGetHeight(v84);
  objc_msgSend(a1, sel_backgroundZorder);
  v50 = v49;
  objc_msgSend(a1, sel_foregroundZorder);
  v52 = v51;
  objc_msgSend(a1, sel_timeElementZorder);
  v54 = v53;
  objc_msgSend(a1, sel_imageAOTBrightness);
  v56 = v55;
  v57 = objc_msgSend(a1, sel_userEdited);
  v58 = (int *)v69;
  v59 = (uint64_t)&v6[*(int *)(v69 + 20)];
  v33(v59, 1, 1, *(_QWORD *)&v34);
  sub_243B6F934((uint64_t)v70, (uint64_t)v6, type metadata accessor for StoredPhotoLayout.ImageLocation);
  sub_243BA5C84(v32, v59, &qword_2572ED130);
  v60 = (CGFloat *)&v6[v58[6]];
  v61 = MinY;
  *v60 = MinX;
  v60[1] = v61;
  v62 = v66;
  v60[2] = v67;
  v60[3] = v62;
  *(_QWORD *)&v6[v58[7]] = v40;
  v63 = (CGFloat *)&v6[v58[8]];
  *v63 = v45;
  v63[1] = v46;
  v63[2] = v47;
  v63[3] = v48;
  *(_QWORD *)&v6[v58[9]] = v50;
  *(_QWORD *)&v6[v58[10]] = v52;
  *(_QWORD *)&v6[v58[11]] = v54;
  *(_QWORD *)&v6[v58[12]] = v56;
  v6[v58[13]] = v57;
  sub_243B6F934((uint64_t)v6, v73, type metadata accessor for StoredPhotoLayout);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v74, v35);
}

uint64_t StoredPhotoLayout.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v89 = a2;
  v88 = type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v88);
  v87 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v4);
  v86 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v84 = (uint64_t)&v79 - v7;
  v92 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v83 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v82 = (_OWORD *)((char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v91 = (char *)&v79 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)&v93 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v13);
  v81 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v79 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v79 - v19;
  v21 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v80 = (uint64_t *)((char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v79 - v25;
  v94 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v90 = *(_QWORD *)(v94 - 8);
  MEMORY[0x24BDAC7A8](v94);
  v98 = (uint64_t)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  v97 = a1;
  v95 = v28;
  v29 = *(_QWORD *)(a1 + v28);
  v30 = (unsigned int *)(v29
                       + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  v85 = *v30;
  v31 = v29
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  swift_beginAccess();
  sub_243B50168(v31, (uint64_t)v20, &qword_2572EDDA0);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v32(v20, 1, v21) == 1)
  {
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    sub_243BFD388();
    v33 = &v26[*(int *)(v21 + 24)];
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    sub_243B6F978((uint64_t)v20, &qword_2572EDDA0);
  }
  else
  {
    sub_243B6F934((uint64_t)v20, (uint64_t)v26, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  }
  v34 = v96;
  StoredPhotoLayout.ImageLocation.init(protobuf:version:)((uint64_t)v26, v98);
  if (v34)
  {
    v35 = v97;
  }
  else
  {
    v36 = v29
        + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
    swift_beginAccess();
    sub_243B50168(v36, (uint64_t)v17, &qword_2572EDDA0);
    LODWORD(v36) = v32(v17, 1, v21);
    sub_243B6F978((uint64_t)v17, &qword_2572EDDA0);
    if ((_DWORD)v36 == 1)
    {
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
      v38 = v93;
      v37(v93, 1, 1, v94);
      v39 = v97;
      v41 = (uint64_t)v91;
      v40 = v92;
    }
    else
    {
      v39 = v97;
      v42 = *(_QWORD *)(v97 + v95)
          + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
      swift_beginAccess();
      v43 = v81;
      sub_243B50168(v42, v81, &qword_2572EDDA0);
      v44 = v32((char *)v43, 1, v21);
      v38 = v93;
      v45 = v80;
      if (v44 == 1)
      {
        *v80 = 0;
        *((_BYTE *)v45 + 8) = 1;
        sub_243BFD388();
        v46 = (_QWORD *)((char *)v45 + *(int *)(v21 + 24));
        *v46 = 0;
        v46[1] = 0;
        sub_243B6F978(v43, &qword_2572EDDA0);
      }
      else
      {
        sub_243B6F934(v43, (uint64_t)v80, type metadata accessor for StoredPhotoLayoutImageLocationProto);
      }
      v41 = (uint64_t)v91;
      v40 = v92;
      StoredPhotoLayout.ImageLocation.init(protobuf:version:)((uint64_t)v45, v38);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
      v37(v38, 0, 1, v94);
    }
    v47 = *(_QWORD *)(v39 + v95)
        + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
    swift_beginAccess();
    v48 = v47;
    v49 = v84;
    sub_243B50168(v48, v84, &qword_2572EDD98);
    v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
    if (v50(v49, 1, v40) == 1)
    {
      *(_OWORD *)v41 = 0u;
      *(_OWORD *)(v41 + 16) = 0u;
      sub_243BFD388();
      sub_243B6F978(v49, &qword_2572EDD98);
    }
    else
    {
      sub_243B6F934(v49, v41, type metadata accessor for StoredPhotoLayoutRectProto);
    }
    v51 = *(_QWORD *)v41;
    v52 = *(_QWORD *)(v41 + 8);
    v53 = *(_QWORD *)(v41 + 16);
    v54 = *(_QWORD *)(v41 + 24);
    sub_243B7FA20(v41, type metadata accessor for StoredPhotoLayoutRectProto);
    v55 = *(_QWORD *)(v39 + v95)
        + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
    swift_beginAccess();
    v56 = v55;
    v57 = v86;
    sub_243B50168(v56, v86, &qword_2572EDD98);
    v58 = v50(v57, 1, v40);
    v96 = v54;
    v97 = v53;
    v59 = v82;
    if (v58 == 1)
    {
      *v82 = 0u;
      v59[1] = 0u;
      sub_243BFD388();
      sub_243B6F978(v57, &qword_2572EDD98);
    }
    else
    {
      sub_243B6F934(v57, (uint64_t)v82, type metadata accessor for StoredPhotoLayoutRectProto);
    }
    v93 = *v59;
    v60 = *((_QWORD *)v59 + 2);
    v61 = *((_QWORD *)v59 + 3);
    sub_243B7FA20((uint64_t)v59, type metadata accessor for StoredPhotoLayoutRectProto);
    v62 = *(_QWORD *)(v39 + v95);
    v63 = (uint64_t *)(v62
                    + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
    swift_beginAccess();
    v64 = *v63;
    v65 = (uint64_t *)(v62
                    + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
    swift_beginAccess();
    v66 = *v65;
    v67 = (uint64_t *)(v62
                    + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
    swift_beginAccess();
    v68 = *v67;
    v69 = (uint64_t *)(v62
                    + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
    swift_beginAccess();
    v70 = *v69;
    v71 = (_BYTE *)(v62
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
    swift_beginAccess();
    LOBYTE(v62) = *v71;
    v73 = (uint64_t)v87;
    v72 = (int *)v88;
    v74 = (uint64_t)&v87[*(int *)(v88 + 20)];
    v37(v74, 1, 1, v94);
    sub_243B6F934(v98, v73, type metadata accessor for StoredPhotoLayout.ImageLocation);
    sub_243BA5C84(v38, v74, &qword_2572ED130);
    v75 = (_QWORD *)(v73 + v72[6]);
    *v75 = v51;
    v75[1] = v52;
    v76 = v96;
    v75[2] = v97;
    v75[3] = v76;
    *(_QWORD *)(v73 + v72[7]) = v85;
    v77 = v73 + v72[8];
    *(_OWORD *)v77 = v93;
    *(_QWORD *)(v77 + 16) = v60;
    *(_QWORD *)(v77 + 24) = v61;
    *(_QWORD *)(v73 + v72[9]) = v64;
    *(_QWORD *)(v73 + v72[10]) = v66;
    *(_QWORD *)(v73 + v72[11]) = v68;
    *(_QWORD *)(v73 + v72[12]) = v70;
    *(_BYTE *)(v73 + v72[13]) = v62;
    sub_243B6F934(v73, v89, type metadata accessor for StoredPhotoLayout);
    v35 = v39;
  }
  return sub_243B7FA20(v35, type metadata accessor for StoredPhotoLayoutProto);
}

uint64_t sub_243B9E910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];

  v8 = sub_243BFD10C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_243BFD190();
  v29 = *(_QWORD *)(v12 - 8);
  v30 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = a1;
  v31[1] = a2;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v9 + 104))(v11, *MEMORY[0x24BDCD7A0], v8, v13);
  sub_243B4DDA4();
  sub_243BFD184();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v16 = sub_243B7CFDC(a1, a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    if (qword_2572EB820 != -1)
      swift_once();
    v23 = sub_243BFD598();
    __swift_project_value_buffer(v23, (uint64_t)qword_2572EF838);
    swift_bridgeObjectRetain_n();
    v24 = sub_243BFD580();
    v25 = sub_243BFDCB8();
    if (os_log_type_enabled(v24, v25))
    {
      v28[1] = v4;
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v31[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain();
      v31[3] = sub_243B739A8(a1, a2, v31);
      sub_243BFDD54();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_243B4B000, v24, v25, "Couldn't find necessary attachment: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v27, -1, -1);
      MEMORY[0x249502C5C](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v30);
  }
  v18 = *(_QWORD **)(*(_QWORD *)(a4 + 56) + 8 * v16);
  swift_retain();
  swift_bridgeObjectRelease();
  v19 = v18[2];
  v20 = v19 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v19 + 16);
  v21 = (os_unfair_lock_s *)(v19 + ((*(unsigned int *)(*(_QWORD *)v19 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v21);
  sub_243BA8EB8(v20, (uint64_t)v15, v18, v31);
  if (v4)
  {
    os_unfair_lock_unlock(v21);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v30);
    return swift_release();
  }
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v30);
}

uint64_t sub_243B9EC80(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v6 = UUID.serialized(version:)();
  v8 = v7;
  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = (int *)type metadata accessor for StoredPhoto(0);
  sub_243BFD1F0();
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + v9[6]);
  v11 = *(_QWORD *)(a2 + v9[7]);
  if (HIDWORD(v11))
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = v11;
    v12 = swift_bridgeObjectRetain();
    v13 = sub_243B9AC20(v12, a3);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 40) = v13;
    v15 = (uint64_t *)(a2 + v9[9]);
    v16 = v15[1];
    if (v16)
    {
      v17 = *v15;
      v18 = (_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      *v18 = v17;
      v18[1] = v16;
    }
  }
  return result;
}

uint64_t StoredPhotoLayout.protobuf(version:)(uint64_t a1)
{
  return sub_243B9EE0C(a1, type metadata accessor for StoredPhotoLayoutProto, &qword_2572EDDA8, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243B9EE0C(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  a2(0);
  sub_243B88508(a3, a2, a4);
  return sub_243BFD4CC();
}

uint64_t sub_243B9EEA0@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4;

  v4 = *a2;
  return StoredPhoto.init(protobuf:version:)(a1, &v4, a3);
}

uint64_t sub_243B9EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BA0A38(a1, a2, a3, type metadata accessor for StoredPhotoProto, &qword_2572ED710, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

void sub_243B9EF00(Swift::OpaquePointer a1, PhotosFace::ProtocolVersion a2)
{
  StoredPhoto.save(attachments:version:)(a1, a2);
}

uint64_t StoredPhotoListProto.init(protoList:version:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];
  _QWORD *v7;

  v2 = type metadata accessor for StoredPhotoListProto(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRelease();
  *a1 = MEMORY[0x24BEE4AF8];
  sub_243BFD388();
  v7 = a1;
  sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  sub_243BFD4CC();
  return sub_243BA3C24((uint64_t)v4, (uint64_t)a1, type metadata accessor for StoredPhotoListProto);
}

uint64_t sub_243B9EFF8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t StoredPhotoListProto.protoList(version:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_243B9F048@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];
  _QWORD *v7;

  MEMORY[0x24BDAC7A8](a1);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRelease();
  *a2 = MEMORY[0x24BEE4AF8];
  sub_243BFD388();
  v7 = a2;
  sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  sub_243BFD4CC();
  return sub_243BA3C24((uint64_t)v4, (uint64_t)a2, type metadata accessor for StoredPhotoListProto);
}

uint64_t sub_243B9F11C()
{
  return swift_bridgeObjectRetain();
}

double StoredPhotoLayout.Rect.x.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double StoredPhotoLayout.Rect.y.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double StoredPhotoLayout.Rect.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double StoredPhotoLayout.Rect.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t StoredPhotoLayout.Rect.hash(into:)()
{
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  return sub_243BFE1D4();
}

uint64_t StoredPhotoLayout.Rect.hashValue.getter()
{
  sub_243BFE1A4();
  StoredPhotoLayout.Rect.hash(into:)();
  return sub_243BFE1E0();
}

uint64_t sub_243B9F1F8()
{
  sub_243BFE1A4();
  StoredPhotoLayout.Rect.hash(into:)();
  return sub_243BFE1E0();
}

uint64_t sub_243B9F244()
{
  sub_243BFE1A4();
  StoredPhotoLayout.Rect.hash(into:)();
  return sub_243BFE1E0();
}

uint64_t StoredPhotoLayout.ImageLocation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v10;

  v1 = sub_243BFD190();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v0, (uint64_t)v7, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return sub_243BFE1B0();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_243BFE1B0();
  sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_243BFD7A8();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t StoredPhotoLayout.ImageLocation.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = v0;
  v2 = sub_243BFD190();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BFE1A4();
  sub_243B6F8F0(v1, (uint64_t)v8, type metadata accessor for StoredPhotoLayout.ImageLocation);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_243BFE1B0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_243BFE1B0();
    sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_243BFD7A8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_243BFE1E0();
}

uint64_t sub_243B9F524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = sub_243BFD190();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v0, (uint64_t)v7, type metadata accessor for StoredPhotoLayout.ImageLocation);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return sub_243BFE1B0();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_243BFE1B0();
  sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_243BFD7A8();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_243B9F658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = v0;
  v2 = sub_243BFD190();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BFE1A4();
  sub_243B6F8F0(v1, (uint64_t)v8, type metadata accessor for StoredPhotoLayout.ImageLocation);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_243BFE1B0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_243BFE1B0();
    sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_243BFD7A8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_243BFE1E0();
}

uint64_t StoredPhotoLayout.baseImage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_243B6F8F0(v1, a1, type metadata accessor for StoredPhotoLayout.ImageLocation);
}

uint64_t StoredPhotoLayout.baseImage.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_243BA3C24(a1, v1, type metadata accessor for StoredPhotoLayout.ImageLocation);
}

uint64_t (*StoredPhotoLayout.baseImage.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoLayout.maskImage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for StoredPhotoLayout(0);
  return sub_243B50168(v1 + *(int *)(v3 + 20), a1, &qword_2572ED130);
}

uint64_t StoredPhotoLayout.maskImage.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for StoredPhotoLayout(0);
  return sub_243BA5C84(a1, v1 + *(int *)(v3 + 20), &qword_2572ED130);
}

uint64_t (*StoredPhotoLayout.maskImage.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhotoLayout(0);
  return nullsub_1;
}

__n128 StoredPhotoLayout.originalCrop.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 24);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a1 = *(_OWORD *)v3;
  a1[1] = v5;
  return result;
}

uint64_t StoredPhotoLayout.timePosition.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 28));
}

__n128 StoredPhotoLayout.timeRect.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 32);
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a1 = *(_OWORD *)v3;
  a1[1] = v5;
  return result;
}

double StoredPhotoLayout.backgroundZorder.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 36));
}

double StoredPhotoLayout.foregroundZorder.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 40));
}

double StoredPhotoLayout.timeElementZorder.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 44));
}

double StoredPhotoLayout.imageAOTBrightness.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 48));
}

uint64_t StoredPhotoLayout.userEdited.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayout(0) + 52));
}

uint64_t StoredPhotoLayout.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v25 = (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v26 = (uint64_t)&v23 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - v15;
  sub_243B6F8F0(v1, (uint64_t)&v23 - v15, v17);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v24(v16, 1, v5) == 1)
  {
    sub_243BFE1B0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, v5);
    sub_243BFE1B0();
    sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_243BFD7A8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v18 = type metadata accessor for StoredPhotoLayout(0);
  sub_243B50168(v1 + *(int *)(v18 + 20), (uint64_t)v4, &qword_2572ED130);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
  {
    sub_243BFE1BC();
  }
  else
  {
    v19 = (uint64_t)v4;
    v20 = v26;
    sub_243B6F934(v19, v26, type metadata accessor for StoredPhotoLayout.ImageLocation);
    sub_243BFE1BC();
    v21 = v25;
    sub_243B6F8F0(v20, v25, type metadata accessor for StoredPhotoLayout.ImageLocation);
    if (v24((char *)v21, 1, v5) == 1)
    {
      sub_243BFE1B0();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v21, v5);
      sub_243BFE1B0();
      sub_243B88508(&qword_2572EDDB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_243BFD7A8();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    sub_243B7FA20(v20, type metadata accessor for StoredPhotoLayout.ImageLocation);
  }
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1B0();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  sub_243BFE1D4();
  return sub_243BFE1BC();
}

uint64_t StoredPhotoLayout.hashValue.getter()
{
  return sub_243B9FDCC((void (*)(_BYTE *))StoredPhotoLayout.hash(into:));
}

uint64_t sub_243B9FDCC(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  sub_243BFE1A4();
  a1(v3);
  return sub_243BFE1E0();
}

uint64_t sub_243B9FE0C(uint64_t a1, uint64_t a2)
{
  return sub_243B9FE18(a1, a2, (void (*)(_BYTE *))StoredPhotoLayout.hash(into:));
}

uint64_t sub_243B9FE18(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  sub_243BFE1A4();
  a3(v5);
  return sub_243BFE1E0();
}

uint64_t sub_243B9FE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243B9FE68(a1, a2, a3, (void (*)(_BYTE *))StoredPhotoLayout.hash(into:));
}

uint64_t sub_243B9FE68(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_243BFE1A4();
  a4(v6);
  return sub_243BFE1E0();
}

PhotosFace::StoredPhotoLayout::Rect __swiftcall StoredPhotoLayout.Rect.init(cgRect:)(CGRect cgRect)
{
  CGFloat *v1;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat *v6;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  PhotosFace::StoredPhotoLayout::Rect result;

  height = cgRect.size.height;
  width = cgRect.size.width;
  y = cgRect.origin.y;
  x = cgRect.origin.x;
  v6 = v1;
  MinX = CGRectGetMinX(cgRect);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  MinY = CGRectGetMinY(v14);
  v15.origin.x = x;
  v15.origin.y = y;
  v15.size.width = width;
  v15.size.height = height;
  v9 = CGRectGetWidth(v15);
  v16.origin.x = x;
  v16.origin.y = y;
  v16.size.width = width;
  v16.size.height = height;
  v10 = CGRectGetHeight(v16);
  *v6 = MinX;
  v6[1] = MinY;
  v6[2] = v9;
  v6[3] = v10;
  result.height = v13;
  result.width = v12;
  result.y = v11;
  result.x = v10;
  return result;
}

uint64_t StoredPhotoLayout.ImageLocation.init(protobuf:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = sub_243BFD10C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 8) != 1 || !*(_QWORD *)a1)
    goto LABEL_7;
  if (*(_QWORD *)a1 == 1)
  {
    sub_243B7FA20(a1, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    v14 = sub_243BFD190();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  if (v16[1])
  {
    v20 = *v16;
    v21 = sub_243BFD190();
    v17 = *(_QWORD *)(v21 - 8);
    v22 = a2;
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v18(v10, 1, 1, v21);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCD7A0], v4);
    swift_bridgeObjectRetain();
    sub_243BFD178();
    sub_243B7FA20(a1, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    v18(v13, 0, 1, v21);
    return sub_243B6F934((uint64_t)v13, v22, type metadata accessor for StoredPhotoLayout.ImageLocation);
  }
  else
  {
LABEL_7:
    sub_243BA3C68();
    swift_allocError();
    *v19 = 0;
    swift_willThrow();
    return sub_243B7FA20(a1, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  }
}

__n128 StoredPhotoLayout.Rect.init(protobuf:version:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;

  v6 = *(__n128 *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  sub_243B7FA20(a1, type metadata accessor for StoredPhotoLayoutRectProto);
  result = v6;
  *a2 = v6;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_243BA01E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t result;
  uint64_t v51[2];
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v55 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  MEMORY[0x24BDAC7A8](v55);
  v54 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v51[0] = (uint64_t)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a2;
  sub_243B88508(&qword_2572EDDC8, v14, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  v15 = v53;
  sub_243BFD4CC();
  v51[1] = v15;
  StoredPhotoLayoutProto.baseImage.setter((uint64_t)v13);
  v52 = type metadata accessor for StoredPhotoLayout(0);
  v16 = *(int *)(v52 + 20);
  v53 = a2;
  sub_243B50168(a2 + v16, (uint64_t)v7, &qword_2572ED130);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v17 = sub_243B6F978((uint64_t)v7, &qword_2572ED130);
  }
  else
  {
    v18 = v51[0];
    v19 = sub_243B6F934((uint64_t)v7, v51[0], type metadata accessor for StoredPhotoLayout.ImageLocation);
    MEMORY[0x24BDAC7A8](v19);
    sub_243BFD4CC();
    StoredPhotoLayoutProto.maskImage.setter((uint64_t)v13);
    v17 = sub_243B7FA20(v18, type metadata accessor for StoredPhotoLayout.ImageLocation);
  }
  v20 = (int *)v52;
  v21 = v53;
  MEMORY[0x24BDAC7A8](v17);
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  v22 = (uint64_t)v54;
  sub_243BFD4CC();
  StoredPhotoLayoutProto.originalCrop.setter(v22);
  v23 = *(_QWORD *)(v21 + v20[7]);
  if (HIDWORD(v23))
  {
    result = sub_243BFDF64();
    __break(1u);
  }
  else
  {
    v24 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v25 = swift_retain();
      v26 = sub_243BC14A8(v25);
      swift_release();
      *(_QWORD *)(a1 + v24) = v26;
      swift_release();
    }
    v27 = (_DWORD *)(*(_QWORD *)(a1 + v24)
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
    v28 = swift_beginAccess();
    *v27 = v23;
    MEMORY[0x24BDAC7A8](v28);
    v29 = (uint64_t)v54;
    sub_243BFD4CC();
    StoredPhotoLayoutProto.timeRect.setter(v29);
    v30 = *(_QWORD *)(v21 + v20[9]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v31 = swift_retain();
      v32 = sub_243BC14A8(v31);
      swift_release();
      *(_QWORD *)(a1 + v24) = v32;
      swift_release();
    }
    v33 = (_QWORD *)(*(_QWORD *)(a1 + v24)
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
    swift_beginAccess();
    *v33 = v30;
    v34 = *(_QWORD *)(v21 + v20[10]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v35 = swift_retain();
      v36 = sub_243BC14A8(v35);
      swift_release();
      *(_QWORD *)(a1 + v24) = v36;
      swift_release();
    }
    v37 = (_QWORD *)(*(_QWORD *)(a1 + v24)
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
    swift_beginAccess();
    *v37 = v34;
    v38 = *(_QWORD *)(v21 + v20[11]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v39 = swift_retain();
      v40 = sub_243BC14A8(v39);
      swift_release();
      *(_QWORD *)(a1 + v24) = v40;
      swift_release();
    }
    v41 = (_QWORD *)(*(_QWORD *)(a1 + v24)
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
    swift_beginAccess();
    *v41 = v38;
    v42 = *(_QWORD *)(v21 + v20[12]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v43 = swift_retain();
      v44 = sub_243BC14A8(v43);
      swift_release();
      *(_QWORD *)(a1 + v24) = v44;
      swift_release();
    }
    v45 = (_QWORD *)(*(_QWORD *)(a1 + v24)
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
    swift_beginAccess();
    *v45 = v42;
    v46 = *(_BYTE *)(v21 + v20[13]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
      swift_allocObject();
      v47 = swift_retain();
      v48 = sub_243BC14A8(v47);
      swift_release();
      *(_QWORD *)(a1 + v24) = v48;
      swift_release();
    }
    v49 = (_BYTE *)(*(_QWORD *)(a1 + v24)
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
    result = swift_beginAccess();
    *v49 = v46;
  }
  return result;
}

uint64_t StoredPhotoLayout.ImageLocation.protobuf(version:)()
{
  type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  return sub_243BFD4CC();
}

uint64_t StoredPhotoLayout.Rect.protobuf(version:)()
{
  type metadata accessor for StoredPhotoLayoutRectProto(0);
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  return sub_243BFD4CC();
}

uint64_t sub_243BA09F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StoredPhotoLayout.init(protobuf:version:)(a1, a2);
}

uint64_t sub_243BA0A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BA0A38(a1, a2, a3, type metadata accessor for StoredPhotoLayoutProto, &qword_2572EDDA8, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BA0A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  a4(0);
  sub_243B88508(a5, a4, a6);
  return sub_243BFD4CC();
}

uint64_t sub_243BA0AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v17[2];

  v4 = sub_243BFD190();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(a2, (uint64_t)v10, v11);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if ((_DWORD)result == 1)
  {
    *(_QWORD *)a1 = 1;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    *(_QWORD *)a1 = 2;
    *(_BYTE *)(a1 + 8) = 1;
    v13 = sub_243BFD118();
    v15 = v14;
    v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
    swift_bridgeObjectRelease();
    *v16 = v13;
    v16[1] = v15;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_243BA0C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StoredPhotoLayout.ImageLocation.init(protobuf:version:)(a1, a2);
}

uint64_t sub_243BA0C34()
{
  type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  return sub_243BFD4CC();
}

double *sub_243BA0CB4(double *result, double a2, double a3, double a4, double a5)
{
  result[2] = a4;
  result[3] = a5;
  *result = a2;
  result[1] = a3;
  return result;
}

__n128 sub_243BA0CC0@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;

  v6 = *(__n128 *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  sub_243B7FA20(a1, type metadata accessor for StoredPhotoLayoutRectProto);
  result = v6;
  *a2 = v6;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  return result;
}

uint64_t sub_243BA0D18()
{
  type metadata accessor for StoredPhotoLayoutRectProto(0);
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  return sub_243BFD4CC();
}

uint64_t sub_243BA0DB0(uint64_t a1, char a2)
{
  return sub_243BA1BE8(a1, a2, &qword_2572EE0E0);
}

uint64_t sub_243BA0DBC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;

  v3 = v2;
  v5 = type metadata accessor for StoredPhotoLayout(0);
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
  v38 = a2;
  result = sub_243BFDFD0();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v34 = v2;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v20 >= v35)
          goto LABEL_34;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_34;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v35)
                  goto LABEL_34;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v38 & 1) != 0)
        sub_243B6F934(v25, (uint64_t)v7, type metadata accessor for StoredPhotoLayout);
      else
        sub_243B6F8F0(v25, (uint64_t)v7, type metadata accessor for StoredPhotoLayout);
      sub_243BFE1A4();
      sub_243BFE1B0();
      result = sub_243BFE1E0();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
      result = sub_243B6F934((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, type metadata accessor for StoredPhotoLayout);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_243BA10FC(uint64_t a1, int a2)
{
  return sub_243BA1124(a1, a2, &qword_2572ED118, &qword_2572EE0F8);
}

uint64_t sub_243BA1110(uint64_t a1, int a2)
{
  return sub_243BA1124(a1, a2, &qword_2572ED548, &qword_2572EE0F0);
}

uint64_t sub_243BA1124(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  __int128 v41[4];

  v6 = v4;
  v40 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v39 = a2;
  v12 = sub_243BFDFD0();
  v13 = (_QWORD *)v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 64);
    v36 = (_QWORD *)(v11 + 64);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v34 = v4;
    v35 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 64;
    result = swift_retain();
    v20 = 0;
    v37 = v11;
    while (1)
    {
      if (v17)
      {
        v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v23 = v22 | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        v25 = v36;
        if (v24 >= v35)
          goto LABEL_27;
        v26 = v36[v24];
        ++v20;
        if (!v26)
        {
          v20 = v24 + 1;
          if (v24 + 1 >= v35)
            goto LABEL_27;
          v26 = v36[v20];
          if (!v26)
          {
            v27 = v24 + 2;
            if (v27 >= v35)
            {
LABEL_27:
              swift_release();
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v6 = v34;
                goto LABEL_34;
              }
              v33 = 1 << *(_BYTE *)(v11 + 32);
              if (v33 >= 64)
                bzero(v25, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v25 = -1 << v33;
              v6 = v34;
              *(_QWORD *)(v11 + 16) = 0;
              break;
            }
            v26 = v36[v27];
            if (!v26)
            {
              while (1)
              {
                v20 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_36;
                if (v20 >= v35)
                  goto LABEL_27;
                v26 = v36[v20];
                ++v27;
                if (v26)
                  goto LABEL_21;
              }
            }
            v20 = v27;
          }
        }
LABEL_21:
        v17 = (v26 - 1) & v26;
        v23 = __clz(__rbit64(v26)) + (v20 << 6);
      }
      v28 = *(_QWORD *)(v38 + 72);
      v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
      if ((v39 & 1) != 0)
      {
        sub_243B6F9B4(v29, (uint64_t)v10, v40);
        v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      }
      else
      {
        sub_243B50168(v29, (uint64_t)v10, v40);
        v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
      }
      sub_243BFE1A4();
      sub_243BFD280();
      sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_243BFD7A8();
      v31 = type metadata accessor for StoredPhoto(0);
      sub_243BFD22C();
      sub_243B88508(&qword_2572ED908, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      sub_243BFD7A8();
      sub_243BFE1D4();
      sub_243BFE1B0();
      v32 = *(_QWORD *)&v10[*(int *)(v31 + 32)];
      swift_bridgeObjectRetain();
      sub_243BA2DE0(v41, v32);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)&v10[*(int *)(v31 + 36) + 8])
      {
        sub_243BFE1BC();
        swift_bridgeObjectRetain();
        sub_243BFD850();
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_243BFE1BC();
      }
      v11 = v37;
      sub_243BFE1E0();
      v21 = sub_243BFDDD8();
      *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = sub_243B6F9B4((uint64_t)v10, v13[6] + v28 * v21, v40);
      *(_QWORD *)(v13[7] + 8 * v21) = v30;
      ++v13[2];
    }
  }
  result = swift_release();
LABEL_34:
  *v6 = v13;
  return result;
}

uint64_t sub_243BA1534(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_243BFD280();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE0E8);
  v42 = a2;
  v10 = sub_243BFDFD0();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_243B88508(&qword_2572ED530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_243BFD79C();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_243BA18C8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA18);
  v36 = a2;
  v6 = sub_243BFDFD0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_243BFE1A4();
    sub_243BFD850();
    result = sub_243BFE1E0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_243BA1BDC(uint64_t a1, char a2)
{
  return sub_243BA1BE8(a1, a2, &qword_2572ED108);
}

uint64_t sub_243BA1BE8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = sub_243BFDFD0();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_243BFE198();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_243BA1E98(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA10);
  v38 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA08);
  v39 = a2;
  result = sub_243BFDFD0();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v35 = v3;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v37 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v36 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v37;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v36)
                  goto LABEL_34;
                v21 = v37[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(unsigned int *)(*(_QWORD *)(v8 + 48) + 4 * v19);
      v24 = *(_QWORD *)(v38 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v39 & 1) != 0)
        sub_243B6F9B4(v25, (uint64_t)v7, &qword_2572EBA10);
      else
        sub_243B50168(v25, (uint64_t)v7, &qword_2572EBA10);
      result = MEMORY[0x24950253C](*(_QWORD *)(v10 + 40), v23, 4);
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v17) = v23;
      result = sub_243B6F9B4((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, &qword_2572EBA10);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_243BA21D0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE480);
  result = sub_243BFDFD0();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v29 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v12)
          goto LABEL_33;
        v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_33;
          v21 = v29[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v29 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v21 = v29[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
      v30 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_243BFE1A4();
      sub_243BFE1B0();
      result = sub_243BFE1E0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v27;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v17) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void sub_243BA24B0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  void *v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  uint64_t v60;

  v7 = type metadata accessor for StoredPhotoLayout(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA28);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    goto LABEL_22;
  v53 = a1;
  v54 = v8;
  v17 = a2;
  v52 = v3;
  v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  v51 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v56 = *(_QWORD *)(v13 + 72);
  sub_243B50168(a1 + v51, (uint64_t)v15, &qword_2572EBA28);
  v60 = *v15;
  v19 = v60;
  v55 = v18;
  sub_243B6F934(v18, (uint64_t)v10, type metadata accessor for StoredPhotoLayout);
  v20 = (_QWORD *)*a3;
  v22 = sub_243B7CE78(v19);
  v23 = v20[2];
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v26 = v21;
  if (v20[3] >= v25)
  {
    if ((v17 & 1) != 0)
    {
      if ((v21 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      sub_243BF9C14();
      if ((v26 & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_10;
  }
  sub_243BA0DBC(v25, v17 & 1);
  v27 = sub_243B7CE78(v19);
  if ((v26 & 1) == (v28 & 1))
  {
    v22 = v27;
    if ((v26 & 1) == 0)
    {
LABEL_13:
      v31 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v22 >> 6) + 64) |= 1 << v22;
      *(_QWORD *)(v31[6] + 8 * v22) = v19;
      v32 = v31[7];
      v54 = *(_QWORD *)(v54 + 72);
      sub_243B6F934((uint64_t)v10, v32 + v54 * v22, type metadata accessor for StoredPhotoLayout);
      v33 = v31[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v31[2] = v35;
      v36 = v16 - 1;
      if (v16 != 1)
      {
        v37 = v53 + v56 + v51;
        do
        {
          sub_243B50168(v37, (uint64_t)v15, &qword_2572EBA28);
          v60 = *v15;
          v38 = v60;
          sub_243B6F934(v55, (uint64_t)v10, type metadata accessor for StoredPhotoLayout);
          v39 = (_QWORD *)*a3;
          v40 = sub_243B7CE78(v38);
          v42 = v39[2];
          v43 = (v41 & 1) == 0;
          v34 = __OFADD__(v42, v43);
          v44 = v42 + v43;
          if (v34)
            goto LABEL_23;
          v45 = v41;
          if (v39[3] < v44)
          {
            sub_243BA0DBC(v44, 1);
            v40 = sub_243B7CE78(v38);
            if ((v45 & 1) != (v46 & 1))
              goto LABEL_25;
          }
          if ((v45 & 1) != 0)
            goto LABEL_10;
          v47 = (_QWORD *)*a3;
          *(_QWORD *)(*a3 + 8 * (v40 >> 6) + 64) |= 1 << v40;
          *(_QWORD *)(v47[6] + 8 * v40) = v38;
          sub_243B6F934((uint64_t)v10, v47[7] + v54 * v40, type metadata accessor for StoredPhotoLayout);
          v48 = v47[2];
          v34 = __OFADD__(v48, 1);
          v49 = v48 + 1;
          if (v34)
            goto LABEL_24;
          v47[2] = v49;
          v37 += v56;
        }
        while (--v36);
      }
LABEL_22:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_10:
    v29 = (void *)swift_allocError();
    swift_willThrow();
    v59 = v29;
    v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhotoLayout);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for PFCTimePosition(0);
  sub_243BFE138();
  __break(1u);
LABEL_26:
  v57 = 0;
  v58 = 0xE000000000000000;
  sub_243BFDE44();
  sub_243BFD85C();
  type metadata accessor for PFCTimePosition(0);
  sub_243BFDF40();
  sub_243BFD85C();
  sub_243BFDF70();
  __break(1u);
}

uint64_t sub_243BA291C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_243B7CFDC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_243BF9E18();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_243BA18C8(v15, a4 & 1);
  v21 = sub_243B7CFDC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243BA2A78(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_243B7D040(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA10);
        return sub_243BA5C84(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, &qword_2572EBA10);
      }
      return sub_243BA2CE0(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_243BFA16C();
      goto LABEL_7;
    }
    sub_243BA1E98(v13, a3 & 1);
    v20 = sub_243B7D040(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_243BA2CE0(v10, a2, a1, v16);
    }
  }
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243BA2BA4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_243B7D074(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_243BFA3A0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_release();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_243BA21D0(result, a4 & 1);
  result = sub_243B7D074(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_243BFE138();
  __break(1u);
  return result;
}

uint64_t sub_243BA2CE0(unint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  v7 = a4[7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBA10);
  result = sub_243B6F9B4(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, &qword_2572EBA10);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

void sub_243BA2D78(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_243BFDFB8();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x249502224);
}

uint64_t sub_243BA2DE0(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v4 = type metadata accessor for StoredPhotoLayout(0);
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED518);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (int64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - v11;
  v13 = *(_QWORD *)(a2 + 64);
  v34 = a2 + 64;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v35 = (unint64_t)(v14 + 63) >> 6;
  v33 = v35 - 1;
  v37 = a2;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  v38 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_4:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v20 = v19 | (v38 << 6);
LABEL_5:
  v21 = *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * v20);
  v22 = *(_QWORD *)(v37 + 56) + *(_QWORD *)(v36 + 72) * v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
  sub_243B6F8F0(v22, (uint64_t)v10 + *(int *)(v23 + 48), type metadata accessor for StoredPhotoLayout);
  *v10 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 0, 1, v23);
  while (1)
  {
    sub_243B6F9B4((uint64_t)v10, (uint64_t)v12, &qword_2572ED518);
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v12, 1, v29) == 1)
    {
      swift_release();
      return sub_243BFE1B0();
    }
    sub_243B6F934((uint64_t)&v12[*(int *)(v29 + 48)], (uint64_t)v6, type metadata accessor for StoredPhotoLayout);
    v30 = *((_QWORD *)a1 + 8);
    v31 = a1[1];
    v39 = *a1;
    v40 = v31;
    v32 = a1[3];
    v41 = a1[2];
    v42 = v32;
    v43 = v30;
    sub_243BFE1B0();
    StoredPhotoLayout.hash(into:)();
    sub_243B7FA20((uint64_t)v6, type metadata accessor for StoredPhotoLayout);
    result = sub_243BFE1E0();
    v18 ^= result;
    if (v16)
      goto LABEL_4;
LABEL_6:
    v24 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 < v35)
    {
      v25 = *(_QWORD *)(v34 + 8 * v24);
      if (v25)
        goto LABEL_9;
      v26 = v38 + 2;
      ++v38;
      if (v24 + 1 < v35)
      {
        v25 = *(_QWORD *)(v34 + 8 * v26);
        if (v25)
        {
          ++v24;
LABEL_9:
          v16 = (v25 - 1) & v25;
          v20 = __clz(__rbit64(v25)) + (v24 << 6);
          v38 = v24;
          goto LABEL_5;
        }
        v27 = v24 + 2;
        v38 = v24 + 1;
        if (v24 + 2 < v35)
          break;
      }
    }
LABEL_21:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED520);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
    v16 = 0;
  }
  v25 = *(_QWORD *)(v34 + 8 * v27);
  if (v25)
  {
    v24 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v24 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v24 >= v35)
    {
      v38 = v33;
      goto LABEL_21;
    }
    v25 = *(_QWORD *)(v34 + 8 * v24);
    ++v27;
    if (v25)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_243BA3148(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_243BA31E8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_243BA32CC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _s10PhotosFace17StoredPhotoLayoutV13ImageLocationO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_243BFD190();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE0D8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_243B6F8F0(a1, (uint64_t)v14, type metadata accessor for StoredPhotoLayout.ImageLocation);
  sub_243B6F8F0(a2, v15, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1, v4) != 1)
  {
    sub_243B6F8F0((uint64_t)v14, (uint64_t)v10, type metadata accessor for StoredPhotoLayout.ImageLocation);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      v17 = MEMORY[0x249501504](v10, v7);
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v10, v4);
      sub_243B7FA20((uint64_t)v14, type metadata accessor for StoredPhotoLayout.ImageLocation);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v16(v15, 1, v4) != 1)
  {
LABEL_6:
    sub_243B6F978((uint64_t)v14, &qword_2572EE0D8);
    v17 = 0;
    return v17 & 1;
  }
  sub_243B7FA20((uint64_t)v14, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v17 = 1;
  return v17 & 1;
}

uint64_t _s10PhotosFace17StoredPhotoLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE0D0);
  MEMORY[0x24BDAC7A8](v48);
  v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v46 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v49 = (uint64_t)&v44 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v50 = (uint64_t)&v44 - v10;
  v11 = sub_243BFD190();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v15 = *(_QWORD *)(v47 - 8);
  v16 = MEMORY[0x24BDAC7A8](v47);
  v45 = (uint64_t)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v44 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE0D8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  v52 = a1;
  sub_243B6F8F0(a1, (uint64_t)v23, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v53 = a2;
  sub_243B6F8F0(a2, v24, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v25((uint64_t)v23, 1, v11) == 1)
  {
    if (v25(v24, 1, v11) == 1)
      goto LABEL_8;
LABEL_6:
    v26 = &qword_2572EE0D8;
    v27 = (uint64_t)v23;
LABEL_14:
    sub_243B6F978(v27, v26);
    goto LABEL_15;
  }
  sub_243B6F8F0((uint64_t)v23, (uint64_t)v19, type metadata accessor for StoredPhotoLayout.ImageLocation);
  if (v25(v24, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v24, v11);
  v28 = MEMORY[0x249501504](v19, v14);
  v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v14, v11);
  v29(v19, v11);
  if ((v28 & 1) == 0)
  {
    sub_243B7FA20((uint64_t)v23, type metadata accessor for StoredPhotoLayout.ImageLocation);
    goto LABEL_15;
  }
LABEL_8:
  sub_243B7FA20((uint64_t)v23, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v30 = (int *)type metadata accessor for StoredPhotoLayout(0);
  v31 = v52;
  v32 = v50;
  sub_243B50168(v52 + v30[5], v50, &qword_2572ED130);
  v33 = v53;
  v34 = v49;
  sub_243B50168(v53 + v30[5], v49, &qword_2572ED130);
  v35 = v51;
  v36 = v51 + *(int *)(v48 + 48);
  sub_243B50168(v32, v51, &qword_2572ED130);
  sub_243B50168(v34, v36, &qword_2572ED130);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v38 = v47;
  if (v37(v35, 1, v47) != 1)
  {
    v39 = v46;
    sub_243B50168(v35, v46, &qword_2572ED130);
    if (v37(v36, 1, v38) != 1)
    {
      v42 = v45;
      sub_243B6F934(v36, v45, type metadata accessor for StoredPhotoLayout.ImageLocation);
      v43 = _s10PhotosFace17StoredPhotoLayoutV13ImageLocationO2eeoiySbAE_AEtFZ_0(v39, v42);
      sub_243B7FA20(v42, type metadata accessor for StoredPhotoLayout.ImageLocation);
      sub_243B6F978(v34, &qword_2572ED130);
      sub_243B6F978(v32, &qword_2572ED130);
      sub_243B7FA20(v39, type metadata accessor for StoredPhotoLayout.ImageLocation);
      sub_243B6F978(v35, &qword_2572ED130);
      if ((v43 & 1) == 0)
        goto LABEL_15;
      goto LABEL_19;
    }
    sub_243B6F978(v34, &qword_2572ED130);
    sub_243B6F978(v32, &qword_2572ED130);
    sub_243B7FA20(v39, type metadata accessor for StoredPhotoLayout.ImageLocation);
    goto LABEL_13;
  }
  sub_243B6F978(v34, &qword_2572ED130);
  sub_243B6F978(v32, &qword_2572ED130);
  if (v37(v36, 1, v38) != 1)
  {
LABEL_13:
    v26 = &qword_2572EE0D0;
    v27 = v35;
    goto LABEL_14;
  }
  sub_243B6F978(v35, &qword_2572ED130);
LABEL_19:
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v31 + v30[6]), *(float64x2_t *)(v33 + v30[6])), (int32x4_t)vceqq_f64(*(float64x2_t *)(v31 + v30[6] + 16), *(float64x2_t *)(v33 + v30[6] + 16)))), 0xFuLL))) & 1) != 0&& *(_QWORD *)(v31 + v30[7]) == *(_QWORD *)(v33 + v30[7])&& (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(v31 + v30[8]), *(float64x2_t *)(v33 + v30[8])), (int32x4_t)vceqq_f64(
                                                   *(float64x2_t *)(v31 + v30[8] + 16),
                                                   *(float64x2_t *)(v33 + v30[8] + 16)))),
                                  0xFuLL))) & 1) != 0
    && *(double *)(v31 + v30[9]) == *(double *)(v33 + v30[9])
    && *(double *)(v31 + v30[10]) == *(double *)(v33 + v30[10])
    && *(double *)(v31 + v30[11]) == *(double *)(v33 + v30[11])
    && *(double *)(v31 + v30[12]) == *(double *)(v33 + v30[12]))
  {
    v40 = *(_BYTE *)(v31 + v30[13]) ^ *(_BYTE *)(v33 + v30[13]) ^ 1;
    return v40 & 1;
  }
LABEL_15:
  v40 = 0;
  return v40 & 1;
}

BOOL _s10PhotosFace17StoredPhotoLayoutV4RectV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t type metadata accessor for StoredPhotoError(uint64_t a1)
{
  return sub_243BA3B6C(a1, (uint64_t *)&unk_2572EE0C0);
}

uint64_t sub_243BA3B6C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_243BA3BA0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_243BA3BD8@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_243B9DAD4(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_243BA3BF4(uint64_t a1)
{
  uint64_t v1;

  return sub_243BA01E0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_243BA3C10(_QWORD *a1)
{
  return sub_243BA5CC8(a1);
}

uint64_t sub_243BA3C24(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_243BA3C68()
{
  unint64_t result;

  result = qword_2572EDDC0;
  if (!qword_2572EDDC0)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for SerializationError, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&qword_2572EDDC0);
  }
  return result;
}

uint64_t sub_243BA3CAC(uint64_t a1)
{
  uint64_t v1;

  return sub_243BA0AD8(a1, *(_QWORD *)(v1 + 16));
}

__n128 sub_243BA3CC4(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_243BA3CD0()
{
  return sub_243B88508(&qword_2572EDDD8, type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
}

uint64_t sub_243BA3CFC()
{
  return sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BA3D28()
{
  return sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

uint64_t sub_243BA3D54(uint64_t a1)
{
  uint64_t result;

  result = sub_243B88508(&qword_2572EDE40, type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_243BA3D90()
{
  return sub_243B88508(&qword_2572EDE40, type metadata accessor for StoredPhoto, (uint64_t)&protocol conformance descriptor for StoredPhoto);
}

unint64_t sub_243BA3DC0()
{
  unint64_t result;

  result = qword_2572EDE70;
  if (!qword_2572EDE70)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for StoredPhotoLayout.Rect, &type metadata for StoredPhotoLayout.Rect);
    atomic_store(result, (unint64_t *)&qword_2572EDE70);
  }
  return result;
}

uint64_t sub_243BA3E04()
{
  return sub_243B88508(&qword_2572EDE78, type metadata accessor for StoredPhotoLayout.ImageLocation, (uint64_t)&protocol conformance descriptor for StoredPhotoLayout.ImageLocation);
}

uint64_t sub_243BA3E30()
{
  return sub_243B88508(&qword_2572EDE80, type metadata accessor for StoredPhotoLayout, (uint64_t)&protocol conformance descriptor for StoredPhotoLayout);
}

uint64_t sub_243BA3E5C()
{
  return sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BA3E88()
{
  return sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BA3EB4()
{
  return sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredPhoto(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD280();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_243BFD22C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    v13 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for StoredPhoto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StoredPhoto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoredPhoto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[9];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for StoredPhoto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for StoredPhoto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_243BFD280();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD22C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhoto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA4370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_243BFD280();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_243BFD22C();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for StoredPhoto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA4424(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_243BFD280();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_243BFD22C();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_243BA44C8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_243BFD280();
  if (v1 <= 0x3F)
  {
    result = sub_243BFD22C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredPhotoLayout(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_243BFD190();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      if (v9((uint64_t *)v14, 1, v7))
      {
        memcpy(v13, v14, *(_QWORD *)(v16 + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = a3[6];
    v19 = a3[7];
    v20 = (_OWORD *)((char *)a1 + v18);
    v21 = (_OWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *(uint64_t *)((char *)a1 + v19) = *(uint64_t *)((char *)a2 + v19);
    v23 = a3[8];
    v24 = a3[9];
    v25 = (_OWORD *)((char *)a1 + v23);
    v26 = (_OWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    v28 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)a1 + v28) = *(uint64_t *)((char *)a2 + v28);
    v29 = a3[13];
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  }
  return a1;
}

uint64_t destroy for StoredPhotoLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_243BFD190();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

char *initializeWithCopy for StoredPhotoLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    if (v8(v12, 1, v6))
    {
      memcpy(v11, v12, *(_QWORD *)(v14 + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[6];
  v17 = a3[7];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v21 = a3[8];
  v22 = a3[9];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v26 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  v27 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  a1[v27] = a2[v27];
  return a1;
}

char *assignWithCopy for StoredPhotoLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v30 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v31 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16(v14, 1, v15);
  if (!v17)
  {
    if (!v18)
    {
      v21 = v8(v13, 1, v6);
      v22 = v8(v14, 1, v6);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v13, v14, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v13, 0, 1, v6);
          goto LABEL_21;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v13, v14, v6);
          goto LABEL_21;
        }
        (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v6);
      }
      v20 = v31;
      goto LABEL_14;
    }
    sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayout.ImageLocation);
LABEL_13:
    v20 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130) - 8);
LABEL_14:
    memcpy(v13, v14, *(_QWORD *)(v20 + 64));
    goto LABEL_21;
  }
  if (v18)
    goto LABEL_13;
  if (v8(v14, 1, v6))
  {
    v19 = v31;
    memcpy(v13, v14, *(_QWORD *)(v31 + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v13, v14, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v13, 0, 1, v6);
    v19 = v31;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v15);
LABEL_21:
  v23 = a3[6];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  *((_QWORD *)v24 + 3) = *((_QWORD *)v25 + 3);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v26 = a3[8];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
  *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

char *initializeWithTake for StoredPhotoLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    if (v8(v12, 1, v6))
    {
      memcpy(v11, v12, *(_QWORD *)(v14 + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[6];
  v17 = a3[7];
  v18 = &a1[v16];
  v19 = &a2[v16];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v21 = a3[8];
  v22 = a3[9];
  v23 = &a1[v21];
  v24 = &a2[v21];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v26 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  v27 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  a1[v27] = a2[v27];
  return a1;
}

char *assignWithTake for StoredPhotoLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v36 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v37 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16(v14, 1, v15);
  if (!v17)
  {
    if (!v18)
    {
      v21 = v8(v13, 1, v6);
      v22 = v8(v14, 1, v6);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v13, v14, v6);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v13, 0, 1, v6);
          goto LABEL_21;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v13, v14, v6);
          goto LABEL_21;
        }
        (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v6);
      }
      v20 = v37;
      goto LABEL_14;
    }
    sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayout.ImageLocation);
LABEL_13:
    v20 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130) - 8);
LABEL_14:
    memcpy(v13, v14, *(_QWORD *)(v20 + 64));
    goto LABEL_21;
  }
  if (v18)
    goto LABEL_13;
  if (v8(v14, 1, v6))
  {
    v19 = v37;
    memcpy(v13, v14, *(_QWORD *)(v37 + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v13, v14, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v13, 0, 1, v6);
    v19 = v37;
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v15);
LABEL_21:
  v23 = a3[6];
  v24 = a3[7];
  v25 = &a1[v23];
  v26 = &a2[v23];
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v28 = a3[8];
  v29 = a3[9];
  v30 = *(_OWORD *)&a2[v28];
  v31 = *(_OWORD *)&a2[v28 + 16];
  v32 = &a1[v28];
  *(_OWORD *)v32 = v30;
  *((_OWORD *)v32 + 1) = v31;
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  v33 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v33] = *(_QWORD *)&a2[v33];
  v34 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  a1[v34] = a2[v34];
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA525C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 52));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA5324(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 52)) = a2 + 1;
  return result;
}

void sub_243BA53CC()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for StoredPhotoLayout.ImageLocation(319);
  if (v0 <= 0x3F)
  {
    sub_243BA547C();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_243BA547C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2572EDF80)
  {
    type metadata accessor for StoredPhotoLayout.ImageLocation(255);
    v0 = sub_243BFDD0C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2572EDF80);
  }
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayout.Rect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayout.Rect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StoredPhotoLayout.Rect()
{
  return &type metadata for StoredPhotoLayout.Rect;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredPhotoLayout.ImageLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_243BA563C(a1, a2, a3, 1);
}

uint64_t destroy for StoredPhotoLayout.ImageLocation(uint64_t a1, uint64_t a2)
{
  return sub_243BA5710(a1, a2, 1);
}

void *initializeWithCopy for StoredPhotoLayout.ImageLocation(void *a1, const void *a2, uint64_t a3)
{
  return sub_243BA5784(a1, a2, a3, 1);
}

void *assignWithCopy for StoredPhotoLayout.ImageLocation(void *a1, void *a2, uint64_t a3)
{
  return sub_243BA5834(a1, a2, a3, 1);
}

void *initializeWithTake for StoredPhotoLayout.ImageLocation(void *a1, const void *a2, uint64_t a3)
{
  return sub_243BA5930(a1, a2, a3, 1);
}

void *assignWithTake for StoredPhotoLayout.ImageLocation(void *a1, void *a2, uint64_t a3)
{
  return sub_243BA59E0(a1, a2, a3, 1);
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayout.ImageLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA5574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_243BFD190();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayout.ImageLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA55CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_243BFD190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_243BA561C(uint64_t a1, uint64_t a2)
{
  return sub_243BA5B94(a1, a2, 1);
}

uint64_t sub_243BA5624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BA5BD8(a1, a2, a3, 1);
}

uint64_t sub_243BA562C()
{
  return sub_243BA5C2C();
}

uint64_t *sub_243BA5634(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_243BA563C(a1, a2, a3, 2);
}

uint64_t *sub_243BA563C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if ((v7 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else
  {
    v9 = sub_243BFD190();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, a4, v9))
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, a4, v9);
    }
  }
  return a1;
}

uint64_t sub_243BA5708(uint64_t a1, uint64_t a2)
{
  return sub_243BA5710(a1, a2, 2);
}

uint64_t sub_243BA5710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, a3, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return result;
}

void *sub_243BA577C(void *a1, const void *a2, uint64_t a3)
{
  return sub_243BA5784(a1, a2, a3, 2);
}

void *sub_243BA5784(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_243BFD190();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, a4, v8))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, a4, v8);
  }
  return a1;
}

void *sub_243BA582C(void *a1, void *a2, uint64_t a3)
{
  return sub_243BA5834(a1, a2, a3, 2);
}

void *sub_243BA5834(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;

  v8 = sub_243BFD190();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(a1, a4, v8);
  v12 = v10(a2, a4, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(a1, a2, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(a1, a2, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, a4, v8);
  return a1;
}

void *sub_243BA5928(void *a1, const void *a2, uint64_t a3)
{
  return sub_243BA5930(a1, a2, a3, 2);
}

void *sub_243BA5930(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_243BFD190();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, a4, v8))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, a4, v8);
  }
  return a1;
}

void *sub_243BA59D8(void *a1, void *a2, uint64_t a3)
{
  return sub_243BA59E0(a1, a2, a3, 2);
}

void *sub_243BA59E0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;

  v8 = sub_243BFD190();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(a1, a4, v8);
  v12 = v10(a2, a4, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(a1, a2, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(a1, a2, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, a4, v8);
  return a1;
}

uint64_t sub_243BA5AD4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA5AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_243BFD190();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_243BA5B2C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BA5B38(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_243BFD190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_243BA5B8C(uint64_t a1, uint64_t a2)
{
  return sub_243BA5B94(a1, a2, 2);
}

uint64_t sub_243BA5B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_243BFD190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, a3, v5);
}

uint64_t sub_243BA5BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BA5BD8(a1, a2, a3, 2);
}

uint64_t sub_243BA5BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_243BFD190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a4, v7);
}

uint64_t sub_243BA5C24()
{
  return sub_243BA5C2C();
}

uint64_t sub_243BA5C2C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD190();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_243BA5C84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_243BA5CC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = **(_QWORD **)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_243BA5D14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_243BA5D20(uint64_t a1)
{
  return sub_243BA3CAC(a1);
}

uint64_t sub_243BA5D34(uint64_t a1)
{
  return sub_243BA3BF4(a1);
}

uint64_t sub_243BA5D48(uint64_t a1)
{
  return sub_243B884EC(a1);
}

double sub_243BA5D5C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_243BA3CC4(a1).n128_u64[0];
  return result;
}

uint64_t StoredPhotoLayout.baseFilename(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  _QWORD v11[2];

  v1 = sub_243BFD190();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v0, (uint64_t)v7, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    type metadata accessor for StoredPhotoLayout(0);
    v11[0] = 0x5F65736162;
    v11[1] = 0xE500000000000000;
    sub_243BFDCC4();
    sub_243BFD85C();
    swift_bridgeObjectRelease();
    sub_243BFD85C();
    sub_243BFD280();
    sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    sub_243BFE0A8();
    sub_243BFD85C();
    swift_bridgeObjectRelease();
    sub_243BFD85C();
    return v11[0];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    v9 = sub_243BFD124();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v9;
}

uint64_t StoredPhotoLayout.maskFilename(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  unint64_t v22;

  v20[1] = a1;
  v2 = sub_243BFD190();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v20 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for StoredPhotoLayout(0);
  sub_243BA7D4C(v1 + *(int *)(v16 + 20), (uint64_t)v15);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6);
  v18 = 0;
  if (v17 != 1)
  {
    sub_243B6F934((uint64_t)v15, (uint64_t)v12, type metadata accessor for StoredPhotoLayout.ImageLocation);
    sub_243B6F8F0((uint64_t)v12, (uint64_t)v9, type metadata accessor for StoredPhotoLayout.ImageLocation);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
    {
      v21 = 0x5F6B73616DLL;
      v22 = 0xE500000000000000;
      sub_243BFDCC4();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      sub_243BFD280();
      sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      sub_243BFE0A8();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      v18 = v21;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
      v18 = sub_243BFD124();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    sub_243B7FA20((uint64_t)v12, type metadata accessor for StoredPhotoLayout.ImageLocation);
  }
  return v18;
}

uint64_t StoredPhoto.writeToDisk(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(int *)(type metadata accessor for StoredPhoto(0) + 32);
  v5 = *(_QWORD *)(v1 + v4);
  v9 = v1;
  v10 = a1;
  swift_bridgeObjectRetain();
  v6 = sub_243BA8178((void (*)(char *))sub_243BA7E7C, (uint64_t)&v8, v5);
  result = swift_bridgeObjectRelease();
  if (!v2)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + v4) = v6;
  }
  return result;
}

uint64_t sub_243BA6230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(_QWORD);
  void (*v38)(char *);
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v54)(_QWORD, _QWORD, _QWORD);
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  void (*v90)(char *, uint64_t);
  void (*v91)(char *);
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void (*v103)(_QWORD, _QWORD, _QWORD);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v107 = a3;
  v108 = a1;
  v114 = a2;
  v95 = a4;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v4);
  v94 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v8);
  v88 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v101 = (uint64_t *)((char *)&v83 - v11);
  v106 = sub_243BFD10C();
  v102 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8](v106);
  v105 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v98 = *(_QWORD *)(v13 - 8);
  v99 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_243BFD280();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v93 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v83 - v20;
  v22 = sub_243BFD190();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v87 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v86 = (char *)&v83 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v109 = (char *)&v83 - v28;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v83 - v30;
  MEMORY[0x24BDAC7A8](v32);
  v110 = (char *)&v83 - v33;
  v34 = type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v108, (uint64_t)v36, v37);
  v38 = *(void (**)(char *))(v17 + 16);
  v108 = v16;
  v91 = v38;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v21, v114, v16);
  sub_243B6F8F0((uint64_t)v36, (uint64_t)v15, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v40 = v39(v15, 1, v22);
  v104 = v23;
  v111 = v36;
  v92 = v39;
  v96 = v34;
  if (v40 == 1)
  {
    static SystemDirectory.baseImageURL(timePosition:uuid:)(*(_QWORD *)&v36[*(int *)(v34 + 28)], (uint64_t)v21, (uint64_t)v31);
    v41 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  }
  else
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v41(v31, v15, v22);
  }
  v42 = (uint64_t)v110;
  v43 = v108;
  v100 = v22;
  v89 = v41;
  v41(v110, v31, v22);
  v90 = *(void (**)(char *, uint64_t))(v17 + 8);
  v90(v21, v43);
  v112 = sub_243BFD124();
  v113 = v44;
  v45 = *MEMORY[0x24BDCD7A0];
  v46 = v102;
  v47 = *(void (**)(char *, _QWORD, uint64_t))(v102 + 104);
  v49 = v105;
  v48 = v106;
  v47(v105, *MEMORY[0x24BDCD7A0], v106);
  v50 = sub_243B4DDA4();
  v51 = (uint64_t)v109;
  sub_243BFD184();
  v52 = *(void (**)(char *, uint64_t))(v46 + 8);
  v52(v49, v48);
  swift_bridgeObjectRelease();
  v53 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v101;
  sub_243B6F8F0(v114, (uint64_t)v101, type metadata accessor for StoredPhoto);
  v54 = v103;
  sub_243BA6AF8(v42, v51);
  if (v54)
  {
    sub_243B7FA20((uint64_t)v53, type metadata accessor for StoredPhoto);
    v55 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v56 = v100;
    v55(v51, v100);
    v55(v42, v56);
    v57 = (uint64_t)v111;
  }
  else
  {
    v84 = v52;
    v85 = v50;
    LODWORD(v102) = v45;
    v103 = (void (*)(_QWORD, _QWORD, _QWORD))v47;
    sub_243B7FA20((uint64_t)v53, type metadata accessor for StoredPhoto);
    v58 = (uint64_t)v111;
    sub_243B7FA20((uint64_t)v111, type metadata accessor for StoredPhotoLayout.ImageLocation);
    v59 = v104;
    v60 = v100;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v58, v51, v100);
    v61 = *(_QWORD **)(v59 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v58, 0, 1, v60);
    v62 = v97;
    v63 = v58 + *(int *)(v96 + 20);
    sub_243BA7D4C(v63, v97);
    v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v62, 1, v99);
    sub_243B6F978(v62, &qword_2572ED130);
    v65 = v64 == 1;
    v66 = v60;
    if (v65)
    {
      v67 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v67(v51, v60);
      v67((uint64_t)v110, v60);
    }
    else
    {
      v101 = v61;
      v68 = (uint64_t)v93;
      v69 = v114;
      v70 = v108;
      v91(v93);
      v71 = v94;
      StoredPhotoLayout.maskURL(for:)(v68, v94);
      v90((char *)v68, v70);
      v72 = v92(v71, 1, v66);
      if (v72 == 1)
      {
        v73 = *(void (**)(char *, uint64_t))(v59 + 8);
        v73(v109, v66);
        v73(v110, v66);
        sub_243B6F978((uint64_t)v71, &qword_2543CDE68);
      }
      else
      {
        v74 = (uint64_t)v86;
        v89(v86, v71, v66);
        v112 = sub_243BFD124();
        v113 = v75;
        v76 = v105;
        v77 = v106;
        v103(v105, v102, v106);
        v78 = (uint64_t)v87;
        sub_243BFD184();
        v84(v76, v77);
        swift_bridgeObjectRelease();
        v79 = v88;
        sub_243B6F8F0(v69, v88, type metadata accessor for StoredPhoto);
        sub_243BA6AF8(v74, v78);
        sub_243B7FA20(v79, type metadata accessor for StoredPhoto);
        v80 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
        v80(v74, v66);
        v80((uint64_t)v109, v66);
        v80((uint64_t)v110, v66);
        sub_243B6F978(v63, &qword_2572ED130);
        v89((char *)v63, (char *)v78, v66);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v101)(v63, 0, 1, v66);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v63, 0, 1, v99);
      }
    }
    v81 = (uint64_t)v111;
    sub_243B6F8F0((uint64_t)v111, v95, type metadata accessor for StoredPhotoLayout);
    v57 = v81;
  }
  return sub_243B7FA20(v57, type metadata accessor for StoredPhotoLayout);
}

uint64_t StoredPhotoLayout.baseURL(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0(v3, (uint64_t)v8, v9);
  v10 = sub_243BFD190();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v8, v10);
  v12 = type metadata accessor for StoredPhotoLayout(0);
  return static SystemDirectory.baseImageURL(timePosition:uuid:)(*(_QWORD *)(v3 + *(int *)(v12 + 28)), a1, a2);
}

uint64_t sub_243BA6AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void (*v28)(char *, uint64_t);
  id v29;
  void *v30;
  void *v31;
  unsigned int v32;
  id v33;
  _QWORD v34[2];
  os_log_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41[2];

  v41[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v34 - v11;
  result = MEMORY[0x249501504](a1, a2, v10);
  if ((result & 1) == 0)
  {
    if (qword_2543CD828 != -1)
      swift_once();
    v14 = sub_243BFD598();
    __swift_project_value_buffer(v14, (uint64_t)qword_2543CE350);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v15(v12, a1, v5);
    v15(v8, a2, v5);
    v16 = sub_243BFD580();
    v17 = sub_243BFDCB8();
    v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      v19 = swift_slowAlloc();
      v38 = a2;
      v20 = v19;
      v37 = (void *)swift_slowAlloc();
      v41[0] = v37;
      *(_DWORD *)v20 = 136315394;
      v34[1] = v20 + 4;
      sub_243B88508((unint64_t *)&qword_2543CDE60, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v36 = v18;
      v35 = v16;
      v21 = sub_243BFE0A8();
      v23 = sub_243B739A8(v21, v22, (uint64_t *)v41);
      v39 = v2;
      v40 = v23;
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      v24 = *(void (**)(char *, uint64_t))(v6 + 8);
      v24(v12, v5);
      *(_WORD *)(v20 + 12) = 2080;
      v25 = sub_243BFE0A8();
      v40 = sub_243B739A8(v25, v26, (uint64_t *)v41);
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      v24(v8, v5);
      v16 = v35;
      _os_log_impl(&dword_243B4B000, v35, (os_log_type_t)v36, "Copying cache item from %s to %s", (uint8_t *)v20, 0x16u);
      v27 = v37;
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v27, -1, -1);
      MEMORY[0x249502C5C](v20, -1, -1);
    }
    else
    {
      v28 = *(void (**)(char *, uint64_t))(v6 + 8);
      v28(v12, v5);
      v28(v8, v5);
    }

    v29 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v30 = (void *)sub_243BFD130();
    v31 = (void *)sub_243BFD130();
    v41[0] = 0;
    v32 = objc_msgSend(v29, sel_copyItemAtURL_toURL_error_, v30, v31, v41);

    if (v32)
    {
      return (uint64_t)v41[0];
    }
    else
    {
      v33 = v41[0];
      sub_243BFD100();

      return swift_willThrow();
    }
  }
  return result;
}

uint64_t StoredPhotoLayout.maskURL(for:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  _QWORD v38[3];
  void (*v39)(char *);
  unsigned int v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;

  v45 = a1;
  v48 = sub_243BFD10C();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)v38 - v9;
  MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)v38 - v11;
  v12 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v38 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for StoredPhotoLayout(0);
  sub_243BA7D4C(v2 + *(int *)(v22 + 20), (uint64_t)v21);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v24 = 1;
  v25 = v12;
  v26 = v6;
  if (v23(v21, 1, v25) != 1)
  {
    sub_243B6F934((uint64_t)v21, (uint64_t)v18, type metadata accessor for StoredPhotoLayout.ImageLocation);
    sub_243B6F8F0((uint64_t)v18, (uint64_t)v15, type metadata accessor for StoredPhotoLayout.ImageLocation);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
    {
      v41 = v18;
      v42 = a2;
      v38[1] = *(_QWORD *)(v2 + *(int *)(v22 + 28));
      if (qword_2543CE008 != -1)
        swift_once();
      __swift_project_value_buffer(v5, (uint64_t)qword_2543CDFF0);
      v27 = v43;
      sub_243BFD13C();
      v50 = sub_243BFD244();
      v51 = v28;
      v40 = *MEMORY[0x24BDCD7A0];
      v29 = v44;
      v39 = *(void (**)(char *))(v44 + 104);
      v31 = v47;
      v30 = v48;
      v39(v47);
      v38[2] = sub_243B4DDA4();
      v32 = v46;
      sub_243BFD184();
      v44 = *(_QWORD *)(v29 + 8);
      ((void (*)(char *, uint64_t))v44)(v31, v30);
      swift_bridgeObjectRelease();
      v33 = *(void (**)(char *, uint64_t))(v6 + 8);
      v33(v27, v5);
      v50 = 0x5F6B73616DLL;
      v51 = 0xE500000000000000;
      sub_243BFDCC4();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      sub_243BFD280();
      sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      sub_243BFE0A8();
      sub_243BFD85C();
      swift_bridgeObjectRelease();
      sub_243BFD85C();
      ((void (*)(char *, _QWORD, uint64_t))v39)(v31, v40, v30);
      v34 = v49;
      sub_243BFD184();
      ((void (*)(char *, uint64_t))v44)(v31, v30);
      swift_bridgeObjectRelease();
      v33(v32, v5);
      v18 = v41;
      a2 = v42;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v42, v34, v5);
    }
    else
    {
      v35 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v36 = v49;
      v35(v49, v15, v5);
      v35(a2, v36, v5);
    }
    sub_243B7FA20((uint64_t)v18, type metadata accessor for StoredPhotoLayout.ImageLocation);
    v24 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(a2, v24, 1, v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> StoredPhoto.writeToCache()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(int *)(type metadata accessor for StoredPhoto(0) + 32);
  v3 = swift_bridgeObjectRetain();
  v4 = sub_243BA7E94(v3, v0);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + v2) = v4;
  }
}

uint64_t sub_243BA7374@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(_QWORD);
  int v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  char *v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;

  v104 = a2;
  v99 = a1;
  v90 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v3);
  v89 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  MEMORY[0x24BDAC7A8](v5);
  v92 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for StoredPhoto(0);
  MEMORY[0x24BDAC7A8](v7);
  v87 = (uint64_t)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v96 = (uint64_t)&v83 - v10;
  v11 = type metadata accessor for StoredPhotoLayout.ImageLocation(0);
  v93 = *(_QWORD *)(v11 - 8);
  v94 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_243BFD280();
  v15 = *(void (**)(char *, char *, uint64_t))(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v100 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v83 - v18;
  v20 = sub_243BFD190();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v85 = (uint64_t)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v86 = (char *)&v83 - v24;
  MEMORY[0x24BDAC7A8](v25);
  v102 = (uint64_t)&v83 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v83 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v103 = (char *)&v83 - v31;
  v32 = type metadata accessor for StoredPhotoLayout(0);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243B6F8F0((uint64_t)v99, (uint64_t)v34, v35);
  v95 = v15;
  v99 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v15 + 2);
  v99(v19, v104, v14);
  sub_243B6F8F0((uint64_t)v34, (uint64_t)v13, type metadata accessor for StoredPhotoLayout.ImageLocation);
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v36 = v88(v13, 1, v20);
  v98 = v21;
  v37 = v14;
  if (v36 == 1)
  {
    static SystemDirectory.baseImageURL(timePosition:uuid:)(*(_QWORD *)&v34[*(int *)(v32 + 28)], (uint64_t)v19, (uint64_t)v29);
    v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v38(v29, v13, v20);
  }
  v39 = v20;
  v40 = v32;
  v41 = v95;
  v95 = v38;
  v91 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v40;
  v101 = v39;
  v42 = (uint64_t)v103;
  ((void (*)(char *, char *))v38)(v103, v29);
  v43 = (void (*)(char *, uint64_t))*((_QWORD *)v41 + 1);
  v43(v19, v37);
  v44 = *(int *)(v40 + 28);
  v45 = *(_QWORD *)&v34[v44];
  v46 = (uint64_t)v100;
  v47 = v104;
  v99(v100, v104, v37);
  v48 = v102;
  static SystemDirectory.baseImageURL(timePosition:uuid:)(v45, v46, v102);
  v43((char *)v46, v37);
  v49 = v96;
  sub_243B6F8F0(v47, v96, type metadata accessor for StoredPhoto);
  v50 = v97;
  sub_243BA6AF8(v42, v48);
  if (!v50)
  {
    v84 = v44;
    v97 = v43;
    sub_243B7FA20(v49, type metadata accessor for StoredPhoto);
    sub_243B7FA20((uint64_t)v34, type metadata accessor for StoredPhotoLayout.ImageLocation);
    v54 = v98;
    v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
    v55(v34, 1, 1, v101);
    v56 = v92;
    v57 = (uint64_t)&v34[*((int *)v91 + 5)];
    sub_243BA7D4C(v57, v92);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v56, 1, v94);
    sub_243B6F978(v56, &qword_2572ED130);
    if (v58 == 1)
    {
      v59 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v60 = v101;
      v59(v102, v101);
      v59((uint64_t)v103, v60);
    }
    else
    {
      v92 = v57;
      v96 = 0;
      v61 = (uint64_t)v100;
      v62 = v104;
      v63 = v37;
      v64 = v37;
      v65 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
      v99(v100, v104, v64);
      v66 = v89;
      StoredPhotoLayout.maskURL(for:)(v61, v89);
      v67 = (void (*)(uint64_t, uint64_t))v97;
      v97((char *)v61, v63);
      if (v88(v66, 1, v101) == 1)
      {
        v68 = (uint64_t)v66;
        v69 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v70 = v101;
        v69(v102, v101);
        v69((uint64_t)v103, v70);
        sub_243B6F978(v68, &qword_2543CDE68);
      }
      else
      {
        v91 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55;
        v71 = v86;
        v95(v86, v66, v101);
        v72 = *(_QWORD *)&v34[v84];
        v65(v61, v62, v63);
        v73 = (uint64_t)v71;
        v74 = v67;
        v75 = v85;
        static SystemDirectory.maskImageURL(timePosition:uuid:)(v72, v61, v85);
        v74(v61, v63);
        v76 = v75;
        v77 = v87;
        sub_243B6F8F0(v62, v87, type metadata accessor for StoredPhoto);
        v78 = v96;
        sub_243BA6AF8(v73, v76);
        if (v78)
        {
          sub_243B7FA20(v77, type metadata accessor for StoredPhoto);
          v51 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
          v52 = v101;
          v51(v76, v101);
          v51(v73, v52);
          goto LABEL_6;
        }
        sub_243B7FA20(v77, type metadata accessor for StoredPhoto);
        v79 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v80 = v101;
        v79(v76, v101);
        v79(v73, v80);
        v79(v102, v80);
        v79((uint64_t)v103, v80);
        v81 = v92;
        sub_243B6F978(v92, &qword_2572ED130);
        v91(v81, 1, 1, v80);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v81, 0, 1, v94);
      }
    }
    sub_243B6F8F0((uint64_t)v34, v90, type metadata accessor for StoredPhotoLayout);
    v53 = (uint64_t)v34;
    return sub_243B7FA20(v53, type metadata accessor for StoredPhotoLayout);
  }
  sub_243B7FA20(v49, type metadata accessor for StoredPhoto);
  v51 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  v52 = v101;
LABEL_6:
  v51(v102, v52);
  v51((uint64_t)v103, v52);
  v53 = (uint64_t)v34;
  return sub_243B7FA20(v53, type metadata accessor for StoredPhotoLayout);
}

uint64_t static SystemDirectory.baseImageURL(timePosition:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_243BA7A90(a1, a2, 0x5F65736162, 0x636965682ELL, 0xE500000000000000, a3);
}

uint64_t static SystemDirectory.maskImageURL(timePosition:uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_243BA7A90(a1, a2, 0x5F6B73616DLL, 1735290926, 0xE400000000000000, a3);
}

uint64_t sub_243BA7A90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  unsigned int v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v27 = a4;
  v28 = a5;
  v25 = a3;
  v26 = a1;
  v29 = a6;
  v7 = sub_243BFD10C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_243BFD190();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - v16;
  if (qword_2543CE008 != -1)
    swift_once();
  __swift_project_value_buffer(v11, (uint64_t)qword_2543CDFF0);
  sub_243BFD13C();
  v30 = sub_243BFD244();
  v31 = v18;
  v23 = *MEMORY[0x24BDCD7A0];
  v24 = *(void (**)(char *))(v8 + 104);
  v24(v10);
  sub_243B4DDA4();
  v22 = a2;
  sub_243BFD184();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  swift_bridgeObjectRelease();
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  v30 = v25;
  v31 = 0xE500000000000000;
  sub_243BFDCC4();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  ((void (*)(char *, _QWORD, uint64_t))v24)(v10, v23, v7);
  sub_243BFD184();
  v19(v10, v7);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v11);
}

uint64_t static SystemDirectory.baseImageFilename(timePosition:uuid:)(uint64_t a1, uint64_t a2)
{
  return sub_243BA7DB0(a1, a2, 0x5F65736162);
}

uint64_t sub_243BA7D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static SystemDirectory.maskImageFilename(timePosition:uuid:)(uint64_t a1, uint64_t a2)
{
  return sub_243BA7DB0(a1, a2, 0x5F6B73616DLL);
}

uint64_t sub_243BA7DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_243BFDCC4();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFD280();
  sub_243B88508(&qword_2572ED528, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_243BFE0A8();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  return a3;
}

uint64_t sub_243BA7E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_243BA6230(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_243BA7E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v37 = a2;
  v5 = type metadata accessor for StoredPhotoLayout(0);
  v35 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v34 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (void (*)(char *, uint64_t, uint64_t))((char *)&v31 - v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
  result = sub_243BFDFC4();
  v11 = 0;
  v36 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v31 = v13;
  v32 = (unint64_t)(v15 + 63) >> 6;
  v38 = result;
  v33 = result + 64;
  v18 = (uint64_t)v34;
  if ((v16 & v12) == 0)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v11 << 6); ; i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v36 + 48) + 8 * i);
    v25 = *(_QWORD *)(v35 + 72) * i;
    sub_243B6F8F0(*(_QWORD *)(v36 + 56) + v25, (uint64_t)v9, type metadata accessor for StoredPhotoLayout);
    sub_243BA7374(v9, v37, v18);
    if (v3)
    {
      v30 = v38;
      swift_release();
      sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayout);
      return v30;
    }
    v39 = v24;
    v26 = v9;
    sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoLayout);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v27 = v38;
    *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * i) = v39;
    result = sub_243B6F934(v18, *(_QWORD *)(v27 + 56) + v25, type metadata accessor for StoredPhotoLayout);
    v28 = *(_QWORD *)(v27 + 16);
    v21 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v21)
      break;
    *(_QWORD *)(v27 + 16) = v29;
    v9 = v26;
    v3 = 0;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v21 = __OFADD__(v11++, 1);
    if (v21)
      goto LABEL_28;
    if (v11 >= v32)
      return v38;
    v22 = *(_QWORD *)(v31 + 8 * v11);
    if (!v22)
    {
      v23 = v11 + 1;
      if (v11 + 1 >= v32)
        return v38;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
        goto LABEL_14;
      v23 = v11 + 2;
      if (v11 + 2 >= v32)
        return v38;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
      {
LABEL_14:
        v11 = v23;
        goto LABEL_15;
      }
      v23 = v11 + 3;
      if (v11 + 3 < v32)
      {
        v22 = *(_QWORD *)(v31 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v11 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_29;
            if (v11 >= v32)
              return v38;
            v22 = *(_QWORD *)(v31 + 8 * v11);
            ++v23;
            if (v22)
              goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
      return v38;
    }
LABEL_15:
    v17 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243BA8178(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v35 = a1;
  v36 = a2;
  v6 = type metadata accessor for StoredPhotoLayout(0);
  v34 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v31 - v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2572EBA30);
  result = sub_243BFDFC4();
  v13 = 0;
  v37 = a3;
  v38 = result;
  v16 = *(_QWORD *)(a3 + 64);
  v15 = a3 + 64;
  v14 = v16;
  v17 = 1 << *(_BYTE *)(v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v31 = v15;
  v32 = (unint64_t)(v17 + 63) >> 6;
  v33 = result + 64;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v39 = (v19 - 1) & v19;
  for (i = __clz(__rbit64(v19)) | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * i);
    v25 = *(_QWORD *)(v34 + 72) * i;
    sub_243B6F8F0(*(_QWORD *)(v37 + 56) + v25, (uint64_t)v11, type metadata accessor for StoredPhotoLayout);
    v35(v11);
    if (v4)
    {
      v30 = v38;
      swift_release();
      sub_243B7FA20((uint64_t)v11, type metadata accessor for StoredPhotoLayout);
      return v30;
    }
    v26 = v11;
    sub_243B7FA20((uint64_t)v11, type metadata accessor for StoredPhotoLayout);
    *(_QWORD *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v27 = v38;
    *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * i) = v24;
    result = sub_243B6F934((uint64_t)v8, *(_QWORD *)(v27 + 56) + v25, type metadata accessor for StoredPhotoLayout);
    v28 = *(_QWORD *)(v27 + 16);
    v21 = __OFADD__(v28, 1);
    v29 = v28 + 1;
    if (v21)
      break;
    *(_QWORD *)(v27 + 16) = v29;
    v11 = v26;
    v4 = 0;
    v19 = v39;
    if (v39)
      goto LABEL_4;
LABEL_5:
    v21 = __OFADD__(v13++, 1);
    if (v21)
      goto LABEL_28;
    if (v13 >= v32)
      return v38;
    v22 = *(_QWORD *)(v31 + 8 * v13);
    if (!v22)
    {
      v23 = v13 + 1;
      if (v13 + 1 >= v32)
        return v38;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
        goto LABEL_14;
      v23 = v13 + 2;
      if (v13 + 2 >= v32)
        return v38;
      v22 = *(_QWORD *)(v31 + 8 * v23);
      if (v22)
      {
LABEL_14:
        v13 = v23;
        goto LABEL_15;
      }
      v23 = v13 + 3;
      if (v13 + 3 < v32)
      {
        v22 = *(_QWORD *)(v31 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_29;
            if (v13 >= v32)
              return v38;
            v22 = *(_QWORD *)(v31 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_15;
          }
        }
        goto LABEL_14;
      }
      return v38;
    }
LABEL_15:
    v39 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243BA8454()
{
  return sub_243BFDCF4();
}

id CommunicationActor.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_243BA847C()
{
  uint64_t v0;
  void *v1;

  type metadata accessor for CommunicationActor();
  v0 = swift_allocObject();
  if (qword_2543CE220 != -1)
    swift_once();
  v1 = (void *)qword_2543CE210;
  *(_QWORD *)(v0 + 16) = qword_2543CE210;
  off_2543CE228 = (_UNKNOWN *)v0;
  return v1;
}

uint64_t static CommunicationActor.shared.getter()
{
  if (qword_2543CE238 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_243BA8524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_243BFDCD0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_243BFDCDC();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5930];
  MEMORY[0x24BDAC7A8](v4);
  v6 = sub_243BFD6A0();
  MEMORY[0x24BDAC7A8](v6);
  sub_243BA89A8();
  sub_243BFD694();
  v8[1] = MEMORY[0x24BEE4AF8];
  sub_243BA89E4(&qword_2543CE470, 255, v5, MEMORY[0x24BEE5940]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE458);
  sub_243BA8A24();
  sub_243BFDDC0();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5758], v0);
  result = sub_243BFDCE8();
  qword_2543CE210 = result;
  return result;
}

id static CommunicationActor.sharedQueue.getter()
{
  if (qword_2543CE220 != -1)
    swift_once();
  return (id)qword_2543CE210;
}

uint64_t static CommunicationActor.assumeOnQueue<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  _QWORD *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t v16;

  v7 = sub_243BFD6AC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_2543CE238 != -1)
    swift_once();
  v11 = (void *)*((_QWORD *)off_2543CE228 + 2);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5610], v7);
  v12 = v11;
  LOBYTE(v11) = sub_243BFD6B8();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a1;
  v14[4] = a2;
  a1();
  if (v3)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_9;
  return result;
}

uint64_t sub_243BA8890()
{
  return swift_deallocObject();
}

uint64_t CommunicationActor.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CommunicationActor.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_243BA88E0(uint64_t a1, uint64_t a2)
{
  return sub_243BA89E4(qword_2543CE240, a2, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
}

uint64_t type metadata accessor for CommunicationActor()
{
  return objc_opt_self();
}

uint64_t sub_243BA892C()
{
  if (qword_2543CE238 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_243BA896C()
{
  type metadata accessor for CommunicationActor();
  return sub_243BFDDFC();
}

uint64_t method lookup function for CommunicationActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CommunicationActor.unownedExecutor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

unint64_t sub_243BA89A8()
{
  unint64_t result;

  result = qword_2543CE478;
  if (!qword_2543CE478)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2543CE478);
  }
  return result;
}

uint64_t sub_243BA89E4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x249502B6C](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_243BA8A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2543CE460;
  if (!qword_2543CE460)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE458);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2543CE460);
  }
  return result;
}

void LazyData.write(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;

  v3 = v1[2];
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_243BA8EB8(v4, a1, v1, &v6);
  os_unfair_lock_unlock(v5);
}

uint64_t LazyData.__allocating_init(filename:isTempFile:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_243BFD190();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  swift_allocObject();
  v9 = sub_243BA9AD4(0, 0xF000000000000000, (uint64_t)v6, a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

void LazyData.getData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (uint64_t *)(v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v1 + 16));
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_243BA8C90(v2, &v4);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_243BA8C90@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  if (v9 >> 60 != 15)
  {
    v16 = *a1;
    v17 = a1[1];
LABEL_7:
    *a2 = v16;
    a2[1] = v17;
    return sub_243B924DC(v8, v9);
  }
  v21 = a2;
  v10 = type metadata accessor for LazyDataState();
  sub_243BAA5A8((uint64_t)a1 + *(int *)(v10 + 20), (uint64_t)v7);
  v11 = sub_243BFD190();
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11);
  if ((_DWORD)result != 1)
  {
    v14 = sub_243BFD1A8();
    if (v2)
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v11);
    v16 = v14;
    v17 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
    v18 = *a1;
    v19 = a1[1];
    sub_243B7FBDC(v16, v17);
    sub_243B924F0(v18, v19);
    *a1 = v16;
    a1[1] = v17;
    a2 = v21;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t LazyData.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_243BFD190();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_allocObject();
  v8 = sub_243BA9AD4(a1, a2, (uint64_t)v6, 0);
  sub_243B7FCC0(a1, a2);
  return v8;
}

void sub_243BA8EB8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  id v31;
  unsigned int v32;
  void (*v33)(char *, uint64_t);
  id v34;
  id v35;
  unsigned int v36;
  void (*v37)(char *, uint64_t);
  id v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  id v52;
  id v53[2];

  v5 = v4;
  v51 = a4;
  v53[1] = *(id *)MEMORY[0x24BDAC8D0];
  v47 = a3;
  v50 = *a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v8);
  v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - v11;
  v13 = sub_243BFD190();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v48 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v45 - v17;
  v19 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v20 = (void *)sub_243BFD130();
  v52 = v19;
  v53[0] = 0;
  LODWORD(v19) = objc_msgSend(v19, sel_removeItemAtURL_error_, v20, v53);

  if ((_DWORD)v19)
  {
    v21 = v53[0];
  }
  else
  {
    v22 = v53[0];
    v23 = (void *)sub_243BFD100();

    swift_willThrow();
    v5 = 0;
  }
  v24 = type metadata accessor for LazyDataState();
  sub_243BAA5A8(a1 + *(int *)(v24 + 20), (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_243B84A44((uint64_t)v12);
    v25 = *(_QWORD *)(a1 + 8);
    if (v25 >> 60 != 15)
    {
      v26 = *(_QWORD *)a1;
      sub_243B7FBDC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      sub_243BFD1D8();
      sub_243B924F0(v26, v25);
      if (v5)
      {

        return;
      }
      v46 = 0;
      v35 = v52;
      goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v46 = v5;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
    v27 = *(int *)(v24 + 24);
    v28 = *(unsigned __int8 *)(a1 + v27);
    v29 = (void *)sub_243BFD130();
    v30 = (void *)sub_243BFD130();
    if (v28 == 1)
    {
      v53[0] = 0;
      v31 = v52;
      v32 = objc_msgSend(v52, sel_moveItemAtURL_toURL_error_, v29, v30, v53);

      if (v32)
      {
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v34 = v53[0];
        v33(v18, v13);

        *(_BYTE *)(a1 + v27) = 0;
        *v51 = (uint64_t)v47;
        swift_retain();
        return;
      }
      v43 = v53[0];
      sub_243BFD100();

      swift_willThrow();
    }
    else
    {
      v53[0] = 0;
      v35 = v52;
      v36 = objc_msgSend(v52, sel_copyItemAtURL_toURL_error_, v29, v30, v53);

      if (v36)
      {
        v37 = *(void (**)(char *, uint64_t))(v14 + 8);
        v38 = v53[0];
        v37(v18, v13);
LABEL_14:
        v39 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
        v40 = v48;
        v39(v48, a2, v13);
        v41 = (uint64_t)v49;
        v39(v49, (uint64_t)v40, v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v41, 0, 1, v13);
        swift_allocObject();
        v42 = sub_243BA9AD4(0, 0xF000000000000000, v41, 0);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v13);

        *v51 = v42;
        return;
      }
      v44 = v53[0];
      sub_243BFD100();

      swift_willThrow();
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
}

uint64_t LazyData.isNormalFile.getter()
{
  return sub_243BA9508((void (*)(uint64_t *__return_ptr, uint64_t))sub_243BA931C);
}

uint64_t sub_243BA931C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LazyDataState();
  sub_243BAA5A8(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  v8 = sub_243BFD190();
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  result = sub_243B84A44((uint64_t)v6);
  if (v9 == 1)
    v11 = 0;
  else
    v11 = *(_BYTE *)(a1 + *(int *)(v7 + 24)) ^ 1;
  *a2 = v11 & 1;
  return result;
}

void LazyData.filename.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_243BA947C(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_243BA947C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for LazyDataState();
  if (*(_BYTE *)(a1 + *(int *)(v4 + 24)) != 1)
    return sub_243BAA5A8(a1 + *(int *)(v4 + 20), a2);
  v5 = sub_243BFD190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
}

uint64_t LazyData.isEmpty.getter()
{
  return sub_243BA9508((void (*)(uint64_t *__return_ptr, uint64_t))sub_243BA958C);
}

uint64_t sub_243BA9508(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(&v7, v4);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_243BA958C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2 >> 60 != 15)
    __asm { BR              X10 }
  *a2 = 0;
  return result;
}

uint64_t LazyData.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_243BA96C0(v2);
  os_unfair_lock_unlock(v3);
  swift_release();
  return v0;
}

uint64_t sub_243BA96C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v11;
  void *v12;
  unsigned int v13;
  uint64_t (*v14)(char *, uint64_t);
  id v15;
  id v16;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_243BFD190();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LazyDataState();
  sub_243BAA5A8(a1 + *(int *)(v9 + 20), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_243B84A44((uint64_t)v4);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  if (*(_BYTE *)(a1 + *(int *)(v9 + 24)) == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v12 = (void *)sub_243BFD130();
    v17[0] = 0;
    v13 = objc_msgSend(v11, sel_removeItemAtURL_error_, v12, v17);

    if (v13)
    {
      v14 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
      v15 = v17[0];
      return v14(v8, v5);
    }
    v16 = v17[0];
    sub_243BFD100();

    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LazyData.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v1 + 16);
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_243BA96C0(v2);
  os_unfair_lock_unlock(v3);
  swift_release();
  return swift_deallocClassInstance();
}

void LazyData.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4[2];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (uint64_t *)(v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v1 + 16));
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_243BA8C90(v2, v4);
  os_unfair_lock_unlock(v3);
  __asm { BR              X10 }
}

void sub_243BA9AB4()
{
  LazyData.description.getter();
}

uint64_t sub_243BA9AD4(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LazyDataState();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v22 - v16;
  sub_243BAA5A8(a3, (uint64_t)v11);
  v18 = (uint64_t)v14 + *(int *)(v12 + 20);
  v19 = sub_243BFD190();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *v14 = a1;
  v14[1] = a2;
  sub_243B924DC(a1, a2);
  sub_243BAA5F0((uint64_t)v11, v18);
  *((_BYTE *)v14 + *(int *)(v12 + 24)) = a4;
  sub_243BAA638((uint64_t)v14, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD78);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + ((*(unsigned int *)(*(_QWORD *)v20 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_243BAA67C((uint64_t)v17, v20 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v20 + 16));
  sub_243BAA6C0((uint64_t)v17);
  sub_243B84A44(a3);
  *(_QWORD *)(v4 + 16) = v20;
  return v4;
}

uint64_t type metadata accessor for LazyData()
{
  return objc_opt_self();
}

uint64_t method lookup function for LazyData()
{
  return swift_lookUpClassMethod();
}

uint64_t *sub_243BA9CBC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_243B7FBDC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *v4 = v9;
      v4[1] = v7;
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)v4 + v10;
    v12 = (const void *)(a2 + v10);
    v13 = sub_243BFD190();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_243BA9DE8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_243B7FCC0(*a1, v4);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = sub_243BFD190();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t sub_243BA9E74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_243B7FBDC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = sub_243BFD190();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_243BA9F74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_243B7FBDC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_243BAA104((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_243B7FBDC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_243B7FCC0(v9, v10);
LABEL_8:
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = sub_243BFD190();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_243BAA104(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

_OWORD *sub_243BAA138(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD190();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_243BAA210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_243BAA104(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_243B7FCC0(v8, v6);
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_243BFD190();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v16)
  {
LABEL_11:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_12:
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_243BAA370()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BAA37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_243BAA410()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BAA41C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for LazyDataState()
{
  uint64_t result;

  result = qword_2572EE1F8;
  if (!qword_2572EE1F8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_243BAA4D8()
{
  unint64_t v0;

  sub_243BAA554();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_243BAA554()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2572EE208[0])
  {
    sub_243BFD190();
    v0 = sub_243BFDD0C();
    if (!v1)
      atomic_store(v0, qword_2572EE208);
  }
}

uint64_t sub_243BAA5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_243BAA5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_243BAA638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LazyDataState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_243BAA67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LazyDataState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_243BAA6C0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LazyDataState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243BAA6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)a1;
  v29 = *(_BYTE *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(_BYTE *)(a1 + 40);
  v3 = sub_243BABE2C(*(_QWORD *)a1, v1, v29, v25, v26, v27, v2);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = v3;
  v33 = MEMORY[0x24BEE4AF8];
  result = sub_243B7CBA0(0, v3 & ~(v3 >> 63), 0);
  if (v5 < 0)
  {
LABEL_37:
    __break(1u);
  }
  else
  {
    v4 = v33;
    v7 = v28;
    result = sub_243BAC6E8(v28, v1, v29);
    v8 = 0;
    v9 = v2 + 64;
    v22 = v5;
    v23 = v1;
    v24 = v2 + 64;
    while ((v29 & 1) == 0)
    {
      if (v7 < v28)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      if ((v27 & 1) != 0)
        goto LABEL_39;
      if ((_DWORD)v1 != (_DWORD)v26)
        goto LABEL_29;
      if (v7 >= v25)
        goto LABEL_30;
      if (v7 < 0 || v7 >= 1 << *(_BYTE *)(v2 + 32))
        goto LABEL_31;
      v12 = (unint64_t)v7 >> 6;
      if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(v2 + 36) != (_DWORD)v1)
        goto LABEL_33;
      v30 = v8;
      v13 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v7);
      v31 = *v13;
      v32 = v13[1];
      swift_bridgeObjectRetain_n();
      swift_retain();
      sub_243BFD85C();
      LazyData.description.getter();
      sub_243BFD85C();
      swift_release();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
        result = sub_243B7CBA0(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v33 + 16) = v15 + 1;
      v16 = v33 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v31;
      *(_QWORD *)(v16 + 40) = v32;
      v10 = 1 << *(_BYTE *)(v2 + 32);
      if (v7 >= v10)
        goto LABEL_34;
      v9 = v2 + 64;
      v17 = *(_QWORD *)(v24 + 8 * v12);
      if ((v17 & (1 << v7)) == 0)
        goto LABEL_35;
      LODWORD(v1) = v23;
      if (*(_DWORD *)(v2 + 36) != v23)
        goto LABEL_36;
      v18 = v17 & (-2 << (v7 & 0x3F));
      if (v18)
      {
        v10 = __clz(__rbit64(v18)) | v7 & 0xFFFFFFFFFFFFFFC0;
        v11 = v22;
      }
      else
      {
        v19 = v12 + 1;
        v20 = (unint64_t)(v10 + 63) >> 6;
        v11 = v22;
        if (v12 + 1 < v20)
        {
          v21 = *(_QWORD *)(v24 + 8 * v19);
          if (v21)
          {
LABEL_26:
            v10 = __clz(__rbit64(v21)) + (v19 << 6);
          }
          else
          {
            while (v20 - 2 != v12)
            {
              v21 = *(_QWORD *)(v2 + 80 + 8 * v12++);
              if (v21)
              {
                v19 = v12 + 1;
                goto LABEL_26;
              }
            }
          }
        }
      }
      v8 = v30 + 1;
      v7 = v10;
      if (v30 + 1 == v11)
        return v4;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

void static ProtocolVersion.current.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

PhotosFace::ProtocolVersion_optional __swiftcall ProtocolVersion.init(rawValue:)(Swift::UInt32 rawValue)
{
  char *v1;
  char v2;

  if (rawValue >= 3)
    v2 = 3;
  else
    v2 = rawValue;
  *v1 = v2;
  return (PhotosFace::ProtocolVersion_optional)rawValue;
}

uint64_t ProtocolVersion.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_243BAAA20()
{
  sub_243BFE1A4();
  sub_243BFE1C8();
  return sub_243BFE1E0();
}

uint64_t sub_243BAAA64()
{
  return sub_243BFE1C8();
}

uint64_t sub_243BAAA8C()
{
  sub_243BFE1A4();
  sub_243BFE1C8();
  return sub_243BFE1E0();
}

PhotosFace::ProtocolVersion_optional sub_243BAAACC(Swift::UInt32 *a1)
{
  return ProtocolVersion.init(rawValue:)(*a1);
}

void sub_243BAAAD4(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL static ProtocolVersion.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_243BAAAF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_243BAAB08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_243BAAB1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_243BAAB30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t MessageBody.metadata.getter()
{
  return swift_retain();
}

uint64_t MessageBody.metadata.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*MessageBody.metadata.modify())()
{
  return nullsub_1;
}

uint64_t MessageBody.files.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MessageBody.files.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MessageBody.files.modify())()
{
  return nullsub_1;
}

void MessageBody.version.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *MessageBody.version.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*MessageBody.version.modify())()
{
  return nullsub_1;
}

uint64_t MessageBody.init(metadata:files:version:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t MessageBody.init(data:files:version:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a4;
  v14 = sub_243BFD190();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  type metadata accessor for LazyData();
  swift_allocObject();
  v15 = sub_243BA9AD4(a1, a2, (uint64_t)v12, 0);
  result = sub_243B7FCC0(a1, a2);
  *(_QWORD *)a5 = v15;
  *(_QWORD *)(a5 + 8) = a3;
  *(_BYTE *)(a5 + 16) = v13;
  return result;
}

void MessageBody.getData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = (uint64_t *)(v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v1 + 16));
  v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_243BA8C90(v2, &v4);
  os_unfair_lock_unlock(v3);
}

BOOL MessageBody.isEmpty.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char v6;

  v1 = v0[1];
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_243BA958C(v3, &v6);
  os_unfair_lock_unlock(v4);
  return v6 == 1 && *(_QWORD *)(v1 + 16) == 0;
}

uint64_t static MessageBody.empty(version:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = sub_243B4DB44(MEMORY[0x24BEE4AF8]);
  v9 = sub_243BFD190();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for LazyData();
  swift_allocObject();
  result = sub_243BA9AD4(0, 0xC000000000000000, (uint64_t)v6, 0);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t MessageBody.init<A>(serializable:version:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a2;
  v27 = MEMORY[0x24BEE4B00];
  v26 = v15;
  (*(void (**)(uint64_t *, char *, uint64_t, uint64_t, double))(a4 + 24))(&v27, &v26, a3, a4, v12);
  v25 = v15;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 16))(&v25, a3, a4);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v16;
    v20 = v17;
    v24 = v27;
    v21 = sub_243BFD190();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
    type metadata accessor for LazyData();
    swift_allocObject();
    v22 = sub_243BA9AD4(v19, v20, (uint64_t)v14, 0);
    sub_243B7FCC0(v19, v20);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    v23 = v24;
    *(_QWORD *)a5 = v22;
    *(_QWORD *)(a5 + 8) = v23;
    *(_BYTE *)(a5 + 16) = v15;
  }
  return result;
}

void MessageBody.deserialized<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12[2];

  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_BYTE *)(v2 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v9 = (uint64_t *)(v8 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v8 + 16));
  v10 = (os_unfair_lock_s *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v10);
  sub_243BA8C90(v9, v12);
  os_unfair_lock_unlock(v10);
  if (!v3)
  {
    v11 = v12[0];
    LOBYTE(v12[0]) = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 8))(v11, v12[1], v12, a1, a2);
    LOBYTE(v12[0]) = v7;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a2 + 32))(v6, v12, a1, a2);
  }
}

void Message.Operation.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BAB1F0()
{
  sub_243BFE1B0();
  return sub_243BFE1C8();
}

void Message.Operation.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_243BFE1A4();
  __asm { BR              X9 }
}

uint64_t sub_243BAB280()
{
  sub_243BFE1B0();
  sub_243BFE1C8();
  return sub_243BFE1E0();
}

void sub_243BAB2F4()
{
  __asm { BR              X10 }
}

uint64_t sub_243BAB32C()
{
  sub_243BFE1B0();
  return sub_243BFE1C8();
}

void sub_243BAB378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_243BFE1A4();
  __asm { BR              X9 }
}

uint64_t sub_243BAB3B4()
{
  sub_243BFE1B0();
  sub_243BFE1C8();
  return sub_243BFE1E0();
}

void Message.operation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t Message.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t Message.complete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

__n128 Message.init(operation:content:complete:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, unsigned __int8 a3@<W2>, __n128 *a4@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  __n128 result;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = a2[1].n128_u8[0];
  a4->n128_u64[0] = *(_QWORD *)a1;
  a4->n128_u8[8] = v4;
  result = *a2;
  a4[1] = *a2;
  a4[2].n128_u8[0] = v5;
  a4[2].n128_u8[1] = a3;
  return result;
}

uint64_t Message.init(operation:data:files:complete:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = *((_BYTE *)a1 + 8);
  v17 = sub_243BFD190();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  type metadata accessor for LazyData();
  swift_allocObject();
  v18 = sub_243BA9AD4(a2, a3, (uint64_t)v14, 0);
  result = sub_243B7FCC0(a2, a3);
  *(_QWORD *)a6 = v15;
  *(_BYTE *)(a6 + 8) = v16;
  *(_QWORD *)(a6 + 16) = v18;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = 2;
  *(_BYTE *)(a6 + 33) = a5;
  return result;
}

uint64_t Message.Operation.init(protobuf:)(uint64_t a1)
{
  _BYTE *v2;

  if (*(_BYTE *)(a1 + 8) == 1)
    __asm { BR              X10 }
  sub_243BA3C68();
  swift_allocError();
  *v2 = 0;
  swift_willThrow();
  return sub_243BAC120(a1);
}

void Message.Operation.protobuf(proto:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BAB740()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)v0 = 1;
  *(_BYTE *)(v0 + 8) = 1;
  result = type metadata accessor for MessageProto(0);
  v3 = v0 + *(int *)(result + 36);
  *(_DWORD *)v3 = v1;
  *(_BYTE *)(v3 + 4) = 0;
  return result;
}

uint64_t Message.shortDescription.getter()
{
  sub_243BFDF40();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Message.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  __int128 v7;
  char v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  __int128 v15;
  char v16;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_243BABFE0(3, v1, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)sub_243BAA6FC((uint64_t)&v7);
  v15 = v7;
  v16 = v8;
  sub_243BAC15C((uint64_t)&v15);
  v13 = v9;
  v14 = v10;
  sub_243BAC15C((uint64_t)&v13);
  v12 = v11;
  sub_243BAC18C((uint64_t)&v12);
  if (*(_QWORD *)(v1 + 16) >= 4uLL)
  {
    sub_243BFE0A8();
    sub_243BFD85C();
    swift_bridgeObjectRelease();
    sub_243BFD85C();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_243B6DBA0(0, v2[2] + 1, 1, v2);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_243B6DBA0((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 0x2B202E2E2ELL;
    v5[5] = 0xE500000000000000;
  }
  sub_243BFDE44();
  sub_243BFD85C();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_243BFDF40();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  sub_243BFDF40();
  sub_243BFD85C();
  swift_retain();
  LazyData.description.getter();
  sub_243BFD85C();
  swift_release();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED398);
  sub_243B7E110();
  sub_243BFD7B4();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  swift_bridgeObjectRelease();
  sub_243BFD85C();
  return 0;
}

uint64_t sub_243BABBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = sub_243BE4C6C(a2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v10 = 1 << *(_BYTE *)(a2 + 32);
  if (v10 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v9 != (_DWORD)v11)
    goto LABEL_13;
  if (*(_QWORD *)a1 < result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v9 == (_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v10 >= v13)
      {
        *(_QWORD *)a3 = *(_QWORD *)a1;
        *(_QWORD *)(a3 + 8) = v11;
        *(_BYTE *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = v13;
        *(_QWORD *)(a3 + 32) = v12;
        *(_BYTE *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = a2;
        return swift_bridgeObjectRetain();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_243BABCA4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    if (a4)
    {
      v8 = 0;
      v9 = a7 & 1;
      v10 = (a3 | a7) & 1;
      v11 = a8 + 64;
      v12 = result;
      v13 = a2;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_31;
        if (v13 != a6)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v12 == a5)
        {
          v12 = 0;
          goto LABEL_25;
        }
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_27;
        v14 = 1 << *(_BYTE *)(a8 + 32);
        if ((uint64_t)v12 >= v14)
          goto LABEL_27;
        v15 = v12 >> 6;
        v16 = *(_QWORD *)(v11 + 8 * (v12 >> 6));
        if (((v16 >> v12) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(a8 + 36) != a6)
          goto LABEL_29;
        v17 = v16 & (-2 << (v12 & 0x3F));
        if (v17)
        {
          v12 = __clz(__rbit64(v17)) | v12 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = v15 + 1;
          v19 = (unint64_t)(v14 + 63) >> 6;
          if (v15 + 1 >= v19)
            goto LABEL_22;
          v20 = *(_QWORD *)(v11 + 8 * v18);
          if (!v20)
          {
            v18 = v15 + 2;
            if (v15 + 2 >= v19)
              goto LABEL_22;
            v20 = *(_QWORD *)(v11 + 8 * v18);
            if (!v20)
            {
              while (v19 - 3 != v15)
              {
                v20 = *(_QWORD *)(a8 + 88 + 8 * v15++);
                if (v20)
                {
                  v18 = v15 + 2;
                  goto LABEL_16;
                }
              }
LABEL_22:
              v12 = 1 << *(_BYTE *)(a8 + 32);
              goto LABEL_5;
            }
          }
LABEL_16:
          v12 = __clz(__rbit64(v20)) + (v18 << 6);
        }
LABEL_5:
        ++v8;
        v13 = a6;
        v10 = v9;
        if (v8 == a4)
          goto LABEL_25;
      }
    }
    v12 = result;
LABEL_25:
    sub_243BAC6E8(result, a2, a3 & 1);
    return v12;
  }
  return result;
}

uint64_t sub_243BABE2C(uint64_t result, int a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_34;
  v7 = result;
  if (a4 < result)
    goto LABEL_31;
  if (a5 != a2)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    if (*(_DWORD *)(a7 + 36) == a5)
    {
      v8 = a7 + 64;
      v9 = 1 << *(_BYTE *)(a7 + 32);
      v10 = (unint64_t)(v9 + 63) >> 6;
      result = 1;
      while (1)
      {
        if ((v7 & 0x8000000000000000) != 0 || (uint64_t)v7 >= v9)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        v11 = v7 >> 6;
        v12 = *(_QWORD *)(v8 + 8 * (v7 >> 6));
        if (((v12 >> v7) & 1) == 0)
          goto LABEL_29;
        v13 = v12 & (-2 << (v7 & 0x3F));
        if (v13)
        {
          v7 = __clz(__rbit64(v13)) | v7 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = v11 + 1;
          v7 = 1 << *(_BYTE *)(a7 + 32);
          if (v11 + 1 < v10)
          {
            v15 = *(_QWORD *)(v8 + 8 * v14);
            if (!v15)
            {
              v14 = v11 + 2;
              v7 = 1 << *(_BYTE *)(a7 + 32);
              if (v11 + 2 >= v10)
                goto LABEL_18;
              v15 = *(_QWORD *)(v8 + 8 * v14);
              if (!v15)
              {
                while (v10 - 3 != v11)
                {
                  v15 = *(_QWORD *)(a7 + 88 + 8 * v11++);
                  if (v15)
                  {
                    v14 = v11 + 2;
                    goto LABEL_17;
                  }
                }
                v7 = 1 << *(_BYTE *)(a7 + 32);
                goto LABEL_18;
              }
            }
LABEL_17:
            v7 = __clz(__rbit64(v15)) + (v14 << 6);
          }
        }
LABEL_18:
        if (v7 == a4)
          return result;
        if (__OFADD__(result++, 1))
          goto LABEL_30;
      }
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t _s10PhotosFace7MessageV9OperationO2eeoiySbAE_AEtFZ_0(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_243BABF84 + 4 * byte_243C01079[*(unsigned __int8 *)(a1 + 8)]))();
}

BOOL sub_243BABF84@<W0>(int a1@<W8>)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v3 = a1 == v2;
  return !v1 && v3;
}

BOOL sub_243BABF98@<W0>(int a1@<W8>)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v3 = a1 == v2;
  return v1 == 2 && v3;
}

BOOL sub_243BABFAC@<W0>(int a1@<W8>)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v3 = a1 == v2;
  return v1 == 3 && v3;
}

BOOL sub_243BABFC0@<W0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return v1 == 1 && (_DWORD)a1 == (_DWORD)v2 && HIDWORD(a1) == HIDWORD(v2);
}

uint64_t sub_243BABFE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  char v19;
  __int128 v21;
  _OWORD v22[3];
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v6 = sub_243BE4C6C(a2);
    v8 = v7;
    v10 = v9 & 1;
    v11 = sub_243BABCA4(v6, v7, v9 & 1, v4, 1 << *(_BYTE *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a2);
    v13 = v12;
    v15 = v14;
    v16 = ~v14;
    sub_243BA5D14(v6, v8, v10);
    if (v16)
    {
      v17 = (v15 & 1) == 0;
    }
    else
    {
      v17 = 1;
      v11 = 1 << *(_BYTE *)(a2 + 32);
      v13 = *(unsigned int *)(a2 + 36);
    }
    result = sub_243BE4C6C(a2);
    if (!v17 || (v19 & 1) != 0)
      goto LABEL_16;
    if ((_DWORD)v13 == (_DWORD)v18)
    {
      if (v11 >= result)
      {
        v24[0] = result;
        v24[1] = v18;
        v25 = 0;
        v26 = v11;
        v27 = v13;
        v28 = 0;
        result = sub_243BABBD0((uint64_t)v24, a2, (uint64_t)v22);
        v21 = v22[1];
        *(_OWORD *)a3 = v22[0];
        *(_OWORD *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 32) = v22[2];
        *(_QWORD *)(a3 + 48) = v23;
        return result;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_243BAC120(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessageProto(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243BAC15C(uint64_t a1)
{
  sub_243BA5D14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_243BAC18C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_243BAC1B8()
{
  unint64_t result;

  result = qword_2572EE240;
  if (!qword_2572EE240)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for ProtocolVersion, &type metadata for ProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2572EE240);
  }
  return result;
}

unint64_t sub_243BAC200()
{
  unint64_t result;

  result = qword_2572EE248;
  if (!qword_2572EE248)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for Message.Operation, &type metadata for Message.Operation);
    atomic_store(result, (unint64_t *)&qword_2572EE248);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ProtocolVersion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243BAC290 + 4 * byte_243C01082[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243BAC2C4 + 4 * byte_243C0107D[v4]))();
}

uint64_t sub_243BAC2C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAC2CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BAC2D4);
  return result;
}

uint64_t sub_243BAC2E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BAC2E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243BAC2EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAC2F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProtocolVersion()
{
  return &type metadata for ProtocolVersion;
}

uint64_t destroy for MessageBody()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t _s10PhotosFace11MessageBodyVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MessageBody(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for MessageBody(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageBody(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageBody()
{
  return &type metadata for MessageBody;
}

uint64_t destroy for Message()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Message(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Message(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for Message(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Message(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Message()
{
  return &type metadata for Message;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_243BAC6C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_243BAC6D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Message.Operation()
{
  return &type metadata for Message.Operation;
}

uint64_t sub_243BAC6E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

BOOL static DemuxError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DemuxError.hash(into:)()
{
  return sub_243BFE1B0();
}

uint64_t DemuxError.hashValue.getter()
{
  sub_243BFE1A4();
  sub_243BFE1B0();
  return sub_243BFE1E0();
}

unint64_t static DemuxConstants.timeoutCheckFrequency.getter()
{
  return 0xA055690D9DB80000;
}

unint64_t static DemuxConstants.requestTimeout.getter()
{
  return 0x86AC351052600000;
}

uint64_t InFlightRequest.result.getter()
{
  return swift_retain();
}

uint64_t InFlightRequest.creationDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_243BFDF10();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t InFlightRequest.requestID.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 32));
}

uint64_t InFlightRequest.init(result:creationDate:requestID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v5;
  int *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v5 = a3;
  v9 = (int *)type metadata accessor for InFlightRequest(0, *(_QWORD *)(*(_QWORD *)a1 + 80), a3, a4);
  v10 = (_QWORD *)((char *)a5 + v9[9]);
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)((char *)a5 + v9[10]) = 0;
  *a5 = a1;
  v11 = (char *)a5 + v9[7];
  v12 = sub_243BFDF10();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(_DWORD *)((char *)a5 + v9[8]) = v5;
  return result;
}

uint64_t type metadata accessor for InFlightRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InFlightRequest);
}

uint64_t InFlightRequest.readNext()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_243BAC8AC()
{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = v0[3];
  v2 = (_OWORD *)(v0[4] + *(int *)(v1 + 36));
  if (!*(_QWORD *)v2)
  {
    AsyncThrowingChannel.makeAsyncIterator()(&v8);
    *v2 = v8;
    v1 = v0[3];
  }
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v3;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v6 = type metadata accessor for AsyncThrowingChannel.Iterator(0, v4, v5, MEMORY[0x24BEE3F20]);
  *v3 = v0;
  v3[1] = sub_243BAC960;
  return AsyncThrowingChannel.Iterator.next()(v0[2], v6);
}

uint64_t sub_243BAC960()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_243BAC9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(int *)(*(_QWORD *)(v0 + 24) + 40);
  v3 = *(_QWORD *)(v1 + v2);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + v2) = v5;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t InFlightRequest.readCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_243BACA00()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_243BACA08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  return swift_release();
}

uint64_t MessageDemultiplexer.__allocating_init(timeout:logTag:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a3 & 1;
  v10 = swift_allocObject();
  MessageDemultiplexer.init(timeout:logTag:)(a1, a2, v9, a4, a5);
  return v10;
}

uint64_t *MessageDemultiplexer.init(timeout:logTag:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  char v8;
  uint64_t v11;
  uint64_t v12;

  v8 = a3;
  v11 = *v5;
  *((_DWORD *)v5 + 8) = 0;
  type metadata accessor for InFlightRequest(255, *(_QWORD *)(v11 + 80), a3, a4);
  swift_getTupleTypeMetadata2();
  sub_243BFD97C();
  v12 = sub_243BFD748();
  v5[9] = 0;
  v5[5] = v12;
  v5[6] = a1;
  v5[7] = a2;
  *((_BYTE *)v5 + 64) = v8 & 1;
  v5[2] = a4;
  v5[3] = a5;
  return v5;
}

void sub_243BACB3C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  v5 = v4;
  v8 = type metadata accessor for InFlightRequest(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a2, a3);
  v9 = sub_243BFDD0C();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26[-1] - v10;
  v12 = sub_243BFDF10();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v15 == -1)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + 32) = v15 + 1;
    swift_retain();
    sub_243BFDEEC();
    InFlightRequest.init(result:creationDate:requestID:)(a1, (uint64_t)v14, v15, v16, a4);
    v17 = *(_QWORD *)(v8 - 8);
    (*(void (**)(char *, _QWORD *, uint64_t))(v17 + 16))(v11, a4, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v8);
    LODWORD(v25) = v15;
    swift_beginAccess();
    sub_243BFD778();
    sub_243BFD790();
    swift_endAccess();
    if (qword_2543CE380 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v18 = sub_243BFD598();
  __swift_project_value_buffer(v18, (uint64_t)qword_2543CE368);
  swift_retain();
  v19 = sub_243BFD580();
  v20 = sub_243BFDC94();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)v21 = 136315394;
    v23 = *(_QWORD *)(v5 + 16);
    v24 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    v25 = sub_243B739A8(v23, v24, v26);
    sub_243BFDD54();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v25) = v15;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v19, v20, "%s: Inserted request %u", (uint8_t *)v21, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v22, -1, -1);
    MEMORY[0x249502C5C](v21, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_243BAE500();
}

uint64_t sub_243BACE3C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[4];
  int v18;

  v6 = type metadata accessor for InFlightRequest(0, *(_QWORD *)(*v4 + 80), a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v17[-v8];
  v10 = sub_243BFDD0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v17[-v12];
  swift_beginAccess();
  v14 = v4[5];
  v18 = a1;
  swift_bridgeObjectRetain();
  MEMORY[0x249501B34](&v18, v14, MEMORY[0x24BEE44F0], v6, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6))
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v9, v13, v6);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    v15 = *(_QWORD *)&v9[*(int *)(v6 + 40)];
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v15;
}

uint64_t sub_243BACFAC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(v3 + 248) = a2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  *(_QWORD *)(v3 + 112) = v4;
  v5 = sub_243BFDD0C();
  *(_QWORD *)(v3 + 120) = v5;
  *(_QWORD *)(v3 + 128) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 136) = swift_task_alloc();
  *(_QWORD *)(v3 + 144) = type metadata accessor for InFlightRequest(255, v4, v6, v7);
  v8 = sub_243BFDD0C();
  *(_QWORD *)(v3 + 152) = v8;
  *(_QWORD *)(v3 + 160) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  *(_QWORD *)(v3 + 184) = swift_task_alloc();
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v3 + 192) = sub_243BFD9F4();
  *(_QWORD *)(v3 + 200) = v9;
  return swift_task_switch();
}

uint64_t sub_243BAD0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  _BYTE *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_DWORD *)(v0 + 248);
  swift_beginAccess();
  v8 = *(_QWORD *)(v6 + 40);
  *(_DWORD *)(v0 + 236) = v7;
  swift_bridgeObjectRetain();
  MEMORY[0x249501B34](v0 + 236, v8, MEMORY[0x24BEE44F0], v5, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  LODWORD(v1) = v9(v2, 1, v5);
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 208) = v10;
  v10(v2, v3);
  if ((_DWORD)v1 == 1)
  {
    if (qword_2543CE380 != -1)
      swift_once();
    v11 = sub_243BFD598();
    __swift_project_value_buffer(v11, (uint64_t)qword_2543CE368);
    swift_retain();
    v12 = sub_243BFD580();
    v13 = sub_243BFDCA0();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 104);
    if (v14)
    {
      v27 = *(_DWORD *)(v0 + 248);
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v28 = v17;
      *(_DWORD *)v16 = 136315394;
      v18 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 88) = sub_243B739A8(v18, v19, &v28);
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v16 + 12) = 1024;
      *(_DWORD *)(v0 + 232) = v27;
      sub_243BFDD54();
      _os_log_impl(&dword_243B4B000, v12, v13, "%s: Received response for non-existent request %u", (uint8_t *)v16, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v17, -1, -1);
      MEMORY[0x249502C5C](v16, -1, -1);
    }
    else
    {
      swift_release();
    }

    sub_243BAF448();
    swift_allocError();
    *v23 = 2;
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 152);
    swift_willThrow();
    v24(v25, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    result = v9(*(_QWORD *)(v0 + 184), 1, *(_QWORD *)(v0 + 144));
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v21 = swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v21;
      *(_QWORD *)v21 = v0;
      *(_QWORD *)(v21 + 8) = sub_243BAD464;
      v22 = *(_OWORD *)(v0 + 136);
      *(_QWORD *)(v21 + 32) = *(_QWORD *)(v0 + 184);
      *(_OWORD *)(v21 + 16) = v22;
      return swift_task_switch();
    }
  }
  return result;
}

uint64_t sub_243BAD464()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BAD4C4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 112) - 8) + 48))(v1, 1) == 1)
  {
    *(_DWORD *)(v0 + 240) = *(_DWORD *)(v0 + 248);
    v2 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    v3 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 152);
    swift_beginAccess();
    sub_243BFD778();
    sub_243BFD73C();
    v2(v3, v4);
    swift_endAccess();
    v1 = *(_QWORD *)(v0 + 136);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 96), v1, *(_QWORD *)(v0 + 120));
  v5(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BAD5FC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  *(_DWORD *)(v0 + 244) = *(_DWORD *)(v0 + 248);
  swift_beginAccess();
  sub_243BFD778();
  sub_243BFD73C();
  v1(v2, v3);
  swift_endAccess();
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 152);
  swift_willThrow();
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BAD70C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 48) = a2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_DWORD *)(v5 + 152) = a1;
  v6 = type metadata accessor for InFlightRequest(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  *(_QWORD *)(v5 + 64) = v6;
  v7 = sub_243BFDD0C();
  *(_QWORD *)(v5 + 72) = v7;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 104) = swift_task_alloc();
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  *(_QWORD *)(v5 + 112) = sub_243BFD9F4();
  *(_QWORD *)(v5 + 120) = v8;
  return swift_task_switch();
}

uint64_t sub_243BAD814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_DWORD *)(v0 + 152);
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 40);
  *(_DWORD *)(v0 + 144) = v5;
  swift_bridgeObjectRetain();
  MEMORY[0x249501B34](v0 + 144, v6, MEMORY[0x24BEE44F0], v4, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v4) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    if (qword_2543CE380 != -1)
      swift_once();
    v7 = sub_243BFD598();
    __swift_project_value_buffer(v7, (uint64_t)qword_2543CE368);
    swift_retain();
    v8 = sub_243BFD580();
    v9 = sub_243BFDCA0();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 56);
    if (v10)
    {
      v19 = *(_DWORD *)(v0 + 152);
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20 = v13;
      *(_DWORD *)v12 = 136315394;
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = sub_243B739A8(v14, v15, &v20);
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v0 + 148) = v19;
      sub_243BFDD54();
      _os_log_impl(&dword_243B4B000, v8, v9, "%s: Received response for non-existent request %u", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v13, -1, -1);
      MEMORY[0x249502C5C](v12, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD **)(v0 + 104);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(v16, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
    *(_QWORD *)(v0 + 128) = *v16;
    swift_retain();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v17;
    *v17 = v0;
    v17[1] = sub_243BADB0C;
    return AsyncThrowingChannel.send(_:)(*(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_243BADB0C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_243BADB60()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BADBAC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39[3];

  v5 = v4;
  v7 = type metadata accessor for InFlightRequest(255, *(_QWORD *)(*v4 + 80), a3, a4);
  v8 = sub_243BFDD0C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v31 - v17;
  v36 = v5 + 5;
  swift_beginAccess();
  v19 = v5[5];
  v37 = a1;
  LODWORD(v39[0]) = a1;
  swift_bridgeObjectRetain();
  MEMORY[0x249501B34](v39, v19, MEMORY[0x24BEE44F0], v7, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v7) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v7);
  swift_retain();
  AsyncThrowingChannel.finish()();
  swift_release();
  if (qword_2543CE380 != -1)
    swift_once();
  v21 = sub_243BFD598();
  __swift_project_value_buffer(v21, (uint64_t)qword_2543CE368);
  swift_retain();
  v22 = sub_243BFD580();
  v23 = sub_243BFDC94();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v33 = v11;
    v25 = v24;
    v32 = swift_slowAlloc();
    v39[0] = v32;
    *(_DWORD *)v25 = 136315394;
    v34 = v9;
    v35 = v8;
    v26 = v5[2];
    v27 = v5[3];
    swift_bridgeObjectRetain();
    v38 = sub_243B739A8(v26, v27, v39);
    v8 = v35;
    sub_243BFDD54();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 1024;
    v28 = v37;
    LODWORD(v38) = v37;
    v9 = v34;
    sub_243BFDD54();
    _os_log_impl(&dword_243B4B000, v22, v23, "%s: Completed request %u", (uint8_t *)v25, 0x12u);
    v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v29, -1, -1);
    v30 = v25;
    v11 = v33;
    MEMORY[0x249502C5C](v30, -1, -1);

  }
  else
  {

    swift_release();
    v28 = v37;
  }
  LODWORD(v38) = v28;
  swift_beginAccess();
  sub_243BFD778();
  sub_243BFD73C();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v7);
}

void sub_243BADF3C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  _BYTE *v22;
  _DWORD v24[8];

  v6 = type metadata accessor for InFlightRequest(255, *(_QWORD *)(*v4 + 80), a3, a4);
  v7 = sub_243BFDD0C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24[-2] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24[-2] - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24[-2] - v15;
  swift_beginAccess();
  v17 = v4[5];
  v24[0] = a1;
  swift_bridgeObjectRetain();
  MEMORY[0x249501B34](v24, v17, MEMORY[0x24BEE44F0], v6, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  v24[7] = a1;
  swift_beginAccess();
  sub_243BFD778();
  sub_243BFD73C();
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v13, v7);
  swift_endAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v16, v7);
  v19 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v6) == 1)
  {
    v18(v16, v7);
    v18(v10, v7);
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t))(v19 + 8);
    swift_retain();
    v20(v10, v6);
    sub_243BAF448();
    v21 = (void *)swift_allocError();
    *v22 = 0;
    AsyncThrowingChannel.fail<>(_:)(v21);
    swift_release();
    v18(v16, v7);

  }
}

uint64_t sub_243BAE16C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  swift_beginAccess();
  v4 = type metadata accessor for InFlightRequest(0, *(_QWORD *)(v1 + 80), v2, v3);
  v5 = swift_bridgeObjectRetain();
  LOBYTE(v4) = MEMORY[0x249501B10](v5, MEMORY[0x24BEE44F0], v4, MEMORY[0x24BEE4500]);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_243BAE1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  int v34;
  uint64_t v35;

  v6 = *(_QWORD *)(*v4 + 80);
  v7 = type metadata accessor for InFlightRequest(255, v6, a3, a4);
  v8 = sub_243BFDD0C();
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v28 = (char *)&v27 - v9;
  v10 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - v15;
  swift_beginAccess();
  v35 = v4[5];
  v31 = v6;
  v32 = a1;
  v17 = sub_243BFD754();
  swift_bridgeObjectRetain();
  MEMORY[0x249502B6C](MEMORY[0x24BEE03C0], v17);
  v18 = sub_243BFD8F8();
  v19 = swift_bridgeObjectRetain();
  if (!MEMORY[0x249501D74](v19, v7))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v18;
  }
  v20 = 0;
  while (1)
  {
    v21 = sub_243BFD994();
    sub_243BFD970();
    if ((v21 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v16, v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v20, v7);
      v22 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_243BFDE5C();
    if (v27 != 8)
      break;
    v33[0] = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 16))(v16, v33, v7);
    swift_unknownObjectRelease();
    v22 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v16, v7);
    sub_243BAF448();
    v23 = (void *)swift_allocError();
    *v24 = 1;
    AsyncThrowingChannel.fail<>(_:)(v23);

    v34 = *(_DWORD *)&v13[*(int *)(v7 + 32)];
    swift_beginAccess();
    sub_243BFD778();
    v25 = v28;
    sub_243BFD73C();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v25, v30);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v7);
    ++v20;
    if (v22 == MEMORY[0x249501D74](v18, v7))
      goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_243BAE500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + 72) && (sub_243BAE16C() & 1) == 0 && (*(_BYTE *)(v0 + 64) & 1) == 0)
  {
    v4 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = sub_243BFDA60();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = qword_2543CE238;
    swift_retain();
    if (v7 != -1)
      swift_once();
    v8 = off_2543CE228;
    v9 = sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v8;
    v10[3] = v9;
    v10[4] = v0;
    v10[5] = v4;
    v10[6] = v5;
    swift_retain();
    *(_QWORD *)(v0 + 72) = sub_243BD73EC((uint64_t)v3, (uint64_t)&unk_2572EE290, (uint64_t)v10);
    swift_release();
  }
}

uint64_t sub_243BAE654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  v7 = sub_243BFDF10();
  v6[12] = v7;
  v6[13] = *(_QWORD *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v8 = sub_243BFDF28();
  v6[16] = v8;
  v6[17] = *(_QWORD *)(v8 - 8);
  v6[18] = swift_task_alloc();
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v6[19] = sub_243BFD9F4();
  v6[20] = v9;
  return swift_task_switch();
}

uint64_t sub_243BAE75C()
{
  uint64_t v0;

  sub_243BFDF1C();
  *(_OWORD *)(v0 + 40) = xmmword_243C01280;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  return swift_task_switch();
}

uint64_t sub_243BAE7B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  sub_243B88508(&qword_2572EE298, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_243BFE144();
  sub_243B88508(&qword_2572EE2A0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_243BFDF34();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[21] = v4;
  v4(v1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  v0[22] = v5;
  *v5 = v0;
  v5[1] = sub_243BAE8BC;
  return sub_243BFE150();
}

uint64_t sub_243BAE8BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 168))(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 96));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 136);
    v3 = *(_QWORD *)(v2 + 144);
    v5 = *(_QWORD *)(v2 + 128);
    (*(void (**)(_QWORD, _QWORD))(v2 + 168))(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 96));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_243BAE960()
{
  uint64_t v0;

  if ((sub_243BAE16C() & 1) != 0)
  {
    *(_QWORD *)(*(_QWORD *)(v0 + 72) + 72) = 0;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_243BAED18(*(_QWORD *)(v0 + 80), *(NSObject **)(v0 + 88));
    sub_243BFDF1C();
    *(_OWORD *)(v0 + 40) = xmmword_243C01280;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_BYTE *)(v0 + 32) = 1;
    return swift_task_switch();
  }
}

uint64_t sub_243BAEA18()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[18], v0[16]);
  return swift_task_switch();
}

uint64_t sub_243BAEA58()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *log;
  _QWORD *v17;
  os_log_type_t type;
  uint64_t v19;
  uint64_t v20;

  if (qword_2543CE380 != -1)
    swift_once();
  v1 = *(void **)(v0 + 184);
  v2 = sub_243BFD598();
  __swift_project_value_buffer(v2, (uint64_t)qword_2543CE368);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = sub_243BFD580();
  v6 = sub_243BFDCB8();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 72);
  if (v7)
  {
    type = v6;
    v10 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v10 = 136315394;
    log = v5;
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_243B739A8(v11, v12, &v20);
    sub_243BFDD54();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 64) = v14;
    sub_243BFDD54();
    *v17 = v14;

    _os_log_impl(&dword_243B4B000, log, type, "%s: Failed to sleep during timeout task: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED240);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x249502C5C](v19, -1, -1);
    MEMORY[0x249502C5C](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  *(_QWORD *)(*(_QWORD *)(v0 + 72) + 72) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_243BAED18(uint64_t a1, NSObject *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = v2;
  v6 = *v2;
  v7 = sub_243BFDF10();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v61 - v12;
  if ((sub_243BAE16C() & 1) != 0)
  {
    if (qword_2543CE380 != -1)
      swift_once();
    v14 = sub_243BFD598();
    __swift_project_value_buffer(v14, (uint64_t)qword_2543CE368);
    swift_retain();
    v15 = sub_243BFD580();
    v16 = sub_243BFDC94();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v69 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = v3[2];
      v20 = v3[3];
      swift_bridgeObjectRetain();
      v68 = sub_243B739A8(v19, v20, &v69);
      sub_243BFDD54();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_243B4B000, v15, v16, "%s: Checked timeout requests, is empty, returning.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v18, -1, -1);
      MEMORY[0x249502C5C](v17, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    if (qword_2543CE380 != -1)
      swift_once();
    v21 = sub_243BFD598();
    v22 = __swift_project_value_buffer(v21, (uint64_t)qword_2543CE368);
    swift_retain();
    v67 = v22;
    v23 = sub_243BFD580();
    v24 = sub_243BFDC94();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v65 = a1;
      v26 = v25;
      v62 = swift_slowAlloc();
      v69 = v62;
      *(_DWORD *)v26 = 136315394;
      v66 = a2;
      v63 = v8;
      v64 = v6;
      v28 = v3[2];
      v27 = v3[3];
      swift_bridgeObjectRetain();
      v68 = sub_243B739A8(v28, v27, &v69);
      sub_243BFDD54();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v29 = sub_243BFE21C();
      v68 = sub_243B739A8(v29, v30, &v69);
      v8 = v63;
      v6 = v64;
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_243B4B000, v23, v24, "%s: Checking for timeout requests that are over %s old.", (uint8_t *)v26, 0x16u);
      v31 = v62;
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v31, -1, -1);
      MEMORY[0x249502C5C](v26, -1, -1);

    }
    else
    {

      swift_release();
    }
    sub_243BFDEEC();
    v32 = sub_243BFE234();
    v33 = MEMORY[0x2495025D8](v32);
    MEMORY[0x2495022B4](v33);
    v34 = *(void (**)(char *, uint64_t))(v8 + 8);
    v34(v10, v7);
    v38 = sub_243BAE1F0((uint64_t)v13, v35, v36, v37);
    v34(v13, v7);
    v69 = v38;
    v39 = *(_QWORD *)(v6 + 80);
    v42 = type metadata accessor for InFlightRequest(255, v39, v40, v41);
    v43 = sub_243BFD9DC();
    v44 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v43);
    if ((sub_243BFDC64() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v45 = sub_243BFD580();
      v46 = sub_243BFDCB8();
      v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        v48 = swift_slowAlloc();
        v67 = swift_slowAlloc();
        v69 = v67;
        *(_DWORD *)v48 = 136315650;
        v66 = v45;
        LODWORD(v65) = v47;
        v50 = v3[2];
        v49 = v3[3];
        swift_bridgeObjectRetain();
        v68 = sub_243B739A8(v50, v49, &v69);
        sub_243BFDD54();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2048;
        v51 = MEMORY[0x249501D50](v38, v42);
        swift_bridgeObjectRelease();
        v68 = v51;
        sub_243BFDD54();
        v52 = swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 22) = 2080;
        v68 = v38;
        MEMORY[0x24BDAC7A8](v52);
        *(&v61 - 2) = v39;
        v53 = MEMORY[0x24BEE44F0];
        v55 = sub_243B76E5C((void (*)(char *, char *))sub_243BAFE0C, (uint64_t)(&v61 - 4), v43, MEMORY[0x24BEE44F0], MEMORY[0x24BEE4078], v44, MEMORY[0x24BEE40A8], v54);
        swift_bridgeObjectRelease();
        v56 = MEMORY[0x249501D08](v55, v53);
        v58 = v57;
        swift_bridgeObjectRelease();
        v68 = sub_243B739A8(v56, v58, &v69);
        sub_243BFDD54();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v59 = v66;
        _os_log_impl(&dword_243B4B000, v66, (os_log_type_t)v65, "%s: Timed out %ld requests: %s", (uint8_t *)v48, 0x20u);
        v60 = v67;
        swift_arrayDestroy();
        MEMORY[0x249502C5C](v60, -1, -1);
        MEMORY[0x249502C5C](v48, -1, -1);

      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
    }
  }
}

uint64_t MessageDemultiplexer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t MessageDemultiplexer.__deallocating_deinit()
{
  MessageDemultiplexer.deinit();
  return swift_deallocClassInstance();
}

unint64_t sub_243BAF448()
{
  unint64_t result;

  result = qword_2572EE260;
  if (!qword_2572EE260)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for DemuxError, &type metadata for DemuxError);
    atomic_store(result, (unint64_t *)&qword_2572EE260);
  }
  return result;
}

unint64_t sub_243BAF490()
{
  unint64_t result;

  result = qword_2572EE270;
  if (!qword_2572EE270)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for DemuxError, &type metadata for DemuxError);
    atomic_store(result, (unint64_t *)&qword_2572EE270);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DemuxError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243BAF520 + 4 * byte_243C01295[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243BAF554 + 4 * byte_243C01290[v4]))();
}

uint64_t sub_243BAF554(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAF55C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BAF564);
  return result;
}

uint64_t sub_243BAF570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BAF578);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243BAF57C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAF584(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DemuxError()
{
  return &type metadata for DemuxError;
}

ValueMetadata *type metadata accessor for DemuxConstants()
{
  return &type metadata for DemuxConstants;
}

uint64_t sub_243BAF5B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFDF10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243BAF64C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[7];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_243BFDF10();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    v13 = a3[9];
    *(_DWORD *)((char *)v7 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    if (*v15)
    {
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    *(uint64_t *)((char *)v7 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  }
  return v7;
}

uint64_t sub_243BAF73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_243BFDF10();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = *(_QWORD *)(a1 + *(int *)(a2 + 36));
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *sub_243BAF7B8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFDF10();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  v11 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  if (*v13)
  {
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_243BAF880(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFDF10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  v10 = *(int *)(a3 + 36);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a2 + v10);
  if (!*(_QWORD *)((char *)a1 + v10))
  {
    if (v13)
    {
      *v11 = v13;
      v11[1] = *((_QWORD *)v12 + 1);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  if (!v13)
  {
    v14 = *(_QWORD *)(a3 + 16);
    v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    v16 = type metadata accessor for AsyncThrowingChannel.Iterator(0, v14, v15, MEMORY[0x24BEE3F20]);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v11, v16);
    goto LABEL_7;
  }
  *v11 = v13;
  swift_retain();
  swift_release();
  v11[1] = *((_QWORD *)v12 + 1);
  swift_retain();
  swift_release();
LABEL_8:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *sub_243BAF9C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFDF10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_243BAFA4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFDF10();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 36);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  if (!*(_QWORD *)((char *)a1 + v10))
    goto LABEL_5;
  if (!*(_QWORD *)v12)
  {
    v13 = *(_QWORD *)(a3 + 16);
    v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    v15 = type metadata accessor for AsyncThrowingChannel.Iterator(0, v13, v14, MEMORY[0x24BEE3F20]);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v11, v15);
LABEL_5:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_release();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  swift_release();
LABEL_6:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_243BAFB50()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BAFB5C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFDF10();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_243BAFBD8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_243BAFBE4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFDF10();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BAFC58()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MessageDemultiplexer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MessageDemultiplexer);
}

uint64_t method lookup function for MessageDemultiplexer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MessageDemultiplexer.__allocating_init(timeout:logTag:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 200))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of MessageDemultiplexer.sendRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MessageDemultiplexer.readCount(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MessageDemultiplexer.next(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 224) + *(_QWORD *)(*(_QWORD *)v2 + 224));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B4D7A0;
  return v8(a1, a2);
}

uint64_t dispatch thunk of MessageDemultiplexer.send(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 232) + *(_QWORD *)(*(_QWORD *)v2 + 232));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B6A428;
  return v8(a1, a2);
}

uint64_t dispatch thunk of MessageDemultiplexer.finish(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MessageDemultiplexer.error(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MessageDemultiplexer.isEmpty.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t sub_243BAFE0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = type metadata accessor for InFlightRequest(0, *(_QWORD *)(v4 + 16), a2, a3);
  *a4 = *(_DWORD *)(a1 + *(int *)(result + 32));
  return result;
}

uint64_t sub_243BAFE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for InFlightRequest(0, *(_QWORD *)(v4 + 16), a3, a4);
  return sub_243BFDEF8() & 1;
}

uint64_t sub_243BAFEA0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243BAFECC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_243B4D7A0;
  return sub_243BAE654(a1, v4, v5, v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for MessageError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_243BAFF98 + 4 * byte_243C01465[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_243BAFFCC + 4 * byte_243C01460[v4]))();
}

uint64_t sub_243BAFFCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAFFD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BAFFDCLL);
  return result;
}

uint64_t sub_243BAFFE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BAFFF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_243BAFFF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BAFFFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageError()
{
  return &type metadata for MessageError;
}

unint64_t sub_243BB001C()
{
  unint64_t result;

  result = qword_2572EE2A8;
  if (!qword_2572EE2A8)
  {
    result = MEMORY[0x249502B6C](&unk_243C014BC, &type metadata for MessageError);
    atomic_store(result, (unint64_t *)&qword_2572EE2A8);
  }
  return result;
}

uint64_t sub_243BB0060@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_243BB11B4(a1, a2, *a3, a4);
}

uint64_t sub_243BB0078@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  _BYTE v24[4];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE *v32;

  LODWORD(v28) = a3;
  v27 = a4;
  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v32 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for ShuffleIDProto();
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v24[-v15];
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  sub_243BFD49C();
  if (v4)
    return sub_243B7FCC0(a1, a2);
  v18 = v8;
  v26 = v7;
  v19 = v27;
  sub_243B6F8F0((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
  v20 = *(_QWORD *)v13;
  v21 = *((_QWORD *)v13 + 1);
  LOBYTE(v29) = v28;
  sub_243B7FBDC(v20, v21);
  UUID.init(serialized:version:)(v20, v21);
  v22 = swift_bridgeObjectRetain();
  v28 = sub_243B91EF4(v22);
  swift_bridgeObjectRelease();
  LOBYTE(v21) = v13[24];
  LOBYTE(v20) = v13[25];
  v25 = v13[26];
  sub_243B7FA20((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v19, v32, v26);
  sub_243B7FCC0(a1, a2);
  v23 = (int *)type metadata accessor for ShuffleID();
  *(_QWORD *)(v19 + v23[5]) = v28;
  *(_BYTE *)(v19 + v23[6]) = v21;
  *(_BYTE *)(v19 + v23[7]) = v20;
  *(_BYTE *)(v19 + v23[8]) = v25;
  return sub_243B7FA20((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ShuffleIDProto);
}

uint64_t sub_243BB0330@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;

  v28 = a3;
  v27 = a4;
  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for AlbumIDProto();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - v15;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  sub_243BFD49C();
  if (v4)
    return sub_243B7FCC0(a1, a2);
  v18 = v8;
  v26 = v7;
  v19 = v27;
  sub_243B6F8F0((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for AlbumIDProto);
  v20 = v13[2];
  v21 = v13[3];
  LOBYTE(v29) = v28;
  sub_243B7FBDC(v20, v21);
  UUID.init(serialized:version:)(v20, v21);
  v23 = *v13;
  v22 = v13[1];
  swift_bridgeObjectRetain();
  sub_243B7FA20((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for AlbumIDProto);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v19, v32, v26);
  sub_243B7FCC0(a1, a2);
  v24 = (_QWORD *)(v19 + *(int *)(type metadata accessor for AlbumID() + 20));
  *v24 = v23;
  v24[1] = v22;
  return sub_243B7FA20((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for AlbumIDProto);
}

uint64_t sub_243BB05AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t PhotoResponseProto;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  _OWORD v16[2];
  uint64_t v17;
  int v18;
  unsigned __int8 v19;

  v18 = a3;
  v8 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v8);
  PhotoResponseProto = type metadata accessor for GeneratePhotoResponseProto(0);
  MEMORY[0x24BDAC7A8](PhotoResponseProto);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v16 - v13;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
  sub_243BFD49C();
  if (v4)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v14, (uint64_t)v11, type metadata accessor for GeneratePhotoResponseProto);
  v19 = v18;
  GeneratePhotoResponse.init(protobuf:version:)((uint64_t)v11, &v19, v16);
  sub_243B7FCC0(a1, a2);
  result = sub_243B7FA20((uint64_t)v14, type metadata accessor for GeneratePhotoResponseProto);
  *a4 = *(_QWORD *)&v16[0];
  return result;
}

uint64_t sub_243BB0764@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  int v19;
  unsigned __int8 v20;

  v19 = a3;
  v8 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for FetchByDayResponseProto(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (unsigned int *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v17 - v13;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  sub_243BFD49C();
  if (v4)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v14, (uint64_t)v11, type metadata accessor for FetchByDayResponseProto);
  v20 = v19;
  FetchByDayResponse.init(protobuf:version:)(v11, &v20, v17);
  sub_243B7FCC0(a1, a2);
  result = sub_243B7FA20((uint64_t)v14, type metadata accessor for FetchByDayResponseProto);
  v16 = *((_QWORD *)&v17[0] + 1);
  *a4 = *(_QWORD *)&v17[0];
  a4[1] = v16;
  return result;
}

uint64_t sub_243BB091C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;

  v7 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v17 - v12;
  v18 = 0;
  memset(&v17[1], 0, 32);
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  sub_243BFD49C();
  if (v3)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v13, (uint64_t)v10, type metadata accessor for StoredPhotoLayoutRectProto);
  v17[0] = *(_OWORD *)v10;
  v15 = *((_QWORD *)v10 + 2);
  v16 = *((_QWORD *)v10 + 3);
  sub_243B7FA20((uint64_t)v10, type metadata accessor for StoredPhotoLayoutRectProto);
  sub_243B7FCC0(a1, a2);
  result = sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayoutRectProto);
  *(_OWORD *)a3 = v17[0];
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v16;
  return result;
}

uint64_t sub_243BB0AD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _OWORD v15[2];
  uint64_t v16;

  v7 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - v12;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  sub_243BFD49C();
  if (v3)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v13, (uint64_t)v10, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  StoredPhotoLayout.ImageLocation.init(protobuf:version:)((uint64_t)v10, a3);
  sub_243B7FCC0(a1, a2);
  return sub_243B7FA20((uint64_t)v13, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BB0C80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  _OWORD v15[2];
  uint64_t v16;

  v7 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = type metadata accessor for SyncFacesRequestProto(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_QWORD *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - v12;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  sub_243BFD49C();
  if (v3)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v13, (uint64_t)v10, type metadata accessor for SyncFacesRequestProto);
  SyncFacesRequest.init(protobuf:version:)(v10, v15);
  sub_243B7FCC0(a1, a2);
  result = sub_243B7FA20((uint64_t)v13, type metadata accessor for SyncFacesRequestProto);
  *a3 = v15[0];
  return result;
}

uint64_t sub_243BB0E34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t (*a4)(uint64_t)@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, void (*a7)(_BYTE *, _OWORD *)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _OWORD *);
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v25 = a8;
  v26 = a7;
  v24 = a3;
  v13 = sub_243BFD3AC();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = ((uint64_t (*)(_QWORD, double))a4)(0, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v23[-v19];
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(a5, a4, a6);
  v21 = v29;
  sub_243BFD49C();
  if (v21)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v20, (uint64_t)v17, a4);
  LOBYTE(v27[0]) = v24;
  v26(v17, v27);
  sub_243B7FCC0(a1, a2);
  return sub_243B7FA20((uint64_t)v20, a4);
}

uint64_t sub_243BB0FD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_243BB0FEC(a1, a2, a3);
}

uint64_t sub_243BB0FEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t PhotoRequestProto;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  _OWORD v15[2];
  uint64_t v16;

  v7 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v7);
  PhotoRequestProto = type metadata accessor for GeneratePhotoRequestProto(0);
  MEMORY[0x24BDAC7A8](PhotoRequestProto);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - v12;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
  sub_243BFD49C();
  if (v3)
    return sub_243B7FCC0(a1, a2);
  sub_243B6F8F0((uint64_t)v13, (uint64_t)v10, type metadata accessor for GeneratePhotoRequestProto);
  GeneratePhotoRequest.init(protobuf:version:)((uint64_t)v10, v15);
  sub_243B7FCC0(a1, a2);
  result = sub_243B7FA20((uint64_t)v13, type metadata accessor for GeneratePhotoRequestProto);
  *a3 = *(_QWORD *)&v15[0];
  return result;
}

uint64_t sub_243BB11A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_243BB11B4(a1, a2, a3, a4);
}

uint64_t sub_243BB11B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t FaceRequestProto;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;

  v28 = a3;
  v27 = a4;
  v7 = sub_243BFD280();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  FaceRequestProto = type metadata accessor for FetchFaceRequestProto(0);
  MEMORY[0x24BDAC7A8](FaceRequestProto);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - v15;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  sub_243BFD49C();
  if (v4)
    return sub_243B7FCC0(a1, a2);
  v26 = v8;
  sub_243B6F8F0((uint64_t)v16, (uint64_t)v13, type metadata accessor for FetchFaceRequestProto);
  v18 = *v13;
  v19 = v13[1];
  LOBYTE(v29) = v28;
  sub_243B7FBDC(v18, v19);
  UUID.init(serialized:version:)(v18, v19);
  v20 = (unsigned int *)((char *)v13 + *(int *)(FaceRequestProto + 24));
  v21 = *((_BYTE *)v20 + 4);
  if (v21)
    v22 = 0;
  else
    v22 = *v20;
  sub_243B7FA20((uint64_t)v13, type metadata accessor for FetchFaceRequestProto);
  v23 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v32, v7);
  sub_243B7FCC0(a1, a2);
  v24 = v23 + *(int *)(type metadata accessor for FetchFaceRequest() + 20);
  *(_QWORD *)v24 = v22;
  *(_BYTE *)(v24 + 8) = v21;
  return sub_243B7FA20((uint64_t)v16, type metadata accessor for FetchFaceRequestProto);
}

uint64_t sub_243BB1434@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_243BB0E34(a1, a2, a3, type metadata accessor for StoredPhotoProto, &qword_2572ED710, (uint64_t)&protocol conformance descriptor for StoredPhotoProto, (void (*)(_BYTE *, _OWORD *))StoredPhoto.init(protobuf:version:), a4);
}

uint64_t ProtobufSerializable.init(serialized:version:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[4];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v24 = a6;
  v26 = a3;
  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v21[-v15];
  v22 = *v26;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  sub_243B7FBDC(a1, a2);
  v25 = a5;
  v26 = a4;
  v17 = a2;
  swift_getAssociatedConformanceWitness();
  sub_243BFD3A0();
  v18 = v29;
  sub_243BFD49C();
  if (v18)
    return sub_243B7FCC0(a1, a2);
  v20 = v23;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 16))(v13, v16, AssociatedTypeWitness);
  LOBYTE(v27[0]) = v22;
  (*(void (**)(_BYTE *, _OWORD *, unsigned __int8 *))(v25 + 32))(v13, v27, v26);
  sub_243B7FCC0(a1, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v20 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_243BB1660(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1CA4(a1, a2, a3, type metadata accessor for FetchFaceRequestProto, &qword_2572ED610, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t ProtobufSerializable.serialized(version:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  char v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  v15 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(a3 + 40))(&v15, a2, a3, v10);
  if (!v4)
  {
    swift_getAssociatedConformanceWitness();
    v3 = sub_243BFD4A8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  }
  return v3;
}

uint64_t sub_243BB17C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_243BB0764(a1, a2, *a3, a4);
}

uint64_t sub_243BB17E0(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = type metadata accessor for FetchByDayResponseProto(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v4) = *a1;
  v6 = v1[1];
  v10 = *v1;
  v11 = v6;
  v12 = v4;
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  sub_243BFD4CC();
  v7 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v5, type metadata accessor for FetchByDayResponseProto);
  return v7;
}

uint64_t sub_243BB18E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_243BB0FEC(a1, a2, a3);
}

uint64_t sub_243BB18F8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1978(a1, a2, a3, type metadata accessor for GeneratePhotoRequestProto, &qword_2572ED718, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243BB192C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_243BB05AC(a1, a2, *a3, a4);
}

uint64_t sub_243BB1944(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1978(a1, a2, a3, type metadata accessor for GeneratePhotoResponseProto, &qword_2572ED720, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243BB1978(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  char v18;

  v11 = a4(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v16[-v12];
  LOBYTE(v12) = *a1;
  v17 = *v6;
  v18 = v12;
  sub_243B88508(a5, a4, a6);
  sub_243BFD4CC();
  v14 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v13, a4);
  return v14;
}

uint64_t sub_243BB1A80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_243BB0C80(a1, a2, a3);
}

uint64_t sub_243BB1A98(_BYTE *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  __int128 v9;
  char v10;

  v3 = type metadata accessor for SyncFacesRequestProto(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v4) = *a1;
  v9 = *v1;
  v10 = v4;
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  sub_243BFD4CC();
  v6 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v5, type metadata accessor for SyncFacesRequestProto);
  return v6;
}

uint64_t sub_243BB1B98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned __int8 v11;

  v11 = *a3;
  v9 = MEMORY[0x249502B6C](&protocol conformance descriptor for SyncedPhotosFace<A>, a4);
  return ProtobufSerializable.init(serialized:version:)(a1, a2, &v11, a4, v9, a5);
}

uint64_t sub_243BB1C0C(char *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x249502B6C](&protocol conformance descriptor for SyncedPhotosFace<A>);
  return ProtobufSerializable.serialized(version:)(a1, a2, v4);
}

uint64_t sub_243BB1C58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_243BB0330(a1, a2, *a3, a4);
}

uint64_t sub_243BB1C70(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1CA4(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, &qword_2572ED918, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t sub_243BB1CA4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  char v18;

  v11 = a4(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v16[-v12];
  LOBYTE(v12) = *a1;
  v17 = v6;
  v18 = v12;
  sub_243B88508(a5, a4, a6);
  sub_243BFD4CC();
  v14 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v13, a4);
  return v14;
}

uint64_t sub_243BB1DA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_243BB0078(a1, a2, *a3, a4);
}

uint64_t sub_243BB1DC0(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1CA4(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, &qword_2572ED968, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

uint64_t sub_243BB1DF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_243BB0E34(a1, a2, *a3, type metadata accessor for StoredPhotoProto, &qword_2572ED710, (uint64_t)&protocol conformance descriptor for StoredPhotoProto, (void (*)(_BYTE *, _OWORD *))StoredPhoto.init(protobuf:version:), a4);
}

uint64_t sub_243BB1E2C(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1CA4(a1, a2, a3, type metadata accessor for StoredPhotoProto, &qword_2572ED710, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BB1E60(uint64_t *a1, unsigned __int8 *a2)
{
  return sub_243BB1E78(a1, *a2);
}

uint64_t sub_243BB1E78(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;

  v26 = a2;
  v4 = type metadata accessor for StoredPhotoProto(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - v8;
  v10 = type metadata accessor for StoredPhoto(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    v28 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_243B7CC10(0, v15, 0);
    v17 = v14 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v18 = *(_QWORD *)(v5 + 72);
    v23 = v14;
    v24 = v18;
    while (1)
    {
      sub_243B6F8F0(v17, (uint64_t)v9, type metadata accessor for StoredPhotoProto);
      v19 = v25;
      sub_243B6F8F0((uint64_t)v9, v25, type metadata accessor for StoredPhotoProto);
      v27 = v26;
      StoredPhoto.init(protobuf:version:)(v19, &v27, (uint64_t)v13);
      sub_243B7FA20((uint64_t)v9, type metadata accessor for StoredPhotoProto);
      v16 = v28;
      if (v2)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CC10(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v28;
      }
      v21 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_243B7CC10(v20 > 1, v21 + 1, 1);
        v16 = v28;
      }
      *(_QWORD *)(v16 + 16) = v21 + 1;
      sub_243B6F934((uint64_t)v13, v16+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v21, type metadata accessor for StoredPhoto);
      v17 += v24;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v16;
}

uint64_t static CustomListProto<>.deserialize(list:version:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v8;
  uint64_t (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  char v17;
  uint64_t v18;
  uint64_t v19;

  LOBYTE(v19) = *a2;
  v8 = v19;
  v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = v9(&v19, AssociatedTypeWitness, a5);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v17 = v8;
  swift_getAssociatedTypeWitness();
  v11 = sub_243BFD9DC();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
  v13 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v11);
  v14 = sub_243B76E5C((void (*)(char *, char *))sub_243BB29BC, (uint64_t)v16, v11, a3, v12, v13, MEMORY[0x24BEE3F20], (uint64_t)&v18);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_243BB21E4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_243BB21FC(a1, *a2, a3);
}

uint64_t sub_243BB21FC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a2;
  v28 = a3;
  v4 = type metadata accessor for StoredPhoto(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoredPhotoProto(0);
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoListProto(0);
  MEMORY[0x24BDAC7A8](v11);
  v27 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v26[1] = v11;
    v33 = MEMORY[0x24BEE4AF8];
    sub_243B7CCD4(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v29 = *(_QWORD *)(v5 + 72);
    do
    {
      v16 = sub_243B6F8F0(v15, (uint64_t)v7, type metadata accessor for StoredPhoto);
      MEMORY[0x24BDAC7A8](v16);
      v26[-2] = v7;
      LOBYTE(v26[-1]) = v31;
      sub_243B88508(&qword_2572ED710, v17, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
      v18 = v32;
      sub_243BFD4CC();
      v32 = v18;
      sub_243B7FA20((uint64_t)v7, type metadata accessor for StoredPhoto);
      v19 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_243B7CCD4(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v33;
      }
      v21 = *(_QWORD *)(v19 + 16);
      v20 = *(_QWORD *)(v19 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_243B7CCD4(v20 > 1, v21 + 1, 1);
        v19 = v33;
      }
      *(_QWORD *)(v19 + 16) = v21 + 1;
      sub_243B6F934((uint64_t)v10, v19+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v21, type metadata accessor for StoredPhotoProto);
      v15 += v29;
      --v13;
    }
    while (v13);
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v22 = (uint64_t)v28;
  *v28 = v14;
  v23 = sub_243BFD388();
  MEMORY[0x24BDAC7A8](v23);
  v26[-2] = v22;
  sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  v24 = (uint64_t)v27;
  sub_243BFD4CC();
  return sub_243BB2AD8(v24, v22);
}

uint64_t static CustomListProto<>.serialize(list:version:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *a2;
  v20 = a1;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = v7;
  v8 = sub_243BFD9DC();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
  v11 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v8);
  result = sub_243B76E5C((void (*)(char *, char *))sub_243BB29E0, (uint64_t)v14, v8, AssociatedTypeWitness, v10, v11, MEMORY[0x24BEE3F20], (uint64_t)&v19);
  if (!v5)
  {
    v13 = result;
    swift_getAssociatedTypeWitness();
    LOBYTE(v20) = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(a5 + 24))(v13, &v20);
  }
  return result;
}

uint64_t sub_243BB265C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_243BB0E34(a1, a2, *a3, type metadata accessor for StoredPhotoLayoutProto, &qword_2572EDDA8, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto, (void (*)(_BYTE *, _OWORD *))StoredPhotoLayout.init(protobuf:version:), a4);
}

uint64_t sub_243BB2694(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BB1CA4(a1, a2, a3, type metadata accessor for StoredPhotoLayoutProto, &qword_2572EDDA8, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BB26C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_243BB0AD8(a1, a2, a3);
}

uint64_t sub_243BB26E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE v6[16];
  uint64_t v7;

  v1 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v0;
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  sub_243BFD4CC();
  v4 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v3, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  return v4;
}

uint64_t sub_243BB27D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_243BB091C(a1, a2, a3);
}

uint64_t sub_243BB27E8()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[16];
  __int128 v8;
  __int128 v9;

  v1 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = v0[1];
  v8 = *v0;
  v9 = v4;
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  sub_243BFD4CC();
  v5 = sub_243BFD4A8();
  sub_243B7FA20((uint64_t)v3, type metadata accessor for StoredPhotoLayoutRectProto);
  return v5;
}

uint64_t sub_243BB28E0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[15];
  char v19;

  v11 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = &v18[-v14];
  (*(void (**)(_BYTE *, uint64_t, double))(v16 + 16))(&v18[-v14], a1, v13);
  v19 = a2;
  result = (*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v11 + 32))(v15, &v19, a3, v11);
  if (v6)
    *a6 = v6;
  return result;
}

uint64_t sub_243BB29BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_243BB28E0(a1, *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_243BB29E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 40);
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 + 8) + 40))(&v8, v5);
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t dispatch thunk of ProtobufSerializable.init(protobuf:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ProtobufSerializable.protobuf(version:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of static CustomListProto.deserialize(list:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static CustomListProto.serialize(list:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of ListProto.init(protoList:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ListProto.protoList(version:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

double *sub_243BB2AA4(double *a1)
{
  double *v1;

  return sub_243BA0CB4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_243BB2AC0(_QWORD *a1)
{
  uint64_t v1;

  return sub_243B9EFF8(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_243BB2AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoredPhotoListProto(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of Serializable.init(serialized:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of Serializable.serialized(version:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Serializable.gather(attachments:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of Serializable.save(attachments:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

BOOL static SerializationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SerializationError.hash(into:)()
{
  return sub_243BFE1B0();
}

uint64_t SerializationError.hashValue.getter()
{
  sub_243BFE1A4();
  sub_243BFE1B0();
  return sub_243BFE1E0();
}

unint64_t sub_243BB2BF8()
{
  unint64_t result;

  result = qword_2572EE2B0;
  if (!qword_2572EE2B0)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for SerializationError, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&qword_2572EE2B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SerializationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SerializationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_243BB2D18 + 4 * byte_243C01595[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_243BB2D4C + 4 * byte_243C01590[v4]))();
}

uint64_t sub_243BB2D4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BB2D54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BB2D5CLL);
  return result;
}

uint64_t sub_243BB2D68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BB2D70);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_243BB2D74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BB2D7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

uint64_t AlbumIDProto.album.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AlbumIDProto.album.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AlbumIDProto.album.modify())()
{
  return nullsub_1;
}

uint64_t AlbumIDProto.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_243B7FBDC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AlbumIDProto.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AlbumIDProto.id.modify())()
{
  return nullsub_1;
}

uint64_t AlbumIDProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AlbumIDProto() + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AlbumIDProto()
{
  uint64_t result;

  result = qword_2572EE340;
  if (!qword_2572EE340)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AlbumIDProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AlbumIDProto() + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AlbumIDProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for AlbumIDProto();
  return nullsub_1;
}

uint64_t AlbumIDProto.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_243C01680;
  type metadata accessor for AlbumIDProto();
  return sub_243BFD388();
}

uint64_t static AlbumIDProto.protoMessageName.getter()
{
  return 0x5044496D75626C41;
}

uint64_t sub_243BB2FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE2B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE2B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "album";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "id";
  *((_QWORD *)v11 + 1) = 2;
  v11[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static AlbumIDProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2572EB738 != -1)
    swift_once();
  v2 = sub_243BFD574();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2572EE2B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t AlbumIDProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_243BFD418();
      }
      else if (result == 1)
      {
        sub_243BFD448();
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t AlbumIDProto.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_243BFD520(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t AlbumIDProto.hashValue.getter()
{
  sub_243BFE1A4();
  type metadata accessor for AlbumIDProto();
  sub_243B88508(&qword_2572EE2D0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t sub_243BB33AC@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_243C01680;
  return sub_243BFD388();
}

uint64_t sub_243BB33DC()
{
  return 0x5044496D75626C41;
}

uint64_t sub_243BB3400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_243BB3440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_243BB3480())()
{
  return nullsub_1;
}

uint64_t sub_243BB3494()
{
  return AlbumIDProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB34A8()
{
  return AlbumIDProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB34C0()
{
  sub_243B88508(&qword_2572EE380, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB3514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2572EB738 != -1)
    swift_once();
  v2 = sub_243BFD574();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2572EE2B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_243BB3584()
{
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB35C4()
{
  sub_243BFE1A4();
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t sub_243BB3618()
{
  sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BB3668()
{
  sub_243BFE1A4();
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t _s10PhotosFace12AlbumIDProtoV2eeoiySbAC_ACtFZ_0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_243BFE0F0() & 1) != 0))
  {
    sub_243BC4650(a1[2], a1[3]);
    if ((v13 & 1) != 0)
    {
      v14 = type metadata accessor for AlbumIDProto();
      v15 = (char *)a1 + *(int *)(v14 + 24);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v7, &a2[*(int *)(v14 + 24)], v4);
      sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v12 = sub_243BFD7D8();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v7, v4);
      v17(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_243BB3814()
{
  return sub_243B88508(&qword_2572EE2D8, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t sub_243BB3840()
{
  return sub_243B88508(&qword_2572ED918, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t sub_243BB386C()
{
  return sub_243B88508(&qword_2572EE2D0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t sub_243BB3898()
{
  return sub_243B88508(&qword_2572EE2E0, (uint64_t (*)(uint64_t))type metadata accessor for AlbumIDProto, (uint64_t)&protocol conformance descriptor for AlbumIDProto);
}

uint64_t *initializeBufferWithCopyOfBuffer for AlbumIDProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    sub_243B7FBDC(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_243BFD394();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for AlbumIDProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_243B7FCC0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AlbumIDProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  sub_243B7FBDC(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

_QWORD *assignWithCopy for AlbumIDProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  sub_243B7FBDC(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_243B7FCC0(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AlbumIDProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for AlbumIDProto(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_243B7FCC0(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = sub_243BFD394();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlbumIDProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB3BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AlbumIDProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB3C54(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BB3CC8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t (*StoredPhotoListProto.list.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoListProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB3E40(type metadata accessor for StoredPhotoListProto, a1);
}

uint64_t type metadata accessor for StoredPhotoListProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE458);
}

uint64_t StoredPhotoListProto.unknownFields.setter(uint64_t a1)
{
  return sub_243BB3EAC(a1, type metadata accessor for StoredPhotoListProto);
}

uint64_t (*StoredPhotoListProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhotoListProto(0);
  return nullsub_1;
}

uint64_t StoredPhotoListProto.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_243BB3F28((void (*)(_QWORD))type metadata accessor for StoredPhotoListProto, a1);
}

uint64_t GenericListProto.list.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GenericListProto.list.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*GenericListProto.list.modify())()
{
  return nullsub_1;
}

uint64_t GenericListProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB3E40(type metadata accessor for GenericListProto, a1);
}

uint64_t sub_243BB3E40@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t type metadata accessor for GenericListProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE4E8);
}

uint64_t GenericListProto.unknownFields.setter(uint64_t a1)
{
  return sub_243BB3EAC(a1, type metadata accessor for GenericListProto);
}

uint64_t sub_243BB3EAC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*GenericListProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GenericListProto(0);
  return nullsub_1;
}

uint64_t GenericListProto.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_243BB3F28((void (*)(_QWORD))type metadata accessor for GenericListProto, a1);
}

uint64_t sub_243BB3F28@<X0>(void (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = MEMORY[0x24BEE4AF8];
  a1(0);
  return sub_243BFD388();
}

unint64_t static StoredPhotoListProto.protoMessageName.getter()
{
  return 0xD000000000000014;
}

uint64_t sub_243BB3F84(uint64_t a1)
{
  return sub_243BB4358(a1, qword_2572EE398);
}

uint64_t static StoredPhotoListProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB740, (uint64_t)qword_2572EE398, a1);
}

uint64_t StoredPhotoListProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for StoredPhotoProto(0);
        sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
        sub_243BFD478();
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t StoredPhotoListProto.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for StoredPhotoProto(0),
        sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto), result = sub_243BFD544(), !v1))
  {
    type metadata accessor for StoredPhotoListProto(0);
    return sub_243BFD37C();
  }
  return result;
}

uint64_t static StoredPhotoListProto.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B89294, type metadata accessor for StoredPhotoListProto) & 1;
}

uint64_t StoredPhotoListProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for StoredPhotoListProto, &qword_2572EE3C8, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

unint64_t sub_243BB41A4()
{
  return 0xD000000000000014;
}

uint64_t (*sub_243BB41C8())()
{
  return nullsub_1;
}

uint64_t sub_243BB41DC()
{
  return StoredPhotoListProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB41F0()
{
  return StoredPhotoListProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB4204()
{
  sub_243B88508(&qword_2572EE528, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB4254@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB740, (uint64_t)qword_2572EE398, a1);
}

uint64_t sub_243BB4270()
{
  sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB42B4()
{
  sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BB4308(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B89294, type metadata accessor for StoredPhotoListProto) & 1;
}

unint64_t static GenericListProto.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t sub_243BB434C(uint64_t a1)
{
  return sub_243BB4358(a1, qword_2572EE3B0);
}

uint64_t sub_243BB4358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_243BFD574();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_243BFFAC0;
  v8 = v7 + v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "list";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = sub_243BFD55C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  return sub_243BFD568();
}

uint64_t static GenericListProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB748, (uint64_t)qword_2572EE3B0, a1);
}

uint64_t sub_243BB4474@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_243BFD574();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t GenericListProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_243BFD3DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_243BFD40C();
  }
  return result;
}

uint64_t GenericListProto.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16) || (result = sub_243BFD4F0(), !v1))
  {
    type metadata accessor for GenericListProto(0);
    return sub_243BFD37C();
  }
  return result;
}

uint64_t static GenericListProto.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B899BC, type metadata accessor for GenericListProto) & 1;
}

uint64_t GenericListProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for GenericListProto, &qword_2572EE3D0, (uint64_t)&protocol conformance descriptor for GenericListProto);
}

uint64_t sub_243BB4620(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  sub_243BFE1A4();
  a1(0);
  sub_243B88508(a2, a1, a3);
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t sub_243BB469C@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return sub_243BFD388();
}

unint64_t sub_243BB46C4()
{
  return 0xD000000000000010;
}

uint64_t sub_243BB46E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_243BB4720(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_243BB4760()
{
  return GenericListProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB4774()
{
  return GenericListProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB4788()
{
  sub_243B88508(&qword_2572EE520, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB47D8@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB748, (uint64_t)qword_2572EE3B0, a1);
}

uint64_t sub_243BB47F4@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_243BFD574();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_243BB4860()
{
  sub_243B88508((unint64_t *)&qword_2572EE3F0, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB48A0()
{
  sub_243B88508((unint64_t *)&qword_2572EE3F0, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BB48F0(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B899BC, type metadata accessor for GenericListProto) & 1;
}

uint64_t sub_243BB4918(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, _QWORD, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v8 = sub_243BFD394();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  if ((a3(*a1, *(_QWORD *)a2, v13) & 1) != 0)
  {
    v16 = a4(0);
    v17 = (char *)a1 + *(int *)(v16 + 20);
    v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v18(v15, v17, v8);
    v18(v11, &a2[*(int *)(v16 + 20)], v8);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = sub_243BFD7D8();
    v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v11, v8);
    v20(v15, v8);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_243BB4A54()
{
  return sub_243B88508(&qword_2572EE3D8, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

uint64_t sub_243BB4A80()
{
  return sub_243B88508(&qword_2572EDDB0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

uint64_t sub_243BB4AAC()
{
  return sub_243B88508(&qword_2572EE3C8, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

uint64_t sub_243BB4AD8()
{
  return sub_243B88508(&qword_2572EE3E0, type metadata accessor for StoredPhotoListProto, (uint64_t)&protocol conformance descriptor for StoredPhotoListProto);
}

uint64_t sub_243BB4B04()
{
  return sub_243B88508(&qword_2572EE3E8, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
}

uint64_t sub_243BB4B30()
{
  return sub_243B88508((unint64_t *)&qword_2572EE3F0, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
}

uint64_t sub_243BB4B5C()
{
  return sub_243B88508(&qword_2572EE3D0, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
}

uint64_t sub_243BB4B88()
{
  return sub_243B88508(&qword_2572EE3F8, type metadata accessor for GenericListProto, (uint64_t)&protocol conformance descriptor for GenericListProto);
}

uint64_t getEnumTagSinglePayload for StoredPhotoListProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for StoredPhotoListProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *_s10PhotosFace20StoredPhotoListProtoVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_243BFD394();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t _s10PhotosFace20StoredPhotoListProtoVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *_s10PhotosFace20StoredPhotoListProtoVwcp_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_243BFD394();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *_s10PhotosFace20StoredPhotoListProtoVwca_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *_s10PhotosFace20StoredPhotoListProtoVwtk_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *_s10PhotosFace20StoredPhotoListProtoVwta_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericListProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for GenericListProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_indexTm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BB4F8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL FetchFaceRequestProto.hasDay.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 24) + 4) & 1) == 0;
}

uint64_t type metadata accessor for FetchFaceRequestProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE5E8);
}

uint64_t FetchFaceRequestProto.day.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 24));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t FetchFaceRequestProto.day.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for FetchFaceRequestProto(0);
  v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t FetchFaceRequestProto.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_243B7FBDC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t FetchFaceRequestProto.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*FetchFaceRequestProto.id.modify())()
{
  return nullsub_1;
}

uint64_t (*FetchFaceRequestProto.day.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_243BB5178;
}

uint64_t sub_243BB5178(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result + *(int *)(result + 12);
  *(_DWORD *)v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

Swift::Void __swiftcall FetchFaceRequestProto.clearDay()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 24);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t FetchFaceRequestProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FetchFaceRequestProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FetchFaceRequestProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FetchFaceRequestProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for FetchFaceRequestProto(0);
  return nullsub_1;
}

uint64_t FetchFaceRequestProto.init()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t FaceRequestProto;
  uint64_t result;
  char *v4;

  *a1 = xmmword_243C01680;
  FaceRequestProto = type metadata accessor for FetchFaceRequestProto(0);
  result = sub_243BFD388();
  v4 = (char *)a1 + *(int *)(FaceRequestProto + 24);
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  return result;
}

uint64_t FetchByDayResponseProto.day.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t FetchByDayResponseProto.day.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FetchByDayResponseProto.day.modify())()
{
  return nullsub_1;
}

uint64_t FetchByDayResponseProto.photos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FetchByDayResponseProto.photos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*FetchByDayResponseProto.photos.modify())()
{
  return nullsub_1;
}

uint64_t FetchByDayResponseProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FetchByDayResponseProto(0) + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FetchByDayResponseProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE680);
}

uint64_t FetchByDayResponseProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FetchByDayResponseProto(0) + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FetchByDayResponseProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for FetchByDayResponseProto(0);
  return nullsub_1;
}

uint64_t FetchByDayResponseProto.init()@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  type metadata accessor for FetchByDayResponseProto(0);
  return sub_243BFD388();
}

unint64_t static FetchFaceRequestProto.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_243BB5454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE530);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE530);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "day";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static FetchFaceRequestProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB750, (uint64_t)qword_2572EE530, a1);
}

uint64_t FetchFaceRequestProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_243BFD3DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for FetchFaceRequestProto(0);
      sub_243BFD454();
    }
    else if (result == 1)
    {
      sub_243BFD418();
    }
    v0 = 0;
  }
  return result;
}

void FetchFaceRequestProto.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BB56C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_243BFD4FC(), !v2))
  {
    result = sub_243BB5770(v3);
    if (!v2)
    {
      type metadata accessor for FetchFaceRequestProto(0);
      return sub_243BFD37C();
    }
  }
  return result;
}

uint64_t sub_243BB5770(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for FetchFaceRequestProto(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return sub_243BFD52C();
  return result;
}

uint64_t FetchFaceRequestProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for FetchFaceRequestProto, &qword_2572EE560, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243BB5804@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;

  *a2 = xmmword_243C01680;
  result = sub_243BFD388();
  v5 = (char *)a2 + *(int *)(a1 + 24);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  return result;
}

unint64_t sub_243BB5850()
{
  return 0xD000000000000015;
}

uint64_t sub_243BB586C()
{
  return FetchFaceRequestProto.decodeMessage<A>(decoder:)();
}

void sub_243BB5880()
{
  FetchFaceRequestProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB5894()
{
  sub_243B88508(&qword_2572EE6C8, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB58E4@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB750, (uint64_t)qword_2572EE530, a1);
}

uint64_t sub_243BB5900()
{
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB5940()
{
  sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
  return sub_243BFD4C0();
}

unint64_t static FetchByDayResponseProto.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_243BB59B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE548);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE548);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "day";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "photos";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static FetchByDayResponseProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB758, (uint64_t)qword_2572EE548, a1);
}

uint64_t FetchByDayResponseProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for StoredPhotoProto(0);
        sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
        sub_243BFD478();
      }
      else if (result == 1)
      {
        sub_243BFD460();
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t FetchByDayResponseProto.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = sub_243BFD52C(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for StoredPhotoProto(0),
          sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto), result = sub_243BFD544(), !v1))
    {
      type metadata accessor for FetchByDayResponseProto(0);
      return sub_243BFD37C();
    }
  }
  return result;
}

uint64_t FetchByDayResponseProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for FetchByDayResponseProto, &qword_2572EE568, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t sub_243BB5D40@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  return sub_243BFD388();
}

unint64_t sub_243BB5D6C()
{
  return 0xD000000000000017;
}

uint64_t sub_243BB5D88()
{
  return FetchByDayResponseProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB5D9C()
{
  return FetchByDayResponseProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB5DB0()
{
  sub_243B88508(&qword_2572EE6C0, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB5E00@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB758, (uint64_t)qword_2572EE548, a1);
}

uint64_t sub_243BB5E1C()
{
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB5E5C()
{
  sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
  return sub_243BFD4C0();
}

uint64_t _s10PhotosFace23FetchByDayResponseProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (sub_243B89294(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v11 = type metadata accessor for FetchByDayResponseProto(0);
    v12 = a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v7, a2 + *(int *)(v11 + 24), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_243BFD7D8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _s10PhotosFace05FetchB12RequestProtoV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t FaceRequestProto;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  _DWORD *v17;
  int v18;
  char v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  sub_243BC4650(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_4;
  FaceRequestProto = type metadata accessor for FetchFaceRequestProto(0);
  v13 = FaceRequestProto;
  v14 = *(int *)(FaceRequestProto + 24);
  v15 = (_DWORD *)((char *)a1 + v14);
  v16 = *((_BYTE *)a1 + v14 + 4);
  v17 = (_DWORD *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 4);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_4;
LABEL_8:
    v20 = (char *)a1 + *(int *)(FaceRequestProto + 20);
    v21 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v21(v10, v20, v4);
    v21(v7, (char *)(a2 + *(int *)(v13 + 20)), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = sub_243BFD7D8();
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v7, v4);
    v22(v10, v4);
    return v19 & 1;
  }
  if (v18)
    goto LABEL_8;
LABEL_4:
  v19 = 0;
  return v19 & 1;
}

uint64_t sub_243BB6158()
{
  return sub_243B88508(&qword_2572EE570, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243BB6184()
{
  return sub_243B88508(&qword_2572ED610, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243BB61B0()
{
  return sub_243B88508(&qword_2572EE560, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243BB61DC()
{
  return sub_243B88508(&qword_2572EE578, type metadata accessor for FetchFaceRequestProto, (uint64_t)&protocol conformance descriptor for FetchFaceRequestProto);
}

uint64_t sub_243BB6208()
{
  return sub_243B88508(&qword_2572EE580, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t sub_243BB6234()
{
  return sub_243B88508(&qword_2572ED618, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t sub_243BB6260()
{
  return sub_243B88508(&qword_2572EE568, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t sub_243BB628C()
{
  return sub_243B88508(&qword_2572EE588, type metadata accessor for FetchByDayResponseProto, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
}

uint64_t sub_243BB62B8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;

  result = type metadata accessor for FetchFaceRequestProto(0);
  v5 = (int *)(a1 + *(int *)(result + 24));
  if (*((_BYTE *)v5 + 4))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_243BB62FC(int *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for FetchFaceRequestProto(0);
  v5 = a2 + *(int *)(result + 24);
  *(_DWORD *)v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchFaceRequestProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_243B7FBDC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_243BFD394();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v14[4] = v15[4];
  }
  return a1;
}

uint64_t destroy for FetchFaceRequestProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for FetchFaceRequestProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *a2;
  v7 = a2[1];
  sub_243B7FBDC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  return a1;
}

uint64_t *assignWithCopy for FetchFaceRequestProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;

  v6 = *a2;
  v7 = a2[1];
  sub_243B7FBDC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_243B7FCC0(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v17;
  return a1;
}

_OWORD *initializeWithTake for FetchFaceRequestProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v12[4];
  return a1;
}

uint64_t *assignWithTake for FetchFaceRequestProto(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_243B7FCC0(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchFaceRequestProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB6698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FetchFaceRequestProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_243BB672C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_243BFD394();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BB67A8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FetchByDayResponseProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_243BFD394();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for FetchByDayResponseProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for FetchByDayResponseProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_243BFD394();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for FetchByDayResponseProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for FetchByDayResponseProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for FetchByDayResponseProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchByDayResponseProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB6AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FetchByDayResponseProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB6B70(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BB6BE4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t GeneratePhotoRequestProto.identifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GeneratePhotoRequestProto.identifiers.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*GeneratePhotoRequestProto.identifiers.modify())()
{
  return nullsub_1;
}

uint64_t GeneratePhotoRequestProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB3E40(type metadata accessor for GeneratePhotoRequestProto, a1);
}

uint64_t type metadata accessor for GeneratePhotoRequestProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE788);
}

uint64_t GeneratePhotoRequestProto.unknownFields.setter(uint64_t a1)
{
  return sub_243BB3EAC(a1, type metadata accessor for GeneratePhotoRequestProto);
}

uint64_t (*GeneratePhotoRequestProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GeneratePhotoRequestProto(0);
  return nullsub_1;
}

uint64_t GeneratePhotoRequestProto.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_243BB3F28((void (*)(_QWORD))type metadata accessor for GeneratePhotoRequestProto, a1);
}

uint64_t (*GeneratePhotoResponseProto.results.modify())()
{
  return nullsub_1;
}

uint64_t GeneratePhotoResponseProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB3E40(type metadata accessor for GeneratePhotoResponseProto, a1);
}

uint64_t type metadata accessor for GeneratePhotoResponseProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE818);
}

uint64_t GeneratePhotoResponseProto.unknownFields.setter(uint64_t a1)
{
  return sub_243BB3EAC(a1, type metadata accessor for GeneratePhotoResponseProto);
}

uint64_t (*GeneratePhotoResponseProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for GeneratePhotoResponseProto(0);
  return nullsub_1;
}

uint64_t GeneratePhotoResponseProto.init()@<X0>(_QWORD *a1@<X8>)
{
  return sub_243BB3F28((void (*)(_QWORD))type metadata accessor for GeneratePhotoResponseProto, a1);
}

unint64_t static GeneratePhotoRequestProto.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_243BB6D94(uint64_t a1)
{
  return sub_243BB70A8(a1, qword_2572EE6D0, (uint64_t)"identifiers", 11);
}

uint64_t static GeneratePhotoRequestProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB760, (uint64_t)qword_2572EE6D0, a1);
}

uint64_t GeneratePhotoRequestProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_243BFD3DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_243BFD40C();
  }
  return result;
}

uint64_t GeneratePhotoRequestProto.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16) || (result = sub_243BFD4F0(), !v1))
  {
    type metadata accessor for GeneratePhotoRequestProto(0);
    return sub_243BFD37C();
  }
  return result;
}

uint64_t static GeneratePhotoRequestProto.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B899BC, type metadata accessor for GeneratePhotoRequestProto) & 1;
}

uint64_t GeneratePhotoRequestProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for GeneratePhotoRequestProto, &qword_2572EE700, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

unint64_t sub_243BB6F0C()
{
  return 0xD000000000000019;
}

uint64_t sub_243BB6F28()
{
  return GeneratePhotoRequestProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB6F3C()
{
  return GeneratePhotoRequestProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB6F50()
{
  sub_243B88508(&qword_2572EE858, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB6FA0@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB760, (uint64_t)qword_2572EE6D0, a1);
}

uint64_t sub_243BB6FBC()
{
  sub_243B88508(&qword_2572ED718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB6FFC()
{
  sub_243B88508(&qword_2572ED718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BB704C(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B899BC, type metadata accessor for GeneratePhotoRequestProto) & 1;
}

unint64_t static GeneratePhotoResponseProto.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_243BB7090(uint64_t a1)
{
  return sub_243BB70A8(a1, qword_2572EE6E8, (uint64_t)"results", 7);
}

uint64_t sub_243BB70A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_243BFD574();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_243BFFAC0;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C318];
  v14 = sub_243BFD55C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return sub_243BFD568();
}

uint64_t static GeneratePhotoResponseProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB768, (uint64_t)qword_2572EE6E8, a1);
}

uint64_t GeneratePhotoResponseProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for StoredPhotoProto(0);
        sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
        sub_243BFD478();
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t GeneratePhotoResponseProto.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for StoredPhotoProto(0),
        sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto), result = sub_243BFD544(), !v1))
  {
    type metadata accessor for GeneratePhotoResponseProto(0);
    return sub_243BFD37C();
  }
  return result;
}

uint64_t static GeneratePhotoResponseProto.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B89294, type metadata accessor for GeneratePhotoResponseProto) & 1;
}

uint64_t GeneratePhotoResponseProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for GeneratePhotoResponseProto, &qword_2572EE708, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

unint64_t sub_243BB73C0()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_243BB73DC()
{
  return GeneratePhotoResponseProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB73F0()
{
  return GeneratePhotoResponseProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB7404()
{
  sub_243B88508(&qword_2572EE850, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB7454@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB768, (uint64_t)qword_2572EE6E8, a1);
}

uint64_t sub_243BB7470()
{
  sub_243B88508(&qword_2572ED720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB74B0()
{
  sub_243B88508(&qword_2572ED720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BB7500(_QWORD *a1, char *a2)
{
  return sub_243BB4918(a1, a2, (uint64_t (*)(_QWORD, _QWORD, double))sub_243B89294, type metadata accessor for GeneratePhotoResponseProto) & 1;
}

uint64_t sub_243BB7528()
{
  return sub_243B88508(&qword_2572EE710, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243BB7554()
{
  return sub_243B88508(&qword_2572ED718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243BB7580()
{
  return sub_243B88508(&qword_2572EE700, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243BB75AC()
{
  return sub_243B88508(&qword_2572EE718, type metadata accessor for GeneratePhotoRequestProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoRequestProto);
}

uint64_t sub_243BB75D8()
{
  return sub_243B88508(&qword_2572EE720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243BB7604()
{
  return sub_243B88508(&qword_2572ED720, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243BB7630()
{
  return sub_243B88508(&qword_2572EE708, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t sub_243BB765C()
{
  return sub_243B88508(&qword_2572EE728, type metadata accessor for GeneratePhotoResponseProto, (uint64_t)&protocol conformance descriptor for GeneratePhotoResponseProto);
}

uint64_t getEnumTagSinglePayload for GeneratePhotoRequestProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for GeneratePhotoRequestProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for GeneratePhotoResponseProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for GeneratePhotoResponseProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t MessageProto.messageCode.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 36));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t type metadata accessor for MessageProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EE978);
}

uint64_t MessageProto.requestIndex.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 40));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t MessageProto.messageCode.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for MessageProto(0);
  v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t MessageProto.requestIndex.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for MessageProto(0);
  v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

void MessageOperationProto.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t MessageOperationProto.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t MessageOperationProto.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_243BB77DC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_243BB77F0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_243BB77F8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return MessageOperationProto.init(rawValue:)(*a1, a2);
}

uint64_t sub_243BB7800()
{
  sub_243BFE1A4();
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t sub_243BB7868()
{
  sub_243BB87D0();
  return sub_243BFD3D0();
}

uint64_t sub_243BB78A0()
{
  sub_243BFE1A4();
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

void sub_243BB7904()
{
  qword_2572EE860 = (uint64_t)&unk_25144F0C0;
}

uint64_t static MessageOperationProto.allCases.getter()
{
  if (qword_2572EB770 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_243BB7958@<X0>(_QWORD *a1@<X8>)
{
  if (qword_2572EB770 != -1)
    swift_once();
  *a1 = qword_2572EE860;
  return swift_bridgeObjectRetain();
}

void MessageProto.operation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t MessageProto.operation.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t (*MessageProto.operation.modify())()
{
  return nullsub_1;
}

uint64_t (*MessageProto.messageCode.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for MessageProto(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_243BB7A30;
}

BOOL MessageProto.hasMessageCode.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall MessageProto.clearMessageCode()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for MessageProto(0) + 36);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t (*MessageProto.requestIndex.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for MessageProto(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return sub_243BB7A30;
}

BOOL MessageProto.hasRequestIndex.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall MessageProto.clearRequestIndex()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for MessageProto(0) + 40);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t MessageProto.messageContent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_243B7FBDC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t MessageProto.messageContent.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MessageProto.messageContent.modify())()
{
  return nullsub_1;
}

uint64_t MessageProto.fileCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t MessageProto.fileCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*MessageProto.fileCount.modify())()
{
  return nullsub_1;
}

uint64_t MessageProto.version.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t MessageProto.version.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*MessageProto.version.modify())()
{
  return nullsub_1;
}

uint64_t MessageProto.complete.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 44)) & 1;
}

uint64_t MessageProto.complete.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MessageProto(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*MessageProto.complete.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for MessageProto(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return sub_243BB7C80;
}

uint64_t sub_243BB7C80(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL MessageProto.hasComplete.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 44)) != 2;
}

Swift::Void __swiftcall MessageProto.clearComplete()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for MessageProto(0) + 44)) = 2;
}

uint64_t MessageProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MessageProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MessageProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MessageProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*MessageProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for MessageProto(0);
  return nullsub_1;
}

uint64_t MessageProto.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_243C01680;
  *(_QWORD *)(a1 + 32) = 0;
  v2 = (int *)type metadata accessor for MessageProto(0);
  result = sub_243BFD388();
  v4 = a1 + v2[9];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[10];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[11]) = 2;
  return result;
}

uint64_t FileHeaderProto.filename.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FileHeaderProto.filename.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FileHeaderProto.filename.modify())()
{
  return nullsub_1;
}

uint64_t FileHeaderProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FileHeaderProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for FileHeaderProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EEA20);
}

uint64_t FileHeaderProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FileHeaderProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FileHeaderProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for FileHeaderProto(0);
  return nullsub_1;
}

uint64_t FileHeaderProto.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for FileHeaderProto(0);
  return sub_243BFD388();
}

uint64_t sub_243BB7F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE868);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE868);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243C02210;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "unspecified";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "event";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "request";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "response";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "error";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static MessageOperationProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB778, (uint64_t)qword_2572EE868, a1);
}

uint64_t sub_243BB81AC@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB778, (uint64_t)qword_2572EE868, a1);
}

uint64_t static MessageProto.protoMessageName.getter()
{
  return 0x506567617373654DLL;
}

uint64_t sub_243BB81E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE880);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE880);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243C02220;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "operation";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "messageCode";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "requestIndex";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "messageContent";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "fileCount";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "version";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "complete";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static MessageProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB780, (uint64_t)qword_2572EE880, a1);
}

uint64_t MessageProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_243BB87D0();
          sub_243BFD400();
          break;
        case 2:
        case 3:
          type metadata accessor for MessageProto(0);
          sub_243BFD454();
          break;
        case 4:
          sub_243BFD418();
          break;
        case 5:
        case 6:
          sub_243BFD460();
          break;
        case 7:
          type metadata accessor for MessageProto(0);
          sub_243BFD3E8();
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t MessageProto.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_243BB87D0(), result = sub_243BFD4E4(), !v1))
  {
    result = sub_243BB8814((uint64_t)v0);
    if (!v1)
    {
      sub_243BB8888((uint64_t)v0);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_243BB86E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) == 0 || (sub_243BFD4FC(), !v3))
  {
    if (!*(_DWORD *)(v2 + 32) || (sub_243BFD52C(), !v3))
    {
      if (!*(_DWORD *)(v2 + 36) || (sub_243BFD52C(), !v3))
      {
        sub_243BB88FC(v2);
        if (!v3)
        {
          type metadata accessor for MessageProto(0);
          sub_243BFD37C();
        }
      }
    }
  }
  JUMPOUT(0x243BB86ACLL);
}

unint64_t sub_243BB87D0()
{
  unint64_t result;

  result = qword_2572EE8B0;
  if (!qword_2572EE8B0)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for MessageOperationProto, &type metadata for MessageOperationProto);
    atomic_store(result, (unint64_t *)&qword_2572EE8B0);
  }
  return result;
}

uint64_t sub_243BB8814(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for MessageProto(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return sub_243BFD52C();
  return result;
}

uint64_t sub_243BB8888(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for MessageProto(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return sub_243BFD52C();
  return result;
}

uint64_t sub_243BB88FC(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for MessageProto(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return sub_243BFD4D8();
  return result;
}

uint64_t MessageProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for MessageProto, &qword_2572EE8B8, (uint64_t)&protocol conformance descriptor for MessageProto);
}

uint64_t sub_243BB8990@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 16) = xmmword_243C01680;
  *(_QWORD *)(a2 + 32) = 0;
  result = sub_243BFD388();
  v5 = a1[10];
  v6 = a2 + a1[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a2 + a1[11]) = 2;
  return result;
}

uint64_t sub_243BB8A08()
{
  return 0x506567617373654DLL;
}

uint64_t sub_243BB8A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_243BB8A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_243BB8AA8())()
{
  return nullsub_1;
}

uint64_t sub_243BB8ABC()
{
  return MessageProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB8AD0()
{
  return MessageProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB8AE4()
{
  sub_243B88508(&qword_2572EEA60, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB8B34@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB780, (uint64_t)qword_2572EE880, a1);
}

uint64_t sub_243BB8B50()
{
  sub_243B88508(&qword_2572EE8F8, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB8B90()
{
  sub_243B88508(&qword_2572EE8F8, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
  return sub_243BFD4C0();
}

uint64_t static FileHeaderProto.protoMessageName.getter()
{
  return 0x64616548656C6946;
}

uint64_t sub_243BB8C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EE898);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EE898);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_243BFFAC0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "filename";
  *(_QWORD *)(v5 + 8) = 8;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = sub_243BFD55C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_243BFD568();
}

uint64_t static FileHeaderProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB788, (uint64_t)qword_2572EE898, a1);
}

uint64_t FileHeaderProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_243BFD3DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_243BFD448();
  }
  return result;
}

uint64_t FileHeaderProto.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_243BFD520(), !v1))
  {
    type metadata accessor for FileHeaderProto(0);
    return sub_243BFD37C();
  }
  return result;
}

uint64_t FileHeaderProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for FileHeaderProto, &qword_2572EE8C0, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
}

uint64_t sub_243BB8E54@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return sub_243BFD388();
}

uint64_t sub_243BB8E78()
{
  return 0x64616548656C6946;
}

uint64_t sub_243BB8E9C()
{
  return FileHeaderProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BB8EB0()
{
  return FileHeaderProto.traverse<A>(visitor:)();
}

uint64_t sub_243BB8EC4()
{
  sub_243B88508(&qword_2572EEA58, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BB8F14@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB788, (uint64_t)qword_2572EE898, a1);
}

uint64_t sub_243BB8F30()
{
  sub_243B88508(&qword_2572EE910, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BB8F70()
{
  sub_243B88508(&qword_2572EE910, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
  return sub_243BFD4C0();
}

uint64_t _s10PhotosFace15FileHeaderProtoV2eeoiySbAC_ACtFZ_0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_243BFE0F0() & 1) != 0))
  {
    v13 = type metadata accessor for FileHeaderProto(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v7, &a2[*(int *)(v13 + 20)], v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = sub_243BFD7D8();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    v16(v10, v4);
  }
  return v12 & 1;
}

uint64_t _s10PhotosFace12MessageProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  _DWORD *v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v11)
    goto LABEL_21;
  v12 = type metadata accessor for MessageProto(0);
  v13 = v12;
  v14 = *(int *)(v12 + 36);
  v15 = (_DWORD *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 4);
  v17 = (_DWORD *)((char *)a2 + v14);
  v18 = *((unsigned __int8 *)a2 + v14 + 4);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_21;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_21;
  }
  v19 = *(int *)(v12 + 40);
  v20 = (_DWORD *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 4);
  v22 = (_DWORD *)((char *)a2 + v19);
  v23 = *((unsigned __int8 *)a2 + v19 + 4);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_21;
LABEL_16:
    sub_243BC4650(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v24 & 1) == 0 || *(_DWORD *)(a1 + 32) != *((_DWORD *)a2 + 8) || *(_DWORD *)(a1 + 36) != *((_DWORD *)a2 + 9))
      goto LABEL_21;
    v25 = *(int *)(v13 + 44);
    v26 = *(unsigned __int8 *)(a1 + v25);
    v27 = *((unsigned __int8 *)a2 + v25);
    if (v26 == 2)
    {
      if (v27 != 2)
        goto LABEL_21;
    }
    else if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    {
      goto LABEL_21;
    }
    v30 = a1 + *(int *)(v13 + 32);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v31(v10, v30, v4);
    v31(v7, (uint64_t)a2 + *(int *)(v13 + 32), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v28 = sub_243BFD7D8();
    v32 = *(void (**)(char *, uint64_t))(v5 + 8);
    v32(v7, v4);
    v32(v10, v4);
    return v28 & 1;
  }
  if (v23)
    goto LABEL_16;
LABEL_21:
  v28 = 0;
  return v28 & 1;
}

unint64_t sub_243BB9364()
{
  unint64_t result;

  result = qword_2572EE8C8;
  if (!qword_2572EE8C8)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for MessageOperationProto, &type metadata for MessageOperationProto);
    atomic_store(result, (unint64_t *)&qword_2572EE8C8);
  }
  return result;
}

unint64_t sub_243BB93AC()
{
  unint64_t result;

  result = qword_2572EE8D0;
  if (!qword_2572EE8D0)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for MessageOperationProto, &type metadata for MessageOperationProto);
    atomic_store(result, (unint64_t *)&qword_2572EE8D0);
  }
  return result;
}

unint64_t sub_243BB93F4()
{
  unint64_t result;

  result = qword_2572EE8D8;
  if (!qword_2572EE8D8)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for MessageOperationProto, &type metadata for MessageOperationProto);
    atomic_store(result, (unint64_t *)&qword_2572EE8D8);
  }
  return result;
}

unint64_t sub_243BB943C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EE8E0;
  if (!qword_2572EE8E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572EE8E8);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2572EE8E0);
  }
  return result;
}

uint64_t sub_243BB9488()
{
  return sub_243B88508(&qword_2572EE8F0, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
}

uint64_t sub_243BB94B4()
{
  return sub_243B88508(&qword_2572EE8F8, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
}

uint64_t sub_243BB94E0()
{
  return sub_243B88508(&qword_2572EE8B8, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
}

uint64_t sub_243BB950C()
{
  return sub_243B88508(&qword_2572EE900, type metadata accessor for MessageProto, (uint64_t)&protocol conformance descriptor for MessageProto);
}

uint64_t sub_243BB9538()
{
  return sub_243B88508(&qword_2572EE908, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
}

uint64_t sub_243BB9564()
{
  return sub_243B88508(&qword_2572EE910, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
}

uint64_t sub_243BB9590()
{
  return sub_243B88508(&qword_2572EE8C0, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
}

uint64_t sub_243BB95BC()
{
  return sub_243B88508(&qword_2572EE918, type metadata accessor for FileHeaderProto, (uint64_t)&protocol conformance descriptor for FileHeaderProto);
}

uint64_t sub_243BB95E8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;

  result = type metadata accessor for MessageProto(0);
  v5 = (int *)(a1 + *(int *)(result + 36));
  if (*((_BYTE *)v5 + 4))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_243BB962C(int *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for MessageProto(0);
  v5 = a2 + *(int *)(result + 36);
  *(_DWORD *)v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t sub_243BB9664@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;
  int *v5;
  int v6;

  result = type metadata accessor for MessageProto(0);
  v5 = (int *)(a1 + *(int *)(result + 40));
  if (*((_BYTE *)v5 + 4))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_243BB96A8(int *a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for MessageProto(0);
  v5 = a2 + *(int *)(result + 40);
  *(_DWORD *)v5 = v3;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t sub_243BB96E0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for MessageProto(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 44)) & 1;
  return result;
}

uint64_t sub_243BB9718(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for MessageProto(0);
  *(_BYTE *)(a2 + *(int *)(result + 44)) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayoutImageLocationTypeProto(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayoutImageLocationTypeProto(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_243BB9798(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_243BB97B4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageOperationProto()
{
  return &type metadata for MessageOperationProto;
}

_QWORD *initializeBufferWithCopyOfBuffer for MessageProto(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[2];
    v8 = a2[3];
    sub_243B7FBDC(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    v4[4] = a2[4];
    v9 = a3[8];
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_243BFD394();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[9];
    v14 = a3[10];
    v15 = (char *)v4 + v13;
    v16 = (uint64_t)a2 + v13;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = *(_BYTE *)(v16 + 4);
    v17 = (char *)v4 + v14;
    v18 = (uint64_t)a2 + v14;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = *(_BYTE *)(v18 + 4);
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return v4;
}

uint64_t destroy for MessageProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_243B7FCC0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for MessageProto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_243B7FBDC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithCopy for MessageProto(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  v8 = a2[3];
  sub_243B7FBDC(v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  sub_243B7FCC0(v9, v10);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = (int *)((char *)a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 4) = *((_BYTE *)v17 + 4);
  *(_DWORD *)v16 = v18;
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  LOBYTE(v18) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v18;
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for MessageProto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  v11 = a3[10];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for MessageProto(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_243B7FCC0(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB9C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = sub_243BFD394();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BB9D28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_243BFD394();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t sub_243BB9DA4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FileHeaderProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_243BFD394();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for FileHeaderProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for FileHeaderProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for FileHeaderProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for FileHeaderProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for FileHeaderProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileHeaderProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BBA0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FileHeaderProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BBA170(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BBA1E4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ShuffleIDProto.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_243B7FBDC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ShuffleIDProto.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*ShuffleIDProto.id.modify())()
{
  return nullsub_1;
}

uint64_t ShuffleIDProto.people.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShuffleIDProto.people.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ShuffleIDProto.people.modify())()
{
  return nullsub_1;
}

uint64_t ShuffleIDProto.pets.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ShuffleIDProto.pets.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*ShuffleIDProto.pets.modify())()
{
  return nullsub_1;
}

uint64_t ShuffleIDProto.nature.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ShuffleIDProto.nature.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t (*ShuffleIDProto.nature.modify())()
{
  return nullsub_1;
}

uint64_t ShuffleIDProto.cityscape.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t ShuffleIDProto.cityscape.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 26) = result;
  return result;
}

uint64_t (*ShuffleIDProto.cityscape.modify())()
{
  return nullsub_1;
}

uint64_t ShuffleIDProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShuffleIDProto() + 36);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ShuffleIDProto()
{
  uint64_t result;

  result = qword_2572EEAF0;
  if (!qword_2572EEAF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ShuffleIDProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShuffleIDProto() + 36);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ShuffleIDProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for ShuffleIDProto();
  return nullsub_1;
}

uint64_t ShuffleIDProto.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_243C01680;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  type metadata accessor for ShuffleIDProto();
  return sub_243BFD388();
}

uint64_t static ShuffleIDProto.protoMessageName.getter()
{
  return 0x49656C6666756853;
}

uint64_t sub_243BBA4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEA68);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEA68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243C02210;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "people";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "pets";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "nature";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "cityscape";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static ShuffleIDProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2572EB790 != -1)
    swift_once();
  v2 = sub_243BFD574();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2572EEA68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t ShuffleIDProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_243BFD418();
          break;
        case 2:
          sub_243BFD424();
          break;
        case 3:
        case 4:
        case 5:
          sub_243BFD3F4();
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

void ShuffleIDProto.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BBA888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_243BFD4FC(), !v3))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16) || (result = sub_243BFD508(), !v3))
    {
      if (*(_BYTE *)(v2 + 24) != 1 || (result = sub_243BFD4D8(), !v3))
      {
        if (*(_BYTE *)(v2 + 25) != 1 || (result = sub_243BFD4D8(), !v3))
        {
          if (*(_BYTE *)(v2 + 26) != 1 || (result = sub_243BFD4D8(), !v3))
          {
            type metadata accessor for ShuffleIDProto();
            return sub_243BFD37C();
          }
        }
      }
    }
  }
  return result;
}

uint64_t ShuffleIDProto.hashValue.getter()
{
  sub_243BFE1A4();
  type metadata accessor for ShuffleIDProto();
  sub_243B88508(&qword_2572EEA80, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  sub_243BFD7A8();
  return sub_243BFE1E0();
}

uint64_t sub_243BBAA30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)a1 = xmmword_243C01680;
  *(_QWORD *)(a1 + 16) = v1;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  return sub_243BFD388();
}

uint64_t sub_243BBAA6C()
{
  return 0x49656C6666756853;
}

uint64_t sub_243BBAA90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_243BBAAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_243BBAB10())()
{
  return nullsub_1;
}

uint64_t sub_243BBAB24()
{
  return ShuffleIDProto.decodeMessage<A>(decoder:)();
}

void sub_243BBAB38()
{
  ShuffleIDProto.traverse<A>(visitor:)();
}

uint64_t sub_243BBAB4C()
{
  sub_243B88508(&qword_2572EEB38, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BBAB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2572EB790 != -1)
    swift_once();
  v2 = sub_243BFD574();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2572EEA68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_243BBAC0C()
{
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BBAC4C()
{
  sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
  return sub_243BFD4C0();
}

uint64_t _s10PhotosFace14ShuffleIDProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - v9;
  sub_243BC4650(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) != 0
    && (sub_243B8A63C(*(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16)) & 1) != 0
    && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && *(unsigned __int8 *)(a1 + 26) == *(unsigned __int8 *)(a2 + 26))
  {
    v14 = type metadata accessor for ShuffleIDProto();
    v15 = a1 + *(int *)(v14 + 36);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v7, a2 + *(int *)(v14 + 36), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v12 = sub_243BFD7D8();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v10, v4);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_243BBAE14()
{
  return sub_243B88508(&qword_2572EEA88, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

uint64_t sub_243BBAE40()
{
  return sub_243B88508(&qword_2572ED968, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

uint64_t sub_243BBAE6C()
{
  return sub_243B88508(&qword_2572EEA80, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

uint64_t sub_243BBAE98()
{
  return sub_243B88508(&qword_2572EEA90, (uint64_t (*)(uint64_t))type metadata accessor for ShuffleIDProto, (uint64_t)&protocol conformance descriptor for ShuffleIDProto);
}

unint64_t initializeBufferWithCopyOfBuffer for ShuffleIDProto(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_243B7FBDC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
    v9 = *(int *)(a3 + 36);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = sub_243BFD394();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for ShuffleIDProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for ShuffleIDProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for ShuffleIDProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_243B7FCC0(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for ShuffleIDProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ShuffleIDProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_243B7FCC0(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShuffleIDProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BBB244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShuffleIDProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BBB2CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BBB340()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL StoredPhotoProto.hasAccessibilityDescription.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40) + 8) != 0;
}

uint64_t type metadata accessor for StoredPhotoProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EED00);
}

uint64_t StoredPhotoProto.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t StoredPhotoProto.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t StoredPhotoLayoutProto.timePosition.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
                      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  return *v1;
}

uint64_t type metadata accessor for StoredPhotoLayoutProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EEE40);
}

uint64_t StoredPhotoLayoutProto.baseImage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BBB540(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage, a1);
}

BOOL StoredPhotoLayoutProto.hasMaskImage.getter()
{
  return sub_243BBC6B0(&qword_2572EDDA0, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

uint64_t StoredPhotoLayoutProto.maskImage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BBB540(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, a1);
}

uint64_t sub_243BBB540@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a1;
  swift_beginAccess();
  sub_243B50168(v8, (uint64_t)v7, &qword_2572EDDA0);
  v9 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return sub_243B6F934((uint64_t)v7, a2, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  sub_243BFD388();
  v10 = (_QWORD *)(a2 + *(int *)(v9 + 24));
  *v10 = 0;
  v10[1] = 0;
  return sub_243B6F978((uint64_t)v7, &qword_2572EDDA0);
}

uint64_t StoredPhotoLayoutProto.originalCrop.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_243BBB680(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop, a1);
}

uint64_t StoredPhotoLayoutProto.timeRect.getter@<X0>(_OWORD *a1@<X8>)
{
  return sub_243BBB680(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, a1);
}

uint64_t sub_243BBB680@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a1;
  swift_beginAccess();
  sub_243B50168(v8, (uint64_t)v7, &qword_2572EDD98);
  v9 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return sub_243B6F934((uint64_t)v7, (uint64_t)a2, type metadata accessor for StoredPhotoLayoutRectProto);
  *a2 = 0u;
  a2[1] = 0u;
  sub_243BFD388();
  return sub_243B6F978((uint64_t)v7, &qword_2572EDD98);
}

double StoredPhotoLayoutProto.backgroundZorder.getter()
{
  return sub_243BBB7B0(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
}

double StoredPhotoLayoutProto.foregroundZorder.getter()
{
  return sub_243BBB7B0(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
}

double sub_243BBB7B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a1;
  swift_beginAccess();
  return *(double *)v2;
}

double StoredPhotoLayoutProto.timeElementZorder.getter()
{
  return sub_243BBB7B0(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
}

double StoredPhotoLayoutProto.imageAotbrightness.getter()
{
  return sub_243BBB7B0(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
}

uint64_t StoredPhotoLayoutProto.userEdited.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
                         + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  return *v1;
}

uint64_t StoredPhotoLayoutProto.baseImage.setter(uint64_t a1)
{
  return sub_243BBB998(a1, &qword_2572EDDA0, type metadata accessor for StoredPhotoLayoutImageLocationProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage);
}

uint64_t StoredPhotoLayoutProto.maskImage.setter(uint64_t a1)
{
  return sub_243BBB998(a1, &qword_2572EDDA0, type metadata accessor for StoredPhotoLayoutImageLocationProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage);
}

uint64_t StoredPhotoLayoutProto.originalCrop.setter(uint64_t a1)
{
  return sub_243BBB998(a1, &qword_2572EDD98, type metadata accessor for StoredPhotoLayoutRectProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop);
}

uint64_t StoredPhotoLayoutProto.timePosition.setter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = sub_243BC14A8(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = (_DWORD *)(*(_QWORD *)(v2 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  result = swift_beginAccess();
  *v7 = a1;
  return result;
}

uint64_t StoredPhotoLayoutProto.timeRect.setter(uint64_t a1)
{
  return sub_243BBB998(a1, &qword_2572EDD98, type metadata accessor for StoredPhotoLayoutRectProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect);
}

uint64_t sub_243BBB998(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v8 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v17 = swift_retain();
    v18 = sub_243BC14A8(v17);
    swift_release();
    *(_QWORD *)(v8 + v16) = v18;
    swift_release();
  }
  v19 = *(_QWORD *)(v8 + v16);
  sub_243B6F934(a1, (uint64_t)v15, a3);
  v20 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v15, 0, 1, v20);
  sub_243B6F9B4((uint64_t)v15, (uint64_t)v13, a2);
  v21 = v19 + *a4;
  swift_beginAccess();
  swift_retain();
  sub_243BA5C84((uint64_t)v13, v21, a2);
  swift_endAccess();
  return swift_release();
}

uint64_t StoredPhotoLayoutProto.backgroundZorder.setter(double a1)
{
  return sub_243BBBB38(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder, a1);
}

uint64_t StoredPhotoLayoutProto.foregroundZorder.setter(double a1)
{
  return sub_243BBBB38(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder, a1);
}

uint64_t sub_243BBBB38(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v7 = swift_retain();
    v8 = sub_243BC14A8(v7);
    swift_release();
    *(_QWORD *)(v4 + v6) = v8;
    swift_release();
  }
  v9 = (double *)(*(_QWORD *)(v4 + v6) + *a1);
  result = swift_beginAccess();
  *v9 = a2;
  return result;
}

uint64_t StoredPhotoLayoutProto.timeElementZorder.setter(double a1)
{
  return sub_243BBBB38(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder, a1);
}

uint64_t StoredPhotoLayoutProto.imageAotbrightness.setter(double a1)
{
  return sub_243BBBB38(&OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness, a1);
}

uint64_t StoredPhotoLayoutProto.userEdited.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = sub_243BC14A8(v5);
    swift_release();
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = (_BYTE *)(*(_QWORD *)(v2 + v4)
               + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  result = swift_beginAccess();
  *v7 = a1 & 1;
  return result;
}

BOOL StoredPhotoLayoutImageLocationProto.hasLocation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24) + 8) != 0;
}

uint64_t StoredPhotoLayoutImageLocationProto.location.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t StoredPhotoLayoutImageLocationProto.location.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

void StoredPhotoLayoutImageLocationTypeProto.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t StoredPhotoLayoutImageLocationTypeProto.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t StoredPhotoLayoutImageLocationTypeProto.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_243BBBDBC@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *sub_243BBBDD4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_243BBBDF0()
{
  sub_243BC1990();
  return sub_243BFD3D0();
}

void sub_243BBBE28()
{
  qword_2572EEB40 = (uint64_t)&unk_25144F130;
}

uint64_t static StoredPhotoLayoutImageLocationTypeProto.allCases.getter()
{
  if (qword_2572EB798 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_243BBBE7C@<X0>(_QWORD *a1@<X8>)
{
  if (qword_2572EB798 != -1)
    swift_once();
  *a1 = qword_2572EEB40;
  return swift_bridgeObjectRetain();
}

uint64_t StoredPhotoProto.localIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_243B7FBDC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t StoredPhotoProto.localIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*StoredPhotoProto.localIdentifier.modify())()
{
  return nullsub_1;
}

double StoredPhotoProto.date.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void StoredPhotoProto.date.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*StoredPhotoProto.date.modify())()
{
  return nullsub_1;
}

double StoredPhotoProto.parallaxScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void StoredPhotoProto.parallaxScale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*StoredPhotoProto.parallaxScale.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoProto.preferredLayout.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t StoredPhotoProto.preferredLayout.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*StoredPhotoProto.preferredLayout.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoProto.layouts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StoredPhotoProto.layouts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*StoredPhotoProto.layouts.modify())()
{
  return nullsub_1;
}

uint64_t sub_243BBBFE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t sub_243BBC030(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*StoredPhotoProto.accessibilityDescription.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for StoredPhotoProto(0) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_243BBC0E8;
}

Swift::Void __swiftcall StoredPhotoProto.clearAccessibilityDescription()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 40));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t StoredPhotoProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 36);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StoredPhotoProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoProto(0) + 36);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StoredPhotoProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhotoProto(0);
  return nullsub_1;
}

uint64_t StoredPhotoProto.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  *(_OWORD *)a1 = xmmword_243C01680;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for StoredPhotoProto(0);
  result = sub_243BFD388();
  v4 = (_QWORD *)(a1 + *(int *)(v2 + 40));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

void StoredPhotoLayoutImageLocationProto.type.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t StoredPhotoLayoutImageLocationProto.type.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t (*StoredPhotoLayoutImageLocationProto.type.modify())()
{
  return nullsub_1;
}

uint64_t sub_243BBC270@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t sub_243BBC2C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*StoredPhotoLayoutImageLocationProto.location.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return sub_243BBC0E8;
}

uint64_t sub_243BBC378(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

Swift::Void __swiftcall StoredPhotoLayoutImageLocationProto.clearLocation()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t StoredPhotoLayoutImageLocationProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StoredPhotoLayoutImageLocationProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayoutImageLocationProto(0) + 20);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StoredPhotoLayoutImageLocationProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  return nullsub_1;
}

uint64_t StoredPhotoLayoutImageLocationProto.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v2 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  result = sub_243BFD388();
  v4 = (_QWORD *)(a1 + *(int *)(v2 + 24));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t type metadata accessor for StoredPhotoLayoutImageLocationProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EEDA8);
}

void (*StoredPhotoLayoutProto.baseImage.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  swift_beginAccess();
  sub_243B50168(v10, (uint64_t)v5, &qword_2572EDDA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 1;
    sub_243BFD388();
    v11 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    sub_243B6F978((uint64_t)v5, &qword_2572EDDA0);
  }
  else
  {
    sub_243B6F934((uint64_t)v5, (uint64_t)v9, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  }
  return sub_243BBC680;
}

void sub_243BBC680(uint64_t a1, char a2)
{
  sub_243BBCAC4(a1, a2, (void (*)(void *))StoredPhotoLayoutProto.baseImage.setter, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

BOOL StoredPhotoLayoutProto.hasBaseImage.getter()
{
  return sub_243BBC6B0(&qword_2572EDDA0, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

BOOL sub_243BBC6B0(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a2;
  swift_beginAccess();
  sub_243B50168(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  sub_243B6F978((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall StoredPhotoLayoutProto.clearBaseImage()()
{
  sub_243BBCB74(&qword_2572EDDA0, type metadata accessor for StoredPhotoLayoutImageLocationProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage);
}

uint64_t sub_243BBC7AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a2;
  swift_beginAccess();
  sub_243B50168(v9, (uint64_t)v8, &qword_2572EDDA0);
  v10 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return sub_243B6F934((uint64_t)v8, a3, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  sub_243BFD388();
  v11 = (_QWORD *)(a3 + *(int *)(v10 + 24));
  *v11 = 0;
  v11[1] = 0;
  return sub_243B6F978((uint64_t)v8, &qword_2572EDDA0);
}

uint64_t sub_243BBC8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = a5(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_243B6F8F0(a1, (uint64_t)&v13 - v10, a5);
  return a6(v11);
}

void (*StoredPhotoLayoutProto.maskImage.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
  swift_beginAccess();
  sub_243B50168(v10, (uint64_t)v5, &qword_2572EDDA0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 1;
    sub_243BFD388();
    v11 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    sub_243B6F978((uint64_t)v5, &qword_2572EDDA0);
  }
  else
  {
    sub_243B6F934((uint64_t)v5, (uint64_t)v9, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  }
  return sub_243BBCAB0;
}

void sub_243BBCAB0(uint64_t a1, char a2)
{
  sub_243BBCAC4(a1, a2, (void (*)(void *))StoredPhotoLayoutProto.maskImage.setter, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

void sub_243BBCAC4(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    sub_243B6F8F0(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    sub_243B7FA20((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

Swift::Void __swiftcall StoredPhotoLayoutProto.clearMaskImage()()
{
  sub_243BBCB74(&qword_2572EDDA0, type metadata accessor for StoredPhotoLayoutImageLocationProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage);
}

uint64_t sub_243BBCB74(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v12 = swift_retain();
    v13 = sub_243BC14A8(v12);
    swift_release();
    *(_QWORD *)(v7 + v11) = v13;
    swift_release();
  }
  v14 = *(_QWORD *)(v7 + v11);
  v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  sub_243BA5C84((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t StoredPhotoLayoutRectProto.init()@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for StoredPhotoLayoutRectProto(0);
  *a1 = 0u;
  a1[1] = 0u;
  return sub_243BFD388();
}

uint64_t type metadata accessor for StoredPhotoLayoutRectProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EEED0);
}

uint64_t type metadata accessor for StoredPhotoLayoutProto._StorageClass(uint64_t a1)
{
  return sub_243BA3B6C(a1, (uint64_t *)&unk_2572EEF40);
}

void (*StoredPhotoLayoutProto.originalCrop.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  swift_beginAccess();
  sub_243B50168(v10, (uint64_t)v5, &qword_2572EDD98);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0u;
    v9[1] = 0u;
    sub_243BFD388();
    sub_243B6F978((uint64_t)v5, &qword_2572EDD98);
  }
  else
  {
    sub_243B6F934((uint64_t)v5, (uint64_t)v9, type metadata accessor for StoredPhotoLayoutRectProto);
  }
  return sub_243BBCE50;
}

void sub_243BBCE50(uint64_t a1, char a2)
{
  sub_243BBCAC4(a1, a2, (void (*)(void *))StoredPhotoLayoutProto.originalCrop.setter, type metadata accessor for StoredPhotoLayoutRectProto);
}

BOOL StoredPhotoLayoutProto.hasOriginalCrop.getter()
{
  return sub_243BBC6B0(&qword_2572EDD98, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop, type metadata accessor for StoredPhotoLayoutRectProto);
}

Swift::Void __swiftcall StoredPhotoLayoutProto.clearOriginalCrop()()
{
  sub_243BBCB74(&qword_2572EDD98, type metadata accessor for StoredPhotoLayoutRectProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop);
}

uint64_t sub_243BBCE9C(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = sub_243BC14A8(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = (_DWORD *)(*(_QWORD *)(a2 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  result = swift_beginAccess();
  *v7 = v3;
  return result;
}

void (*StoredPhotoLayoutProto.timePosition.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = (_DWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *v5;
  return sub_243BBCFD4;
}

void sub_243BBCFD4(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    v9 = sub_243BC14A8(v8);
    swift_release();
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84))
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

uint64_t sub_243BBD0B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a2;
  swift_beginAccess();
  sub_243B50168(v9, (uint64_t)v8, &qword_2572EDD98);
  v10 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return sub_243B6F934((uint64_t)v8, (uint64_t)a3, type metadata accessor for StoredPhotoLayoutRectProto);
  *a3 = 0u;
  a3[1] = 0u;
  sub_243BFD388();
  return sub_243B6F978((uint64_t)v8, &qword_2572EDD98);
}

void (*StoredPhotoLayoutProto.timeRect.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
  swift_beginAccess();
  sub_243B50168(v10, (uint64_t)v5, &qword_2572EDD98);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0u;
    v9[1] = 0u;
    sub_243BFD388();
    sub_243B6F978((uint64_t)v5, &qword_2572EDD98);
  }
  else
  {
    sub_243B6F934((uint64_t)v5, (uint64_t)v9, type metadata accessor for StoredPhotoLayoutRectProto);
  }
  return sub_243BBD314;
}

void sub_243BBD314(uint64_t a1, char a2)
{
  sub_243BBCAC4(a1, a2, (void (*)(void *))StoredPhotoLayoutProto.timeRect.setter, type metadata accessor for StoredPhotoLayoutRectProto);
}

BOOL StoredPhotoLayoutProto.hasTimeRect.getter()
{
  return sub_243BBC6B0(&qword_2572EDD98, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, type metadata accessor for StoredPhotoLayoutRectProto);
}

Swift::Void __swiftcall StoredPhotoLayoutProto.clearTimeRect()()
{
  sub_243BBCB74(&qword_2572EDD98, type metadata accessor for StoredPhotoLayoutRectProto, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect);
}

void (*StoredPhotoLayoutProto.backgroundZorder.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_243BBD3E0;
}

void sub_243BBD3E0(uint64_t *a1, char a2)
{
  sub_243BBD538(a1, a2, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
}

uint64_t sub_243BBD3EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v7 = *a1;
  v8 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_243BC14A8(v9);
    swift_release();
    *(_QWORD *)(a2 + v8) = v10;
    swift_release();
  }
  v11 = (_QWORD *)(*(_QWORD *)(a2 + v8) + *a5);
  result = swift_beginAccess();
  *v11 = v7;
  return result;
}

void (*StoredPhotoLayoutProto.foregroundZorder.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_243BBD52C;
}

void sub_243BBD52C(uint64_t *a1, char a2)
{
  sub_243BBD538(a1, a2, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
}

void sub_243BBD538(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_243BC14A8(v10);
    swift_release();
    *(_QWORD *)(v9 + v8) = v11;
    swift_release();
  }
LABEL_4:
  v12 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3);
  swift_beginAccess();
  *v12 = v6;
  free((void *)v5);
}

void (*StoredPhotoLayoutProto.timeElementZorder.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_243BBD6A4;
}

void sub_243BBD6A4(uint64_t *a1, char a2)
{
  sub_243BBD538(a1, a2, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
}

void (*StoredPhotoLayoutProto.imageAotbrightness.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
  swift_beginAccess();
  v3[9] = *v5;
  return sub_243BBD730;
}

void sub_243BBD730(uint64_t *a1, char a2)
{
  sub_243BBD538(a1, a2, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
}

uint64_t sub_243BBD73C(char *a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = sub_243BC14A8(v5);
    swift_release();
    *(_QWORD *)(a2 + v4) = v6;
    swift_release();
  }
  v7 = (_BYTE *)(*(_QWORD *)(a2 + v4)
               + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  result = swift_beginAccess();
  *v7 = v3;
  return result;
}

void (*StoredPhotoLayoutProto.userEdited.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5;
  return sub_243BBD874;
}

void sub_243BBD874(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    v9 = sub_243BC14A8(v8);
    swift_release();
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

uint64_t StoredPhotoLayoutProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t StoredPhotoLayoutProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*StoredPhotoLayoutProto.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoLayoutProto.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_243BFD388();
  v2 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if (qword_2572EB7C0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = qword_2572EEBA8;
  return swift_retain();
}

double StoredPhotoLayoutRectProto.x.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void StoredPhotoLayoutRectProto.x.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*StoredPhotoLayoutRectProto.x.modify())()
{
  return nullsub_1;
}

double StoredPhotoLayoutRectProto.y.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void StoredPhotoLayoutRectProto.y.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*StoredPhotoLayoutRectProto.y.modify())()
{
  return nullsub_1;
}

uint64_t (*StoredPhotoLayoutRectProto.width.modify())()
{
  return nullsub_1;
}

uint64_t (*StoredPhotoLayoutRectProto.height.modify())()
{
  return nullsub_1;
}

uint64_t StoredPhotoLayoutRectProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayoutRectProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StoredPhotoLayoutRectProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StoredPhotoLayoutRectProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*StoredPhotoLayoutRectProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for StoredPhotoLayoutRectProto(0);
  return nullsub_1;
}

uint64_t sub_243BBDB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEB48);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEB48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAF0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "unspecified";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "cache";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "other";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static StoredPhotoLayoutImageLocationTypeProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7A0, (uint64_t)qword_2572EEB48, a1);
}

uint64_t sub_243BBDCF4@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7A0, (uint64_t)qword_2572EEB48, a1);
}

unint64_t static StoredPhotoProto.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t sub_243BBDD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEB60);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEB60);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFD70;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "localIdentifier";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "date";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "parallaxScale";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "preferredLayout";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "layouts";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "accessibilityDescription";
  *((_QWORD *)v19 + 1) = 24;
  v19[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static StoredPhotoProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7A8, (uint64_t)qword_2572EEB60, a1);
}

uint64_t StoredPhotoProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_243BFD3DC();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          sub_243BFD418();
          goto LABEL_5;
        case 2:
        case 3:
          v4 = v3;
          sub_243BFD430();
          goto LABEL_5;
        case 4:
          v4 = v3;
          sub_243BFD460();
          goto LABEL_5;
        case 5:
          type metadata accessor for StoredPhotoLayoutProto(0);
          sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
          v4 = v3;
          sub_243BFD478();
          goto LABEL_5;
        case 6:
          type metadata accessor for StoredPhotoProto(0);
          v4 = v3;
          sub_243BFD43C();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

void StoredPhotoProto.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BBE150(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_243BFD4FC(), !v3))
  {
    if (*(double *)(v2 + 16) == 0.0 || (result = sub_243BFD514(), !v3))
    {
      if (*(double *)(v2 + 24) == 0.0 || (result = sub_243BFD514(), !v3))
      {
        if (!*(_DWORD *)(v2 + 32) || (result = sub_243BFD52C(), !v3))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v2 + 40) + 16)
            || (type metadata accessor for StoredPhotoLayoutProto(0),
                sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto), result = sub_243BFD544(), !v3))
          {
            result = sub_243BBE2D8(v2);
            if (!v3)
            {
              type metadata accessor for StoredPhotoProto(0);
              return sub_243BFD37C();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_243BBE2D8(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for StoredPhotoProto(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 40) + 8))
    return sub_243BFD520();
  return result;
}

uint64_t StoredPhotoProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for StoredPhotoProto, &qword_2572EEC18, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BBE36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  *(_OWORD *)a2 = xmmword_243C01680;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = MEMORY[0x24BEE4AF8];
  result = sub_243BFD388();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 40));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t sub_243BBE3C4()
{
  return 0xD000000000000010;
}

uint64_t sub_243BBE3E0()
{
  return StoredPhotoProto.decodeMessage<A>(decoder:)();
}

void sub_243BBE3F4()
{
  StoredPhotoProto.traverse<A>(visitor:)();
}

uint64_t sub_243BBE408()
{
  sub_243B88508(&qword_2572EF130, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BBE458@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7A8, (uint64_t)qword_2572EEB60, a1);
}

uint64_t sub_243BBE474()
{
  sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BBE4B4()
{
  sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
  return sub_243BFD4C0();
}

unint64_t static StoredPhotoLayoutImageLocationProto.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_243BBE524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEB78);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEB78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "location";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static StoredPhotoLayoutImageLocationProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7B0, (uint64_t)qword_2572EEB78, a1);
}

uint64_t StoredPhotoLayoutImageLocationProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
        sub_243BFD43C();
      }
      else if (result == 1)
      {
        sub_243BC1990();
        sub_243BFD400();
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t StoredPhotoLayoutImageLocationProto.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (sub_243BC1990(), result = sub_243BFD4E4(), !v1))
  {
    result = sub_243BBE848((uint64_t)v0);
    if (!v1)
    {
      type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
      return sub_243BFD37C();
    }
  }
  return result;
}

uint64_t sub_243BBE848(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return sub_243BFD520();
  return result;
}

uint64_t StoredPhotoLayoutImageLocationProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for StoredPhotoLayoutImageLocationProto, &qword_2572EEC28, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BBE8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  result = sub_243BFD388();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t sub_243BBE920()
{
  return 0xD000000000000023;
}

uint64_t sub_243BBE93C()
{
  return StoredPhotoLayoutImageLocationProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BBE950()
{
  return StoredPhotoLayoutImageLocationProto.traverse<A>(visitor:)();
}

uint64_t sub_243BBE964()
{
  sub_243B88508(&qword_2572EF128, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BBE9B4@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7B0, (uint64_t)qword_2572EEB78, a1);
}

uint64_t sub_243BBE9D0()
{
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BBEA10()
{
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  return sub_243BFD4C0();
}

unint64_t static StoredPhotoLayoutProto.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_243BBEA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEB90);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEB90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_243C02920;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "baseImage";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_243BFD55C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "maskImage";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "originalCrop";
  *((_QWORD *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "timePosition";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "timeRect";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "backgroundZorder";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "foregroundZorder";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "timeElementZorder";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "imageAOTBrightness";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "userEdited";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  return sub_243BFD568();
}

uint64_t static StoredPhotoLayoutProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7B8, (uint64_t)qword_2572EEB90, a1);
}

uint64_t sub_243BBEDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  v2 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  v5 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition) = 0;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, 1, 1, v5);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder) = 0;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness) = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited) = 0;
  qword_2572EEBA8 = v0;
  return result;
}

uint64_t sub_243BBEEC8()
{
  uint64_t v0;

  sub_243B6F978(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage, &qword_2572EDDA0);
  sub_243B6F978(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, &qword_2572EDDA0);
  sub_243B6F978(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop, &qword_2572EDD98);
  sub_243B6F978(v0+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, &qword_2572EDD98);
  return swift_deallocClassInstance();
}

uint64_t StoredPhotoLayoutProto.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = sub_243BC14A8(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  sub_243BBF01C(v11, a1, a2, a3);
  return swift_release();
}

uint64_t sub_243BBF01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  unint64_t *v17;
  void *v18;

  result = sub_243BFD3DC();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
          goto LABEL_10;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
LABEL_10:
          v16 = type metadata accessor for StoredPhotoLayoutImageLocationProto;
          v17 = &qword_2572EDDC8;
          v18 = &protocol conformance descriptor for StoredPhotoLayoutImageLocationProto;
          goto LABEL_15;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
          goto LABEL_14;
        case 4:
          sub_243BBF214();
          break;
        case 5:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
LABEL_14:
          v16 = type metadata accessor for StoredPhotoLayoutRectProto;
          v17 = &qword_2572EDDD0;
          v18 = &protocol conformance descriptor for StoredPhotoLayoutRectProto;
LABEL_15:
          sub_243BBF298(v11, v12, v13, v14, (uint64_t)v15, v16, v17, (uint64_t)v18);
          break;
        case 6:
        case 7:
        case 8:
        case 9:
          sub_243BBF35C();
          break;
        case 10:
          sub_243BBF3DC();
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t sub_243BBF214()
{
  swift_beginAccess();
  sub_243BFD460();
  return swift_endAccess();
}

uint64_t sub_243BBF298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  sub_243B88508(a7, a6, a8);
  sub_243BFD484();
  return swift_endAccess();
}

uint64_t sub_243BBF35C()
{
  swift_beginAccess();
  sub_243BFD430();
  return swift_endAccess();
}

uint64_t sub_243BBF3DC()
{
  swift_beginAccess();
  sub_243BFD3F4();
  return swift_endAccess();
}

uint64_t StoredPhotoLayoutProto.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for StoredPhotoLayoutProto(0);
  v7 = swift_retain();
  sub_243BBF4F0(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return sub_243BFD37C();
  return result;
}

uint64_t sub_243BBF4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  _BYTE *v15;

  result = sub_243BBF78C(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage, 1);
  if (!v4)
  {
    sub_243BBF78C(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, 2);
    sub_243BBF918(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop, 3);
    v10 = (_DWORD *)(a1
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
    swift_beginAccess();
    if (*v10)
      sub_243BFD52C();
    sub_243BBF918(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, 5);
    v11 = (double *)(a1
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
    swift_beginAccess();
    if (*v11 != 0.0)
      sub_243BFD514();
    v12 = (double *)(a1
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
    swift_beginAccess();
    if (*v12 != 0.0)
      sub_243BFD514();
    v13 = (double *)(a1
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
    swift_beginAccess();
    if (*v13 != 0.0)
      sub_243BFD514();
    v14 = (double *)(a1
                   + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
    swift_beginAccess();
    if (*v14 != 0.0)
      sub_243BFD514();
    v15 = (_BYTE *)(a1
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
    result = swift_beginAccess();
    if (*v15 == 1)
      return sub_243BFD4D8();
  }
  return result;
}

uint64_t sub_243BBF78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[8];

  v17[1] = a6;
  v17[2] = a3;
  v17[7] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *a5;
  swift_beginAccess();
  sub_243B50168(v15, (uint64_t)v10, &qword_2572EDDA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_243B6F978((uint64_t)v10, &qword_2572EDDA0);
  sub_243B6F934((uint64_t)v10, (uint64_t)v14, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
  sub_243BFD550();
  return sub_243B7FA20((uint64_t)v14, type metadata accessor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BBF918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[8];

  v17[1] = a6;
  v17[2] = a3;
  v17[7] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + *a5;
  swift_beginAccess();
  sub_243B50168(v15, (uint64_t)v10, &qword_2572EDD98);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_243B6F978((uint64_t)v10, &qword_2572EDD98);
  sub_243B6F934((uint64_t)v10, (uint64_t)v14, type metadata accessor for StoredPhotoLayoutRectProto);
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  sub_243BFD550();
  return sub_243B7FA20((uint64_t)v14, type metadata accessor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BBFAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  double *v59;
  double *v60;
  char v61;
  uint64_t v62;
  int *v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  double *v73;
  double *v74;
  char v75;
  double *v76;
  double v77;
  double *v78;
  double *v79;
  double v80;
  double *v81;
  double *v82;
  double v83;
  double *v84;
  double *v85;
  double v86;
  double *v87;
  char *v88;
  char v89;
  _BYTE *v90;
  char v91;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;

  v111 = a2;
  v102 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v99 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  v97 = (double *)((char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF138);
  MEMORY[0x24BDAC7A8](v101);
  v95 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v100 = (uint64_t)&v93 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v7);
  v94 = (double *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v96 = (uint64_t)&v93 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v98 = (double *)((char *)&v93 - v12);
  MEMORY[0x24BDAC7A8](v13);
  v104 = (uint64_t)&v93 - v14;
  v15 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v110 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v105 = (uint64_t *)((char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF140);
  MEMORY[0x24BDAC7A8](v17);
  v107 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v93 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v22);
  v103 = (uint64_t *)((char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v24);
  v108 = (uint64_t)&v93 - v25;
  MEMORY[0x24BDAC7A8](v26);
  v109 = (uint64_t *)((char *)&v93 - v27);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v93 - v29;
  v31 = a1;
  v32 = a1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  swift_beginAccess();
  sub_243B50168(v32, (uint64_t)v30, &qword_2572EDDA0);
  v33 = v111;
  v34 = v111
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  swift_beginAccess();
  v106 = v17;
  v35 = (uint64_t)&v21[*(int *)(v17 + 48)];
  sub_243B50168((uint64_t)v30, (uint64_t)v21, &qword_2572EDDA0);
  sub_243B50168(v34, v35, &qword_2572EDDA0);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
  if (v36((uint64_t)v21, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_243B6F978((uint64_t)v30, &qword_2572EDDA0);
    v37 = v33;
    v38 = v31;
    if (v36(v35, 1, v15) != 1)
      goto LABEL_6;
    v39 = v15;
    sub_243B6F978((uint64_t)v21, &qword_2572EDDA0);
  }
  else
  {
    v37 = v33;
    sub_243B50168((uint64_t)v21, (uint64_t)v109, &qword_2572EDDA0);
    if (v36(v35, 1, v15) == 1)
    {
      swift_retain();
      swift_retain();
      sub_243B6F978((uint64_t)v30, &qword_2572EDDA0);
      sub_243B7FA20((uint64_t)v109, type metadata accessor for StoredPhotoLayoutImageLocationProto);
      goto LABEL_6;
    }
    v39 = v15;
    v40 = v35;
    v41 = v105;
    sub_243B6F934(v40, (uint64_t)v105, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    swift_retain();
    swift_retain();
    v42 = v109;
    LODWORD(v110) = _s10PhotosFace35StoredPhotoLayoutImageLocationProtoV2eeoiySbAC_ACtFZ_0(v109, v41);
    sub_243B7FA20((uint64_t)v41, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    sub_243B6F978((uint64_t)v30, &qword_2572EDDA0);
    sub_243B7FA20((uint64_t)v42, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    v38 = v31;
    sub_243B6F978((uint64_t)v21, &qword_2572EDDA0);
    if ((v110 & 1) == 0)
      goto LABEL_39;
  }
  v43 = v37;
  v111 = v38;
  v44 = v38
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
  swift_beginAccess();
  v45 = v108;
  sub_243B50168(v44, v108, &qword_2572EDDA0);
  v46 = v37;
  v47 = v37
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
  swift_beginAccess();
  v21 = v107;
  v48 = (uint64_t)&v107[*(int *)(v106 + 48)];
  sub_243B50168(v45, (uint64_t)v107, &qword_2572EDDA0);
  sub_243B50168(v47, v48, &qword_2572EDDA0);
  if (v36((uint64_t)v21, 1, v39) == 1)
  {
    sub_243B6F978(v45, &qword_2572EDDA0);
    if (v36(v48, 1, v39) == 1)
    {
      sub_243B6F978((uint64_t)v21, &qword_2572EDDA0);
      goto LABEL_16;
    }
LABEL_6:
    sub_243B6F978((uint64_t)v21, &qword_2572EF140);
    goto LABEL_39;
  }
  v49 = v103;
  sub_243B50168((uint64_t)v21, (uint64_t)v103, &qword_2572EDDA0);
  if (v36(v48, 1, v39) == 1)
  {
    sub_243B6F978(v108, &qword_2572EDDA0);
    sub_243B7FA20((uint64_t)v49, type metadata accessor for StoredPhotoLayoutImageLocationProto);
    goto LABEL_6;
  }
  v50 = v105;
  sub_243B6F934(v48, (uint64_t)v105, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  v51 = _s10PhotosFace35StoredPhotoLayoutImageLocationProtoV2eeoiySbAC_ACtFZ_0(v49, v50);
  sub_243B7FA20((uint64_t)v50, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  sub_243B6F978(v108, &qword_2572EDDA0);
  sub_243B7FA20((uint64_t)v49, type metadata accessor for StoredPhotoLayoutImageLocationProto);
  sub_243B6F978((uint64_t)v21, &qword_2572EDDA0);
  if ((v51 & 1) == 0)
    goto LABEL_39;
LABEL_16:
  v52 = v111
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  swift_beginAccess();
  v53 = v104;
  sub_243B50168(v52, v104, &qword_2572EDD98);
  v54 = v46
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  swift_beginAccess();
  v55 = v100;
  v56 = v100 + *(int *)(v101 + 48);
  sub_243B50168(v53, v100, &qword_2572EDD98);
  sub_243B50168(v54, v56, &qword_2572EDD98);
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
  v58 = v102;
  if (v57(v55, 1, v102) == 1)
  {
    sub_243B6F978(v53, &qword_2572EDD98);
    if (v57(v56, 1, v58) != 1)
      goto LABEL_22;
    sub_243B6F978(v55, &qword_2572EDD98);
  }
  else
  {
    v59 = v98;
    sub_243B50168(v55, (uint64_t)v98, &qword_2572EDD98);
    if (v57(v56, 1, v58) == 1)
    {
      sub_243B6F978(v104, &qword_2572EDD98);
      sub_243B7FA20((uint64_t)v59, type metadata accessor for StoredPhotoLayoutRectProto);
      goto LABEL_22;
    }
    v60 = v97;
    sub_243B6F934(v56, (uint64_t)v97, type metadata accessor for StoredPhotoLayoutRectProto);
    v61 = _s10PhotosFace26StoredPhotoLayoutRectProtoV2eeoiySbAC_ACtFZ_0(v59, v60);
    sub_243B7FA20((uint64_t)v60, type metadata accessor for StoredPhotoLayoutRectProto);
    sub_243B6F978(v104, &qword_2572EDD98);
    sub_243B7FA20((uint64_t)v59, type metadata accessor for StoredPhotoLayoutRectProto);
    sub_243B6F978(v55, &qword_2572EDD98);
    if ((v61 & 1) == 0)
      goto LABEL_39;
  }
  v62 = v111;
  v63 = (int *)(v111
              + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  v64 = *v63;
  v65 = (_DWORD *)(v43
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  if (v64 != *v65)
    goto LABEL_39;
  v66 = v62
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
  swift_beginAccess();
  v67 = v96;
  sub_243B50168(v66, v96, &qword_2572EDD98);
  v68 = v43
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
  swift_beginAccess();
  v55 = v95;
  v69 = v95 + *(int *)(v101 + 48);
  sub_243B50168(v67, v95, &qword_2572EDD98);
  sub_243B50168(v68, v69, &qword_2572EDD98);
  v70 = v102;
  if (v57(v55, 1, v102) != 1)
  {
    v73 = v94;
    sub_243B50168(v55, (uint64_t)v94, &qword_2572EDD98);
    if (v57(v69, 1, v70) != 1)
    {
      v74 = v97;
      sub_243B6F934(v69, (uint64_t)v97, type metadata accessor for StoredPhotoLayoutRectProto);
      v75 = _s10PhotosFace26StoredPhotoLayoutRectProtoV2eeoiySbAC_ACtFZ_0(v73, v74);
      sub_243B7FA20((uint64_t)v74, type metadata accessor for StoredPhotoLayoutRectProto);
      sub_243B6F978(v96, &qword_2572EDD98);
      sub_243B7FA20((uint64_t)v73, type metadata accessor for StoredPhotoLayoutRectProto);
      sub_243B6F978(v55, &qword_2572EDD98);
      v72 = v111;
      if ((v75 & 1) != 0)
        goto LABEL_34;
LABEL_39:
      swift_release();
      swift_release();
      v91 = 0;
      return v91 & 1;
    }
    sub_243B6F978(v96, &qword_2572EDD98);
    sub_243B7FA20((uint64_t)v73, type metadata accessor for StoredPhotoLayoutRectProto);
LABEL_22:
    sub_243B6F978(v55, &qword_2572EF138);
    goto LABEL_39;
  }
  sub_243B6F978(v67, &qword_2572EDD98);
  v71 = v57(v69, 1, v70);
  v72 = v111;
  if (v71 != 1)
    goto LABEL_22;
  sub_243B6F978(v55, &qword_2572EDD98);
LABEL_34:
  v76 = (double *)(v72
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
  swift_beginAccess();
  v77 = *v76;
  v78 = (double *)(v43
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
  swift_beginAccess();
  if (v77 != *v78)
    goto LABEL_39;
  v79 = (double *)(v72
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
  swift_beginAccess();
  v80 = *v79;
  v81 = (double *)(v43
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
  swift_beginAccess();
  if (v80 != *v81)
    goto LABEL_39;
  v82 = (double *)(v72
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
  swift_beginAccess();
  v83 = *v82;
  v84 = (double *)(v43
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
  swift_beginAccess();
  if (v83 != *v84)
    goto LABEL_39;
  v85 = (double *)(v72
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
  swift_beginAccess();
  v86 = *v85;
  v87 = (double *)(v43
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
  swift_beginAccess();
  if (v86 != *v87)
    goto LABEL_39;
  v88 = (char *)(v72
               + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  v89 = *v88;
  swift_release();
  v90 = (_BYTE *)(v43
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  LOBYTE(v90) = *v90;
  swift_release();
  v91 = v89 ^ v90 ^ 1;
  return v91 & 1;
}

uint64_t StoredPhotoLayoutProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for StoredPhotoLayoutProto, &qword_2572EEC30, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BC06E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_243BFD388();
  v4 = *(int *)(a1 + 20);
  if (qword_2572EB7C0 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_2572EEBA8;
  return swift_retain();
}

unint64_t sub_243BC0740()
{
  return 0xD000000000000016;
}

uint64_t sub_243BC075C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_243BC0794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*sub_243BC07CC())()
{
  return nullsub_1;
}

uint64_t sub_243BC07DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StoredPhotoLayoutProto.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_243BC07F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StoredPhotoLayoutProto.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_243BC0804()
{
  sub_243B88508(&qword_2572EF120, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BC0854@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7B8, (uint64_t)qword_2572EEB90, a1);
}

uint64_t sub_243BC0870()
{
  sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BC08B0()
{
  sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
  return sub_243BFD4C0();
}

unint64_t static StoredPhotoLayoutRectProto.protoMessageName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_243BC0920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EEBB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EEBB0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFB50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *(_QWORD *)(v11 + 8) = 1;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "width";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "height";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static StoredPhotoLayoutRectProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7C8, (uint64_t)qword_2572EEBB0, a1);
}

uint64_t StoredPhotoLayoutRectProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_243BFD430();
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t StoredPhotoLayoutRectProto.traverse<A>(visitor:)()
{
  double *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = sub_243BFD514(), !v1))
  {
    if (v0[1] == 0.0 || (result = sub_243BFD514(), !v1))
    {
      if (v0[2] == 0.0 || (result = sub_243BFD514(), !v1))
      {
        if (v0[3] == 0.0 || (result = sub_243BFD514(), !v1))
        {
          type metadata accessor for StoredPhotoLayoutRectProto(0);
          return sub_243BFD37C();
        }
      }
    }
  }
  return result;
}

uint64_t StoredPhotoLayoutRectProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for StoredPhotoLayoutRectProto, &qword_2572EEC38, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BC0D04@<X0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  return sub_243BFD388();
}

unint64_t sub_243BC0D28()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_243BC0D44()
{
  return StoredPhotoLayoutRectProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BC0D58()
{
  return StoredPhotoLayoutRectProto.traverse<A>(visitor:)();
}

uint64_t sub_243BC0D6C()
{
  sub_243B88508(&qword_2572EF118, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BC0DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7C8, (uint64_t)qword_2572EEBB0, a1);
}

uint64_t sub_243BC0DD8()
{
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BC0E18()
{
  sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
  return sub_243BFD4C0();
}

uint64_t _s10PhotosFace26StoredPhotoLayoutRectProtoV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3])
  {
    v11 = type metadata accessor for StoredPhotoLayoutRectProto(0);
    v12 = (char *)a1 + *(int *)(v11 + 32);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v7, (char *)a2 + *(int *)(v11 + 32), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_243BFD7D8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _s10PhotosFace22StoredPhotoLayoutProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), v14 = sub_243BBFAA8(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v7, a2, v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_243BFD7D8();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v7, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t _s10PhotosFace16StoredPhotoProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v19;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - v9;
  sub_243BC4650(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || (sub_243B8A454(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) == 0)
  {
    goto LABEL_15;
  }
  v12 = type metadata accessor for StoredPhotoProto(0);
  v13 = *(int *)(v12 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  if (!v15)
  {
    if (!v17)
    {
LABEL_17:
      v21 = a1 + *(int *)(v12 + 36);
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v22(v10, v21, v4);
      v22(v7, a2 + *(int *)(v12 + 36), v4);
      sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v19 = sub_243BFD7D8();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      return v19 & 1;
    }
LABEL_15:
    v19 = 0;
    return v19 & 1;
  }
  if (!v17)
    goto LABEL_15;
  if (*v14 == *v16 && v15 == v17)
    goto LABEL_17;
  v19 = 0;
  if ((sub_243BFE0F0() & 1) != 0)
    goto LABEL_17;
  return v19 & 1;
}

uint64_t _s10PhotosFace35StoredPhotoLayoutImageLocationProtoV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - v9;
  v11 = *a1;
  v12 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
  {
    if (v12)
    {
      if (v12 == 1)
      {
        if (v11 != 1)
          goto LABEL_20;
      }
      else if (v11 != 2)
      {
        goto LABEL_20;
      }
    }
    else if (v11)
    {
      goto LABEL_20;
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_20;
  }
  v13 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v14 = *(int *)(v13 + 24);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = *(uint64_t *)((char *)a1 + v14 + 8);
  v17 = (uint64_t *)((char *)a2 + v14);
  v18 = v17[1];
  if (!v16)
  {
    if (!v18)
    {
LABEL_21:
      v21 = (char *)a1 + *(int *)(v13 + 20);
      v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v22(v10, v21, v4);
      v22(v7, (char *)a2 + *(int *)(v13 + 20), v4);
      sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v20 = sub_243BFD7D8();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      return v20 & 1;
    }
LABEL_20:
    v20 = 0;
    return v20 & 1;
  }
  if (!v18)
    goto LABEL_20;
  if (*v15 == *v17 && v16 == v18)
    goto LABEL_21;
  v20 = 0;
  if ((sub_243BFE0F0() & 1) != 0)
    goto LABEL_21;
  return v20 & 1;
}

uint64_t sub_243BC14A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  _DWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDD98);
  MEMORY[0x24BDAC7A8](v3);
  v40 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EDDA0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1
     + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  v9 = type metadata accessor for StoredPhotoLayoutImageLocationProto(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v11 = v1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
  v10(v1+ OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, 1, 1, v9);
  v12 = v1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  v13 = type metadata accessor for StoredPhotoLayoutRectProto(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  v15 = (_DWORD *)(v1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition) = 0;
  v39 = v1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
  v14();
  v41 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder) = 0;
  v42 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder) = 0;
  v43 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder) = 0;
  v44 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness) = 0;
  v16 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited) = 0;
  v17 = a1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage;
  swift_beginAccess();
  sub_243B50168(v17, (uint64_t)v7, &qword_2572EDDA0);
  swift_beginAccess();
  sub_243BA5C84((uint64_t)v7, v8, &qword_2572EDDA0);
  swift_endAccess();
  v18 = a1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage;
  swift_beginAccess();
  sub_243B50168(v18, (uint64_t)v7, &qword_2572EDDA0);
  swift_beginAccess();
  sub_243BA5C84((uint64_t)v7, v11, &qword_2572EDDA0);
  swift_endAccess();
  v19 = a1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop;
  swift_beginAccess();
  v20 = v40;
  sub_243B50168(v19, v40, &qword_2572EDD98);
  swift_beginAccess();
  sub_243BA5C84(v20, v12, &qword_2572EDD98);
  swift_endAccess();
  v21 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  swift_beginAccess();
  LODWORD(v21) = *v21;
  swift_beginAccess();
  *v15 = (_DWORD)v21;
  v22 = a1
      + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect;
  swift_beginAccess();
  sub_243B50168(v22, v20, &qword_2572EDD98);
  v23 = v39;
  swift_beginAccess();
  sub_243BA5C84(v20, v23, &qword_2572EDD98);
  swift_endAccess();
  v24 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
  swift_beginAccess();
  v25 = *v24;
  v26 = v41;
  swift_beginAccess();
  *v26 = v25;
  v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
  swift_beginAccess();
  v28 = *v27;
  v29 = v42;
  swift_beginAccess();
  *v29 = v28;
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
  swift_beginAccess();
  v31 = *v30;
  v32 = v43;
  swift_beginAccess();
  *v32 = v31;
  v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
  swift_beginAccess();
  v34 = *v33;
  v35 = v44;
  swift_beginAccess();
  *v35 = v34;
  v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  swift_beginAccess();
  LOBYTE(v36) = *v36;
  swift_beginAccess();
  *v16 = (_BYTE)v36;
  return v1;
}

unint64_t sub_243BC1990()
{
  unint64_t result;

  result = qword_2572EEC20;
  if (!qword_2572EEC20)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for StoredPhotoLayoutImageLocationTypeProto, &type metadata for StoredPhotoLayoutImageLocationTypeProto);
    atomic_store(result, (unint64_t *)&qword_2572EEC20);
  }
  return result;
}

unint64_t sub_243BC19D8()
{
  unint64_t result;

  result = qword_2572EEC40;
  if (!qword_2572EEC40)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for StoredPhotoLayoutImageLocationTypeProto, &type metadata for StoredPhotoLayoutImageLocationTypeProto);
    atomic_store(result, (unint64_t *)&qword_2572EEC40);
  }
  return result;
}

unint64_t sub_243BC1A20()
{
  unint64_t result;

  result = qword_2572EEC48;
  if (!qword_2572EEC48)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for StoredPhotoLayoutImageLocationTypeProto, &type metadata for StoredPhotoLayoutImageLocationTypeProto);
    atomic_store(result, (unint64_t *)&qword_2572EEC48);
  }
  return result;
}

unint64_t sub_243BC1A68()
{
  unint64_t result;

  result = qword_2572EEC50;
  if (!qword_2572EEC50)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for StoredPhotoLayoutImageLocationTypeProto, &type metadata for StoredPhotoLayoutImageLocationTypeProto);
    atomic_store(result, (unint64_t *)&qword_2572EEC50);
  }
  return result;
}

unint64_t sub_243BC1AB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EEC58;
  if (!qword_2572EEC58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572EEC60);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2572EEC58);
  }
  return result;
}

uint64_t sub_243BC1AFC()
{
  return sub_243B88508(&qword_2572EEC68, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BC1B28()
{
  return sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BC1B54()
{
  return sub_243B88508(&qword_2572EEC18, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BC1B80()
{
  return sub_243B88508(&qword_2572EEC70, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
}

uint64_t sub_243BC1BAC()
{
  return sub_243B88508(&qword_2572EEC78, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BC1BD8()
{
  return sub_243B88508(&qword_2572EDDC8, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BC1C04()
{
  return sub_243B88508(&qword_2572EEC28, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BC1C30()
{
  return sub_243B88508(&qword_2572EEC80, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutImageLocationProto);
}

uint64_t sub_243BC1C5C()
{
  return sub_243B88508(&qword_2572EEC88, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BC1C88()
{
  return sub_243B88508(&qword_2572EDDA8, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BC1CB4()
{
  return sub_243B88508(&qword_2572EEC30, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BC1CE0()
{
  return sub_243B88508(&qword_2572EEC90, type metadata accessor for StoredPhotoLayoutProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutProto);
}

uint64_t sub_243BC1D0C()
{
  return sub_243B88508(&qword_2572EEC98, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BC1D38()
{
  return sub_243B88508(&qword_2572EDDD0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BC1D64()
{
  return sub_243B88508(&qword_2572EEC38, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BC1D90()
{
  return sub_243B88508(&qword_2572EECA0, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t)&protocol conformance descriptor for StoredPhotoLayoutRectProto);
}

uint64_t sub_243BC1DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243BBC7AC(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__baseImage, a2);
}

uint64_t sub_243BC1DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBC8D8(a1, a2, a3, a4, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t (*)(char *))StoredPhotoLayoutProto.baseImage.setter);
}

uint64_t sub_243BC1E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243BBC7AC(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__maskImage, a2);
}

uint64_t sub_243BC1E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBC8D8(a1, a2, a3, a4, type metadata accessor for StoredPhotoLayoutImageLocationProto, (uint64_t (*)(char *))StoredPhotoLayoutProto.maskImage.setter);
}

uint64_t sub_243BC1E4C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_243BBD0B8(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__originalCrop, a2);
}

uint64_t sub_243BC1E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBC8D8(a1, a2, a3, a4, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t (*)(char *))StoredPhotoLayoutProto.originalCrop.setter);
}

uint64_t sub_243BC1E8C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
                + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timePosition);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_243BC1EF0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_243BBD0B8(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeRect, a2);
}

uint64_t sub_243BC1F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBC8D8(a1, a2, a3, a4, type metadata accessor for StoredPhotoLayoutRectProto, (uint64_t (*)(char *))StoredPhotoLayoutProto.timeRect.setter);
}

double sub_243BC1F30@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_13Tm(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder, a2);
}

uint64_t sub_243BC1F3C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBD3EC(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__backgroundZorder);
}

double sub_243BC1F58@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_13Tm(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder, a2);
}

double keypath_get_13Tm@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  double *v4;
  double result;

  v4 = (double *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20)) + *a2);
  swift_beginAccess();
  result = *v4;
  *a3 = *(_QWORD *)v4;
  return result;
}

uint64_t sub_243BC1FCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBD3EC(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__foregroundZorder);
}

double sub_243BC1FE8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_13Tm(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder, a2);
}

uint64_t sub_243BC1FF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBD3EC(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__timeElementZorder);
}

double sub_243BC2010@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_13Tm(a1, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness, a2);
}

uint64_t sub_243BC201C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BBD3EC(a1, a2, a3, a4, &OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__imageAotbrightness);
}

uint64_t sub_243BC2038@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*(_QWORD *)(a1 + *(int *)(type metadata accessor for StoredPhotoLayoutProto(0) + 20))
               + OBJC_IVAR____TtCV10PhotosFace22StoredPhotoLayoutProtoP33_AB2BD396CE90CE0850AF56485F0C251613_StorageClass__userEdited);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

ValueMetadata *type metadata accessor for StoredPhotoLayoutImageLocationTypeProto()
{
  return &type metadata for StoredPhotoLayoutImageLocationTypeProto;
}

unint64_t initializeBufferWithCopyOfBuffer for StoredPhotoProto(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_243B7FBDC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v9 = *(int *)(a3 + 36);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = sub_243BFD394();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 40);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for StoredPhotoProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StoredPhotoProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoredPhotoProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_243B7FCC0(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 40);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for StoredPhotoProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(int *)(a3 + 36);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t assignWithTake for StoredPhotoProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_243B7FCC0(v6, v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhotoProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC24E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StoredPhotoProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC2568(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BC25DC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_243BFD394();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (_QWORD *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for StoredPhotoLayoutImageLocationProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayoutImageLocationProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC29DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_243BFD394();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayoutImageLocationProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC2A78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_243BFD394();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_243BC2AF8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoredPhotoLayoutProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_243BFD394();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for StoredPhotoLayoutProto(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for StoredPhotoLayoutProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StoredPhotoLayoutProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for StoredPhotoLayoutProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for StoredPhotoLayoutProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayoutProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC2DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_243BFD394();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayoutProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC2E60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_243BFD394();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_243BC2ED8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for StoredPhotoLayoutRectProto(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 32);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = sub_243BFD394();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for StoredPhotoLayoutRectProto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for StoredPhotoLayoutRectProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for StoredPhotoLayoutRectProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for StoredPhotoLayoutRectProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *assignWithTake for StoredPhotoLayoutRectProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StoredPhotoLayoutRectProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC31A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 32);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for StoredPhotoLayoutRectProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC31EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 32);
  v6 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_243BC3230()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_243BC32AC()
{
  return type metadata accessor for StoredPhotoLayoutProto._StorageClass(0);
}

void sub_243BC32B4()
{
  unint64_t v0;
  unint64_t v1;

  sub_243BC3384(319, &qword_2572EEF50, (void (*)(uint64_t))type metadata accessor for StoredPhotoLayoutImageLocationProto);
  if (v0 <= 0x3F)
  {
    sub_243BC3384(319, qword_2572EEF58, (void (*)(uint64_t))type metadata accessor for StoredPhotoLayoutRectProto);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_243BC3384(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_243BFDD0C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

BOOL SyncedPhotosFaceProto.hasDay.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 36) + 8) & 1) == 0;
}

uint64_t type metadata accessor for SyncedPhotosFaceProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EF298);
}

uint64_t SyncedPhotosFaceProto.day.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 36));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t SyncedPhotosFaceProto.day.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for SyncedPhotosFaceProto(0);
  v4 = v1 + *(int *)(result + 36);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t SyncFacesRequestProto.trackedFaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncFacesRequestProto.trackedFaces.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SyncFacesRequestProto.trackedFaces.modify())()
{
  return nullsub_1;
}

uint64_t SyncFacesRequestProto.cachedIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncFacesRequestProto.cachedIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SyncFacesRequestProto.cachedIdentifiers.modify())()
{
  return nullsub_1;
}

uint64_t SyncFacesRequestProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SyncFacesRequestProto(0) + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SyncFacesRequestProto(uint64_t a1)
{
  return sub_243BA3B6C(a1, qword_2572EF200);
}

uint64_t SyncFacesRequestProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SyncFacesRequestProto(0) + 24);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SyncFacesRequestProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SyncFacesRequestProto(0);
  return nullsub_1;
}

uint64_t SyncFacesRequestProto.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  type metadata accessor for SyncFacesRequestProto(0);
  return sub_243BFD388();
}

uint64_t SyncedPhotosFaceProto.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_243B7FBDC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t SyncedPhotosFaceProto.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_243B7FCC0(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*SyncedPhotosFaceProto.id.modify())()
{
  return nullsub_1;
}

uint64_t (*SyncedPhotosFaceProto.day.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return sub_243BC36D4;
}

uint64_t sub_243BC36D4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

Swift::Void __swiftcall SyncedPhotosFaceProto.clearDay()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 36);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t SyncedPhotosFaceProto.photos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncedPhotosFaceProto.photos.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SyncedPhotosFaceProto.photos.modify())()
{
  return nullsub_1;
}

uint64_t SyncedPhotosFaceProto.cached.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SyncedPhotosFaceProto.cached.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*SyncedPhotosFaceProto.cached.modify())()
{
  return nullsub_1;
}

uint64_t SyncedPhotosFaceProto.complete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t SyncedPhotosFaceProto.complete.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*SyncedPhotosFaceProto.complete.modify())()
{
  return nullsub_1;
}

uint64_t SyncedPhotosFaceProto.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SyncedPhotosFaceProto.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SyncedPhotosFaceProto(0) + 32);
  v4 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SyncedPhotosFaceProto.unknownFields.modify())(_QWORD, _QWORD, _QWORD, _QWORD)
{
  type metadata accessor for SyncedPhotosFaceProto(0);
  return nullsub_1;
}

uint64_t SyncedPhotosFaceProto.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  *(_OWORD *)a1 = xmmword_243C01680;
  v2 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = 0;
  v3 = type metadata accessor for SyncedPhotosFaceProto(0);
  result = sub_243BFD388();
  v5 = a1 + *(int *)(v3 + 36);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

unint64_t static SyncFacesRequestProto.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_243BC38F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EF148);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EF148);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243BFFAD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "trackedFaces";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cachedIdentifiers";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static SyncFacesRequestProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(&qword_2572EB7D0, (uint64_t)qword_2572EF148, a1);
}

uint64_t SyncFacesRequestProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_243BFD3DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        sub_243BFD40C();
      result = sub_243BFD3DC();
    }
  }
  return result;
}

uint64_t SyncFacesRequestProto.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16) || (result = sub_243BFD4F0(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16) || (result = sub_243BFD4F0(), !v1))
    {
      type metadata accessor for SyncFacesRequestProto(0);
      return sub_243BFD37C();
    }
  }
  return result;
}

uint64_t SyncFacesRequestProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for SyncFacesRequestProto, &qword_2572EF178, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

uint64_t sub_243BC3BCC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  return sub_243BFD388();
}

unint64_t sub_243BC3BF4()
{
  return 0xD000000000000015;
}

uint64_t sub_243BC3C10()
{
  return SyncFacesRequestProto.decodeMessage<A>(decoder:)();
}

uint64_t sub_243BC3C24()
{
  return SyncFacesRequestProto.traverse<A>(visitor:)();
}

uint64_t sub_243BC3C38()
{
  sub_243B88508(&qword_2572EF2E8, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BC3C88@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(&qword_2572EB7D0, (uint64_t)qword_2572EF148, a1);
}

uint64_t sub_243BC3CA4()
{
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BC3CE4()
{
  sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
  return sub_243BFD4C0();
}

unint64_t static SyncedPhotosFaceProto.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_243BC3D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_243BFD574();
  __swift_allocate_value_buffer(v0, qword_2572EF160);
  __swift_project_value_buffer(v0, (uint64_t)qword_2572EF160);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE388);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EE390);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_243C02210;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_243BFD55C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 3;
  *(_QWORD *)v11 = "day";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "photos";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "cached";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "complete";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_243BFD568();
}

uint64_t static SyncedPhotosFaceProto._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB4474(qword_2572EB7D8, (uint64_t)qword_2572EF160, a1);
}

uint64_t SyncedPhotosFaceProto.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_243BFD3DC();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          sub_243BFD418();
          goto LABEL_5;
        case 2:
          type metadata accessor for StoredPhotoProto(0);
          sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto);
          v4 = v3;
          sub_243BFD478();
          goto LABEL_5;
        case 3:
          type metadata accessor for SyncedPhotosFaceProto(0);
          v4 = v3;
          sub_243BFD46C();
          goto LABEL_5;
        case 4:
          v4 = v3;
          sub_243BFD40C();
          goto LABEL_5;
        case 5:
          v4 = v3;
          sub_243BFD3F4();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_243BFD3DC();
    }
  }
  return result;
}

void SyncedPhotosFaceProto.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_243BC4128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_243BFD4FC(), !v3))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16)
      || (type metadata accessor for StoredPhotoProto(0),
          sub_243B88508(&qword_2572ED710, type metadata accessor for StoredPhotoProto, (uint64_t)&protocol conformance descriptor for StoredPhotoProto), result = sub_243BFD544(), !v3))
    {
      result = sub_243BC4294(v2);
      if (!v3)
      {
        if (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16))
          sub_243BFD4F0();
        if (*(_BYTE *)(v2 + 32) == 1)
          sub_243BFD4D8();
        type metadata accessor for SyncedPhotosFaceProto(0);
        return sub_243BFD37C();
      }
    }
  }
  return result;
}

uint64_t sub_243BC4294(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for SyncedPhotosFaceProto(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 8) & 1) == 0)
    return sub_243BFD538();
  return result;
}

uint64_t SyncedPhotosFaceProto.hashValue.getter()
{
  return sub_243BB4620(type metadata accessor for SyncedPhotosFaceProto, &qword_2572EF180, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t sub_243BC4328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)a2 = xmmword_243C01680;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = 0;
  result = sub_243BFD388();
  v6 = a2 + *(int *)(a1 + 36);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

unint64_t sub_243BC4384()
{
  return 0xD000000000000015;
}

uint64_t sub_243BC43A0()
{
  return SyncedPhotosFaceProto.decodeMessage<A>(decoder:)();
}

void sub_243BC43B4()
{
  SyncedPhotosFaceProto.traverse<A>(visitor:)();
}

uint64_t sub_243BC43C8()
{
  sub_243B88508(&qword_2572EF2E0, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
  return sub_243BFD3C4();
}

uint64_t sub_243BC4418@<X0>(uint64_t a1@<X8>)
{
  return sub_243BB47F4(qword_2572EB7D8, (uint64_t)qword_2572EF160, a1);
}

uint64_t sub_243BC4434()
{
  sub_243B88508(&qword_2572ED790, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
  return sub_243BFD4B4();
}

uint64_t sub_243BC4474()
{
  sub_243B88508(&qword_2572ED790, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
  return sub_243BFD4C0();
}

uint64_t sub_243BC44C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_243B8D5E8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_243BC459C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_243BFD0B8();
  v11 = result;
  if (result)
  {
    result = sub_243BFD0DC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_243BFD0D0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_243B8D5E8(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_243BC4650(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_243BC469C()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_243BC46D0 + *((int *)qword_243BC48A8 + (v0 >> 62))))();
}

uint64_t sub_243BC46E0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t _s10PhotosFace21SyncFacesRequestProtoV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  if ((sub_243B899BC(*a1, *a2) & 1) != 0 && (sub_243B899BC(a1[1], a2[1]) & 1) != 0)
  {
    v11 = type metadata accessor for SyncFacesRequestProto(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v7, (char *)a2 + *(int *)(v11 + 24), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_243BFD7D8();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t _s10PhotosFace06SyncedaB5ProtoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  char v18;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_243BFD394();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - v9;
  sub_243BC4650(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_11;
  v12 = type metadata accessor for SyncedPhotosFaceProto(0);
  v13 = *(int *)(v12 + 36);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_11;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_11;
  }
  if ((sub_243B89294(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0
    && (sub_243B899BC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) != 0
    && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    v20 = a1 + *(int *)(v12 + 32);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21(v10, v20, v4);
    v21(v7, a2 + *(int *)(v12 + 32), v4);
    sub_243B88508(&qword_2572ED900, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = sub_243BFD7D8();
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v7, v4);
    v22(v10, v4);
    return v18 & 1;
  }
LABEL_11:
  v18 = 0;
  return v18 & 1;
}

uint64_t sub_243BC4BA4()
{
  return sub_243B88508(&qword_2572EF188, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

uint64_t sub_243BC4BD0()
{
  return sub_243B88508(&qword_2572ED788, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

uint64_t sub_243BC4BFC()
{
  return sub_243B88508(&qword_2572EF178, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

uint64_t sub_243BC4C28()
{
  return sub_243B88508(&qword_2572EF190, type metadata accessor for SyncFacesRequestProto, (uint64_t)&protocol conformance descriptor for SyncFacesRequestProto);
}

uint64_t sub_243BC4C54()
{
  return sub_243B88508(&qword_2572EF198, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t sub_243BC4C80()
{
  return sub_243B88508(&qword_2572ED790, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t sub_243BC4CAC()
{
  return sub_243B88508(&qword_2572EF180, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t sub_243BC4CD8()
{
  return sub_243B88508(&qword_2572EF1A0, type metadata accessor for SyncedPhotosFaceProto, (uint64_t)&protocol conformance descriptor for SyncedPhotosFaceProto);
}

uint64_t sub_243BC4D04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for SyncedPhotosFaceProto(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 36));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_243BC4D48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for SyncedPhotosFaceProto(0);
  v5 = a2 + *(int *)(result + 36);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SyncFacesRequestProto(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_243BFD394();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for SyncFacesRequestProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SyncFacesRequestProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_243BFD394();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for SyncFacesRequestProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for SyncFacesRequestProto(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SyncFacesRequestProto(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_243BFD394();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncFacesRequestProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC5070(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SyncFacesRequestProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_243BC50F8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BC516C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for SyncedPhotosFaceProto(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_243B7FBDC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v10 = *(int *)(a3 + 32);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = sub_243BFD394();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 36);
    v16 = a1 + v15;
    v17 = a2 + v15;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  }
  return a1;
}

uint64_t destroy for SyncedPhotosFaceProto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_243B7FCC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_243BFD394();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for SyncedPhotosFaceProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(int *)(a3 + 32);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_243BFD394();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  return a1;
}

uint64_t assignWithCopy for SyncedPhotosFaceProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_243B7FBDC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_243B7FCC0(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  return a1;
}

uint64_t initializeWithTake for SyncedPhotosFaceProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 36);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t assignWithTake for SyncedPhotosFaceProto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_243B7FCC0(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_243BFD394();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncedPhotosFaceProto()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC5628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SyncedPhotosFaceProto()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_243BC56B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_243BFD394();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_243BC5724()
{
  uint64_t result;
  unint64_t v1;

  result = sub_243BFD394();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void UUID.init(serialized:version:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_243BC5800()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  if (BYTE6(v1) == 16)
  {
    if (!v0)
      goto LABEL_13;
    *(_QWORD *)(v4 - 72) = v2;
    if (v0 == 1)
    {
      if ((int)v3 <= v3 >> 32)
      {
        if (!sub_243BFD0B8())
        {
LABEL_18:
          sub_243BFD0D0();
          __break(1u);
          goto LABEL_19;
        }
        if (!__OFSUB__((int)v3, sub_243BFD0DC()))
        {
          sub_243BFD0D0();
LABEL_13:
          sub_243BFD25C();
          return sub_243B7FCC0(v3, v1);
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      __break(1u);
    }
    else
    {
      v6 = *(_QWORD *)(v3 + 16);
      swift_retain();
      swift_retain();
      if (!sub_243BFD0B8())
      {
LABEL_19:
        sub_243BFD0D0();
        __break(1u);
        JUMPOUT(0x243BC5A74);
      }
      if (!__OFSUB__(v6, sub_243BFD0DC()))
      {
        sub_243BFD0D0();
        swift_release();
        swift_release();
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  sub_243BA3C68();
  swift_allocError();
  *v5 = 1;
  swift_willThrow();
  return sub_243B7FCC0(v3, v1);
}

uint64_t UUID.serialized(version:)()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t __src;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __src = sub_243BFD268();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  sub_243BFD268();
  return sub_243B84998(&__src, 16);
}

void FixedWidthInteger.init(serialized:version:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x24BDAC7A8](a1);
  if ((sub_243BFDF4C() & 7) == 0)
  {
    sub_243BFDF4C();
    __asm { BR              X9 }
  }
  __break(1u);
  JUMPOUT(0x243BC5FB4);
}

uint64_t FixedWidthInteger.serialized(version:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BFDF58();
  sub_243BC6194((uint64_t)v5, (uint64_t)sub_243BC60C8, 0, a2, MEMORY[0x24BEE4078], MEMORY[0x24BDCDDE8], MEMORY[0x24BEE40A8], v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v8[1];
}

uint64_t sub_243BC60C8@<X0>(uint64_t __src@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (__src)
  {
    v4 = (uint64_t)&a2[-__src];
    if (a2 == (_BYTE *)__src)
    {
      __src = 0;
      v5 = 0xC000000000000000;
    }
    else if (v4 <= 14)
    {
      __src = sub_243BC7224((_BYTE *)__src, a2);
      v5 = v7 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      sub_243BFD0E8();
      swift_allocObject();
      v6 = sub_243BFD0AC();
      if ((unint64_t)v4 >= 0x7FFFFFFF)
      {
        sub_243BFD1B4();
        __src = swift_allocObject();
        *(_QWORD *)(__src + 16) = 0;
        *(_QWORD *)(__src + 24) = v4;
        v5 = v6 | 0x8000000000000000;
      }
      else
      {
        __src = v4 << 32;
        v5 = v6 | 0x4000000000000000;
      }
    }
    *a3 = __src;
    a3[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return __src;
}

uint64_t sub_243BC6194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t sub_243BC622C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_243BC62A0(a1, a2, (uint64_t (*)(void))sub_243BC770C, a3);
}

uint64_t sub_243BC6248@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _WORD *a3@<X8>)
{
  return sub_243BC6360(a1, a2, a3);
}

uint64_t sub_243BC625C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_243BC6428(a1, a2, a3);
}

uint64_t sub_243BC6270@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_243BC64EC(a1, a2, a3);
}

uint64_t sub_243BC6284@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_243BC62A0(a1, a2, (uint64_t (*)(void))sub_243BC7588, a3);
}

uint64_t sub_243BC62A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X5>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  char v8;
  uint64_t result;

  v8 = a3();
  result = sub_243B7FCC0(a1, a2);
  if (!v4)
    *a4 = v8;
  return result;
}

uint64_t sub_243BC62F8()
{
  char *v0;
  char __src;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  __src = *v0;
  return sub_243B84998(&__src, 1);
}

uint64_t sub_243BC6360@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v3;
  __int16 v7;
  __int16 v8;
  uint64_t result;

  sub_243BC7884(a1, a2);
  v8 = v7;
  result = sub_243B7FCC0(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_243BC63B8()
{
  unsigned __int16 *v0;
  __int16 __src;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  __src = bswap32(*v0) >> 16;
  return sub_243B84998(&__src, 2);
}

uint64_t sub_243BC6428@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v7;
  int v8;
  uint64_t result;

  sub_243BC7B74(a1, a2);
  v8 = v7;
  result = sub_243B7FCC0(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_243BC6480()
{
  unsigned int *v0;
  unsigned int __src;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  __src = bswap32(*v0);
  return sub_243B84998(&__src, 4);
}

uint64_t sub_243BC64EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_243BC7E54(a1, a2);
  v8 = v7;
  result = sub_243B7FCC0(a1, a2);
  if (!v3)
    *a3 = v8;
  return result;
}

uint64_t sub_243BC6544()
{
  unint64_t *v0;
  _QWORD v2[2];

  v2[1] = *MEMORY[0x24BDAC8D0];
  v2[0] = bswap64(*v0);
  return sub_243B84998(v2, 8);
}

uint64_t String.init(serialized:version:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_243BFD82C();
  MEMORY[0x24BDAC7A8](v4);
  sub_243BFD820();
  result = sub_243BFD814();
  if (v6)
  {
    v7 = result;
    sub_243B7FCC0(a1, a2);
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t String.serialized(version:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_bridgeObjectRetain();
  return sub_243BD788C(a2, a3);
}

uint64_t sub_243BC668C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_243BFD82C();
  MEMORY[0x24BDAC7A8](v6);
  sub_243BFD820();
  result = sub_243BFD814();
  if (v8)
  {
    v9 = result;
    v10 = v8;
    result = sub_243B7FCC0(a1, a2);
    *a3 = v9;
    a3[1] = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_243BC6738()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  swift_bridgeObjectRetain();
  return sub_243BD788C(v2, v1);
}

uint64_t Array<A>.init(serialized:version:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v19 - v13;
  v20 = *a3;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  sub_243B7FBDC(a1, a2);
  swift_getAssociatedConformanceWitness();
  sub_243BB28DC();
  v15 = AssociatedTypeWitness;
  v16 = v23;
  sub_243BFD49C();
  if (v16)
  {
    sub_243B7FCC0(a1, a2);
  }
  else
  {
    v23 = v12;
    LOBYTE(v21[0]) = v20;
    *(_QWORD *)&v21[0] = (*(uint64_t (**)(char *, _OWORD *, uint64_t, uint64_t))(a5 + 32))(v14, v21, a4, a5);
    v17 = sub_243BFD9DC();
    MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v17);
    v15 = sub_243BFD9E8();
    sub_243B7FCC0(a1, a2);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, AssociatedTypeWitness);
  }
  return v15;
}

uint64_t Array<A>.serialized(version:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  char v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  v16 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a4 + 40))(a2, &v16, a3, a4, v11);
  if (!v4)
  {
    swift_getAssociatedConformanceWitness();
    a3 = sub_243BFD4A8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  }
  return a3;
}

uint64_t Array<A>.init(serialized:version:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a4;
  v10 = sub_243BFD3AC();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for GenericListProto(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *a3;
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  sub_243B7FBDC(a1, a2);
  sub_243BFD3A0();
  sub_243BC736C();
  v15 = v11;
  sub_243BFD49C();
  if (v5)
  {
    sub_243B7FCC0(a1, a2);
  }
  else
  {
    v24 = (uint64_t)&v24;
    *(_QWORD *)&v26 = *v13;
    MEMORY[0x24BDAC7A8](v26);
    v16 = a5;
    v17 = v25;
    *(&v24 - 4) = v25;
    *(&v24 - 3) = v16;
    *((_BYTE *)&v24 - 16) = v14;
    swift_bridgeObjectRetain();
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF300);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
    v20 = sub_243BC73D4();
    v21 = sub_243B76E5C((void (*)(char *, char *))sub_243BC73B4, (uint64_t)(&v24 - 6), v18, v17, v19, v20, MEMORY[0x24BEE3F20], (uint64_t)&v29);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = v21;
    v22 = sub_243BFD9DC();
    MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v22);
    v15 = sub_243BFD9E8();
    sub_243B7FCC0(a1, a2);
    sub_243BC7420((uint64_t)v13);
  }
  return v15;
}

uint64_t sub_243BC6D44(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(uint64_t, unint64_t, char *, uint64_t, uint64_t);
  uint64_t result;
  char v13;

  v9 = *a1;
  v10 = a1[1];
  v13 = a2;
  v11 = *(uint64_t (**)(uint64_t, unint64_t, char *, uint64_t, uint64_t))(a4 + 8);
  sub_243B7FBDC(v9, v10);
  result = v11(v9, v10, &v13, a3, a4);
  if (v5)
    *a5 = v5;
  return result;
}

uint64_t Array<A>.serialized(version:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];

  v9 = type metadata accessor for GenericListProto(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v10) = *a1;
  v22[2] = a2;
  v19 = a3;
  v20 = a4;
  v21 = v10;
  v12 = sub_243BFD9DC();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE498);
  v14 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v12);
  v15 = sub_243B76E5C((void (*)(char *, char *))sub_243BC745C, (uint64_t)v18, v12, MEMORY[0x24BDCDDE8], v13, v14, MEMORY[0x24BEE3F20], (uint64_t)v22);
  if (!v4)
  {
    MEMORY[0x24BDAC7A8](v15);
    *(_QWORD *)&v18[-16] = v16;
    sub_243BC736C();
    sub_243BFD4CC();
    swift_bridgeObjectRelease();
    v9 = sub_243BFD4A8();
    sub_243BC7420((uint64_t)v11);
  }
  return v9;
}

uint64_t sub_243BC6F80(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = a2;
  return result;
}

uint64_t Array<A>.gather(attachments:version:)()
{
  uint64_t v0;

  v0 = sub_243BFD9DC();
  MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v0);
  return sub_243BFD910();
}

uint64_t Array<A>.save(attachments:version:)()
{
  uint64_t v0;

  v0 = sub_243BFD9DC();
  MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v0);
  return sub_243BFD910();
}

uint64_t sub_243BC70C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  char v10;

  v8 = *(_QWORD *)(a5 - 8);
  v10 = *a3;
  result = Array<A>.init(serialized:version:)(a1, a2, &v10, *(_QWORD *)(a4 + 16), v8);
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t sub_243BC7100(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.serialized(version:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t sub_243BC7124()
{
  return Array<A>.gather(attachments:version:)();
}

uint64_t sub_243BC7138()
{
  return Array<A>.save(attachments:version:)();
}

void sub_243BC715C(uint64_t a1, uint64_t a2)
{
  UUID.init(serialized:version:)(a1, a2);
}

uint64_t sub_243BC7170()
{
  return UUID.serialized(version:)();
}

uint64_t Data.serialized(version:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_243B7FBDC(a2, a3);
  return a2;
}

uint64_t sub_243BC71DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_243BC71E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_243B7FBDC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_243BC7224(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

unint64_t sub_243BC72E4()
{
  unint64_t result;

  result = qword_2572EF2F0;
  if (!qword_2572EF2F0)
  {
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2572EF2F0);
  }
  return result;
}

unint64_t sub_243BC7328()
{
  unint64_t result;

  result = qword_2572EF2F8;
  if (!qword_2572EF2F8)
  {
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_2572EF2F8);
  }
  return result;
}

unint64_t sub_243BC736C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EE3F0;
  if (!qword_2572EE3F0)
  {
    v1 = type metadata accessor for GenericListProto(255);
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for GenericListProto, v1);
    atomic_store(result, (unint64_t *)&qword_2572EE3F0);
  }
  return result;
}

uint64_t sub_243BC73B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_243BC6D44(a1, *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_243BC73D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EF308;
  if (!qword_2572EF308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572EF300);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2572EF308);
  }
  return result;
}

uint64_t sub_243BC7420(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenericListProto(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243BC745C@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v10 = *(_BYTE *)(v2 + 32);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 16))(&v10, v6);
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    *a2 = result;
    a2[1] = v9;
  }
  return result;
}

uint64_t sub_243BC74B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_243BC7500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 24))(v3, &v5, v1);
}

uint64_t sub_243BC754C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v3, &v5, v1);
}

void sub_243BC7588(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_243BC75CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(a2) != 1)
    goto LABEL_9;
  if (!a3)
  {
    if ((a2 & 0xFF000000000000) != 0)
    {
      if ((result & 0x80) != 0)
        goto LABEL_12;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (a3 != 1)
    goto LABEL_13;
  v3 = (int)result;
  if ((int)result >= result >> 32)
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = sub_243BFD0B8();
  if (!v4)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    JUMPOUT(0x243BC76FCLL);
  }
  v5 = v4;
  v6 = sub_243BFD0DC();
  v7 = v3 - v6;
  if (__OFSUB__(v3, v6))
  {
    __break(1u);
LABEL_9:
    sub_243BA3C68();
    swift_allocError();
    *v8 = 1;
    return swift_willThrow();
  }
  while (1)
  {
    result = *(unsigned __int8 *)(v5 + v7);
    if ((result & 0x80) == 0)
      return result;
LABEL_12:
    __break(1u);
LABEL_13:
    v9 = *(_QWORD *)(result + 16);
    if (v9 >= *(_QWORD *)(result + 24))
      goto LABEL_20;
    v10 = sub_243BFD0B8();
    if (!v10)
      goto LABEL_23;
    v5 = v10;
    v11 = sub_243BFD0DC();
    v7 = v9 - v11;
    if (__OFSUB__(v9, v11))
      goto LABEL_21;
  }
}

void sub_243BC770C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_243BC7750@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(a2) != 1)
    goto LABEL_9;
  if (a3)
  {
    if (a3 == 1)
    {
      v3 = (int)result;
      if ((int)result < result >> 32)
      {
        v4 = sub_243BFD0B8();
        if (v4)
        {
          v5 = v4;
          v6 = sub_243BFD0DC();
          v7 = v3 - v6;
          if (!__OFSUB__(v3, v6))
            return *(unsigned __int8 *)(v5 + v7);
          __break(1u);
LABEL_9:
          sub_243BA3C68();
          swift_allocError();
          *v8 = 1;
          return swift_willThrow();
        }
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x243BC7874);
      }
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    if ((a2 & 0xFF000000000000) != 0)
      return result;
    __break(1u);
  }
  v9 = *(_QWORD *)(result + 16);
  if (v9 >= *(_QWORD *)(result + 24))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = sub_243BFD0B8();
  if (!v10)
    goto LABEL_21;
  v5 = v10;
  v11 = sub_243BFD0DC();
  v7 = v9 - v11;
  if (__OFSUB__(v9, v11))
LABEL_19:
    __break(1u);
  return *(unsigned __int8 *)(v5 + v7);
}

void sub_243BC7884(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_243BC78D0@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (BYTE6(a1) != 2)
    goto LABEL_16;
  v3 = (int)v2;
  if (!a2)
  {
    if (BYTE6(a1) && BYTE6(a1) > 1uLL)
      return BYTE1(v2) | (v2 << 8);
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 == 1)
    v4 = (int)v2;
  else
    v4 = *(_QWORD *)(v2 + 16);
  if (a2 == 1)
  {
    if (v4 >= (int)v2)
    {
      v5 = v2 >> 32;
      if (v4 < v2 >> 32)
      {
        v6 = sub_243BFD0B8();
        if (!v6)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        v7 = v6;
        v8 = sub_243BFD0DC();
        v9 = v4 - v8;
        if (__OFSUB__(v4, v8))
        {
LABEL_15:
          __break(1u);
LABEL_16:
          sub_243BA3C68();
          swift_allocError();
          *v16 = 1;
          return swift_willThrow();
        }
        v10 = v4 + 1;
        if (v10 >= v3 && v10 < v5)
        {
          v11 = *(unsigned __int8 *)(v7 + v9);
          v12 = sub_243BFD0B8();
          if (v12)
          {
            v13 = v12;
            v14 = sub_243BFD0DC();
            v15 = v10 - v14;
            if (!__OFSUB__(v10, v14))
              return *(unsigned __int8 *)(v13 + v15) | (v11 << 8);
            goto LABEL_15;
          }
          goto LABEL_36;
        }
      }
    }
    goto LABEL_32;
  }
  if (v4 < *(_QWORD *)(v2 + 16))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v4 >= *(_QWORD *)(v2 + 24))
    goto LABEL_34;
  v18 = sub_243BFD0B8();
  if (!v18)
  {
LABEL_37:
    __break(1u);
    JUMPOUT(0x243BC7B64);
  }
  v19 = v18;
  v20 = sub_243BFD0DC();
  v21 = v4 - v20;
  if (__OFSUB__(v4, v20))
    goto LABEL_35;
  v22 = v4 + 1;
  if (v22 < *(_QWORD *)(v2 + 16))
    goto LABEL_33;
  if (v22 >= *(_QWORD *)(v2 + 24))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  v11 = *(unsigned __int8 *)(v19 + v21);
  v23 = sub_243BFD0B8();
  if (!v23)
    goto LABEL_37;
  v13 = v23;
  v24 = sub_243BFD0DC();
  v15 = v22 - v24;
  if (__OFSUB__(v22, v24))
    goto LABEL_35;
  return *(unsigned __int8 *)(v13 + v15) | (v11 << 8);
}

void sub_243BC7B74(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_243BC7BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (BYTE6(v0) == 4)
  {
    *(_QWORD *)(v4 - 112) = (int)v1;
    if (v3)
    {
      if (v3 == 1)
        v5 = *(_QWORD *)(v4 - 112);
      else
        v5 = *(_QWORD *)(v1 + 16);
    }
    else
    {
      v5 = 0;
    }
    v7 = 0;
    v2 = 0;
    while (1)
    {
      v9 = v5 + v7;
      if (v3)
      {
        if (v3 == 1)
        {
          if (v9 < *(_QWORD *)(v4 - 112) || v9 >= v1 >> 32)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            JUMPOUT(0x243BC7E30);
          }
          v10 = sub_243BFD0B8();
          if (!v10)
          {
            __break(1u);
LABEL_34:
            __break(1u);
          }
          v11 = v10;
          v12 = sub_243BFD0DC();
          v13 = v9 - v12;
          if (__OFSUB__(v9, v12))
            goto LABEL_31;
        }
        else
        {
          if (v9 < *(_QWORD *)(v1 + 16))
            goto LABEL_30;
          if (v9 >= *(_QWORD *)(v1 + 24))
            goto LABEL_32;
          v14 = sub_243BFD0B8();
          if (!v14)
            goto LABEL_34;
          v11 = v14;
          v15 = sub_243BFD0DC();
          v13 = v9 - v15;
          if (__OFSUB__(v9, v15))
          {
            __break(1u);
            return v2;
          }
        }
        v8 = *(unsigned __int8 *)(v11 + v13);
      }
      else
      {
        if (v9 >= BYTE6(v0))
          goto LABEL_29;
        *(_QWORD *)(v4 - 102) = v1;
        *(_WORD *)(v4 - 94) = v0;
        *(_BYTE *)(v4 - 92) = BYTE2(v0);
        *(_BYTE *)(v4 - 91) = BYTE3(v0);
        *(_BYTE *)(v4 - 90) = BYTE4(v0);
        *(_BYTE *)(v4 - 89) = BYTE5(v0);
        v8 = *(unsigned __int8 *)(v4 - 102 + v5 + v7);
      }
      ++v7;
      v2 = ((_DWORD)v2 << 8) | v8;
      if (v7 == 4)
        return v2;
    }
  }
  sub_243BA3C68();
  swift_allocError();
  *v6 = 1;
  swift_willThrow();
  return v2;
}

void sub_243BC7E54(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_243BC7EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (BYTE6(v0) == 8)
  {
    *(_QWORD *)(v4 - 112) = (int)v1;
    if (v3)
    {
      if (v3 == 1)
        v5 = *(_QWORD *)(v4 - 112);
      else
        v5 = *(_QWORD *)(v1 + 16);
    }
    else
    {
      v5 = 0;
    }
    v7 = 0;
    v2 = 0;
    while (1)
    {
      v9 = v5 + v7;
      if (v3)
      {
        if (v3 == 1)
        {
          if (v9 < *(_QWORD *)(v4 - 112) || v9 >= v1 >> 32)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            JUMPOUT(0x243BC8110);
          }
          v10 = sub_243BFD0B8();
          if (!v10)
          {
            __break(1u);
LABEL_34:
            __break(1u);
          }
          v11 = v10;
          v12 = sub_243BFD0DC();
          v13 = v9 - v12;
          if (__OFSUB__(v9, v12))
            goto LABEL_31;
        }
        else
        {
          if (v9 < *(_QWORD *)(v1 + 16))
            goto LABEL_30;
          if (v9 >= *(_QWORD *)(v1 + 24))
            goto LABEL_32;
          v14 = sub_243BFD0B8();
          if (!v14)
            goto LABEL_34;
          v11 = v14;
          v15 = sub_243BFD0DC();
          v13 = v9 - v15;
          if (__OFSUB__(v9, v15))
          {
            __break(1u);
            return v2;
          }
        }
        v8 = *(unsigned __int8 *)(v11 + v13);
      }
      else
      {
        if (v9 >= BYTE6(v0))
          goto LABEL_29;
        *(_QWORD *)(v4 - 102) = v1;
        *(_WORD *)(v4 - 94) = v0;
        *(_BYTE *)(v4 - 92) = BYTE2(v0);
        *(_BYTE *)(v4 - 91) = BYTE3(v0);
        *(_BYTE *)(v4 - 90) = BYTE4(v0);
        *(_BYTE *)(v4 - 89) = BYTE5(v0);
        v8 = *(unsigned __int8 *)(v4 - 102 + v5 + v7);
      }
      ++v7;
      v2 = (v2 << 8) | v8;
      if (v7 == 8)
        return v2;
    }
  }
  sub_243BA3C68();
  swift_allocError();
  *v6 = 1;
  swift_willThrow();
  return v2;
}

uint64_t sub_243BC8134()
{
  return sub_243BC62F8();
}

uint64_t sub_243BC817C()
{
  return sub_243BC63B8();
}

uint64_t sub_243BC81C4()
{
  return sub_243BC6480();
}

uint64_t sub_243BC820C()
{
  return sub_243BC6544();
}

uint64_t sub_243BC8254(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_243BC8298()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t BroadcastSequence.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  BroadcastSequence.init()();
  return v0;
}

uint64_t BroadcastSequence.init()()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDB68();
  *(_QWORD *)(v0 + 16) = sub_243BFD718();
  *(_BYTE *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_243BC8328(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v2 = *(_QWORD *)(*v1 + 80);
  v24 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v5 = sub_243BFDB38();
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v21 - v6;
  v25 = v2;
  v8 = sub_243BFDB68();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - v13;
  swift_beginAccess();
  v15 = v1[2];
  v16 = swift_bridgeObjectRetain();
  if (!MEMORY[0x249501D74](v16, v8))
    return swift_bridgeObjectRelease();
  for (i = 0; ; ++i)
  {
    v18 = sub_243BFD994();
    sub_243BFD970();
    if ((v18 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * i, v8);
      v19 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_243BFDE5C();
    if (v21 != 8)
      break;
    v27 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 16))(v14, &v27, v8);
    swift_unknownObjectRelease();
    v19 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v4, v26, v25);
    sub_243BFDB50();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v19 == MEMORY[0x249501D74](v15, v8))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_243BC85BC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  _BYTE v17[24];
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v3 = sub_243BFDB68();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v17[-v6];
  v8 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v9 = *(_QWORD *)(v1 + 16);
  v10 = swift_bridgeObjectRetain();
  if (!MEMORY[0x249501D74](v10, v3))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v16 = sub_243BFD97C();
    swift_beginAccess();
    *v8 = v16;
    return swift_bridgeObjectRelease();
  }
  v11 = 0;
  while (1)
  {
    v12 = sub_243BFD994();
    sub_243BFD970();
    if ((v12 & 1) != 0)
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v4 + 16))(v7, v9+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v11, v3);
      v13 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = sub_243BFDE5C();
    if (v5 != 8)
      break;
    v18 = result;
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v4 + 16))(v7, &v18, v3);
    swift_unknownObjectRelease();
    v13 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
LABEL_5:
    v18 = (uint64_t)a1;
    v14 = a1;
    sub_243BFDB5C();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
    ++v11;
    if (v13 == MEMORY[0x249501D74](v9, v3))
      goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_243BC87B4()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v2 = sub_243BFDB44();
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - v4;
  if (v0[24] == 1)
  {
    MEMORY[0x24BDAC7A8](v3);
    *(&v7 - 2) = v1;
  }
  sub_243BC8924((uint64_t)v5);
  return sub_243BFDB80();
}

uint64_t sub_243BC88C8()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDB68();
  return sub_243BFDB5C();
}

uint64_t sub_243BC8924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE6CA0];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v3 = sub_243BFDB44();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_243BC8990(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  v2 = sub_243BFDB68();
  v3 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v7 - v5, a1, v2, v3);
  swift_beginAccess();
  sub_243BFD9DC();
  sub_243BFD9B8();
  return swift_endAccess();
}

uint64_t BroadcastSequence.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BroadcastSequence.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_243BC8AA0(uint64_t a1)
{
  return sub_243BC8990(a1);
}

uint64_t sub_243BC8AA8()
{
  return sub_243BC88C8();
}

uint64_t sub_243BC8AB0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for BroadcastSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BroadcastSequence);
}

uint64_t method lookup function for BroadcastSequence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BroadcastSequence.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of BroadcastSequence.yield(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of BroadcastSequence.finish(throwing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of BroadcastSequence.listen()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

void sub_243BC8B40()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDB74();
  JUMPOUT(0x249502B6CLL);
}

uint64_t AsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t sub_243BC8BA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[4];
  v1 = v0[5];
  swift_getAssociatedTypeWitness();
  v0[3] = sub_243BFD718();
  v3 = swift_task_alloc();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  sub_243BFD9DC();
  *v4 = v0;
  v4[1] = sub_243BC8C84;
  return sub_243BFDB2C();
}

uint64_t sub_243BC8C84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BC8CF0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_243BC8CFC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BC8D30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;

  v2[2] = a1;
  v2[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[4] = AssociatedTypeWitness;
  v2[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BC8DA8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_243BFD9DC();
  sub_243BFD9B8();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BC8E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B4D7A0;
  return sub_243BC8D30(a1, a2);
}

uint64_t sub_243BC8E80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t DestructableSequence.__allocating_init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  v4 = v3;
  swift_allocObject();
  v8 = sub_243BC9434(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
  return v8;
}

uint64_t DestructableSequence.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *v3;
  v6 = sub_243BC9434(a1, a2, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t sub_243BC8F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v3 = v2;
  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v3 + *(_QWORD *)(v5 + 96), v6, v11);
  sub_243BFDB14();
  DestructableIterator.init(_:_:)((uint64_t)v13, v3, a2);
  return swift_retain();
}

uint64_t DestructableIterator.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t result;

  v7 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  result = type metadata accessor for DestructableIterator(0, v7, v6, v9);
  *(_QWORD *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t sub_243BC90E4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  uint64_t result;
  void (*v6)(uint64_t);
  uint64_t v7;

  v1 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)) + 136);
  v2 = swift_retain();
  v3 = (unsigned __int8 *)v1(v2);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(1u, v3));
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(uint64_t))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
    v7 = swift_retain();
    v6(v7);
    return swift_release();
  }
  return result;
}

uint64_t *DestructableSequence.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_243BC90E4();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96));
  swift_release();
  swift_release();
  return v0;
}

uint64_t DestructableSequence.__deallocating_deinit()
{
  DestructableSequence.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_243BC91FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_243BC8F5C(a1, a2);
  return swift_release();
}

uint64_t DestructableIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = (_QWORD *)swift_task_alloc();
  v3[7] = v4;
  *v4 = v3;
  v4[1] = sub_243BC92EC;
  return sub_243BFDA30();
}

uint64_t sub_243BC92EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_243BC9358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v1, 1, AssociatedTypeWitness) == 1)sub_243BC90E4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BC93D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_243B4D7A0;
  return DestructableIterator.next()(a1, a2);
}

uint64_t sub_243BC9434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 80) - 8) + 16))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 96), a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF440);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = 0;
  *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 104)) = v6;
  v7 = (_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 112));
  *v7 = a2;
  v7[1] = a3;
  return v3;
}

uint64_t type metadata accessor for DestructableIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DestructableIterator);
}

void sub_243BC94C4()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BC94D4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DestructableSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DestructableSequence);
}

uint64_t method lookup function for DestructableSequence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DestructableSequence.__allocating_init(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of DestructableSequence.makeAsyncIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_243BC958C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243BC9614(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_243BC96E0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t sub_243BC9744(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_243BC97C8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_243BC9858(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_243BC98D8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_243BC9960(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void sub_243BC9AA8(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_243BC9BBC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x243BC9C34);
}

void sub_243BC9BC4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x243BC9BCCLL);
  JUMPOUT(0x243BC9C34);
}

void sub_243BC9C10()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x243BC9C34);
}

void sub_243BC9C18()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x243BC9C34);
}

uint64_t sub_243BC9C20@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x243BC9C34);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x243BC9C30);
    JUMPOUT(0x243BC9C2CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t makeSynchronous<A, B>(isolation:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a1;
  v12[6] = a2;
  swift_retain();
  generateElements<A>(isolation:_:)((uint64_t)&unk_2572EF450, (uint64_t)v12, a3, a6);
  return swift_release();
}

uint64_t generateOne<A>(isolation:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  swift_retain();
  generateElements<A>(isolation:_:)((uint64_t)&unk_2572EF460, (uint64_t)v8, a3, a4);
  return swift_release();
}

uint64_t sub_243BC9D58(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v5[3] = a2;
  v5[4] = a5;
  v5[2] = a1;
  v5[5] = *(_QWORD *)(a5 - 8);
  v7 = swift_task_alloc();
  v5[6] = v7;
  v10 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v8 = (_QWORD *)swift_task_alloc();
  v5[7] = v8;
  *v8 = v5;
  v8[1] = sub_243BC9DE8;
  return v10(v7);
}

uint64_t sub_243BC9DE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD);

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v5 = (uint64_t (*)(_QWORD))(**(int **)(v2 + 16) + *(_QWORD *)(v2 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 72) = v4;
  *v4 = v2;
  v4[1] = sub_243BC9E94;
  return v5(*(_QWORD *)(v2 + 48));
}

uint64_t sub_243BC9E94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(v5 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_243BC9F38()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BC9F6C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t generateElements<A>(isolation:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  type metadata accessor for AsyncThrowingChannel(0, a3, v11, MEMORY[0x24BEE3F20]);
  v12 = AsyncThrowingChannel.__allocating_init()();
  v13 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = a2;
  v14[6] = v12;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v10, (uint64_t)&unk_2572EF470, (uint64_t)v14);
  result = swift_release();
  *a4 = v12;
  return result;
}

uint64_t generateArray<A>(isolation:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  swift_retain();
  generateElements<A>(isolation:_:)((uint64_t)&unk_2572EF480, (uint64_t)v8, a3, a4);
  return swift_release();
}

uint64_t sub_243BCA134(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v5[4] = a2;
  v5[5] = a5;
  v5[3] = a1;
  v7 = *(_QWORD *)(a5 - 8);
  v5[6] = v7;
  v5[7] = *(_QWORD *)(v7 + 64);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v10 = (uint64_t (*)(void))((char *)a3 + *a3);
  v8 = (_QWORD *)swift_task_alloc();
  v5[10] = v8;
  *v8 = v5;
  v8[1] = sub_243BCA1CC;
  return v10();
}

uint64_t sub_243BCA1CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 88) = a1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_243BCA250()
{
  uint64_t v0;
  char v1;
  int *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);

  if (MEMORY[0x249501D74](*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 40)))
  {
    v1 = sub_243BFD994();
    sub_243BFD970();
    if ((v1 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 88)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 48) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 48) + 80)), *(_QWORD *)(v0 + 40));
LABEL_4:
      *(_QWORD *)(v0 + 96) = 1;
      v2 = *(int **)(v0 + 24);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
      v10 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 104) = v3;
      *v3 = v0;
      v3[1] = sub_243BCA3B0;
      return v10(*(_QWORD *)(v0 + 64));
    }
    v5 = *(_QWORD *)(v0 + 56);
    result = sub_243BFDE5C();
    if (v5 == 8)
    {
      v6 = result;
      v7 = *(_QWORD *)(v0 + 72);
      v8 = *(_QWORD *)(v0 + 40);
      v9 = *(_QWORD *)(v0 + 48);
      *(_QWORD *)(v0 + 16) = v6;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v0 + 16, v8);
      swift_unknownObjectRelease();
      goto LABEL_4;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_243BCA3B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_243BCA41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 64), v3);
  if (v2 == MEMORY[0x249501D74](v1, v3))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 96);
  v6 = sub_243BFD994();
  sub_243BFD970();
  if ((v6 & 1) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 48) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 88)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 48) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 48) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 48) + 72) * v5, *(_QWORD *)(v0 + 40));
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 56);
    result = sub_243BFDE5C();
    if (v9 != 8)
      goto LABEL_10;
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 16) = result;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v0 + 16, v11);
    result = swift_unknownObjectRelease();
  }
  *(_QWORD *)(v0 + 96) = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v7 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
    v13 = (uint64_t (*)(_QWORD))((char *)v7 + *v7);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v8;
    *v8 = v0;
    v8[1] = sub_243BCA3B0;
    return v13(*(_QWORD *)(v0 + 64));
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_243BCA5B0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCA5FC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t);

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a2;
  v7[5] = a5;
  v7[3] = a1;
  v7[8] = *(_QWORD *)(a5 - 8);
  v7[9] = swift_task_alloc();
  sub_243BFDD0C();
  v7[10] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[11] = AssociatedTypeWitness;
  v7[12] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[13] = swift_task_alloc();
  v7[14] = *(_QWORD *)(a6 - 8);
  v7[15] = swift_task_alloc();
  v11 = swift_task_alloc();
  v7[16] = v11;
  v14 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v12 = (_QWORD *)swift_task_alloc();
  v7[17] = v12;
  *v12 = v7;
  v12[1] = sub_243BCA734;
  return v14(v11);
}

uint64_t sub_243BCA734()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BCA798()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[14] + 16))(v0[15], v0[16], v0[6]);
  sub_243BFDB14();
  swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = v1;
  *v1 = v0;
  v1[1] = sub_243BCA85C;
  return sub_243BFDA3C();
}

uint64_t sub_243BCA85C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BCA8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD);

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 48);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 72), v1, v3);
    v10 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v9;
    *v9 = v0;
    v9[1] = sub_243BCA9F0;
    return v10(*(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_243BCA9F0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BCAA54()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[5]);
  swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[19] = v1;
  *v1 = v0;
  v1[1] = sub_243BCA85C;
  return sub_243BFDA3C();
}

uint64_t sub_243BCAAF4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCAB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCABF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCAC9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243BCACC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (int *)v2[5];
  v10 = v2[6];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_243B6A428;
  return sub_243BCA5FC(a1, a2, v9, v10, v6, v7, v8);
}

uint64_t sub_243BCAD4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = (int *)v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_243B4D7A0;
  return sub_243BC9D58(a1, a2, v7, v8, v6);
}

uint64_t sub_243BCADC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_243BCADE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void *, _QWORD);

  v3 = (uint64_t (*)(void *, _QWORD))(**(int **)(v0 + 16) + *(_QWORD *)(v0 + 16));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_243BCAE44;
  return v3(&unk_2572EF490, *(_QWORD *)(v0 + 32));
}

uint64_t sub_243BCAE44()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BCAEA8()
{
  uint64_t v0;

  AsyncThrowingChannel.finish()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCAED8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  AsyncThrowingChannel.fail<>(_:)(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BCAF18()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243BCAF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_243B4D7A0;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch();
}

uint64_t sub_243BCAFB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243BCAFD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = (int *)v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_243B6A428;
  return sub_243BCA134(a1, a2, v7, v8, v6);
}

void get_witness_table_l10PhotosFace20AsyncThrowingChannelCyxs5Error_pGSciHPyHCTm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  type metadata accessor for AsyncThrowingChannel(255, v1, v2, MEMORY[0x24BEE3F20]);
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BCB0A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B613CC;
  return AsyncThrowingChannel.send(_:)(a1);
}

uint64_t sub_243BCB0FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_243B6A428;
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_243B613CC;
  return AsyncThrowingChannel.send(_:)(a1);
}

uint64_t AsyncIteratorProtocol.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t IterateOnceSequence.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t IterateOnceSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_243BCB228(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_243BCB230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  IterateOnceSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_243BCB260(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243BCB310 + 4 * byte_243C03780[(v7 - 1)]))();
}

void sub_243BCB360(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for IterateOnceSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IterateOnceSequence);
}

uint64_t AsyncSequence.generic.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a1;
  v10 = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v3, a1);
  return sub_243BCB5BC(&v8, a3);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t WrapperIterator.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_243BCB5BC(a1, a2);
}

uint64_t sub_243BCB5BC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t WrapperIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_243BCB5EC()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_mutable_project_boxed_opaque_existential_1(*(_QWORD *)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_243BCB660;
  return sub_243BFDA30();
}

uint64_t sub_243BCB660()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_243BCB6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_243B4D7A0;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch();
}

uint64_t WrapperSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v3 = __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v4 = MEMORY[0x24BDAC7A8](v3);
  (*(void (**)(char *, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  sub_243BFDB14();
  return sub_243BCB5BC(&v9, a1);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_243BCB844()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BCB854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  WrapperSequence.makeAsyncIterator()(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_243BCB888(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *sub_243BCB8C0(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_243BCBA60(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t type metadata accessor for WrapperIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrapperIterator);
}

uint64_t sub_243BCBAAC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_243BCBAF4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for WrapperSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrapperSequence);
}

uint64_t SendableWrapper.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SendableWrapper.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_243BCBB84@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v6 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
  type metadata accessor for SendableWrapper(255, v5, a1, a2);
  v7 = sub_243BFDAC0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t sub_243BCBBD4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v3;
  v6 = (uint64_t)v3 + *(_QWORD *)(*v3 + 96);
  type metadata accessor for SendableWrapper(255, *(_QWORD *)(v5 + 80), a1, a2);
  v7 = sub_243BFDA90();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t NonSendableQueue.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  NonSendableQueue.init()(v0, v1, v2, v3);
  return v0;
}

uint64_t NonSendableQueue.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v24 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  type metadata accessor for SendableWrapper(255, v24, a3, a4);
  v23 = sub_243BFDA78();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v6 = (char *)&v20 - v5;
  v25 = sub_243BFDAC0();
  v22 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v8 = (char *)&v20 - v7;
  v9 = sub_243BFDA90();
  v10 = sub_243BFDD0C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v20 - v16;
  v18 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v18 + 56))((char *)&v20 - v16, 1, 1, v9, v15);
  v26 = v24;
  v27 = v17;
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v6, *MEMORY[0x24BEE6A10], v23);
  sub_243BFDACC();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 88), v8, v25);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v17, v10);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 96), v13, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    return v4;
  }
  return result;
}

uint64_t type metadata accessor for SendableWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SendableWrapper);
}

uint64_t sub_243BCBE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for SendableWrapper(255, a3, a3, a4);
  v6 = sub_243BFDA90();
  v7 = sub_243BFDD0C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  v8 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v6);
}

uint64_t sub_243BCBF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_243BCBE84(a1, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_243BCBF1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SendableWrapper(0, v2, v6, v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - v9;
  v11 = sub_243BFDA90();
  v21 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - v12;
  v14 = sub_243BFDA6C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - v16;
  sub_243BCBBD4(v18, v19, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v22, v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v5, v2);
  sub_243BFDA84();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_243BCC0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[2] = a1;
  v5[3] = v4;
  v5[4] = type metadata accessor for SendableWrapper(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  sub_243BFDD0C();
  v5[5] = swift_task_alloc();
  v7 = sub_243BFDAC0();
  v5[6] = v7;
  v5[7] = *(_QWORD *)(v7 - 8);
  v5[8] = swift_task_alloc();
  v8 = sub_243BFDAB4();
  v5[9] = v8;
  v5[10] = *(_QWORD *)(v8 - 8);
  v5[11] = swift_task_alloc();
  if (a2)
  {
    swift_getObjectType();
    v9 = sub_243BFD9F4();
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v5[12] = v9;
  v5[13] = v11;
  return swift_task_switch();
}

uint64_t sub_243BCC1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = v4[7];
  v5 = v4[8];
  v7 = v4[6];
  sub_243BCBB84(a3, a4, v5);
  sub_243BFDA9C();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = (_QWORD *)swift_task_alloc();
  v4[14] = v8;
  *v8 = v4;
  v8[1] = sub_243BCC250;
  return sub_243BFDAA8();
}

uint64_t sub_243BCC250()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BCC29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v1 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v2, v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t NonSendableQueue.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 88);
  type metadata accessor for SendableWrapper(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v6 = sub_243BFDAC0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
  v8 = sub_243BFDA90();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return v4;
}

uint64_t NonSendableQueue.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NonSendableQueue.deinit(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

uint64_t sub_243BCC3EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243BCC49C + 4 * byte_243C03950[(v7 - 1)]))();
}

void sub_243BCC4EC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_243BCC69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for SendableWrapper(255, *(_QWORD *)(a1 + 80), a3, a4);
  result = sub_243BFDAC0();
  if (v5 <= 0x3F)
  {
    result = sub_243BFDA90();
    if (v6 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NonSendableQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NonSendableQueue);
}

uint64_t method lookup function for NonSendableQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NonSendableQueue.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of NonSendableQueue.append(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NonSendableQueue.popFirst(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 168)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 168));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_243B4D7A0;
  return v10(a1, a2, a3);
}

uint64_t AsyncSequence<>.throwing.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t MakeThrowingIterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t MakeThrowingIterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_243B4D7A0;
  return sub_243BFDA30();
}

uint64_t sub_243BCC8E8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_243B6A428;
  return MakeThrowingIterator.next()();
}

uint64_t MakeThrowingSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v2, v4, v10);
  sub_243BFDB14();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, AssociatedTypeWitness);
}

void sub_243BCCA44()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BCCA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  MakeThrowingSequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t type metadata accessor for MakeThrowingIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeThrowingIterator);
}

uint64_t sub_243BCCAA0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243BCCB50 + 4 * byte_243C039D0[(v7 - 1)]))();
}

void sub_243BCCBA0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for MakeThrowingSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeThrowingSequence);
}

void sub_243BCCD5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MakeThrowingSequence(255, *a1, a1[1], a4);
  JUMPOUT(0x249502B6CLL);
}

uint64_t static String.read(from:key:)(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;

  v2 = (void *)sub_243BFD7F0();
  v3 = objc_msgSend(a1, sel_stringForKey_, v2);

  if (!v3)
    return 0;
  v4 = sub_243BFD7FC();

  return v4;
}

Swift::Void __swiftcall String.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  Class isa;
  void *v3;
  id v4;

  isa = to.super.isa;
  v3 = (void *)sub_243BFD7F0();
  v4 = (id)sub_243BFD7F0();
  -[objc_class setObject:forKey:](isa, sel_setObject_forKey_, v3, v4);

}

void sub_243BCCE94(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (void *)sub_243BFD7F0();
  v5 = objc_msgSend(a1, sel_stringForKey_, v4);

  if (v5)
  {
    v6 = sub_243BFD7FC();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

void sub_243BCCF18(void *a1)
{
  void *v2;
  id v3;

  v2 = (void *)sub_243BFD7F0();
  v3 = (id)sub_243BFD7F0();
  objc_msgSend(a1, sel_setObject_forKey_, v2, v3);

}

uint64_t static Int.read(from:key:)(void *a1)
{
  return sub_243BCDF90(a1);
}

Swift::Void __swiftcall Int.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  CFStringRef container;
  Class isa;
  id v4;

  container = to._container_;
  isa = to.super.isa;
  v4 = (id)sub_243BFD7F0();
  -[objc_class setInteger:forKey:](isa, sel_setInteger_forKey_, container, v4);

}

uint64_t sub_243BCCFFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_243BCDF90(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_243BCD030(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;

  v3 = *v1;
  v4 = (id)sub_243BFD7F0();
  objc_msgSend(a1, sel_setInteger_forKey_, v3, v4);

}

uint64_t static UInt64.read(from:key:)(void *a1)
{
  return sub_243BCDF90(a1);
}

Swift::Void __swiftcall UInt64.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  Class isa;
  void *v3;
  id v4;

  isa = to.super.isa;
  v3 = (void *)sub_243BFE1F8();
  v4 = (id)sub_243BFD7F0();
  -[objc_class setObject:forKey:](isa, sel_setObject_forKey_, v3, v4);

}

uint64_t sub_243BCD114@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_243BCDF90(a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_243BCD148(void *a1)
{
  void *v2;
  id v3;

  v2 = (void *)sub_243BFE1F8();
  v3 = (id)sub_243BFD7F0();
  objc_msgSend(a1, sel_setObject_forKey_, v2, v3);

}

Swift::Void __swiftcall Bool.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  char container;
  Class isa;
  id v4;

  container = (char)to._container_;
  isa = to.super.isa;
  v4 = (id)sub_243BFD7F0();
  -[objc_class setBool:forKey:](isa, sel_setBool_forKey_, container & 1, v4);

}

uint64_t sub_243BCD210@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _sSb10PhotosFaceE4read4from3keySbSgSo14NSUserDefaultsC_SStFZ_0(a1);
  *a2 = result;
  return result;
}

void sub_243BCD234(void *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  id v4;

  v3 = *v1;
  v4 = (id)sub_243BFD7F0();
  objc_msgSend(a1, sel_setBool_forKey_, v3, v4);

}

uint64_t static Double.read(from:key:)(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_243BCE074(a1, a2, a3);
}

Swift::Void __swiftcall Double.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  double v2;
  double v3;
  Class isa;
  id v5;

  v3 = v2;
  isa = to.super.isa;
  v5 = (id)sub_243BFD7F0();
  -[objc_class setDouble:forKey:](isa, sel_setDouble_forKey_, v5, v3);

}

uint64_t sub_243BCD2FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_243BCE074(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void sub_243BCD328(void *a1)
{
  double *v1;
  double v3;
  id v4;

  v3 = *v1;
  v4 = (id)sub_243BFD7F0();
  objc_msgSend(a1, sel_setDouble_forKey_, v4, v3);

}

uint64_t static Float.read(from:key:)(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = sub_243BCE570(a1, a2, a3);
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

Swift::Void __swiftcall Float.write(to:key:)(NSUserDefaults to, Swift::String key)
{
  int v2;
  int v3;
  Class isa;
  double v5;
  id v6;

  v3 = v2;
  isa = to.super.isa;
  v6 = (id)sub_243BFD7F0();
  LODWORD(v5) = v3;
  -[objc_class setFloat:forKey:](isa, sel_setFloat_forKey_, v6, v5);

}

unint64_t sub_243BCD408@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;

  result = sub_243BCE570(a1, a2, a3);
  *(_DWORD *)a4 = result;
  *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_243BCD434(void *a1)
{
  int *v1;
  int v3;
  double v4;
  id v5;

  v3 = *v1;
  v5 = (id)sub_243BFD7F0();
  LODWORD(v4) = v3;
  objc_msgSend(a1, sel_setFloat_forKey_, v5, v4);

}

uint64_t static Optional<A>.read(from:key:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v3;

  (*(void (**)(void))(a1 + 8))();
  v3 = sub_243BFDD0C();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
}

uint64_t Optional<A>.write(to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v20, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a4);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v13, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, a2, a3, v15, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_243BCD610@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return static Optional<A>.read(from:key:)(*(_QWORD *)(a1 - 8), a2);
}

uint64_t sub_243BCD61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Optional<A>.write(to:key:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8));
}

uint64_t static Array<A>.read(from:key:)(void *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD v11[4];

  v2 = (void *)sub_243BFD7F0();
  v3 = objc_msgSend(a1, sel_valueForKey_, v2);

  if (v3)
  {
    sub_243BFDD9C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_243BCEA74((uint64_t)v10, (uint64_t)v11);
  if (!v11[3])
  {
    sub_243BCEABC((uint64_t)v11);
    return 0;
  }
  swift_getAssociatedTypeWitness();
  v4 = sub_243BFD9DC();
  v5 = swift_dynamicCast();
  if ((v5 & 1) == 0)
    return 0;
  v11[0] = v9;
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v4, v6);
  v7 = sub_243BFD8C8();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_243BCD7B4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v4 + 16))((char *)&v7 - v5, a1, v3);
  return sub_243BFD934();
}

void Array<A>.write(to:key:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD v14[8];

  v14[7] = a4;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v8 = sub_243BFD9DC();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v8);
  sub_243B76E5C((void (*)(char *, char *))sub_243BCEB18, (uint64_t)v14, v8, AssociatedTypeWitness, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  v12 = (void *)sub_243BFD940();
  swift_bridgeObjectRelease();
  v13 = (void *)sub_243BFD7F0();
  objc_msgSend(a1, sel_setObject_forKey_, v12, v13);

}

uint64_t sub_243BCD980@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = static Array<A>.read(from:key:)(a1);
  *a2 = result;
  return result;
}

void sub_243BCD9B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  Array<A>.write(to:key:)(a1, a2, a3, *v5, *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 - 8), *(_QWORD *)(a5 - 16));
}

uint64_t static DefaultsStorable<>.read(from:key:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, double);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a1;
  v51 = a7;
  v12 = sub_243BFDD0C();
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v49 = (char *)&v44 - v13;
  v48 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_243BFDD0C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v44 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v44 - v24;
  v26 = *(void (**)(unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, double))(a6 + 8);
  v27 = v50;
  v45 = a2;
  v50 = a3;
  v28 = a3;
  v30 = v29;
  v26(v27, a2, v28, AssociatedTypeWitness, a6, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56);
    v32 = v51;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v25, v18, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v21, v25, AssociatedTypeWitness);
    v33 = v49;
    sub_243BFD934();
    v34 = *(_QWORD *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, a4) != 1)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, AssociatedTypeWitness);
      v42 = v51;
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v51, v33, a4);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v42, 0, 1, a4);
    }
    v48 = v30;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v47);
    if (qword_2543CD828 != -1)
      swift_once();
    v35 = sub_243BFD598();
    __swift_project_value_buffer(v35, (uint64_t)qword_2543CE350);
    v36 = v50;
    swift_bridgeObjectRetain_n();
    v37 = sub_243BFD580();
    v38 = sub_243BFDCA0();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v49 = v25;
      v41 = v40;
      *(_DWORD *)v39 = 141558274;
      v52 = 1752392040;
      v53 = v40;
      sub_243BFDD54();
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain();
      v52 = sub_243B739A8(v45, v36, &v53);
      sub_243BFDD54();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_243B4B000, v37, v38, "Couldn't parse user default %{mask.hash}s.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v41, -1, -1);
      MEMORY[0x249502C5C](v39, -1, -1);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, AssociatedTypeWitness);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v48 + 8))(v25, AssociatedTypeWitness);
    }
    v32 = v51;
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  }
  return v31(v32, 1, 1, a4);
}

uint64_t DefaultsStorable<>.write(to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v16 - v13;
  sub_243BFD928();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(a1, a2, a3, AssociatedTypeWitness, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _sSb10PhotosFaceE4read4from3keySbSgSo14NSUserDefaultsC_SStFZ_0(void *a1)
{
  void *v2;
  id v3;
  unsigned __int8 v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v2 = (void *)sub_243BFD7F0();
  v3 = objc_msgSend(a1, sel_valueForKey_, v2);

  if (v3)
  {
    sub_243BFDD9C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_243BCEA74((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
      return v5;
    else
      return 2;
  }
  else
  {
    sub_243BCEABC((uint64_t)v7);
    return 2;
  }
}

uint64_t sub_243BCDF84(void *a1)
{
  return sub_243BCDF90(a1);
}

uint64_t sub_243BCDF90(void *a1)
{
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v2 = (void *)sub_243BFD7F0();
  v3 = objc_msgSend(a1, sel_valueForKey_, v2);

  if (v3)
  {
    sub_243BFDD9C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_243BCEA74((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
      return v5;
    else
      return 0;
  }
  else
  {
    sub_243BCEABC((uint64_t)v7);
    return 0;
  }
}

uint64_t sub_243BCE074(void *a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v23[4];
  uint64_t v24;
  double v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];

  v6 = (void *)sub_243BFD7F0();
  v7 = COERCE_DOUBLE(objc_msgSend(a1, sel_valueForKey_, v6));

  if (v7 != 0.0)
  {
    sub_243BFDD9C();
    swift_unknownObjectRelease();
    sub_243BCEB58(&v27, v29);
    sub_243B747CC((uint64_t)v29, (uint64_t)&v27);
    if (swift_dynamicCast())
    {
      v7 = v25;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    }
    else
    {
      sub_243B747CC((uint64_t)v29, (uint64_t)&v27);
      v8 = swift_dynamicCast();
      if ((_DWORD)v8)
      {
        v25 = 0.0;
        MEMORY[0x24BDAC7A8](v8);
        if ((v26 & 0x1000000000000000) != 0 || !(v26 & 0x2000000000000000 | v9 & 0x1000000000000000))
        {
          sub_243BFDE38();
          swift_bridgeObjectRelease();
          v11 = v27;
        }
        else if ((v26 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v27 = v9;
          *((_QWORD *)&v27 + 1) = v26 & 0xFFFFFFFFFFFFFFLL;
          v11 = (v9 > 0x20u || ((0x100003E01uLL >> v9) & 1) == 0)
             && (v21 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
             && *v21 == 0;
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
            v10 = (_BYTE *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v10 = (_BYTE *)sub_243BFDEB0();
          sub_243BCEB84(v10, (BOOL *)&v27);
          v11 = v27;
          swift_bridgeObjectRelease();
        }
        if (v11)
          v7 = v25;
        else
          v7 = 0.0;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
      }
      else
      {
        sub_243B747CC((uint64_t)v29, (uint64_t)&v27);
        if (swift_dynamicCast())
        {
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
          v7 = *(float *)&v25;
        }
        else
        {
          if (qword_2543CD828 != -1)
            swift_once();
          v12 = sub_243BFD598();
          __swift_project_value_buffer(v12, (uint64_t)qword_2543CE350);
          sub_243B747CC((uint64_t)v29, (uint64_t)&v27);
          sub_243B747CC((uint64_t)v29, (uint64_t)&v25);
          swift_bridgeObjectRetain_n();
          v13 = sub_243BFD580();
          v14 = sub_243BFDCA0();
          if (os_log_type_enabled(v13, v14))
          {
            v15 = swift_slowAlloc();
            v16 = swift_slowAlloc();
            v24 = v16;
            *(_DWORD *)v15 = 136315650;
            swift_bridgeObjectRetain();
            sub_243B739A8(a2, a3, &v24);
            sub_243BFDD54();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v15 + 12) = 2080;
            __swift_project_boxed_opaque_existential_1(&v27, v28);
            swift_getDynamicType();
            v17 = sub_243BFE258();
            v23[0] = sub_243B739A8(v17, v18, &v24);
            sub_243BFDD54();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27);
            *(_WORD *)(v15 + 22) = 2080;
            sub_243B747CC((uint64_t)&v25, (uint64_t)v23);
            v19 = sub_243BFD838();
            v23[0] = sub_243B739A8(v19, v20, &v24);
            sub_243BFDD54();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
            _os_log_impl(&dword_243B4B000, v13, v14, "Couldn't parse Double at %s with type %s and value %s", (uint8_t *)v15, 0x20u);
            swift_arrayDestroy();
            MEMORY[0x249502C5C](v16, -1, -1);
            MEMORY[0x249502C5C](v15, -1, -1);

            __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
          }
          else
          {

            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
            __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27);
            swift_bridgeObjectRelease_n();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
          }
          v7 = 0.0;
        }
      }
    }
  }
  return *(_QWORD *)&v7;
}

unint64_t sub_243BCE570(void *a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  id v7;
  float v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  float v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v26[4];
  uint64_t v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];

  v6 = (void *)sub_243BFD7F0();
  v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (!v7)
    goto LABEL_28;
  sub_243BFDD9C();
  swift_unknownObjectRelease();
  sub_243BCEB58(&v30, v32);
  sub_243B747CC((uint64_t)v32, (uint64_t)&v30);
  if (swift_dynamicCast())
  {
    v8 = *(float *)&v28;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
    v9 = 0;
    goto LABEL_29;
  }
  sub_243B747CC((uint64_t)v32, (uint64_t)&v30);
  v10 = swift_dynamicCast();
  if (!(_DWORD)v10)
  {
    sub_243B747CC((uint64_t)v32, (uint64_t)&v30);
    if (swift_dynamicCast())
    {
      v14 = v28;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      v9 = 0;
      v8 = v14;
      goto LABEL_29;
    }
    if (qword_2543CD828 != -1)
      swift_once();
    v15 = sub_243BFD598();
    __swift_project_value_buffer(v15, (uint64_t)qword_2543CE350);
    sub_243B747CC((uint64_t)v32, (uint64_t)&v30);
    sub_243B747CC((uint64_t)v32, (uint64_t)&v28);
    swift_bridgeObjectRetain_n();
    v16 = sub_243BFD580();
    v17 = sub_243BFDCA0();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v27 = v19;
      *(_DWORD *)v18 = 136315650;
      swift_bridgeObjectRetain();
      sub_243B739A8(a2, a3, &v27);
      sub_243BFDD54();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      __swift_project_boxed_opaque_existential_1(&v30, v31);
      v9 = 1;
      swift_getDynamicType();
      v20 = sub_243BFE258();
      v26[0] = sub_243B739A8(v20, v21, &v27);
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
      *(_WORD *)(v18 + 22) = 2080;
      sub_243B747CC((uint64_t)&v28, (uint64_t)v26);
      v22 = sub_243BFD838();
      v26[0] = sub_243B739A8(v22, v23, &v27);
      sub_243BFDD54();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
      _os_log_impl(&dword_243B4B000, v16, v17, "Couldn't parse Float at %s with type %s and value %s", (uint8_t *)v18, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x249502C5C](v19, -1, -1);
      MEMORY[0x249502C5C](v18, -1, -1);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
      v8 = 0.0;
      goto LABEL_29;
    }

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v30);
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
LABEL_28:
    v8 = 0.0;
    v9 = 1;
    goto LABEL_29;
  }
  LODWORD(v28) = 0;
  MEMORY[0x24BDAC7A8](v10);
  if ((v29 & 0x1000000000000000) != 0 || !(v29 & 0x2000000000000000 | v11 & 0x1000000000000000))
  {
    sub_243BFDE38();
    swift_bridgeObjectRelease();
    v13 = v30;
  }
  else if ((v29 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)&v30 = v11;
    *((_QWORD *)&v30 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
    v13 = (v11 > 0x20u || ((0x100003E01uLL >> v11) & 1) == 0)
       && (v24 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
       && *v24 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((v11 & 0x1000000000000000) != 0)
      v12 = (_BYTE *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (_BYTE *)sub_243BFDEB0();
    sub_243BCEB68(v12, (BOOL *)&v30);
    v13 = v30;
    swift_bridgeObjectRelease();
  }
  if (v13)
    v8 = *(float *)&v28;
  else
    v8 = 0.0;
  v9 = v13 ^ 1;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
LABEL_29:
  LOBYTE(v32[0]) = v9;
  return LODWORD(v8) | ((unint64_t)v9 << 32);
}

uint64_t sub_243BCEA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE4A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_243BCEABC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CE4A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243BCEAFC(uint64_t a1)
{
  return sub_243BCD7B4(a1);
}

uint64_t sub_243BCEB18()
{
  return sub_243BFD928();
}

uint64_t dispatch thunk of static DefaultsStorable.read(from:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of DefaultsStorable.write(to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

_OWORD *sub_243BCEB58(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_BYTE *sub_243BCEB68@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_243BCEBA0(a1, MEMORY[0x24BEE4B50], a2);
}

_BYTE *sub_243BCEB84@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_243BCEBA0(a1, MEMORY[0x24BEE4B48], a2);
}

_BYTE *sub_243BCEBA0@<X0>(_BYTE *result@<X0>, uint64_t (*a2)(void)@<X1>, BOOL *a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v4 = *result;
  v5 = v4 > 0x20;
  v6 = (1 << v4) & 0x100003E01;
  v7 = v5 || v6 == 0;
  v8 = v7 && (result = (_BYTE *)a2()) != 0 && *result == 0;
  *a3 = v8;
  return result;
}

void sub_243BCEC10()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_243BFD7F0();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
    qword_2543CE3F8 = (uint64_t)v2;
  else
    __break(1u);
}

uint64_t TestProperty.init(_:fallback:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  _BYTE *v8;

  *a6 = *a1;
  v8 = &a6[*(int *)(type metadata accessor for TestProperty(0, a3, a4, a5) + 44)];
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v8, a2, a3);
}

uint64_t type metadata accessor for TestProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TestProperty);
}

uint64_t TestProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[12];

  v3 = v2;
  v19[10] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v19[9] = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = sub_243BFDD0C();
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v19[11] = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v19 - v15;
  if (os_variant_has_internal_diagnostics())
  {
    v19[7] = v16;
    if (qword_2543CE400 != -1)
      swift_once();
    v17 = *v3;
    v19[6] = "";
    v19[8] = a2;
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(v10 + 16))(a2, &v3[*(int *)(a1 + 44)], v8);
}

uint64_t TestProperty.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_243BCF538();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*TestProperty.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  TestProperty.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_243BCF490;
}

void sub_243BCF490(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 32), v4, v5);
    sub_243BCF538();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_243BCF538();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_243BCF538()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_243BCF6DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for TestProperty(0, *(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  return TestProperty.wrappedValue.getter(v4, a3);
}

uint64_t sub_243BCF718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TestProperty(0, *(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return sub_243BCF538();
}

uint64_t sub_243BCF758()
{
  return 24;
}

__n128 sub_243BCF764(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_243BCF778()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_243BCF7F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

uint64_t sub_243BCF88C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_243BCF8AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_243BCF8FC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_243BCF94C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_243BCF99C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_243BCF9EC(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xF6)
    v6 = 246;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xF6)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      if (v15 >= 0xA)
        return v15 - 9;
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_243BCFAC0 + 4 * byte_243C03BD6[(v9 - 1)]))();
}

void sub_243BCFB30(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xF6u)
    v6 = 246;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t static TestProperties.debugSQL.getter()
{
  return sub_243BD1670(&qword_2543CDEE0, (unsigned __int8 *)&word_2543CD810, (_BYTE *)&word_2543CD810 + 1);
}

void sub_243BCFD3C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_243BCFD88(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_243BCFE8C + 4 * byte_243C03C2A[a2]))(v2 + 3);
}

uint64_t sub_243BCFE8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == v1 + 3 && v2 == 0x8000000243C05400)
    v3 = 1;
  else
    v3 = sub_243BFE0F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_243BCFFC0(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_243BD0008()
{
  sub_243BFD850();
  return swift_bridgeObjectRelease();
}

uint64_t sub_243BD0100(uint64_t a1, char a2)
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_243BD02C8(uint64_t a1, char a2)
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_243BD0490(int a1, int a2, char a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_243BD06B0(int a1, int a2, char a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X11 }
  }
  return result;
}

uint64_t UserDefaultsKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_243BD08F4 + 4 * byte_243C03C66[*v0]))(0xD000000000000012, 0x8000000243C053E0);
}

uint64_t sub_243BD08F4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

PhotosFace::UserDefaultsKeys_optional __swiftcall UserDefaultsKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  PhotosFace::UserDefaultsKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_243BFDFF4();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_243BD0A30(char *a1)
{
  sub_243BCFD3C(*a1);
}

uint64_t sub_243BD0A3C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_243BFE1A4();
  sub_243BCFFC0((uint64_t)v3, v1);
  return sub_243BFE1E0();
}

void sub_243BD0A80(uint64_t a1)
{
  char *v1;

  sub_243BCFFC0(a1, *v1);
}

uint64_t sub_243BD0A88()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_243BFE1A4();
  sub_243BCFFC0((uint64_t)v3, v1);
  return sub_243BFE1E0();
}

PhotosFace::UserDefaultsKeys_optional sub_243BD0AC8(Swift::String *a1)
{
  return UserDefaultsKeys.init(rawValue:)(*a1);
}

uint64_t sub_243BD0AD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = UserDefaultsKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static TestProperties.albumRotationEpoch.getter()
{
  return sub_243BD1998(&qword_2572EB7E8, &byte_2572EF758, &qword_2572EF760);
}

uint64_t static TestProperties.albumRotationEpoch.setter(uint64_t a1)
{
  return sub_243BD19F4(a1, &qword_2572EB7E8, (unsigned __int8 *)&byte_2572EF758);
}

uint64_t (*static TestProperties.albumRotationEpoch.modify(uint64_t a1))()
{
  char v2;
  uint64_t v3;

  if (qword_2572EB7E8 != -1)
    swift_once();
  v2 = byte_2572EF758;
  *(_BYTE *)(a1 + 16) = byte_2572EF758;
  v3 = qword_2572EF760;
  *(_QWORD *)(a1 + 8) = qword_2572EF760;
  *(_QWORD *)a1 = sub_243B826D4(v2, v3);
  return sub_243BD1E18;
}

void sub_243BD0BA4()
{
  qword_2572EF760 = 86400;
  byte_2572EF758 = 0;
}

uint64_t static TestProperties.watchFacePerDaySize.getter()
{
  return sub_243BD1998(&qword_2543CDEB0, &byte_2543CDEA0, &qword_2543CDEA8);
}

uint64_t static TestProperties.watchFacePerDaySize.setter(uint64_t a1)
{
  return sub_243BD19F4(a1, &qword_2543CDEB0, (unsigned __int8 *)&byte_2543CDEA0);
}

uint64_t (*static TestProperties.watchFacePerDaySize.modify(uint64_t a1))(uint64_t a1)
{
  char v2;
  uint64_t v3;

  if (qword_2543CDEB0 != -1)
    swift_once();
  v2 = byte_2543CDEA0;
  *(_BYTE *)(a1 + 16) = byte_2543CDEA0;
  v3 = qword_2543CDEA8;
  *(_QWORD *)(a1 + 8) = qword_2543CDEA8;
  *(_QWORD *)a1 = sub_243B826D4(v2, v3);
  return sub_243BD0C6C;
}

uint64_t sub_243BD0C6C(uint64_t a1)
{
  return sub_243BD0100(*(_QWORD *)a1, *(_BYTE *)(a1 + 16));
}

void sub_243BD0C7C()
{
  qword_2543CDEA8 = 16;
  byte_2543CDEA0 = 1;
}

uint64_t static TestProperties.gallerySize.getter()
{
  return sub_243BD1998(&qword_2543CDEC8, &byte_2543CDEB8, &qword_2543CDEC0);
}

uint64_t static TestProperties.gallerySize.setter(uint64_t a1)
{
  return sub_243BD19F4(a1, &qword_2543CDEC8, (unsigned __int8 *)&byte_2543CDEB8);
}

uint64_t (*static TestProperties.gallerySize.modify(uint64_t a1))()
{
  char v2;
  uint64_t v3;

  if (qword_2543CDEC8 != -1)
    swift_once();
  v2 = byte_2543CDEB8;
  *(_BYTE *)(a1 + 16) = byte_2543CDEB8;
  v3 = qword_2543CDEC0;
  *(_QWORD *)(a1 + 8) = qword_2543CDEC0;
  *(_QWORD *)a1 = sub_243B826D4(v2, v3);
  return sub_243BD1E18;
}

void sub_243BD0D44()
{
  qword_2543CDEC0 = 1;
  byte_2543CDEB8 = 2;
}

uint64_t static TestProperties.debugSQL.setter(uint64_t a1)
{
  return sub_243BD16DC(a1, &qword_2543CDEE0, (unsigned __int8 *)&word_2543CD810);
}

uint64_t (*static TestProperties.debugSQL.modify(_BYTE *a1))()
{
  unsigned int v2;
  int v3;
  int v4;

  if (qword_2543CDEE0 != -1)
    swift_once();
  v2 = word_2543CD810;
  a1[1] = word_2543CD810;
  v3 = HIBYTE(word_2543CD810);
  a1[2] = HIBYTE(word_2543CD810);
  if (v3)
    v4 = 256;
  else
    v4 = 0;
  *a1 = sub_243B82288(v4 | v2) & 1;
  return sub_243BD0E00;
}

void sub_243BD0E04()
{
  word_2543CD810 = 3;
}

uint64_t static TestProperties.quicTimeout.getter()
{
  if (qword_2543CDED8 != -1)
    swift_once();
  return sub_243B82B0C(byte_2543CD7F8, qword_2543CD800);
}

uint64_t static TestProperties.quicTimeout.setter()
{
  uint64_t v0;
  uint64_t result;

  if (qword_2543CDED8 != -1)
    swift_once();
  v0 = byte_2543CD7F8;
  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10; loc_243BD0FF8 }
  }
  return result;
}

uint64_t (*static TestProperties.quicTimeout.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  if (qword_2543CDED8 != -1)
    swift_once();
  v2 = byte_2543CD7F8;
  *(_BYTE *)(a1 + 9) = byte_2543CD7F8;
  v3 = qword_2543CD800;
  *(_QWORD *)(a1 + 16) = qword_2543CD800;
  *(_BYTE *)(a1 + 10) = byte_2543CD808;
  *(_QWORD *)a1 = sub_243B82B0C(v2, v3);
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return sub_243BD1134;
}

uint64_t sub_243BD1134(uint64_t a1, uint64_t a2)
{
  return sub_243BD1474(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_243BD0490);
}

void sub_243BD1140()
{
  qword_2543CD800 = 0;
  byte_2543CD808 = 1;
  byte_2543CD7F8 = 4;
}

uint64_t static TestProperties.fixedDay.getter()
{
  if (qword_2572EB7F0 != -1)
    swift_once();
  return sub_243B82F94(byte_2572EF768, qword_2572EF770);
}

uint64_t static TestProperties.fixedDay.setter()
{
  uint64_t v0;
  uint64_t result;

  if (qword_2572EB7F0 != -1)
    swift_once();
  v0 = byte_2572EF768;
  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10; loc_243BD1338 }
  }
  return result;
}

uint64_t (*static TestProperties.fixedDay.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  if (qword_2572EB7F0 != -1)
    swift_once();
  v2 = byte_2572EF768;
  *(_BYTE *)(a1 + 9) = byte_2572EF768;
  v3 = qword_2572EF770;
  *(_QWORD *)(a1 + 16) = qword_2572EF770;
  *(_BYTE *)(a1 + 10) = byte_2572EF778;
  *(_QWORD *)a1 = sub_243B82F94(v2, v3);
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return sub_243BD1468;
}

uint64_t sub_243BD1468(uint64_t a1, uint64_t a2)
{
  return sub_243BD1474(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_243BD06B0);
}

uint64_t sub_243BD1474(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 10));
}

void sub_243BD1494()
{
  qword_2572EF770 = 0;
  byte_2572EF778 = 1;
  byte_2572EF768 = 5;
}

uint64_t static TestProperties.bufferSize.getter()
{
  return sub_243BD1998(&qword_2572EB7F8, &byte_2572EF780, &qword_2572EF788);
}

uint64_t static TestProperties.bufferSize.setter(uint64_t a1)
{
  return sub_243BD19F4(a1, &qword_2572EB7F8, (unsigned __int8 *)&byte_2572EF780);
}

uint64_t (*static TestProperties.bufferSize.modify(uint64_t a1))()
{
  char v2;
  uint64_t v3;

  if (qword_2572EB7F8 != -1)
    swift_once();
  v2 = byte_2572EF780;
  *(_BYTE *)(a1 + 16) = byte_2572EF780;
  v3 = qword_2572EF788;
  *(_QWORD *)(a1 + 8) = qword_2572EF788;
  *(_QWORD *)a1 = sub_243B826D4(v2, v3);
  return sub_243BD1E18;
}

void sub_243BD1560()
{
  qword_2572EF788 = 4;
  byte_2572EF780 = 6;
}

uint64_t static TestProperties.ignoreDuetCancellations.getter()
{
  return sub_243BD1670(&qword_2572EB800, (unsigned __int8 *)&word_2572EF790, (_BYTE *)&word_2572EF790 + 1);
}

uint64_t static TestProperties.ignoreDuetCancellations.setter(uint64_t a1)
{
  return sub_243BD16DC(a1, &qword_2572EB800, (unsigned __int8 *)&word_2572EF790);
}

uint64_t (*static TestProperties.ignoreDuetCancellations.modify(_BYTE *a1))()
{
  unsigned int v2;
  int v3;
  int v4;

  if (qword_2572EB800 != -1)
    swift_once();
  v2 = word_2572EF790;
  a1[1] = word_2572EF790;
  v3 = HIBYTE(word_2572EF790);
  a1[2] = HIBYTE(word_2572EF790);
  if (v3)
    v4 = 256;
  else
    v4 = 0;
  *a1 = sub_243B82288(v4 | v2) & 1;
  return sub_243BD0E00;
}

void sub_243BD163C()
{
  word_2572EF790 = 7;
}

uint64_t static TestProperties.ignoreSyncCache.getter()
{
  return sub_243BD1670(&qword_2572EB808, (unsigned __int8 *)&word_2572EF792, (_BYTE *)&word_2572EF792 + 1);
}

uint64_t sub_243BD1670(_QWORD *a1, unsigned __int8 *a2, _BYTE *a3)
{
  int v5;

  if (*a1 != -1)
    swift_once();
  if (*a3)
    v5 = 256;
  else
    v5 = 0;
  return sub_243B82288(v5 | *a2);
}

uint64_t static TestProperties.ignoreSyncCache.setter(uint64_t a1)
{
  return sub_243BD16DC(a1, &qword_2572EB808, (unsigned __int8 *)&word_2572EF792);
}

uint64_t sub_243BD16DC(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t result;

  if (*a2 != -1)
    swift_once();
  v4 = *a3;
  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t (*static TestProperties.ignoreSyncCache.modify(_BYTE *a1))()
{
  unsigned int v2;
  int v3;
  int v4;

  if (qword_2572EB808 != -1)
    swift_once();
  v2 = word_2572EF792;
  a1[1] = word_2572EF792;
  v3 = HIBYTE(word_2572EF792);
  a1[2] = HIBYTE(word_2572EF792);
  if (v3)
    v4 = 256;
  else
    v4 = 0;
  *a1 = sub_243B82288(v4 | v2) & 1;
  return sub_243BD0E00;
}

uint64_t sub_243BD1944(unsigned __int8 *a1)
{
  return sub_243BD02C8(*a1, a1[1]);
}

void sub_243BD1964()
{
  word_2572EF792 = 8;
}

uint64_t static TestProperties.targetGalleryShuffleSize.getter()
{
  return sub_243BD1998(&qword_2572EB810, &byte_2572EF798, &qword_2572EF7A0);
}

uint64_t sub_243BD1998(_QWORD *a1, char *a2, uint64_t *a3)
{
  if (*a1 != -1)
    swift_once();
  return sub_243B826D4(*a2, *a3);
}

uint64_t static TestProperties.targetGalleryShuffleSize.setter(uint64_t a1)
{
  return sub_243BD19F4(a1, &qword_2572EB810, (unsigned __int8 *)&byte_2572EF798);
}

uint64_t sub_243BD19F4(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t result;

  if (*a2 != -1)
    swift_once();
  v4 = *a3;
  result = os_variant_has_internal_diagnostics();
  if ((_DWORD)result)
  {
    if (qword_2543CE400 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t (*static TestProperties.targetGalleryShuffleSize.modify(uint64_t a1))()
{
  char v2;
  uint64_t v3;

  if (qword_2572EB810 != -1)
    swift_once();
  v2 = byte_2572EF798;
  *(_BYTE *)(a1 + 16) = byte_2572EF798;
  v3 = qword_2572EF7A0;
  *(_QWORD *)(a1 + 8) = qword_2572EF7A0;
  *(_QWORD *)a1 = sub_243B826D4(v2, v3);
  return sub_243BD1E18;
}

void sub_243BD1C48()
{
  qword_2572EF7A0 = 64;
  byte_2572EF798 = 9;
}

unint64_t sub_243BD1C68()
{
  unint64_t result;

  result = qword_2572EF7A8;
  if (!qword_2572EF7A8)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for UserDefaultsKeys, &type metadata for UserDefaultsKeys);
    atomic_store(result, (unint64_t *)&qword_2572EF7A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UserDefaultsKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDefaultsKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_243BD1D88 + 4 * byte_243C03C9D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_243BD1DBC + 4 * byte_243C03C98[v4]))();
}

uint64_t sub_243BD1DBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BD1DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BD1DCCLL);
  return result;
}

uint64_t sub_243BD1DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BD1DE0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_243BD1DE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BD1DEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserDefaultsKeys()
{
  return &type metadata for UserDefaultsKeys;
}

ValueMetadata *type metadata accessor for TestProperties()
{
  return &type metadata for TestProperties;
}

uint64_t Collection<>.parallelForEach(parallelism:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243BD1E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = swift_allocObject();
  *(_QWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  swift_retain();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_243BD1F04;
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v0 + 48);
  v7 = MEMORY[0x24BEE4AE0] + 8;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 56) = v7;
  *(_QWORD *)(v4 + 32) = &unk_2572EF7C0;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 24) = v6;
  return swift_task_switch();
}

uint64_t sub_243BD1F04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243BD1F98()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD1FCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_243B4D7A0;
  return v7(a2);
}

uint64_t sub_243BD202C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_243BD2050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v5 = *(int **)(v2 + 32);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_243B6A428;
  v9 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v7 = (_QWORD *)swift_task_alloc();
  v6[2] = v7;
  *v7 = v6;
  v7[1] = sub_243B4D7A0;
  return v9(a2);
}

uint64_t Collection<>.parallelMap<A>(parallelism:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t sub_243BD20FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  sub_243BFDC28();
  v1 = sub_243BFDD30();
  v3 = v2;
  *(_QWORD *)(v0 + 80) = v1;
  *(_QWORD *)(v0 + 88) = v2;
  v4 = sub_243BFDD24();
  if (!v4)
    return sub_243BFDF70();
  v5 = v4;
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 24);
  v14 = *(_OWORD *)(v0 + 32);
  v13 = sub_243BFDC28();
  swift_getTupleTypeMetadata2();
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  *(_QWORD *)(v10 + 32) = v7;
  *(_QWORD *)(v10 + 40) = v6;
  *(_OWORD *)(v10 + 48) = v14;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = v5;
  *(_QWORD *)(v10 + 80) = v13;
  *(_QWORD *)(v10 + 88) = v1;
  *(_QWORD *)(v10 + 96) = v3;
  sub_243BFD9DC();
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v11;
  *v11 = v0;
  v11[1] = sub_243BD22BC;
  return sub_243BFE000();
}

uint64_t sub_243BD22BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BD2328()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_243BFDD18();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_243BD2368()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_243BFDD18();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD23BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8[15] = v14;
  v8[16] = v15;
  v8[13] = v12;
  v8[14] = v13;
  v8[11] = a8;
  v8[12] = v11;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  v8[5] = a2;
  v8[6] = a3;
  v8[4] = a1;
  v8[17] = swift_getTupleTypeMetadata2();
  v9 = sub_243BFDD0C();
  v8[18] = v9;
  v8[19] = *(_QWORD *)(v9 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = *(_QWORD *)(v14 - 8);
  v8[22] = swift_task_alloc();
  v8[23] = swift_task_alloc();
  v8[24] = *(_QWORD *)(v15 + 8);
  v8[25] = sub_243BFDFAC();
  v8[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BD24C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[9];
  sub_243BFDFA0();
  v2 = swift_allocBox();
  v0[27] = v2;
  sub_243BFD8D4();
  result = sub_243BFDF88();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v0[9])
    {
      v4 = 0;
      do
      {
        v5 = v0[9];
        ++v4;
        sub_243BD2A54(v2, v0[5], v0[7], v0[8], v0[14], v0[15], v0[16]);
      }
      while (v4 != v5);
    }
    v0[28] = 0;
    v6 = (_QWORD *)swift_task_alloc();
    v0[29] = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
    sub_243BFDB08();
    *v6 = v0;
    v6[1] = sub_243BD25FC;
    return sub_243BFDAFC();
  }
  return result;
}

uint64_t sub_243BD25FC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BD2660()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (uint64_t *)v0[20];
  v2 = v0[17];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t *, _QWORD))(v0[19] + 8))(v1, v0[18]);
    result = sub_243BFDAE4();
    if ((result & 1) != 0)
    {
      sub_243BFDD00();
      sub_243BFDA24();
      sub_243BD3F5C();
      swift_allocError();
      sub_243BFD724();
      swift_willThrow();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v4 = (uint64_t (*)(void))v0[1];
      return v4();
    }
    v16 = v0[13];
    if (v0[11] == v16)
    {
      v17 = (uint64_t *)v0[4];
      v0[2] = v0[12];
      v0[3] = v16;
      v18 = sub_243BFDD3C();
      MEMORY[0x249502B6C](MEMORY[0x24BEE1D30], v18);
      v19 = sub_243BFD9E8();
      swift_release();
      *v17 = v19;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v4 = (uint64_t (*)(void))v0[1];
      return v4();
    }
    goto LABEL_12;
  }
  v5 = v0[28];
  v7 = v0[22];
  v6 = v0[23];
  v8 = v0[21];
  v9 = v0[15];
  v10 = v0[10];
  v11 = *v1;
  v12 = (char *)v1 + *(int *)(v2 + 48);
  v13 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v13(v6, v12, v9);
  v14 = v10 + *(_QWORD *)(v8 + 72) * v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v14, v7, v9);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((sub_243BFDAE4() & 1) == 0)
    sub_243BD2A54(v0[27], v0[5], v0[7], v0[8], v0[14], v0[15], v0[16]);
  (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[23], v0[15]);
  v0[28] = v5 + 1;
  v15 = (_QWORD *)swift_task_alloc();
  v0[29] = v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDB08();
  *v15 = v0;
  v15[1] = sub_243BD25FC;
  return sub_243BFDAFC();
}

uint64_t sub_243BD2930()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD2994(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[7];
  v8 = v2[8];
  v9 = v2[9];
  v10 = v2[10];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_243B6A428;
  return sub_243BD23BC(a1, a2, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_243BD2A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a4;
  v45 = a6;
  v42 = a3;
  v47 = a2;
  v48 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v9);
  v46 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_243BFDD0C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v38 - v15);
  v17 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v38 - v18);
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(_QWORD *)(v40 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v38 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v39 = (char *)&v38 - v23;
  v41 = a5;
  sub_243BFDFA0();
  swift_projectBox();
  swift_beginAccess();
  sub_243BFDF94();
  swift_endAccess();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v16, 1, TupleTypeMetadata2) == 1)return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
  v25 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
  v26 = (char *)v19 + *(int *)(v17 + 48);
  *v19 = *v16;
  v27 = v40;
  v28 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v28(v26, v25, AssociatedTypeWitness);
  v48 = *v19;
  v29 = v39;
  v28(v39, (char *)v19 + *(int *)(v17 + 48), AssociatedTypeWitness);
  v30 = sub_243BFDA60();
  v31 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v46, 1, 1, v30);
  v32 = v38;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v38, v29, AssociatedTypeWitness);
  v33 = (*(unsigned __int8 *)(v27 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v34 = (v20 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  v36 = v45;
  *((_QWORD *)v35 + 4) = v41;
  *((_QWORD *)v35 + 5) = v36;
  v37 = v42;
  *((_QWORD *)v35 + 6) = v43;
  *((_QWORD *)v35 + 7) = v37;
  *((_QWORD *)v35 + 8) = v44;
  v28(&v35[v33], v32, AssociatedTypeWitness);
  *(_QWORD *)&v35[v34] = v48;
  swift_retain();
  swift_getTupleTypeMetadata2();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543CE498);
  sub_243BFDB08();
  sub_243BD2FB8(v31, (uint64_t)&unk_2572EF830, (uint64_t)v35);
  sub_243BD5128(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, AssociatedTypeWitness);
}

uint64_t sub_243BD2DF4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v7[3] = a7;
  v7[4] = v14;
  v7[2] = a1;
  v7[5] = *(_QWORD *)(v14 - 8);
  v10 = swift_task_alloc();
  v7[6] = v10;
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc();
  v7[7] = v11;
  *v11 = v7;
  v11[1] = sub_243BD2E98;
  return v13(v10, a6);
}

uint64_t sub_243BD2E98()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_243BD2EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD **)(v0 + 16);
  v6 = (char *)v5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *v5 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(v6, v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD2F84()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD2FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BD5168(a1, (uint64_t)v9);
  v10 = sub_243BFDA60();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_243BD5128((uint64_t)v9);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_243BFD9F4();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_243BFDA54();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t Collection<>.parallelCompactMap<A>(parallelism:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v13;
  uint64_t v14;

  v7[4] = a5;
  v7[5] = a6;
  v7[3] = a4;
  v13 = (_QWORD *)swift_task_alloc();
  v7[6] = v13;
  v14 = sub_243BFDD0C();
  v7[7] = v14;
  *v13 = v7;
  v13[1] = sub_243BD31EC;
  v13[8] = a6;
  v13[9] = v6;
  v13[6] = a4;
  v13[7] = v14;
  v13[4] = a2;
  v13[5] = a3;
  v13[3] = a1;
  return swift_task_switch();
}

uint64_t sub_243BD31EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  *(_QWORD *)(v4 + 72) = a1;
  return swift_task_switch();
}

uint64_t sub_243BD326C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = sub_243BFD9DC();
  MEMORY[0x249502B6C](MEMORY[0x24BEE12C8], v4);
  v5 = sub_243BFD8C8();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_243BD3330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_243BFDD0C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t Collection<>.parallelFilter(parallelism:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_243BD33A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;

  v1 = v0[5];
  v2 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)swift_allocObject();
  v0[8] = (uint64_t)v5;
  v5[2] = v1;
  v5[3] = v2;
  v5[4] = v4;
  v5[5] = v3;
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *v6 = v0;
  v6[1] = sub_243BD3470;
  return Collection<>.parallelCompactMap<A>(parallelism:transform:)(v0[2], (uint64_t)&unk_2572EF7F8, (uint64_t)v5, v0[5], AssociatedTypeWitness, v0[6]);
}

uint64_t sub_243BD3470(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_243BD34F8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a2;
  v10 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v8 = (_QWORD *)swift_task_alloc();
  v6[6] = v8;
  *v8 = v6;
  v8[1] = sub_243BD3560;
  return v10(a2);
}

uint64_t sub_243BD3560(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_BYTE *)(v4 + 56) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_243BD35E0()
{
  uint64_t v0;
  int v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(v0 + 56);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (v1 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 16))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), AssociatedTypeWitness);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v3 + 56))(*(_QWORD *)(v0 + 16), v4, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_243BD3678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v6 = *(int **)(v2 + 32);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_243B6A428;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v11 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 48) = v9;
  *v9 = v7;
  v9[1] = sub_243BD3560;
  return v11(a2);
}

uint64_t Sequence.asyncCompactMap<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v9 = sub_243BFDD0C();
  v6[9] = v9;
  v6[10] = *(_QWORD *)(v9 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = *(_QWORD *)(a4 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[15] = AssociatedTypeWitness;
  v6[16] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[17] = swift_task_alloc();
  sub_243BFDD0C();
  v6[18] = swift_task_alloc();
  v6[19] = *(_QWORD *)(a3 - 8);
  v6[20] = swift_task_alloc();
  v11 = swift_getAssociatedTypeWitness();
  v6[21] = v11;
  v6[22] = *(_QWORD *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BD388C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD, _QWORD);

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_243BFD718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_243BFD8BC();
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  swift_getAssociatedConformanceWitness();
  sub_243BFDD48();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    if ((sub_243BFDAE4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_243BFDA24();
      sub_243BD3F5C();
      swift_allocError();
      sub_243BFD724();
      swift_willThrow();
      v11 = *(_QWORD *)(v0 + 176);
      v10 = *(_QWORD *)(v0 + 184);
      v12 = *(_QWORD *)(v0 + 168);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v14 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v13;
      *v13 = v0;
      v13[1] = sub_243BD3B24;
      return v14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 136));
    }
  }
}

uint64_t sub_243BD3B24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_243BD3B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 120);
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v9);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v11, v10, v3);
    sub_243BFD9DC();
    sub_243BFD9B8();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  swift_getAssociatedConformanceWitness();
  sub_243BFDD48();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    v15 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    if ((sub_243BFDAE4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_243BFDA24();
      sub_243BD3F5C();
      swift_allocError();
      sub_243BFD724();
      swift_willThrow();
      v18 = *(_QWORD *)(v0 + 176);
      v17 = *(_QWORD *)(v0 + 184);
      v19 = *(_QWORD *)(v0 + 168);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v21 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v20;
      *v20 = v0;
      v20[1] = sub_243BD3B24;
      return v21(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 136));
    }
  }
}

uint64_t sub_243BD3E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_243BD3F5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EF808;
  if (!qword_2572EF808)
  {
    v1 = sub_243BFDA24();
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE6848], v1);
    atomic_store(result, (unint64_t *)&qword_2572EF808);
  }
  return result;
}

uint64_t Sequence.asyncMap<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  sub_243BFDD0C();
  v6[13] = swift_task_alloc();
  v6[14] = *(_QWORD *)(a3 - 8);
  v6[15] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BD40D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD, _QWORD);

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_243BFD718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_243BFD8BC();
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_243BFDD48();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    if ((sub_243BFDAE4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_243BFDA24();
      sub_243BD3F5C();
      swift_allocError();
      sub_243BFD724();
      swift_willThrow();
      v11 = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 128);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v14 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v13;
      *v13 = v0;
      v13[1] = sub_243BD433C;
      return v14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
    }
  }
}

uint64_t sub_243BD433C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_243BD43A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD, _QWORD);

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  sub_243BFD9DC();
  sub_243BFD9B8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_243BFDD48();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v7 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    if ((sub_243BFDAE4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_243BFDA24();
      sub_243BD3F5C();
      swift_allocError();
      sub_243BFD724();
      swift_willThrow();
      v10 = *(_QWORD *)(v0 + 136);
      v9 = *(_QWORD *)(v0 + 144);
      v11 = *(_QWORD *)(v0 + 128);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v13 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v12;
      *v12 = v0;
      v12[1] = sub_243BD433C;
      return v13(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
    }
  }
}

uint64_t sub_243BD4604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Set.asyncFilter(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  v5[13] = *(_QWORD *)(a4 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  sub_243BFDD0C();
  v5[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BD4740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);

  v1 = v0[10];
  v0[7] = sub_243BFD730();
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_243BFDDE4();
    result = sub_243BFDBBC();
    v1 = v0[2];
    v3 = v0[3];
    v5 = v0[4];
    v4 = v0[5];
    v6 = v0[6];
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v0[10] + 32);
    v8 = v0[10];
    v10 = *(_QWORD *)(v8 + 56);
    v3 = v8 + 56;
    v9 = v10;
    v5 = ~v7;
    v11 = -v7;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v6 = v12 & v9;
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v0[18] = v1;
  v0[19] = v3;
  v13 = v0[13];
  v0[21] = v4;
  v0[22] = v6;
  v0[20] = v5;
  if (v1 < 0)
  {
    if (sub_243BFDDF0())
    {
      sub_243BFE0E4();
      swift_unknownObjectRelease();
      goto LABEL_13;
    }
    v13 = v0[13];
    goto LABEL_27;
  }
  if (v6)
  {
    v14 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v15 = v14 | (v4 << 6);
LABEL_10:
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v13 + 16))(v0[17], *(_QWORD *)(v1 + 48) + *(_QWORD *)(v13 + 72) * v15, v0[11]);
LABEL_13:
    v0[23] = v4;
    v0[24] = v6;
    v16 = v0[16];
    v17 = v0[17];
    v18 = v0[13];
    v19 = v0[11];
    v20 = (int *)v0[8];
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v16, v17, v19);
    v30 = (uint64_t (*)(uint64_t))((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc();
    v0[25] = v21;
    *v21 = v0;
    v21[1] = sub_243BD4A14;
    v22 = v0[16];
    v23 = v30;
    return v23(v22);
  }
  v24 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v25 = (unint64_t)(v5 + 64) >> 6;
    if (v24 < v25)
    {
      v26 = *(_QWORD *)(v3 + 8 * v24);
      v27 = v4 + 1;
      if (v26)
      {
LABEL_17:
        v6 = (v26 - 1) & v26;
        v15 = __clz(__rbit64(v26)) + (v27 << 6);
        v4 = v27;
        goto LABEL_10;
      }
      v27 = v4 + 2;
      if (v4 + 2 < v25)
      {
        v26 = *(_QWORD *)(v3 + 8 * v27);
        if (v26)
          goto LABEL_17;
        v27 = v4 + 3;
        if (v4 + 3 < v25)
        {
          v26 = *(_QWORD *)(v3 + 8 * v27);
          if (v26)
            goto LABEL_17;
          v28 = v4 + 4;
          while (v25 != v28)
          {
            v26 = *(_QWORD *)(v3 + 8 * v28++);
            if (v26)
            {
              v27 = v28 - 1;
              goto LABEL_17;
            }
          }
        }
      }
    }
LABEL_27:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v13 + 56))(v0[17], 1, 1, v0[11]);
    sub_243B7F90C();
    v29 = v0[7];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v23 = (uint64_t (*)(uint64_t))v0[1];
    v22 = v29;
    return v23(v22);
  }
  __break(1u);
  return result;
}

uint64_t sub_243BD4A14(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  else
    *(_BYTE *)(v4 + 216) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_243BD4A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);

  if ((*(_BYTE *)(v0 + 216) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v2 + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128), v3);
    sub_243BFDBC8();
    sub_243BFDB98();
    v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v4(v1, v3);
  }
  else
  {
    v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))v4)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 168) = v6;
  *(_QWORD *)(v0 + 176) = v7;
  v8 = *(_QWORD *)(v0 + 144);
  if (v8 < 0)
  {
    if (sub_243BFDDF0())
    {
      sub_243BFE0E4();
      swift_unknownObjectRelease();
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v6 << 6);
LABEL_7:
    (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v8 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 104) + 72) * v10, *(_QWORD *)(v0 + 88));
LABEL_10:
    *(_QWORD *)(v0 + 184) = v6;
    *(_QWORD *)(v0 + 192) = v7;
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);
    v15 = *(int **)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v14);
    v26 = (uint64_t (*)(uint64_t))((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v16;
    *v16 = v0;
    v16[1] = sub_243BD4A14;
    v17 = *(_QWORD *)(v0 + 128);
    v18 = v26;
    return v18(v17);
  }
  v19 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v20 = (unint64_t)(*(_QWORD *)(v0 + 160) + 64) >> 6;
    if (v19 < v20)
    {
      v21 = *(_QWORD *)(v0 + 152);
      v22 = *(_QWORD *)(v21 + 8 * v19);
      v23 = v6 + 1;
      if (v22)
      {
LABEL_14:
        v7 = (v22 - 1) & v22;
        v10 = __clz(__rbit64(v22)) + (v23 << 6);
        v6 = v23;
        goto LABEL_7;
      }
      v23 = v6 + 2;
      if (v6 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
          goto LABEL_14;
        v23 = v6 + 3;
        if (v6 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * v23);
          if (v22)
            goto LABEL_14;
          v24 = v6 + 4;
          while (v20 != v24)
          {
            v22 = *(_QWORD *)(v21 + 8 * v24++);
            if (v22)
            {
              v23 = v24 - 1;
              goto LABEL_14;
            }
          }
        }
      }
    }
LABEL_24:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 88));
    sub_243B7F90C();
    v25 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v17 = v25;
    return v18(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_243BD4D4C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 88));
  sub_243B7F90C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Dictionary.fetch(key:asyncDefault:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  v9 = sub_243BFDD0C();
  v8[10] = v9;
  v8[11] = *(_QWORD *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_243BD4E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  MEMORY[0x249501B34](*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v2, *(_QWORD *)(v0 + 72));
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(int **)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    v7 = (uint64_t (*)(_QWORD))((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v5;
    *v5 = v0;
    v5[1] = sub_243BD4F50;
    return v7(*(_QWORD *)(v0 + 16));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_243BD4F50()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_243BD4F9C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_243BD5040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = (int *)v1[7];
  v8 = v1[8];
  v9 = (uint64_t)v1 + v4;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_243B4D7A0;
  return sub_243BD2DF4(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_243BD5128(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_243BD5168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Sequence.sorted<A>(_:)()
{
  return sub_243BFD904();
}

uint64_t sub_243BD51EC(uint64_t a1, uint64_t a2)
{
  return sub_243BD5228(a1, a2) & 1;
}

uint64_t Sequence.min<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_243BD5270(a1, a2, a3, a4, a5, a6, (uint64_t)sub_243BD51EC, MEMORY[0x24BEE0E80]);
}

uint64_t sub_243BD5228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_243BD52A4(a1, a2, *(void (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24)) & 1;
}

uint64_t Sequence.max<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_243BD5270(a1, a2, a3, a4, a5, a6, (uint64_t)sub_243BD51EC, MEMORY[0x24BEE0E78]);
}

uint64_t sub_243BD5270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, _QWORD *, uint64_t, uint64_t))
{
  _QWORD v9[8];

  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  v9[5] = a6;
  v9[6] = a1;
  v9[7] = a2;
  return a8(a7, v9, a3, a5);
}

uint64_t sub_243BD52A4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(double);
  void (*v20)(char *, uint64_t);
  _QWORD v21[2];

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v21 - v16;
  v18(v15);
  if (!v6)
  {
    a3(a2);
    a4 = sub_243BFD7C0();
    v20 = *(void (**)(char *, uint64_t))(v11 + 8);
    v20(v13, a6);
    v20(v17, a6);
  }
  return a4 & 1;
}

uint64_t sub_243BD53B8(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2543CE350);
}

uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2543CD828, (uint64_t)qword_2543CE350, a1);
}

uint64_t sub_243BD53F4(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2543CE368);
}

uint64_t static Log.network.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2543CE380, (uint64_t)qword_2543CE368, a1);
}

uint64_t sub_243BD5430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_243BFD598();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_243BD5498(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2543CE3A8);
}

uint64_t static Log.database.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2543CE3C8, (uint64_t)qword_2543CE3A8, a1);
}

uint64_t sub_243BD54D4(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF838);
}

uint64_t static Log.photos.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB820, (uint64_t)qword_2572EF838, a1);
}

uint64_t sub_243BD550C(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF850);
}

uint64_t static Log.album.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB828, (uint64_t)qword_2572EF850, a1);
}

uint64_t sub_243BD5544(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF868);
}

uint64_t static Log.gallery.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB830, (uint64_t)qword_2572EF868, a1);
}

uint64_t sub_243BD5580(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF880);
}

uint64_t static Log.shuffle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB838, (uint64_t)qword_2572EF880, a1);
}

uint64_t sub_243BD55BC(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF898);
}

uint64_t static Log.cache.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB840, (uint64_t)qword_2572EF898, a1);
}

uint64_t sub_243BD55F4(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2572EF8B0);
}

uint64_t static Log.testing.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2572EB848, (uint64_t)qword_2572EF8B0, a1);
}

uint64_t sub_243BD5630(uint64_t a1)
{
  return sub_243BD5650(a1, qword_2543CE388);
}

uint64_t sub_243BD5650(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_243BFD598();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_243BFD58C();
}

uint64_t static Log.session.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_243BD5430(&qword_2543CE3A0, (uint64_t)qword_2543CE388, a1);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

id sub_243BD56F0(void *a1)
{
  return objc_msgSend(a1, sel_count);
}

uint64_t sub_243BD56FC()
{
  return sub_243BFDBF8();
}

uint64_t sub_243BD570C()
{
  return sub_243BFDC10();
}

uint64_t sub_243BD5718()
{
  MEMORY[0x249502B6C](&unk_243C03FA8);
  return sub_243BFDBEC();
}

_QWORD *sub_243BD5768(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BD5AB4(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1880]);
}

uint64_t sub_243BD5774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x249502B6C](&unk_243C03FA8, a3);
  return sub_243BFDBF8();
}

uint64_t sub_243BD57D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x249502B6C](&unk_243C03FA8, a4);
  return sub_243BFDBD4();
}

uint64_t sub_243BD583C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x249502B6C](&unk_243C03FA8, a3);
  return sub_243BFDC10();
}

void sub_243BD5890(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

id sub_243BD5898@<X0>(_QWORD *a1@<X8>)
{
  void **v1;
  id result;

  result = sub_243BD56F0(*v1);
  *a1 = result;
  return result;
}

void (*sub_243BD58C0(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  id *v2;
  _QWORD *v5;
  uint64_t (*v6)();
  uint64_t v7;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  v6 = sub_243BD5950(v5, *a2, *v2);
  v5[4] = v7;
  v5[5] = v6;
  return sub_243BD5924;
}

void sub_243BD5924(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 40))(*a1);
  free(v1);
}

uint64_t (*sub_243BD5950(_QWORD *a1, uint64_t a2, id a3))()
{
  *a1 = objc_msgSend(a3, sel_objectAtIndexedSubscript_, a2);
  return sub_243BD599C;
}

uint64_t sub_243BD599C()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_243BD59A8(uint64_t a1)
{
  MEMORY[0x249502B6C](&unk_243C03FA8, a1);
  return sub_243BFDC04();
}

void sub_243BD59FC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_243BD5A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BD5E0C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

uint64_t sub_243BD5A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_243BD5E0C(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

uint64_t sub_243BD5A58()
{
  MEMORY[0x249502B6C](&unk_243C03FA8);
  return sub_243BFDBE0();
}

_QWORD *sub_243BD5AA8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_243BD5AB4(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE1878]);
}

_QWORD *sub_243BD5AB4(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x249502B6C](&unk_243C03FA8);
  result = a4(&v9, a1, a2, v7, MEMORY[0x24BEE17A8]);
  *a1 = v9;
  return result;
}

void sub_243BD5B18(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_243BD5B24(uint64_t a1)
{
  MEMORY[0x249502B6C](&unk_243C03E68, a1);
  return sub_243BFDC4C();
}

uint64_t sub_243BD5B58()
{
  return 2;
}

uint64_t sub_243BD5B60(uint64_t a1)
{
  id *v1;
  uint64_t v2;

  MEMORY[0x249502B6C](&unk_243C03E68, a1);
  v2 = sub_243BD6140();

  return v2;
}

uint64_t sub_243BD5BB0()
{
  return sub_243BFD8EC();
}

id PHFetchResult<>.collection.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;

  *a1 = v1;
  return v1;
}

uint64_t sub_243BD5BDC()
{
  return sub_243BD5C24(&qword_2572EF8C8, &qword_2572EF8D0);
}

uint64_t sub_243BD5C00()
{
  return sub_243BD5C24(&qword_2572EF8D8, qword_2572EF8E0);
}

uint64_t sub_243BD5C24(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x249502B6C](&unk_243C03FA8, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FetchResultCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FetchResultCollection);
}

void sub_243BD5C70()
{
  JUMPOUT(0x249502B6CLL);
}

void sub_243BD5C80()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BD5C90()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_243BD5C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BD5D7C(a1, a2, a3, MEMORY[0x24BEE1BD8]);
}

unint64_t sub_243BD5CA8()
{
  unint64_t result;

  result = qword_2572EF968;
  if (!qword_2572EF968)
  {
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2572EF968);
  }
  return result;
}

void sub_243BD5CEC()
{
  JUMPOUT(0x249502B6CLL);
}

void sub_243BD5CFC()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BD5D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BD5D7C(a1, a2, a3, MEMORY[0x24BEE1BA8]);
}

uint64_t sub_243BD5D18(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x249502B6C](&unk_243C03F48);
  return MEMORY[0x249502B6C](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_243BD5D60()
{
  JUMPOUT(0x249502B6CLL);
}

uint64_t sub_243BD5D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_243BD5D7C(a1, a2, a3, MEMORY[0x24BEE1BD0]);
}

uint64_t sub_243BD5D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_243BD5CA8();
  v8[0] = MEMORY[0x24BEE17A8];
  v8[1] = v6;
  return MEMORY[0x249502B6C](a4, a1, v8);
}

uint64_t sub_243BD5DC4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x249502B6C](&unk_243C03FA8);
  return MEMORY[0x249502B6C](MEMORY[0x24BEE4230], a1, &v3);
}

uint64_t sub_243BD5E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - v17;
  v19 = sub_243BFD7CC();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_243BD5FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_243BFDC88();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  v11 = sub_243BFD7CC();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = sub_243BFD7CC();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t static Platform.internalInstall.getter()
{
  return os_variant_has_internal_diagnostics();
}

uint64_t static Platform.current.getter()
{
  return 0;
}

PhotosFace::Platform_optional __swiftcall Platform.init(rawValue:)(Swift::Int rawValue)
{
  PhotosFace::Platform_optional v1;

  if (rawValue == 1)
    v1.value = PhotosFace_Platform_watch;
  else
    v1.value = PhotosFace_Platform_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

void *static Platform.allCases.getter()
{
  return &unk_25144F290;
}

uint64_t Platform.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL sub_243BD61A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_243BD61C0()
{
  unint64_t result;

  result = qword_2572EF970;
  if (!qword_2572EF970)
  {
    result = MEMORY[0x249502B6C](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_2572EF970);
  }
  return result;
}

_QWORD *sub_243BD6204@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_243BD6224(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

unint64_t sub_243BD6234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2572EF978;
  if (!qword_2572EF978)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2572EF980);
    result = MEMORY[0x249502B6C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2572EF978);
  }
  return result;
}

void sub_243BD6280(_QWORD *a1@<X8>)
{
  *a1 = &unk_25144F2B8;
}

uint64_t storeEnumTagSinglePayload for Platform(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_243BD62DC + 4 * byte_243C03FFD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_243BD6310 + 4 * byte_243C03FF8[v4]))();
}

uint64_t sub_243BD6310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BD6318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x243BD6320);
  return result;
}

uint64_t sub_243BD632C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x243BD6334);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_243BD6338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_243BD6340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

uint64_t CheckedContinuation.resume(success:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v4 = *(_QWORD *)(a3 + 24);
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)&v28 - v7;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v30 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - v14;
  v16 = sub_243BFDD0C();
  v17 = sub_243BFDD0C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v21 = (char *)&v28 - v20;
  v23 = (char *)&v28 + *(int *)(v22 + 48) - v20;
  v29 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v28 - v20, a1, v16, v19);
  v24 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v34, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v21, 1, v9) == 1)
  {
    v25 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v23, 1, v4) == 1)
    {
      result = sub_243BFDF70();
      __break(1u);
    }
    else
    {
      v26 = v31;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v23, v4);
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v32, v26, v4);
      sub_243BFDA00();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v4);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v21, v16);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v21, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v30, v15, v9);
    sub_243BFDA0C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v23, v17);
  }
  return result;
}

uint64_t SeedableRandom.init(seed:bits:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = a2 - 1;
    if (!__OFSUB__(a2, 1))
    {
      v4 = result;
      result = sub_243BD6748(a2);
      *a3 = v4;
      a3[1] = v3;
      a3[2] = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::UInt64 __swiftcall SeedableRandom.repeatingNext(upTo:)(Swift::UInt64 upTo)
{
  uint64_t v1;
  unint64_t v2;

  if (upTo)
  {
    v2 = *(_QWORD *)v1;
    do
      v2 = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v2 & *(_QWORD *)(v1 + 16)))) & 1) << (*(_BYTE *)(v1 + 8) & 0x3F)) | (v2 >> 1);
    while (v2 - 1 >= upTo);
    *(_QWORD *)v1 = v2;
    return v2 - 1;
  }
  else
  {
    __break(1u);
  }
  return upTo;
}

uint64_t SeedableRandom.state.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SeedableRandom.state.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SeedableRandom.state.modify())()
{
  return nullsub_1;
}

uint64_t SeedableRandom.shift.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SeedableRandom.magic.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

unint64_t SeedableRandom.init(bits:)@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = sub_243BD68B8(0xFFFFFFFFFFFFFFFFLL);
  if (result == -1)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = result + 1;
    *(_OWORD *)(a1 + 8) = xmmword_243C040F0;
  }
  return result;
}

uint64_t sub_243BD6748(uint64_t a1)
{
  uint64_t result;

  if ((unint64_t)(a1 - 1) < 0x40)
    return qword_243C04148[a1 - 1];
  result = sub_243BFDF70();
  __break(1u);
  return result;
}

Swift::UInt64 __swiftcall SeedableRandom.next()()
{
  Swift::UInt64 *v0;
  Swift::UInt64 result;

  result = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v0[2] & *v0))) & 1) << v0[1]) | (*v0 >> 1);
  *v0 = result;
  return result;
}

unint64_t SeedableRandom.repeatingNext<A>(in:)()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = *v0;
  v3 = v0[1] & 0x3F;
  do
    v2 = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v2 & v1))) & 1) << v3) | (v2 >> 1);
  while ((sub_243BFD91C() & 1) == 0);
  *v0 = v2;
  return v2;
}

unint64_t sub_243BD6888()
{
  unint64_t *v0;
  unint64_t result;

  result = ((unint64_t)(vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v0[2] & *v0))) & 1) << v0[1]) | (*v0 >> 1);
  *v0 = result;
  return result;
}

unint64_t sub_243BD68B8(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x249502C68](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x249502C68](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SeedableRandom(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeedableRandom(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SeedableRandom()
{
  return &type metadata for SeedableRandom;
}

uint64_t static SystemDirectory.database.getter()
{
  return sub_243BD6DBC(0x6146736F746F6850, 0xEA00000000006563);
}

uint64_t static SystemDirectory.folderURL(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v0 = sub_243BFD10C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_243BFD190();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2543CE008 != -1)
    swift_once();
  __swift_project_value_buffer(v4, (uint64_t)qword_2543CDFF0);
  sub_243BFD13C();
  v10[0] = sub_243BFD244();
  v10[1] = v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCD7A0], v0);
  sub_243B4DDA4();
  sub_243BFD184();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_243BD6B40()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t started;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543CDE68);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_243BFD10C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_243BFD190();
  __swift_allocate_value_buffer(v7, qword_2543CDFF0);
  __swift_project_value_buffer(v7, (uint64_t)qword_2543CDFF0);
  v8 = swift_slowAlloc();
  started = sysdir_start_search_path_enumeration_private();
  MEMORY[0x249502D40](started, v8);
  sub_243BFD868();
  MEMORY[0x249502C5C](v8, -1, -1);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCD790], v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  return sub_243BFD178();
}

uint64_t static SystemDirectory.library.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2543CE008 != -1)
    swift_once();
  v2 = sub_243BFD190();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2543CDFF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static SystemDirectory.photosFace.getter()
{
  uint64_t v0;

  if (qword_2543CE008 != -1)
    swift_once();
  v0 = sub_243BFD190();
  __swift_project_value_buffer(v0, (uint64_t)qword_2543CDFF0);
  return sub_243BFD13C();
}

uint64_t static SystemDirectory.developmentDatabaseFile.getter()
{
  return sub_243BD6DBC(0x6573616261746164, 0xEF6574696C71732ELL);
}

uint64_t sub_243BD6DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  v4 = sub_243BFD10C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_243BFD190();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2543CE008 != -1)
    swift_once();
  __swift_project_value_buffer(v8, (uint64_t)qword_2543CDFF0);
  sub_243BFD13C();
  v13[0] = a1;
  v13[1] = a2;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCD7A0], v4);
  sub_243B4DDA4();
  sub_243BFD184();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void static SystemDirectory.tempFolder()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = sub_243BFD190();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  if (qword_2543CE008 != -1)
    swift_once();
  __swift_project_value_buffer(v0, (uint64_t)qword_2543CDFF0);
  sub_243BFD13C();
  v5 = (void *)sub_243BFD130();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9[0] = 0;
  v6 = objc_msgSend(v4, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v5, 1, v9);

  v7 = v9[0];
  if (v6)
  {
    sub_243BFD160();

  }
  else
  {
    v8 = v7;
    sub_243BFD100();

    swift_willThrow();
  }
}

ValueMetadata *type metadata accessor for SystemDirectory()
{
  return &type metadata for SystemDirectory;
}

uint64_t sub_243BD7108@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];

  v18[0] = a5;
  v9 = sub_243BFD6DC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_243BFD700();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_243BFD6F4();
  sub_243B8FF54((uint64_t)v16, a1, a2, a3, a4);
  sub_243BFD6E8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF988);
  sub_243BFD6D0();
  sub_243BFD25C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_bridgeObjectRelease();
}

uint64_t UUID.init(hash:)(void (*a1)(_BYTE *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  v2 = sub_243BFD6DC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_243BFD700();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_243BFD6F4();
  a1(v9);
  sub_243BFD6E8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EF988);
  sub_243BFD6D0();
  sub_243BFD25C();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

_OWORD *sub_243BD73D8@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X8>)
{
  if (result)
    *a2 = *result;
  else
    __break(1u);
  return result;
}

uint64_t sub_243BD73EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_243BFDA60();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_243BFDA54();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_243B6F978(a1, &qword_2572EBF48);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_243BFD9F4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_243BD7538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t (*v14)(uint64_t);
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v42 = type metadata accessor for FetchByDayResponseProto(0);
  MEMORY[0x24BDAC7A8](v42);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
    return v7;
  v41 = v5;
  v46 = MEMORY[0x24BEE4AF8];
  sub_243B7CCF0(0, v6, 0);
  v7 = v46;
  result = sub_243BA32CC(a1);
  v10 = result;
  v11 = 0;
  v12 = a1 + 64;
  v13 = *(_BYTE *)(a1 + 32);
  v36 = a1 + 80;
  v14 = type metadata accessor for FetchByDayResponseProto;
  v39 = a1 + 64;
  v40 = a1;
  v37 = v6;
  v38 = v9;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << v13)
  {
    v17 = (unint64_t)v10 >> 6;
    if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
      goto LABEL_26;
    v43 = v11;
    v44 = 1 << v10;
    v18 = v7;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    MEMORY[0x24BDAC7A8](result);
    *(&v36 - 4) = v20;
    *(&v36 - 3) = v19;
    *((_BYTE *)&v36 - 16) = 2;
    sub_243B88508(&qword_2572ED618, v14, (uint64_t)&protocol conformance descriptor for FetchByDayResponseProto);
    swift_bridgeObjectRetain_n();
    v21 = v2;
    v22 = v14;
    v23 = (uint64_t)v41;
    sub_243BFD4CC();
    v7 = v23;
    v24 = sub_243BFD4A8();
    v45 = v21;
    if (v21)
    {
      sub_243B7FA20(v23, type metadata accessor for FetchByDayResponseProto);
      swift_release();
      swift_bridgeObjectRelease_n();
      return v7;
    }
    v26 = v24;
    v27 = v25;
    sub_243B7FA20(v23, v22);
    result = swift_bridgeObjectRelease_n();
    v7 = v18;
    v46 = v18;
    v28 = *(_QWORD *)(v18 + 16);
    v29 = *(_QWORD *)(v7 + 24);
    v14 = v22;
    if (v28 >= v29 >> 1)
    {
      result = sub_243B7CCF0(v29 > 1, v28 + 1, 1);
      v7 = v46;
    }
    *(_QWORD *)(v7 + 16) = v28 + 1;
    v30 = v7 + 16 * v28;
    *(_QWORD *)(v30 + 32) = v26;
    *(_QWORD *)(v30 + 40) = v27;
    a1 = v40;
    v13 = *(_BYTE *)(v40 + 32);
    v15 = 1 << v13;
    if (v10 >= 1 << v13)
      goto LABEL_27;
    v12 = v39;
    v31 = *(_QWORD *)(v39 + 8 * v17);
    if ((v31 & v44) == 0)
      goto LABEL_28;
    LODWORD(v9) = v38;
    if (*(_DWORD *)(v40 + 36) != (_DWORD)v38)
      goto LABEL_29;
    v32 = v31 & (-2 << (v10 & 0x3F));
    if (v32)
    {
      v15 = __clz(__rbit64(v32)) | v10 & 0xFFFFFFFFFFFFFFC0;
      v2 = v45;
      v16 = v37;
    }
    else
    {
      v33 = v17 + 1;
      v34 = (v15 + 63) >> 6;
      v2 = v45;
      v16 = v37;
      if (v17 + 1 < v34)
      {
        v35 = *(_QWORD *)(v39 + 8 * v33);
        if (v35)
        {
LABEL_21:
          v15 = __clz(__rbit64(v35)) + (v33 << 6);
        }
        else
        {
          while (v34 - 2 != v17)
          {
            v35 = *(_QWORD *)(v36 + 8 * v17++);
            if (v35)
            {
              v33 = v17 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    v11 = v43 + 1;
    v10 = v15;
    if (v43 + 1 == v16)
      return v7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_243BD788C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572EFC30);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_243B6F978((uint64_t)v14, &qword_2572EFC38);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_243BFDEB0();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_243BE5294(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_243BFD880();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_243BE52F8(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_243BE47F8();
    __asm { BR              X12 }
  }
  sub_243BCB5BC(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_243BFD0F4();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t PhotosXPC.__allocating_init(messageCenter:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t PhotosXPC.generatePhoto(photos:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2572EBF48);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F0);
  v10 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ECD98);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = MEMORY[0x24BEE4AF8];
  v13 = sub_243BE29B8(MEMORY[0x24BEE4AF8]);
  v15 = v14;
  v16 = sub_243BE2818(v12);
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2572ED9F8);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 16) = v13;
  *(_QWORD *)(v19 + 24) = v15;
  v20 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v19 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v19 + 40) = v16;
  *(_QWORD *)(v19 + 48) = v18;
  *(_QWORD *)(v19 + 56) = v20;
  *(_QWORD *)(v10 + 16) = v19;
  *(_QWORD *)(v10 + 24) = v11;
  v21 = sub_243BFDA60();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = &unk_2572EF998;
  v22[5] = v9;
  v22[6] = v10;
  swift_retain();
  swift_retain();
  sub_243BD73EC((uint64_t)v8, (uint64_t)&unk_2572EDA00, (uint64_t)v22);
  swift_release();
  result = swift_release();
  *a2 = v10;
  return result;
}

uint64_t PhotosXPC.generateMask(identifier:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  if (qword_2543CE238 != -1)
    swift_once();
  type metadata accessor for CommunicationActor();
  sub_243B88508(qword_2543CE240, (uint64_t (*)(uint64_t))type metadata accessor for CommunicationActor, (uint64_t)&protocol conformance descriptor for CommunicationActor);
  v2[4] = sub_243BFD9F4();
  v2[5] = v3;
  return swift_task_switch();
}

uint64_t sub_243BD8038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(char, uint64_t, uint64_t);

  v1 = UUID.serialized(version:)();
  v3 = v2;
  v0[6] = v1;
  v0[7] = v2;
  v6 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_2572EF9B0 + dword_2572EF9B0);
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_243BD80C4;
  return v6(2, v1, v3);
}

uint64_t sub_243BD80C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *(_QWORD *)(*v2 + 48);
  v7 = *v2;
  swift_task_dealloc();
  sub_243B7FCC0(v6, v5);
  if (v1)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v4 + 72) = a1;
  v10 = (uint64_t (__cdecl *)())((char *)&dword_2572EF9B8 + dword_2572EF9B8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v9;
  *v9 = v7;
  v9[1] = sub_243BD8184;
  return v10();
}

