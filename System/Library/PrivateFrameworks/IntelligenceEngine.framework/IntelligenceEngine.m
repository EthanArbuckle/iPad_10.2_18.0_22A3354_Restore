uint64_t _GLOBAL__sub_I_nlgenerator_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(FALLBACK_EVENT_ID, "fallback");
  return __cxa_atexit(MEMORY[0x24BEDACF0], FALLBACK_EVENT_ID, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_executionstate_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_SCOPE, "__global__");
  return __cxa_atexit(MEMORY[0x24BEDACF0], siri::intelligence::IE_GLOBAL_SCOPE, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_dialogtypes_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::ARRAY_SUFFIX, "[]");
  return __cxa_atexit(MEMORY[0x24BEDACF0], siri::intelligence::ARRAY_SUFFIX, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_validator_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::sIntentRenameChange, "1.4.5");
  return __cxa_atexit(MEMORY[0x24BEDACF0], siri::intelligence::sIntentRenameChange, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_flowgraph_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::IE_GLOBAL_SCOPE, "__global__");
  return __cxa_atexit(MEMORY[0x24BEDACF0], &siri::intelligence::IE_GLOBAL_SCOPE, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_configuration_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::Configuration::TEMPLATES_DIR, "Templates");
  return __cxa_atexit(MEMORY[0x24BEDACF0], siri::intelligence::Configuration::TEMPLATES_DIR, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_behaviorhandler_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_SCOPE, "__global__");
  return __cxa_atexit(MEMORY[0x24BEDACF0], siri::intelligence::IE_GLOBAL_SCOPE, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_status_cc()
{
  google::protobuf::util::Status::OK = 0;
  qword_253F44DC8 = 0;
  unk_253F44DD0 = 0;
  qword_253F44DC0 = 0;
  __cxa_atexit((void (*)(void *))google::protobuf::util::Status::~Status, &google::protobuf::util::Status::OK, &dword_22AEC9000);
  google::protobuf::util::Status::Status((uint64_t)&google::protobuf::util::Status::CANCELLED, 1, "", 0);
  __cxa_atexit((void (*)(void *))google::protobuf::util::Status::~Status, &google::protobuf::util::Status::CANCELLED, &dword_22AEC9000);
  google::protobuf::util::Status::Status((uint64_t)&google::protobuf::util::Status::UNKNOWN, 2, "", 0);
  return __cxa_atexit((void (*)(void *))google::protobuf::util::Status::~Status, &google::protobuf::util::Status::UNKNOWN, &dword_22AEC9000);
}

uint64_t google::protobuf::util::Status::Status(uint64_t a1, int a2, void *__src, size_t __len)
{
  uint64_t v5;
  __int128 __dst;
  uint64_t v8;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    if (__src)
    {
      std::string::basic_string[abi:ne180100](&__dst, __src, __len);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)v5);
    }
    else
    {
      __dst = 0uLL;
      v8 = 0;
    }
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v8;
  }
  return a1;
}

void sub_22AECA6AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_memoryclass_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::Memory::BOOLEAN_SET, "true");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit(MEMORY[0x24BEDACF0], &siri::intelligence::Memory::BOOLEAN_SET, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::Memory::BOOLEAN_UNSET, "false");
  __cxa_atexit(v0, &siri::intelligence::Memory::BOOLEAN_UNSET, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::Memory::NUMBER_ZERO, "0");
  __cxa_atexit(v0, &siri::intelligence::Memory::NUMBER_ZERO, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::Memory::STRING_UNSET, (char *)&str_6_1);
  return __cxa_atexit(v0, siri::intelligence::Memory::STRING_UNSET, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_intelligence_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&qword_253F46890, "__global__");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit(MEMORY[0x24BEDACF0], &qword_253F46890, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&qword_253F468A8, "default");
  __cxa_atexit(v0, &qword_253F468A8, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_CURRENT_ACTIVITY, "global.currentActivity");
  __cxa_atexit(v0, siri::intelligence::IE_GLOBAL_CURRENT_ACTIVITY, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_PREVIOUS_ACTIVITY, "global.previousActivity");
  __cxa_atexit(v0, siri::intelligence::IE_GLOBAL_PREVIOUS_ACTIVITY, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_ACTIVE_INTENTS, "global.activeIntents");
  __cxa_atexit(v0, siri::intelligence::IE_GLOBAL_ACTIVE_INTENTS, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::IE_GLOBAL_ACTIVE_LOCAL_INTENTS, "global.activeLocalIntents");
  __cxa_atexit(v0, siri::intelligence::IE_GLOBAL_ACTIVE_LOCAL_INTENTS, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::IE_RECOVER_FROM_DEAD_END, "recoverFromDeadEnd");
  return __cxa_atexit(v0, &siri::intelligence::IE_RECOVER_FROM_DEAD_END, &dword_22AEC9000);
}

uint64_t _GLOBAL__sub_I_simplekey_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45340, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45358, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45370, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45388, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F453A0, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F453B8, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F453D0, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F453E8, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45400, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45418, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45430, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45448, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45460, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45478, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45490, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F454A8, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F454C0, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F454D8, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_22AEC9000);
}

void sub_22AECAAE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_parser_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45AC0, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45AD8, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45AF0, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B08, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B20, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B38, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B50, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B68, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B80, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45B98, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45BB0, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45BC8, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45BE0, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45BF8, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45C10, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45C28, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45C40, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45C58, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_4, 0, &dword_22AEC9000);
}

void sub_22AECAD1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_scanner_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F458E0, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F458F8, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45910, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45928, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45940, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45958, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45970, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45988, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F459A0, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F459B8, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F459D0, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F459E8, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A00, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A18, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A30, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A48, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A60, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45A78, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_2, 0, &dword_22AEC9000);
}

void sub_22AECAF54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_tag_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45CA0, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45CB8, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45CD0, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45CE8, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D00, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D18, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D30, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D48, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D60, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D78, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45D90, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45DA8, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45DC0, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45DD8, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45DF0, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45E08, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45E20, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45E38, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_5, 0, &dword_22AEC9000);
}

void sub_22AECB18C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_scantoken_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45520, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45538, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45550, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45568, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45580, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45598, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F455B0, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F455C8, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F455E0, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F455F8, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45610, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45628, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45640, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45658, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45670, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45688, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F456A0, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F456B8, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_22AEC9000);
}

void sub_22AECB3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_singledocparser_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(YAML::TokenNames, "DIRECTIVE");
  std::string::basic_string[abi:ne180100]<0>(&YAML::TokenNames[24], "DOC_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45700, "DOC_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45718, "BLOCK_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45730, "BLOCK_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45748, "BLOCK_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45760, "BLOCK_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45778, "BLOCK_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45790, "FLOW_SEQ_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F457A8, "FLOW_MAP_START");
  std::string::basic_string[abi:ne180100]<0>(qword_253F457C0, "FLOW_SEQ_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F457D8, "FLOW_MAP_END");
  std::string::basic_string[abi:ne180100]<0>(qword_253F457F0, "FLOW_MAP_COMPACT");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45808, "FLOW_ENTRY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45820, "KEY");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45838, "VALUE");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45850, "ANCHOR");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45868, "ALIAS");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45880, "TAG");
  std::string::basic_string[abi:ne180100]<0>(qword_253F45898, "SCALAR");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_22AEC9000);
}

void sub_22AECB5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t _GLOBAL__sub_I_validationresult_cpp()
{
  void (*v0)(void *);

  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_VERSION, "no-version");
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit(MEMORY[0x24BEDACF0], &siri::intelligence::CODE_NO_VERSION, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_META_NAME, "no-meta-name");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_META_NAME, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_VAR_NAME, "no-var-name");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_VAR_NAME, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_VAR_TYPE, "no-var-type");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_VAR_TYPE, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_PARAM, "no-param");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_PARAM, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_NO_CATI_NAME, "no-cati-name");
  __cxa_atexit(v0, siri::intelligence::CODE_NO_CATI_NAME, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_NO_CATI_GUID, "no-cati-guid");
  __cxa_atexit(v0, siri::intelligence::CODE_NO_CATI_GUID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_DUPE_PRODUCER, "dupe-producer");
  __cxa_atexit(v0, siri::intelligence::CODE_DUPE_PRODUCER, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_FUTURE_VERSION, "future-version");
  __cxa_atexit(v0, &siri::intelligence::CODE_FUTURE_VERSION, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_VAR, "undef-var");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_VAR, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_RESPONSE, "undef-response");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_RESPONSE, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_INPUT, "undef-input");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_INPUT, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_CONDITION, "undef-condition");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_CONDITION, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_INTENT, "undef-intent");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_INTENT, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_FUNC, "undef-func");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_FUNC, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNDEF_PARAM, "undef-param");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNDEF_PARAM, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_INVALID_NAME, "invalid-name");
  __cxa_atexit(v0, &siri::intelligence::CODE_INVALID_NAME, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_INVALID_ID, "invalid-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_INVALID_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_INVALID_CAT_ID, "invalid-cat-id");
  __cxa_atexit(v0, siri::intelligence::CODE_INVALID_CAT_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_INVALID_PATTERN_ID, "invalid-pattern-id");
  __cxa_atexit(v0, siri::intelligence::CODE_INVALID_PATTERN_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_ID, "no-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_CAT_ID, "no-cat-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_CAT_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_PATTERN_ID, "no-pattern-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_PATTERN_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_RESPONSE_ID, "no-response-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_RESPONSE_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_OPERATOR, "no-operator");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_OPERATOR, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_NO_EFFECT, "no-effect");
  __cxa_atexit(v0, &siri::intelligence::CODE_NO_EFFECT, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_INVALID_OPERATOR, "invalid-operator");
  __cxa_atexit(v0, &siri::intelligence::CODE_INVALID_OPERATOR, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_EMPTY_EXPR, "empty-expr");
  __cxa_atexit(v0, &siri::intelligence::CODE_EMPTY_EXPR, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_INVALID_TYPE, "invalid-type");
  __cxa_atexit(v0, &siri::intelligence::CODE_INVALID_TYPE, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_TYPE_MISMATCH, "type-mismatch");
  __cxa_atexit(v0, &siri::intelligence::CODE_TYPE_MISMATCH, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_MULTI_DEFS, "multi-defs");
  __cxa_atexit(v0, &siri::intelligence::CODE_MULTI_DEFS, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_FILE_NOT_FOUND, "file-not-found");
  __cxa_atexit(v0, &siri::intelligence::CODE_FILE_NOT_FOUND, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_YAML_PARSE, "yaml-parse");
  __cxa_atexit(v0, &siri::intelligence::CODE_YAML_PARSE, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_DUPE_ID, "dupe-id");
  __cxa_atexit(v0, &siri::intelligence::CODE_DUPE_ID, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_READ_ONLY, "read-only");
  __cxa_atexit(v0, &siri::intelligence::CODE_READ_ONLY, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_DEPRECATED, "deprecated");
  __cxa_atexit(v0, &siri::intelligence::CODE_DEPRECATED, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_INFINITE_LOOP, "infinite-loop");
  __cxa_atexit(v0, &siri::intelligence::CODE_INFINITE_LOOP, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::CODE_UNUSED, "unused");
  __cxa_atexit(v0, &siri::intelligence::CODE_UNUSED, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_UTTER_DUPE, "utter-dupe");
  __cxa_atexit(v0, siri::intelligence::CODE_UTTER_DUPE, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_UTTER_NUM, "utter-num");
  __cxa_atexit(v0, siri::intelligence::CODE_UTTER_NUM, &dword_22AEC9000);
  std::string::basic_string[abi:ne180100]<0>(siri::intelligence::CODE_UTTER_EMPTY, "utter-empty");
  return __cxa_atexit(v0, siri::intelligence::CODE_UTTER_EMPTY, &dword_22AEC9000);
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  const char *v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 > 3010000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/stubs/common.cc";
    v23 = 75;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 10, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 3010000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/stubs/common.cc";
    v23 = 86;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 10, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_22AECBFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char **google::protobuf::internal::LogFinisher::operator=(int a1, const char **this)
{
  return google::protobuf::internal::LogMessage::Finish(this);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **google::protobuf::internal::LogMessage::Finish(const char **this)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = this;
  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)this;
  }
  this = (const char **)google::protobuf::internal::log_handler_(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
  }
  return this;
}

void sub_22AECC3A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::OnShutdownRun(google::protobuf::internal *this, void (*a2)(const void *), const void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = google::protobuf::internal::ShutdownData::get(this);
  std::mutex::lock((std::mutex *)(v5 + 24));
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)v5) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    v11 = v7 - *(_QWORD *)v5;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>(v5 + 16, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_QWORD *)v14 = this;
    *((_QWORD *)v14 + 1) = a2;
    v8 = v14 + 16;
    v17 = *(char **)v5;
    v16 = *(char **)(v5 + 8);
    if (v16 != *(char **)v5)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *(char **)v5;
    }
    *(_QWORD *)v5 = v14;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v6[1] = a2;
    v8 = v6 + 2;
  }
  *(_QWORD *)(v5 + 8) = v8;
  std::mutex::unlock((std::mutex *)(v5 + 24));
}

void sub_22AECC4CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ShutdownData::get(google::protobuf::internal::ShutdownData *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 850045863;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    google::protobuf::internal::ShutdownData::get(void)::data = v3;
  }
  return google::protobuf::internal::ShutdownData::get(void)::data;
}

void sub_22AECC56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_24F5402D0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F53FE40, MEMORY[0x24BEDAAF0]);
}

void sub_22AECC6F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_24F5402D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_22AECC7B0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void google::protobuf::util::Status::~Status(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2E9B34](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2E9B40](v13);
  return a1;
}

void sub_22AECCA80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2E9B40](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22AECCA60);
}

void sub_22AECCAC8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22AECCBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t google::protobuf::io::ZeroCopyOutputStream::WriteAliasedRaw(google::protobuf::io::ZeroCopyOutputStream *this, const void *a2)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", 47);
  v2 = google::protobuf::internal::LogMessage::operator<<(v5, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_22AECD018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::ZeroCopyOutputStream::AllowsAliasing(google::protobuf::io::ZeroCopyOutputStream *this)
{
  return 0;
}

uint64_t google::protobuf::RepeatedField<int>::RepeatedField(uint64_t a1, int *a2)
{
  int v4;
  std::string *v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v10;
  std::string v11[2];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *a2;
  if (v4)
  {
    google::protobuf::RepeatedField<int>::Reserve((int *)a1, v4);
    google::protobuf::RepeatedField<int>::AddNAlreadyReserved(a1, *a2);
    if (*(int *)a1 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1198);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = (void *)google::protobuf::RepeatedField<int>::elements(a1);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1177);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<int>::elements((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
  return a1;
}

void sub_22AECD144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<int>::Reserve(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  google::protobuf::internal::ArenaImpl **v6;
  google::protobuf::internal::ArenaImpl *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *Aligned;
  void *v12;

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
      goto LABEL_4;
LABEL_6:
    v6 = (google::protobuf::internal::ArenaImpl **)(a1 + 2);
    goto LABEL_7;
  }
  v5 = (_QWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a1) - 8);
  v2 = a1[1];
  if (!v2)
    goto LABEL_6;
LABEL_4:
  v6 = (google::protobuf::internal::ArenaImpl **)(google::protobuf::RepeatedField<int>::elements((uint64_t)a1) - 8);
  v2 = 2 * a1[1];
LABEL_7:
  v7 = *v6;
  if (v2 <= a2)
    v2 = a2;
  if (v2 <= 4)
    v8 = 4;
  else
    v8 = v2;
  v9 = 4 * v8;
  if (v7)
  {
    v10 = (v9 + 15) & 0x3FFFFFFF8;
    if (*((_QWORD *)v7 + 14))
      google::protobuf::Arena::OnArenaAllocation((uint64_t)v7, MEMORY[0x24BEDB778], v10);
    Aligned = (_QWORD *)google::protobuf::internal::ArenaImpl::AllocateAligned(v7, v10);
  }
  else
  {
    Aligned = operator new(v9 + 8);
  }
  *Aligned = v7;
  a1[1] = v8;
  *((_QWORD *)a1 + 1) = Aligned + 1;
  google::protobuf::RepeatedField<int>::elements((uint64_t)a1);
  if (*a1 >= 1)
  {
    v12 = (void *)google::protobuf::RepeatedField<int>::elements((uint64_t)a1);
    memcpy(v12, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

uint64_t google::protobuf::RepeatedField<int>::AddNAlreadyReserved(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1153);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, *(_DWORD *)(a1 + 4));
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, ", ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, *(_DWORD *)a1);
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_22AECD340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::Mutable(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1197);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1198);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_22AECD414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::Get(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1176);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*a1 <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1177);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::RepeatedField<int>::elements((uint64_t)a1) + 4 * a2;
}

void sub_22AECD4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::~RepeatedField(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = google::protobuf::RepeatedField<int>::elements(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

void google::protobuf::RepeatedField<int>::InternalSwap(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  char v10;
  std::string v11[2];

  if (a1 == a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1323);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: this != other: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 4))
    v5 = (uint64_t *)(google::protobuf::RepeatedField<int>::elements(a1) - 8);
  else
    v5 = (uint64_t *)(a1 + 8);
  v6 = *v5;
  if (*(_DWORD *)(a2 + 4))
    v7 = (_QWORD *)(google::protobuf::RepeatedField<int>::elements(a2) - 8);
  else
    v7 = (_QWORD *)(a2 + 8);
  if (v6 != *v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1324);
    v8 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: GetArenaNoVirtual() == other->GetArenaNoVirtual(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  LODWORD(v9) = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)a2 = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v9;
}

void sub_22AECD680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<int>::elements(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 300);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (total_size_) > (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_22AECD710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedField<int>::MergeFrom(int *a1, int *a2)
{
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1279);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*a2)
  {
    v5 = *a1;
    google::protobuf::RepeatedField<int>::Reserve(a1, *a1 + *a2);
    google::protobuf::RepeatedField<int>::AddNAlreadyReserved((uint64_t)a1, *a2);
    v6 = (void *)google::protobuf::RepeatedField<int>::Mutable(a1, v5);
    if (*a2 <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1177);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v8 = (const void *)google::protobuf::RepeatedField<int>::elements((uint64_t)a2);
    memcpy(v6, v8, 4 * *a2);
  }
}

void sub_22AECD834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(google::protobuf::internal::ArenaImpl **this)
{
  google::protobuf::internal::ArenaImpl *v1;

  v1 = *this;
  if (v1)
    google::protobuf::internal::ArenaImpl::SpaceAllocated(v1);
}

void google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x22E2E9CCC](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AECD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(uint64_t a1, __n128 *a2)
{
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  __n128 result;
  google::protobuf::internal::ArenaImpl *v9;
  __n128 *AlignedAndAddCleanup;
  uint64_t v11;
  uint64_t v12;

  v4 = *(int **)(a1 + 16);
  if (!v4)
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 12);
LABEL_8:
    if (v5 <= v6)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v6 - v5 + 1);
      v4 = *(int **)(a1 + 16);
    }
    goto LABEL_10;
  }
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *v4;
  if (v5 < *v4)
  {
    *(_DWORD *)(a1 + 8) = v5 + 1;
    v7 = *(_QWORD *)&v4[2 * v5 + 2];
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    result = *a2;
    *(_QWORD *)(v7 + 16) = a2[1].n128_u64[0];
    *(__n128 *)v7 = result;
    a2[1].n128_u8[7] = 0;
    a2->n128_u8[0] = 0;
    return result;
  }
  if (v6 == *(_DWORD *)(a1 + 12))
    goto LABEL_8;
LABEL_10:
  ++*v4;
  v9 = *(google::protobuf::internal::ArenaImpl **)a1;
  if (*(_QWORD *)a1)
  {
    if (*((_QWORD *)v9 + 14))
    AlignedAndAddCleanup = (__n128 *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v9, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    AlignedAndAddCleanup = (__n128 *)operator new();
  }
  result = *a2;
  AlignedAndAddCleanup[1].n128_u64[0] = a2[1].n128_u64[0];
  *AlignedAndAddCleanup = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v12 + 1;
  *(_QWORD *)(v11 + 8 * v12 + 8) = AlignedAndAddCleanup;
  return result;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AECDC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  int v5;
  const std::string **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)a1, (std::string **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_22AECDCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::Reserve(unsigned int *this, int a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = this[2];
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v4);
  return this;
}

void google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap(google::protobuf::internal::RepeatedPtrFieldBase *this, google::protobuf::internal::RepeatedPtrFieldBase *a2)
{
  std::string *v4;
  std::string *v5;
  uint64_t v6;
  char v7;
  std::string v8[2];

  if (this == a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2422);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: this != other: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)this != *(_QWORD *)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2423);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: GetArenaNoVirtual() == other->GetArenaNoVirtual(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
}

void sub_22AECDE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(uint64_t this, int a2, int a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int **)(this + 16);
  if (v3)
  {
    LODWORD(v4) = a3 + a2;
    LODWORD(v5) = *v3;
    if (a3 + a2 < *v3)
    {
      v4 = (int)v4;
      do
      {
        *(_QWORD *)((char *)&v3[2 * v4] + 8 - 8 * a3) = *(_QWORD *)&v3[2 * v4 + 2];
        ++v4;
        v3 = *(int **)(this + 16);
        v5 = *v3;
      }
      while (v4 < v5);
    }
    *(_DWORD *)(this + 8) -= a3;
    *v3 = v5 - a3;
  }
  return this;
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  google::protobuf::internal::ArenaImpl *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *Aligned;
  uint64_t v13;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  if (v3 < v2 + a2)
  {
    v7 = *(google::protobuf::internal::ArenaImpl **)this;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*((_QWORD *)v7 + 14))
        google::protobuf::Arena::OnArenaAllocation(*(_QWORD *)this, MEMORY[0x24BEDB778], v11);
      Aligned = (unsigned int *)google::protobuf::internal::ArenaImpl::AllocateAligned(v7, v11);
    }
    else
    {
      Aligned = (unsigned int *)operator new(v10 + 8);
    }
    *((_QWORD *)this + 2) = Aligned;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(Aligned + 2, v5 + 2, 8 * v13);
      Aligned = (unsigned int *)*((_QWORD *)this + 2);
      *Aligned = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *Aligned = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        Aligned = (unsigned int *)*((_QWORD *)this + 2);
      }
    }
    v2 = *((_DWORD *)this + 2);
    v5 = Aligned;
  }
  return &v5[2 * v2 + 2];
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  google::protobuf::internal::ArenaImpl *v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *AlignedAndAddCleanup;
  std::string *v22;

  v9 = result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = (google::protobuf::internal::ArenaImpl *)v9->__r_.__value_.__r.__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if (*((_QWORD *)v17 + 14))
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      v22 = AlignedAndAddCleanup;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(AlignedAndAddCleanup, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t google::protobuf::MessageLite::GetMaybeArenaPointer(google::protobuf::MessageLite *this)
{
  return (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(google::protobuf::internal::EpsCopyInputStream *this, const char **a2, int a3)
{
  const char *v6;
  std::string *v7;
  char v9;
  char v10;
  std::string v11[2];

  v6 = *a2;
  if (!v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.h", 208);
    v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: *ptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v6 = *a2;
  }
  if ((unint64_t)v6 < *(_QWORD *)this)
    return 0;
  if (&v6[-*((_QWORD *)this + 1)] == (const char *)*((int *)this + 7))
    return 1;
  *a2 = google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, v6, a3);
  return v9 & 1;
}

void sub_22AECE164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_22AECE2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(uint64_t *a1)
{
  google::protobuf::internal::ArenaImpl *v2;
  uint64_t AlignedAndAddCleanup;
  double result;

  v2 = (google::protobuf::internal::ArenaImpl *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*a1 & 1) != 0)
  {
    v2 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v2 + 3);
    if (v2)
      goto LABEL_3;
LABEL_7:
    AlignedAndAddCleanup = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if (*((_QWORD *)v2 + 14))
  AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>);
LABEL_8:
  result = 0.0;
  *(_OWORD *)AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(_QWORD *)(AlignedAndAddCleanup + 24) = v2;
  return result;
}

const std::string::value_type *google::protobuf::internal::EpsCopyInputStream::ReadString(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x22E2E99F0](a4, __s, a3);
  return &__s[v6];
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

google::protobuf::io::FileInputStream *google::protobuf::io::FileInputStream::FileInputStream(google::protobuf::io::FileInputStream *this, int a2, int a3)
{
  *((_QWORD *)this + 1) = &off_24F540368;
  *(_QWORD *)this = &off_24F540328;
  *((_DWORD *)this + 4) = a2;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 28) = 0;
  google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((uint64_t)this + 32, (uint64_t)this + 8, a3);
  return this;
}

void sub_22AECE954(_Unwind_Exception *a1)
{
  google::protobuf::io::FileInputStream::CopyingFileInputStream *v1;

  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(v1);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::io::FileInputStream::CopyingFileInputStream::Close(google::protobuf::io::FileInputStream::CopyingFileInputStream *this)
{
  std::string *v2;
  int v3;
  char v5;
  std::string v6[2];

  if (*((_BYTE *)this + 13))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 117);
    v2 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  *((_BYTE *)this + 13) = 1;
  if (v3)
    *((_DWORD *)this + 4) = *__error();
  return v3 == 0;
}

void sub_22AECEA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::FileInputStream::Next(google::protobuf::io::FileInputStream *this, const void **a2, int *a3)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Next((google::protobuf::io::FileInputStream *)((char *)this + 32), a2, a3);
}

void google::protobuf::io::FileInputStream::BackUp(google::protobuf::io::FileInputStream *this, int a2)
{
  google::protobuf::io::CopyingInputStreamAdaptor::BackUp((google::protobuf::io::FileInputStream *)((char *)this + 32), a2);
}

BOOL google::protobuf::io::FileInputStream::Skip(google::protobuf::io::FileInputStream *this, int a2)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::Skip((google::protobuf::io::FileInputStream *)((char *)this + 32), a2);
}

uint64_t google::protobuf::io::FileInputStream::ByteCount(google::protobuf::io::FileInputStream *this)
{
  return google::protobuf::io::CopyingInputStreamAdaptor::ByteCount((google::protobuf::io::FileInputStream *)((char *)this + 32));
}

void google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(google::protobuf::io::FileInputStream::CopyingFileInputStream *this)
{
  std::string *v2;
  char *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  *(_QWORD *)this = &off_24F540368;
  if (*((_BYTE *)this + 12))
  {
    if (!google::protobuf::io::FileInputStream::CopyingFileInputStream::Close(this))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 111);
      v2 = google::protobuf::internal::LogMessage::operator<<(v6, "close() failed: ");
      v3 = strerror(*((_DWORD *)this + 4));
      v4 = google::protobuf::internal::LogMessage::operator<<(v2, v3);
      google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    }
  }
}

{
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t google::protobuf::io::`anonymous namespace'::close_no_eintr(google::protobuf::io::_anonymous_namespace_ *this)
{
  int v1;
  uint64_t v2;

  v1 = (int)this;
  do
    v2 = close(v1);
  while ((v2 & 0x80000000) != 0 && *__error() == 4);
  return v2;
}

ssize_t google::protobuf::io::FileInputStream::CopyingFileInputStream::Read(google::protobuf::io::FileInputStream::CopyingFileInputStream *this, void *a2, int a3)
{
  std::string *v6;
  ssize_t v7;
  char v9;
  std::string v10[2];

  if (*((_BYTE *)this + 13))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 132);
    v6 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  while (1)
  {
    v7 = read(*((_DWORD *)this + 2), a2, a3);
    if ((v7 & 0x80000000) == 0)
      break;
    if (*__error() != 4)
    {
      *((_DWORD *)this + 4) = *__error();
      return v7;
    }
  }
  return v7;
}

void sub_22AECEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::FileInputStream::CopyingFileInputStream::Skip(google::protobuf::io::FileInputStream::CopyingFileInputStream *this, uint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*((_BYTE *)this + 13))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 148);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 20) || lseek(*((_DWORD *)this + 2), (int)a2, 1) == -1)
  {
    *((_BYTE *)this + 20) = 1;
    return google::protobuf::io::CopyingInputStream::Skip(this);
  }
  return a2;
}

void sub_22AECECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::io::FileOutputStream *google::protobuf::io::FileOutputStream::FileOutputStream(google::protobuf::io::FileOutputStream *this, int a2, int a3)
{
  *(_QWORD *)this = &off_24F540398;
  *((_QWORD *)this + 1) = &off_24F5403E0;
  *((_DWORD *)this + 4) = a2;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 6) = 0;
  google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((uint64_t)this + 32, (uint64_t)this + 8, a3);
  return this;
}

void sub_22AECED24(_Unwind_Exception *a1)
{
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream *v1;

  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::io::FileOutputStream::~FileOutputStream(google::protobuf::io::FileOutputStream *this)
{
  google::protobuf::io::CopyingOutputStreamAdaptor *v2;

  *(_QWORD *)this = &off_24F540398;
  v2 = (google::protobuf::io::FileOutputStream *)((char *)this + 32);
  google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::FileOutputStream *)((char *)this + 32));
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(v2);
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream((google::protobuf::io::FileOutputStream *)((char *)this + 8));
}

{
  google::protobuf::io::FileOutputStream::~FileOutputStream(this);
  JUMPOUT(0x22E2E9CCCLL);
}

BOOL google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Close(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this)
{
  std::string *v2;
  int v3;
  char v5;
  std::string v6[2];

  if (*((_BYTE *)this + 13))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 203);
    v2 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  *((_BYTE *)this + 13) = 1;
  if (v3)
    *((_DWORD *)this + 4) = *__error();
  return v3 == 0;
}

void sub_22AECEE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::FileOutputStream::Flush(google::protobuf::io::FileOutputStream *this)
{
  return google::protobuf::io::CopyingOutputStreamAdaptor::Flush((google::protobuf::io::FileOutputStream *)((char *)this + 32));
}

uint64_t google::protobuf::io::FileOutputStream::Next(google::protobuf::io::FileOutputStream *this, void **a2, int *a3)
{
  return google::protobuf::io::CopyingOutputStreamAdaptor::Next((google::protobuf::io::FileOutputStream *)((char *)this + 32), a2, a3);
}

void google::protobuf::io::FileOutputStream::BackUp(google::protobuf::io::FileOutputStream *this, int a2)
{
  google::protobuf::io::CopyingOutputStreamAdaptor::BackUp((google::protobuf::io::FileOutputStream *)((char *)this + 32), a2);
}

uint64_t google::protobuf::io::FileOutputStream::ByteCount(google::protobuf::io::FileOutputStream *this)
{
  return google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount((google::protobuf::io::FileOutputStream *)((char *)this + 32));
}

void google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this)
{
  std::string *v2;
  char *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  *(_QWORD *)this = &off_24F5403E0;
  if (*((_BYTE *)this + 12))
  {
    if (!google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Close(this))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 197);
      v2 = google::protobuf::internal::LogMessage::operator<<(v6, "close() failed: ");
      v3 = strerror(*((_DWORD *)this + 4));
      v4 = google::protobuf::internal::LogMessage::operator<<(v2, v3);
      google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    }
  }
}

{
  google::protobuf::io::FileOutputStream::CopyingFileOutputStream::~CopyingFileOutputStream(this);
  JUMPOUT(0x22E2E9CCCLL);
}

BOOL google::protobuf::io::FileOutputStream::CopyingFileOutputStream::Write(google::protobuf::io::FileOutputStream::CopyingFileOutputStream *this, char *a2, int a3)
{
  std::string *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int *v11;
  _BOOL8 result;
  char v13;
  std::string v14[2];

  if (*((_BYTE *)this + 13))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", 219);
    v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: !is_closed_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a3 < 1)
    return 1;
  v7 = 0;
  do
  {
    while (1)
    {
      v8 = write(*((_DWORD *)this + 2), &a2[v7], a3 - v7);
      v9 = v8;
      if (v8 < 0)
        break;
      result = v8 != 0;
      v7 += v9;
      if (v9)
        v10 = v7 < a3;
      else
        v10 = 0;
      if (!v10)
        return result;
    }
  }
  while (*__error() == 4);
  v11 = __error();
  result = 0;
  *((_DWORD *)this + 4) = *v11;
  return result;
}

void sub_22AECF03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::io::FileInputStream::~FileInputStream(google::protobuf::io::FileInputStream *this)
{
  google::protobuf::io::FileInputStream::CopyingFileInputStream *v1;

  *(_QWORD *)this = &off_24F540328;
  v1 = (google::protobuf::io::FileInputStream *)((char *)this + 8);
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::FileInputStream *)((char *)this + 32));
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(v1);
}

{
  google::protobuf::io::FileInputStream::CopyingFileInputStream *v1;

  *(_QWORD *)this = &off_24F540328;
  v1 = (google::protobuf::io::FileInputStream *)((char *)this + 8);
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::FileInputStream *)((char *)this + 32));
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  std::string *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(_QWORD *)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (!v4)
    {
      v10 = v5 - (_QWORD)a2;
      v9 = v10 + 16;
      *((_QWORD *)this + 1) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - v5;
    if ((unint64_t)a2 <= v5)
      break;
    if (*((_BYTE *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 685);
      v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 686);
      v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
    if (*((_BYTE *)this + 56))
      return 0;
  }
  memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
  v11 = *(_QWORD *)this;
  *((_QWORD *)this + 1) += a2 - ((char *)this + 16);
  v9 = v11 - (_QWORD)a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 700);
  v12 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  return v9;
}

void sub_22AECF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  std::string *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 788);
    v2 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 6))
  {
    v3 = (char *)this + 16;
    v5 = *(char **)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(_QWORD, std::string *, int *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v13, &v12) & 1) == 0)
        {
          *((_BYTE *)this + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = &v5[v6 - 16];
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 810);
        v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*(_QWORD *)this;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)this + 32;
    }
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *((_BYTE *)this + 56) = 1;
    v3 = (char *)this + 16;
LABEL_14:
    *(_QWORD *)this = (char *)this + 32;
  }
  return v3;
}

void sub_22AECF3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Trim(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  unint64_t v3;

  if (!*((_BYTE *)this + 56))
  {
    v3 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v3);
    a2 = (char *)this + 16;
    *(_QWORD *)this = (char *)this + 16;
    *((_QWORD *)this + 1) = (char *)this + 16;
  }
  return a2;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*((_BYTE *)this + 56))
  {
    v3 = &a2[-*(_QWORD *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 829);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", 830);
      v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)this)
      return a2;
  }
  return (char *)this + 16;
}

void sub_22AECF550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2, int a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int i;

  v4 = a4;
  for (i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, a4);
        a3 > i;
        i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, (char *)&v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t google::protobuf::io::EpsCopyOutputStream::GetSize(google::protobuf::io::EpsCopyOutputStream *this, unsigned __int8 *a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.h", 836);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v3 = *(_QWORD *)this;
  }
  return v3 - (_QWORD)a2 + 16;
}

void sub_22AECF690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (google::protobuf::io::EpsCopyOutputStream::GetSize(this, (unsigned __int8 *)a4) <= (int)a3)
  {
    v8 = google::protobuf::io::EpsCopyOutputStream::Trim(this, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2, a3) & 1) == 0)
    {
      *((_BYTE *)this + 56) = 1;
      v8 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 32;
    }
    return (unsigned __int8 *)v8;
  }
  if (*(_QWORD *)this - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[(int)a3];
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.h", 856);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(this, v18, v9, v17);
}

void sub_22AECF8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  uint64_t v6;

  if (*((_BYTE *)this + 57))
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, a2, a3, a4);
  if (*(_QWORD *)this - (_QWORD)a4 < (int)a3)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
  v6 = (int)a3;
  memcpy(a4, a2, (int)a3);
  return (unsigned __int8 *)&a4[v6];
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/coded_stream.h", 856);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_22AECFB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::Next(google::protobuf::internal::EpsCopyInputStream *this, unsigned int a2, int a3)
{
  google::protobuf::internal::EpsCopyInputStream *v3;
  char *v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  const char *v18;
  char *SizeFallback;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
  if (!v3)
    return v3;
  v5 = (char *)this + 40;
  if (v3 != (google::protobuf::internal::EpsCopyInputStream *)((char *)this + 40))
  {
    v6 = *((_DWORD *)this + 6);
    if (v6 <= 16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 105);
      v7 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ > kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
      v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
      v6 = *((_DWORD *)this + 6);
    }
    *((_QWORD *)this + 1) = (char *)v3 + v6 - 16;
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)this + 9) == 1)
      *((_QWORD *)this + 9) = 2;
    return v3;
  }
  *(_OWORD *)v3 = *(_OWORD *)*((_QWORD *)this + 1);
  if (*((int *)this + 21) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 53);
    v11 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun >= 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
LABEL_14:
    v12 = (unsigned __int8 *)this + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if (v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = google::protobuf::internal::VarintParse<unsigned long long>((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = (const char *)*v14;
            if ((char)*v14 < 0)
            {
              SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v14, v18);
              if (!SizeFallback)
                goto LABEL_39;
            }
            else
            {
              SizeFallback = (char *)(v14 + 1);
            }
            if (v12 - (unsigned __int8 *)SizeFallback < (int)v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)&SizeFallback[(int)v18];
LABEL_38:
            v13 = v14;
            if (v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 54);
    v10 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun <= kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24))
  {
LABEL_45:
    *((_DWORD *)this + 21) = 0;
LABEL_46:
    if (*((_QWORD *)this + 9) == 2)
      *((_QWORD *)this + 9) = *((_QWORD *)this + 1) - (_QWORD)v3;
    *((_QWORD *)this + 1) = (char *)this + 56;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *((unsigned int *)this + 6);
    *((_DWORD *)this + 21) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *((_QWORD *)this + 9);
      v26 = (_QWORD *)((char *)this + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 137);
      v22 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ == 0: ");
      v23 = google::protobuf::internal::LogMessage::operator<<(v22, *((_DWORD *)this + 6));
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    if (((*(uint64_t (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((char *)this + 56, __src, v21);
  v30 = *((_QWORD *)this + 9);
  v26 = (_QWORD *)((char *)this + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_22AECFEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const char *google::protobuf::internal::EpsCopyInputStream::DoneFallback(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, int a3)
{
  const char *v4;
  std::string *v6;
  signed int v7;
  std::string *v8;
  int v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  google::protobuf::internal::EpsCopyInputStream *v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  char v21;
  std::string v22[2];

  v4 = a2;
  if (*(_QWORD *)this > (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 159);
    v6 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: ptr >= limit_end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v7 = (_DWORD)v4 - *((_DWORD *)this + 2);
  if (v7 >= 17)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 161);
    v8 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: overrun <= kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v9 = *((_DWORD *)this + 7);
  if (v9 < v7)
    return 0;
  if (v9 == v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 164);
    v10 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: overrun != limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    v9 = *((_DWORD *)this + 7);
  }
  if (v9 <= v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 165);
    v11 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: overrun < limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    v9 = *((_DWORD *)this + 7);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1) + (v9 & (v9 >> 31)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 170);
    v12 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v12->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    v9 = *((_DWORD *)this + 7);
  }
  if (v9 <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 172);
    v13 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 173);
    v14 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: limit_end_ == buffer_end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v14->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  while (1)
  {
    if (v7 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 176);
      v15 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    }
    v16 = google::protobuf::internal::EpsCopyInputStream::Next(this, v7, a3);
    if (!v16)
      break;
    v17 = *((_QWORD *)this + 1);
    v18 = *((_DWORD *)this + 7) + (_DWORD)v16 - v17;
    *((_DWORD *)this + 7) = v18;
    v4 = (char *)v16 + v7;
    v7 = (_DWORD)v4 - v17;
    if ((int)v4 - (int)v17 < 0)
    {
      *(_QWORD *)this = v17 + (v18 & (v18 >> 31));
      return v4;
    }
  }
  if (v7)
    return 0;
  if (*((int *)this + 7) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.cc", 181);
    v19 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  *(_QWORD *)this = *((_QWORD *)this + 1);
  *((_DWORD *)this + 20) = 1;
  return v4;
}

void sub_22AED0238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const char *google::protobuf::internal::EpsCopyInputStream::SkipFallback(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, int a3)
{
  const char *v4;
  int v6;
  std::string *v7;
  const char *v8;
  char v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  v4 = a2;
  v6 = *((_DWORD *)this + 2) - (_DWORD)a2 + 16;
  while (1)
  {
    if (a3 <= v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.h", 293);
      v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    if (*((_DWORD *)this + 7) == 16)
      break;
    v8 = google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, &v4[v6], -1);
    if ((v9 & 1) != 0)
      break;
    v4 = v8;
    v10 = a3 - (uint64_t)v6;
    v6 = *((_DWORD *)this + 2) - (_DWORD)v8 + 16;
    a3 = v10;
    if ((int)v10 <= v6)
      return &v8[v10];
  }
  return 0;
}

void sub_22AED0378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + *(int *)(a1 + 28) >= a3)
    std::string::reserve(this, a3);
  return google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(a1, __s, a3, this);
}

const std::string::value_type *google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  int v9;
  std::string *v10;
  const char *v11;
  char v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    std::string::reserve(this, a3);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v9 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    if (v5 <= v9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.h", 293);
      v10 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    std::string::append(this, v6, v9);
    if (*(_DWORD *)(a1 + 28) == 16)
      break;
    v11 = google::protobuf::internal::EpsCopyInputStream::DoneFallback((google::protobuf::internal::EpsCopyInputStream *)a1, &v6[v9], -1);
    if ((v12 & 1) != 0)
      break;
    v6 = v11;
    v13 = v5 - (uint64_t)v9;
    v9 = *(_DWORD *)(a1 + 8) - (_DWORD)v11 + 16;
    v5 = v13;
    if ((int)v13 <= v9)
    {
      std::string::append(this, v11, v13);
      return &v6[v13];
    }
  }
  return 0;
}

void sub_22AED0550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::EpsCopyInputStream::InitFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int v7;
  void *__src;

  *(_QWORD *)(a1 + 32) = a2;
  __src = 0;
  v7 = 0;
  *(_DWORD *)(a1 + 28) = 0x7FFFFFFF;
  if ((*(unsigned int (**)(uint64_t, void **, unsigned int *))(*(_QWORD *)a2 + 16))(a2, &__src, &v7))
  {
    v3 = v7;
    *(_DWORD *)(a1 + 84) -= v7;
    if ((int)v3 < 17)
    {
      *(_QWORD *)a1 = a1 + 56;
      *(_QWORD *)(a1 + 8) = a1 + 56;
      *(_QWORD *)(a1 + 16) = a1 + 40;
      v4 = (void *)(a1 - (int)v3 + 72);
      memcpy(v4, __src, (int)v3);
    }
    else
    {
      v4 = __src;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) - v3 + 16;
      v5 = (uint64_t)v4 + v3 - 16;
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = a1 + 40;
      if (*(_QWORD *)(a1 + 72) == 1)
        *(_QWORD *)(a1 + 72) = 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 84) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v4 = (void *)(a1 + 40);
    *(_QWORD *)(a1 + 8) = a1 + 40;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = a1 + 40;
  }
  return v4;
}

uint64_t google::protobuf::internal::VarintParseSlow64(google::protobuf::internal *this, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t google::protobuf::internal::ReadTagFallback(google::protobuf::internal *this, const char *a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    LODWORD(a2) = ((v6 - 1) << (v5 + 35)) + (_DWORD)a2;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

char *google::protobuf::internal::ReadSizeFallback(google::protobuf::internal *this, const char *a2)
{
  char *result;
  uint64_t v4;
  unsigned int v5;
  char *v6;

  result = (char *)this + 2;
  v4 = -21;
  while (1)
  {
    LODWORD(a2) = ((*(result - 1) - 1) << (v4 + 28)) + (_DWORD)a2;
    if ((*(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *((unsigned __int8 *)this + 4);
      v6 = (char *)this + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

char *google::protobuf::internal::InlineGreedyStringParser(std::string *a1, std::string::value_type *this, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  char *result;
  int v8;

  v5 = *this;
  if (*this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadString(a3, v6, v5, a1);
}

char *google::protobuf::internal::PackedInt32Parser(int *a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *a3)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(a3, a2, a1);
}

char *google::protobuf::internal::WireFormatParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(int a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char *v5;
  int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v10, *((_DWORD *)this + 23)) & 1) != 0)return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(v6, a1, (google::protobuf::internal *)v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)this + 20) = v6 - 1;
  return v5;
}

unsigned __int8 *google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(unint64_t a1, std::string **a2, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  char *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)this;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = google::protobuf::internal::VarintParse<unsigned long long>((char *)this, v11);
      if (v5)
        google::protobuf::internal::UnknownFieldLiteParserHelper::AddVarint(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)this + 8;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed64((std::string *)a2, v4, *(_QWORD *)this);
      return v5;
    case 2uLL:
      v8 = google::protobuf::internal::UnknownFieldLiteParserHelper::ParseLengthDelimited(a2, v4, (std::string::value_type *)this, a4);
      goto LABEL_10;
    case 3uLL:
      v8 = google::protobuf::internal::UnknownFieldLiteParserHelper::ParseGroup(a2, v4, (char *)this, (int32x2_t *)a4);
LABEL_10:
      v5 = (unsigned __int8 *)v8;
      break;
    case 4uLL:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.h", 695);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "Can't happen");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)this + 4;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed32((std::string *)a2, v4, *(_DWORD *)this);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_22AED09D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::UnknownFieldParse(unsigned int a1, uint64_t *a2, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a4)
{
  std::string *v7;
  std::string *v9;

  if ((*a2 & 1) != 0)
    v7 = (std::string *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  else
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a2);
  v9 = v7;
  return google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(a1, &v9, this, a4);
}

unsigned __int8 *google::protobuf::internal::VarintParse<unsigned long long>(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

uint64_t google::protobuf::internal::EpsCopyInputStream::PushLimit(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, unsigned int a3)
{
  int v4;
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  v4 = (int)a2;
  if (a3 >= 0x7FFFFFF0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/parse_context.h", 127);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v7 = *((_QWORD *)this + 1);
  v8 = v4 - v7 + a3;
  *(_QWORD *)this = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v8;
  return (v7 - v8);
}

void sub_22AED0B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(google::protobuf::internal::EpsCopyInputStream *this, google::protobuf::internal *a2, int *a3)
{
  unsigned int v5;
  const char *v6;
  char *result;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = *(unsigned __int8 *)a2;
  if (*(char *)a2 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a2, (const char *)*(unsigned __int8 *)a2);
    v16 = result;
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)a2 + 1;
    v16 = (char *)a2 + 1;
  }
  v9 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v6, v5);
  if (v9 < 0)
    return 0;
  v10 = v9;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v16, -1) & 1) != 0)
  {
LABEL_11:
    if (*((_DWORD *)this + 20))
    {
      return 0;
    }
    else
    {
      v14 = *((_DWORD *)this + 7) + v10;
      *((_DWORD *)this + 7) = v14;
      *(_QWORD *)this = *((_QWORD *)this + 1) + (v14 & (v14 >> 31));
      return v16;
    }
  }
  else
  {
    while (1)
    {
      v15 = 0;
      result = (char *)google::protobuf::internal::VarintParse<unsigned long long>(v16, &v15);
      v16 = result;
      if (!result)
        break;
      v11 = v15;
      if (*a3 == a3[1])
        google::protobuf::RepeatedField<int>::Reserve(a3, *a3 + 1);
      v12 = google::protobuf::RepeatedField<int>::elements((uint64_t)a3);
      v13 = *a3;
      *a3 = v13 + 1;
      *(_DWORD *)(v12 + 4 * v13) = v11;
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v16, -1))
        goto LABEL_11;
    }
  }
  return result;
}

void google::protobuf::internal::UnknownFieldLiteParserHelper::AddVarint(std::string **this, int a2, unint64_t a3)
{
  std::string *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *this;
  if (*this)
  {
    v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9 = *this;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        v10 = a3 >> 7;
        v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed64(std::string *this, int a2, uint64_t a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)this;
    v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return this;
}

char *google::protobuf::internal::UnknownFieldLiteParserHelper::ParseLengthDelimited(std::string **a1, int a2, std::string::value_type *this, google::protobuf::internal::EpsCopyInputStream *a4)
{
  int v7;
  std::string::value_type *v8;
  char *result;
  int v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *this;
  if (*this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = this + 1;
  }
  v11 = *a1;
  if (*a1)
  {
    v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        v13 = v12 >> 7;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    v15 = v7;
    v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        v17 = v15 >> 7;
        v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    return (char *)google::protobuf::internal::EpsCopyInputStream::AppendString((uint64_t)a4, v8, v7, *a1);
  }
  else if (*((_QWORD *)a4 + 1) - (_QWORD)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (char *)google::protobuf::internal::EpsCopyInputStream::SkipFallback(a4, v8, v7);
  }
}

char *google::protobuf::internal::UnknownFieldLiteParserHelper::ParseGroup(std::string **a1, int a2, char *a3, int32x2_t *this)
{
  std::string *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  __int32 v15;
  char *v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = *a1;
  v8 = 8 * a2;
  if (*a1)
  {
    v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        v10 = v9 >> 7;
        v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  v12 = this[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  this[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  ++this[11].i32[1];
  v14 = google::protobuf::internal::WireFormatParser<google::protobuf::internal::UnknownFieldLiteParserHelper>((int)a1, a3, (google::protobuf::internal::EpsCopyInputStream *)this);
  this[11] = vadd_s32(this[11], (int32x2_t)0xFFFFFFFF00000001);
  v15 = this[10].i32[0];
  this[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0)
    return 0;
  v17 = v14;
  v18 = *a1;
  if (v18)
  {
    v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        v20 = v19 >> 7;
        v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed32(std::string *this, int a2, int a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string::value_type __s[4];

  v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (this->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)this;
    v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return this;
}

const std::string::value_type *google::protobuf::internal::EpsCopyInputStream::AppendString(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(a1, __s, a3, this);
  v6 = a3;
  std::string::append(this, __s, a3);
  return &__s[v6];
}

uint64_t google::protobuf::internal::WireFormatLite::Int32Size(int *a1)
{
  int v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *a1;
  if (*a1 < 1)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    v5 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(a1, v3);
    if (v5 < 0)
      v6 = 10;
    else
      v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    v4 += v6;
    ++v3;
  }
  while (v1 != v3);
  return v4;
}

uint64_t google::protobuf::io::CopyingInputStream::Skip(google::protobuf::io::CopyingInputStream *this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  int v10;
  _BYTE v12[4096];
  uint64_t v13;

  v1 = MEMORY[0x24BDAC7A8](this);
  v3 = v2;
  v4 = v1;
  v5 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  do
  {
    v6 = v5;
    v7 = __OFSUB__(v3, (_DWORD)v5);
    v8 = v3 - v5;
    if ((v8 < 0) ^ v7 | (v8 == 0))
      break;
    v9 = v8 >= 4096 ? 4096 : v8;
    v10 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v12, v9);
    v5 = (v10 + v6);
  }
  while (v10 > 0);
  return v6;
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  *(_QWORD *)result = &off_24F540488;
  *(_QWORD *)(result + 8) = a2;
  *(_WORD *)(result + 16) = 0;
  if (a3 <= 0)
    v3 = 0x2000;
  else
    v3 = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 40) = v3;
  return result;
}

void google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F540488;
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    MEMORY[0x22E2E9CB4](v3, 0x1000C8077774924);
}

{
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::Next(google::protobuf::io::CopyingInputStreamAdaptor *this, const void **a2, int *a3)
{
  uint64_t v7;
  int v8;
  const void *v9;

  if (*((_BYTE *)this + 17))
    return 0;
  google::protobuf::io::CopyingInputStreamAdaptor::AllocateBufferIfNeeded((uint64_t)this);
  v7 = *((unsigned int *)this + 12);
  if ((int)v7 < 1)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4), *((unsigned int *)this + 10));
    *((_DWORD *)this + 11) = v8;
    if (v8 <= 0)
    {
      if (v8 < 0)
        *((_BYTE *)this + 17) = 1;
      google::protobuf::io::CopyingInputStreamAdaptor::FreeBuffer(this);
      return 0;
    }
    v9 = (const void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 3) += v8;
    *a3 = v8;
    *a2 = v9;
  }
  else
  {
    *a2 = (const void *)(*((_QWORD *)this + 4) + *((int *)this + 11) - v7);
    *a3 = v7;
    *((_DWORD *)this + 12) = 0;
  }
  return 1;
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::AllocateBufferIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (!*(_QWORD *)(this + 32))
  {
    v1 = this;
    v2 = operator new[]();
    this = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v2;
    if (this)
      JUMPOUT(0x22E2E9CB4);
  }
  return this;
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::FreeBuffer(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  std::string *v2;
  uint64_t result;
  char v4;
  std::string v5[2];

  if (*((_DWORD *)this + 12))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 296);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (backup_bytes_) == (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 11) = 0;
  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
    return MEMORY[0x22E2E9CB4](result, 0x1000C8077774924);
  return result;
}

void sub_22AED1518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::io::CopyingInputStreamAdaptor::BackUp(google::protobuf::io::CopyingInputStreamAdaptor *this, int a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (*((_DWORD *)this + 12) || !*((_QWORD *)this + 4))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 252);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: backup_bytes_ == 0 && buffer_.get() != NULL: ");
    v5 = google::protobuf::internal::LogMessage::operator<<(v4, " BackUp() can only be called after Next().");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 11) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 254);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) <= (buffer_used_): ");
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, " Can't back up over more bytes than were returned by the last call to Next().");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 257);
    v8 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) >= (0): ");
    v9 = google::protobuf::internal::LogMessage::operator<<(v8, " Parameter to BackUp() can't be negative.");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 12) = a2;
}

void sub_22AED1658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::io::CopyingInputStreamAdaptor::Skip(google::protobuf::io::CopyingInputStreamAdaptor *this, int a2)
{
  std::string *v4;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  std::string v10[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 263);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (*((_BYTE *)this + 17))
    return 0;
  v6 = *((_DWORD *)this + 12);
  if (v6 >= a2)
  {
    *((_DWORD *)this + 12) = v6 - a2;
    return 1;
  }
  else
  {
    v7 = (a2 - v6);
    *((_DWORD *)this + 12) = 0;
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v7);
    *((_QWORD *)this + 3) += v8;
    return v8 == (_DWORD)v7;
  }
}

void sub_22AED1740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CopyingInputStreamAdaptor::ByteCount(google::protobuf::io::CopyingInputStreamAdaptor *this)
{
  return *((_QWORD *)this + 3) - *((int *)this + 12);
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  *(_QWORD *)result = &off_24F5404C8;
  *(_QWORD *)(result + 8) = a2;
  *(_WORD *)(result + 16) = 0;
  if (a3 <= 0)
    v3 = 0x2000;
  else
    v3 = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = v3;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F5404C8;
  google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this);
  if (*((_BYTE *)this + 16))
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    MEMORY[0x22E2E9CB4](v3, 0x1000C8077774924);
}

{
  google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 17))
    return 0;
  if (!*((_DWORD *)this + 11))
    return 1;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((_QWORD *)this + 4)))
  {
    *((_QWORD *)this + 3) += *((int *)this + 11);
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  *((_BYTE *)this + 17) = 1;
  *((_DWORD *)this + 11) = 0;
  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    MEMORY[0x22E2E9CB4](result, 0x1000C8077774924);
    return 0;
  }
  return result;
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::Next(google::protobuf::io::CopyingOutputStreamAdaptor *this, void **a2, int *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  if (*((_DWORD *)this + 11) != *((_DWORD *)this + 10)
    || (result = google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this), (_DWORD)result))
  {
    google::protobuf::io::CopyingInputStreamAdaptor::AllocateBufferIfNeeded((uint64_t)this);
    v7 = *((_DWORD *)this + 10);
    v8 = *((int *)this + 11);
    *a2 = (void *)(*((_QWORD *)this + 4) + v8);
    *a3 = v7 - v8;
    *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
    return 1;
  }
  return result;
}

void google::protobuf::io::CopyingOutputStreamAdaptor::BackUp(google::protobuf::io::CopyingOutputStreamAdaptor *this, int a2)
{
  std::string *v4;
  int v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 335);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_DWORD *)this + 11);
  if (v5 != *((_DWORD *)this + 10))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 336);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (buffer_used_) == (buffer_size_): ");
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, " BackUp() can only be called after Next().");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v5 = *((_DWORD *)this + 11);
  }
  if (v5 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 338);
    v8 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) <= (buffer_used_): ");
    v9 = google::protobuf::internal::LogMessage::operator<<(v8, " Can't back up over more bytes than were returned by the last call to Next().");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v5 = *((_DWORD *)this + 11);
  }
  *((_DWORD *)this + 11) = v5 - a2;
}

void sub_22AED1A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount(google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  return *((_QWORD *)this + 3) + *((int *)this + 11);
}

_QWORD *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  unsigned __int8 v1;
  pthread_key_t *v3;

  if ((v1 & 1) == 0
  {
    v3 = (pthread_key_t *)operator new();
    pthread_key_create(v3, (void (__cdecl *)(void *))google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete);
    google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_ = (uint64_t)v3;
  }
  return google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get((pthread_key_t *)google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_);
}

void sub_22AED1B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = (_QWORD *)operator new();
    *v2 = -1;
    v2[1] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

_QWORD *google::protobuf::internal::ArenaImpl::SerialArena::New(google::protobuf::internal::ArenaImpl::SerialArena *this, google::protobuf::internal::ArenaImpl::Block *a2, void *a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  if (*((_QWORD *)this + 1) != 24)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena.cc", 349);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (b->pos()) == (kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 2) <= 0x5FuLL)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena.cc", 350);
    v8 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (kBlockHeaderSize + kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v9 = (_QWORD *)google::protobuf::internal::ArenaImpl::Block::Pointer(this, 0x18uLL);
  *((_QWORD *)this + 1) = 96;
  *v9 = a3;
  v9[1] = a2;
  v9[2] = this;
  v9[5] = google::protobuf::internal::ArenaImpl::Block::Pointer(this, 0x60uLL);
  v10 = google::protobuf::internal::ArenaImpl::Block::Pointer(this, *((_QWORD *)this + 2));
  v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_22AED1CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *google::protobuf::internal::ArenaImpl::NewBlock(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  _QWORD *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a1 + 48) >= (unint64_t)(2 * v6))
      v7 = 2 * v6;
    else
      v7 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena.cc", 118);
    v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  result = (_QWORD *)(*(uint64_t (**)(unint64_t))(a1 + 72))(v9);
  *result = a2;
  result[1] = 24;
  result[2] = v9;
  v11 = (unint64_t *)(a1 + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_22AED1DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(google::protobuf::internal::ArenaImpl::SerialArena *this, void *a2, void (*a3)(void *))
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)*((_QWORD *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    result = (_QWORD *)google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(this, (16 * (_WORD)v7 + 23) & 0xFF0);
    v8 = *((_QWORD *)this + 3);
    *result = v7;
    result[1] = v8;
    *((_QWORD *)this + 3) = result;
    *((_QWORD *)this + 7) = result + 2;
    *((_QWORD *)this + 8) = &result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  *((_QWORD *)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(google::protobuf::internal::ArenaImpl::SerialArena *this, unint64_t a2)
{
  std::string *v4;
  unint64_t result;
  unint64_t v6;
  std::string *v7;
  char v8;
  std::string v9[2];

  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena_impl.h", 160);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v6 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena_impl.h", 161);
    v7 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    result = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 - result < a2)
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedFallback(this, a2);
  *((_QWORD *)this + 5) = result + a2;
  return result;
}

void sub_22AED1F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAligned(google::protobuf::internal::ArenaImpl *this, unint64_t a2)
{
  _QWORD *v4;
  google::protobuf::internal::ArenaImpl::SerialArena *v5;

  v4 = google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*v4 == *((_QWORD *)this + 4))
  {
    v5 = (google::protobuf::internal::ArenaImpl::SerialArena *)v4[1];
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(v5, a2);
  }
  v5 = (google::protobuf::internal::ArenaImpl::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v5 && *((_QWORD **)v5 + 1) == v4)
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(v5, a2);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(this, a2);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, unint64_t a2)
{
  google::protobuf::internal::ArenaImpl *SerialArena;

  SerialArena = google::protobuf::internal::ArenaImpl::GetSerialArena(this);
  return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(SerialArena, a2);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl *this, unint64_t a2, void (*a3)(void *))
{
  _QWORD *v6;
  google::protobuf::internal::ArenaImpl::SerialArena *v7;

  v6 = google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*v6 == *((_QWORD *)this + 4))
  {
    v7 = (google::protobuf::internal::ArenaImpl::SerialArena *)v6[1];
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedAndAddCleanup(v7, a2, a3);
  }
  v7 = (google::protobuf::internal::ArenaImpl::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v7 && *((_QWORD **)v7 + 1) == v6)
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedAndAddCleanup(v7, a2, a3);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(this, a2, a3);
}

void *google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl::SerialArena *this, unint64_t a2, void (*a3)(void *))
{
  void *Aligned;
  void *v6;
  _QWORD *v7;

  Aligned = (void *)google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(this, a2);
  v6 = Aligned;
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  if (v7 == *((_QWORD **)this + 8))
  {
    google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(this, Aligned, a3);
  }
  else
  {
    *v7 = Aligned;
    v7[1] = a3;
    *((_QWORD *)this + 7) = v7 + 2;
  }
  return v6;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, unint64_t a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *SerialArena;

  SerialArena = google::protobuf::internal::ArenaImpl::GetSerialArena(this);
  return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedAndAddCleanup(SerialArena, a2, a3);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArena(google::protobuf::internal::ArenaImpl *this)
{
  google::protobuf::internal::ArenaImpl *v2;
  unint64_t v3;
  google::protobuf::internal::ArenaImpl::Block *v5;

  v2 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v2 == *((_QWORD *)this + 4))
    return (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v2 + 1);
  v3 = atomic_load((unint64_t *)this + 1);
  if (v3 && *(google::protobuf::internal::ArenaImpl **)(v3 + 8) == v2)
    return (google::protobuf::internal::ArenaImpl *)v3;
  v5 = (google::protobuf::internal::ArenaImpl::Block *)google::protobuf::internal::ArenaImpl::thread_cache(v2);
  return google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v5);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::ArenaImpl::Block *a2)
{
  unint64_t *v3;
  google::protobuf::internal::ArenaImpl *v4;
  uint64_t v5;
  google::protobuf::internal::ArenaImpl::SerialArena *v6;
  google::protobuf::internal::ArenaImpl *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  google::protobuf::internal::ArenaImpl *v14;
  unint64_t v15;

  v3 = (unint64_t *)this;
  v4 = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this);
  if (!v4)
  {
LABEL_4:
    if (*((_QWORD *)this + 5) <= 0x60uLL)
      v5 = 96;
    else
      v5 = *((_QWORD *)this + 5);
    v6 = (google::protobuf::internal::ArenaImpl::SerialArena *)(*((uint64_t (**)(uint64_t))this + 9))(v5);
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 24;
    *((_QWORD *)v6 + 2) = v5;
    v8 = v3 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + v5, v8));
    this = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SerialArena::New(v6, a2, v3, v7);
    v4 = this;
    v10 = *v3;
    *((_QWORD *)this + 4) = *v3;
    v11 = __ldxr(v3);
    if (v11 == v10)
    {
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_13;
      goto LABEL_19;
    }
    __clrex();
LABEL_13:
    while (1)
    {
      *((_QWORD *)this + 4) = v11;
      v12 = __ldxr(v3);
      if (v12 != v11)
        break;
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_17;
      v13 = 1;
LABEL_18:
      v11 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_19;
    }
    __clrex();
LABEL_17:
    v13 = 0;
    goto LABEL_18;
  }
  while (*((google::protobuf::internal::ArenaImpl::Block **)v4 + 1) != a2)
  {
    v4 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 4);
    if (!v4)
      goto LABEL_4;
  }
LABEL_19:
  v14 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  *((_QWORD *)v14 + 1) = v4;
  v15 = v3[4];
  *google::protobuf::internal::ArenaImpl::thread_cache(v14) = v15;
  atomic_store((unint64_t)v4, v3 + 1);
  return v4;
}

uint64_t google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl::SerialArena *this, unint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;

  v4 = *((_QWORD *)this + 2);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 16) - *((_QWORD *)this + 6) + *((_QWORD *)this + 5);
  v5 = google::protobuf::internal::ArenaImpl::NewBlock(*(_QWORD *)this, v4, a2);
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 5) = google::protobuf::internal::ArenaImpl::Block::Pointer((google::protobuf::internal::ArenaImpl::Block *)v5, v5[1]);
  *((_QWORD *)this + 6) = google::protobuf::internal::ArenaImpl::Block::Pointer(*((google::protobuf::internal::ArenaImpl::Block **)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(this, a2);
}

uint64_t google::protobuf::internal::ArenaImpl::Block::Pointer(google::protobuf::internal::ArenaImpl::Block *this, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*((_QWORD *)this + 2) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arena_impl.h", 222);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return (uint64_t)this + a2;
}

void sub_22AED23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ArenaImpl::SpaceAllocated(google::protobuf::internal::ArenaImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t google::protobuf::Arena::OnArenaAllocation(uint64_t this, const std::type_info *a2, uint64_t a3)
{
  uint64_t (*v3)(const std::type_info *, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(const std::type_info *, uint64_t, _QWORD))(this + 88);
  if (v3)
    return v3(a2, a3, *(_QWORD *)(this + 112));
  return this;
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x22E2E9CCCLL);
  return result;
}

uint64_t google::protobuf::internal::DestroyMessage(google::protobuf::internal *this, const void *a2)
{
  return (**(uint64_t (***)(google::protobuf::internal *))this)(this);
}

void google::protobuf::internal::DestroyString(void **this, const void *a2)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void google::protobuf::internal::InitProtobufDefaults(google::protobuf::internal *this)
{
  unsigned __int8 v1;
  const void *v2;

  if ((v1 & 1) == 0)
  {
    {
      google::protobuf::internal::fixed_address_empty_string = 0;
      *(_QWORD *)algn_255B582A8 = 0;
      qword_255B582B0 = 0;
      google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyString, (void (*)(const void *))&google::protobuf::internal::fixed_address_empty_string, v2);
    }
  }
}

void sub_22AED24C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void google::protobuf::internal::InitSCCImpl(_DWORD *a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu, &dword_22AEC9000);
  }
  v3 = (google::protobuf::internal *)pthread_self();
  v4 = (uint64_t)v3;
  if (google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
  {
    if (v3
      && v3 == (google::protobuf::internal *)google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
    {
      goto LABEL_5;
    }
LABEL_9:
    google::protobuf::internal::InitProtobufDefaults(v3);
    std::mutex::lock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
    google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = v4;
    google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = 0;
    std::mutex::unlock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
    return;
  }
  if (v3)
    goto LABEL_9;
LABEL_5:
  if (*a1 != 1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/generated_message_util.cc", 812);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
}

void sub_22AED25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *google::protobuf::internal::`anonymous namespace'::InitSCC_DFS(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

BOOL google::protobuf::internal::MergePartialFromImpl<false>(uint64_t a1, uint64_t a2)
{
  void *v3;
  _BYTE v6[32];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0x7FFFFFFF00000000;
  v11 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v12 = 0x80000000;
  v13 = 0;
  v14 = 0;
  v3 = google::protobuf::internal::EpsCopyInputStream::InitFrom((uint64_t)v6, a1);
  return (*(uint64_t (**)(uint64_t, void *, _BYTE *))(*(_QWORD *)a2 + 104))(a2, v3, v6) && (_DWORD)v10 == 1;
}

_QWORD *google::protobuf::MessageLite::InitializationErrorString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

void google::protobuf::MessageLite::LogInitializationErrorMessage(google::protobuf::MessageLite *this)
{
  std::string *v2;
  char v3;
  std::string __p;
  std::string v5[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/message_lite.cc", 122);
  v2 = google::protobuf::internal::LogMessage::operator<<(v5, (const std::string::value_type *)&__p);
  google::protobuf::internal::LogFinisher::operator=((int)&v3, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
}

void sub_22AED2808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

void google::protobuf::`anonymous namespace'::InitializationErrorMessage(const std::string::value_type *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  void *__p;
  std::string::size_type v12;
  unsigned __int8 v13;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, this);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v12;
  std::string::append(a3, p_p, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 72))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    v9 = (const std::string::value_type *)&__p;
  else
    v9 = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = v12;
  std::string::append(a3, v9, v10);
  if ((char)v13 < 0)
    operator delete(__p);
}

void sub_22AED2940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::MessageLite::ParseFrom<(google::protobuf::MessageLite::ParseFlags)1,google::protobuf::io::ZeroCopyInputStream *>(google::protobuf::MessageLite *a1, uint64_t *a2)
{
  _BOOL8 result;

  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)a1 + 56))(a1);
  result = google::protobuf::internal::MergePartialFromImpl<false>(*a2, (uint64_t)a1);
  if (result)
  {
    if (((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)a1 + 64))(a1) & 1) != 0)
    {
      return 1;
    }
    else
    {
      google::protobuf::MessageLite::LogInitializationErrorMessage(a1);
      return 0;
    }
  }
  return result;
}

BOOL google::protobuf::MessageLite::ParseFromFileDescriptor(google::protobuf::MessageLite *this, int a2)
{
  _BOOL4 v3;
  _BOOL8 v4;
  void (**v6)(google::protobuf::io::FileInputStream *__hidden);
  _DWORD v7[6];
  uint64_t v8;
  void (***v9)(google::protobuf::io::FileInputStream *__hidden);

  google::protobuf::io::FileInputStream::FileInputStream((google::protobuf::io::FileInputStream *)&v6, a2, -1);
  v9 = &v6;
  v3 = google::protobuf::MessageLite::ParseFrom<(google::protobuf::MessageLite::ParseFlags)1,google::protobuf::io::ZeroCopyInputStream *>(this, (uint64_t *)&v9);
  if (v7[4])
    v4 = 0;
  else
    v4 = v3;
  v6 = &off_24F540328;
  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::CopyingInputStreamAdaptor *)&v8);
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream::CopyingFileInputStream *)v7);
  return v4;
}

void sub_22AED2A64(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((google::protobuf::io::CopyingInputStreamAdaptor *)(v1 + 32));
  google::protobuf::io::FileInputStream::CopyingFileInputStream::~CopyingFileInputStream((google::protobuf::io::FileInputStream::CopyingFileInputStream *)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializeToZeroCopyStream(google::protobuf::MessageLite *this, google::protobuf::io::ZeroCopyOutputStream *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 64))(this) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/message_lite.cc", 370);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: IsInitialized(): ");
    v5 = google::protobuf::internal::LogMessage::operator<<(v4, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::MessageLite::SerializePartialToZeroCopyStream(this, a2);
}

void sub_22AED2B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializePartialToZeroCopyStream(google::protobuf::MessageLite *this, google::protobuf::io::ZeroCopyOutputStream *a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  char *v10;
  char v11;
  void *__p[2];
  char v13;
  std::string v14[2];
  google::protobuf::io::ZeroCopyOutputStream *v15;
  __int16 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 88))(this);
  if (v4 >> 31)
  {
    v5 = v4;
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/message_lite.cc", 378);
    (*(void (**)(void **__return_ptr, google::protobuf::MessageLite *))(*(_QWORD *)this + 16))(__p, this);
    v6 = google::protobuf::internal::LogMessage::operator<<(v14, (const std::string::value_type *)__p);
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, " exceeded maximum protobuf size of 2GB: ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, v5);
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(__p[0]);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    return 0;
  }
  else
  {
    v14[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v14[0].__r_.__value_.__r.__words[2];
    v14[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v14[0].__r_.__value_.__r.__words[2];
    v15 = a2;
    v16 = 0;
    v17 = google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ & 1;
    v10 = (char *)(*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 112))(this);
    google::protobuf::io::EpsCopyOutputStream::Trim((google::protobuf::io::EpsCopyOutputStream *)v14, v10);
    return (_BYTE)v16 == 0;
  }
}

void sub_22AED2CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a17);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MessageLite::SerializeToFileDescriptor(google::protobuf::MessageLite *this, int a2)
{
  uint64_t v3;
  _BYTE v5[80];

  google::protobuf::io::FileOutputStream::FileOutputStream((google::protobuf::io::FileOutputStream *)v5, a2, -1);
  if (google::protobuf::MessageLite::SerializeToZeroCopyStream(this, (google::protobuf::io::ZeroCopyOutputStream *)v5))
    v3 = google::protobuf::io::FileOutputStream::Flush((google::protobuf::io::FileOutputStream *)v5);
  else
    v3 = 0;
  google::protobuf::io::FileOutputStream::~FileOutputStream((google::protobuf::io::FileOutputStream *)v5);
  return v3;
}

void sub_22AED2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::protobuf::io::FileOutputStream::~FileOutputStream((google::protobuf::io::FileOutputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::MessageLite::GetArena(google::protobuf::MessageLite *this)
{
  return 0;
}

void YAML::Clone(YAML *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE v7[112];
  _BYTE v8[8];
  std::__shared_weak_count *v9;
  _QWORD *v10[3];

  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)v8, this);
  YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v7);
  YAML::NodeEvents::Emit((YAML::NodeEvents *)v8, (uint64_t)v7);
  YAML::NodeBuilder::Root((YAML::NodeBuilder *)v7, a2);
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v7);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((uint64_t)v10, v10[1]);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_22AED2E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  YAML::NodeEvents::~NodeEvents((YAML::NodeEvents *)(v1 - 64));
  _Unwind_Resume(a1);
}

void YAML::NodeEvents::~NodeEvents(YAML::NodeEvents *this)
{
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

double siri::intelligence::Character::Character(siri::intelligence::Character *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void siri::intelligence::Character::GetId(siri::intelligence::Character *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

std::string *siri::intelligence::Character::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::intelligence::Character::GetName(siri::intelligence::Character *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::intelligence::Character::SetTtsVoiceName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::intelligence::Character::GetTtsVoiceName(siri::intelligence::Character *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void sub_22AED3064(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x22E2E9CCC](v3, 0x20C40A4A59CD2);

  _Unwind_Resume(a1);
}

void sub_22AED33EC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 40);
  *(_QWORD *)(v2 - 48) = &off_24F543888;
  *(_QWORD *)(v2 - 40) = 0;
  if (v4)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v2 - 40, v4);

  _Unwind_Resume(a1);
}

siri::intelligence::Timer *__copy_helper_block_ea8_32c31_ZTSN4siri12intelligence5TimerE(uint64_t a1, uint64_t a2)
{
  return siri::intelligence::Timer::Timer((siri::intelligence::Timer *)(a1 + 32), (const std::string **)(a2 + 32));
}

void __destroy_helper_block_ea8_32c31_ZTSN4siri12intelligence5TimerE(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  v1 = (_QWORD *)(a1 + 40);
  v2 = v3;
  *(v1 - 1) = &off_24F543888;
  *v1 = 0;
  if (v3)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

void sub_22AED3970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  IEDefer::~IEDefer((void (***)(void))(v32 - 104));
  v34 = a30;
  a30 = 0;
  if (v34)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a30, v34);
  v35 = *(_QWORD *)(v32 - 56);
  *(_QWORD *)(v32 - 64) = &off_24F543888;
  *(_QWORD *)(v32 - 56) = 0;
  if (v35)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v32 - 56, v35);

  _Unwind_Resume(a1);
}

void sub_22AED3F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  IEDefer::~IEDefer((void (***)(void))(v32 - 104));
  v34 = a30;
  a30 = 0;
  if (v34)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a30, v34);
  v35 = *(_QWORD *)(v32 - 56);
  *(_QWORD *)(v32 - 64) = &off_24F543888;
  *(_QWORD *)(v32 - 56) = 0;
  if (v35)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v32 - 56, v35);

  _Unwind_Resume(a1);
}

void sub_22AED43E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  IEDefer::~IEDefer((void (***)(void))(v30 - 88));
  v32 = a28;
  a28 = 0;
  if (v32)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a28, v32);
  v33 = *(_QWORD *)(v30 - 40);
  *(_QWORD *)(v30 - 48) = &off_24F543888;
  *(_QWORD *)(v30 - 40) = 0;
  if (v33)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v30 - 40, v33);

  _Unwind_Resume(a1);
}

void sub_22AED48A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  IEDefer::~IEDefer((void (***)(void))(v30 - 104));
  v32 = a28;
  a28 = 0;
  if (v32)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a28, v32);
  v33 = *(_QWORD *)(v30 - 56);
  *(_QWORD *)(v30 - 64) = &off_24F543888;
  *(_QWORD *)(v30 - 56) = 0;
  if (v33)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v30 - 56, v33);

  _Unwind_Resume(a1);
}

void sub_22AED4D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  IEDefer::~IEDefer((void (***)(void))(v30 - 88));
  v32 = a28;
  a28 = 0;
  if (v32)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a28, v32);
  v33 = *(_QWORD *)(v30 - 40);
  *(_QWORD *)(v30 - 48) = &off_24F543888;
  *(_QWORD *)(v30 - 40) = 0;
  if (v33)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v30 - 40, v33);

  _Unwind_Resume(a1);
}

void sub_22AED5088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v24;

  v24 = *(_QWORD *)(v22 - 40);
  *(_QWORD *)(v22 - 48) = &off_24F543888;
  *(_QWORD *)(v22 - 40) = 0;
  if (v24)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v22 - 40, v24);
  _Unwind_Resume(exception_object);
}

void sub_22AED563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v17 - 160);
  IEDefer::~IEDefer((void (***)(void))(v17 - 88));
  v19 = *(_QWORD *)(v17 - 104);
  *(_QWORD *)(v17 - 112) = &off_24F543888;
  *(_QWORD *)(v17 - 104) = 0;
  if (v19)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v17 - 104, v19);
  v20 = *(_QWORD *)(v17 - 72);
  *(_QWORD *)(v17 - 80) = &off_24F543888;
  *(_QWORD *)(v17 - 72) = 0;
  if (v20)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v17 - 72, v20);

  _Unwind_Resume(a1);
}

void sub_22AED5AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v27;

  v27 = *(_QWORD *)(v25 - 56);
  *(_QWORD *)(v25 - 64) = &off_24F543888;
  *(_QWORD *)(v25 - 56) = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 56, v27);

  _Unwind_Resume(a1);
}

void sub_22AED5E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(void), void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (a24 < 0)
    operator delete(__p);
  IEDefer::~IEDefer(&a18);
  v27 = a16;
  a16 = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a16, v27);
  v28 = *(_QWORD *)(v25 - 40);
  *(_QWORD *)(v25 - 48) = &off_24F543888;
  *(_QWORD *)(v25 - 40) = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 40, v28);

  _Unwind_Resume(a1);
}

void sub_22AED626C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(siri::intelligence::Timer *__hidden this),uint64_t a21,uint64_t a22,void (**a23)(void))
{
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  __p = (void *)(v23 - 80);
  std::vector<siri::intelligence::ExecStateResponse>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  IEDefer::~IEDefer(&a23);
  v25 = a21;
  a20 = &off_24F543888;
  a21 = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a21, v25);
  v26 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 48) = &off_24F543888;
  *(_QWORD *)(v23 - 40) = 0;
  if (v26)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v23 - 40, v26);
  _Unwind_Resume(a1);
}

void sub_22AED662C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(void), void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (a24 < 0)
    operator delete(__p);
  IEDefer::~IEDefer(&a18);
  v27 = a16;
  a16 = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a16, v27);
  v28 = *(_QWORD *)(v25 - 40);
  *(_QWORD *)(v25 - 48) = &off_24F543888;
  *(_QWORD *)(v25 - 40) = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 40, v28);

  _Unwind_Resume(a1);
}

void sub_22AED69E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  siri::intelligence::Intent::~Intent(&__p);
  IEDefer::~IEDefer((void (***)(void))(v17 - 72));
  v19 = *(_QWORD *)(v17 - 88);
  *(_QWORD *)(v17 - 96) = &off_24F543888;
  *(_QWORD *)(v17 - 88) = 0;
  if (v19)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v17 - 88, v19);
  v20 = *(_QWORD *)(v17 - 56);
  *(_QWORD *)(v17 - 64) = &off_24F543888;
  *(_QWORD *)(v17 - 56) = 0;
  if (v20)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v17 - 56, v20);

  _Unwind_Resume(a1);
}

void sub_22AED6DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(void), void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  IEDefer::~IEDefer(&a18);
  v27 = a16;
  a16 = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a16, v27);
  v28 = *(_QWORD *)(v25 - 64);
  *(_QWORD *)(v25 - 72) = &off_24F543888;
  *(_QWORD *)(v25 - 64) = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 64, v28);
  _Unwind_Resume(a1);
}

void sub_22AED7040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AED7248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  IEDefer::~IEDefer((void (***)(void))&__p);
  if (a15)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v22 + 40, a15);
  v25 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 48) = &off_24F543888;
  *(_QWORD *)(v23 - 40) = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v23 - 40, v25);
  _Unwind_Resume(a1);
}

void sub_22AED753C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  IEDefer::~IEDefer((void (***)(void))&__p);
  if (a15)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v22 + 40, a15);
  v25 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 48) = &off_24F543888;
  *(_QWORD *)(v23 - 40) = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v23 - 40, v25);
  _Unwind_Resume(a1);
}

void sub_22AED7838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  IEDefer::~IEDefer((void (***)(void))&__p);
  v24 = a15;
  a15 = 0;
  if (v24)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a15, v24);
  v25 = *(_QWORD *)(v22 - 40);
  *(_QWORD *)(v22 - 48) = &off_24F543888;
  *(_QWORD *)(v22 - 40) = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v22 - 40, v25);
  _Unwind_Resume(a1);
}

void sub_22AED7C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)(siri::intelligence::Timer *__hidden this),uint64_t a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  siri::intelligence::DirectInvocation::~DirectInvocation(&__p);
  IEDefer::~IEDefer((void (***)(void))(v26 - 56));
  v28 = a25;
  a24 = &off_24F543888;
  a25 = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a25, v28);
  v29 = *(_QWORD *)(v26 - 40);
  *(_QWORD *)(v26 - 48) = &off_24F543888;
  *(_QWORD *)(v26 - 40) = 0;
  if (v29)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v26 - 40, v29);

  _Unwind_Resume(a1);
}

void siri::intelligence::DirectInvocation::~DirectInvocation(void **this)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_22AED8060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)(siri::intelligence::Timer *__hidden this),uint64_t a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  siri::intelligence::DirectInvocation::~DirectInvocation(&__p);
  IEDefer::~IEDefer((void (***)(void))(v26 - 56));
  v28 = a25;
  a24 = &off_24F543888;
  a25 = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a25, v28);
  v29 = *(_QWORD *)(v26 - 40);
  *(_QWORD *)(v26 - 48) = &off_24F543888;
  *(_QWORD *)(v26 - 40) = 0;
  if (v29)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v26 - 40, v29);

  _Unwind_Resume(a1);
}

void sub_22AED8534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(siri::intelligence::Timer *__hidden this), uint64_t a20)
{
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if (*(char *)(v21 - 57) < 0)
    operator delete(*(void **)(v21 - 80));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  IEDefer::~IEDefer((void (***)(void))(v21 - 88));
  v23 = a20;
  a19 = &off_24F543888;
  a20 = 0;
  if (v23)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a20, v23);
  v24 = *(_QWORD *)(v21 - 40);
  *(_QWORD *)(v21 - 48) = &off_24F543888;
  *(_QWORD *)(v21 - 40) = 0;
  if (v24)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v21 - 40, v24);

  _Unwind_Resume(a1);
}

void sub_22AED8894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  IEDefer::~IEDefer((void (***)(void))&__p);
  if (a15)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v22 + 40, a15);
  v25 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 48) = &off_24F543888;
  *(_QWORD *)(v23 - 40) = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v23 - 40, v25);
  _Unwind_Resume(a1);
}

void sub_22AED8D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void (**a37)(siri::intelligence::Timer *__hidden this),uint64_t a38)
{
  void *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a30, a31);

  IEDefer::~IEDefer((void (***)(void))(v39 - 88));
  v41 = a38;
  a37 = &off_24F543888;
  a38 = 0;
  if (v41)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a38, v41);
  v42 = *(_QWORD *)(v39 - 72);
  *(_QWORD *)(v39 - 80) = &off_24F543888;
  *(_QWORD *)(v39 - 72) = 0;
  if (v42)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v39 - 72, v42);
  _Unwind_Resume(a1);
}

void sub_22AED92A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void (**a26)(siri::intelligence::Timer *__hidden this),uint64_t a27)
{
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  IEDefer::~IEDefer((void (***)(void))(v29 - 104));
  v31 = a27;
  a26 = &off_24F543888;
  a27 = 0;
  if (v31)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a27, v31);
  v32 = *(_QWORD *)(v29 - 56);
  *(_QWORD *)(v29 - 64) = &off_24F543888;
  *(_QWORD *)(v29 - 56) = 0;
  if (v32)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v29 - 56, v32);

  _Unwind_Resume(a1);
}

void sub_22AED9864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v31 - 112));
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);

  IEDefer::~IEDefer((void (***)(void))(v31 - 120));
  v33 = a30;
  a30 = 0;
  if (v33)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a30, v33);
  v34 = *(_QWORD *)(v31 - 72);
  *(_QWORD *)(v31 - 80) = &off_24F543888;
  *(_QWORD *)(v31 - 72) = 0;
  if (v34)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v31 - 72, v34);
  _Unwind_Resume(a1);
}

void sub_22AED9CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  IEDefer::~IEDefer((void (***)(void))(v31 - 96));
  v33 = a30;
  a30 = 0;
  if (v33)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a30, v33);
  v34 = *(_QWORD *)(v31 - 80);
  *(_QWORD *)(v31 - 88) = &off_24F543888;
  *(_QWORD *)(v31 - 80) = 0;
  if (v34)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v31 - 80, v34);
  _Unwind_Resume(a1);
}

void siri::intelligence::ResolvedCondition::~ResolvedCondition(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_22AEDA2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void (**a28)(void),void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void (**a35)(siri::intelligence::Timer *__hidden this),uint64_t a36)
{
  void *v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  IEDefer::~IEDefer(&a28);
  v39 = a26;
  a26 = 0;
  if (v39)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a26, v39);
  v40 = a36;
  a35 = &off_24F543888;
  a36 = 0;
  if (v40)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a36, v40);
  _Unwind_Resume(a1);
}

void sub_22AEDA62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_22AEDA694()
{
  JUMPOUT(0x22AEDA684);
}

void sub_22AEDA844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);

  _Unwind_Resume(a1);
}

void sub_22AEDA970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::intelligence::Intent::~Intent(void **this)
{
  void **v2;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 32));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  v2 = this + 24;
  std::vector<siri::intelligence::NLParameters>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 21), this[22]);
  v2 = this + 18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<siri::intelligence::NLParameters>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<siri::intelligence::NLParameters>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::NLParameters>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *std::pair<std::string const,std::shared_ptr<siri::intelligence::Variable>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<siri::intelligence::ResolvedCondition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::ResolvedCondition>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2 + 56;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<siri::intelligence::ExecStateResponse>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 39;
        std::allocator<siri::intelligence::ExecStateResponse>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<siri::intelligence::ExecStateResponse>::destroy[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;

  v4 = a2 + 36;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v4);
  a2[19] = &unk_24F540670;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 34));
  siri::intelligence::ResponseBase::~ResponseBase(a2 + 19);
  a2[2] = &unk_24F5406D8;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 17));
  siri::intelligence::ResponseBase::~ResponseBase(a2 + 2);
  return std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)a2);
}

void siri::intelligence::BehaviorResponse::~BehaviorResponse(void **this)
{
  *this = &unk_24F540670;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
}

{
  *this = &unk_24F540670;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void siri::intelligence::DialogResponse::~DialogResponse(void **this)
{
  *this = &unk_24F5406D8;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
}

{
  *this = &unk_24F5406D8;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void siri::intelligence::ResponseBase::~ResponseBase(void **this)
{
  void **v2;

  *this = &unk_24F5406B8;
  v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  siri::intelligence::ResponseBase::~ResponseBase(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::intelligence::Variable>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::intelligence::Variable>>,0>(uint64_t a1)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<siri::intelligence::Callbacks>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::Callbacks>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::Callbacks>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_22AEDB498(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v3;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t siri::intelligence::Log::IsOutputToStdout(siri::intelligence::Log *this)
{
  return siri::intelligence::Log::sOutputToStdout;
}

uint64_t siri::intelligence::Log::SetOutputToStdout(uint64_t this)
{
  siri::intelligence::Log::sOutputToStdout = this;
  return this;
}

void siri::intelligence::Log::Info(siri::intelligence::Log *this, const char *a2, ...)
{
  const char *v3;
  os_log_type_t v4[8];
  va_list va;

  va_start(va, a2);
  *(_QWORD *)v4 = 0;
  vasprintf((char **)v4, (const char *)this, va);
  if (*(_QWORD *)v4)
  {
    siri::intelligence::LogInternal((siri::intelligence *)1, *(const char **)v4, v3);
    free(*(void **)v4);
  }
  else
  {
    siri::intelligence::LogInternal((siri::intelligence *)1, (const char *)this, v3);
  }
}

void siri::intelligence::LogInternal(siri::intelligence *this, const char *a2, const char *a3)
{
  int v4;
  os_log_t v5;
  void *v6;
  const char *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  void **v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v4 = (int)this;
  v19 = *MEMORY[0x24BDAC8D0];
  if (!siri::intelligence::LogInternal(os_log_type_t,char const*)::sLog)
  {
    v5 = os_log_create("com.apple.siri.AuthoredFlow", "FlowEngine");
    v6 = (void *)siri::intelligence::LogInternal(os_log_type_t,char const*)::sLog;
    siri::intelligence::LogInternal(os_log_type_t,char const*)::sLog = (uint64_t)v5;

  }
  v7 = "Debug: ";
  v8 = "";
  if (v4 == 16)
    v8 = "Error: ";
  if (v4 != 2)
    v7 = v8;
  if (v4)
    v9 = (char *)v7;
  else
    v9 = "Warning: ";
  std::string::basic_string[abi:ne180100]<0>(__p, v9);
  v10 = siri::intelligence::LogInternal(os_log_type_t,char const*)::sLog;
  if (os_log_type_enabled((os_log_t)siri::intelligence::LogInternal(os_log_type_t,char const*)::sLog, (os_log_type_t)v4))
  {
    v11 = __p;
    if (v14 < 0)
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v16 = v11;
    v17 = 2080;
    v18 = a2;
    _os_log_impl(&dword_22AEC9000, v10, (os_log_type_t)v4, "%s%s", buf, 0x16u);
  }
  if (siri::intelligence::Log::sOutputToStdout)
  {
    v12 = __p;
    if (v14 < 0)
      v12 = (void **)__p[0];
    printf("%s%s\n", (const char *)v12, a2);
  }
  if (v14 < 0)
    operator delete(__p[0]);
}

void siri::intelligence::Log::Warning(siri::intelligence::Log *this, const char *a2, ...)
{
  const char *v3;
  os_log_type_t v4[8];
  va_list va;

  va_start(va, a2);
  *(_QWORD *)v4 = 0;
  vasprintf((char **)v4, (const char *)this, va);
  if (*(_QWORD *)v4)
  {
    siri::intelligence::LogInternal(0, *(const char **)v4, v3);
    free(*(void **)v4);
  }
  else
  {
    siri::intelligence::LogInternal(0, (const char *)this, v3);
  }
}

void siri::intelligence::Log::Error(siri::intelligence::Log *this, const char *a2, ...)
{
  const char *v3;
  os_log_type_t v4[8];
  va_list va;

  va_start(va, a2);
  *(_QWORD *)v4 = 0;
  vasprintf((char **)v4, (const char *)this, va);
  if (*(_QWORD *)v4)
  {
    siri::intelligence::LogInternal((siri::intelligence *)0x10, *(const char **)v4, v3);
    free(*(void **)v4);
  }
  else
  {
    siri::intelligence::LogInternal((siri::intelligence *)0x10, (const char *)this, v3);
  }
}

void siri::intelligence::Log::Debug(siri::intelligence::Log *this, const char *a2, ...)
{
  const char *v3;
  os_log_type_t v4[8];
  va_list va;

  va_start(va, a2);
  *(_QWORD *)v4 = 0;
  vasprintf((char **)v4, (const char *)this, va);
  if (*(_QWORD *)v4)
  {
    siri::intelligence::LogInternal((siri::intelligence *)2, *(const char **)v4, v3);
    free(*(void **)v4);
  }
  else
  {
    siri::intelligence::LogInternal((siri::intelligence *)2, (const char *)this, v3);
  }
}

double siri::intelligence::TestSuite::TestSuite(siri::intelligence::TestSuite *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

uint64_t siri::intelligence::TestSuite::LoadTests(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  void *v30;
  std::string *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  BOOL v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  siri::intelligence::ValidationResults *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  siri::intelligence::ValidationResults *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  _BYTE *v111;
  void **v112;
  __int128 v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  int v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  protobuf::FlowTest *v128;
  BOOL v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  __n128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  BOOL v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int *v152;
  uint64_t v153;
  int v154;
  siri::intelligence *v155;
  uint64_t v156;
  uint64_t v157;
  const YAML::Node *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _BYTE *v169;
  _BYTE *v170;
  const YAML::Node *v171;
  int *v172;
  uint64_t v173;
  int v174;
  siri::intelligence *v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  protobuf::FlowTest *v196;
  uint64_t v197;
  uint64_t v198;
  std::string *v199;
  unint64_t v200;
  unint64_t v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  _QWORD *exception;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t j;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  __int128 *v235;
  uint64_t v236;
  uint64_t v237;
  std::string v238;
  char v239[8];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char **v246;
  char *v247[2];
  void *v248[2];
  unsigned __int8 v249;
  protobuf::FlowTest *v250;
  std::__shared_weak_count *v251;
  std::string v252;
  uint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255[3];
  char v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258[3];
  char v259;
  std::__shared_weak_count *v260;
  void *v261;
  char v262;
  std::__shared_weak_count *v263;
  void *v264;
  char v265;
  std::__shared_weak_count *v266;
  char v267[8];
  void *v268;
  char v269;
  uint64_t v270;
  std::__shared_weak_count *v271;
  uint64_t **v272;
  char v273[8];
  std::string v274;
  std::__shared_weak_count *v275;
  uint64_t **v276;
  std::string v277;
  char v278;
  std::__shared_weak_count *v279;
  _BYTE ***v280;
  void *v281[2];
  char v282;
  char v283[8];
  std::string v284;
  std::__shared_weak_count *v285;
  uint64_t **v286;
  _BYTE __p[40];
  std::__shared_weak_count *v288;
  _BYTE ***v289;
  char v290;
  void *v291;
  char v292;
  std::__shared_weak_count *v293;
  char v294;
  std::string __s;
  std::__shared_weak_count *v296;
  char v297;
  std::string v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  _BYTE v301[40];
  std::__shared_weak_count *v302;
  __int128 v303;
  __int128 v304;
  _BYTE v305[32];
  YAML::Node *v306;
  std::string v307;
  YAML::Node *v308;
  std::string v309;
  std::string v310;
  std::string v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  std::string v316;
  std::string v317;
  char v318[8];
  void *v319;
  char v320;
  std::__shared_weak_count *v321;
  void *v322;
  char v323;
  std::__shared_weak_count *v324;
  void *v325;
  char v326;
  std::__shared_weak_count *v327;
  char v328[8];
  void *v329;
  char v330;
  uint64_t v331;
  std::__shared_weak_count *v332;
  uint64_t **v333;
  YAML::Node *v334;
  std::string v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  std::string v340;
  _BYTE v341[40];
  std::__shared_weak_count *v342;
  __int128 v343;
  uint64_t v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;

  v352 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7 != *(_QWORD *)a1)
  {
    do
    {
      v7 -= 152;
      std::allocator<siri::intelligence::TestCase>::destroy[abi:ne180100](a1 + 16, v7);
    }
    while (v7 != v6);
  }
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v6;
  for (i = *(_QWORD *)(a1 + 32);
        i != v8;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 48;
  }
  *(_QWORD *)(a1 + 32) = v8;
  siri::intelligence::ListTemplateDir(a2, a3, 4, &v253);
  v10 = v253;
  v236 = v254;
  if (v253 != v254)
  {
    v235 = (__int128 *)a2;
    do
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v10;
        v252.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
        *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v11;
      }
      _ZNSt3__115allocate_sharedB8ne180100IN8protobuf8FlowTestENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v250);
      siri::intelligence::Configuration::GetFlowIdFromPath(&v252, (uint64_t)v248);
      v243 = 0;
      v244 = 0;
      v247[0] = 0;
      v247[1] = 0;
      v245 = 0;
      v246 = v247;
      v239[0] = 1;
      v240 = 0u;
      v241 = 0u;
      v242 = 0u;
      v237 = v10;
      YAML::LoadFile((uint64_t)v341);
      YAML::Node::operator=((YAML::Node *)v239, (const YAML::Node *)v341);
      v12 = v342;
      if (v342)
      {
        p_shared_owners = (unint64_t *)&v342->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
        operator delete(*(void **)&v341[8]);
      v15 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
      {
        std::string::basic_string[abi:ne180100]<0>(v341, "formatVersion");
        std::string::basic_string[abi:ne180100]<0>(&v341[24], "tests");
        std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F46048, (const void **)v341, 2);
        for (j = 0; j != -6; j -= 3)
        {
          if (SHIBYTE((&v342)[j]) < 0)
            operator delete(*(void **)&v341[j * 8 + 24]);
        }
        __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F46048, &dword_22AEC9000);
        __cxa_guard_release(&_MergedGlobals_2);
      }
      if (!v239[0])
      {
        *(_DWORD *)v301 = 0;
        memset(&v301[8], 0, 32);
        v302 = 0;
LABEL_41:
        *(_DWORD *)v341 = 0;
        memset(&v341[8], 0, 32);
        v342 = 0;
        goto LABEL_42;
      }
      if (*((_QWORD *)&v242 + 1))
      {
        YAML::detail::node_data::begin(***((_QWORD ***)&v242 + 1), (uint64_t)&v303);
        v16 = *((_QWORD *)&v241 + 1);
        v17 = (std::__shared_weak_count *)v242;
        if ((_QWORD)v242)
        {
          v18 = (unint64_t *)(v242 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          *(_OWORD *)v301 = v303;
          *(_OWORD *)&v301[16] = v304;
          *(_QWORD *)&v301[32] = v16;
          v302 = v17;
          do
            v20 = __ldxr(v18);
          while (__stxr(v20 + 1, v18));
          do
            v21 = __ldaxr(v18);
          while (__stlxr(v21 - 1, v18));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        else
        {
          *(_OWORD *)v301 = v303;
          *(_OWORD *)&v301[16] = v304;
          *(_QWORD *)&v301[32] = *((_QWORD *)&v241 + 1);
          v302 = 0;
        }
      }
      else
      {
        *(_DWORD *)v301 = 0;
        memset(&v301[8], 0, 32);
        v302 = 0;
      }
      if (!v239[0] || !*((_QWORD *)&v242 + 1))
        goto LABEL_41;
      YAML::detail::node_data::end(***((_QWORD ***)&v242 + 1), (uint64_t)v305);
      v22 = *((_QWORD *)&v241 + 1);
      v23 = (std::__shared_weak_count *)v242;
      if ((_QWORD)v242)
      {
        v24 = (unint64_t *)(v242 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        *(_OWORD *)v341 = *(_OWORD *)v305;
        *(_OWORD *)&v341[16] = *(_OWORD *)&v305[16];
        *(_QWORD *)&v341[32] = v22;
        v342 = v23;
        do
          v26 = __ldxr(v24);
        while (__stxr(v26 + 1, v24));
        do
          v27 = __ldaxr(v24);
        while (__stlxr(v27 - 1, v24));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *(_OWORD *)v341 = *(_OWORD *)v305;
        *(_OWORD *)&v341[16] = *(_OWORD *)&v305[16];
        *(_QWORD *)&v341[32] = *((_QWORD *)&v241 + 1);
        v342 = 0;
      }
LABEL_42:
      while (1)
      {
        if (*(_DWORD *)v301 == *(_DWORD *)v341)
        {
          v28 = &v301[8];
          v29 = &v341[8];
          if (*(_DWORD *)v301 != 1)
          {
            if (*(_DWORD *)v301 != 2)
              break;
            v28 = &v301[16];
            v29 = &v341[16];
          }
          if (*(_QWORD *)v28 == *(_QWORD *)v29)
            break;
        }
        YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v301, (uint64_t)&v290);
        if (!v294)
        {
          exception = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v307, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v307 = __s;
          YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v307);
        }
        v306 = (YAML::Node *)&v294;
        YAML::as_if<std::string,void>::operator()(&v306, &v238);
        v30 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F46048, (const void **)&v238.__r_.__value_.__l.__data_);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
        if (v30 == &unk_253F46050)
        {
          if (!v294)
          {
            v227 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v309, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v309 = __s;
            YAML::InvalidNode::InvalidNode(v227, (uint64_t)&v309);
          }
          v308 = (YAML::Node *)&v294;
          YAML::as_if<std::string,void>::operator()(&v308, (std::string *)v305);
          v31 = std::string::insert((std::string *)v305, 0, "Unsupported field for FlowTest found in flow file: ");
          v238 = *v31;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          if (!v297)
          {
            v226 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v310, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
            else
              v310 = v298;
            YAML::InvalidNode::InvalidNode(v226, (uint64_t)&v310);
          }
          if (v300)
            v32 = *(_QWORD *)(**(_QWORD **)v300 + 4);
          else
            HIDWORD(v32) = -1;
          siri::intelligence::ValidationResults::AddError((siri::intelligence::ValidationResults *)&v243, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&v238, SHIDWORD(v32));
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          if ((v305[23] & 0x80000000) != 0)
            operator delete(*(void **)v305);
        }
        v33 = v299;
        if (v299)
        {
          v34 = (unint64_t *)&v299->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v298.__r_.__value_.__l.__data_);
        v36 = v296;
        if (v296)
        {
          v37 = (unint64_t *)&v296->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v39 = v293;
        if (v293)
        {
          v40 = (unint64_t *)&v293->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (v292 < 0)
          operator delete(v291);
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v301);
      }
      v42 = v342;
      if (v342)
      {
        v43 = (unint64_t *)&v342->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = v302;
      if (v302)
      {
        v46 = (unint64_t *)&v302->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      YAML::Node::operator[]<char [14]>((YAML::Node *)v239, "formatVersion", (uint64_t)__p);
      v48 = !__p[0] || v289 && !***v289;
      v49 = v288;
      if (v288)
      {
        v50 = (unint64_t *)&v288->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&__p[8]);
        if (v48)
          goto LABEL_133;
      }
      else if (v48)
      {
        goto LABEL_133;
      }
      YAML::Node::operator[]<char [14]>((YAML::Node *)v239, "formatVersion", (uint64_t)v283);
      if (!v283[0])
      {
        v229 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v316, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
        else
          v316 = v284;
        YAML::InvalidNode::InvalidNode(v229, (uint64_t)&v316);
      }
      if (v286)
      {
        v52 = **v286;
        if (*(_BYTE *)v52)
          v53 = *(_DWORD *)(v52 + 16);
        else
          v53 = 0;
      }
      else
      {
        v53 = 1;
      }
      v54 = v285;
      if (v285)
      {
        v55 = (unint64_t *)&v285->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v284.__r_.__value_.__l.__data_);
      if (v53 != 2)
      {
        std::string::basic_string[abi:ne180100]<0>(v281, "Invalid string value found for 'formatVersion' on FlowTest");
        YAML::Node::operator[]<char [14]>((YAML::Node *)v239, "formatVersion", (uint64_t)v341);
        if (!v341[0])
        {
          v233 = __cxa_allocate_exception(0x38uLL);
          if ((v341[31] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)&v341[8], *(std::string::size_type *)&v341[16]);
          else
            v311 = *(std::string *)&v341[8];
          YAML::InvalidNode::InvalidNode(v233, (uint64_t)&v311);
        }
        if ((_QWORD)v343)
          v57 = *(_QWORD *)(**(_QWORD **)v343 + 4);
        else
          HIDWORD(v57) = -1;
        siri::intelligence::ValidationResults::AddError((siri::intelligence::ValidationResults *)&v243, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v281, HIDWORD(v57) + 1);
        v58 = v342;
        if (v342)
        {
          v59 = (unint64_t *)&v342->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if ((v341[31] & 0x80000000) != 0)
          operator delete(*(void **)&v341[8]);
        if (v282 < 0)
          operator delete(v281[0]);
      }
LABEL_133:
      YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)&v277);
      v61 = !v277.__r_.__value_.__s.__data_[0] || v280 && !***v280;
      v62 = v279;
      if (v279)
      {
        v63 = (unint64_t *)&v279->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (v278 < 0)
      {
        operator delete((void *)v277.__r_.__value_.__l.__size_);
        if (v61)
          goto LABEL_238;
      }
      else if (v61)
      {
        goto LABEL_238;
      }
      YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v273);
      if (!v273[0])
      {
        v230 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v317, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
        else
          v317 = v274;
        YAML::InvalidNode::InvalidNode(v230, (uint64_t)&v317);
      }
      if (v276)
      {
        v65 = **v276;
        if (*(_BYTE *)v65)
          v66 = *(_DWORD *)(v65 + 16);
        else
          v66 = 0;
      }
      else
      {
        v66 = 1;
      }
      v67 = v275;
      if (v275)
      {
        v68 = (unint64_t *)&v275->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v274.__r_.__value_.__l.__data_);
      if (v66 == 3)
      {
        YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v267);
        if (!v267[0])
        {
          *(_DWORD *)v341 = 0;
          memset(&v341[8], 0, 32);
          v342 = 0;
LABEL_192:
          *(_DWORD *)__p = 0;
          memset(&__p[8], 0, 32);
          v288 = 0;
          goto LABEL_193;
        }
        if (v272)
        {
          YAML::detail::node_data::begin(**v272, (uint64_t)&v312);
          v70 = v270;
          v71 = v271;
          if (v271)
          {
            v72 = (unint64_t *)&v271->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
            *(_OWORD *)v341 = v312;
            *(_OWORD *)&v341[16] = v313;
            *(_QWORD *)&v341[32] = v70;
            v342 = v71;
            do
              v74 = __ldxr(v72);
            while (__stxr(v74 + 1, v72));
            do
              v75 = __ldaxr(v72);
            while (__stlxr(v75 - 1, v72));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          else
          {
            *(_OWORD *)v341 = v312;
            *(_OWORD *)&v341[16] = v313;
            *(_QWORD *)&v341[32] = v270;
            v342 = 0;
          }
        }
        else
        {
          *(_DWORD *)v341 = 0;
          memset(&v341[8], 0, 32);
          v342 = 0;
        }
        if (!v267[0] || !v272)
          goto LABEL_192;
        YAML::detail::node_data::end(**v272, (uint64_t)&v314);
        v81 = v270;
        v82 = v271;
        if (v271)
        {
          v83 = (unint64_t *)&v271->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          *(_OWORD *)__p = v314;
          *(_OWORD *)&__p[16] = v315;
          *(_QWORD *)&__p[32] = v81;
          v288 = v82;
          do
            v85 = __ldxr(v83);
          while (__stxr(v85 + 1, v83));
          do
            v86 = __ldaxr(v83);
          while (__stlxr(v86 - 1, v83));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        else
        {
          *(_OWORD *)__p = v314;
          *(_OWORD *)&__p[16] = v315;
          *(_QWORD *)&__p[32] = v270;
          v288 = 0;
        }
LABEL_193:
        while (1)
        {
          if (*(_DWORD *)v341 == *(_DWORD *)__p)
          {
            v87 = &v341[8];
            v88 = &__p[8];
            if (*(_DWORD *)v341 != 1)
            {
              if (*(_DWORD *)v341 != 2)
                break;
              v87 = &v341[16];
              v88 = &__p[16];
            }
            if (*(_QWORD *)v87 == *(_QWORD *)v88)
              break;
          }
          YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v341, (uint64_t)v258);
          siri::intelligence::ValidateFlowTest_Test(v258, (const YAML::Node *)&v243, v89);
          v90 = v266;
          if (v266)
          {
            v91 = (unint64_t *)&v266->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          if (v265 < 0)
            operator delete(v264);
          v93 = v263;
          if (v263)
          {
            v94 = (unint64_t *)&v263->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          if (v262 < 0)
            operator delete(v261);
          v96 = v260;
          if (v260)
          {
            v97 = (unint64_t *)&v260->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          if (v259 < 0)
            operator delete(v258[1]);
          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v341);
        }
        v99 = v288;
        if (v288)
        {
          v100 = (unint64_t *)&v288->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = v342;
        if (v342)
        {
          v103 = (unint64_t *)&v342->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        v105 = v271;
        if (v271)
        {
          v106 = (unint64_t *)&v271->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        if (v269 < 0)
        {
          v80 = (std::__shared_weak_count *)v268;
          goto LABEL_237;
        }
      }
      else
      {
        YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v255);
        siri::intelligence::ValidateFlowTest_Test(v255, (const YAML::Node *)&v243, v76);
        v77 = v257;
        if (v257)
        {
          v78 = (unint64_t *)&v257->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v256 < 0)
        {
          v80 = v255[1];
LABEL_237:
          operator delete(v80);
        }
      }
LABEL_238:
      memset(__p, 0, 24);
      std::vector<siri::intelligence::ValidationResult>::__init_with_size[abi:ne180100]<siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(__p, v243, v244, (v244 - v243) >> 6);
      v108 = *(_QWORD *)__p;
      v109 = *(_QWORD *)&__p[8];
      while (v108 != v109)
      {
        if ((v249 & 0x80u) == 0)
          v110 = v249;
        else
          v110 = (size_t)v248[1];
        std::string::basic_string[abi:ne180100]((uint64_t)v341, v110 + 2);
        if (v341[23] >= 0)
          v111 = v341;
        else
          v111 = *(_BYTE **)v341;
        if (v110)
        {
          if ((v249 & 0x80u) == 0)
            v112 = v248;
          else
            v112 = (void **)v248[0];
          memmove(v111, v112, v110);
        }
        strcpy(&v111[v110], ": ");
        if (*(char *)(v108 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v301, *(const std::string::value_type **)(v108 + 32), *(_QWORD *)(v108 + 40));
        }
        else
        {
          v113 = *(_OWORD *)(v108 + 32);
          *(_QWORD *)&v301[16] = *(_QWORD *)(v108 + 48);
          *(_OWORD *)v301 = v113;
        }
        if (v301[23] >= 0)
          v114 = v301;
        else
          v114 = *(const std::string::value_type **)v301;
        if (v301[23] >= 0)
          v115 = v301[23];
        else
          v115 = *(_QWORD *)&v301[8];
        v116 = std::string::append((std::string *)v341, v114, v115);
        v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        v277.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        if ((v301[23] & 0x80000000) != 0)
          operator delete(*(void **)v301);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
        v118 = *(_DWORD *)(v108 + 56);
        if (v118 >= 1)
        {
          std::to_string(&v238, v118);
          v119 = std::string::insert(&v238, 0, " (Line ");
          v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          *(_QWORD *)&v301[16] = *((_QWORD *)&v119->__r_.__value_.__l + 2);
          *(_OWORD *)v301 = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          v121 = std::string::append((std::string *)v301, ")");
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          *(_QWORD *)&v341[16] = *((_QWORD *)&v121->__r_.__value_.__l + 2);
          *(_OWORD *)v341 = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          if (v341[23] >= 0)
            v123 = v341;
          else
            v123 = *(const std::string::value_type **)v341;
          if (v341[23] >= 0)
            v124 = v341[23];
          else
            v124 = *(_QWORD *)&v341[8];
          std::string::append(&v277, v123, v124);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
          if ((v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
        }
        siri::intelligence::TestParseError::TestParseError((std::string *)v341, (__int128 *)v248, (__int128 *)&v277);
        std::vector<siri::intelligence::TestParseError>::push_back[abi:ne180100]((char **)(a1 + 24), (__int128 *)v341);
        if (SHIBYTE(v342) < 0)
          operator delete(*(void **)&v341[24]);
        if ((v341[23] & 0x80000000) != 0)
          operator delete(*(void **)v341);
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v277.__r_.__value_.__l.__data_);
        v108 += 64;
      }
      *(_QWORD *)v341 = __p;
      std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v341);
      YAML::LoadFile((uint64_t)v341);
      YAML::Node::operator=((YAML::Node *)v239, (const YAML::Node *)v341);
      v125 = v342;
      if (v342)
      {
        v126 = (unint64_t *)&v342->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
        operator delete(*(void **)&v341[8]);
      v128 = v250;
      memset(&v277, 0, sizeof(v277));
      YAML::Node::operator[]<char [14]>((YAML::Node *)v239, "formatVersion", (uint64_t)v341);
      v129 = !v341[0] || (_QWORD)v343 && !***(_BYTE ***)v343;
      v130 = v342;
      if (v342)
      {
        v131 = (unint64_t *)&v342->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v341[8]);
        if (v129)
          goto LABEL_315;
      }
      else if (v129)
      {
        goto LABEL_315;
      }
      YAML::Node::operator[]<char [14]>((YAML::Node *)v239, "formatVersion", (uint64_t)v341);
      if (!v341[0])
      {
        v231 = __cxa_allocate_exception(0x38uLL);
        if ((v341[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v335, *(const std::string::value_type **)&v341[8], *(std::string::size_type *)&v341[16]);
        else
          v335 = *(std::string *)&v341[8];
        YAML::InvalidNode::InvalidNode(v231, (uint64_t)&v335);
      }
      v334 = (YAML::Node *)v341;
      YAML::as_if<std::string,void>::operator()(&v334, (std::string *)__p);
      *((_DWORD *)v128 + 4) |= 1u;
      v133 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v128 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v134 = v342;
      if (v342)
      {
        v135 = (unint64_t *)&v342->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v134->__on_zero_shared)(v134, v133);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
        operator delete(*(void **)&v341[8]);
LABEL_315:
      YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v341);
      v137 = !v341[0] || (_QWORD)v343 && !***(_BYTE ***)v343;
      v138 = v342;
      if (v342)
      {
        v139 = (unint64_t *)&v342->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v341[8]);
        if (v137)
          goto LABEL_433;
      }
      else if (v137)
      {
        goto LABEL_433;
      }
      YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v341);
      if (!v341[0])
      {
        v232 = __cxa_allocate_exception(0x38uLL);
        if ((v341[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v340, *(const std::string::value_type **)&v341[8], *(std::string::size_type *)&v341[16]);
        else
          v340 = *(std::string *)&v341[8];
        YAML::InvalidNode::InvalidNode(v232, (uint64_t)&v340);
      }
      if ((_QWORD)v343)
      {
        v141 = **(_QWORD **)v343;
        if (*(_BYTE *)v141)
          v142 = *(_DWORD *)(v141 + 16);
        else
          v142 = 0;
      }
      else
      {
        v142 = 1;
      }
      v143 = v342;
      if (v342)
      {
        v144 = (unint64_t *)&v342->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
        operator delete(*(void **)&v341[8]);
      if (v142 == 3)
      {
        YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v328);
        if (v328[0])
        {
          if (v333)
          {
            YAML::detail::node_data::begin(**v333, (uint64_t)&v336);
            v146 = v331;
            v147 = v332;
            if (v332)
            {
              v148 = (unint64_t *)&v332->__shared_owners_;
              do
                v149 = __ldxr(v148);
              while (__stxr(v149 + 1, v148));
              *(_OWORD *)v341 = v336;
              *(_OWORD *)&v341[16] = v337;
              *(_QWORD *)&v341[32] = v146;
              v342 = v147;
              do
                v150 = __ldxr(v148);
              while (__stxr(v150 + 1, v148));
              do
                v151 = __ldaxr(v148);
              while (__stlxr(v151 - 1, v148));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            else
            {
              *(_OWORD *)v341 = v336;
              *(_OWORD *)&v341[16] = v337;
              *(_QWORD *)&v341[32] = v331;
              v342 = 0;
            }
          }
          else
          {
            *(_DWORD *)v341 = 0;
            memset(&v341[8], 0, 32);
            v342 = 0;
          }
          if (v328[0] && v333)
          {
            YAML::detail::node_data::end(**v333, (uint64_t)&v338);
            v163 = v331;
            v164 = v332;
            if (v332)
            {
              v165 = (unint64_t *)&v332->__shared_owners_;
              do
                v166 = __ldxr(v165);
              while (__stxr(v166 + 1, v165));
              *(_OWORD *)__p = v338;
              *(_OWORD *)&__p[16] = v339;
              *(_QWORD *)&__p[32] = v163;
              v288 = v164;
              do
                v167 = __ldxr(v165);
              while (__stxr(v167 + 1, v165));
              do
                v168 = __ldaxr(v165);
              while (__stlxr(v168 - 1, v165));
              if (!v168)
              {
                ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                std::__shared_weak_count::__release_weak(v164);
              }
            }
            else
            {
              *(_OWORD *)__p = v338;
              *(_OWORD *)&__p[16] = v339;
              *(_QWORD *)&__p[32] = v331;
              v288 = 0;
            }
            while (1)
            {
LABEL_381:
              if (*(_DWORD *)v341 == *(_DWORD *)__p)
              {
                v169 = &v341[8];
                v170 = &__p[8];
                if (*(_DWORD *)v341 != 1)
                {
                  if (*(_DWORD *)v341 != 2)
                    goto LABEL_415;
                  v169 = &v341[16];
                  v170 = &__p[16];
                }
                if (*(_QWORD *)v169 == *(_QWORD *)v170)
                {
LABEL_415:
                  v187 = v288;
                  if (v288)
                  {
                    v188 = (unint64_t *)&v288->__shared_owners_;
                    do
                      v189 = __ldaxr(v188);
                    while (__stlxr(v189 - 1, v188));
                    if (!v189)
                    {
                      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                      std::__shared_weak_count::__release_weak(v187);
                    }
                  }
                  v190 = v342;
                  if (v342)
                  {
                    v191 = (unint64_t *)&v342->__shared_owners_;
                    do
                      v192 = __ldaxr(v191);
                    while (__stlxr(v192 - 1, v191));
                    if (!v192)
                    {
                      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                      std::__shared_weak_count::__release_weak(v190);
                    }
                  }
                  v193 = v332;
                  if (v332)
                  {
                    v194 = (unint64_t *)&v332->__shared_owners_;
                    do
                      v195 = __ldaxr(v194);
                    while (__stlxr(v195 - 1, v194));
                    if (!v195)
                    {
                      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                      std::__shared_weak_count::__release_weak(v193);
                    }
                  }
                  if (v330 < 0)
                  {
                    v162 = v329;
LABEL_432:
                    operator delete(v162);
                  }
                  goto LABEL_433;
                }
              }
              YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v341, (uint64_t)v318);
              v172 = (int *)*((_QWORD *)v128 + 5);
              if (!v172)
                break;
              v173 = *((int *)v128 + 8);
              v174 = *v172;
              if ((int)v173 >= *v172)
              {
                if (v174 == *((_DWORD *)v128 + 9))
                {
LABEL_391:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v128 + 6, v174 + 1);
                  v172 = (int *)*((_QWORD *)v128 + 5);
                  v174 = *v172;
                }
                *v172 = v174 + 1;
                v175 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(*((google::protobuf::internal::ArenaImpl **)v128
                                                                                            + 3));
                v176 = *((_QWORD *)v128 + 5);
                v177 = *((int *)v128 + 8);
                *((_DWORD *)v128 + 8) = v177 + 1;
                *(_QWORD *)(v176 + 8 * v177 + 8) = v175;
                goto LABEL_393;
              }
              *((_DWORD *)v128 + 8) = v173 + 1;
              v175 = *(siri::intelligence **)&v172[2 * v173 + 2];
LABEL_393:
              siri::intelligence::ParseFlowTest_Test(v175, (protobuf::FlowTest_Test *)v318, v171);
              v178 = v327;
              if (v327)
              {
                v179 = (unint64_t *)&v327->__shared_owners_;
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              if (v326 < 0)
                operator delete(v325);
              v181 = v324;
              if (v324)
              {
                v182 = (unint64_t *)&v324->__shared_owners_;
                do
                  v183 = __ldaxr(v182);
                while (__stlxr(v183 - 1, v182));
                if (!v183)
                {
                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                  std::__shared_weak_count::__release_weak(v181);
                }
              }
              if (v323 < 0)
                operator delete(v322);
              v184 = v321;
              if (v321)
              {
                v185 = (unint64_t *)&v321->__shared_owners_;
                do
                  v186 = __ldaxr(v185);
                while (__stlxr(v186 - 1, v185));
                if (!v186)
                {
                  ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                  std::__shared_weak_count::__release_weak(v184);
                }
              }
              if (v320 < 0)
                operator delete(v319);
              YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v341);
            }
            v174 = *((_DWORD *)v128 + 9);
            goto LABEL_391;
          }
        }
        else
        {
          *(_DWORD *)v341 = 0;
          memset(&v341[8], 0, 32);
          v342 = 0;
        }
        *(_DWORD *)__p = 0;
        memset(&__p[8], 0, 32);
        v288 = 0;
        goto LABEL_381;
      }
      v152 = (int *)*((_QWORD *)v128 + 5);
      if (!v152)
      {
        v154 = *((_DWORD *)v128 + 9);
LABEL_359:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v128 + 6, v154 + 1);
        v152 = (int *)*((_QWORD *)v128 + 5);
        v154 = *v152;
        goto LABEL_360;
      }
      v153 = *((int *)v128 + 8);
      v154 = *v152;
      if ((int)v153 < *v152)
      {
        *((_DWORD *)v128 + 8) = v153 + 1;
        v155 = *(siri::intelligence **)&v152[2 * v153 + 2];
        goto LABEL_361;
      }
      if (v154 == *((_DWORD *)v128 + 9))
        goto LABEL_359;
LABEL_360:
      *v152 = v154 + 1;
      v155 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(*((google::protobuf::internal::ArenaImpl **)v128
                                                                                  + 3));
      v156 = *((_QWORD *)v128 + 5);
      v157 = *((int *)v128 + 8);
      *((_DWORD *)v128 + 8) = v157 + 1;
      *(_QWORD *)(v156 + 8 * v157 + 8) = v155;
LABEL_361:
      YAML::Node::operator[]<char [6]>((YAML::Node *)v239, "tests", (uint64_t)v341);
      siri::intelligence::ParseFlowTest_Test(v155, (protobuf::FlowTest_Test *)v341, v158);
      v159 = v342;
      if (v342)
      {
        v160 = (unint64_t *)&v342->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      if ((v341[31] & 0x80000000) != 0)
      {
        v162 = *(void **)&v341[8];
        goto LABEL_432;
      }
LABEL_433:
      *(_QWORD *)v341 = &v277;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v341);
      v196 = v250;
      LODWORD(v197) = *((_DWORD *)v250 + 8);
      if ((int)v197 >= 1)
      {
        v198 = 0;
        do
        {
          if (v198 >= (int)v197)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
            v199 = google::protobuf::internal::LogMessage::operator<<((std::string *)__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v277, (const char **)&v199->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)__p);
          }
          siri::intelligence::TestCase::TestCase((std::string *)v341, *(_QWORD *)(*((_QWORD *)v196 + 5) + 8 * v198 + 8), v235, (__int128 *)v248);
          v200 = *(_QWORD *)(a1 + 8);
          v201 = *(_QWORD *)(a1 + 16);
          if (v200 >= v201)
          {
            v207 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v200 - *(_QWORD *)a1) >> 3);
            v208 = v207 + 1;
            if (v207 + 1 > 0x1AF286BCA1AF286)
              std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
            v209 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v201 - *(_QWORD *)a1) >> 3);
            if (2 * v209 > v208)
              v208 = 2 * v209;
            if (v209 >= 0xD79435E50D7943)
              v210 = 0x1AF286BCA1AF286;
            else
              v210 = v208;
            *(_QWORD *)&__p[32] = a1 + 16;
            v211 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestCase>>(a1 + 16, v210);
            v212 = &v211[152 * v207];
            *(_QWORD *)__p = v211;
            *(_QWORD *)&__p[8] = v212;
            *(_QWORD *)&__p[24] = &v211[152 * v213];
            v214 = *(_OWORD *)v341;
            *((_QWORD *)v212 + 2) = *(_QWORD *)&v341[16];
            *(_OWORD *)v212 = v214;
            memset(v341, 0, 24);
            v215 = *(_OWORD *)&v341[24];
            *((_QWORD *)v212 + 5) = v342;
            *(_OWORD *)(v212 + 24) = v215;
            *(_QWORD *)&v341[32] = 0;
            v342 = 0;
            *(_QWORD *)&v341[24] = 0;
            v216 = v343;
            *((_QWORD *)v212 + 8) = v344;
            *((_OWORD *)v212 + 3) = v216;
            v343 = 0uLL;
            v344 = 0;
            v217 = v345;
            *((_QWORD *)v212 + 11) = v346;
            *(_OWORD *)(v212 + 72) = v217;
            v345 = 0uLL;
            v346 = 0;
            v218 = v347;
            *((_QWORD *)v212 + 14) = 0;
            *((_QWORD *)v212 + 15) = 0;
            *((_QWORD *)v212 + 12) = v218;
            *((_QWORD *)v212 + 13) = 0;
            *(_OWORD *)(v212 + 104) = v348;
            *((_QWORD *)v212 + 15) = v349;
            v348 = 0uLL;
            v349 = 0;
            *((_QWORD *)v212 + 16) = 0;
            *((_QWORD *)v212 + 17) = 0;
            *((_QWORD *)v212 + 18) = 0;
            *((_OWORD *)v212 + 8) = v350;
            *((_QWORD *)v212 + 18) = v351;
            v350 = 0uLL;
            v351 = 0;
            *(_QWORD *)&__p[16] = v212 + 152;
            std::vector<siri::intelligence::TestCase>::__swap_out_circular_buffer((uint64_t *)a1, __p);
            v206 = *(_QWORD *)(a1 + 8);
            std::__split_buffer<siri::intelligence::TestCase>::~__split_buffer((void **)__p);
          }
          else
          {
            v202 = *(_OWORD *)v341;
            *(_QWORD *)(v200 + 16) = *(_QWORD *)&v341[16];
            *(_OWORD *)v200 = v202;
            memset(v341, 0, 24);
            v203 = v342;
            *(_OWORD *)(v200 + 24) = *(_OWORD *)&v341[24];
            *(_QWORD *)(v200 + 40) = v203;
            *(_QWORD *)&v341[32] = 0;
            v342 = 0;
            *(_QWORD *)&v341[24] = 0;
            v204 = v343;
            *(_QWORD *)(v200 + 64) = v344;
            *(_OWORD *)(v200 + 48) = v204;
            v344 = 0;
            v343 = 0uLL;
            v205 = v345;
            *(_QWORD *)(v200 + 88) = v346;
            *(_OWORD *)(v200 + 72) = v205;
            v345 = 0uLL;
            v346 = 0;
            *(_QWORD *)(v200 + 96) = v347;
            *(_QWORD *)(v200 + 104) = 0;
            *(_QWORD *)(v200 + 112) = 0;
            *(_QWORD *)(v200 + 120) = 0;
            *(_OWORD *)(v200 + 104) = v348;
            v348 = 0uLL;
            *(_QWORD *)(v200 + 120) = v349;
            *(_QWORD *)(v200 + 128) = 0;
            v349 = 0;
            *(_QWORD *)(v200 + 136) = 0;
            *(_QWORD *)(v200 + 144) = 0;
            *(_OWORD *)(v200 + 128) = v350;
            *(_QWORD *)(v200 + 144) = v351;
            v350 = 0uLL;
            v351 = 0;
            v206 = v200 + 152;
          }
          *(_QWORD *)(a1 + 8) = v206;
          *(_QWORD *)__p = &v350;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          *(_QWORD *)__p = &v348;
          std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v346) < 0)
            operator delete((void *)v345);
          if (SHIBYTE(v344) < 0)
            operator delete((void *)v343);
          if (SHIBYTE(v342) < 0)
            operator delete(*(void **)&v341[24]);
          if ((v341[23] & 0x80000000) != 0)
            operator delete(*(void **)v341);
          ++v198;
          v197 = *((int *)v196 + 8);
        }
        while (v198 < v197);
      }
      v219 = (std::__shared_weak_count *)v242;
      if ((_QWORD)v242)
      {
        v220 = (unint64_t *)(v242 + 8);
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      if (SBYTE7(v241) < 0)
        operator delete((void *)v240);
      std::__tree<std::string>::destroy((uint64_t)&v246, v247[0]);
      *(_QWORD *)v341 = &v243;
      std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v341);
      if ((char)v249 < 0)
        operator delete(v248[0]);
      v222 = v251;
      if (v251)
      {
        v223 = (unint64_t *)&v251->__shared_owners_;
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v252.__r_.__value_.__l.__data_);
      v10 = v237 + 24;
    }
    while (v237 + 24 != v236);
  }
  *(_QWORD *)v341 = &v253;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v341);
  return 1;
}

void sub_22AEDE094(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3[8];
  char v4;
  void *v5[4];
  char v6;
  uint64_t v7;
  void **v8;

  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x760]);
  __cxa_end_catch();
  YAML::Node::~Node((YAML::Node *)&v2);
  siri::intelligence::ValidationResults::~ValidationResults((siri::intelligence::ValidationResults *)v3);
  if (v4 < 0)
    operator delete(v3[6]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v5);
  if (v6 < 0)
    operator delete(v5[2]);
  v8 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  _Unwind_Resume(a1);
}

void sub_22AEDE158(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x22AEDE2C0);
}

void sub_22AEDE168()
{
  JUMPOUT(0x22AEDE2C0);
}

void sub_22AEDE170()
{
  JUMPOUT(0x22AEDE2B0);
}

void sub_22AEDE17C()
{
  JUMPOUT(0x22AEDE2A0);
}

void sub_22AEDE184()
{
  JUMPOUT(0x22AEDE298);
}

void sub_22AEDE18C(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3[8];
  char v4;
  void *v5[4];
  char v6;
  uint64_t v7;
  void **v8;

  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);
  STACK[0x760] = (unint64_t)&STACK[0x3A0];
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x760]);
  YAML::Node::~Node((YAML::Node *)&v2);
  siri::intelligence::ValidationResults::~ValidationResults((siri::intelligence::ValidationResults *)v3);
  if (v4 < 0)
    operator delete(v3[6]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v5);
  if (v6 < 0)
    operator delete(v5[2]);
  v8 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  _Unwind_Resume(a1);
}

void sub_22AEDE2C8(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3[8];
  char v4;
  void *v5[4];
  char v6;
  uint64_t v7;
  uint64_t *v8;

  YAML::Node::~Node((YAML::Node *)&v2);
  siri::intelligence::ValidationResults::~ValidationResults((siri::intelligence::ValidationResults *)v3);
  if (v4 < 0)
    operator delete(v3[6]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v5);
  if (v6 < 0)
    operator delete(v5[2]);
  v8 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  _Unwind_Resume(a1);
}

YAML::Node *YAML::Node::operator=(YAML::Node *this, const YAML::Node *a2)
{
  BOOL v3;
  _QWORD *exception;
  YAML::Node *v7;
  _QWORD *v8;
  std::string v9;

  if (*(_BYTE *)this)
    v3 = *(_BYTE *)a2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v7 = this;
    v8 = exception;
    if (*((char *)v7 + 31) < 0)
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)v7 + 1), *((_QWORD *)v7 + 2));
    else
      v9 = *(std::string *)((char *)v7 + 8);
    YAML::InvalidNode::InvalidNode(v8, (uint64_t)&v9);
  }
  if (!YAML::Node::is(this, a2))
    YAML::Node::AssignNode(this, a2);
  return this;
}

void sub_22AEDE39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::Node::~Node(void **this)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_22AEDE510(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<siri::intelligence::TestParseError>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v28 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>>(result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v16 + 48;
    v19 = *a1;
    v20 = (unint64_t)a1[1];
    if ((char *)v20 == *a1)
    {
      v23 = vdupq_n_s64(v20);
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v20 - 48);
        *((_QWORD *)v16 - 4) = *(_QWORD *)(v20 - 32);
        *((_OWORD *)v16 - 3) = v21;
        *(_QWORD *)(v20 - 40) = 0;
        *(_QWORD *)(v20 - 32) = 0;
        *(_QWORD *)(v20 - 48) = 0;
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v16 - 1) = *(_QWORD *)(v20 - 8);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 48;
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)(v20 - 8) = 0;
        *(_QWORD *)(v20 - 24) = 0;
        v20 -= 48;
      }
      while ((char *)v20 != v19);
      v23 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v10;
    v26 = v23;
    v24 = a1[2];
    a1[2] = &v15[48 * v14];
    v27 = v24;
    v25 = v23.i64[0];
    result = std::__split_buffer<siri::intelligence::TestParseError>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return result;
}

void siri::intelligence::TestParseError::~TestParseError(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](a1 + 128);
  return a1;
}

void siri::intelligence::TestCase::~TestCase(void **this)
{
  void **v2;

  v2 = this + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 13;
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void siri::intelligence::ValidationResults::~ValidationResults(char **this)
{
  char **v2;

  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  v2 = this;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

uint64_t siri::intelligence::TestSuite::SaveTests(siri::intelligence::TestCase **this)
{
  siri::intelligence::TestCase *v1;
  siri::intelligence::TestCase *v2;
  uint64_t *v3;
  protobuf::FlowTest *v4;
  siri::intelligence::TestCase *v5;
  siri::intelligence::TestCase *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  void *v15;
  int v16;
  protobuf::FlowTest *v17;
  google::protobuf::internal::ArenaImpl **v18;
  int *v19;
  uint64_t v20;
  int v21;
  protobuf::FlowTest_Test *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  std::string::size_type v26;
  _OWORD *v27;
  std::string::size_type v28;
  int v29;
  const protobuf::FlowTest_Step *v30;
  std::string::size_type v31;
  int *v32;
  uint64_t v33;
  int v34;
  protobuf::FlowTest_Step *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int i;
  uint64_t v40;
  int v41;
  int v42;
  int j;
  uint64_t v44;
  int v45;
  int k;
  siri::intelligence *v47;
  YAML::Emitter *v48;
  int v49;
  int v50;
  std::string *v51;
  std::string *v52;
  void *v53;
  int v54;
  std::string *v55;
  std::string *v56;
  void *v57;
  int v58;
  int v59;
  int m;
  siri::intelligence *v61;
  YAML::Emitter *v62;
  int v63;
  std::string *v64;
  std::string *v65;
  void *v66;
  int v67;
  int n;
  const void **v69;
  int v70;
  int v71;
  int ii;
  const void **v73;
  int v74;
  std::string *v75;
  std::string *v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  int v80;
  const char *v81;
  FILE *v82;
  char *v83;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  char v86;
  __int128 v87;
  _BOOL4 v88;
  std::string *p_str;
  size_t v90;
  char *v91;
  char **v92;
  uint64_t v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::string *v100;
  protobuf::FlowTest *v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  std::string v106;
  std::string __str;
  std::string __p;
  uint64_t v109;
  uint64_t v110;
  int **v111;
  std::__shared_weak_count *v112;
  char **v113;
  char *v114[2];
  std::vector<std::string> v115[2];

  v114[0] = 0;
  v114[1] = 0;
  v113 = v114;
  v1 = *this;
  v2 = this[1];
  while (v1 != v2)
  {
    siri::intelligence::TestCase::GetTestFilename(v1, &__p);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v113, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v1 = (siri::intelligence::TestCase *)((char *)v1 + 152);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN8protobuf8FlowTestENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((protobuf::FlowTest **)&v111);
  v3 = (uint64_t *)v113;
  if (v113 == v114)
  {
LABEL_310:
    v93 = 1;
  }
  else
  {
    while (1)
    {
      v4 = (protobuf::FlowTest *)v111;
      *((_DWORD *)v111 + 4) |= 1u;
      std::string::basic_string[abi:ne180100]<0>(&__p, "1.0");
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v4 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v100 = (std::string *)(v3 + 4);
      v5 = *this;
      v6 = this[1];
      while (v5 != v6)
      {
        siri::intelligence::TestCase::GetTestFilename(v5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v8 = *((unsigned __int8 *)v3 + 55);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = v3[5];
        if (size == v8)
        {
          if (v9 >= 0)
            v10 = (unsigned __int8 *)(v3 + 4);
          else
            v10 = (unsigned __int8 *)v100->__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v15 = (void *)__p.__r_.__value_.__r.__words[0];
            v16 = memcmp(__p.__r_.__value_.__l.__data_, v10, __p.__r_.__value_.__l.__size_);
            operator delete(v15);
            if (v16)
              goto LABEL_80;
LABEL_33:
            v17 = (protobuf::FlowTest *)v111;
            v18 = (google::protobuf::internal::ArenaImpl **)(v111 + 3);
            v19 = v111[5];
            if (!v19)
            {
              v21 = *((_DWORD *)v111 + 9);
              goto LABEL_38;
            }
            v20 = *((int *)v111 + 8);
            v21 = *v19;
            if ((int)v20 < *v19)
            {
              *((_DWORD *)v111 + 8) = v20 + 1;
              v22 = *(protobuf::FlowTest_Test **)&v19[2 * v20 + 2];
              goto LABEL_40;
            }
            if (v21 == *((_DWORD *)v111 + 9))
            {
LABEL_38:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v111 + 6, v21 + 1);
              v19 = (int *)*((_QWORD *)v17 + 5);
              v21 = *v19;
            }
            *v19 = v21 + 1;
            v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(*v18);
            v23 = *((_QWORD *)v17 + 5);
            v24 = *((int *)v17 + 8);
            *((_DWORD *)v17 + 8) = v24 + 1;
            *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
LABEL_40:
            v25 = (_OWORD *)((char *)v5 + 48);
            if (*((char *)v5 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 6), *((_QWORD *)v5 + 7));
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v25;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 8);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v26 = __p.__r_.__value_.__l.__size_;
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v26)
                goto LABEL_52;
            }
            else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            {
              goto LABEL_52;
            }
            if (*((char *)v5 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 6), *((_QWORD *)v5 + 7));
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v25;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 8);
            }
            *((_DWORD *)v22 + 4) |= 1u;
            google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
            v27 = (_OWORD *)((char *)v5 + 72);
            if (*((char *)v5 + 95) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 9), *((_QWORD *)v5 + 10));
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v27;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 11);
            }
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_64;
LABEL_59:
              if (*((char *)v5 + 95) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 9), *((_QWORD *)v5 + 10));
              }
              else
              {
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v27;
                __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 11);
              }
              *((_DWORD *)v22 + 4) |= 2u;
              google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v22 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_64;
            }
            v28 = __p.__r_.__value_.__l.__size_;
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v28)
              goto LABEL_59;
LABEL_64:
            if (!*((_BYTE *)v5 + 96))
            {
              *((_DWORD *)v22 + 4) |= 4u;
              *((_BYTE *)v22 + 64) = 0;
            }
            v29 = *((_DWORD *)v5 + 25);
            if (v29 >= 2)
            {
              *((_DWORD *)v22 + 4) |= 8u;
              *((_DWORD *)v22 + 17) = v29;
            }
            memset(&__p, 0, sizeof(__p));
            std::vector<protobuf::FlowTest_Step>::__init_with_size[abi:ne180100]<protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>(&__p, *((_QWORD *)v5 + 13), *((_QWORD *)v5 + 14), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v5 + 14) - *((_QWORD *)v5 + 13)) >> 4));
            v31 = __p.__r_.__value_.__l.__size_;
            v30 = (const protobuf::FlowTest_Step *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
            {
LABEL_79:
              v115[0].__begin_ = &__p;
              std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)v115);
              goto LABEL_80;
            }
            while (2)
            {
              v32 = (int *)*((_QWORD *)v22 + 5);
              if (v32)
              {
                v33 = *((int *)v22 + 8);
                v34 = *v32;
                if ((int)v33 < *v32)
                {
                  *((_DWORD *)v22 + 8) = v33 + 1;
                  v35 = *(protobuf::FlowTest_Step **)&v32[2 * v33 + 2];
                  goto LABEL_76;
                }
                if (v34 == *((_DWORD *)v22 + 9))
                {
LABEL_74:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v22 + 6, v34 + 1);
                  v32 = (int *)*((_QWORD *)v22 + 5);
                  v34 = *v32;
                }
                *v32 = v34 + 1;
                v35 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*((google::protobuf::internal::ArenaImpl **)v22
                                                                                           + 3));
                v36 = *((_QWORD *)v22 + 5);
                v37 = *((int *)v22 + 8);
                *((_DWORD *)v22 + 8) = v37 + 1;
                *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
LABEL_76:
                if (v30 != v35)
                {
                  protobuf::FlowTest_Step::Clear(v35);
                  protobuf::FlowTest_Step::MergeFrom(v35, v30);
                }
                v30 = (const protobuf::FlowTest_Step *)((char *)v30 + 80);
                if (v30 == (const protobuf::FlowTest_Step *)v31)
                  goto LABEL_79;
                continue;
              }
              break;
            }
            v34 = *((_DWORD *)v22 + 9);
            goto LABEL_74;
          }
          if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
            goto LABEL_33;
          v11 = 0;
          do
          {
            v12 = __p.__r_.__value_.__s.__data_[v11];
            v13 = v10[v11];
            v14 = v12 != v13 || HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 == v11++;
          }
          while (!v14);
          if (v12 == v13)
            goto LABEL_33;
        }
        else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_80:
        v5 = (siri::intelligence::TestCase *)((char *)v5 + 152);
      }
      YAML::Emitter::Emitter((YAML::Emitter *)&__p);
      v101 = (protobuf::FlowTest *)v111;
      if (*__p.__r_.__value_.__l.__data_)
        YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
      if ((*((_BYTE *)v101 + 16) & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v115, "formatVersion");
        YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
        if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
          operator delete(v115[0].__begin_);
        YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v101 + 6));
      }
      if (*((int *)v101 + 8) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(v115, "tests");
        YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
        if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
          operator delete(v115[0].__begin_);
        v38 = *((_DWORD *)v101 + 8);
        if (v38 != 1)
        {
          if (*__p.__r_.__value_.__l.__data_)
          {
            YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
            v38 = *((_DWORD *)v101 + 8);
          }
          if (v38 < 1)
            goto LABEL_323;
        }
        for (i = 0; i < v80; ++i)
        {
          v40 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>((uint64_t)v101 + 24, i);
          if (*__p.__r_.__value_.__l.__data_)
            YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
          v41 = *(_DWORD *)(v40 + 16);
          if ((v41 & 1) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v115, "name");
            YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
            if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
              operator delete(v115[0].__begin_);
            YAML::Emitter::Write((uint64_t)&__p, *(const void ***)(v40 + 48));
            v41 = *(_DWORD *)(v40 + 16);
          }
          if ((v41 & 2) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v115, "description");
            YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
            if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
              operator delete(v115[0].__begin_);
            YAML::Emitter::Write((uint64_t)&__p, *(const void ***)(v40 + 56));
            v41 = *(_DWORD *)(v40 + 16);
          }
          if ((v41 & 4) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v115, "enabled");
            YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
            if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
              operator delete(v115[0].__begin_);
            YAML::Emitter::Write((YAML::Emitter *)&__p, *(unsigned __int8 *)(v40 + 64));
          }
          if (*(int *)(v40 + 32) >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v115, "steps");
            YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
            if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
              operator delete(v115[0].__begin_);
            v42 = *(_DWORD *)(v40 + 32);
            if (v42 != 1)
            {
              if (*__p.__r_.__value_.__l.__data_)
              {
                YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
                v42 = *(_DWORD *)(v40 + 32);
              }
              if (v42 < 1)
                goto LABEL_324;
            }
            for (j = 0; j < v79; ++j)
            {
              v44 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>(v40 + 24, j);
              if (*__p.__r_.__value_.__l.__data_)
                YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
              if (*(int *)(v44 + 32) >= 1)
              {
                std::string::basic_string[abi:ne180100]<0>(v115, "setVariables");
                YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                  operator delete(v115[0].__begin_);
                v45 = *(_DWORD *)(v44 + 32);
                if (v45 != 1)
                {
                  if (*__p.__r_.__value_.__l.__data_)
                  {
                    YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
                    v45 = *(_DWORD *)(v44 + 32);
                  }
                  if (v45 < 1)
                    goto LABEL_325;
                }
                for (k = 0; k < v49; ++k)
                {
                  v47 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>(v44 + 24, k);
                  siri::intelligence::WriteFlowTest_KeyValueParameter(v47, (const protobuf::FlowTest_KeyValueParameter *)&__p, v48);
                  v49 = *(_DWORD *)(v44 + 32);
                }
                if (v49 != 1)
                {
LABEL_325:
                  if (*__p.__r_.__value_.__l.__data_)
                    YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
                }
              }
              v50 = *(_DWORD *)(v44 + 16);
              if ((v50 & 1) != 0)
              {
                if (!*(_QWORD *)(v44 + 48))
                {
                  v51 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v115, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2570);
                  v52 = google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: !value || start_from_ != nullptr: ");
                  google::protobuf::internal::LogFinisher::operator=((int)&__str, (const char **)&v52->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&v115[0].__begin_);
                }
                std::string::basic_string[abi:ne180100]<0>(v115, "startFrom");
                YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                  operator delete(v115[0].__begin_);
                if (*(_QWORD *)(v44 + 48))
                  v53 = *(void **)(v44 + 48);
                else
                  v53 = &protobuf::_FlowTest_StartFrom_default_instance_;
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
                v54 = *((_DWORD *)v53 + 4);
                if ((v54 & 1) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "responseId");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v53 + 3));
                  v54 = *((_DWORD *)v53 + 4);
                }
                if ((v54 & 2) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "activityId");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v53 + 4));
                }
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
                v50 = *(_DWORD *)(v44 + 16);
              }
              if ((v50 & 2) != 0)
              {
                if (!*(_QWORD *)(v44 + 56))
                {
                  v55 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v115, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2630);
                  v56 = google::protobuf::internal::LogMessage::operator<<(v55, "CHECK failed: !value || send_intent_ != nullptr: ");
                  google::protobuf::internal::LogFinisher::operator=((int)&__str, (const char **)&v56->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&v115[0].__begin_);
                }
                std::string::basic_string[abi:ne180100]<0>(v115, "sendIntent");
                YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                  operator delete(v115[0].__begin_);
                if (*(_QWORD *)(v44 + 56))
                  v57 = *(void **)(v44 + 56);
                else
                  v57 = &protobuf::_FlowTest_SendIntent_default_instance_;
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
                v58 = *((_DWORD *)v57 + 4);
                if ((v58 & 1) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "id");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v57 + 6));
                  v58 = *((_DWORD *)v57 + 4);
                }
                if ((v58 & 2) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "name");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v57 + 7));
                }
                if (*((int *)v57 + 8) >= 1)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "slots");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  v59 = *((_DWORD *)v57 + 8);
                  if (v59 != 1)
                  {
                    if (*__p.__r_.__value_.__l.__data_)
                    {
                      YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
                      v59 = *((_DWORD *)v57 + 8);
                    }
                    if (v59 < 1)
                      goto LABEL_326;
                  }
                  for (m = 0; m < v63; ++m)
                  {
                    v61 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)v57 + 24, m);
                    siri::intelligence::WriteFlowTest_KeyValueParameter(v61, (const protobuf::FlowTest_KeyValueParameter *)&__p, v62);
                    v63 = *((_DWORD *)v57 + 8);
                  }
                  if (v63 != 1)
                  {
LABEL_326:
                    if (*__p.__r_.__value_.__l.__data_)
                      YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
                  }
                }
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
                v50 = *(_DWORD *)(v44 + 16);
              }
              if ((v50 & 4) != 0)
              {
                if (!*(_QWORD *)(v44 + 64))
                {
                  v64 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v115, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2690);
                  v65 = google::protobuf::internal::LogMessage::operator<<(v64, "CHECK failed: !value || assert_response_ != nullptr: ");
                  google::protobuf::internal::LogFinisher::operator=((int)&__str, (const char **)&v65->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&v115[0].__begin_);
                }
                std::string::basic_string[abi:ne180100]<0>(v115, "assertResponse");
                YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                  operator delete(v115[0].__begin_);
                if (*(_QWORD *)(v44 + 64))
                  v66 = *(void **)(v44 + 64);
                else
                  v66 = &protobuf::_FlowTest_AssertResponse_default_instance_;
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
                if ((*((_BYTE *)v66 + 16) & 1) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "id");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v66 + 9));
                }
                if (*((int *)v66 + 8) >= 1)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "anyId");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  v67 = *((_DWORD *)v66 + 8);
                  if (v67 != 1)
                  {
                    if (*__p.__r_.__value_.__l.__data_)
                    {
                      YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
                      v67 = *((_DWORD *)v66 + 8);
                    }
                    if (v67 < 1)
                      goto LABEL_327;
                  }
                  for (n = 0; n < v70; ++n)
                  {
                    v69 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v66 + 24, n);
                    YAML::Emitter::Write((uint64_t)&__p, v69);
                    v70 = *((_DWORD *)v66 + 8);
                  }
                  if (v70 != 1)
                  {
LABEL_327:
                    if (*__p.__r_.__value_.__l.__data_)
                      YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
                  }
                }
                if (*((int *)v66 + 14) >= 1)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "allIds");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  v71 = *((_DWORD *)v66 + 14);
                  if (v71 != 1)
                  {
                    if (*__p.__r_.__value_.__l.__data_)
                    {
                      YAML::Emitter::EmitBeginSeq((YAML::Emitter *)&__p);
                      v71 = *((_DWORD *)v66 + 14);
                    }
                    if (v71 < 1)
                      goto LABEL_328;
                  }
                  for (ii = 0; ii < v74; ++ii)
                  {
                    v73 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v66 + 48, ii);
                    YAML::Emitter::Write((uint64_t)&__p, v73);
                    v74 = *((_DWORD *)v66 + 14);
                  }
                  if (v74 != 1)
                  {
LABEL_328:
                    if (*__p.__r_.__value_.__l.__data_)
                      YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
                  }
                }
                if ((*((_BYTE *)v66 + 16) & 2) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "count");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::WriteIntegralType<int>((uint64_t *)&__p);
                }
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
                v50 = *(_DWORD *)(v44 + 16);
              }
              if ((v50 & 8) != 0)
              {
                if (!*(_QWORD *)(v44 + 72))
                {
                  v75 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v115, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2750);
                  v76 = google::protobuf::internal::LogMessage::operator<<(v75, "CHECK failed: !value || assert_condition_ != nullptr: ");
                  google::protobuf::internal::LogFinisher::operator=((int)&__str, (const char **)&v76->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&v115[0].__begin_);
                }
                std::string::basic_string[abi:ne180100]<0>(v115, "assertCondition");
                YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                  operator delete(v115[0].__begin_);
                if (*(_QWORD *)(v44 + 72))
                  v77 = *(unsigned __int8 **)(v44 + 72);
                else
                  v77 = (unsigned __int8 *)&protobuf::_FlowTest_AssertCondition_default_instance_;
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitBeginMap((YAML::Emitter *)&__p);
                v78 = *((_DWORD *)v77 + 4);
                if ((v78 & 1) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "id");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((uint64_t)&__p, *((const void ***)v77 + 3));
                  v78 = *((_DWORD *)v77 + 4);
                }
                if ((v78 & 2) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v115, "value");
                  YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
                  if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
                    operator delete(v115[0].__begin_);
                  YAML::Emitter::Write((YAML::Emitter *)&__p, v77[32]);
                }
                if (*__p.__r_.__value_.__l.__data_)
                  YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
              }
              if (*__p.__r_.__value_.__l.__data_)
                YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
              v79 = *(_DWORD *)(v40 + 32);
            }
            if (v79 != 1)
            {
LABEL_324:
              if (*__p.__r_.__value_.__l.__data_)
                YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
            }
          }
          if ((*(_BYTE *)(v40 + 16) & 8) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v115, "repeat");
            YAML::Emitter::Write((uint64_t)&__p, (const void **)&v115[0].__begin_);
            if (SHIBYTE(v115[0].__end_cap_.__value_) < 0)
              operator delete(v115[0].__begin_);
            YAML::Emitter::WriteIntegralType<int>((uint64_t *)&__p);
          }
          if (*__p.__r_.__value_.__l.__data_)
            YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
          v80 = *((_DWORD *)v101 + 8);
        }
        if (v80 != 1)
        {
LABEL_323:
          if (*__p.__r_.__value_.__l.__data_)
            YAML::Emitter::EmitEndSeq((YAML::Emitter *)&__p);
        }
      }
      if (*__p.__r_.__value_.__l.__data_)
        YAML::Emitter::EmitEndMap((YAML::Emitter *)&__p);
      v82 = siri::intelligence::OpenDataFile(v100, (const char *)1);
      if (!v82)
        break;
      if (v109)
      {
        v83 = 0;
      }
      else
      {
        *(_BYTE *)(__p.__r_.__value_.__l.__size_ + v110) = 0;
        v83 = (char *)__p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, v83);
      memset(&v106, 0, sizeof(v106));
      siri::intelligence::StringSplit((unsigned __int8 *)&__str, "\n", (uint64_t *)&v106, v115);
      v102[0] = &v106;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      begin = v115[0].__begin_;
      end = v115[0].__end_;
      if (v115[0].__begin_ != v115[0].__end_)
      {
        v86 = 1;
        do
        {
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
          }
          else
          {
            v87 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v87;
          }
          if ((v86 & 1) != 0
            || (std::string::basic_string[abi:ne180100]<0>(v104, " "),
                siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)v104)))
          {
            siri::intelligence::StringTrimLeft(" \t\n\r", &__str, &v106);
            std::string::basic_string[abi:ne180100]<0>(v102, "- name:");
            v88 = siri::intelligence::StringStartsWith(&v106, (unsigned __int8 *)v102);
            if (v103 < 0)
              operator delete(v102[0]);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v106.__r_.__value_.__l.__data_);
              if ((v86 & 1) != 0)
              {
LABEL_287:
                if (!v88)
                  goto LABEL_295;
                goto LABEL_294;
              }
            }
            else if ((v86 & 1) != 0)
            {
              goto LABEL_287;
            }
          }
          else
          {
            LOBYTE(v88) = 1;
          }
          if ((v105 & 0x80000000) == 0)
          {
            if (!v88)
              goto LABEL_295;
LABEL_294:
            fwrite("\n", 1uLL, 1uLL, v82);
            goto LABEL_295;
          }
          operator delete(v104[0]);
          if (v88)
            goto LABEL_294;
LABEL_295:
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            v90 = __str.__r_.__value_.__l.__size_;
          fwrite(p_str, v90, 1uLL, v82);
          fwrite("\n", 1uLL, 1uLL, v82);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v86 = 0;
          ++begin;
        }
        while (begin != end);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      fclose(v82);
      YAML::Emitter::~Emitter((YAML::Emitter *)&__p);
      v91 = (char *)v3[1];
      if (v91)
      {
        do
        {
          v92 = (char **)v91;
          v91 = *(char **)v91;
        }
        while (v91);
      }
      else
      {
        do
        {
          v92 = (char **)v3[2];
          v14 = *v92 == (char *)v3;
          v3 = (uint64_t *)v92;
        }
        while (!v14);
      }
      v3 = (uint64_t *)v92;
      if (v92 == v114)
        goto LABEL_310;
    }
    if (*((char *)v3 + 55) < 0)
      v94 = (uint64_t *)v100->__r_.__value_.__r.__words[0];
    else
      v94 = v3 + 4;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Error writing to flow test file %s", v81, v94);
    YAML::Emitter::~Emitter((YAML::Emitter *)&__p);
    v93 = 0;
  }
  v95 = v112;
  if (v112)
  {
    p_shared_owners = (unint64_t *)&v112->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v113, v114[0]);
  return v93;
}

void sub_22AEDFA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;

  YAML::Emitter::~Emitter((YAML::Emitter *)&__p);
  v48 = *(std::__shared_weak_count **)(v46 - 168);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::__tree<std::string>::destroy(v46 - 160, *(char **)(v46 - 152));
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

std::string *siri::intelligence::TestSuite::GetTests@<X0>(const siri::intelligence::TestCase **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::TestCase>::__init_with_size[abi:ne180100]<siri::intelligence::TestCase*,siri::intelligence::TestCase*>(a2, *this, this[1], 0x86BCA1AF286BCA1BLL * ((this[1] - *this) >> 3));
}

std::string *siri::intelligence::TestSuite::GetParseErrors@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::TestParseError>::__init_with_size[abi:ne180100]<siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>(a2, this[3], this[4], 0xAAAAAAAAAAAAAAABLL * (this[4] - this[3]));
}

uint64_t siri::intelligence::TestSuite::AddTestCase(siri::intelligence::TestSuite *this, const siri::intelligence::TestCase *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *((_QWORD *)this + 1);
  if (v3 >= *((_QWORD *)this + 2))
  {
    result = std::vector<siri::intelligence::TestCase>::__push_back_slow_path<siri::intelligence::TestCase const&>((uint64_t *)this, a2);
  }
  else
  {
    siri::intelligence::TestCase::TestCase(*((std::string **)this + 1), a2);
    result = v3 + 152;
    *((_QWORD *)this + 1) = v3 + 152;
  }
  *((_QWORD *)this + 1) = result;
  return result;
}

void sub_22AEDFD9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

BOOL YAML::Node::is(YAML::Node *this, const YAML::Node *a2)
{
  BOOL v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *exception;
  std::string v8;

  if (*(_BYTE *)this)
    v3 = *(_BYTE *)a2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v8 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v8);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  return v4 && (v5 = (_QWORD *)*((_QWORD *)a2 + 6)) != 0 && *v4 == *v5;
}

void sub_22AEDFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t *YAML::Node::AssignNode(YAML::Node *this, const YAML::Node *a2)
{
  BOOL v3;
  YAML::detail::node *v5;
  const YAML::detail::node *v6;
  uint64_t *result;
  _QWORD *exception;
  YAML::Node *v9;
  _QWORD *v10;
  std::string v11;

  if (*(_BYTE *)this)
    v3 = *(_BYTE *)a2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v9 = this;
    v10 = exception;
    if (*((char *)v9 + 31) < 0)
      std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)v9 + 1), *((_QWORD *)v9 + 2));
    else
      v11 = *(std::string *)((char *)v9 + 8);
    YAML::InvalidNode::InvalidNode(v10, (uint64_t)&v11);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)a2);
  v5 = (YAML::detail::node *)*((_QWORD *)this + 6);
  v6 = (const YAML::detail::node *)*((_QWORD *)a2 + 6);
  if (v5)
  {
    YAML::detail::node::set_ref(v5, v6);
    result = YAML::detail::memory_holder::merge(*((uint64_t **)this + 4), *((_QWORD **)a2 + 4));
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  }
  else
  {
    *((_QWORD *)this + 6) = v6;
    return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)this + 4, (uint64_t *)a2 + 4);
  }
  return result;
}

void sub_22AEDFFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *YAML::InvalidNode::InvalidNode(_QWORD *a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  uint64_t v6;
  int v7;

  v6 = -1;
  v7 = -1;
  YAML::ErrorMsg::INVALID_NODE_WITH_KEY(a2, __p);
  YAML::Exception::Exception((uint64_t)a1, &v6, (uint64_t)__p);
  *a1 = &unk_24F5439E0;
  if (v5 < 0)
    operator delete(__p[0]);
  *a1 = &unk_24F543A60;
  return a1;
}

void sub_22AEE0064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::ErrorMsg::INVALID_NODE_WITH_KEY@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"invalid node; first invalid key: \"",
           34);
    v6 = *(char *)(a1 + 23);
    if (v6 >= 0)
      v7 = a1;
    else
      v7 = *(_QWORD *)a1;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 23);
    else
      v8 = *(_QWORD *)(a1 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
    std::stringbuf::str();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "invalid node; this may result from using a map iterator as a sequence iterator, or vice-versa");
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v15);
}

void sub_22AEE0198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Exception::Exception(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string v10;

  YAML::Exception::build_what(a2, a3, &v10);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_24F543960;
  v6 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  v7 = (std::string *)(a1 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_22AEE0258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error *v15;

  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

void YAML::Exception::build_what(_DWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  const std::string::value_type *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  if (*a1 == -1 && a1[1] == -1 && a1[2] == -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"yaml-cpp: error at line ", 24);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", column ", 9);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
    v9 = *(char *)(a2 + 23);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)a2;
    else
      v10 = *(const std::string::value_type **)a2;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 23);
    else
      v11 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
    std::stringbuf::str();
    v13[0] = *MEMORY[0x24BEDB7F0];
    v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v14[0] = v12;
    v14[1] = MEMORY[0x24BEDB848] + 16;
    if (v15 < 0)
      operator delete((void *)v14[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2E9C48](&v16);
  }
}

void sub_22AEE03F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Node::EnsureNodeExists(uint64_t ****this)
{
  _QWORD *v2;
  _QWORD *v3;
  YAML::detail::node *node;
  uint64_t v5;
  _QWORD *exception;
  YAML::Node *v7;
  _QWORD *v8;
  std::string v9;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v7 = (YAML::Node *)this;
    v8 = exception;
    if (*((char *)v7 + 31) < 0)
      std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)v7 + 1), *((_QWORD *)v7 + 2));
    else
      v9 = *(std::string *)((char *)v7 + 8);
    YAML::InvalidNode::InvalidNode(v8, (uint64_t)&v9);
  }
  if (!this[6])
  {
    v2 = (_QWORD *)operator new();
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(v2, (uint64_t)v3);
    std::shared_ptr<YAML::detail::memory_holder>::reset[abi:ne180100]<YAML::detail::memory_holder,void>(this + 4, (uint64_t)v2);
    node = (YAML::detail::node *)YAML::detail::memory::create_node(*this[4]);
    this[6] = (uint64_t ***)node;
    YAML::detail::node::mark_defined(node);
    v5 = **(_QWORD **)node;
    *(_BYTE *)v5 = 1;
    *(_DWORD *)(v5 + 16) = 1;
  }
}

void sub_22AEE053C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *YAML::detail::node::set_ref(YAML::detail::node *this, const YAML::detail::node *a2)
{
  if (***(_BYTE ***)a2)
    YAML::detail::node::mark_defined(this);
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](this, (uint64_t *)a2);
}

void std::shared_ptr<YAML::detail::memory_holder>::reset[abi:ne180100]<YAML::detail::memory_holder,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24F540818;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22AEE0724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory_holder>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory_holder *,std::shared_ptr<YAML::detail::memory_holder>::__shared_ptr_default_delete<YAML::detail::memory_holder,YAML::detail::memory_holder>,std::allocator<YAML::detail::memory_holder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unique_ptr<YAML::detail::memory_holder>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

_QWORD *std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24F5407A0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_22AEE0888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<YAML::detail::memory>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<YAML::detail::memory *,std::shared_ptr<YAML::detail::memory>::__shared_ptr_default_delete<YAML::detail::memory,YAML::detail::memory>,std::allocator<YAML::detail::memory>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<YAML::detail::memory>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x22E2E9CCCLL);
  }
}

void std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(a1, a2[1]);
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::unique_ptr<YAML::detail::memory>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::shared_ptr<YAML::detail::node>>::destroy(v2, *(_QWORD **)(v2 + 8));
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

void YAML::detail::node::mark_defined(YAML::detail::node *this)
{
  uint64_t v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = **(_QWORD **)this;
  if (!*(_BYTE *)v1)
  {
    if (!*(_DWORD *)(v1 + 16))
      *(_DWORD *)(v1 + 16) = 1;
    *(_BYTE *)v1 = 1;
    v3 = (char *)*((_QWORD *)this + 2);
    v4 = (char *)this + 24;
    if (v3 != (char *)this + 24)
    {
      do
      {
        YAML::detail::node::mark_defined(*((YAML::detail::node **)v3 + 4));
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (char *)*((_QWORD *)v3 + 2);
            v7 = *(_QWORD *)v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = v4;
  }
}

void YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  char v37[8];
  void *__p;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  char v48[8];
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;

  if (*(_DWORD *)a1 != 2)
  {
    if (*(_DWORD *)a1 == 1)
    {
      v2 = **(_QWORD **)(a1 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(a1 + 32);
        v4 = *(std::__shared_weak_count **)(a1 + 40);
        v46 = v3;
        v47 = v4;
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = v3;
          v53 = v4;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
        }
        else
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = v3;
          v53 = 0;
        }
        v48[0] = 1;
        v54 = v2;
        YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a2, (const YAML::Node *)v48);
        v21 = v53;
        if (v53)
        {
          v22 = (unint64_t *)&v53->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (SHIBYTE(v51) < 0)
          operator delete(v49);
        v24 = v47;
        if (v47)
        {
          v25 = (unint64_t *)&v47->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
LABEL_64:
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
          return;
        }
        return;
      }
    }
LABEL_15:
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_BYTE *)(a2 + 56) = 1;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_BYTE *)(a2 + 112) = 1;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    return;
  }
  v8 = *(uint64_t **)(a1 + 16);
  v10 = *v8;
  v9 = v8[1];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(std::__shared_weak_count **)(a1 + 40);
  v44 = v12;
  v45 = v13;
  if (!v13)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = v12;
    v48[0] = 1;
    v53 = 0;
    v54 = v10;
    v36 = 0;
LABEL_41:
    __p = 0;
    v39 = 0;
    v40 = 0;
    v41 = v12;
    v42 = 0;
    goto LABEL_42;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = v12;
  v53 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  v12 = *(_QWORD *)(a1 + 32);
  v17 = *(std::__shared_weak_count **)(a1 + 40);
  v48[0] = 1;
  v54 = v10;
  v36 = v17;
  if (!v17)
    goto LABEL_41;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  __p = 0;
  v39 = 0;
  v40 = 0;
  v41 = v12;
  v42 = v17;
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
LABEL_42:
  v37[0] = 1;
  v43 = v9;
  YAML::detail::iterator_value::iterator_value((YAML::detail::iterator_value *)a2, (const YAML::Node *)v48, (const YAML::Node *)v37);
  v27 = v42;
  if (v42)
  {
    v28 = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  if (v36)
  {
    v30 = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v32 = v53;
  if (v53)
  {
    v33 = (unint64_t *)&v53->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  v24 = v45;
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v26 = __ldaxr(v35);
    while (__stlxr(v26 - 1, v35));
    goto LABEL_64;
  }
}

void sub_22AEE0DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  YAML::Node::~Node(&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  YAML::Node::~Node((void **)(v18 - 72));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Mark(YAML::Node *this)
{
  uint64_t v2;
  _QWORD *exception;
  std::string v5;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v5 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  v2 = *((_QWORD *)this + 6);
  if (v2)
    return *(_QWORD *)(**(_QWORD **)v2 + 4);
  else
    return -1;
}

void sub_22AEE0EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void YAML::detail::iterator_value::~iterator_value(void **this)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void YAML::Node::operator[]<char [14]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [14],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEE118C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [6]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [6],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEE1418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ValidateFlowTest_Test(std::__shared_weak_count **this, const YAML::Node *a2, siri::intelligence::ValidationResults *a3)
{
  siri::intelligence *v3;
  unsigned __int8 v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL4 IsBool;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  siri::intelligence::ValidationResults *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  siri::intelligence::ValidationResults *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  BOOL v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  int IsANumber;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  int v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  int v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  _QWORD *exception;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t i;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _BYTE v163[40];
  std::__shared_weak_count *v164;
  _BYTE v165[40];
  std::__shared_weak_count *v166;
  uint64_t **v167;
  std::string v168;
  std::string __p;
  _BYTE v170[40];
  std::__shared_weak_count *v171;
  _BYTE v172[32];
  std::__shared_weak_count *v173;
  uint64_t **v174;
  char v175;
  __int128 v176;
  uint64_t v177;
  _QWORD v178[2];
  char v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  uint64_t v185;

  v3 = (siri::intelligence *)this;
  v185 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F46010);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46010))
  {
    std::string::basic_string[abi:ne180100]<0>(v172, "name");
    std::string::basic_string[abi:ne180100]<0>(&v172[24], "description");
    std::string::basic_string[abi:ne180100]<0>(&v174, "enabled");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v176 + 1, "steps");
    std::string::basic_string[abi:ne180100]<0>(v178, "repeat");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F46060, (const void **)v172, 5);
    for (i = 0; i != -15; i -= 3)
    {
      if (*(&v180 + i * 8) < 0)
        operator delete((void *)v178[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F46060, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46010);
    v3 = (siri::intelligence *)this;
  }
  if (*(_BYTE *)v3)
  {
    v5 = (uint64_t **)*((_QWORD *)v3 + 6);
    if (!v5)
    {
      *(_DWORD *)v165 = 0;
      memset(&v165[8], 0, 32);
      v166 = 0;
      goto LABEL_14;
    }
    YAML::detail::node_data::begin(**v5, (uint64_t)v172);
    v3 = (siri::intelligence *)this;
    v6 = this[4];
    v7 = this[5];
    if (!v7)
    {
      *(_OWORD *)v165 = *(_OWORD *)v172;
      *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
      *(_QWORD *)&v165[32] = v6;
      v166 = 0;
      goto LABEL_16;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_OWORD *)v165 = *(_OWORD *)v172;
    *(_OWORD *)&v165[16] = *(_OWORD *)&v172[16];
    *(_QWORD *)&v165[32] = v6;
    v166 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    v3 = (siri::intelligence *)this;
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
LABEL_14:
      v3 = (siri::intelligence *)this;
    }
  }
  else
  {
    *(_DWORD *)v165 = 0;
    memset(&v165[8], 0, 32);
    v166 = 0;
  }
LABEL_16:
  if (*(_BYTE *)v3 && (v12 = (uint64_t **)*((_QWORD *)v3 + 6)) != 0)
  {
    YAML::detail::node_data::end(**v12, (uint64_t)v172);
    v13 = this[4];
    v14 = this[5];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)&v170[16] = *(_OWORD *)&v172[16];
      *(_QWORD *)&v170[32] = v13;
      v171 = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)&v170[16] = *(_OWORD *)&v172[16];
      *(_QWORD *)&v170[32] = v13;
      v171 = 0;
    }
  }
  else
  {
    *(_DWORD *)v170 = 0;
    memset(&v170[8], 0, 32);
    v171 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v165 == *(_DWORD *)v170)
    {
      v19 = &v165[8];
      v20 = &v170[8];
      if (*(_DWORD *)v165 != 1)
      {
        if (*(_DWORD *)v165 != 2)
          break;
        v19 = &v165[16];
        v20 = &v170[16];
      }
      if (*(_QWORD *)v19 == *(_QWORD *)v20)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v165, (uint64_t)v172);
    if (!v175)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v177) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v163, (const std::string::value_type *)v176, *((std::string::size_type *)&v176 + 1));
      }
      else
      {
        *(_OWORD *)v163 = v176;
        *(_QWORD *)&v163[16] = v177;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)v163);
    }
    *(_QWORD *)v163 = &v175;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v163, &__p);
    v21 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F46060, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21 == &unk_253F46068)
    {
      if (!v175)
      {
        v148 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v177) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v163, (const std::string::value_type *)v176, *((std::string::size_type *)&v176 + 1));
        }
        else
        {
          *(_OWORD *)v163 = v176;
          *(_QWORD *)&v163[16] = v177;
        }
        YAML::InvalidNode::InvalidNode(v148, (uint64_t)v163);
      }
      *(_QWORD *)v163 = &v175;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)v163, &v168);
      v22 = std::string::insert(&v168, 0, "Unsupported field for Test found in flow file: ");
      __p = *v22;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (!v179)
      {
        v147 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v182) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v163, (const std::string::value_type *)v181, *((std::string::size_type *)&v181 + 1));
        }
        else
        {
          *(_OWORD *)v163 = v181;
          *(_QWORD *)&v163[16] = v182;
        }
        YAML::InvalidNode::InvalidNode(v147, (uint64_t)v163);
      }
      if (v184)
        v23 = *(_QWORD *)(**(_QWORD **)v184 + 4);
      else
        HIDWORD(v23) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&__p, SHIDWORD(v23));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
    }
    v24 = v183;
    if (v183)
    {
      v25 = (unint64_t *)&v183->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v182) < 0)
      operator delete((void *)v181);
    v27 = (std::__shared_weak_count *)v178[0];
    if (v178[0])
    {
      v28 = (unint64_t *)(v178[0] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v177) < 0)
      operator delete((void *)v176);
    v30 = v173;
    if (v173)
    {
      v31 = (unint64_t *)&v173->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((v172[31] & 0x80000000) != 0)
      operator delete(*(void **)&v172[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v165);
  }
  v33 = v171;
  if (v171)
  {
    v34 = (unint64_t *)&v171->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v166;
  if (v166)
  {
    v37 = (unint64_t *)&v166->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  YAML::Node::operator[]<char [5]>((YAML::Node *)this, "name", (uint64_t)v172);
  v39 = !v172[0] || v174 && !*(_BYTE *)**v174;
  v40 = v173;
  if (v173)
  {
    v41 = (unint64_t *)&v173->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (v39)
      goto LABEL_119;
  }
  else if (v39)
  {
    goto LABEL_119;
  }
  YAML::Node::operator[]<char [5]>((YAML::Node *)this, "name", (uint64_t)v172);
  if (!v172[0])
  {
    v150 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v150, (uint64_t)v165);
  }
  if (v174)
  {
    v43 = **v174;
    if (*(_BYTE *)v43)
      v44 = *(_DWORD *)(v43 + 16);
    else
      v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  v45 = v173;
  if (v173)
  {
    v46 = (unint64_t *)&v173->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
    operator delete(*(void **)&v172[8]);
  if (v44 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v170, "Invalid string value found for 'name' on Test");
    YAML::Node::operator[]<char [5]>((YAML::Node *)this, "name", (uint64_t)v172);
    if (!v172[0])
    {
      v155 = __cxa_allocate_exception(0x38uLL);
      if ((v172[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
      }
      else
      {
        *(_OWORD *)v165 = *(_OWORD *)&v172[8];
        *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
      }
      YAML::InvalidNode::InvalidNode(v155, (uint64_t)v165);
    }
    if (v174)
      v48 = *(_QWORD *)(**v174 + 4);
    else
      HIDWORD(v48) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v170, HIDWORD(v48) + 1);
    v49 = v173;
    if (v173)
    {
      v50 = (unint64_t *)&v173->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v172[31] & 0x80000000) != 0)
      operator delete(*(void **)&v172[8]);
    if ((v170[23] & 0x80000000) != 0)
      operator delete(*(void **)v170);
  }
LABEL_119:
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "description", (uint64_t)v172);
  v52 = !v172[0] || v174 && !*(_BYTE *)**v174;
  v53 = v173;
  if (v173)
  {
    v54 = (unint64_t *)&v173->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (v52)
      goto LABEL_160;
  }
  else if (v52)
  {
    goto LABEL_160;
  }
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "description", (uint64_t)v172);
  if (!v172[0])
  {
    v151 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v151, (uint64_t)v165);
  }
  if (v174)
  {
    v56 = **v174;
    if (*(_BYTE *)v56)
      v57 = *(_DWORD *)(v56 + 16);
    else
      v57 = 0;
  }
  else
  {
    v57 = 1;
  }
  v58 = v173;
  if (v173)
  {
    v59 = (unint64_t *)&v173->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
    operator delete(*(void **)&v172[8]);
  if (v57 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v170, "Invalid string value found for 'description' on Test");
    YAML::Node::operator[]<char [12]>((YAML::Node *)this, "description", (uint64_t)v172);
    if (!v172[0])
    {
      v156 = __cxa_allocate_exception(0x38uLL);
      if ((v172[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
      }
      else
      {
        *(_OWORD *)v165 = *(_OWORD *)&v172[8];
        *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
      }
      YAML::InvalidNode::InvalidNode(v156, (uint64_t)v165);
    }
    if (v174)
      v61 = *(_QWORD *)(**v174 + 4);
    else
      HIDWORD(v61) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v170, HIDWORD(v61) + 1);
    v62 = v173;
    if (v173)
    {
      v63 = (unint64_t *)&v173->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if ((v172[31] & 0x80000000) != 0)
      operator delete(*(void **)&v172[8]);
    if ((v170[23] & 0x80000000) != 0)
      operator delete(*(void **)v170);
  }
LABEL_160:
  YAML::Node::operator[]<char [8]>((YAML::Node *)this, "enabled", (uint64_t)v172);
  v65 = !v172[0] || v174 && !*(_BYTE *)**v174;
  v66 = v173;
  if (v173)
  {
    v67 = (unint64_t *)&v173->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (v65)
      goto LABEL_211;
  }
  else if (v65)
  {
    goto LABEL_211;
  }
  YAML::Node::operator[]<char [8]>((YAML::Node *)this, "enabled", (uint64_t)v172);
  if (!v172[0])
  {
    v152 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v152, (uint64_t)v165);
  }
  if (v174 && (v69 = **v174, *(_BYTE *)v69) && *(_DWORD *)(v69 + 16) == 2)
  {
    YAML::Node::operator[]<char [8]>((YAML::Node *)this, "enabled", (uint64_t)v165);
    if (!v165[0])
    {
      v159 = __cxa_allocate_exception(0x38uLL);
      if ((v165[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v170, *(const std::string::value_type **)&v165[8], *(std::string::size_type *)&v165[16]);
      }
      else
      {
        *(_OWORD *)v170 = *(_OWORD *)&v165[8];
        *(_QWORD *)&v170[16] = *(_QWORD *)&v165[24];
      }
      YAML::InvalidNode::InvalidNode(v159, (uint64_t)v170);
    }
    *(_QWORD *)v170 = v165;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v170, (std::string *)v163);
    IsBool = siri::intelligence::StringIsBool((uint64_t)v163);
    if ((v163[23] & 0x80000000) != 0)
      operator delete(*(void **)v163);
    v71 = v166;
    if (v166)
    {
      v72 = (unint64_t *)&v166->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = !IsBool;
    if ((v165[31] & 0x80000000) != 0)
      operator delete(*(void **)&v165[8]);
  }
  else
  {
    v74 = 1;
  }
  v75 = v173;
  if (v173)
  {
    v76 = (unint64_t *)&v173->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (!v74)
      goto LABEL_211;
  }
  else if (!v74)
  {
    goto LABEL_211;
  }
  std::string::basic_string[abi:ne180100]<0>(v170, "Invalid BOOL value found for 'enabled' on Test");
  YAML::Node::operator[]<char [8]>((YAML::Node *)this, "enabled", (uint64_t)v172);
  if (!v172[0])
  {
    v157 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v157, (uint64_t)v165);
  }
  if (v174)
    v78 = *(_QWORD *)(**v174 + 4);
  else
    HIDWORD(v78) = -1;
  siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v170, HIDWORD(v78) + 1);
  v79 = v173;
  if (v173)
  {
    v80 = (unint64_t *)&v173->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
    operator delete(*(void **)&v172[8]);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
LABEL_211:
  YAML::Node::operator[]<char [6]>((YAML::Node *)this, "steps", (uint64_t)v172);
  v82 = !v172[0] || v174 && !*(_BYTE *)**v174;
  v83 = v173;
  if (v173)
  {
    v84 = (unint64_t *)&v173->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (v82)
      goto LABEL_313;
  }
  else if (v82)
  {
    goto LABEL_313;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)this, "steps", (uint64_t)v172);
  if (!v172[0])
  {
    v153 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v153, (uint64_t)v165);
  }
  if (v174)
  {
    v86 = **v174;
    if (*(_BYTE *)v86)
      v87 = *(_DWORD *)(v86 + 16);
    else
      v87 = 0;
  }
  else
  {
    v87 = 1;
  }
  v88 = v173;
  if (v173)
  {
    v89 = (unint64_t *)&v173->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
    operator delete(*(void **)&v172[8]);
  if (v87 == 3)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)this, "steps", (uint64_t)v165);
    if (v165[0] && v167)
    {
      YAML::detail::node_data::begin(**v167, (uint64_t)v172);
      v91 = *(_QWORD *)&v165[32];
      v92 = v166;
      if (v166)
      {
        v93 = (unint64_t *)&v166->__shared_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
        *(_OWORD *)v170 = *(_OWORD *)v172;
        *(_OWORD *)&v170[16] = *(_OWORD *)&v172[16];
        *(_QWORD *)&v170[32] = v91;
        v171 = v92;
        do
          v95 = __ldxr(v93);
        while (__stxr(v95 + 1, v93));
        do
          v96 = __ldaxr(v93);
        while (__stlxr(v96 - 1, v93));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      else
      {
        *(_OWORD *)v170 = *(_OWORD *)v172;
        *(_OWORD *)&v170[16] = *(_OWORD *)&v172[16];
        *(_QWORD *)&v170[32] = *(_QWORD *)&v165[32];
        v171 = 0;
      }
    }
    else
    {
      *(_DWORD *)v170 = 0;
      memset(&v170[8], 0, 32);
      v171 = 0;
    }
    if (v165[0] && v167)
    {
      YAML::detail::node_data::end(**v167, (uint64_t)v172);
      v102 = *(_QWORD *)&v165[32];
      v103 = v166;
      if (v166)
      {
        v104 = (unint64_t *)&v166->__shared_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        *(_OWORD *)v163 = *(_OWORD *)v172;
        *(_OWORD *)&v163[16] = *(_OWORD *)&v172[16];
        *(_QWORD *)&v163[32] = v102;
        v164 = v103;
        do
          v106 = __ldxr(v104);
        while (__stxr(v106 + 1, v104));
        do
          v107 = __ldaxr(v104);
        while (__stlxr(v107 - 1, v104));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      else
      {
        *(_OWORD *)v163 = *(_OWORD *)v172;
        *(_OWORD *)&v163[16] = *(_OWORD *)&v172[16];
        *(_QWORD *)&v163[32] = *(_QWORD *)&v165[32];
        v164 = 0;
      }
    }
    else
    {
      *(_DWORD *)v163 = 0;
      memset(&v163[8], 0, 32);
      v164 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v170 == *(_DWORD *)v163)
      {
        v108 = &v170[8];
        v109 = &v163[8];
        if (*(_DWORD *)v170 != 1)
        {
          if (*(_DWORD *)v170 != 2)
            break;
          v108 = &v170[16];
          v109 = &v163[16];
        }
        if (*(_QWORD *)v108 == *(_QWORD *)v109)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v170, (uint64_t)v172);
      siri::intelligence::ValidateFlowTest_Step((std::__shared_weak_count **)v172, a2, v110);
      v111 = v183;
      if (v183)
      {
        v112 = (unint64_t *)&v183->__shared_owners_;
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
      if (SHIBYTE(v182) < 0)
        operator delete((void *)v181);
      v114 = (std::__shared_weak_count *)v178[0];
      if (v178[0])
      {
        v115 = (unint64_t *)(v178[0] + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      if (SHIBYTE(v177) < 0)
        operator delete((void *)v176);
      v117 = v173;
      if (v173)
      {
        v118 = (unint64_t *)&v173->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      if ((v172[31] & 0x80000000) != 0)
        operator delete(*(void **)&v172[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v170);
    }
    v120 = v164;
    if (v164)
    {
      v121 = (unint64_t *)&v164->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = v171;
    if (v171)
    {
      v124 = (unint64_t *)&v171->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = v166;
    if (v166)
    {
      v127 = (unint64_t *)&v166->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    if ((v165[31] & 0x80000000) != 0)
    {
      v101 = *(void **)&v165[8];
      goto LABEL_312;
    }
  }
  else
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)this, "steps", (uint64_t)v172);
    siri::intelligence::ValidateFlowTest_Step((std::__shared_weak_count **)v172, a2, v97);
    v98 = v173;
    if (v173)
    {
      v99 = (unint64_t *)&v173->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if ((v172[31] & 0x80000000) != 0)
    {
      v101 = *(void **)&v172[8];
LABEL_312:
      operator delete(v101);
    }
  }
LABEL_313:
  YAML::Node::operator[]<char [7]>((YAML::Node *)this, "repeat", (uint64_t)v172);
  v129 = !v172[0] || v174 && !*(_BYTE *)**v174;
  v130 = v173;
  if (v173)
  {
    v131 = (unint64_t *)&v173->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (v129)
      return;
  }
  else if (v129)
  {
    return;
  }
  YAML::Node::operator[]<char [7]>((YAML::Node *)this, "repeat", (uint64_t)v172);
  if (!v172[0])
  {
    v154 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v154, (uint64_t)v165);
  }
  if (v174 && (v133 = **v174, *(_BYTE *)v133) && *(_DWORD *)(v133 + 16) == 2)
  {
    YAML::Node::operator[]<char [7]>((YAML::Node *)this, "repeat", (uint64_t)v165);
    if (!v165[0])
    {
      v160 = __cxa_allocate_exception(0x38uLL);
      if ((v165[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v170, *(const std::string::value_type **)&v165[8], *(std::string::size_type *)&v165[16]);
      }
      else
      {
        *(_OWORD *)v170 = *(_OWORD *)&v165[8];
        *(_QWORD *)&v170[16] = *(_QWORD *)&v165[24];
      }
      YAML::InvalidNode::InvalidNode(v160, (uint64_t)v170);
    }
    *(_QWORD *)v170 = v165;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v170, (std::string *)v163);
    IsANumber = siri::intelligence::StringIsANumber((const std::string *)v163);
    if ((v163[23] & 0x80000000) != 0)
      operator delete(*(void **)v163);
    v135 = v166;
    if (v166)
    {
      v136 = (unint64_t *)&v166->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v138 = IsANumber ^ 1;
    if ((v165[31] & 0x80000000) != 0)
      operator delete(*(void **)&v165[8]);
  }
  else
  {
    v138 = 1;
  }
  v139 = v173;
  if (v173)
  {
    v140 = (unint64_t *)&v173->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v172[8]);
    if (!v138)
      return;
  }
  else if (!v138)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v170, "Invalid int32 value found for 'repeat' on Test");
  YAML::Node::operator[]<char [7]>((YAML::Node *)this, "repeat", (uint64_t)v172);
  if (!v172[0])
  {
    v158 = __cxa_allocate_exception(0x38uLL);
    if ((v172[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v165, *(const std::string::value_type **)&v172[8], *(std::string::size_type *)&v172[16]);
    }
    else
    {
      *(_OWORD *)v165 = *(_OWORD *)&v172[8];
      *(_QWORD *)&v165[16] = *(_QWORD *)&v172[24];
    }
    YAML::InvalidNode::InvalidNode(v158, (uint64_t)v165);
  }
  if (v174)
    v142 = *(_DWORD *)(**v174 + 8) + 1;
  else
    v142 = 0;
  siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v170, v142);
  v143 = v173;
  if (v173)
  {
    v144 = (unint64_t *)&v173->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if ((v172[31] & 0x80000000) != 0)
    operator delete(*(void **)&v172[8]);
  if ((v170[23] & 0x80000000) != 0)
    operator delete(*(void **)v170);
}

void sub_22AEE2DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  uint64_t v56;

  v56 = 0;
  while (1)
  {
    if (*(char *)(v54 + v56 + 119) < 0)
      operator delete(*(void **)(v54 + v56 + 96));
    v56 -= 24;
    if (v56 == -120)
    {
      __cxa_guard_abort(&qword_253F46010);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_22AEE3158(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22AEE3408(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v16[8];
  void *__p[2];
  __int128 v18;
  __int128 v19;
  _BYTE v20[8];
  void *v21[2];
  __int128 v22;
  __int128 v23;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  v20[0] = 0;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v16[0] = 0;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 0u;
  std::pair<YAML::Node,YAML::Node>::pair[abi:ne180100]<YAML::Node,YAML::Node,0>((uint64_t)this + 56, (uint64_t)v20, (uint64_t)v16);
  v9 = (std::__shared_weak_count *)v19;
  if ((_QWORD)v19)
  {
    v10 = (unint64_t *)(v19 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  v12 = (std::__shared_weak_count *)v23;
  if ((_QWORD)v23)
  {
    v13 = (unint64_t *)(v23 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SBYTE7(v22) < 0)
    operator delete(v21[0]);
  return this;
}

void sub_22AEE3714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void **v16;

  YAML::Node::~Node((void **)&a9);
  YAML::Node::~Node(&a16);
  YAML::Node::~Node(v16);
  _Unwind_Resume(a1);
}

uint64_t std::pair<YAML::Node,YAML::Node>::pair[abi:ne180100]<YAML::Node,YAML::Node,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 8);
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)a3;
  v11 = (std::string *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v12 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 96) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 48);
  return a1;
}

void sub_22AEE381C(_Unwind_Exception *a1)
{
  void **v1;

  YAML::Node::~Node(v1);
  _Unwind_Resume(a1);
}

YAML::detail::iterator_value *YAML::detail::iterator_value::iterator_value(YAML::detail::iterator_value *this, const YAML::Node *a2, const YAML::Node *a3)
{
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::pair<YAML::Node,YAML::Node>::pair[abi:ne180100]<true,0>((uint64_t)this + 56, (uint64_t)a2, (uint64_t)a3);
  return this;
}

void sub_22AEE386C(_Unwind_Exception *a1)
{
  void **v1;

  YAML::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<YAML::Node,YAML::Node>::pair[abi:ne180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 8);
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)a3;
  v11 = (std::string *)(a1 + 64);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v12 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 96) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 48);
  return a1;
}

void sub_22AEE3964(_Unwind_Exception *a1)
{
  void **v1;

  YAML::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void YAML::as_if<std::string,void>::operator()(YAML::Node **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  _QWORD *exception;
  int v7;
  uint64_t v8;
  int v9;

  if (YAML::Node::Type(*a1) != 2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v8 = YAML::Node::Mark(*a1);
    v9 = v7;
    YAML::BadConversion::BadConversion(exception, &v8);
    *exception = &unk_24F540728;
  }
  v4 = YAML::Node::Scalar(*a1);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = v4[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_22AEE3AC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::Node::Type(YAML::Node *this)
{
  uint64_t **v2;
  uint64_t v3;
  _QWORD *exception;
  std::string v6;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v6 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v6);
  }
  v2 = (uint64_t **)*((_QWORD *)this + 6);
  if (!v2)
    return 1;
  v3 = **v2;
  if (*(_BYTE *)v3)
    return *(unsigned int *)(v3 + 16);
  else
    return 0;
}

void sub_22AEE3BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t *YAML::Node::Scalar(YAML::Node *this)
{
  _QWORD **v2;
  _QWORD *exception;
  std::string v5;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v5 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v5);
  }
  v2 = (_QWORD **)*((_QWORD *)this + 6);
  if (v2)
    return (uint64_t *)(**v2 + 56);
  else
    return YAML::detail::node_data::empty_scalar(this);
}

void sub_22AEE3CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *YAML::BadConversion::BadConversion(_QWORD *a1, _DWORD *a2)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "bad conversion");
  YAML::Exception::Exception((uint64_t)a1, a2, (uint64_t)__p);
  *a1 = &unk_24F5439E0;
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = &unk_24F543AA0;
  return a1;
}

void sub_22AEE3D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::TypedBadConversion<std::string>::~TypedBadConversion(std::runtime_error *a1)
{
  YAML::Exception::~Exception(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t YAML::detail::node_iterator_base<YAML::detail::node>::operator++(uint64_t result)
{
  _BYTE ****v1;
  _BYTE ****v2;

  if (*(_DWORD *)result == 2)
  {
    v1 = *(_BYTE *****)(result + 24);
    v2 = (_BYTE ****)(*(_QWORD *)(result + 16) + 16);
    if (v1 != v2)
    {
      while (!****v2 || !***v2[1])
      {
        v2 += 2;
        if (v2 == v1)
        {
          v2 = *(_BYTE *****)(result + 24);
          break;
        }
      }
    }
    *(_QWORD *)(result + 16) = v2;
  }
  else if (*(_DWORD *)result == 1)
  {
    *(_QWORD *)(result + 8) += 8;
  }
  return result;
}

uint64_t YAML::detail::node::get<std::string>(uint64_t **a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *a1;
  v4 = a3[1];
  v12 = *a3;
  v13 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = YAML::detail::node_ref::get<std::string>(v3, a2, &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_22AEE3E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node_ref::get<std::string>(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = *a1;
  v4 = a3[1];
  v12 = *a3;
  v13 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = YAML::detail::node_data::get<std::string>(v3, a2, &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_22AEE3F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node_data::get<std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unsigned int v3;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  void *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 2)
  {
    if (v3 == 3)
    {
      v16 = (std::__shared_weak_count *)a3[1];
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      if (v3 == 2)
      {
        exception = __cxa_allocate_exception(0x38uLL);
        YAML::BadSubscript::BadSubscript<std::string>(exception, a2);
      }
      for (i = *(uint64_t **)(a1 + 112); i != *(uint64_t **)(a1 + 120); i += 2)
      {
        v8 = *i;
        v9 = a3[1];
        v22 = *a3;
        v23 = (std::__shared_weak_count *)v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = YAML::detail::node::equals<std::string>(v8, a2, &v22);
        v13 = v23;
        if (v23)
        {
          v14 = (unint64_t *)&v23->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v12)
          return i[1];
      }
    }
  }
  return 0;
}

void sub_22AEE40A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t YAML::detail::node::equals<std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string::size_type size;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::string *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  _BOOL8 v27;
  void *v28;
  std::__shared_weak_count *v30;
  char v31[8];
  void *__p;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::string v38;

  memset(&v38, 0, sizeof(v38));
  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  v30 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    __p = 0;
    v33 = 0;
    v34 = 0;
    v35 = v4;
    v36 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    __p = 0;
    v33 = 0;
    v34 = 0;
    v35 = v4;
    v36 = 0;
  }
  v31[0] = 1;
  v37 = a1;
  v9 = YAML::convert<std::string>::decode((YAML::Node *)v31, &v38);
  v10 = v36;
  if (v36)
  {
    v11 = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (!v9)
    goto LABEL_39;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    size = v38.__r_.__value_.__l.__size_;
  v16 = a2[23];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 1);
  if (size == v16)
  {
    if (v17 >= 0)
      v18 = a2;
    else
      v18 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v38.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v28 = (void *)v38.__r_.__value_.__r.__words[0];
      v27 = memcmp(v38.__r_.__value_.__l.__data_, v18, v38.__r_.__value_.__l.__size_) == 0;
      goto LABEL_43;
    }
    if (!*((_BYTE *)&v38.__r_.__value_.__s + 23))
      return 1;
    v19 = HIBYTE(v38.__r_.__value_.__r.__words[2]) - 1;
    v20 = &v38;
    do
    {
      v22 = v20->__r_.__value_.__s.__data_[0];
      v20 = (std::string *)((char *)v20 + 1);
      v21 = v22;
      v24 = *v18++;
      v23 = v24;
      v26 = v19-- != 0;
      v27 = v21 == v23;
    }
    while (v21 == v23 && v26);
  }
  else
  {
LABEL_39:
    v27 = 0;
  }
  if ((*((_BYTE *)&v38.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v28 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_43:
    operator delete(v28);
  }
  return v27;
}

void sub_22AEE4298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v11;

  YAML::Node::~Node(&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v11 - 33) < 0)
    operator delete(*(void **)(v11 - 56));
  _Unwind_Resume(a1);
}

_QWORD *YAML::BadSubscript::BadSubscript<std::string>(_QWORD *a1, uint64_t a2)
{
  void *__p;
  char v5;
  uint64_t v6;
  int v7;

  v6 = -1;
  v7 = -1;
  YAML::ErrorMsg::BAD_SUBSCRIPT_WITH_KEY(a2);
  YAML::Exception::Exception((uint64_t)a1, &v6, (uint64_t)&__p);
  *a1 = &unk_24F5439E0;
  if (v5 < 0)
    operator delete(__p);
  *a1 = &unk_24F543C60;
  return a1;
}

void sub_22AEE4348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::ErrorMsg::BAD_SUBSCRIPT_WITH_KEY(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"operator[] call on a scalar", 27);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" (key: \"", 8);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\")", 2);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB7F0];
  v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v13);
}

void sub_22AEE4460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL YAML::convert<std::string>::decode(YAML::Node *a1, std::string *a2)
{
  int v4;
  const std::string *v5;

  v4 = YAML::Node::Type(a1);
  if (v4 == 2)
  {
    v5 = (const std::string *)YAML::Node::Scalar(a1);
    std::string::operator=(a2, v5);
  }
  return v4 == 2;
}

uint64_t streamable_to_string<char [14],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEE4594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [6],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEE4674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [5]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [5],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEE48B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [12]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [12],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEE4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [8]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [8],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEE4DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ValidateFlowTest_Step(std::__shared_weak_count **this, const YAML::Node *a2, siri::intelligence::ValidationResults *a3)
{
  siri::intelligence *v3;
  unsigned __int8 v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  siri::intelligence::ValidationResults *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  siri::intelligence::ValidationResults *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  void *v114;
  std::string *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  BOOL v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  BOOL v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  BOOL v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  void *v189;
  std::string *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  BOOL v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  int v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  BOOL v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  BOOL v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  siri::intelligence::ValidationResults *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  _BYTE *v259;
  _BYTE *v260;
  siri::intelligence::ValidationResults *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  BOOL v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  int v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unsigned __int8 v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  _BYTE *v310;
  void *v311;
  std::string *v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  BOOL v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  BOOL v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  uint64_t v346;
  int v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  BOOL v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  int v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  BOOL v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  int IsANumber;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  int v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  int v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  BOOL v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  int v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  unsigned __int8 v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  _BYTE *v414;
  _BYTE *v415;
  void *v416;
  std::string *v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  BOOL v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  int v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  BOOL v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t v451;
  _BOOL4 IsBool;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  int v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  int v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  _QWORD *exception;
  _QWORD *v468;
  _QWORD *v469;
  _QWORD *v470;
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t i;
  _QWORD *v483;
  _QWORD *v484;
  uint64_t j;
  _QWORD *v486;
  uint64_t k;
  _QWORD *v488;
  uint64_t m;
  _QWORD *v490;
  uint64_t n;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  _QWORD *v495;
  _QWORD *v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  _QWORD *v505;
  _QWORD *v506;
  _QWORD *v507;
  _QWORD *v508;
  _QWORD *v509;
  _QWORD *v510;
  _QWORD *v511;
  _QWORD *v512;
  _QWORD *v513;
  _QWORD *v514;
  _QWORD *v515;
  _QWORD *v516;
  _QWORD *v517;
  _QWORD *v518;
  _BYTE v521[40];
  std::__shared_weak_count *v522;
  uint64_t **v523;
  _BYTE __p[40];
  std::__shared_weak_count *v525;
  _BYTE v526[40];
  std::__shared_weak_count *v527;
  uint64_t **v528;
  std::string v529;
  std::string v530;
  _BYTE v531[40];
  std::__shared_weak_count *v532;
  _BYTE v533[32];
  std::__shared_weak_count *v534;
  uint64_t **v535;
  char v536;
  void *v537[2];
  uint64_t v538;
  char v539;
  _QWORD v540[2];
  char v541;
  char v542;
  __int128 v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  uint64_t v546;
  uint64_t v547;

  v3 = (siri::intelligence *)this;
  v547 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F46018);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46018))
  {
    std::string::basic_string[abi:ne180100]<0>(v533, "setVariables");
    std::string::basic_string[abi:ne180100]<0>(&v533[24], "startFrom");
    std::string::basic_string[abi:ne180100]<0>(&v535, "sendIntent");
    std::string::basic_string[abi:ne180100]<0>(&v537[1], "assertResponse");
    std::string::basic_string[abi:ne180100]<0>(v540, "assertCondition");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F46078, (const void **)v533, 5);
    for (i = 0; i != -15; i -= 3)
    {
      if (*(&v542 + i * 8) < 0)
        operator delete((void *)v540[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F46078, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46018);
    v3 = (siri::intelligence *)this;
  }
  if (*(_BYTE *)v3)
  {
    v5 = (uint64_t **)*((_QWORD *)v3 + 6);
    if (!v5)
    {
      *(_DWORD *)v526 = 0;
      memset(&v526[8], 0, 32);
      v527 = 0;
      goto LABEL_14;
    }
    YAML::detail::node_data::begin(**v5, (uint64_t)v533);
    v3 = (siri::intelligence *)this;
    v6 = this[4];
    v7 = this[5];
    if (!v7)
    {
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = v6;
      v527 = 0;
      goto LABEL_16;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_OWORD *)v526 = *(_OWORD *)v533;
    *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
    *(_QWORD *)&v526[32] = v6;
    v527 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    v3 = (siri::intelligence *)this;
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
LABEL_14:
      v3 = (siri::intelligence *)this;
    }
  }
  else
  {
    *(_DWORD *)v526 = 0;
    memset(&v526[8], 0, 32);
    v527 = 0;
  }
LABEL_16:
  if (*(_BYTE *)v3 && (v12 = (uint64_t **)*((_QWORD *)v3 + 6)) != 0)
  {
    YAML::detail::node_data::end(**v12, (uint64_t)v533);
    v13 = this[4];
    v14 = this[5];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_OWORD *)v521 = *(_OWORD *)v533;
      *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v521[32] = v13;
      v522 = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_OWORD *)v521 = *(_OWORD *)v533;
      *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v521[32] = v13;
      v522 = 0;
    }
  }
  else
  {
    *(_DWORD *)v521 = 0;
    memset(&v521[8], 0, 32);
    v522 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v526 == *(_DWORD *)v521)
    {
      v19 = &v526[8];
      v20 = &v521[8];
      if (*(_DWORD *)v526 != 1)
      {
        if (*(_DWORD *)v526 != 2)
          break;
        v19 = &v526[16];
        v20 = &v521[16];
      }
      if (*(_QWORD *)v19 == *(_QWORD *)v20)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v526, (uint64_t)v533);
    if (!v536)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v538) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v531, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
      }
      else
      {
        *(_OWORD *)v531 = *(_OWORD *)v537;
        *(_QWORD *)&v531[16] = v538;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)v531);
    }
    *(_QWORD *)v531 = &v536;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v531, (std::string *)__p);
    v21 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F46078, (const void **)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v21 == &unk_253F46080)
    {
      if (!v536)
      {
        v473 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v538) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v531, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
        }
        else
        {
          *(_OWORD *)v531 = *(_OWORD *)v537;
          *(_QWORD *)&v531[16] = v538;
        }
        YAML::InvalidNode::InvalidNode(v473, (uint64_t)v531);
      }
      *(_QWORD *)v531 = &v536;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)v531, &v530);
      v22 = std::string::insert(&v530, 0, "Unsupported field for Step found in flow file: ");
      *(std::string *)__p = *v22;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (!v541)
      {
        v472 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v544) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v531, (const std::string::value_type *)v543, *((std::string::size_type *)&v543 + 1));
        }
        else
        {
          *(_OWORD *)v531 = v543;
          *(_QWORD *)&v531[16] = v544;
        }
        YAML::InvalidNode::InvalidNode(v472, (uint64_t)v531);
      }
      if (v546)
        v23 = *(_QWORD *)(**(_QWORD **)v546 + 4);
      else
        HIDWORD(v23) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)__p, SHIDWORD(v23));
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v530.__r_.__value_.__l.__data_);
    }
    v24 = v545;
    if (v545)
    {
      v25 = (unint64_t *)&v545->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v544) < 0)
      operator delete((void *)v543);
    v27 = (std::__shared_weak_count *)v540[0];
    if (v540[0])
    {
      v28 = (unint64_t *)(v540[0] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v538) < 0)
      operator delete(v537[0]);
    v30 = v534;
    if (v534)
    {
      v31 = (unint64_t *)&v534->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v526);
  }
  v33 = v522;
  if (v522)
  {
    v34 = (unint64_t *)&v522->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v527;
  if (v527)
  {
    v37 = (unint64_t *)&v527->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  YAML::Node::operator[]<char [13]>((YAML::Node *)this, "setVariables", (uint64_t)v533);
  v39 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v40 = v534;
  if (v534)
  {
    v41 = (unint64_t *)&v534->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v39)
      goto LABEL_180;
  }
  else if (v39)
  {
    goto LABEL_180;
  }
  YAML::Node::operator[]<char [13]>((YAML::Node *)this, "setVariables", (uint64_t)v533);
  if (!v533[0])
  {
    v483 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v483, (uint64_t)v526);
  }
  if (v535)
  {
    v43 = **v535;
    if (*(_BYTE *)v43)
      v44 = *(_DWORD *)(v43 + 16);
    else
      v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  v45 = v534;
  if (v534)
  {
    v46 = (unint64_t *)&v534->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v44 == 3)
  {
    YAML::Node::operator[]<char [13]>((YAML::Node *)this, "setVariables", (uint64_t)v526);
    if (v526[0] && v528)
    {
      YAML::detail::node_data::begin(**v528, (uint64_t)v533);
      v48 = *(_QWORD *)&v526[32];
      v49 = v527;
      if (v527)
      {
        v50 = (unint64_t *)&v527->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        *(_OWORD *)v521 = *(_OWORD *)v533;
        *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v521[32] = v48;
        v522 = v49;
        do
          v52 = __ldxr(v50);
        while (__stxr(v52 + 1, v50));
        do
          v53 = __ldaxr(v50);
        while (__stlxr(v53 - 1, v50));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      else
      {
        *(_OWORD *)v521 = *(_OWORD *)v533;
        *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v521[32] = *(_QWORD *)&v526[32];
        v522 = 0;
      }
    }
    else
    {
      *(_DWORD *)v521 = 0;
      memset(&v521[8], 0, 32);
      v522 = 0;
    }
    if (v526[0] && v528)
    {
      YAML::detail::node_data::end(**v528, (uint64_t)v533);
      v59 = *(_QWORD *)&v526[32];
      v60 = v527;
      if (v527)
      {
        v61 = (unint64_t *)&v527->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        *(_OWORD *)v531 = *(_OWORD *)v533;
        *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v531[32] = v59;
        v532 = v60;
        do
          v63 = __ldxr(v61);
        while (__stxr(v63 + 1, v61));
        do
          v64 = __ldaxr(v61);
        while (__stlxr(v64 - 1, v61));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      else
      {
        *(_OWORD *)v531 = *(_OWORD *)v533;
        *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v531[32] = *(_QWORD *)&v526[32];
        v532 = 0;
      }
    }
    else
    {
      *(_DWORD *)v531 = 0;
      memset(&v531[8], 0, 32);
      v532 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v521 == *(_DWORD *)v531)
      {
        v65 = &v521[8];
        v66 = &v531[8];
        if (*(_DWORD *)v521 != 1)
        {
          if (*(_DWORD *)v521 != 2)
            break;
          v65 = &v521[16];
          v66 = &v531[16];
        }
        if (*(_QWORD *)v65 == *(_QWORD *)v66)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v521, (uint64_t)v533);
      siri::intelligence::ValidateFlowTest_KeyValueParameter((std::__shared_weak_count **)v533, a2, v67);
      v68 = v545;
      if (v545)
      {
        v69 = (unint64_t *)&v545->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if (SHIBYTE(v544) < 0)
        operator delete((void *)v543);
      v71 = (std::__shared_weak_count *)v540[0];
      if (v540[0])
      {
        v72 = (unint64_t *)(v540[0] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (SHIBYTE(v538) < 0)
        operator delete(v537[0]);
      v74 = v534;
      if (v534)
      {
        v75 = (unint64_t *)&v534->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      if ((v533[31] & 0x80000000) != 0)
        operator delete(*(void **)&v533[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v521);
    }
    v77 = v532;
    if (v532)
    {
      v78 = (unint64_t *)&v532->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v522;
    if (v522)
    {
      v81 = (unint64_t *)&v522->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v83 = v527;
    if (v527)
    {
      v84 = (unint64_t *)&v527->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    if ((v526[31] & 0x80000000) != 0)
    {
      v58 = *(void **)&v526[8];
      goto LABEL_179;
    }
  }
  else
  {
    YAML::Node::operator[]<char [13]>((YAML::Node *)this, "setVariables", (uint64_t)v533);
    siri::intelligence::ValidateFlowTest_KeyValueParameter((std::__shared_weak_count **)v533, a2, v54);
    v55 = v534;
    if (v534)
    {
      v56 = (unint64_t *)&v534->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
    {
      v58 = *(void **)&v533[8];
LABEL_179:
      operator delete(v58);
    }
  }
LABEL_180:
  YAML::Node::operator[]<char [10]>((YAML::Node *)this, "startFrom", (uint64_t)v533);
  v86 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v87 = v534;
  if (v534)
  {
    v88 = (unint64_t *)&v534->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v86)
      goto LABEL_385;
  }
  else if (v86)
  {
    goto LABEL_385;
  }
  YAML::Node::operator[]<char [10]>((YAML::Node *)this, "startFrom", (uint64_t)v533);
  if (!v533[0])
  {
    v484 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v484, (uint64_t)v526);
  }
  if (v535)
  {
    v90 = **v535;
    if (*(_BYTE *)v90)
      v91 = *(_DWORD *)(v90 + 16);
    else
      v91 = 0;
  }
  else
  {
    v91 = 1;
  }
  v92 = v534;
  if (v534)
  {
    v93 = (unint64_t *)&v534->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v91 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v521, "Invalid array value found for 'startFrom' on Step");
    YAML::Node::operator[]<char [10]>((YAML::Node *)this, "startFrom", (uint64_t)v533);
    if (!v533[0])
    {
      v492 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v492, (uint64_t)v526);
    }
    if (v535)
      v95 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v95) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v521, HIDWORD(v95) + 1);
    v96 = v534;
    if (v534)
    {
      v97 = (unint64_t *)&v534->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v521[23] & 0x80000000) != 0)
      operator delete(*(void **)v521);
  }
  YAML::Node::operator[]<char [10]>((YAML::Node *)this, "startFrom", (uint64_t)v526);
  v99 = atomic_load((unsigned __int8 *)&qword_253F46028);
  if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_253F46028))
  {
    std::string::basic_string[abi:ne180100]<0>(v533, "responseId");
    std::string::basic_string[abi:ne180100]<0>(&v533[24], "activityId");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F460A8, (const void **)v533, 2);
    for (j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE((&v534)[j]) < 0)
        operator delete(*(void **)&v533[j * 8 + 24]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F460A8, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46028);
  }
  if (v526[0] && v528)
  {
    YAML::detail::node_data::begin(**v528, (uint64_t)v533);
    v100 = *(_QWORD *)&v526[32];
    v101 = v527;
    if (v527)
    {
      v102 = (unint64_t *)&v527->__shared_owners_;
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
      *(_OWORD *)v521 = *(_OWORD *)v533;
      *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v521[32] = v100;
      v522 = v101;
      do
        v104 = __ldxr(v102);
      while (__stxr(v104 + 1, v102));
      do
        v105 = __ldaxr(v102);
      while (__stlxr(v105 - 1, v102));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    else
    {
      *(_OWORD *)v521 = *(_OWORD *)v533;
      *(_OWORD *)&v521[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v521[32] = *(_QWORD *)&v526[32];
      v522 = 0;
    }
  }
  else
  {
    *(_DWORD *)v521 = 0;
    memset(&v521[8], 0, 32);
    v522 = 0;
  }
  if (v526[0] && v528)
  {
    YAML::detail::node_data::end(**v528, (uint64_t)v533);
    v106 = *(_QWORD *)&v526[32];
    v107 = v527;
    if (v527)
    {
      v108 = (unint64_t *)&v527->__shared_owners_;
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = v106;
      v532 = v107;
      do
        v110 = __ldxr(v108);
      while (__stxr(v110 + 1, v108));
      do
        v111 = __ldaxr(v108);
      while (__stlxr(v111 - 1, v108));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    else
    {
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = *(_QWORD *)&v526[32];
      v532 = 0;
    }
  }
  else
  {
    *(_DWORD *)v531 = 0;
    memset(&v531[8], 0, 32);
    v532 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v521 == *(_DWORD *)v531)
    {
      v112 = &v521[8];
      v113 = &v531[8];
      if (*(_DWORD *)v521 != 1)
      {
        if (*(_DWORD *)v521 != 2)
          break;
        v112 = &v521[16];
        v113 = &v531[16];
      }
      if (*(_QWORD *)v112 == *(_QWORD *)v113)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v521, (uint64_t)v533);
    if (!v536)
    {
      v468 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v538) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v537;
        *(_QWORD *)&__p[16] = v538;
      }
      YAML::InvalidNode::InvalidNode(v468, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v536;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v530);
    v114 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F460A8, (const void **)&v530.__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v530.__r_.__value_.__l.__data_);
    if (v114 == &unk_253F460B0)
    {
      if (!v536)
      {
        v475 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v538) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v537;
          *(_QWORD *)&__p[16] = v538;
        }
        YAML::InvalidNode::InvalidNode(v475, (uint64_t)__p);
      }
      *(_QWORD *)__p = &v536;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v529);
      v115 = std::string::insert(&v529, 0, "Unsupported field for StartFrom found in flow file: ");
      v530 = *v115;
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      if (!v541)
      {
        v474 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v544) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v543, *((std::string::size_type *)&v543 + 1));
        }
        else
        {
          *(_OWORD *)__p = v543;
          *(_QWORD *)&__p[16] = v544;
        }
        YAML::InvalidNode::InvalidNode(v474, (uint64_t)__p);
      }
      if (v546)
        v116 = *(_QWORD *)(**(_QWORD **)v546 + 4);
      else
        HIDWORD(v116) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&v530, SHIDWORD(v116));
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v530.__r_.__value_.__l.__data_);
      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v529.__r_.__value_.__l.__data_);
    }
    v117 = v545;
    if (v545)
    {
      v118 = (unint64_t *)&v545->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    if (SHIBYTE(v544) < 0)
      operator delete((void *)v543);
    v120 = (std::__shared_weak_count *)v540[0];
    if (v540[0])
    {
      v121 = (unint64_t *)(v540[0] + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    if (SHIBYTE(v538) < 0)
      operator delete(v537[0]);
    v123 = v534;
    if (v534)
    {
      v124 = (unint64_t *)&v534->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v521);
  }
  v126 = v532;
  if (v532)
  {
    v127 = (unint64_t *)&v532->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v522;
  if (v522)
  {
    v130 = (unint64_t *)&v522->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "responseId", (uint64_t)v533);
  v132 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v133 = v534;
  if (v534)
  {
    v134 = (unint64_t *)&v534->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v132)
      goto LABEL_337;
  }
  else if (v132)
  {
    goto LABEL_337;
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "responseId", (uint64_t)v533);
  if (!v533[0])
  {
    v494 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v521, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v521 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v521[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v494, (uint64_t)v521);
  }
  if (v535)
  {
    v136 = **v535;
    if (*(_BYTE *)v136)
      v137 = *(_DWORD *)(v136 + 16);
    else
      v137 = 0;
  }
  else
  {
    v137 = 1;
  }
  v138 = v534;
  if (v534)
  {
    v139 = (unint64_t *)&v534->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v137 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'responseId' on StartFrom");
    YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "responseId", (uint64_t)v533);
    if (!v533[0])
    {
      v507 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v521, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v521 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v521[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v507, (uint64_t)v521);
    }
    if (v535)
      v141 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v141) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v141) + 1);
    v142 = v534;
    if (v534)
    {
      v143 = (unint64_t *)&v534->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_337:
  YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "activityId", (uint64_t)v533);
  v145 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v146 = v534;
  if (v534)
  {
    v147 = (unint64_t *)&v534->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v145)
      goto LABEL_378;
LABEL_351:
    YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "activityId", (uint64_t)v533);
    if (!v533[0])
    {
      v495 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v521, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v521 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v521[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v495, (uint64_t)v521);
    }
    if (v535)
    {
      v149 = **v535;
      if (*(_BYTE *)v149)
        v150 = *(_DWORD *)(v149 + 16);
      else
        v150 = 0;
    }
    else
    {
      v150 = 1;
    }
    v151 = v534;
    if (v534)
    {
      v152 = (unint64_t *)&v534->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if (v150 != 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'activityId' on StartFrom");
      YAML::Node::operator[]<char [11]>((YAML::Node *)v526, "activityId", (uint64_t)v533);
      if (!v533[0])
      {
        v508 = __cxa_allocate_exception(0x38uLL);
        if ((v533[31] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v521, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
        }
        else
        {
          *(_OWORD *)v521 = *(_OWORD *)&v533[8];
          *(_QWORD *)&v521[16] = *(_QWORD *)&v533[24];
        }
        YAML::InvalidNode::InvalidNode(v508, (uint64_t)v521);
      }
      if (v535)
        v154 = *(_DWORD *)(**v535 + 8) + 1;
      else
        v154 = 0;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, v154);
      v155 = v534;
      if (v534)
      {
        v156 = (unint64_t *)&v534->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      if ((v533[31] & 0x80000000) != 0)
        operator delete(*(void **)&v533[8]);
      if ((v531[23] & 0x80000000) != 0)
        operator delete(*(void **)v531);
    }
    goto LABEL_378;
  }
  if (!v145)
    goto LABEL_351;
LABEL_378:
  v158 = v527;
  if (v527)
  {
    v159 = (unint64_t *)&v527->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if ((v526[31] & 0x80000000) != 0)
    operator delete(*(void **)&v526[8]);
LABEL_385:
  YAML::Node::operator[]<char [11]>((YAML::Node *)this, "sendIntent", (uint64_t)v533);
  v161 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v162 = v534;
  if (v534)
  {
    v163 = (unint64_t *)&v534->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v161)
      goto LABEL_692;
  }
  else if (v161)
  {
    goto LABEL_692;
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)this, "sendIntent", (uint64_t)v533);
  if (!v533[0])
  {
    v486 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v486, (uint64_t)v526);
  }
  if (v535)
  {
    v165 = **v535;
    if (*(_BYTE *)v165)
      v166 = *(_DWORD *)(v165 + 16);
    else
      v166 = 0;
  }
  else
  {
    v166 = 1;
  }
  v167 = v534;
  if (v534)
  {
    v168 = (unint64_t *)&v534->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v166 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v521, "Invalid array value found for 'sendIntent' on Step");
    YAML::Node::operator[]<char [11]>((YAML::Node *)this, "sendIntent", (uint64_t)v533);
    if (!v533[0])
    {
      v493 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v493, (uint64_t)v526);
    }
    if (v535)
      v170 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v170) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v521, HIDWORD(v170) + 1);
    v171 = v534;
    if (v534)
    {
      v172 = (unint64_t *)&v534->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v521[23] & 0x80000000) != 0)
      operator delete(*(void **)v521);
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)this, "sendIntent", (uint64_t)v521);
  v174 = atomic_load((unsigned __int8 *)&qword_253F46030);
  if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_253F46030))
  {
    std::string::basic_string[abi:ne180100]<0>(v533, "id");
    std::string::basic_string[abi:ne180100]<0>(&v533[24], "name");
    std::string::basic_string[abi:ne180100]<0>(&v535, "slots");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F460C0, (const void **)v533, 3);
    for (k = 0; k != -9; k -= 3)
    {
      if (SHIBYTE(v537[k]) < 0)
        operator delete((&v535)[k]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F460C0, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46030);
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::begin(**v523, (uint64_t)v533);
    v175 = *(_QWORD *)&v521[32];
    v176 = v522;
    if (v522)
    {
      v177 = (unint64_t *)&v522->__shared_owners_;
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = v175;
      v527 = v176;
      do
        v179 = __ldxr(v177);
      while (__stxr(v179 + 1, v177));
      do
        v180 = __ldaxr(v177);
      while (__stlxr(v180 - 1, v177));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = *(_QWORD *)&v521[32];
      v527 = 0;
    }
  }
  else
  {
    *(_DWORD *)v526 = 0;
    memset(&v526[8], 0, 32);
    v527 = 0;
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::end(**v523, (uint64_t)v533);
    v181 = *(_QWORD *)&v521[32];
    v182 = v522;
    if (v522)
    {
      v183 = (unint64_t *)&v522->__shared_owners_;
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = v181;
      v532 = v182;
      do
        v185 = __ldxr(v183);
      while (__stxr(v185 + 1, v183));
      do
        v186 = __ldaxr(v183);
      while (__stlxr(v186 - 1, v183));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    else
    {
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = *(_QWORD *)&v521[32];
      v532 = 0;
    }
  }
  else
  {
    *(_DWORD *)v531 = 0;
    memset(&v531[8], 0, 32);
    v532 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v526 == *(_DWORD *)v531)
    {
      v187 = &v526[8];
      v188 = &v531[8];
      if (*(_DWORD *)v526 != 1)
      {
        if (*(_DWORD *)v526 != 2)
          break;
        v187 = &v526[16];
        v188 = &v531[16];
      }
      if (*(_QWORD *)v187 == *(_QWORD *)v188)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v526, (uint64_t)v533);
    if (!v536)
    {
      v469 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v538) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v537;
        *(_QWORD *)&__p[16] = v538;
      }
      YAML::InvalidNode::InvalidNode(v469, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v536;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v530);
    v189 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F460C0, (const void **)&v530.__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v530.__r_.__value_.__l.__data_);
    if (v189 == &unk_253F460C8)
    {
      if (!v536)
      {
        v477 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v538) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v537;
          *(_QWORD *)&__p[16] = v538;
        }
        YAML::InvalidNode::InvalidNode(v477, (uint64_t)__p);
      }
      *(_QWORD *)__p = &v536;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v529);
      v190 = std::string::insert(&v529, 0, "Unsupported field for SendIntent found in flow file: ");
      v530 = *v190;
      v190->__r_.__value_.__l.__size_ = 0;
      v190->__r_.__value_.__r.__words[2] = 0;
      v190->__r_.__value_.__r.__words[0] = 0;
      if (!v541)
      {
        v476 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v544) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v543, *((std::string::size_type *)&v543 + 1));
        }
        else
        {
          *(_OWORD *)__p = v543;
          *(_QWORD *)&__p[16] = v544;
        }
        YAML::InvalidNode::InvalidNode(v476, (uint64_t)__p);
      }
      if (v546)
        v191 = *(_QWORD *)(**(_QWORD **)v546 + 4);
      else
        HIDWORD(v191) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&v530, SHIDWORD(v191));
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v530.__r_.__value_.__l.__data_);
      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v529.__r_.__value_.__l.__data_);
    }
    v192 = v545;
    if (v545)
    {
      v193 = (unint64_t *)&v545->__shared_owners_;
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    if (SHIBYTE(v544) < 0)
      operator delete((void *)v543);
    v195 = (std::__shared_weak_count *)v540[0];
    if (v540[0])
    {
      v196 = (unint64_t *)(v540[0] + 8);
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    if (SHIBYTE(v538) < 0)
      operator delete(v537[0]);
    v198 = v534;
    if (v534)
    {
      v199 = (unint64_t *)&v534->__shared_owners_;
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v526);
  }
  v201 = v532;
  if (v532)
  {
    v202 = (unint64_t *)&v532->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = v527;
  if (v527)
  {
    v205 = (unint64_t *)&v527->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  v207 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v208 = v534;
  if (v534)
  {
    v209 = (unint64_t *)&v534->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v207)
      goto LABEL_542;
  }
  else if (v207)
  {
    goto LABEL_542;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  if (!v533[0])
  {
    v497 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v497, (uint64_t)v526);
  }
  if (v535)
  {
    v211 = **v535;
    if (*(_BYTE *)v211)
      v212 = *(_DWORD *)(v211 + 16);
    else
      v212 = 0;
  }
  else
  {
    v212 = 1;
  }
  v213 = v534;
  if (v534)
  {
    v214 = (unint64_t *)&v534->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v212 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'id' on SendIntent");
    YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
    if (!v533[0])
    {
      v509 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v509, (uint64_t)v526);
    }
    if (v535)
      v216 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v216) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v216) + 1);
    v217 = v534;
    if (v534)
    {
      v218 = (unint64_t *)&v534->__shared_owners_;
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_542:
  YAML::Node::operator[]<char [5]>((YAML::Node *)v521, "name", (uint64_t)v533);
  v220 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v221 = v534;
  if (v534)
  {
    v222 = (unint64_t *)&v534->__shared_owners_;
    do
      v223 = __ldaxr(v222);
    while (__stlxr(v223 - 1, v222));
    if (!v223)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v220)
      goto LABEL_583;
  }
  else if (v220)
  {
    goto LABEL_583;
  }
  YAML::Node::operator[]<char [5]>((YAML::Node *)v521, "name", (uint64_t)v533);
  if (!v533[0])
  {
    v498 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v498, (uint64_t)v526);
  }
  if (v535)
  {
    v224 = **v535;
    if (*(_BYTE *)v224)
      v225 = *(_DWORD *)(v224 + 16);
    else
      v225 = 0;
  }
  else
  {
    v225 = 1;
  }
  v226 = v534;
  if (v534)
  {
    v227 = (unint64_t *)&v534->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v225 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'name' on SendIntent");
    YAML::Node::operator[]<char [5]>((YAML::Node *)v521, "name", (uint64_t)v533);
    if (!v533[0])
    {
      v510 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v510, (uint64_t)v526);
    }
    if (v535)
      v229 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v229) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v229) + 1);
    v230 = v534;
    if (v534)
    {
      v231 = (unint64_t *)&v534->__shared_owners_;
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_583:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "slots", (uint64_t)v533);
  v233 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v234 = v534;
  if (v534)
  {
    v235 = (unint64_t *)&v534->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v233)
      goto LABEL_685;
  }
  else if (v233)
  {
    goto LABEL_685;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "slots", (uint64_t)v533);
  if (!v533[0])
  {
    v499 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v499, (uint64_t)v526);
  }
  if (v535)
  {
    v237 = **v535;
    if (*(_BYTE *)v237)
      v238 = *(_DWORD *)(v237 + 16);
    else
      v238 = 0;
  }
  else
  {
    v238 = 1;
  }
  v239 = v534;
  if (v534)
  {
    v240 = (unint64_t *)&v534->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v238 == 3)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "slots", (uint64_t)v526);
    if (v526[0] && v528)
    {
      YAML::detail::node_data::begin(**v528, (uint64_t)v533);
      v242 = *(_QWORD *)&v526[32];
      v243 = v527;
      if (v527)
      {
        v244 = (unint64_t *)&v527->__shared_owners_;
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
        *(_OWORD *)v531 = *(_OWORD *)v533;
        *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v531[32] = v242;
        v532 = v243;
        do
          v246 = __ldxr(v244);
        while (__stxr(v246 + 1, v244));
        do
          v247 = __ldaxr(v244);
        while (__stlxr(v247 - 1, v244));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
          std::__shared_weak_count::__release_weak(v243);
        }
      }
      else
      {
        *(_OWORD *)v531 = *(_OWORD *)v533;
        *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&v531[32] = *(_QWORD *)&v526[32];
        v532 = 0;
      }
    }
    else
    {
      *(_DWORD *)v531 = 0;
      memset(&v531[8], 0, 32);
      v532 = 0;
    }
    if (v526[0] && v528)
    {
      YAML::detail::node_data::end(**v528, (uint64_t)v533);
      v253 = *(_QWORD *)&v526[32];
      v254 = v527;
      if (v527)
      {
        v255 = (unint64_t *)&v527->__shared_owners_;
        do
          v256 = __ldxr(v255);
        while (__stxr(v256 + 1, v255));
        *(_OWORD *)__p = *(_OWORD *)v533;
        *(_OWORD *)&__p[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&__p[32] = v253;
        v525 = v254;
        do
          v257 = __ldxr(v255);
        while (__stxr(v257 + 1, v255));
        do
          v258 = __ldaxr(v255);
        while (__stlxr(v258 - 1, v255));
        if (!v258)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v533;
        *(_OWORD *)&__p[16] = *(_OWORD *)&v533[16];
        *(_QWORD *)&__p[32] = *(_QWORD *)&v526[32];
        v525 = 0;
      }
    }
    else
    {
      *(_DWORD *)__p = 0;
      memset(&__p[8], 0, 32);
      v525 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v531 == *(_DWORD *)__p)
      {
        v259 = &v531[8];
        v260 = &__p[8];
        if (*(_DWORD *)v531 != 1)
        {
          if (*(_DWORD *)v531 != 2)
            break;
          v259 = &v531[16];
          v260 = &__p[16];
        }
        if (*(_QWORD *)v259 == *(_QWORD *)v260)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v531, (uint64_t)v533);
      siri::intelligence::ValidateFlowTest_KeyValueParameter((std::__shared_weak_count **)v533, a2, v261);
      v262 = v545;
      if (v545)
      {
        v263 = (unint64_t *)&v545->__shared_owners_;
        do
          v264 = __ldaxr(v263);
        while (__stlxr(v264 - 1, v263));
        if (!v264)
        {
          ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
          std::__shared_weak_count::__release_weak(v262);
        }
      }
      if (SHIBYTE(v544) < 0)
        operator delete((void *)v543);
      v265 = (std::__shared_weak_count *)v540[0];
      if (v540[0])
      {
        v266 = (unint64_t *)(v540[0] + 8);
        do
          v267 = __ldaxr(v266);
        while (__stlxr(v267 - 1, v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
          std::__shared_weak_count::__release_weak(v265);
        }
      }
      if (SHIBYTE(v538) < 0)
        operator delete(v537[0]);
      v268 = v534;
      if (v534)
      {
        v269 = (unint64_t *)&v534->__shared_owners_;
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 - 1, v269));
        if (!v270)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
      if ((v533[31] & 0x80000000) != 0)
        operator delete(*(void **)&v533[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v531);
    }
    v271 = v525;
    if (v525)
    {
      v272 = (unint64_t *)&v525->__shared_owners_;
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
    v274 = v532;
    if (v532)
    {
      v275 = (unint64_t *)&v532->__shared_owners_;
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
        std::__shared_weak_count::__release_weak(v274);
      }
    }
    v277 = v527;
    if (v527)
    {
      v278 = (unint64_t *)&v527->__shared_owners_;
      do
        v279 = __ldaxr(v278);
      while (__stlxr(v279 - 1, v278));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
        std::__shared_weak_count::__release_weak(v277);
      }
    }
    if ((v526[31] & 0x80000000) == 0)
      goto LABEL_685;
    v252 = *(void **)&v526[8];
  }
  else
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "slots", (uint64_t)v533);
    siri::intelligence::ValidateFlowTest_KeyValueParameter((std::__shared_weak_count **)v533, a2, v248);
    v249 = v534;
    if (v534)
    {
      v250 = (unint64_t *)&v534->__shared_owners_;
      do
        v251 = __ldaxr(v250);
      while (__stlxr(v251 - 1, v250));
      if (!v251)
      {
        ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
        std::__shared_weak_count::__release_weak(v249);
      }
    }
    if ((v533[31] & 0x80000000) == 0)
      goto LABEL_685;
    v252 = *(void **)&v533[8];
  }
  operator delete(v252);
LABEL_685:
  v280 = v522;
  if (v522)
  {
    v281 = (unint64_t *)&v522->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  if ((v521[31] & 0x80000000) != 0)
    operator delete(*(void **)&v521[8]);
LABEL_692:
  YAML::Node::operator[]<char [15]>((YAML::Node *)this, "assertResponse", (uint64_t)v533);
  v283 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v284 = v534;
  if (v534)
  {
    v285 = (unint64_t *)&v534->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
      std::__shared_weak_count::__release_weak(v284);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v283)
      goto LABEL_989;
  }
  else if (v283)
  {
    goto LABEL_989;
  }
  YAML::Node::operator[]<char [15]>((YAML::Node *)this, "assertResponse", (uint64_t)v533);
  if (!v533[0])
  {
    v488 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v488, (uint64_t)v526);
  }
  if (v535)
  {
    v287 = **v535;
    if (*(_BYTE *)v287)
      v288 = *(_DWORD *)(v287 + 16);
    else
      v288 = 0;
  }
  else
  {
    v288 = 1;
  }
  v289 = v534;
  if (v534)
  {
    v290 = (unint64_t *)&v534->__shared_owners_;
    do
      v291 = __ldaxr(v290);
    while (__stlxr(v291 - 1, v290));
    if (!v291)
    {
      ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
      std::__shared_weak_count::__release_weak(v289);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v288 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v521, "Invalid array value found for 'assertResponse' on Step");
    YAML::Node::operator[]<char [15]>((YAML::Node *)this, "assertResponse", (uint64_t)v533);
    if (!v533[0])
    {
      v496 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v496, (uint64_t)v526);
    }
    if (v535)
      v292 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v292) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v521, HIDWORD(v292) + 1);
    v293 = v534;
    if (v534)
    {
      v294 = (unint64_t *)&v534->__shared_owners_;
      do
        v295 = __ldaxr(v294);
      while (__stlxr(v295 - 1, v294));
      if (!v295)
      {
        ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
        std::__shared_weak_count::__release_weak(v293);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v521[23] & 0x80000000) != 0)
      operator delete(*(void **)v521);
  }
  YAML::Node::operator[]<char [15]>((YAML::Node *)this, "assertResponse", (uint64_t)v521);
  v296 = atomic_load((unsigned __int8 *)&qword_253F46038);
  if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_253F46038))
  {
    std::string::basic_string[abi:ne180100]<0>(v533, "id");
    std::string::basic_string[abi:ne180100]<0>(&v533[24], "anyId");
    std::string::basic_string[abi:ne180100]<0>(&v535, "allIds");
    std::string::basic_string[abi:ne180100]<0>(&v537[1], "count");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F460D8, (const void **)v533, 4);
    for (m = 0; m != -12; m -= 3)
    {
      if (*(&v539 + m * 8) < 0)
        operator delete(v537[m + 1]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F460D8, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46038);
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::begin(**v523, (uint64_t)v533);
    v297 = *(_QWORD *)&v521[32];
    v298 = v522;
    if (v522)
    {
      v299 = (unint64_t *)&v522->__shared_owners_;
      do
        v300 = __ldxr(v299);
      while (__stxr(v300 + 1, v299));
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = v297;
      v527 = v298;
      do
        v301 = __ldxr(v299);
      while (__stxr(v301 + 1, v299));
      do
        v302 = __ldaxr(v299);
      while (__stlxr(v302 - 1, v299));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
        std::__shared_weak_count::__release_weak(v298);
      }
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = *(_QWORD *)&v521[32];
      v527 = 0;
    }
  }
  else
  {
    *(_DWORD *)v526 = 0;
    memset(&v526[8], 0, 32);
    v527 = 0;
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::end(**v523, (uint64_t)v533);
    v303 = *(_QWORD *)&v521[32];
    v304 = v522;
    if (v522)
    {
      v305 = (unint64_t *)&v522->__shared_owners_;
      do
        v306 = __ldxr(v305);
      while (__stxr(v306 + 1, v305));
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = v303;
      v532 = v304;
      do
        v307 = __ldxr(v305);
      while (__stxr(v307 + 1, v305));
      do
        v308 = __ldaxr(v305);
      while (__stlxr(v308 - 1, v305));
      if (!v308)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
    else
    {
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = *(_QWORD *)&v521[32];
      v532 = 0;
    }
  }
  else
  {
    *(_DWORD *)v531 = 0;
    memset(&v531[8], 0, 32);
    v532 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v526 == *(_DWORD *)v531)
    {
      v309 = &v526[8];
      v310 = &v531[8];
      if (*(_DWORD *)v526 != 1)
      {
        if (*(_DWORD *)v526 != 2)
          break;
        v309 = &v526[16];
        v310 = &v531[16];
      }
      if (*(_QWORD *)v309 == *(_QWORD *)v310)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v526, (uint64_t)v533);
    if (!v536)
    {
      v470 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v538) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v537;
        *(_QWORD *)&__p[16] = v538;
      }
      YAML::InvalidNode::InvalidNode(v470, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v536;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v530);
    v311 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F460D8, (const void **)&v530.__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v530.__r_.__value_.__l.__data_);
    if (v311 == &unk_253F460E0)
    {
      if (!v536)
      {
        v479 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v538) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v537;
          *(_QWORD *)&__p[16] = v538;
        }
        YAML::InvalidNode::InvalidNode(v479, (uint64_t)__p);
      }
      *(_QWORD *)__p = &v536;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v529);
      v312 = std::string::insert(&v529, 0, "Unsupported field for AssertResponse found in flow file: ");
      v530 = *v312;
      v312->__r_.__value_.__l.__size_ = 0;
      v312->__r_.__value_.__r.__words[2] = 0;
      v312->__r_.__value_.__r.__words[0] = 0;
      if (!v541)
      {
        v478 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v544) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v543, *((std::string::size_type *)&v543 + 1));
        }
        else
        {
          *(_OWORD *)__p = v543;
          *(_QWORD *)&__p[16] = v544;
        }
        YAML::InvalidNode::InvalidNode(v478, (uint64_t)__p);
      }
      if (v546)
        v313 = *(_QWORD *)(**(_QWORD **)v546 + 4);
      else
        HIDWORD(v313) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&v530, SHIDWORD(v313));
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v530.__r_.__value_.__l.__data_);
      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v529.__r_.__value_.__l.__data_);
    }
    v314 = v545;
    if (v545)
    {
      v315 = (unint64_t *)&v545->__shared_owners_;
      do
        v316 = __ldaxr(v315);
      while (__stlxr(v316 - 1, v315));
      if (!v316)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
    }
    if (SHIBYTE(v544) < 0)
      operator delete((void *)v543);
    v317 = (std::__shared_weak_count *)v540[0];
    if (v540[0])
    {
      v318 = (unint64_t *)(v540[0] + 8);
      do
        v319 = __ldaxr(v318);
      while (__stlxr(v319 - 1, v318));
      if (!v319)
      {
        ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
        std::__shared_weak_count::__release_weak(v317);
      }
    }
    if (SHIBYTE(v538) < 0)
      operator delete(v537[0]);
    v320 = v534;
    if (v534)
    {
      v321 = (unint64_t *)&v534->__shared_owners_;
      do
        v322 = __ldaxr(v321);
      while (__stlxr(v322 - 1, v321));
      if (!v322)
      {
        ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
        std::__shared_weak_count::__release_weak(v320);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v526);
  }
  v323 = v532;
  if (v532)
  {
    v324 = (unint64_t *)&v532->__shared_owners_;
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v326 = v527;
  if (v527)
  {
    v327 = (unint64_t *)&v527->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  v329 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v330 = v534;
  if (v534)
  {
    v331 = (unint64_t *)&v534->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v329)
      goto LABEL_849;
  }
  else if (v329)
  {
    goto LABEL_849;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  if (!v533[0])
  {
    v501 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v501, (uint64_t)v526);
  }
  if (v535)
  {
    v333 = **v535;
    if (*(_BYTE *)v333)
      v334 = *(_DWORD *)(v333 + 16);
    else
      v334 = 0;
  }
  else
  {
    v334 = 1;
  }
  v335 = v534;
  if (v534)
  {
    v336 = (unint64_t *)&v534->__shared_owners_;
    do
      v337 = __ldaxr(v336);
    while (__stlxr(v337 - 1, v336));
    if (!v337)
    {
      ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
      std::__shared_weak_count::__release_weak(v335);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v334 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'id' on AssertResponse");
    YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
    if (!v533[0])
    {
      v511 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v511, (uint64_t)v526);
    }
    if (v535)
      v338 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v338) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v338) + 1);
    v339 = v534;
    if (v534)
    {
      v340 = (unint64_t *)&v534->__shared_owners_;
      do
        v341 = __ldaxr(v340);
      while (__stlxr(v341 - 1, v340));
      if (!v341)
      {
        ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
        std::__shared_weak_count::__release_weak(v339);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_849:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "anyId", (uint64_t)v533);
  v342 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v343 = v534;
  if (v534)
  {
    v344 = (unint64_t *)&v534->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v342)
      goto LABEL_890;
  }
  else if (v342)
  {
    goto LABEL_890;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "anyId", (uint64_t)v533);
  if (!v533[0])
  {
    v502 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v502, (uint64_t)v526);
  }
  if (v535)
  {
    v346 = **v535;
    if (*(_BYTE *)v346)
      v347 = *(_DWORD *)(v346 + 16);
    else
      v347 = 0;
  }
  else
  {
    v347 = 1;
  }
  v348 = v534;
  if (v534)
  {
    v349 = (unint64_t *)&v534->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v347 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Found a map instead of an array value for 'anyId' on AssertResponse");
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "anyId", (uint64_t)v533);
    if (!v533[0])
    {
      v512 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v512, (uint64_t)v526);
    }
    if (v535)
      v351 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v351) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v351) + 1);
    v352 = v534;
    if (v534)
    {
      v353 = (unint64_t *)&v534->__shared_owners_;
      do
        v354 = __ldaxr(v353);
      while (__stlxr(v354 - 1, v353));
      if (!v354)
      {
        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
        std::__shared_weak_count::__release_weak(v352);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_890:
  YAML::Node::operator[]<char [7]>((YAML::Node *)v521, "allIds", (uint64_t)v533);
  v355 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v356 = v534;
  if (v534)
  {
    v357 = (unint64_t *)&v534->__shared_owners_;
    do
      v358 = __ldaxr(v357);
    while (__stlxr(v358 - 1, v357));
    if (!v358)
    {
      ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
      std::__shared_weak_count::__release_weak(v356);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v355)
      goto LABEL_931;
  }
  else if (v355)
  {
    goto LABEL_931;
  }
  YAML::Node::operator[]<char [7]>((YAML::Node *)v521, "allIds", (uint64_t)v533);
  if (!v533[0])
  {
    v503 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v503, (uint64_t)v526);
  }
  if (v535)
  {
    v359 = **v535;
    if (*(_BYTE *)v359)
      v360 = *(_DWORD *)(v359 + 16);
    else
      v360 = 0;
  }
  else
  {
    v360 = 1;
  }
  v361 = v534;
  if (v534)
  {
    v362 = (unint64_t *)&v534->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v360 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Found a map instead of an array value for 'allIds' on AssertResponse");
    YAML::Node::operator[]<char [7]>((YAML::Node *)v521, "allIds", (uint64_t)v533);
    if (!v533[0])
    {
      v513 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v513, (uint64_t)v526);
    }
    if (v535)
      v364 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v364) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v364) + 1);
    v365 = v534;
    if (v534)
    {
      v366 = (unint64_t *)&v534->__shared_owners_;
      do
        v367 = __ldaxr(v366);
      while (__stlxr(v367 - 1, v366));
      if (!v367)
      {
        ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
        std::__shared_weak_count::__release_weak(v365);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_931:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "count", (uint64_t)v533);
  v368 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v369 = v534;
  if (v534)
  {
    v370 = (unint64_t *)&v534->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v368)
      goto LABEL_982;
  }
  else if (v368)
  {
    goto LABEL_982;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "count", (uint64_t)v533);
  if (!v533[0])
  {
    v504 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v504, (uint64_t)v526);
  }
  if (v535 && (v372 = **v535, *(_BYTE *)v372) && *(_DWORD *)(v372 + 16) == 2)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "count", (uint64_t)v526);
    if (!v526[0])
    {
      v517 = __cxa_allocate_exception(0x38uLL);
      if ((v526[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v531, *(const std::string::value_type **)&v526[8], *(std::string::size_type *)&v526[16]);
      }
      else
      {
        *(_OWORD *)v531 = *(_OWORD *)&v526[8];
        *(_QWORD *)&v531[16] = *(_QWORD *)&v526[24];
      }
      YAML::InvalidNode::InvalidNode(v517, (uint64_t)v531);
    }
    *(_QWORD *)v531 = v526;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v531, (std::string *)__p);
    IsANumber = siri::intelligence::StringIsANumber((const std::string *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v374 = v527;
    if (v527)
    {
      v375 = (unint64_t *)&v527->__shared_owners_;
      do
        v376 = __ldaxr(v375);
      while (__stlxr(v376 - 1, v375));
      if (!v376)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
    v377 = IsANumber ^ 1;
    if ((v526[31] & 0x80000000) != 0)
      operator delete(*(void **)&v526[8]);
  }
  else
  {
    v377 = 1;
  }
  v378 = v534;
  if (v534)
  {
    v379 = (unint64_t *)&v534->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (!v377)
      goto LABEL_982;
LABEL_969:
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid int32 value found for 'count' on AssertResponse");
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "count", (uint64_t)v533);
    if (!v533[0])
    {
      v514 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v514, (uint64_t)v526);
    }
    if (v535)
      v381 = *(_DWORD *)(**v535 + 8) + 1;
    else
      v381 = 0;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, v381);
    v382 = v534;
    if (v534)
    {
      v383 = (unint64_t *)&v534->__shared_owners_;
      do
        v384 = __ldaxr(v383);
      while (__stlxr(v384 - 1, v383));
      if (!v384)
      {
        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
        std::__shared_weak_count::__release_weak(v382);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
    goto LABEL_982;
  }
  if (v377)
    goto LABEL_969;
LABEL_982:
  v385 = v522;
  if (v522)
  {
    v386 = (unint64_t *)&v522->__shared_owners_;
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  if ((v521[31] & 0x80000000) != 0)
    operator delete(*(void **)&v521[8]);
LABEL_989:
  YAML::Node::operator[]<char [16]>((YAML::Node *)this, "assertCondition", (uint64_t)v533);
  v388 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v389 = v534;
  if (v534)
  {
    v390 = (unint64_t *)&v534->__shared_owners_;
    do
      v391 = __ldaxr(v390);
    while (__stlxr(v391 - 1, v390));
    if (!v391)
    {
      ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
      std::__shared_weak_count::__release_weak(v389);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v388)
      return;
  }
  else if (v388)
  {
    return;
  }
  YAML::Node::operator[]<char [16]>((YAML::Node *)this, "assertCondition", (uint64_t)v533);
  if (!v533[0])
  {
    v490 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v490, (uint64_t)v526);
  }
  if (v535)
  {
    v392 = **v535;
    if (*(_BYTE *)v392)
      v393 = *(_DWORD *)(v392 + 16);
    else
      v393 = 0;
  }
  else
  {
    v393 = 1;
  }
  v394 = v534;
  if (v534)
  {
    v395 = (unint64_t *)&v534->__shared_owners_;
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
      std::__shared_weak_count::__release_weak(v394);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v393 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v521, "Invalid array value found for 'assertCondition' on Step");
    YAML::Node::operator[]<char [16]>((YAML::Node *)this, "assertCondition", (uint64_t)v533);
    if (!v533[0])
    {
      v500 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v500, (uint64_t)v526);
    }
    if (v535)
      v397 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v397) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v521, HIDWORD(v397) + 1);
    v398 = v534;
    if (v534)
    {
      v399 = (unint64_t *)&v534->__shared_owners_;
      do
        v400 = __ldaxr(v399);
      while (__stlxr(v400 - 1, v399));
      if (!v400)
      {
        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
        std::__shared_weak_count::__release_weak(v398);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v521[23] & 0x80000000) != 0)
      operator delete(*(void **)v521);
  }
  YAML::Node::operator[]<char [16]>((YAML::Node *)this, "assertCondition", (uint64_t)v521);
  v401 = atomic_load((unsigned __int8 *)&qword_253F46040);
  if ((v401 & 1) == 0 && __cxa_guard_acquire(&qword_253F46040))
  {
    std::string::basic_string[abi:ne180100]<0>(v533, "id");
    std::string::basic_string[abi:ne180100]<0>(&v533[24], "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F460F0, (const void **)v533, 2);
    for (n = 0; n != -6; n -= 3)
    {
      if (SHIBYTE((&v534)[n]) < 0)
        operator delete(*(void **)&v533[n * 8 + 24]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F460F0, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46040);
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::begin(**v523, (uint64_t)v533);
    v402 = *(_QWORD *)&v521[32];
    v403 = v522;
    if (v522)
    {
      v404 = (unint64_t *)&v522->__shared_owners_;
      do
        v405 = __ldxr(v404);
      while (__stxr(v405 + 1, v404));
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = v402;
      v527 = v403;
      do
        v406 = __ldxr(v404);
      while (__stxr(v406 + 1, v404));
      do
        v407 = __ldaxr(v404);
      while (__stlxr(v407 - 1, v404));
      if (!v407)
      {
        ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
        std::__shared_weak_count::__release_weak(v403);
      }
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)v533;
      *(_OWORD *)&v526[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v526[32] = *(_QWORD *)&v521[32];
      v527 = 0;
    }
  }
  else
  {
    *(_DWORD *)v526 = 0;
    memset(&v526[8], 0, 32);
    v527 = 0;
  }
  if (v521[0] && v523)
  {
    YAML::detail::node_data::end(**v523, (uint64_t)v533);
    v408 = *(_QWORD *)&v521[32];
    v409 = v522;
    if (v522)
    {
      v410 = (unint64_t *)&v522->__shared_owners_;
      do
        v411 = __ldxr(v410);
      while (__stxr(v411 + 1, v410));
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = v408;
      v532 = v409;
      do
        v412 = __ldxr(v410);
      while (__stxr(v412 + 1, v410));
      do
        v413 = __ldaxr(v410);
      while (__stlxr(v413 - 1, v410));
      if (!v413)
      {
        ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
        std::__shared_weak_count::__release_weak(v409);
      }
    }
    else
    {
      *(_OWORD *)v531 = *(_OWORD *)v533;
      *(_OWORD *)&v531[16] = *(_OWORD *)&v533[16];
      *(_QWORD *)&v531[32] = *(_QWORD *)&v521[32];
      v532 = 0;
    }
  }
  else
  {
    *(_DWORD *)v531 = 0;
    memset(&v531[8], 0, 32);
    v532 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v526 == *(_DWORD *)v531)
    {
      v414 = &v526[8];
      v415 = &v531[8];
      if (*(_DWORD *)v526 != 1)
      {
        if (*(_DWORD *)v526 != 2)
          break;
        v414 = &v526[16];
        v415 = &v531[16];
      }
      if (*(_QWORD *)v414 == *(_QWORD *)v415)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v526, (uint64_t)v533);
    if (!v536)
    {
      v471 = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v538) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v537;
        *(_QWORD *)&__p[16] = v538;
      }
      YAML::InvalidNode::InvalidNode(v471, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v536;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v530);
    v416 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F460F0, (const void **)&v530.__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v530.__r_.__value_.__l.__data_);
    if (v416 == &unk_253F460F8)
    {
      if (!v536)
      {
        v481 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v538) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v537[0], (std::string::size_type)v537[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v537;
          *(_QWORD *)&__p[16] = v538;
        }
        YAML::InvalidNode::InvalidNode(v481, (uint64_t)__p);
      }
      *(_QWORD *)__p = &v536;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)__p, &v529);
      v417 = std::string::insert(&v529, 0, "Unsupported field for AssertCondition found in flow file: ");
      v530 = *v417;
      v417->__r_.__value_.__l.__size_ = 0;
      v417->__r_.__value_.__r.__words[2] = 0;
      v417->__r_.__value_.__r.__words[0] = 0;
      if (!v541)
      {
        v480 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v544) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v543, *((std::string::size_type *)&v543 + 1));
        }
        else
        {
          *(_OWORD *)__p = v543;
          *(_QWORD *)&__p[16] = v544;
        }
        YAML::InvalidNode::InvalidNode(v480, (uint64_t)__p);
      }
      if (v546)
        v418 = *(_QWORD *)(**(_QWORD **)v546 + 4);
      else
        HIDWORD(v418) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&v530, SHIDWORD(v418));
      if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v530.__r_.__value_.__l.__data_);
      if (SHIBYTE(v529.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v529.__r_.__value_.__l.__data_);
    }
    v419 = v545;
    if (v545)
    {
      v420 = (unint64_t *)&v545->__shared_owners_;
      do
        v421 = __ldaxr(v420);
      while (__stlxr(v421 - 1, v420));
      if (!v421)
      {
        ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
        std::__shared_weak_count::__release_weak(v419);
      }
    }
    if (SHIBYTE(v544) < 0)
      operator delete((void *)v543);
    v422 = (std::__shared_weak_count *)v540[0];
    if (v540[0])
    {
      v423 = (unint64_t *)(v540[0] + 8);
      do
        v424 = __ldaxr(v423);
      while (__stlxr(v424 - 1, v423));
      if (!v424)
      {
        ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
        std::__shared_weak_count::__release_weak(v422);
      }
    }
    if (SHIBYTE(v538) < 0)
      operator delete(v537[0]);
    v425 = v534;
    if (v534)
    {
      v426 = (unint64_t *)&v534->__shared_owners_;
      do
        v427 = __ldaxr(v426);
      while (__stlxr(v427 - 1, v426));
      if (!v427)
      {
        ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
        std::__shared_weak_count::__release_weak(v425);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v526);
  }
  v428 = v532;
  if (v532)
  {
    v429 = (unint64_t *)&v532->__shared_owners_;
    do
      v430 = __ldaxr(v429);
    while (__stlxr(v430 - 1, v429));
    if (!v430)
    {
      ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
      std::__shared_weak_count::__release_weak(v428);
    }
  }
  v431 = v527;
  if (v527)
  {
    v432 = (unint64_t *)&v527->__shared_owners_;
    do
      v433 = __ldaxr(v432);
    while (__stlxr(v433 - 1, v432));
    if (!v433)
    {
      ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
      std::__shared_weak_count::__release_weak(v431);
    }
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  v434 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v435 = v534;
  if (v534)
  {
    v436 = (unint64_t *)&v534->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v434)
      goto LABEL_1146;
  }
  else if (v434)
  {
    goto LABEL_1146;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
  if (!v533[0])
  {
    v505 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v505, (uint64_t)v526);
  }
  if (v535)
  {
    v438 = **v535;
    if (*(_BYTE *)v438)
      v439 = *(_DWORD *)(v438 + 16);
    else
      v439 = 0;
  }
  else
  {
    v439 = 1;
  }
  v440 = v534;
  if (v534)
  {
    v441 = (unint64_t *)&v534->__shared_owners_;
    do
      v442 = __ldaxr(v441);
    while (__stlxr(v442 - 1, v441));
    if (!v442)
    {
      ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
      std::__shared_weak_count::__release_weak(v440);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
    operator delete(*(void **)&v533[8]);
  if (v439 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid string value found for 'id' on AssertCondition");
    YAML::Node::operator[]<char [3]>((YAML::Node *)v521, "id", (uint64_t)v533);
    if (!v533[0])
    {
      v515 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v515, (uint64_t)v526);
    }
    if (v535)
      v443 = *(_QWORD *)(**v535 + 4);
    else
      HIDWORD(v443) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, HIDWORD(v443) + 1);
    v444 = v534;
    if (v534)
    {
      v445 = (unint64_t *)&v534->__shared_owners_;
      do
        v446 = __ldaxr(v445);
      while (__stlxr(v446 - 1, v445));
      if (!v446)
      {
        ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
        std::__shared_weak_count::__release_weak(v444);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
  }
LABEL_1146:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "value", (uint64_t)v533);
  v447 = !v533[0] || v535 && !*(_BYTE *)**v535;
  v448 = v534;
  if (v534)
  {
    v449 = (unint64_t *)&v534->__shared_owners_;
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (v447)
      goto LABEL_1197;
  }
  else if (v447)
  {
    goto LABEL_1197;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "value", (uint64_t)v533);
  if (!v533[0])
  {
    v506 = __cxa_allocate_exception(0x38uLL);
    if ((v533[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
    }
    else
    {
      *(_OWORD *)v526 = *(_OWORD *)&v533[8];
      *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
    }
    YAML::InvalidNode::InvalidNode(v506, (uint64_t)v526);
  }
  if (v535 && (v451 = **v535, *(_BYTE *)v451) && *(_DWORD *)(v451 + 16) == 2)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "value", (uint64_t)v526);
    if (!v526[0])
    {
      v518 = __cxa_allocate_exception(0x38uLL);
      if ((v526[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v531, *(const std::string::value_type **)&v526[8], *(std::string::size_type *)&v526[16]);
      }
      else
      {
        *(_OWORD *)v531 = *(_OWORD *)&v526[8];
        *(_QWORD *)&v531[16] = *(_QWORD *)&v526[24];
      }
      YAML::InvalidNode::InvalidNode(v518, (uint64_t)v531);
    }
    *(_QWORD *)v531 = v526;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v531, (std::string *)__p);
    IsBool = siri::intelligence::StringIsBool((uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v453 = v527;
    if (v527)
    {
      v454 = (unint64_t *)&v527->__shared_owners_;
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
        std::__shared_weak_count::__release_weak(v453);
      }
    }
    v456 = !IsBool;
    if ((v526[31] & 0x80000000) != 0)
      operator delete(*(void **)&v526[8]);
  }
  else
  {
    v456 = 1;
  }
  v457 = v534;
  if (v534)
  {
    v458 = (unint64_t *)&v534->__shared_owners_;
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  if ((v533[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v533[8]);
    if (!v456)
      goto LABEL_1197;
LABEL_1184:
    std::string::basic_string[abi:ne180100]<0>(v531, "Invalid BOOL value found for 'value' on AssertCondition");
    YAML::Node::operator[]<char [6]>((YAML::Node *)v521, "value", (uint64_t)v533);
    if (!v533[0])
    {
      v516 = __cxa_allocate_exception(0x38uLL);
      if ((v533[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v526, *(const std::string::value_type **)&v533[8], *(std::string::size_type *)&v533[16]);
      }
      else
      {
        *(_OWORD *)v526 = *(_OWORD *)&v533[8];
        *(_QWORD *)&v526[16] = *(_QWORD *)&v533[24];
      }
      YAML::InvalidNode::InvalidNode(v516, (uint64_t)v526);
    }
    if (v535)
      v460 = *(_DWORD *)(**v535 + 8) + 1;
    else
      v460 = 0;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v531, v460);
    v461 = v534;
    if (v534)
    {
      v462 = (unint64_t *)&v534->__shared_owners_;
      do
        v463 = __ldaxr(v462);
      while (__stlxr(v463 - 1, v462));
      if (!v463)
      {
        ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
        std::__shared_weak_count::__release_weak(v461);
      }
    }
    if ((v533[31] & 0x80000000) != 0)
      operator delete(*(void **)&v533[8]);
    if ((v531[23] & 0x80000000) != 0)
      operator delete(*(void **)v531);
    goto LABEL_1197;
  }
  if (v456)
    goto LABEL_1184;
LABEL_1197:
  v464 = v522;
  if (v522)
  {
    v465 = (unint64_t *)&v522->__shared_owners_;
    do
      v466 = __ldaxr(v465);
    while (__stlxr(v466 - 1, v465));
    if (!v466)
    {
      ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
      std::__shared_weak_count::__release_weak(v464);
    }
  }
  if ((v521[31] & 0x80000000) != 0)
    operator delete(*(void **)&v521[8]);
}

void sub_22AEEA1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  v7 = 0;
  while (1)
  {
    if (*(char *)(v5 + v7 + 47) < 0)
      operator delete(*(void **)(v5 + v7 + 24));
    v7 -= 24;
    if (v7 == -48)
    {
      __cxa_guard_abort(&qword_253F46040);
      YAML::Node::~Node((void **)va);
      _Unwind_Resume(a1);
    }
  }
}

void YAML::Node::operator[]<char [7]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [7],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEAD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t streamable_to_string<char [5],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEAE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [12],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEAF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [8],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEB024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [13]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [13],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEB264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ValidateFlowTest_KeyValueParameter(std::__shared_weak_count **this, const YAML::Node *a2, siri::intelligence::ValidationResults *a3)
{
  siri::intelligence *v3;
  unsigned __int8 v4;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  void *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  BOOL v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BOOL v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int IsANumber;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL4 IsBool;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  BOOL v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  BOOL v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  siri::intelligence::ValidationResults *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  siri::intelligence::ValidationResults *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  BOOL v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  siri::intelligence::ValidationResults *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  _BYTE *v173;
  siri::intelligence::ValidationResults *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  _QWORD *exception;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t i;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _BYTE v211[40];
  std::__shared_weak_count *v212;
  _BYTE v213[40];
  std::__shared_weak_count *v214;
  uint64_t **v215;
  std::string v216;
  std::string __p;
  _BYTE v218[40];
  std::__shared_weak_count *v219;
  _BYTE v220[32];
  std::__shared_weak_count *v221;
  uint64_t **v222;
  char v223;
  __int128 v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  char v227;
  void *v228[2];
  _QWORD v229[2];
  std::__shared_weak_count *v230;
  uint64_t v231;
  uint64_t v232;

  v3 = (siri::intelligence *)this;
  v232 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253F46020);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46020))
  {
    std::string::basic_string[abi:ne180100]<0>(v220, "key");
    std::string::basic_string[abi:ne180100]<0>(&v220[24], "valueNumber");
    std::string::basic_string[abi:ne180100]<0>(&v222, "valueBoolean");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v224 + 1, "valueString");
    std::string::basic_string[abi:ne180100]<0>(&v226, "valueArray");
    std::string::basic_string[abi:ne180100]<0>(v228, "valueDictionary");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F46090, (const void **)v220, 6);
    for (i = 0; i != -18; i -= 3)
    {
      if (SHIBYTE(v229[i]) < 0)
        operator delete(v228[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F46090, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46020);
    v3 = (siri::intelligence *)this;
  }
  if (*(_BYTE *)v3)
  {
    v5 = (uint64_t **)*((_QWORD *)v3 + 6);
    if (!v5)
    {
      *(_DWORD *)v213 = 0;
      memset(&v213[8], 0, 32);
      v214 = 0;
      goto LABEL_14;
    }
    YAML::detail::node_data::begin(**v5, (uint64_t)v220);
    v3 = (siri::intelligence *)this;
    v6 = this[4];
    v7 = this[5];
    if (!v7)
    {
      *(_OWORD *)v213 = *(_OWORD *)v220;
      *(_OWORD *)&v213[16] = *(_OWORD *)&v220[16];
      *(_QWORD *)&v213[32] = v6;
      v214 = 0;
      goto LABEL_16;
    }
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_OWORD *)v213 = *(_OWORD *)v220;
    *(_OWORD *)&v213[16] = *(_OWORD *)&v220[16];
    *(_QWORD *)&v213[32] = v6;
    v214 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    v3 = (siri::intelligence *)this;
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
LABEL_14:
      v3 = (siri::intelligence *)this;
    }
  }
  else
  {
    *(_DWORD *)v213 = 0;
    memset(&v213[8], 0, 32);
    v214 = 0;
  }
LABEL_16:
  if (*(_BYTE *)v3 && (v12 = (uint64_t **)*((_QWORD *)v3 + 6)) != 0)
  {
    YAML::detail::node_data::end(**v12, (uint64_t)v220);
    v13 = this[4];
    v14 = this[5];
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_OWORD *)v218 = *(_OWORD *)v220;
      *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
      *(_QWORD *)&v218[32] = v13;
      v219 = v14;
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      *(_OWORD *)v218 = *(_OWORD *)v220;
      *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
      *(_QWORD *)&v218[32] = v13;
      v219 = 0;
    }
  }
  else
  {
    *(_DWORD *)v218 = 0;
    memset(&v218[8], 0, 32);
    v219 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v213 == *(_DWORD *)v218)
    {
      v19 = &v213[8];
      v20 = &v218[8];
      if (*(_DWORD *)v213 != 1)
      {
        if (*(_DWORD *)v213 != 2)
          break;
        v19 = &v213[16];
        v20 = &v218[16];
      }
      if (*(_QWORD *)v19 == *(_QWORD *)v20)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v213, (uint64_t)v220);
    if (!v223)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v225) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v211, (const std::string::value_type *)v224, *((std::string::size_type *)&v224 + 1));
      }
      else
      {
        *(_OWORD *)v211 = v224;
        *(_QWORD *)&v211[16] = v225;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)v211);
    }
    *(_QWORD *)v211 = &v223;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v211, &__p);
    v21 = (void *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F46090, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21 == &unk_253F46098)
    {
      if (!v223)
      {
        v195 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v225) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v211, (const std::string::value_type *)v224, *((std::string::size_type *)&v224 + 1));
        }
        else
        {
          *(_OWORD *)v211 = v224;
          *(_QWORD *)&v211[16] = v225;
        }
        YAML::InvalidNode::InvalidNode(v195, (uint64_t)v211);
      }
      *(_QWORD *)v211 = &v223;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)v211, &v216);
      v22 = std::string::insert(&v216, 0, "Unsupported field for KeyValueParameter found in flow file: ");
      __p = *v22;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (!v227)
      {
        v194 = __cxa_allocate_exception(0x38uLL);
        if (SHIBYTE(v229[0]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v211, (const std::string::value_type *)v228[0], (std::string::size_type)v228[1]);
        }
        else
        {
          *(_OWORD *)v211 = *(_OWORD *)v228;
          *(_QWORD *)&v211[16] = v229[0];
        }
        YAML::InvalidNode::InvalidNode(v194, (uint64_t)v211);
      }
      if (v231)
        v23 = *(_QWORD *)(**(_QWORD **)v231 + 4);
      else
        HIDWORD(v23) = -1;
      siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)&__p, SHIDWORD(v23));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v216.__r_.__value_.__l.__data_);
    }
    v24 = v230;
    if (v230)
    {
      v25 = (unint64_t *)&v230->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v229[0]) < 0)
      operator delete(v228[0]);
    v27 = v226;
    if (v226)
    {
      v28 = (unint64_t *)&v226->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v225) < 0)
      operator delete((void *)v224);
    v30 = v221;
    if (v221)
    {
      v31 = (unint64_t *)&v221->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if ((v220[31] & 0x80000000) != 0)
      operator delete(*(void **)&v220[8]);
    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v213);
  }
  v33 = v219;
  if (v219)
  {
    v34 = (unint64_t *)&v219->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v214;
  if (v214)
  {
    v37 = (unint64_t *)&v214->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  YAML::Node::operator[]<char [4]>((YAML::Node *)this, "key", (uint64_t)v220);
  v39 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v40 = v221;
  if (v221)
  {
    v41 = (unint64_t *)&v221->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v39)
      goto LABEL_119;
  }
  else if (v39)
  {
    goto LABEL_119;
  }
  YAML::Node::operator[]<char [4]>((YAML::Node *)this, "key", (uint64_t)v220);
  if (!v220[0])
  {
    v197 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v197, (uint64_t)v213);
  }
  if (v222)
  {
    v43 = **v222;
    if (*(_BYTE *)v43)
      v44 = *(_DWORD *)(v43 + 16);
    else
      v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  v45 = v221;
  if (v221)
  {
    v46 = (unint64_t *)&v221->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if (v44 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v218, "Invalid string value found for 'key' on KeyValueParameter");
    YAML::Node::operator[]<char [4]>((YAML::Node *)this, "key", (uint64_t)v220);
    if (!v220[0])
    {
      v203 = __cxa_allocate_exception(0x38uLL);
      if ((v220[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
      }
      else
      {
        *(_OWORD *)v213 = *(_OWORD *)&v220[8];
        *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
      }
      YAML::InvalidNode::InvalidNode(v203, (uint64_t)v213);
    }
    if (v222)
      v48 = *(_QWORD *)(**v222 + 4);
    else
      HIDWORD(v48) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v218, HIDWORD(v48) + 1);
    v49 = v221;
    if (v221)
    {
      v50 = (unint64_t *)&v221->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((v220[31] & 0x80000000) != 0)
      operator delete(*(void **)&v220[8]);
    if ((v218[23] & 0x80000000) != 0)
      operator delete(*(void **)v218);
  }
LABEL_119:
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueNumber", (uint64_t)v220);
  v52 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v53 = v221;
  if (v221)
  {
    v54 = (unint64_t *)&v221->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v52)
      goto LABEL_170;
  }
  else if (v52)
  {
    goto LABEL_170;
  }
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueNumber", (uint64_t)v220);
  if (!v220[0])
  {
    v198 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v198, (uint64_t)v213);
  }
  if (v222 && (v56 = **v222, *(_BYTE *)v56) && *(_DWORD *)(v56 + 16) == 2)
  {
    YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueNumber", (uint64_t)v213);
    if (!v213[0])
    {
      v207 = __cxa_allocate_exception(0x38uLL);
      if ((v213[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v218, *(const std::string::value_type **)&v213[8], *(std::string::size_type *)&v213[16]);
      }
      else
      {
        *(_OWORD *)v218 = *(_OWORD *)&v213[8];
        *(_QWORD *)&v218[16] = *(_QWORD *)&v213[24];
      }
      YAML::InvalidNode::InvalidNode(v207, (uint64_t)v218);
    }
    *(_QWORD *)v218 = v213;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v218, (std::string *)v211);
    IsANumber = siri::intelligence::StringIsANumber((const std::string *)v211);
    if ((v211[23] & 0x80000000) != 0)
      operator delete(*(void **)v211);
    v58 = v214;
    if (v214)
    {
      v59 = (unint64_t *)&v214->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = IsANumber ^ 1;
    if ((v213[31] & 0x80000000) != 0)
      operator delete(*(void **)&v213[8]);
  }
  else
  {
    v61 = 1;
  }
  v62 = v221;
  if (v221)
  {
    v63 = (unint64_t *)&v221->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (!v61)
      goto LABEL_170;
  }
  else if (!v61)
  {
    goto LABEL_170;
  }
  std::string::basic_string[abi:ne180100]<0>(v218, "Invalid double value found for 'valueNumber' on KeyValueParameter");
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueNumber", (uint64_t)v220);
  if (!v220[0])
  {
    v204 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v204, (uint64_t)v213);
  }
  if (v222)
    v65 = *(_QWORD *)(**v222 + 4);
  else
    HIDWORD(v65) = -1;
  siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v218, HIDWORD(v65) + 1);
  v66 = v221;
  if (v221)
  {
    v67 = (unint64_t *)&v221->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if ((v218[23] & 0x80000000) != 0)
    operator delete(*(void **)v218);
LABEL_170:
  YAML::Node::operator[]<char [13]>((YAML::Node *)this, "valueBoolean", (uint64_t)v220);
  v69 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v70 = v221;
  if (v221)
  {
    v71 = (unint64_t *)&v221->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v69)
      goto LABEL_221;
  }
  else if (v69)
  {
    goto LABEL_221;
  }
  YAML::Node::operator[]<char [13]>((YAML::Node *)this, "valueBoolean", (uint64_t)v220);
  if (!v220[0])
  {
    v199 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v199, (uint64_t)v213);
  }
  if (v222 && (v73 = **v222, *(_BYTE *)v73) && *(_DWORD *)(v73 + 16) == 2)
  {
    YAML::Node::operator[]<char [13]>((YAML::Node *)this, "valueBoolean", (uint64_t)v213);
    if (!v213[0])
    {
      v208 = __cxa_allocate_exception(0x38uLL);
      if ((v213[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v218, *(const std::string::value_type **)&v213[8], *(std::string::size_type *)&v213[16]);
      }
      else
      {
        *(_OWORD *)v218 = *(_OWORD *)&v213[8];
        *(_QWORD *)&v218[16] = *(_QWORD *)&v213[24];
      }
      YAML::InvalidNode::InvalidNode(v208, (uint64_t)v218);
    }
    *(_QWORD *)v218 = v213;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v218, (std::string *)v211);
    IsBool = siri::intelligence::StringIsBool((uint64_t)v211);
    if ((v211[23] & 0x80000000) != 0)
      operator delete(*(void **)v211);
    v75 = v214;
    if (v214)
    {
      v76 = (unint64_t *)&v214->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = !IsBool;
    if ((v213[31] & 0x80000000) != 0)
      operator delete(*(void **)&v213[8]);
  }
  else
  {
    v78 = 1;
  }
  v79 = v221;
  if (v221)
  {
    v80 = (unint64_t *)&v221->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (!v78)
      goto LABEL_221;
  }
  else if (!v78)
  {
    goto LABEL_221;
  }
  std::string::basic_string[abi:ne180100]<0>(v218, "Invalid BOOL value found for 'valueBoolean' on KeyValueParameter");
  YAML::Node::operator[]<char [13]>((YAML::Node *)this, "valueBoolean", (uint64_t)v220);
  if (!v220[0])
  {
    v205 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v205, (uint64_t)v213);
  }
  if (v222)
    v82 = *(_QWORD *)(**v222 + 4);
  else
    HIDWORD(v82) = -1;
  siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v218, HIDWORD(v82) + 1);
  v83 = v221;
  if (v221)
  {
    v84 = (unint64_t *)&v221->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if ((v218[23] & 0x80000000) != 0)
    operator delete(*(void **)v218);
LABEL_221:
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueString", (uint64_t)v220);
  v86 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v87 = v221;
  if (v221)
  {
    v88 = (unint64_t *)&v221->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v86)
      goto LABEL_262;
  }
  else if (v86)
  {
    goto LABEL_262;
  }
  YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueString", (uint64_t)v220);
  if (!v220[0])
  {
    v200 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v200, (uint64_t)v213);
  }
  if (v222)
  {
    v90 = **v222;
    if (*(_BYTE *)v90)
      v91 = *(_DWORD *)(v90 + 16);
    else
      v91 = 0;
  }
  else
  {
    v91 = 1;
  }
  v92 = v221;
  if (v221)
  {
    v93 = (unint64_t *)&v221->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if (v91 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v218, "Invalid string value found for 'valueString' on KeyValueParameter");
    YAML::Node::operator[]<char [12]>((YAML::Node *)this, "valueString", (uint64_t)v220);
    if (!v220[0])
    {
      v206 = __cxa_allocate_exception(0x38uLL);
      if ((v220[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
      }
      else
      {
        *(_OWORD *)v213 = *(_OWORD *)&v220[8];
        *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
      }
      YAML::InvalidNode::InvalidNode(v206, (uint64_t)v213);
    }
    if (v222)
      v95 = *(_QWORD *)(**v222 + 4);
    else
      HIDWORD(v95) = -1;
    siri::intelligence::ValidationResults::AddError(a2, &siri::intelligence::CODE_YAML_PARSE, (__int128 *)v218, HIDWORD(v95) + 1);
    v96 = v221;
    if (v221)
    {
      v97 = (unint64_t *)&v221->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if ((v220[31] & 0x80000000) != 0)
      operator delete(*(void **)&v220[8]);
    if ((v218[23] & 0x80000000) != 0)
      operator delete(*(void **)v218);
  }
LABEL_262:
  YAML::Node::operator[]<char [11]>((YAML::Node *)this, "valueArray", (uint64_t)v220);
  v99 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v100 = v221;
  if (v221)
  {
    v101 = (unint64_t *)&v221->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v99)
      goto LABEL_364;
  }
  else if (v99)
  {
    goto LABEL_364;
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)this, "valueArray", (uint64_t)v220);
  if (!v220[0])
  {
    v201 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v201, (uint64_t)v213);
  }
  if (v222)
  {
    v103 = **v222;
    if (*(_BYTE *)v103)
      v104 = *(_DWORD *)(v103 + 16);
    else
      v104 = 0;
  }
  else
  {
    v104 = 1;
  }
  v105 = v221;
  if (v221)
  {
    v106 = (unint64_t *)&v221->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if (v104 == 3)
  {
    YAML::Node::operator[]<char [11]>((YAML::Node *)this, "valueArray", (uint64_t)v213);
    if (v213[0] && v215)
    {
      YAML::detail::node_data::begin(**v215, (uint64_t)v220);
      v108 = *(_QWORD *)&v213[32];
      v109 = v214;
      if (v214)
      {
        v110 = (unint64_t *)&v214->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
        *(_OWORD *)v218 = *(_OWORD *)v220;
        *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v218[32] = v108;
        v219 = v109;
        do
          v112 = __ldxr(v110);
        while (__stxr(v112 + 1, v110));
        do
          v113 = __ldaxr(v110);
        while (__stlxr(v113 - 1, v110));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      else
      {
        *(_OWORD *)v218 = *(_OWORD *)v220;
        *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v218[32] = *(_QWORD *)&v213[32];
        v219 = 0;
      }
    }
    else
    {
      *(_DWORD *)v218 = 0;
      memset(&v218[8], 0, 32);
      v219 = 0;
    }
    if (v213[0] && v215)
    {
      YAML::detail::node_data::end(**v215, (uint64_t)v220);
      v119 = *(_QWORD *)&v213[32];
      v120 = v214;
      if (v214)
      {
        v121 = (unint64_t *)&v214->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
        *(_OWORD *)v211 = *(_OWORD *)v220;
        *(_OWORD *)&v211[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v211[32] = v119;
        v212 = v120;
        do
          v123 = __ldxr(v121);
        while (__stxr(v123 + 1, v121));
        do
          v124 = __ldaxr(v121);
        while (__stlxr(v124 - 1, v121));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      else
      {
        *(_OWORD *)v211 = *(_OWORD *)v220;
        *(_OWORD *)&v211[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v211[32] = *(_QWORD *)&v213[32];
        v212 = 0;
      }
    }
    else
    {
      *(_DWORD *)v211 = 0;
      memset(&v211[8], 0, 32);
      v212 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v218 == *(_DWORD *)v211)
      {
        v125 = &v218[8];
        v126 = &v211[8];
        if (*(_DWORD *)v218 != 1)
        {
          if (*(_DWORD *)v218 != 2)
            break;
          v125 = &v218[16];
          v126 = &v211[16];
        }
        if (*(_QWORD *)v125 == *(_QWORD *)v126)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v218, (uint64_t)v220);
      siri::intelligence::ValidateFlowTest_KeyValueParameter((siri::intelligence *)v220, a2, v127);
      v128 = v230;
      if (v230)
      {
        v129 = (unint64_t *)&v230->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      if (SHIBYTE(v229[0]) < 0)
        operator delete(v228[0]);
      v131 = v226;
      if (v226)
      {
        v132 = (unint64_t *)&v226->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      if (SHIBYTE(v225) < 0)
        operator delete((void *)v224);
      v134 = v221;
      if (v221)
      {
        v135 = (unint64_t *)&v221->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      if ((v220[31] & 0x80000000) != 0)
        operator delete(*(void **)&v220[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v218);
    }
    v137 = v212;
    if (v212)
    {
      v138 = (unint64_t *)&v212->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = v219;
    if (v219)
    {
      v141 = (unint64_t *)&v219->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = v214;
    if (v214)
    {
      v144 = (unint64_t *)&v214->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    if ((v213[31] & 0x80000000) != 0)
    {
      v118 = *(void **)&v213[8];
      goto LABEL_363;
    }
  }
  else
  {
    YAML::Node::operator[]<char [11]>((YAML::Node *)this, "valueArray", (uint64_t)v220);
    siri::intelligence::ValidateFlowTest_KeyValueParameter((siri::intelligence *)v220, a2, v114);
    v115 = v221;
    if (v221)
    {
      v116 = (unint64_t *)&v221->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    if ((v220[31] & 0x80000000) != 0)
    {
      v118 = *(void **)&v220[8];
LABEL_363:
      operator delete(v118);
    }
  }
LABEL_364:
  YAML::Node::operator[]<char [16]>((YAML::Node *)this, "valueDictionary", (uint64_t)v220);
  v146 = !v220[0] || v222 && !*(_BYTE *)**v222;
  v147 = v221;
  if (v221)
  {
    v148 = (unint64_t *)&v221->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v220[8]);
    if (v146)
      return;
  }
  else if (v146)
  {
    return;
  }
  YAML::Node::operator[]<char [16]>((YAML::Node *)this, "valueDictionary", (uint64_t)v220);
  if (!v220[0])
  {
    v202 = __cxa_allocate_exception(0x38uLL);
    if ((v220[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v213, *(const std::string::value_type **)&v220[8], *(std::string::size_type *)&v220[16]);
    }
    else
    {
      *(_OWORD *)v213 = *(_OWORD *)&v220[8];
      *(_QWORD *)&v213[16] = *(_QWORD *)&v220[24];
    }
    YAML::InvalidNode::InvalidNode(v202, (uint64_t)v213);
  }
  if (v222)
  {
    v150 = **v222;
    if (*(_BYTE *)v150)
      v151 = *(_DWORD *)(v150 + 16);
    else
      v151 = 0;
  }
  else
  {
    v151 = 1;
  }
  v152 = v221;
  if (v221)
  {
    v153 = (unint64_t *)&v221->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if ((v220[31] & 0x80000000) != 0)
    operator delete(*(void **)&v220[8]);
  if (v151 == 3)
  {
    YAML::Node::operator[]<char [16]>((YAML::Node *)this, "valueDictionary", (uint64_t)v213);
    if (v213[0] && v215)
    {
      YAML::detail::node_data::begin(**v215, (uint64_t)v220);
      v155 = *(_QWORD *)&v213[32];
      v156 = v214;
      if (v214)
      {
        v157 = (unint64_t *)&v214->__shared_owners_;
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
        *(_OWORD *)v218 = *(_OWORD *)v220;
        *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v218[32] = v155;
        v219 = v156;
        do
          v159 = __ldxr(v157);
        while (__stxr(v159 + 1, v157));
        do
          v160 = __ldaxr(v157);
        while (__stlxr(v160 - 1, v157));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      else
      {
        *(_OWORD *)v218 = *(_OWORD *)v220;
        *(_OWORD *)&v218[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v218[32] = *(_QWORD *)&v213[32];
        v219 = 0;
      }
    }
    else
    {
      *(_DWORD *)v218 = 0;
      memset(&v218[8], 0, 32);
      v219 = 0;
    }
    if (v213[0] && v215)
    {
      YAML::detail::node_data::end(**v215, (uint64_t)v220);
      v166 = *(_QWORD *)&v213[32];
      v167 = v214;
      if (v214)
      {
        v168 = (unint64_t *)&v214->__shared_owners_;
        do
          v169 = __ldxr(v168);
        while (__stxr(v169 + 1, v168));
        *(_OWORD *)v211 = *(_OWORD *)v220;
        *(_OWORD *)&v211[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v211[32] = v166;
        v212 = v167;
        do
          v170 = __ldxr(v168);
        while (__stxr(v170 + 1, v168));
        do
          v171 = __ldaxr(v168);
        while (__stlxr(v171 - 1, v168));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      else
      {
        *(_OWORD *)v211 = *(_OWORD *)v220;
        *(_OWORD *)&v211[16] = *(_OWORD *)&v220[16];
        *(_QWORD *)&v211[32] = *(_QWORD *)&v213[32];
        v212 = 0;
      }
    }
    else
    {
      *(_DWORD *)v211 = 0;
      memset(&v211[8], 0, 32);
      v212 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v218 == *(_DWORD *)v211)
      {
        v172 = &v218[8];
        v173 = &v211[8];
        if (*(_DWORD *)v218 != 1)
        {
          if (*(_DWORD *)v218 != 2)
            break;
          v172 = &v218[16];
          v173 = &v211[16];
        }
        if (*(_QWORD *)v172 == *(_QWORD *)v173)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v218, (uint64_t)v220);
      siri::intelligence::ValidateFlowTest_KeyValueParameter((siri::intelligence *)v220, a2, v174);
      v175 = v230;
      if (v230)
      {
        v176 = (unint64_t *)&v230->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      if (SHIBYTE(v229[0]) < 0)
        operator delete(v228[0]);
      v178 = v226;
      if (v226)
      {
        v179 = (unint64_t *)&v226->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      if (SHIBYTE(v225) < 0)
        operator delete((void *)v224);
      v181 = v221;
      if (v221)
      {
        v182 = (unint64_t *)&v221->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      if ((v220[31] & 0x80000000) != 0)
        operator delete(*(void **)&v220[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v218);
    }
    v184 = v212;
    if (v212)
    {
      v185 = (unint64_t *)&v212->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    v187 = v219;
    if (v219)
    {
      v188 = (unint64_t *)&v219->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v190 = v214;
    if (v214)
    {
      v191 = (unint64_t *)&v214->__shared_owners_;
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    if ((v213[31] & 0x80000000) != 0)
    {
      v165 = *(void **)&v213[8];
      goto LABEL_465;
    }
  }
  else
  {
    YAML::Node::operator[]<char [16]>((YAML::Node *)this, "valueDictionary", (uint64_t)v220);
    siri::intelligence::ValidateFlowTest_KeyValueParameter((siri::intelligence *)v220, a2, v161);
    v162 = v221;
    if (v221)
    {
      v163 = (unint64_t *)&v221->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    if ((v220[31] & 0x80000000) != 0)
    {
      v165 = *(void **)&v220[8];
LABEL_465:
      operator delete(v165);
    }
  }
}

void sub_22AEED1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  uint64_t v56;

  v56 = 0;
  while (1)
  {
    if (*(char *)(v54 + v56 + 143) < 0)
      operator delete(*(void **)(v54 + v56 + 120));
    v56 -= 24;
    if (v56 == -144)
    {
      __cxa_guard_abort(&qword_253F46020);
      _Unwind_Resume(a1);
    }
  }
}

void YAML::Node::operator[]<char [10]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [10],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEED718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [11]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [11],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEED9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [15]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [15],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Node::operator[]<char [16]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [16],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEDEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t streamable_to_string<char [13],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEDFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [4]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [4],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEE228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t streamable_to_string<char [4],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEE354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [10],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEE434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [11],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEE514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [3]>(YAML::Node *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  uint64_t v26;
  std::string v27;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v27 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v27);
  }
  YAML::Node::EnsureNodeExists((uint64_t ****)this);
  v6 = (uint64_t **)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v23 = *((_QWORD *)this + 4);
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = YAML::detail::node::get<std::string>(v6, (unsigned __int8 *)__p, &v23);
  v11 = v24;
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    if (v10)
    {
LABEL_12:
      v14 = *((_QWORD *)this + 4);
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        *(_QWORD *)(a3 + 48) = v10;
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_BYTE *)a3 = 1;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = v14;
        *(_QWORD *)(a3 + 40) = 0;
        *(_QWORD *)(a3 + 48) = v10;
      }
      return;
    }
  }
  else if (v10)
  {
    goto LABEL_12;
  }
  streamable_to_string<char [3],true>::impl(a2);
  *(_BYTE *)a3 = 0;
  v20 = (std::string *)(a3 + 8);
  if (SHIBYTE(v26) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v21 = SHIBYTE(v26);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 24) = v26;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
}

void sub_22AEEE754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t streamable_to_string<char [3],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEE880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [15],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEE960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [16],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEEA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t streamable_to_string<char [7],true>::impl(const char *a1)
{
  size_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  v2 = strlen(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)a1, v2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v8);
}

void sub_22AEEEB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::ParseFlowTest_Test(siri::intelligence *this, protobuf::FlowTest_Test *a2, const YAML::Node *a3)
{
  BOOL v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  siri::intelligence *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  const YAML::Node *v56;
  int *v57;
  uint64_t v58;
  int v59;
  siri::intelligence *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *size;
  uint64_t v82;
  uint64_t v83;
  const YAML::Node *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  BOOL v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *exception;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _BYTE __p[32];
  std::__shared_weak_count *v102;
  uint64_t **v103;
  void *v104;
  char v105;
  std::__shared_weak_count *v106;
  void *v107;
  char v108;
  std::__shared_weak_count *v109;
  _BYTE v110[40];
  std::__shared_weak_count *v111;
  _BYTE v112[40];
  std::__shared_weak_count *v113;
  std::string v114;
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t **v118;
  _QWORD v119[3];

  memset(v119, 0, sizeof(v119));
  YAML::Node::operator[]<char [5]>(a2, "name", (uint64_t)__p);
  v5 = !__p[0] || v103 && !*(_BYTE *)**v103;
  v6 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (!v5)
  {
    YAML::Node::operator[]<char [5]>(a2, "name", (uint64_t)__p);
    if (!__p[0])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      else
        v114 = *(std::string *)&__p[8];
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v114);
    }
    v114.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)&v114, (std::string *)v112);
    *((_DWORD *)this + 4) |= 1u;
    v9 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v112);
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    v10 = v102;
    if (v102)
    {
      v11 = (unint64_t *)&v102->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
  }
  YAML::Node::operator[]<char [12]>(a2, "description", (uint64_t)__p);
  v13 = !__p[0] || v103 && !*(_BYTE *)**v103;
  v14 = v102;
  if (v102)
  {
    v15 = (unint64_t *)&v102->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v13)
      goto LABEL_48;
  }
  else if (v13)
  {
    goto LABEL_48;
  }
  YAML::Node::operator[]<char [12]>(a2, "description", (uint64_t)__p);
  if (!__p[0])
  {
    v97 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v114 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v97, (uint64_t)&v114);
  }
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v114, (std::string *)v112);
  *((_DWORD *)this + 4) |= 2u;
  v17 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v112);
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  v18 = v102;
  if (v102)
  {
    v19 = (unint64_t *)&v102->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_48:
  YAML::Node::operator[]<char [8]>(a2, "enabled", (uint64_t)__p);
  v21 = !__p[0] || v103 && !*(_BYTE *)**v103;
  v22 = v102;
  if (v102)
  {
    v23 = (unint64_t *)&v102->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v21)
      goto LABEL_72;
  }
  else if (v21)
  {
    goto LABEL_72;
  }
  YAML::Node::operator[]<char [8]>(a2, "enabled", (uint64_t)__p);
  if (!__p[0])
  {
    v98 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v114 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v98, (uint64_t)&v114);
  }
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v114, (std::string *)v112);
  v25 = siri::intelligence::StringToBool((const std::string *)v112, 0);
  *((_DWORD *)this + 4) |= 4u;
  *((_BYTE *)this + 64) = v25;
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  v26 = v102;
  if (v102)
  {
    v27 = (unint64_t *)&v102->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_72:
  YAML::Node::operator[]<char [6]>(a2, "steps", (uint64_t)__p);
  v29 = !__p[0] || v103 && !*(_BYTE *)**v103;
  v30 = v102;
  if (v102)
  {
    v31 = (unint64_t *)&v102->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v29)
      goto LABEL_188;
  }
  else if (v29)
  {
    goto LABEL_188;
  }
  YAML::Node::operator[]<char [6]>(a2, "steps", (uint64_t)__p);
  if (!__p[0])
  {
    v99 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v114 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v99, (uint64_t)&v114);
  }
  if (v103)
  {
    v33 = **v103;
    if (*(_BYTE *)v33)
      v34 = *(_DWORD *)(v33 + 16);
    else
      v34 = 0;
  }
  else
  {
    v34 = 1;
  }
  v35 = v102;
  if (v102)
  {
    v36 = (unint64_t *)&v102->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v34 == 3)
  {
    YAML::Node::operator[]<char [6]>(a2, "steps", (uint64_t)&v114);
    if (v114.__r_.__value_.__s.__data_[0] && v118)
    {
      YAML::detail::node_data::begin(**v118, (uint64_t)__p);
      v38 = v116;
      v39 = v117;
      if (v117)
      {
        v40 = (unint64_t *)&v117->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_OWORD *)v112 = *(_OWORD *)__p;
        *(_OWORD *)&v112[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v112[32] = v38;
        v113 = v39;
        do
          v42 = __ldxr(v40);
        while (__stxr(v42 + 1, v40));
        do
          v43 = __ldaxr(v40);
        while (__stlxr(v43 - 1, v40));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      else
      {
        *(_OWORD *)v112 = *(_OWORD *)__p;
        *(_OWORD *)&v112[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v112[32] = v116;
        v113 = 0;
      }
    }
    else
    {
      *(_DWORD *)v112 = 0;
      memset(&v112[8], 0, 32);
      v113 = 0;
    }
    if (v114.__r_.__value_.__s.__data_[0] && v118)
    {
      YAML::detail::node_data::end(**v118, (uint64_t)__p);
      v48 = v116;
      v49 = v117;
      if (v117)
      {
        v50 = (unint64_t *)&v117->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        *(_OWORD *)v110 = *(_OWORD *)__p;
        *(_OWORD *)&v110[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v110[32] = v48;
        v111 = v49;
        do
          v52 = __ldxr(v50);
        while (__stxr(v52 + 1, v50));
        do
          v53 = __ldaxr(v50);
        while (__stlxr(v53 - 1, v50));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      else
      {
        *(_OWORD *)v110 = *(_OWORD *)__p;
        *(_OWORD *)&v110[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v110[32] = v116;
        v111 = 0;
      }
    }
    else
    {
      *(_DWORD *)v110 = 0;
      memset(&v110[8], 0, 32);
      v111 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v112 == *(_DWORD *)v110)
      {
        v54 = &v112[8];
        v55 = &v110[8];
        if (*(_DWORD *)v112 != 1)
        {
          if (*(_DWORD *)v112 != 2)
            goto LABEL_159;
          v54 = &v112[16];
          v55 = &v110[16];
        }
        if (*(_QWORD *)v54 == *(_QWORD *)v55)
        {
LABEL_159:
          v72 = v111;
          if (v111)
          {
            v73 = (unint64_t *)&v111->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = v113;
          if (v113)
          {
            v76 = (unint64_t *)&v113->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          v78 = v117;
          if (v117)
          {
            v79 = (unint64_t *)&v117->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          if (v115 < 0)
          {
            size = (void *)v114.__r_.__value_.__l.__size_;
            goto LABEL_187;
          }
          goto LABEL_188;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v112, (uint64_t)__p);
      v57 = (int *)*((_QWORD *)this + 5);
      if (!v57)
        break;
      v58 = *((int *)this + 8);
      v59 = *v57;
      if ((int)v58 >= *v57)
      {
        if (v59 == *((_DWORD *)this + 9))
        {
LABEL_135:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v59 + 1);
          v57 = (int *)*((_QWORD *)this + 5);
          v59 = *v57;
        }
        *v57 = v59 + 1;
        v60 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 3));
        v61 = *((_QWORD *)this + 5);
        v62 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v62 + 1;
        *(_QWORD *)(v61 + 8 * v62 + 8) = v60;
        goto LABEL_137;
      }
      *((_DWORD *)this + 8) = v58 + 1;
      v60 = *(siri::intelligence **)&v57[2 * v58 + 2];
LABEL_137:
      siri::intelligence::ParseFlowTest_Step(v60, (protobuf::FlowTest_Step *)__p, v56);
      v63 = v109;
      if (v109)
      {
        v64 = (unint64_t *)&v109->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (v108 < 0)
        operator delete(v107);
      v66 = v106;
      if (v106)
      {
        v67 = (unint64_t *)&v106->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v105 < 0)
        operator delete(v104);
      v69 = v102;
      if (v102)
      {
        v70 = (unint64_t *)&v102->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v112);
    }
    v59 = *((_DWORD *)this + 9);
    goto LABEL_135;
  }
  v44 = (int *)*((_QWORD *)this + 5);
  if (!v44)
  {
    v46 = *((_DWORD *)this + 9);
    goto LABEL_178;
  }
  v45 = *((int *)this + 8);
  v46 = *v44;
  if ((int)v45 >= *v44)
  {
    if (v46 != *((_DWORD *)this + 9))
    {
LABEL_179:
      *v44 = v46 + 1;
      v47 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                 + 3));
      v82 = *((_QWORD *)this + 5);
      v83 = *((int *)this + 8);
      *((_DWORD *)this + 8) = v83 + 1;
      *(_QWORD *)(v82 + 8 * v83 + 8) = v47;
      goto LABEL_180;
    }
LABEL_178:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v46 + 1);
    v44 = (int *)*((_QWORD *)this + 5);
    v46 = *v44;
    goto LABEL_179;
  }
  *((_DWORD *)this + 8) = v45 + 1;
  v47 = *(siri::intelligence **)&v44[2 * v45 + 2];
LABEL_180:
  YAML::Node::operator[]<char [6]>(a2, "steps", (uint64_t)__p);
  siri::intelligence::ParseFlowTest_Step(v47, (protobuf::FlowTest_Step *)__p, v84);
  v85 = v102;
  if (v102)
  {
    v86 = (unint64_t *)&v102->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    size = *(void **)&__p[8];
LABEL_187:
    operator delete(size);
  }
LABEL_188:
  YAML::Node::operator[]<char [7]>(a2, "repeat", (uint64_t)__p);
  v88 = !__p[0] || v103 && !*(_BYTE *)**v103;
  v89 = v102;
  if (v102)
  {
    v90 = (unint64_t *)&v102->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v88)
      goto LABEL_212;
  }
  else if (v88)
  {
    goto LABEL_212;
  }
  YAML::Node::operator[]<char [7]>(a2, "repeat", (uint64_t)__p);
  if (!__p[0])
  {
    v100 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v114 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v100, (uint64_t)&v114);
  }
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v114, (std::string *)v112);
  v92 = siri::intelligence::StringToIntegralType<int>((const std::string *)v112, 0);
  *((_DWORD *)this + 4) |= 8u;
  *((_DWORD *)this + 17) = v92;
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  v93 = v102;
  if (v102)
  {
    v94 = (unint64_t *)&v102->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_212:
  *(_QWORD *)__p = v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22AEEF89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1 - 176);
  YAML::Node::~Node((void **)(v1 - 160));
  *(_QWORD *)(v1 - 208) = v1 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  __n128 result;
  uint64_t v7;

  v4 = *a1;
  if (*a1 == a2)
  {
    v7 = operator new();
    result = *a3;
    *(__n128 *)v7 = *a3;
    *(_QWORD *)(v7 + 16) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *a1 = v7;
  }
  else
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    result = *a3;
    *(_QWORD *)(v4 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v4 = result;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return result;
}

void siri::intelligence::ParseFlowTest_Step(siri::intelligence *this, protobuf::FlowTest_Step *a2, const YAML::Node *a3)
{
  BOOL v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int v22;
  siri::intelligence *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  const YAML::Node *v32;
  int *v33;
  uint64_t v34;
  int v35;
  siri::intelligence *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *size;
  uint64_t v58;
  uint64_t v59;
  const YAML::Node *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  BOOL v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  protobuf::FlowTest_StartFrom *started;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __n128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  BOOL v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  BOOL v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  protobuf::FlowTest_SendIntent *v92;
  BOOL v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __n128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __n128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  BOOL v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int *v124;
  uint64_t v125;
  int v126;
  siri::intelligence *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  const YAML::Node *v136;
  int *v137;
  uint64_t v138;
  int v139;
  siri::intelligence *v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  const YAML::Node *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  BOOL v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  protobuf::FlowTest_AssertResponse *v175;
  BOOL v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  __n128 v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  BOOL v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  int v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  __n128 v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  __n128 v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  BOOL v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  __n128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  __n128 v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  BOOL v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  int v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  BOOL v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  protobuf::FlowTest_AssertCondition *v293;
  BOOL v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  __n128 v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  BOOL v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  char v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *exception;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _BYTE v329[40];
  std::__shared_weak_count *v330;
  _QWORD v331[3];
  std::string v332;
  _BYTE __p[32];
  std::__shared_weak_count *v334;
  uint64_t **v335;
  void *v336;
  char v337;
  std::__shared_weak_count *v338;
  void *v339;
  char v340;
  std::__shared_weak_count *v341;
  _BYTE v342[40];
  std::__shared_weak_count *v343;
  _BYTE v344[40];
  std::__shared_weak_count *v345;
  std::string v346;
  char v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  uint64_t **v350;
  _QWORD v351[3];
  std::string v352;

  memset(v331, 0, sizeof(v331));
  YAML::Node::operator[]<char [13]>(a2, "setVariables", (uint64_t)__p);
  v5 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v6 = v334;
  if (v334)
  {
    p_shared_owners = (unint64_t *)&v334->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v5)
      goto LABEL_117;
  }
  else if (v5)
  {
    goto LABEL_117;
  }
  YAML::Node::operator[]<char [13]>(a2, "setVariables", (uint64_t)__p);
  if (!__p[0])
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v346);
  }
  if (v335)
  {
    v9 = **v335;
    if (*(_BYTE *)v9)
      v10 = *(_DWORD *)(v9 + 16);
    else
      v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  v11 = v334;
  if (v334)
  {
    v12 = (unint64_t *)&v334->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v10 == 3)
  {
    YAML::Node::operator[]<char [13]>(a2, "setVariables", (uint64_t)&v346);
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::begin(**v350, (uint64_t)__p);
      v14 = v348;
      v15 = v349;
      if (v349)
      {
        v16 = (unint64_t *)&v349->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_OWORD *)v329 = *(_OWORD *)__p;
        *(_OWORD *)&v329[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v329[32] = v14;
        v330 = v15;
        do
          v18 = __ldxr(v16);
        while (__stxr(v18 + 1, v16));
        do
          v19 = __ldaxr(v16);
        while (__stlxr(v19 - 1, v16));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        *(_OWORD *)v329 = *(_OWORD *)__p;
        *(_OWORD *)&v329[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v329[32] = v348;
        v330 = 0;
      }
    }
    else
    {
      *(_DWORD *)v329 = 0;
      memset(&v329[8], 0, 32);
      v330 = 0;
    }
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::end(**v350, (uint64_t)__p);
      v24 = v348;
      v25 = v349;
      if (v349)
      {
        v26 = (unint64_t *)&v349->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v24;
        v345 = v25;
        do
          v28 = __ldxr(v26);
        while (__stxr(v28 + 1, v26));
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      else
      {
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v348;
        v345 = 0;
      }
    }
    else
    {
      *(_DWORD *)v344 = 0;
      memset(&v344[8], 0, 32);
      v345 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v329 == *(_DWORD *)v344)
      {
        v30 = &v329[8];
        v31 = &v344[8];
        if (*(_DWORD *)v329 != 1)
        {
          if (*(_DWORD *)v329 != 2)
            goto LABEL_88;
          v30 = &v329[16];
          v31 = &v344[16];
        }
        if (*(_QWORD *)v30 == *(_QWORD *)v31)
        {
LABEL_88:
          v48 = v345;
          if (v345)
          {
            v49 = (unint64_t *)&v345->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = v330;
          if (v330)
          {
            v52 = (unint64_t *)&v330->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = v349;
          if (v349)
          {
            v55 = (unint64_t *)&v349->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          if (v347 < 0)
          {
            size = (void *)v346.__r_.__value_.__l.__size_;
            goto LABEL_116;
          }
          goto LABEL_117;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v329, (uint64_t)__p);
      v33 = (int *)*((_QWORD *)this + 5);
      if (!v33)
        break;
      v34 = *((int *)this + 8);
      v35 = *v33;
      if ((int)v34 >= *v33)
      {
        if (v35 == *((_DWORD *)this + 9))
        {
LABEL_64:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v35 + 1);
          v33 = (int *)*((_QWORD *)this + 5);
          v35 = *v33;
        }
        *v33 = v35 + 1;
        v36 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                + 3));
        v37 = *((_QWORD *)this + 5);
        v38 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v38 + 1;
        *(_QWORD *)(v37 + 8 * v38 + 8) = v36;
        goto LABEL_66;
      }
      *((_DWORD *)this + 8) = v34 + 1;
      v36 = *(siri::intelligence **)&v33[2 * v34 + 2];
LABEL_66:
      siri::intelligence::ParseFlowTest_KeyValueParameter(v36, (protobuf::FlowTest_KeyValueParameter *)__p, v32);
      v39 = v341;
      if (v341)
      {
        v40 = (unint64_t *)&v341->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v340 < 0)
        operator delete(v339);
      v42 = v338;
      if (v338)
      {
        v43 = (unint64_t *)&v338->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v337 < 0)
        operator delete(v336);
      v45 = v334;
      if (v334)
      {
        v46 = (unint64_t *)&v334->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v329);
    }
    v35 = *((_DWORD *)this + 9);
    goto LABEL_64;
  }
  v20 = (int *)*((_QWORD *)this + 5);
  if (!v20)
  {
    v22 = *((_DWORD *)this + 9);
    goto LABEL_107;
  }
  v21 = *((int *)this + 8);
  v22 = *v20;
  if ((int)v21 >= *v20)
  {
    if (v22 != *((_DWORD *)this + 9))
    {
LABEL_108:
      *v20 = v22 + 1;
      v23 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 3));
      v58 = *((_QWORD *)this + 5);
      v59 = *((int *)this + 8);
      *((_DWORD *)this + 8) = v59 + 1;
      *(_QWORD *)(v58 + 8 * v59 + 8) = v23;
      goto LABEL_109;
    }
LABEL_107:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v22 + 1);
    v20 = (int *)*((_QWORD *)this + 5);
    v22 = *v20;
    goto LABEL_108;
  }
  *((_DWORD *)this + 8) = v21 + 1;
  v23 = *(siri::intelligence **)&v20[2 * v21 + 2];
LABEL_109:
  YAML::Node::operator[]<char [13]>(a2, "setVariables", (uint64_t)__p);
  siri::intelligence::ParseFlowTest_KeyValueParameter(v23, (protobuf::FlowTest_KeyValueParameter *)__p, v60);
  v61 = v334;
  if (v334)
  {
    v62 = (unint64_t *)&v334->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    size = *(void **)&__p[8];
LABEL_116:
    operator delete(size);
  }
LABEL_117:
  YAML::Node::operator[]<char [10]>(a2, "startFrom", (uint64_t)__p);
  v64 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v65 = v334;
  if (v334)
  {
    v66 = (unint64_t *)&v334->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v64)
      goto LABEL_188;
  }
  else if (v64)
  {
    goto LABEL_188;
  }
  *((_DWORD *)this + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((_QWORD *)this + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((_QWORD *)this + 6) = started;
  }
  YAML::Node::operator[]<char [10]>(a2, "startFrom", (uint64_t)&v346);
  memset(v344, 0, 24);
  YAML::Node::operator[]<char [11]>((YAML::Node *)&v346, "responseId", (uint64_t)__p);
  v69 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v70 = v334;
  if (v334)
  {
    v71 = (unint64_t *)&v334->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v69)
      goto LABEL_157;
  }
  else if (v69)
  {
    goto LABEL_157;
  }
  YAML::Node::operator[]<char [11]>((YAML::Node *)&v346, "responseId", (uint64_t)__p);
  if (!__p[0])
  {
    v316 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v329, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    }
    else
    {
      *(_OWORD *)v329 = *(_OWORD *)&__p[8];
      *(_QWORD *)&v329[16] = *(_QWORD *)&__p[24];
    }
    YAML::InvalidNode::InvalidNode(v316, (uint64_t)v329);
  }
  *(_QWORD *)v329 = __p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)v329, (std::string *)v342);
  *((_DWORD *)started + 4) |= 1u;
  v73 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)started + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v342);
  if ((v342[23] & 0x80000000) != 0)
    operator delete(*(void **)v342);
  v74 = v334;
  if (v334)
  {
    v75 = (unint64_t *)&v334->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v74->__on_zero_shared)(v74, v73);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_157:
  YAML::Node::operator[]<char [11]>((YAML::Node *)&v346, "activityId", (uint64_t)__p);
  v77 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v78 = v334;
  if (v334)
  {
    v79 = (unint64_t *)&v334->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v77)
      goto LABEL_181;
LABEL_171:
    YAML::Node::operator[]<char [11]>((YAML::Node *)&v346, "activityId", (uint64_t)__p);
    if (!__p[0])
    {
      v317 = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v329, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      }
      else
      {
        *(_OWORD *)v329 = *(_OWORD *)&__p[8];
        *(_QWORD *)&v329[16] = *(_QWORD *)&__p[24];
      }
      YAML::InvalidNode::InvalidNode(v317, (uint64_t)v329);
    }
    *(_QWORD *)v329 = __p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v329, (std::string *)v342);
    *((_DWORD *)started + 4) |= 2u;
    v81 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)started + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v342);
    if ((v342[23] & 0x80000000) != 0)
      operator delete(*(void **)v342);
    v82 = v334;
    if (v334)
    {
      v83 = (unint64_t *)&v334->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v81);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_181;
  }
  if (!v77)
    goto LABEL_171;
LABEL_181:
  *(_QWORD *)__p = v344;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v85 = v349;
  if (v349)
  {
    v86 = (unint64_t *)&v349->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v347 < 0)
    operator delete((void *)v346.__r_.__value_.__l.__size_);
LABEL_188:
  YAML::Node::operator[]<char [11]>(a2, "sendIntent", (uint64_t)__p);
  v88 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v89 = v334;
  if (v334)
  {
    v90 = (unint64_t *)&v334->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v88)
      goto LABEL_375;
  }
  else if (v88)
  {
    goto LABEL_375;
  }
  *((_DWORD *)this + 4) |= 2u;
  v92 = (protobuf::FlowTest_SendIntent *)*((_QWORD *)this + 7);
  if (!v92)
  {
    v92 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
    *((_QWORD *)this + 7) = v92;
  }
  YAML::Node::operator[]<char [11]>(a2, "sendIntent", (uint64_t)v329);
  memset(&v352, 0, sizeof(v352));
  YAML::Node::operator[]<char [3]>((YAML::Node *)v329, "id", (uint64_t)__p);
  v93 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v94 = v334;
  if (v334)
  {
    v95 = (unint64_t *)&v334->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v93)
      goto LABEL_228;
  }
  else if (v93)
  {
    goto LABEL_228;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v329, "id", (uint64_t)__p);
  if (!__p[0])
  {
    v318 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v318, (uint64_t)&v346);
  }
  v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
  *((_DWORD *)v92 + 4) |= 1u;
  v97 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v92 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v344);
  if ((v344[23] & 0x80000000) != 0)
    operator delete(*(void **)v344);
  v98 = v334;
  if (v334)
  {
    v99 = (unint64_t *)&v334->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v98->__on_zero_shared)(v98, v97);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_228:
  YAML::Node::operator[]<char [5]>((YAML::Node *)v329, "name", (uint64_t)__p);
  v101 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v102 = v334;
  if (v334)
  {
    v103 = (unint64_t *)&v334->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v101)
      goto LABEL_252;
  }
  else if (v101)
  {
    goto LABEL_252;
  }
  YAML::Node::operator[]<char [5]>((YAML::Node *)v329, "name", (uint64_t)__p);
  if (!__p[0])
  {
    v319 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v319, (uint64_t)&v346);
  }
  v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
  *((_DWORD *)v92 + 4) |= 2u;
  v105 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v92 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v344);
  if ((v344[23] & 0x80000000) != 0)
    operator delete(*(void **)v344);
  v106 = v334;
  if (v334)
  {
    v107 = (unint64_t *)&v334->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v106->__on_zero_shared)(v106, v105);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_252:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "slots", (uint64_t)__p);
  v109 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v110 = v334;
  if (v334)
  {
    v111 = (unint64_t *)&v334->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v109)
      goto LABEL_368;
  }
  else if (v109)
  {
    goto LABEL_368;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "slots", (uint64_t)__p);
  if (!__p[0])
  {
    v320 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v320, (uint64_t)&v346);
  }
  if (v335)
  {
    v113 = **v335;
    if (*(_BYTE *)v113)
      v114 = *(_DWORD *)(v113 + 16);
    else
      v114 = 0;
  }
  else
  {
    v114 = 1;
  }
  v115 = v334;
  if (v334)
  {
    v116 = (unint64_t *)&v334->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v114 == 3)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "slots", (uint64_t)&v346);
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::begin(**v350, (uint64_t)__p);
      v118 = v348;
      v119 = v349;
      if (v349)
      {
        v120 = (unint64_t *)&v349->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v118;
        v345 = v119;
        do
          v122 = __ldxr(v120);
        while (__stxr(v122 + 1, v120));
        do
          v123 = __ldaxr(v120);
        while (__stlxr(v123 - 1, v120));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      else
      {
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v348;
        v345 = 0;
      }
    }
    else
    {
      *(_DWORD *)v344 = 0;
      memset(&v344[8], 0, 32);
      v345 = 0;
    }
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::end(**v350, (uint64_t)__p);
      v128 = v348;
      v129 = v349;
      if (v349)
      {
        v130 = (unint64_t *)&v349->__shared_owners_;
        do
          v131 = __ldxr(v130);
        while (__stxr(v131 + 1, v130));
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v128;
        v343 = v129;
        do
          v132 = __ldxr(v130);
        while (__stxr(v132 + 1, v130));
        do
          v133 = __ldaxr(v130);
        while (__stlxr(v133 - 1, v130));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      else
      {
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v348;
        v343 = 0;
      }
    }
    else
    {
      *(_DWORD *)v342 = 0;
      memset(&v342[8], 0, 32);
      v343 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v344 == *(_DWORD *)v342)
      {
        v134 = &v344[8];
        v135 = &v342[8];
        if (*(_DWORD *)v344 != 1)
        {
          if (*(_DWORD *)v344 != 2)
            goto LABEL_339;
          v134 = &v344[16];
          v135 = &v342[16];
        }
        if (*(_QWORD *)v134 == *(_QWORD *)v135)
        {
LABEL_339:
          v152 = v343;
          if (v343)
          {
            v153 = (unint64_t *)&v343->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          v155 = v345;
          if (v345)
          {
            v156 = (unint64_t *)&v345->__shared_owners_;
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
          v158 = v349;
          if (v349)
          {
            v159 = (unint64_t *)&v349->__shared_owners_;
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          if (v347 < 0)
          {
            v161 = (void *)v346.__r_.__value_.__l.__size_;
            goto LABEL_367;
          }
          goto LABEL_368;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v344, (uint64_t)__p);
      v137 = (int *)*((_QWORD *)v92 + 5);
      if (!v137)
        break;
      v138 = *((int *)v92 + 8);
      v139 = *v137;
      if ((int)v138 >= *v137)
      {
        if (v139 == *((_DWORD *)v92 + 9))
        {
LABEL_315:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v92 + 6, v139 + 1);
          v137 = (int *)*((_QWORD *)v92 + 5);
          v139 = *v137;
        }
        *v137 = v139 + 1;
        v140 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v92
                                                                                                 + 3));
        v141 = *((_QWORD *)v92 + 5);
        v142 = *((int *)v92 + 8);
        *((_DWORD *)v92 + 8) = v142 + 1;
        *(_QWORD *)(v141 + 8 * v142 + 8) = v140;
        goto LABEL_317;
      }
      *((_DWORD *)v92 + 8) = v138 + 1;
      v140 = *(siri::intelligence **)&v137[2 * v138 + 2];
LABEL_317:
      siri::intelligence::ParseFlowTest_KeyValueParameter(v140, (protobuf::FlowTest_KeyValueParameter *)__p, v136);
      v143 = v341;
      if (v341)
      {
        v144 = (unint64_t *)&v341->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      if (v340 < 0)
        operator delete(v339);
      v146 = v338;
      if (v338)
      {
        v147 = (unint64_t *)&v338->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      if (v337 < 0)
        operator delete(v336);
      v149 = v334;
      if (v334)
      {
        v150 = (unint64_t *)&v334->__shared_owners_;
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v344);
    }
    v139 = *((_DWORD *)v92 + 9);
    goto LABEL_315;
  }
  v124 = (int *)*((_QWORD *)v92 + 5);
  if (!v124)
  {
    v126 = *((_DWORD *)v92 + 9);
LABEL_358:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v92 + 6, v126 + 1);
    v124 = (int *)*((_QWORD *)v92 + 5);
    v126 = *v124;
    goto LABEL_359;
  }
  v125 = *((int *)v92 + 8);
  v126 = *v124;
  if ((int)v125 < *v124)
  {
    *((_DWORD *)v92 + 8) = v125 + 1;
    v127 = *(siri::intelligence **)&v124[2 * v125 + 2];
    goto LABEL_360;
  }
  if (v126 == *((_DWORD *)v92 + 9))
    goto LABEL_358;
LABEL_359:
  *v124 = v126 + 1;
  v127 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v92
                                                                                           + 3));
  v162 = *((_QWORD *)v92 + 5);
  v163 = *((int *)v92 + 8);
  *((_DWORD *)v92 + 8) = v163 + 1;
  *(_QWORD *)(v162 + 8 * v163 + 8) = v127;
LABEL_360:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "slots", (uint64_t)__p);
  siri::intelligence::ParseFlowTest_KeyValueParameter(v127, (protobuf::FlowTest_KeyValueParameter *)__p, v164);
  v165 = v334;
  if (v334)
  {
    v166 = (unint64_t *)&v334->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    v161 = *(void **)&__p[8];
LABEL_367:
    operator delete(v161);
  }
LABEL_368:
  *(_QWORD *)__p = &v352;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v168 = v330;
  if (v330)
  {
    v169 = (unint64_t *)&v330->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  if ((v329[31] & 0x80000000) != 0)
    operator delete(*(void **)&v329[8]);
LABEL_375:
  YAML::Node::operator[]<char [15]>(a2, "assertResponse", (uint64_t)__p);
  v171 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v172 = v334;
  if (v334)
  {
    v173 = (unint64_t *)&v334->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v171)
      goto LABEL_662;
  }
  else if (v171)
  {
    goto LABEL_662;
  }
  *((_DWORD *)this + 4) |= 4u;
  v175 = (protobuf::FlowTest_AssertResponse *)*((_QWORD *)this + 8);
  if (!v175)
  {
    v175 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((_QWORD *)this + 8) = v175;
  }
  YAML::Node::operator[]<char [15]>(a2, "assertResponse", (uint64_t)v329);
  memset(v351, 0, sizeof(v351));
  YAML::Node::operator[]<char [3]>((YAML::Node *)v329, "id", (uint64_t)__p);
  v176 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v177 = v334;
  if (v334)
  {
    v178 = (unint64_t *)&v334->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v176)
      goto LABEL_415;
  }
  else if (v176)
  {
    goto LABEL_415;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)v329, "id", (uint64_t)__p);
  if (!__p[0])
  {
    v321 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v321, (uint64_t)&v346);
  }
  v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
  *((_DWORD *)v175 + 4) |= 1u;
  v180 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v175 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v344);
  if ((v344[23] & 0x80000000) != 0)
    operator delete(*(void **)v344);
  v181 = v334;
  if (v334)
  {
    v182 = (unint64_t *)&v334->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v181->__on_zero_shared)(v181, v180);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_415:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "anyId", (uint64_t)__p);
  v184 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v185 = v334;
  if (v334)
  {
    v186 = (unint64_t *)&v334->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v184)
      goto LABEL_523;
  }
  else if (v184)
  {
    goto LABEL_523;
  }
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "anyId", (uint64_t)__p);
  if (!__p[0])
  {
    v322 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v322, (uint64_t)&v346);
  }
  if (v335)
  {
    v188 = **v335;
    if (*(_BYTE *)v188)
      v189 = *(_DWORD *)(v188 + 16);
    else
      v189 = 0;
  }
  else
  {
    v189 = 1;
  }
  v190 = v334;
  if (v334)
  {
    v191 = (unint64_t *)&v334->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v189 == 3)
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "anyId", (uint64_t)&v346);
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::begin(**v350, (uint64_t)__p);
      v193 = v348;
      v194 = v349;
      if (v349)
      {
        v195 = (unint64_t *)&v349->__shared_owners_;
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v193;
        v345 = v194;
        do
          v197 = __ldxr(v195);
        while (__stxr(v197 + 1, v195));
        do
          v198 = __ldaxr(v195);
        while (__stlxr(v198 - 1, v195));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      else
      {
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v348;
        v345 = 0;
      }
    }
    else
    {
      *(_DWORD *)v344 = 0;
      memset(&v344[8], 0, 32);
      v345 = 0;
    }
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::end(**v350, (uint64_t)__p);
      v204 = v348;
      v205 = v349;
      if (v349)
      {
        v206 = (unint64_t *)&v349->__shared_owners_;
        do
          v207 = __ldxr(v206);
        while (__stxr(v207 + 1, v206));
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v204;
        v343 = v205;
        do
          v208 = __ldxr(v206);
        while (__stxr(v208 + 1, v206));
        do
          v209 = __ldaxr(v206);
        while (__stlxr(v209 - 1, v206));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      else
      {
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v348;
        v343 = 0;
      }
    }
    else
    {
      *(_DWORD *)v342 = 0;
      memset(&v342[8], 0, 32);
      v343 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v344 == *(_DWORD *)v342)
      {
        v210 = &v344[8];
        v211 = &v342[8];
        if (*(_DWORD *)v344 != 1)
        {
          if (*(_DWORD *)v344 != 2)
            break;
          v210 = &v344[16];
          v211 = &v342[16];
        }
        if (*(_QWORD *)v210 == *(_QWORD *)v211)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v344, (uint64_t)__p);
      if (!__p[0])
      {
        v313 = __cxa_allocate_exception(0x38uLL);
        if ((__p[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        else
          v352 = *(std::string *)&__p[8];
        YAML::InvalidNode::InvalidNode(v313, (uint64_t)&v352);
      }
      v352.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)&v352, &v332);
      v212 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>((uint64_t)v175 + 24, (__n128 *)&v332);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      v213 = v341;
      if (v341)
      {
        v214 = (unint64_t *)&v341->__shared_owners_;
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v213->__on_zero_shared)(v213, v212);
          std::__shared_weak_count::__release_weak(v213);
        }
      }
      if (v340 < 0)
        operator delete(v339);
      v216 = v338;
      if (v338)
      {
        v217 = (unint64_t *)&v338->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v216->__on_zero_shared)(v216, v212);
          std::__shared_weak_count::__release_weak(v216);
        }
      }
      if (v337 < 0)
        operator delete(v336);
      v219 = v334;
      if (v334)
      {
        v220 = (unint64_t *)&v334->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v219->__on_zero_shared)(v219, v212);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v344);
    }
    v222 = v343;
    if (v343)
    {
      v223 = (unint64_t *)&v343->__shared_owners_;
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    v225 = v345;
    if (v345)
    {
      v226 = (unint64_t *)&v345->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
        std::__shared_weak_count::__release_weak(v225);
      }
    }
    v228 = v349;
    if (v349)
    {
      v229 = (unint64_t *)&v349->__shared_owners_;
      do
        v230 = __ldaxr(v229);
      while (__stlxr(v230 - 1, v229));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    if (v347 < 0)
    {
      v203 = (void *)v346.__r_.__value_.__l.__size_;
      goto LABEL_522;
    }
  }
  else
  {
    YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "anyId", (uint64_t)__p);
    if (!__p[0])
    {
      v327 = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      else
        v346 = *(std::string *)&__p[8];
      YAML::InvalidNode::InvalidNode(v327, (uint64_t)&v346);
    }
    v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
    v199 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>((uint64_t)v175 + 24, (__n128 *)v344);
    if ((v344[23] & 0x80000000) != 0)
      operator delete(*(void **)v344);
    v200 = v334;
    if (v334)
    {
      v201 = (unint64_t *)&v334->__shared_owners_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v200->__on_zero_shared)(v200, v199);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
    {
      v203 = *(void **)&__p[8];
LABEL_522:
      operator delete(v203);
    }
  }
LABEL_523:
  YAML::Node::operator[]<char [7]>((YAML::Node *)v329, "allIds", (uint64_t)__p);
  v231 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v232 = v334;
  if (v334)
  {
    v233 = (unint64_t *)&v334->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v231)
      goto LABEL_631;
  }
  else if (v231)
  {
    goto LABEL_631;
  }
  YAML::Node::operator[]<char [7]>((YAML::Node *)v329, "allIds", (uint64_t)__p);
  if (!__p[0])
  {
    v323 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v346 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v323, (uint64_t)&v346);
  }
  if (v335)
  {
    v235 = **v335;
    if (*(_BYTE *)v235)
      v236 = *(_DWORD *)(v235 + 16);
    else
      v236 = 0;
  }
  else
  {
    v236 = 1;
  }
  v237 = v334;
  if (v334)
  {
    v238 = (unint64_t *)&v334->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v236 == 3)
  {
    YAML::Node::operator[]<char [7]>((YAML::Node *)v329, "allIds", (uint64_t)&v346);
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::begin(**v350, (uint64_t)__p);
      v240 = v348;
      v241 = v349;
      if (v349)
      {
        v242 = (unint64_t *)&v349->__shared_owners_;
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v240;
        v345 = v241;
        do
          v244 = __ldxr(v242);
        while (__stxr(v244 + 1, v242));
        do
          v245 = __ldaxr(v242);
        while (__stlxr(v245 - 1, v242));
        if (!v245)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      else
      {
        *(_OWORD *)v344 = *(_OWORD *)__p;
        *(_OWORD *)&v344[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v344[32] = v348;
        v345 = 0;
      }
    }
    else
    {
      *(_DWORD *)v344 = 0;
      memset(&v344[8], 0, 32);
      v345 = 0;
    }
    if (v346.__r_.__value_.__s.__data_[0] && v350)
    {
      YAML::detail::node_data::end(**v350, (uint64_t)__p);
      v251 = v348;
      v252 = v349;
      if (v349)
      {
        v253 = (unint64_t *)&v349->__shared_owners_;
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v251;
        v343 = v252;
        do
          v255 = __ldxr(v253);
        while (__stxr(v255 + 1, v253));
        do
          v256 = __ldaxr(v253);
        while (__stlxr(v256 - 1, v253));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      else
      {
        *(_OWORD *)v342 = *(_OWORD *)__p;
        *(_OWORD *)&v342[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v342[32] = v348;
        v343 = 0;
      }
    }
    else
    {
      *(_DWORD *)v342 = 0;
      memset(&v342[8], 0, 32);
      v343 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v344 == *(_DWORD *)v342)
      {
        v257 = &v344[8];
        v258 = &v342[8];
        if (*(_DWORD *)v344 != 1)
        {
          if (*(_DWORD *)v344 != 2)
            break;
          v257 = &v344[16];
          v258 = &v342[16];
        }
        if (*(_QWORD *)v257 == *(_QWORD *)v258)
          break;
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v344, (uint64_t)__p);
      if (!__p[0])
      {
        v314 = __cxa_allocate_exception(0x38uLL);
        if ((__p[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        else
          v352 = *(std::string *)&__p[8];
        YAML::InvalidNode::InvalidNode(v314, (uint64_t)&v352);
      }
      v352.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      YAML::as_if<std::string,void>::operator()((YAML::Node **)&v352, &v332);
      v259 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>((uint64_t)v175 + 48, (__n128 *)&v332);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      v260 = v341;
      if (v341)
      {
        v261 = (unint64_t *)&v341->__shared_owners_;
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v260->__on_zero_shared)(v260, v259);
          std::__shared_weak_count::__release_weak(v260);
        }
      }
      if (v340 < 0)
        operator delete(v339);
      v263 = v338;
      if (v338)
      {
        v264 = (unint64_t *)&v338->__shared_owners_;
        do
          v265 = __ldaxr(v264);
        while (__stlxr(v265 - 1, v264));
        if (!v265)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v263->__on_zero_shared)(v263, v259);
          std::__shared_weak_count::__release_weak(v263);
        }
      }
      if (v337 < 0)
        operator delete(v336);
      v266 = v334;
      if (v334)
      {
        v267 = (unint64_t *)&v334->__shared_owners_;
        do
          v268 = __ldaxr(v267);
        while (__stlxr(v268 - 1, v267));
        if (!v268)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v266->__on_zero_shared)(v266, v259);
          std::__shared_weak_count::__release_weak(v266);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v344);
    }
    v269 = v343;
    if (v343)
    {
      v270 = (unint64_t *)&v343->__shared_owners_;
      do
        v271 = __ldaxr(v270);
      while (__stlxr(v271 - 1, v270));
      if (!v271)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v272 = v345;
    if (v345)
    {
      v273 = (unint64_t *)&v345->__shared_owners_;
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    v275 = v349;
    if (v349)
    {
      v276 = (unint64_t *)&v349->__shared_owners_;
      do
        v277 = __ldaxr(v276);
      while (__stlxr(v277 - 1, v276));
      if (!v277)
      {
        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
        std::__shared_weak_count::__release_weak(v275);
      }
    }
    if (v347 < 0)
    {
      v250 = (void *)v346.__r_.__value_.__l.__size_;
      goto LABEL_630;
    }
  }
  else
  {
    YAML::Node::operator[]<char [7]>((YAML::Node *)v329, "allIds", (uint64_t)__p);
    if (!__p[0])
    {
      v328 = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      else
        v346 = *(std::string *)&__p[8];
      YAML::InvalidNode::InvalidNode(v328, (uint64_t)&v346);
    }
    v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
    v246 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>((uint64_t)v175 + 48, (__n128 *)v344);
    if ((v344[23] & 0x80000000) != 0)
      operator delete(*(void **)v344);
    v247 = v334;
    if (v334)
    {
      v248 = (unint64_t *)&v334->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v247->__on_zero_shared)(v247, v246);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
    {
      v250 = *(void **)&__p[8];
LABEL_630:
      operator delete(v250);
    }
  }
LABEL_631:
  YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "count", (uint64_t)__p);
  v278 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v279 = v334;
  if (v334)
  {
    v280 = (unint64_t *)&v334->__shared_owners_;
    do
      v281 = __ldaxr(v280);
    while (__stlxr(v281 - 1, v280));
    if (!v281)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v278)
      goto LABEL_655;
LABEL_645:
    YAML::Node::operator[]<char [6]>((YAML::Node *)v329, "count", (uint64_t)__p);
    if (!__p[0])
    {
      v326 = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v346, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      else
        v346 = *(std::string *)&__p[8];
      YAML::InvalidNode::InvalidNode(v326, (uint64_t)&v346);
    }
    v346.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)&v346, (std::string *)v344);
    v282 = siri::intelligence::StringToIntegralType<int>((const std::string *)v344, 0);
    *((_DWORD *)v175 + 4) |= 2u;
    *((_DWORD *)v175 + 20) = v282;
    if ((v344[23] & 0x80000000) != 0)
      operator delete(*(void **)v344);
    v283 = v334;
    if (v334)
    {
      v284 = (unint64_t *)&v334->__shared_owners_;
      do
        v285 = __ldaxr(v284);
      while (__stlxr(v285 - 1, v284));
      if (!v285)
      {
        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
        std::__shared_weak_count::__release_weak(v283);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_655;
  }
  if (!v278)
    goto LABEL_645;
LABEL_655:
  *(_QWORD *)__p = v351;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v286 = v330;
  if (v330)
  {
    v287 = (unint64_t *)&v330->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  if ((v329[31] & 0x80000000) != 0)
    operator delete(*(void **)&v329[8]);
LABEL_662:
  YAML::Node::operator[]<char [16]>(a2, "assertCondition", (uint64_t)__p);
  v289 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v290 = v334;
  if (v334)
  {
    v291 = (unint64_t *)&v334->__shared_owners_;
    do
      v292 = __ldaxr(v291);
    while (__stlxr(v292 - 1, v291));
    if (!v292)
    {
      ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
      std::__shared_weak_count::__release_weak(v290);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v289)
      goto LABEL_733;
  }
  else if (v289)
  {
    goto LABEL_733;
  }
  *((_DWORD *)this + 4) |= 8u;
  v293 = (protobuf::FlowTest_AssertCondition *)*((_QWORD *)this + 9);
  if (!v293)
  {
    v293 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(0);
    *((_QWORD *)this + 9) = v293;
  }
  YAML::Node::operator[]<char [16]>(a2, "assertCondition", (uint64_t)&v346);
  memset(v344, 0, 24);
  YAML::Node::operator[]<char [3]>((YAML::Node *)&v346, "id", (uint64_t)__p);
  v294 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v295 = v334;
  if (v334)
  {
    v296 = (unint64_t *)&v334->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v294)
      goto LABEL_702;
  }
  else if (v294)
  {
    goto LABEL_702;
  }
  YAML::Node::operator[]<char [3]>((YAML::Node *)&v346, "id", (uint64_t)__p);
  if (!__p[0])
  {
    v324 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v329, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    }
    else
    {
      *(_OWORD *)v329 = *(_OWORD *)&__p[8];
      *(_QWORD *)&v329[16] = *(_QWORD *)&__p[24];
    }
    YAML::InvalidNode::InvalidNode(v324, (uint64_t)v329);
  }
  *(_QWORD *)v329 = __p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)v329, (std::string *)v342);
  *((_DWORD *)v293 + 4) |= 1u;
  v298 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v293 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v342);
  if ((v342[23] & 0x80000000) != 0)
    operator delete(*(void **)v342);
  v299 = v334;
  if (v334)
  {
    v300 = (unint64_t *)&v334->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v299->__on_zero_shared)(v299, v298);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_702:
  YAML::Node::operator[]<char [6]>((YAML::Node *)&v346, "value", (uint64_t)__p);
  v302 = !__p[0] || v335 && !*(_BYTE *)**v335;
  v303 = v334;
  if (v334)
  {
    v304 = (unint64_t *)&v334->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v302)
      goto LABEL_726;
LABEL_716:
    YAML::Node::operator[]<char [6]>((YAML::Node *)&v346, "value", (uint64_t)__p);
    if (!__p[0])
    {
      v325 = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v329, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      }
      else
      {
        *(_OWORD *)v329 = *(_OWORD *)&__p[8];
        *(_QWORD *)&v329[16] = *(_QWORD *)&__p[24];
      }
      YAML::InvalidNode::InvalidNode(v325, (uint64_t)v329);
    }
    *(_QWORD *)v329 = __p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)v329, (std::string *)v342);
    v306 = siri::intelligence::StringToBool((const std::string *)v342, 0);
    *((_DWORD *)v293 + 4) |= 2u;
    *((_BYTE *)v293 + 32) = v306;
    if ((v342[23] & 0x80000000) != 0)
      operator delete(*(void **)v342);
    v307 = v334;
    if (v334)
    {
      v308 = (unint64_t *)&v334->__shared_owners_;
      do
        v309 = __ldaxr(v308);
      while (__stlxr(v309 - 1, v308));
      if (!v309)
      {
        ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
        std::__shared_weak_count::__release_weak(v307);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_726;
  }
  if (!v302)
    goto LABEL_716;
LABEL_726:
  *(_QWORD *)__p = v344;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v310 = v349;
  if (v349)
  {
    v311 = (unint64_t *)&v349->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  if (v347 < 0)
    operator delete((void *)v346.__r_.__value_.__l.__size_);
LABEL_733:
  *(_QWORD *)__p = v331;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22AEF2718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  uint64_t v57;

  __cxa_free_exception(v56);
  YAML::Node::~Node((void **)&a30);
  *(_QWORD *)(v57 - 256) = v57 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 256));
  YAML::Node::~Node(&__p);
  *(_QWORD *)(v57 - 256) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 256));
  _Unwind_Resume(a1);
}

void siri::intelligence::ParseFlowTest_KeyValueParameter(siri::intelligence *this, protobuf::FlowTest_KeyValueParameter *a2, const YAML::Node *a3)
{
  BOOL v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __n128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int *v52;
  uint64_t v53;
  int v54;
  siri::intelligence *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  const YAML::Node *v64;
  int *v65;
  uint64_t v66;
  int v67;
  siri::intelligence *v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *size;
  uint64_t v90;
  uint64_t v91;
  const YAML::Node *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  BOOL v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int *v111;
  uint64_t v112;
  int v113;
  siri::intelligence *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  const YAML::Node *v123;
  int *v124;
  uint64_t v125;
  int v126;
  siri::intelligence *v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  const YAML::Node *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  _QWORD *exception;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _BYTE __p[32];
  std::__shared_weak_count *v162;
  uint64_t **v163;
  void *v164;
  char v165;
  std::__shared_weak_count *v166;
  void *v167;
  char v168;
  std::__shared_weak_count *v169;
  _BYTE v170[40];
  std::__shared_weak_count *v171;
  _BYTE v172[40];
  std::__shared_weak_count *v173;
  std::string v174;
  char v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  uint64_t **v178;
  _QWORD v179[3];

  memset(v179, 0, sizeof(v179));
  YAML::Node::operator[]<char [4]>(a2, "key", (uint64_t)__p);
  v5 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v6 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (!v5)
  {
    YAML::Node::operator[]<char [4]>(a2, "key", (uint64_t)__p);
    if (!__p[0])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if ((__p[31] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
      else
        v174 = *(std::string *)&__p[8];
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v174);
    }
    v174.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    YAML::as_if<std::string,void>::operator()((YAML::Node **)&v174, (std::string *)v172);
    *((_DWORD *)this + 4) |= 1u;
    v9 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v172);
    if ((v172[23] & 0x80000000) != 0)
      operator delete(*(void **)v172);
    v10 = v162;
    if (v162)
    {
      v11 = (unint64_t *)&v162->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
  }
  YAML::Node::operator[]<char [12]>(a2, "valueNumber", (uint64_t)__p);
  v13 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v14 = v162;
  if (v162)
  {
    v15 = (unint64_t *)&v162->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v13)
      goto LABEL_48;
  }
  else if (v13)
  {
    goto LABEL_48;
  }
  YAML::Node::operator[]<char [12]>(a2, "valueNumber", (uint64_t)__p);
  if (!__p[0])
  {
    v156 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v174 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v156, (uint64_t)&v174);
  }
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v174, (std::string *)v172);
  siri::intelligence::StringToDouble((uint64_t)v172, 0);
  *((_DWORD *)this + 4) |= 4u;
  *((_QWORD *)this + 11) = v17;
  if ((v172[23] & 0x80000000) != 0)
    operator delete(*(void **)v172);
  v18 = v162;
  if (v162)
  {
    v19 = (unint64_t *)&v162->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_48:
  YAML::Node::operator[]<char [13]>(a2, "valueBoolean", (uint64_t)__p);
  v21 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v22 = v162;
  if (v162)
  {
    v23 = (unint64_t *)&v162->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v21)
      goto LABEL_72;
  }
  else if (v21)
  {
    goto LABEL_72;
  }
  YAML::Node::operator[]<char [13]>(a2, "valueBoolean", (uint64_t)__p);
  if (!__p[0])
  {
    v157 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v174 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v157, (uint64_t)&v174);
  }
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v174, (std::string *)v172);
  v25 = siri::intelligence::StringToBool((const std::string *)v172, 0);
  *((_DWORD *)this + 4) |= 8u;
  *((_BYTE *)this + 96) = v25;
  if ((v172[23] & 0x80000000) != 0)
    operator delete(*(void **)v172);
  v26 = v162;
  if (v162)
  {
    v27 = (unint64_t *)&v162->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_72:
  YAML::Node::operator[]<char [12]>(a2, "valueString", (uint64_t)__p);
  v29 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v30 = v162;
  if (v162)
  {
    v31 = (unint64_t *)&v162->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v29)
      goto LABEL_96;
  }
  else if (v29)
  {
    goto LABEL_96;
  }
  YAML::Node::operator[]<char [12]>(a2, "valueString", (uint64_t)__p);
  if (!__p[0])
  {
    v158 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v174 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v158, (uint64_t)&v174);
  }
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  YAML::as_if<std::string,void>::operator()((YAML::Node **)&v174, (std::string *)v172);
  *((_DWORD *)this + 4) |= 2u;
  v33 = google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v172);
  if ((v172[23] & 0x80000000) != 0)
    operator delete(*(void **)v172);
  v34 = v162;
  if (v162)
  {
    v35 = (unint64_t *)&v162->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v34->__on_zero_shared)(v34, v33);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_96:
  YAML::Node::operator[]<char [11]>(a2, "valueArray", (uint64_t)__p);
  v37 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v38 = v162;
  if (v162)
  {
    v39 = (unint64_t *)&v162->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v37)
      goto LABEL_212;
  }
  else if (v37)
  {
    goto LABEL_212;
  }
  YAML::Node::operator[]<char [11]>(a2, "valueArray", (uint64_t)__p);
  if (!__p[0])
  {
    v159 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v174 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v159, (uint64_t)&v174);
  }
  if (v163)
  {
    v41 = **v163;
    if (*(_BYTE *)v41)
      v42 = *(_DWORD *)(v41 + 16);
    else
      v42 = 0;
  }
  else
  {
    v42 = 1;
  }
  v43 = v162;
  if (v162)
  {
    v44 = (unint64_t *)&v162->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v42 == 3)
  {
    YAML::Node::operator[]<char [11]>(a2, "valueArray", (uint64_t)&v174);
    if (v174.__r_.__value_.__s.__data_[0] && v178)
    {
      YAML::detail::node_data::begin(**v178, (uint64_t)__p);
      v46 = v176;
      v47 = v177;
      if (v177)
      {
        v48 = (unint64_t *)&v177->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        *(_OWORD *)v172 = *(_OWORD *)__p;
        *(_OWORD *)&v172[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v172[32] = v46;
        v173 = v47;
        do
          v50 = __ldxr(v48);
        while (__stxr(v50 + 1, v48));
        do
          v51 = __ldaxr(v48);
        while (__stlxr(v51 - 1, v48));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      else
      {
        *(_OWORD *)v172 = *(_OWORD *)__p;
        *(_OWORD *)&v172[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v172[32] = v176;
        v173 = 0;
      }
    }
    else
    {
      *(_DWORD *)v172 = 0;
      memset(&v172[8], 0, 32);
      v173 = 0;
    }
    if (v174.__r_.__value_.__s.__data_[0] && v178)
    {
      YAML::detail::node_data::end(**v178, (uint64_t)__p);
      v56 = v176;
      v57 = v177;
      if (v177)
      {
        v58 = (unint64_t *)&v177->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
        *(_OWORD *)v170 = *(_OWORD *)__p;
        *(_OWORD *)&v170[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v170[32] = v56;
        v171 = v57;
        do
          v60 = __ldxr(v58);
        while (__stxr(v60 + 1, v58));
        do
          v61 = __ldaxr(v58);
        while (__stlxr(v61 - 1, v58));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      else
      {
        *(_OWORD *)v170 = *(_OWORD *)__p;
        *(_OWORD *)&v170[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v170[32] = v176;
        v171 = 0;
      }
    }
    else
    {
      *(_DWORD *)v170 = 0;
      memset(&v170[8], 0, 32);
      v171 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v172 == *(_DWORD *)v170)
      {
        v62 = &v172[8];
        v63 = &v170[8];
        if (*(_DWORD *)v172 != 1)
        {
          if (*(_DWORD *)v172 != 2)
            goto LABEL_183;
          v62 = &v172[16];
          v63 = &v170[16];
        }
        if (*(_QWORD *)v62 == *(_QWORD *)v63)
        {
LABEL_183:
          v80 = v171;
          if (v171)
          {
            v81 = (unint64_t *)&v171->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = v173;
          if (v173)
          {
            v84 = (unint64_t *)&v173->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
          v86 = v177;
          if (v177)
          {
            v87 = (unint64_t *)&v177->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          if (v175 < 0)
          {
            size = (void *)v174.__r_.__value_.__l.__size_;
            goto LABEL_211;
          }
          goto LABEL_212;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v172, (uint64_t)__p);
      v65 = (int *)*((_QWORD *)this + 5);
      if (!v65)
        break;
      v66 = *((int *)this + 8);
      v67 = *v65;
      if ((int)v66 >= *v65)
      {
        if (v67 == *((_DWORD *)this + 9))
        {
LABEL_159:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v67 + 1);
          v65 = (int *)*((_QWORD *)this + 5);
          v67 = *v65;
        }
        *v65 = v67 + 1;
        v68 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                + 3));
        v69 = *((_QWORD *)this + 5);
        v70 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v70 + 1;
        *(_QWORD *)(v69 + 8 * v70 + 8) = v68;
        goto LABEL_161;
      }
      *((_DWORD *)this + 8) = v66 + 1;
      v68 = *(siri::intelligence **)&v65[2 * v66 + 2];
LABEL_161:
      siri::intelligence::ParseFlowTest_KeyValueParameter(v68, (protobuf::FlowTest_KeyValueParameter *)__p, v64);
      v71 = v169;
      if (v169)
      {
        v72 = (unint64_t *)&v169->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      if (v168 < 0)
        operator delete(v167);
      v74 = v166;
      if (v166)
      {
        v75 = (unint64_t *)&v166->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      if (v165 < 0)
        operator delete(v164);
      v77 = v162;
      if (v162)
      {
        v78 = (unint64_t *)&v162->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v172);
    }
    v67 = *((_DWORD *)this + 9);
    goto LABEL_159;
  }
  v52 = (int *)*((_QWORD *)this + 5);
  if (!v52)
  {
    v54 = *((_DWORD *)this + 9);
    goto LABEL_202;
  }
  v53 = *((int *)this + 8);
  v54 = *v52;
  if ((int)v53 >= *v52)
  {
    if (v54 != *((_DWORD *)this + 9))
    {
LABEL_203:
      *v52 = v54 + 1;
      v55 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 3));
      v90 = *((_QWORD *)this + 5);
      v91 = *((int *)this + 8);
      *((_DWORD *)this + 8) = v91 + 1;
      *(_QWORD *)(v90 + 8 * v91 + 8) = v55;
      goto LABEL_204;
    }
LABEL_202:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v54 + 1);
    v52 = (int *)*((_QWORD *)this + 5);
    v54 = *v52;
    goto LABEL_203;
  }
  *((_DWORD *)this + 8) = v53 + 1;
  v55 = *(siri::intelligence **)&v52[2 * v53 + 2];
LABEL_204:
  YAML::Node::operator[]<char [11]>(a2, "valueArray", (uint64_t)__p);
  siri::intelligence::ParseFlowTest_KeyValueParameter(v55, (protobuf::FlowTest_KeyValueParameter *)__p, v92);
  v93 = v162;
  if (v162)
  {
    v94 = (unint64_t *)&v162->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    size = *(void **)&__p[8];
LABEL_211:
    operator delete(size);
  }
LABEL_212:
  YAML::Node::operator[]<char [16]>(a2, "valueDictionary", (uint64_t)__p);
  v96 = !__p[0] || v163 && !*(_BYTE *)**v163;
  v97 = v162;
  if (v162)
  {
    v98 = (unint64_t *)&v162->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if (v96)
      goto LABEL_328;
  }
  else if (v96)
  {
    goto LABEL_328;
  }
  YAML::Node::operator[]<char [16]>(a2, "valueDictionary", (uint64_t)__p);
  if (!__p[0])
  {
    v160 = __cxa_allocate_exception(0x38uLL);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v174 = *(std::string *)&__p[8];
    YAML::InvalidNode::InvalidNode(v160, (uint64_t)&v174);
  }
  if (v163)
  {
    v100 = **v163;
    if (*(_BYTE *)v100)
      v101 = *(_DWORD *)(v100 + 16);
    else
      v101 = 0;
  }
  else
  {
    v101 = 1;
  }
  v102 = v162;
  if (v162)
  {
    v103 = (unint64_t *)&v162->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (v101 == 3)
  {
    YAML::Node::operator[]<char [16]>(a2, "valueDictionary", (uint64_t)&v174);
    if (v174.__r_.__value_.__s.__data_[0] && v178)
    {
      YAML::detail::node_data::begin(**v178, (uint64_t)__p);
      v105 = v176;
      v106 = v177;
      if (v177)
      {
        v107 = (unint64_t *)&v177->__shared_owners_;
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
        *(_OWORD *)v172 = *(_OWORD *)__p;
        *(_OWORD *)&v172[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v172[32] = v105;
        v173 = v106;
        do
          v109 = __ldxr(v107);
        while (__stxr(v109 + 1, v107));
        do
          v110 = __ldaxr(v107);
        while (__stlxr(v110 - 1, v107));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      else
      {
        *(_OWORD *)v172 = *(_OWORD *)__p;
        *(_OWORD *)&v172[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v172[32] = v176;
        v173 = 0;
      }
    }
    else
    {
      *(_DWORD *)v172 = 0;
      memset(&v172[8], 0, 32);
      v173 = 0;
    }
    if (v174.__r_.__value_.__s.__data_[0] && v178)
    {
      YAML::detail::node_data::end(**v178, (uint64_t)__p);
      v115 = v176;
      v116 = v177;
      if (v177)
      {
        v117 = (unint64_t *)&v177->__shared_owners_;
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
        *(_OWORD *)v170 = *(_OWORD *)__p;
        *(_OWORD *)&v170[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v170[32] = v115;
        v171 = v116;
        do
          v119 = __ldxr(v117);
        while (__stxr(v119 + 1, v117));
        do
          v120 = __ldaxr(v117);
        while (__stlxr(v120 - 1, v117));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      else
      {
        *(_OWORD *)v170 = *(_OWORD *)__p;
        *(_OWORD *)&v170[16] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v170[32] = v176;
        v171 = 0;
      }
    }
    else
    {
      *(_DWORD *)v170 = 0;
      memset(&v170[8], 0, 32);
      v171 = 0;
    }
    while (1)
    {
      if (*(_DWORD *)v172 == *(_DWORD *)v170)
      {
        v121 = &v172[8];
        v122 = &v170[8];
        if (*(_DWORD *)v172 != 1)
        {
          if (*(_DWORD *)v172 != 2)
            goto LABEL_299;
          v121 = &v172[16];
          v122 = &v170[16];
        }
        if (*(_QWORD *)v121 == *(_QWORD *)v122)
        {
LABEL_299:
          v139 = v171;
          if (v171)
          {
            v140 = (unint64_t *)&v171->__shared_owners_;
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          v142 = v173;
          if (v173)
          {
            v143 = (unint64_t *)&v173->__shared_owners_;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v145 = v177;
          if (v177)
          {
            v146 = (unint64_t *)&v177->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
          if (v175 < 0)
          {
            v148 = (void *)v174.__r_.__value_.__l.__size_;
            goto LABEL_327;
          }
          goto LABEL_328;
        }
      }
      YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v172, (uint64_t)__p);
      v124 = (int *)*((_QWORD *)this + 8);
      if (!v124)
        break;
      v125 = *((int *)this + 14);
      v126 = *v124;
      if ((int)v125 >= *v124)
      {
        if (v126 == *((_DWORD *)this + 15))
        {
LABEL_275:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v126 + 1);
          v124 = (int *)*((_QWORD *)this + 8);
          v126 = *v124;
        }
        *v124 = v126 + 1;
        v127 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                                 + 6));
        v128 = *((_QWORD *)this + 8);
        v129 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v129 + 1;
        *(_QWORD *)(v128 + 8 * v129 + 8) = v127;
        goto LABEL_277;
      }
      *((_DWORD *)this + 14) = v125 + 1;
      v127 = *(siri::intelligence **)&v124[2 * v125 + 2];
LABEL_277:
      siri::intelligence::ParseFlowTest_KeyValueParameter(v127, (protobuf::FlowTest_KeyValueParameter *)__p, v123);
      v130 = v169;
      if (v169)
      {
        v131 = (unint64_t *)&v169->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      if (v168 < 0)
        operator delete(v167);
      v133 = v166;
      if (v166)
      {
        v134 = (unint64_t *)&v166->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      if (v165 < 0)
        operator delete(v164);
      v136 = v162;
      if (v162)
      {
        v137 = (unint64_t *)&v162->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      if ((__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v172);
    }
    v126 = *((_DWORD *)this + 15);
    goto LABEL_275;
  }
  v111 = (int *)*((_QWORD *)this + 8);
  if (!v111)
  {
    v113 = *((_DWORD *)this + 15);
    goto LABEL_318;
  }
  v112 = *((int *)this + 14);
  v113 = *v111;
  if ((int)v112 >= *v111)
  {
    if (v113 != *((_DWORD *)this + 15))
    {
LABEL_319:
      *v111 = v113 + 1;
      v114 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                               + 6));
      v149 = *((_QWORD *)this + 8);
      v150 = *((int *)this + 14);
      *((_DWORD *)this + 14) = v150 + 1;
      *(_QWORD *)(v149 + 8 * v150 + 8) = v114;
      goto LABEL_320;
    }
LABEL_318:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v113 + 1);
    v111 = (int *)*((_QWORD *)this + 8);
    v113 = *v111;
    goto LABEL_319;
  }
  *((_DWORD *)this + 14) = v112 + 1;
  v114 = *(siri::intelligence **)&v111[2 * v112 + 2];
LABEL_320:
  YAML::Node::operator[]<char [16]>(a2, "valueDictionary", (uint64_t)__p);
  siri::intelligence::ParseFlowTest_KeyValueParameter(v114, (protobuf::FlowTest_KeyValueParameter *)__p, v151);
  v152 = v162;
  if (v162)
  {
    v153 = (unint64_t *)&v162->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
  {
    v148 = *(void **)&__p[8];
LABEL_327:
    operator delete(v148);
  }
LABEL_328:
  *(_QWORD *)__p = v179;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22AEF3F30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1 - 176);
  YAML::Node::~Node((void **)(v1 - 160));
  *(_QWORD *)(v1 - 208) = v1 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  _Unwind_Resume(a1);
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void siri::intelligence::WriteFlowTest_KeyValueParameter(siri::intelligence *this, const protobuf::FlowTest_KeyValueParameter *a2, YAML::Emitter *a3)
{
  int v5;
  int v6;
  int i;
  siri::intelligence *v8;
  YAML::Emitter *v9;
  int v10;
  int v11;
  int j;
  siri::intelligence *v13;
  YAML::Emitter *v14;
  int v15;
  void *__p[2];
  char v17;

  if (**(_BYTE **)a2)
    YAML::Emitter::EmitBeginMap(a2);
  v5 = *((_DWORD *)this + 4);
  if ((v5 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "key");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    YAML::Emitter::Write((uint64_t)a2, *((const void ***)this + 9));
    v5 = *((_DWORD *)this + 4);
  }
  if ((v5 & 4) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "valueNumber");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    YAML::Emitter::WriteStreamable<double>((uint64_t *)a2, *((double *)this + 11));
    v5 = *((_DWORD *)this + 4);
  }
  if ((v5 & 8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "valueBoolean");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    YAML::Emitter::Write(a2, *((unsigned __int8 *)this + 96));
    v5 = *((_DWORD *)this + 4);
  }
  if ((v5 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "valueString");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    YAML::Emitter::Write((uint64_t)a2, *((const void ***)this + 10));
  }
  if (*((int *)this + 8) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "valueArray");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    v6 = *((_DWORD *)this + 8);
    if (v6 != 1)
    {
      if (**(_BYTE **)a2)
      {
        YAML::Emitter::EmitBeginSeq(a2);
        v6 = *((_DWORD *)this + 8);
      }
      if (v6 < 1)
        goto LABEL_47;
    }
    for (i = 0; i < v10; ++i)
    {
      v8 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      siri::intelligence::WriteFlowTest_KeyValueParameter(v8, a2, v9);
      v10 = *((_DWORD *)this + 8);
    }
    if (v10 != 1)
    {
LABEL_47:
      if (**(_BYTE **)a2)
        YAML::Emitter::EmitEndSeq(a2);
    }
  }
  if (*((int *)this + 14) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "valueDictionary");
    YAML::Emitter::Write((uint64_t)a2, (const void **)__p);
    if (v17 < 0)
      operator delete(__p[0]);
    v11 = *((_DWORD *)this + 14);
    if (v11 != 1)
    {
      if (**(_BYTE **)a2)
      {
        YAML::Emitter::EmitBeginSeq(a2);
        v11 = *((_DWORD *)this + 14);
      }
      if (v11 < 1)
        goto LABEL_48;
    }
    for (j = 0; j < v15; ++j)
    {
      v13 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      siri::intelligence::WriteFlowTest_KeyValueParameter(v13, a2, v14);
      v15 = *((_DWORD *)this + 14);
    }
    if (v15 != 1)
    {
LABEL_48:
      if (**(_BYTE **)a2)
        YAML::Emitter::EmitEndSeq(a2);
    }
  }
  if (**(_BYTE **)a2)
    YAML::Emitter::EmitEndMap(a2);
}

void sub_22AEF4354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::WriteStreamable<double>(uint64_t *a1, double a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v10;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  if (!*(_BYTE *)*a1)
    return a1;
  YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(*a1 + 104);
  if (a2 == INFINITY)
  {
    v4 = ".inf";
    v5 = 4;
  }
  else
  {
    if (a2 != -INFINITY)
    {
      std::ostream::operator<<();
      goto LABEL_7;
    }
    v4 = "-.inf";
    v5 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
LABEL_7:
  std::stringbuf::str();
  YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), (const void **)&__p);
  if (v10 < 0)
    operator delete(__p);
  v6 = *a1;
  YAML::EmitterState::StartedNode(*a1);
  YAML::SettingChanges::clear((uint64_t **)(v6 + 112));
  v11[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[0] = v7;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&v14);
  return a1;
}

void sub_22AEF4510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AEF45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AEF46D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *YAML::Emitter::WriteIntegralType<int>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p;
  char v6;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
    YAML::Emitter::PrepareIntegralStream(a1, (uint64_t)v7);
    std::ostream::operator<<();
    std::stringbuf::str();
    YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), (const void **)&__p);
    if (v6 < 0)
      operator delete(__p);
    v2 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v2 + 112));
    v7[0] = *MEMORY[0x24BEDB7F0];
    v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v7[2] = v3;
    v7[3] = MEMORY[0x24BEDB848] + 16;
    if (v8 < 0)
      operator delete((void *)v7[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2E9C48](&v9);
  }
  return a1;
}

void sub_22AEF4810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AEF48FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::TestCase>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 104);
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

protobuf::FlowTest *_ZNSt3__115allocate_sharedB8ne180100IN8protobuf8FlowTestENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(protobuf::FlowTest **a1)
{
  _QWORD *v2;
  protobuf::FlowTest *result;

  v2 = operator new(0x50uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24F540750;
  result = protobuf::FlowTest::FlowTest((protobuf::FlowTest *)(v2 + 3));
  *a1 = result;
  a1[1] = (protobuf::FlowTest *)v2;
  return result;
}

void sub_22AEF4A24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<protobuf::FlowTest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<protobuf::FlowTest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<protobuf::FlowTest>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<siri::intelligence::ValidationResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::ValidationResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<siri::intelligence::TestParseError>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v4, i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 80;
      v7 = v4 - 80;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 80;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::allocator<siri::intelligence::TestCase>::construct[abi:ne180100]<siri::intelligence::TestCase,siri::intelligence::TestCase>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v6 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = (__n128)a2[8];
  *(__n128 *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  return result;
}

void std::vector<siri::intelligence::TestCase>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 152;
    v4 = (__int128 *)((char *)v4 - 152);
    std::allocator<siri::intelligence::TestCase>::construct[abi:ne180100]<siri::intelligence::TestCase,siri::intelligence::TestCase>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestCase>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a2);
}

void **std::__split_buffer<siri::intelligence::TestCase>::~__split_buffer(void **a1)
{
  std::__split_buffer<siri::intelligence::TestCase>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<siri::intelligence::TestCase>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 152;
    std::allocator<siri::intelligence::TestCase>::destroy[abi:ne180100](v4, i - 152);
  }
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

std::string *std::vector<siri::intelligence::TestCase>::__init_with_size[abi:ne180100]<siri::intelligence::TestCase*,siri::intelligence::TestCase*>(std::string *result, const siri::intelligence::TestCase *a2, const siri::intelligence::TestCase *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::TestCase>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*,siri::intelligence::TestCase*,siri::intelligence::TestCase*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22AEF4FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::TestCase>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1AF286BCA1AF287)
    std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestCase>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*,siri::intelligence::TestCase*,siri::intelligence::TestCase*>(uint64_t a1, const siri::intelligence::TestCase *a2, const siri::intelligence::TestCase *a3, std::string *a4)
{
  std::string *v4;
  const siri::intelligence::TestCase *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      siri::intelligence::TestCase::TestCase(v4, v6);
      v6 = (const siri::intelligence::TestCase *)((char *)v6 + 152);
      v4 = (std::string *)((char *)v11 + 152);
      v11 = (std::string *)((char *)v11 + 152);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22AEF50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::TestCase::TestCase(std::string *this, const siri::intelligence::TestCase *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 12);
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[0] = v8;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<protobuf::FlowTest_Step>::__init_with_size[abi:ne180100]<protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>(&this[4].__r_.__value_.__l.__size_, *((_QWORD *)a2 + 13), *((_QWORD *)a2 + 14), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 4));
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 128), *((__int128 **)a2 + 16), *((__int128 **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3));
  return this;
}

void sub_22AEF5258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  if (*(char *)(v10 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<protobuf::FlowTest_Step>::__init_with_size[abi:ne180100]<protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<protobuf::FlowTest_Step>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>,protobuf::FlowTest_Step*,protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AEF5334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<protobuf::FlowTest_Step>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>,protobuf::FlowTest_Step*,protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)(a4 + v7), (const protobuf::FlowTest_Step *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_22AEF5444(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22AEF54D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22AEF55EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestCase>,siri::intelligence::TestCase*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 152;
      std::allocator<siri::intelligence::TestCase>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<siri::intelligence::TestCase>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<siri::intelligence::TestParseError>::__init_with_size[abi:ne180100]<siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::TestParseError>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*,siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22AEF57E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::TestParseError>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*,siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<siri::intelligence::TestParseError>::construct[abi:ne180100]<siri::intelligence::TestParseError,siri::intelligence::TestParseError&>(v7, v4, v6);
      v6 += 3;
      v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22AEF58E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::TestParseError>::construct[abi:ne180100]<siri::intelligence::TestParseError,siri::intelligence::TestParseError&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_22AEF5970(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::TestParseError>,siri::intelligence::TestParseError*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<siri::intelligence::TestCase>::__push_back_slow_path<siri::intelligence::TestCase const&>(uint64_t *a1, const siri::intelligence::TestCase *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1AF286BCA1AF286)
    std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x86BCA1AF286BCA1BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xD79435E50D7943)
    v9 = 0x1AF286BCA1AF286;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestCase>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[152 * v4];
  v16 = &v10[152 * v9];
  siri::intelligence::TestCase::TestCase(v14, a2);
  v15 = &v14[6].__r_.__value_.__s.__data_[8];
  std::vector<siri::intelligence::TestCase>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<siri::intelligence::TestCase>::~__split_buffer(&v13);
  return v11;
}

void sub_22AEF5B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<siri::intelligence::TestCase>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

siri::intelligence::VariableString *siri::intelligence::VariableString::VariableString(siri::intelligence::VariableString *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, (char *)&str);
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  siri::intelligence::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24F540890;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_22AEF5C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::intelligence::VariableString::VariableString(_QWORD *a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  siri::intelligence::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_24F540890;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  return a1;
}

void sub_22AEF5CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::VariableString::VariableString(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  siri::intelligence::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24F540890;
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1 + 3, a3);
  a1[2].__r_.__value_.__s.__data_[16] = 1;
  return a1;
}

void sub_22AEF5DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 95) < 0)
    operator delete(*v16);
  siri::intelligence::Variable::~Variable((void **)v15);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::VariableString::SetValue(std::string *a1, const std::string *a2)
{
  std::string *result;

  result = std::string::operator=(a1 + 3, a2);
  a1[2].__r_.__value_.__s.__data_[16] = 1;
  return result;
}

void siri::intelligence::VariableString::GetValue(siri::intelligence::VariableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

uint64_t siri::intelligence::VariableString::SetValueFromString(uint64_t a1, uint64_t a2)
{
  void **v3;
  std::string v5;

  siri::intelligence::StringUnescapeQuotes(a2, &v5);
  v3 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  *(_BYTE *)(a1 + 64) = 1;
  return 1;
}

uint64_t siri::intelligence::VariableString::SetUndefined(siri::intelligence::VariableString *this)
{
  uint64_t result;

  result = MEMORY[0x22E2E99E4]((char *)this + 72, &str);
  *((_BYTE *)this + 64) = 0;
  return result;
}

void siri::intelligence::VariableString::SetEmpty(std::string *this)
{
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str);
  std::string::operator=(this + 3, &__str);
  this[2].__r_.__value_.__s.__data_[16] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AEF5F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::VariableString::IsEmpty(siri::intelligence::VariableString *this)
{
  if (*((char *)this + 95) < 0)
  {
    if (*((_QWORD *)this + 10))
      return *((_BYTE *)this + 64) == 0;
  }
  else if (*((_BYTE *)this + 95))
  {
    return *((_BYTE *)this + 64) == 0;
  }
  return 1;
}

void siri::intelligence::VariableString::AsString(siri::intelligence::VariableString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

void siri::intelligence::VariableString::AsQuotedString(siri::intelligence::VariableString *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  siri::intelligence::StringEscapeQuotes((uint64_t)this + 72, &v6);
  v3 = std::string::insert(&v6, 0, "\"");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, "\"");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_22AEF6040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::VariableString::AsNumber(siri::intelligence::VariableString *this)
{
  siri::intelligence::StringToDouble((uint64_t)this + 72, 0);
}

uint64_t siri::intelligence::VariableString::AsBoolean(const std::string *this)
{
  const std::string *v1;
  double v2;

  v1 = this + 3;
  if (!siri::intelligence::StringIsANumber(this + 3))
    return siri::intelligence::StringToBool(v1, 0);
  siri::intelligence::StringToDouble((uint64_t)v1, 0);
  return v2 != 0.0;
}

double siri::intelligence::VariableString::GetExpanded@<D0>(siri::intelligence::VariableString *this@<X0>, siri::intelligence::Memory *a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  double result;
  std::string __p;
  __int128 v11;

  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableStringENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
  v6 = (_OWORD *)((char *)this + 8);
  if (a2)
  {
    siri::intelligence::Memory::ExpandVariables((uint64_t)a2, (uint64_t)v6, 0, (uint64_t)&__p);
  }
  else if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  std::string::operator=((std::string *)(v11 + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(v11 + 32), (const std::string *)((char *)this + 32));
  v7 = v11;
  *(_QWORD *)(v11 + 56) = *((_QWORD *)this + 7);
  *(_BYTE *)(v7 + 64) = *((_BYTE *)this + 64);
  v8 = (_OWORD *)((char *)this + 72);
  if (a2)
  {
    siri::intelligence::Memory::ExpandVariables((uint64_t)a2, (uint64_t)v8, 0, (uint64_t)&__p);
  }
  else if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
  std::string::operator=((std::string *)(v11 + 72), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = *(double *)&v11;
  *a3 = v11;
  return result;
}

void sub_22AEF6204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *siri::intelligence::VariableString::GetExpandedType@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, siri::intelligence::TYPE_STRING[0]);
}

void siri::intelligence::VariableString::~VariableString(void **this)
{
  *this = off_24F540890;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  siri::intelligence::Variable::~Variable(this);
}

{
  *this = off_24F540890;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  siri::intelligence::Variable::~Variable(this);
  JUMPOUT(0x22E2E9CCCLL);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableStringENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableStringENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AEF6310(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableStringENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24F540920;
  a1[1] = 0;
  siri::intelligence::VariableString::VariableString((siri::intelligence::VariableString *)(a1 + 3));
  return a1;
}

void sub_22AEF635C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F540920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F540920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableString>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::intelligence::Escaping::Escape(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  std::string v16;
  std::string v17;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v17 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v14, "&");
  std::string::basic_string[abi:ne180100]<0>(__p, "&amp;");
  siri::intelligence::StringReplace((uint64_t)&v17, (char *)v14, (uint64_t)__p, 0, &v16);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17 = v16;
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
  v16.__r_.__value_.__s.__data_[0] = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v8 = *a2;
  v6 = a2 + 1;
  v7 = v8;
  if ((_QWORD *)v8 == v6)
  {
LABEL_20:
    *a3 = v17;
  }
  else
  {
    while ((siri::intelligence::isValidSequence(v7, v5) & 1) != 0)
    {
      siri::intelligence::StringReplace((uint64_t)&v17, (char *)(v7 + 32), v7 + 56, 0, &v16);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v17 = v16;
      v9 = *(_QWORD **)(v7 + 8);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = *(_QWORD **)(v7 + 16);
          v11 = *v10 == v7;
          v7 = (uint64_t)v10;
        }
        while (!v11);
      }
      v7 = (uint64_t)v10;
      if (v10 == v6)
        goto LABEL_20;
    }
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_22AEF655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::isValidSequence(uint64_t a1, const char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;

  v2 = (_QWORD *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(_QWORD *)(a1 + 64))
    {
LABEL_13:
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Misuse of Escaping::Escape: all sequences must start with '&' and '&' is reserved", a2);
      return 0;
    }
    v2 = (_QWORD *)*v2;
  }
  else if (!*(_BYTE *)(a1 + 79))
  {
    goto LABEL_13;
  }
  if (*(_BYTE *)v2 != 38)
    goto LABEL_13;
  v3 = (_QWORD *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a1 + 40) != 1)
      return 1;
    v3 = (_QWORD *)*v3;
  }
  else if (v4 != 1)
  {
    return 1;
  }
  if (*(_BYTE *)v3 == 38)
    goto LABEL_13;
  return 1;
}

void siri::intelligence::Escaping::Unescape(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  BOOL v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v16 = *(std::string *)a1;
  v7 = *(_QWORD *)a2;
  v5 = a2 + 8;
  v6 = v7;
  if ((const char *)v7 == v5)
  {
LABEL_14:
    std::string::basic_string[abi:ne180100]<0>(v13, "&amp;");
    std::string::basic_string[abi:ne180100]<0>(__p, "&");
    siri::intelligence::StringReplace((uint64_t)&v16, (char *)v13, (uint64_t)__p, 0, &v15);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v16 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    *a3 = v16;
  }
  else
  {
    while ((siri::intelligence::isValidSequence(v6, a2) & 1) != 0)
    {
      siri::intelligence::StringReplace((uint64_t)&v16, (char *)(v6 + 56), v6 + 32, 0, &v15);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v16 = v15;
      v8 = *(const char **)(v6 + 8);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(const char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = *(const char **)(v6 + 16);
          v10 = *(_QWORD *)v9 == v6;
          v6 = (uint64_t)v9;
        }
        while (!v10);
      }
      v6 = (uint64_t)v9;
      if (v9 == v5)
        goto LABEL_14;
    }
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_22AEF67D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Escaping::EscapeVector(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::vector<std::string> __p;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_3);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_3))
  {
    qword_253F46150 = 0;
    qword_253F46148 = 0;
    qword_253F46140 = (uint64_t)&qword_253F46148;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F46140, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_3);
  }
  if (!qword_253F46150)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ",");
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F46140, (const void **)&__p.__begin_, (uint64_t)&std::piecewise_construct, &v11);
    MEMORY[0x22E2E99E4]((char *)v5 + 56, "&comma;");
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
  }
  std::vector<std::string>::vector(&__p, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      siri::intelligence::Escaping::Escape(v6 + v7 * 24, &qword_253F46140, &v11);
      v9 = &__p.__begin_[v7];
      if (SHIBYTE(__p.__begin_[v7].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9->__r_.__value_.__l.__data_);
      v10 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v8;
      v6 = *a1;
      ++v7;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, ",");
  siri::intelligence::StringJoin((__int128 **)&__p, (uint64_t)&v11, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_22AEF69F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

__n128 siri::intelligence::Escaping::UnescapeVector@<Q0>(unsigned __int8 *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  unsigned __int8 v4;
  _OWORD *v5;
  __n128 result;
  std::vector<std::string>::pointer begin;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string __p;
  std::string *p_p;

  v4 = atomic_load((unsigned __int8 *)&qword_253F46110);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46110))
  {
    qword_253F46168 = 0;
    qword_253F46160 = 0;
    qword_253F46158 = (uint64_t)&qword_253F46160;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F46158, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46110);
  }
  if (!qword_253F46168)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ",");
    p_p = &__p;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F46158, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
    MEMORY[0x22E2E99E4]((char *)v5 + 56, "&comma;");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  siri::intelligence::StringSplit(a1, ",", (uint64_t *)&__p, a2);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  begin = a2->__begin_;
  if (a2->__end_ != a2->__begin_)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      siri::intelligence::Escaping::Unescape((uint64_t)&begin[v8], (const char *)&qword_253F46158, &__p);
      v10 = &a2->__begin_[v8];
      if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10->__r_.__value_.__l.__data_);
      result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
      v10->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(__n128 *)&v10->__r_.__value_.__l.__data_ = result;
      ++v9;
      begin = a2->__begin_;
      ++v8;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_ - (char *)a2->__begin_) >> 3));
  }
  return result;
}

void sub_22AEF6C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Escaping::EscapeMap(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::vector<std::string>::pointer end;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string __p;
  std::vector<std::string> v33;
  std::__split_buffer<std::string> __v;

  v3 = atomic_load((unsigned __int8 *)&qword_253F46118);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253F46118))
  {
    qword_253F46180 = 0;
    qword_253F46178 = 0;
    qword_253F46170 = (uint64_t)&qword_253F46178;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F46170, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46118);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_253F46120);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46120))
  {
    qword_253F46198 = 0;
    qword_253F46190 = 0;
    qword_253F46188 = (uint64_t)&qword_253F46190;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F46188, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46120);
  }
  if (!qword_253F46180)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "=");
    v33.__begin_ = (std::vector<std::string>::pointer)&__v;
    v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F46170, (const void **)&__v.__first_, (uint64_t)&std::piecewise_construct, &v33);
    MEMORY[0x22E2E99E4]((char *)v5 + 56, "&equals;");
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, ";");
    v33.__begin_ = (std::vector<std::string>::pointer)&__v;
    v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F46188, (const void **)&__v.__first_, (uint64_t)&std::piecewise_construct, &v33);
    MEMORY[0x22E2E99E4]((char *)v6 + 56, "&semi;");
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  memset(&v33, 0, sizeof(v33));
  v9 = (_QWORD *)*a1;
  v7 = a1 + 1;
  v8 = v9;
  if (v9 != v7)
  {
    do
    {
      siri::intelligence::Escaping::Escape((uint64_t)(v8 + 4), &qword_253F46170, &v29);
      v10 = std::string::append(&v29, "=");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = *((char *)v8 + 79);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)(v8 + 7);
      else
        v13 = (const std::string::value_type *)v8[7];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 79);
      else
        v14 = v8[8];
      v15 = std::string::append(&v30, v13, v14);
      v31 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::Escaping::Escape((uint64_t)&v31, &qword_253F46188, &__p);
      end = v33.__end_;
      if (v33.__end_ >= v33.__end_cap_.__value_)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_ - (char *)v33.__begin_) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) > v19)
          v19 = 0x5555555555555556 * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v33.__end_cap_.__value_ - (char *)v33.__begin_) >> 3) >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v33.__end_cap_;
        if (v20)
          v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v33.__end_cap_, v20);
        else
          v21 = 0;
        v22 = v21 + v18;
        __v.__first_ = v21;
        __v.__begin_ = v22;
        __v.__end_cap_.__value_ = &v21[v20];
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v22 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v33, &__v);
        v24 = v33.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v33.__end_ = v24;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v33.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
        memset(&__p, 0, sizeof(__p));
        v33.__end_ = end + 1;
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      v25 = (_QWORD *)v8[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v8[2];
          v27 = *v26 == (_QWORD)v8;
          v8 = v26;
        }
        while (!v27);
      }
      v8 = v26;
    }
    while (v26 != v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, ";");
  siri::intelligence::StringJoin((__int128 **)&v33, (uint64_t)&__v, a2);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_22AEF7094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Escaping::UnescapeMap(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned __int8 v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const std::string *begin;
  _OWORD *v41;
  void *v42[2];
  char v43;
  std::string v44;
  std::string v45;
  std::vector<std::string> __str;
  std::string v47;
  std::string v48;
  std::string __p;
  std::__split_buffer<std::string> __v;

  v4 = atomic_load((unsigned __int8 *)&qword_253F46128);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253F46128))
  {
    qword_253F461B0 = 0;
    qword_253F461A8 = 0;
    qword_253F461A0 = (uint64_t)&qword_253F461A8;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F461A0, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46128);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_253F46130);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253F46130))
  {
    qword_253F461C8 = 0;
    qword_253F461C0 = 0;
    qword_253F461B8 = (uint64_t)&qword_253F461C0;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &qword_253F461B8, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46130);
  }
  if (!qword_253F461B0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "=");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
    v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F461A0, (const void **)&__v.__first_, (uint64_t)&std::piecewise_construct, &__p);
    MEMORY[0x22E2E99E4]((char *)v6 + 56, "&equals;");
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    std::string::basic_string[abi:ne180100]<0>(&__v, ";");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
    v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&qword_253F461B8, (const void **)&__v.__first_, (uint64_t)&std::piecewise_construct, &__p);
    MEMORY[0x22E2E99E4]((char *)v7 + 56, "&semi;");
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v8 = atomic_load((unsigned __int8 *)&qword_253F46138);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_253F46138))
  {
    qword_253F461D8 = 0;
    qword_253F461E0 = 0;
    qword_253F461D0 = 0;
    __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_253F461D0, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46138);
  }
  if (qword_253F461D0 == qword_253F461D8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "&amp;");
    v9 = (_OWORD *)qword_253F461D8;
    if ((unint64_t)qword_253F461D8 >= qword_253F461E0)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((qword_253F461D8 - qword_253F461D0) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3) > v12)
        v12 = 0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((qword_253F461E0 - qword_253F461D0) >> 3) >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&qword_253F461E0;
      if (v13)
        v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&qword_253F461E0, v13);
      else
        v14 = 0;
      v15 = v14 + v11;
      __v.__first_ = v14;
      __v.__begin_ = v15;
      __v.__end_cap_.__value_ = &v14[v13];
      v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v15 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&qword_253F461D0, &__v);
      v17 = qword_253F461D8;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      qword_253F461D8 = v17;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(qword_253F461D8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *v9 = v10;
      qword_253F461D8 = (uint64_t)v9 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "&equals;");
    v18 = (_OWORD *)qword_253F461D8;
    if ((unint64_t)qword_253F461D8 >= qword_253F461E0)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * ((qword_253F461D8 - qword_253F461D0) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3) > v21)
        v21 = 0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((qword_253F461E0 - qword_253F461D0) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&qword_253F461E0;
      if (v22)
        v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&qword_253F461E0, v22);
      else
        v23 = 0;
      v24 = v23 + v20;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v24->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&qword_253F461D0, &__v);
      v26 = qword_253F461D8;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      qword_253F461D8 = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(qword_253F461D8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *v18 = v19;
      qword_253F461D8 = (uint64_t)v18 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "&semi;");
    v27 = (_OWORD *)qword_253F461D8;
    if ((unint64_t)qword_253F461D8 >= qword_253F461E0)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * ((qword_253F461D8 - qword_253F461D0) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3) > v30)
        v30 = 0x5555555555555556 * ((qword_253F461E0 - qword_253F461D0) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((qword_253F461E0 - qword_253F461D0) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&qword_253F461E0;
      if (v31)
        v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&qword_253F461E0, v31);
      else
        v32 = 0;
      v33 = v32 + v29;
      __v.__first_ = v32;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = &v32[v31];
      v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v33->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&qword_253F461D0, &__v);
      v35 = qword_253F461D8;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      qword_253F461D8 = v35;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(qword_253F461D8 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *v27 = v28;
      qword_253F461D8 = (uint64_t)v27 + 24;
    }
  }
  siri::intelligence::StringSplit(a1, ";", &qword_253F461D0, (std::vector<std::string> *)&__v);
  first = __v.__first_;
  if (__v.__begin_ != __v.__first_)
  {
    v37 = 0;
    v38 = 0;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v48, 0, sizeof(v48));
      siri::intelligence::Escaping::Unescape((uint64_t)&first[v37], (const char *)&qword_253F461B8, &v47);
      memset(&v45, 0, sizeof(v45));
      siri::intelligence::StringSplit((unsigned __int8 *)&v47, "=", (uint64_t *)&v45, &__str);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      if (__str.__begin_ != __str.__end_)
        break;
LABEL_66:
      v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v38;
      first = __v.__first_;
      ++v37;
      if (v38 >= 0xAAAAAAAAAAAAAAABLL * (((char *)__v.__begin_ - (char *)__v.__first_) >> 3))
        goto LABEL_73;
    }
    v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)__str.__end_ - (char *)__str.__begin_) >> 3);
    if (v39 == 2)
    {
      std::string::operator=(&__p, __str.__begin_);
      begin = __str.__begin_ + 1;
    }
    else
    {
      if (v39 != 1)
      {
        std::string::operator=(&__p, __str.__begin_);
        memset(&v44, 0, sizeof(v44));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v44, (__int128 *)&__str.__begin_[1], (__int128 *)__str.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)__str.__end_ - (char *)&__str.__begin_[1]) >> 3));
        std::string::basic_string[abi:ne180100]<0>(v42, "=");
        siri::intelligence::StringJoin((__int128 **)&v44, (uint64_t)v42, (uint64_t)&v45);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        v48 = v45;
        *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
        v45.__r_.__value_.__s.__data_[0] = 0;
        if (v43 < 0)
          operator delete(v42[0]);
        v42[0] = &v44;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
        goto LABEL_64;
      }
      if (*std::string::at(&v47, 0) != 61)
      {
        std::string::operator=(&__p, __str.__begin_);
        MEMORY[0x22E2E99E4](&v48, "");
LABEL_64:
        siri::intelligence::Escaping::Unescape((uint64_t)&__p, (const char *)&qword_253F461A0, &v45);
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
        v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&v45.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v44);
        std::string::operator=((std::string *)((char *)v41 + 56), &v48);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        goto LABEL_66;
      }
      MEMORY[0x22E2E99E4](&__p, "");
      begin = __str.__begin_;
    }
    std::string::operator=(&v48, begin);
    goto LABEL_64;
  }
LABEL_73:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22AEF7978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v47 - 136));
  if (a46 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v46, *(_QWORD **)(v46 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_22AEF7C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22AEF7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_22AEF7F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 57) < 0)
    operator delete(*(void **)(v25 - 80));
  IEDefer::~IEDefer((void (***)(void))(v25 - 88));
  v27 = a23;
  a23 = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a23, v27);
  v28 = *(_QWORD *)(v25 - 40);
  *(_QWORD *)(v25 - 48) = &off_24F543888;
  *(_QWORD *)(v25 - 40) = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 40, v28);

  _Unwind_Resume(a1);
}

void sub_22AEF84B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  IEDefer::~IEDefer((void (***)(void))(v39 - 120));
  v41 = a35;
  a35 = 0;
  if (v41)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a35, v41);
  v42 = *(_QWORD *)(v39 - 72);
  *(_QWORD *)(v39 - 80) = &off_24F543888;
  *(_QWORD *)(v39 - 72) = 0;
  if (v42)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v39 - 72, v42);

  _Unwind_Resume(a1);
}

siri::intelligence::VariableReference *siri::intelligence::VariableReference::VariableReference(siri::intelligence::VariableReference *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_REFERENCE[0]);
  siri::intelligence::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_24F540970;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_22AEF86F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::intelligence::VariableReference::VariableReference(_QWORD *a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_REFERENCE[0]);
  siri::intelligence::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = off_24F540970;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  return a1;
}

void sub_22AEF879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::VariableReference::VariableReference(std::string *a1, const std::string *a2, const std::string *a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_REFERENCE[0]);
  siri::intelligence::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24F540970;
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1 + 3, a3);
  a1[2].__r_.__value_.__s.__data_[16] = 1;
  return a1;
}

void sub_22AEF8854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 95) < 0)
    operator delete(*v16);
  siri::intelligence::Variable::~Variable((void **)v15);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::VariableReference::SetValue(std::string *a1, const std::string *a2)
{
  std::string *result;

  result = std::string::operator=(a1 + 3, a2);
  a1[2].__r_.__value_.__s.__data_[16] = 1;
  return result;
}

void siri::intelligence::VariableReference::GetValue(siri::intelligence::VariableReference *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

uint64_t siri::intelligence::VariableReference::SetValueFromString(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 3, a2);
  a1[2].__r_.__value_.__s.__data_[16] = 1;
  return 1;
}

uint64_t siri::intelligence::VariableReference::SetUndefined(siri::intelligence::VariableReference *this)
{
  uint64_t result;

  result = MEMORY[0x22E2E99E4]((char *)this + 72, "");
  *((_BYTE *)this + 64) = 0;
  return result;
}

void siri::intelligence::VariableReference::SetEmpty(std::string *this)
{
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=(this + 3, &__str);
  this[2].__r_.__value_.__s.__data_[16] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AEF89A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::VariableReference::IsEmpty(siri::intelligence::VariableReference *this)
{
  if (*((char *)this + 95) < 0)
  {
    if (*((_QWORD *)this + 10))
      return *((_BYTE *)this + 64) == 0;
  }
  else if (*((_BYTE *)this + 95))
  {
    return *((_BYTE *)this + 64) == 0;
  }
  return 1;
}

void siri::intelligence::VariableReference::AsString(siri::intelligence::VariableReference *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

uint64_t siri::intelligence::VariableReference::CheckForRecursion(uint64_t a1, uint64_t a2)
{
  char *v4;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  void *v17;
  int v18;
  const void *v19;
  const void ***v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string::__raw *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  _QWORD **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *i;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD v54[2];
  _QWORD **v55;
  std::__shared_weak_count *v56;
  _QWORD v57[2];
  const void ***v58;
  std::__shared_weak_count *v59;
  std::string v60;
  char *v61;
  std::__shared_weak_count *v62;
  std::string *v63;

  if (!*(_QWORD *)a2)
    return 0;
  if (v4)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v61 = v4;
    v62 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v4[95] < 0)
      std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
    else
      v60 = *(std::string *)(v4 + 3);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      size = v60.__r_.__value_.__l.__size_;
    v11 = *(unsigned __int8 *)(a1 + 95);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a1 + 80);
    if (size == v11)
    {
      if (v12 >= 0)
        v5 = (unsigned __int8 *)(a1 + 72);
      else
        v5 = *(unsigned __int8 **)(a1 + 72);
      if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v17 = (void *)v60.__r_.__value_.__r.__words[0];
        v18 = memcmp(v60.__r_.__value_.__l.__data_, v5, v60.__r_.__value_.__l.__size_);
        operator delete(v17);
        if (!v18)
          goto LABEL_75;
      }
      else
      {
        if (!*((_BYTE *)&v60.__r_.__value_.__s + 23))
          goto LABEL_75;
        v13 = 0;
        do
        {
          v14 = v60.__r_.__value_.__s.__data_[v13];
          v15 = v5[v13];
          v16 = v14 != v15 || HIBYTE(v60.__r_.__value_.__r.__words[2]) - 1 == v13++;
        }
        while (!v16);
        if (v14 == v15)
        {
LABEL_75:
          v9 = 1;
          if (!v6)
            return v9;
          goto LABEL_90;
        }
      }
    }
    else if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v19 = *(const void **)a2;
  if (!*(_QWORD *)a2
  {
    v58 = 0;
    v59 = 0;
    if (!v19)
      goto LABEL_73;
    goto LABEL_57;
  }
  v21 = *(std::__shared_weak_count **)(a2 + 8);
  v58 = v20;
  v59 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v60, v20 + 9);
  v24 = (std::string::__raw *)v60.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v60.__r_.__value_.__l.__data_ == &v60.__r_.__value_.__r.__words[1])
  {
LABEL_54:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v60, (_QWORD *)v60.__r_.__value_.__l.__size_);
    v19 = *(const void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_73;
LABEL_57:
    if (v33)
    {
      v34 = *(std::__shared_weak_count **)(a2 + 8);
      v55 = v33;
      v56 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      memset(&v60, 0, sizeof(v60));
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)&v60, v33[9], v33[10], ((char *)v33[10] - (char *)v33[9]) >> 4);
      v38 = v60.__r_.__value_.__l.__size_;
      for (i = (_QWORD *)v60.__r_.__value_.__r.__words[0]; ; i += 2)
      {
        if (i == (_QWORD *)v38)
        {
          v63 = &v60;
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
          v9 = 0;
          goto LABEL_79;
        }
        v39 = (std::__shared_weak_count *)i[1];
        v54[0] = *i;
        v54[1] = v39;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v42 = siri::intelligence::VariableReference::CheckForRecursion(a1, v54);
        if (v39)
        {
          v43 = (unint64_t *)&v39->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if ((v42 & 1) != 0)
          break;
      }
      v63 = &v60;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      v9 = 1;
      goto LABEL_79;
    }
LABEL_73:
    v9 = 0;
    v55 = 0;
    v56 = 0;
LABEL_79:
    v45 = v56;
    if (v56)
    {
      v46 = (unint64_t *)&v56->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    goto LABEL_84;
  }
  while (1)
  {
    v25 = (std::__shared_weak_count *)v24[2].__words[2];
    v57[0] = v24[2].__words[1];
    v57[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = siri::intelligence::VariableReference::CheckForRecursion(a1, v57);
    if (v25)
    {
      v29 = (unint64_t *)&v25->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if ((v28 & 1) != 0)
      break;
    v31 = (std::string *)v24->__words[1];
    if (v31)
    {
      do
      {
        v32 = v31;
        v31 = (std::string *)v31->__r_.__value_.__r.__words[0];
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = (std::string *)v24->__words[2];
        v16 = v32->__r_.__value_.__r.__words[0] == (_QWORD)v24;
        v24 = (std::string::__raw *)v32;
      }
      while (!v16);
    }
    v24 = (std::string::__raw *)v32;
    if (v32 == (std::string *)&v60.__r_.__value_.__r.__words[1])
      goto LABEL_54;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v60, (_QWORD *)v60.__r_.__value_.__l.__size_);
  v9 = 1;
LABEL_84:
  v48 = v59;
  if (v59)
  {
    v49 = (unint64_t *)&v59->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v6 = v62;
  if (v62)
  {
LABEL_90:
    v51 = (unint64_t *)&v6->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v6->__on_zero_shared)(v6, v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v9;
}

void sub_22AEF8E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableReference::GetExpanded(siri::intelligence::VariableReference *this@<X0>, siri::intelligence::Memory *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  const char *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (!a2)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v6 = (_QWORD *)((char *)this + 72);
  siri::intelligence::Memory::GetVariable((uint64_t)a2, (uint64_t)this + 72, &v19);
  if (!v19)
    goto LABEL_14;
  v7 = v20;
  v18[0] = v19;
  v18[1] = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = siri::intelligence::VariableReference::CheckForRecursion((uint64_t)this, (uint64_t)v18);
  v12 = v10;
  if (!v7)
    goto LABEL_10;
  v13 = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v12)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (v10)
    {
LABEL_11:
      if (*((char *)this + 95) < 0)
        v6 = (_QWORD *)*v6;
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Infinite recursion detected when expanding reference to variable '%s'. Return NULL result.", v11, v6);
LABEL_14:
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_18;
    }
  }
  (*(void (**)(uint64_t, siri::intelligence::Memory *))(*(_QWORD *)v19 + 88))(v19, a2);
LABEL_18:
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_22AEF9030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableReference::GetExpandedType(siri::intelligence::VariableReference *this@<X0>, siri::intelligence::Memory *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*((char *)this + 95) < 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (!a2)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(a3, siri::intelligence::TYPE_UNKNOWN);
      return;
    }
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 95);
    if (!a2)
      goto LABEL_9;
  }
  if (!v4)
    goto LABEL_9;
  siri::intelligence::Memory::GetVariable((uint64_t)a2, (uint64_t)this + 72, &v9);
  if (v9)
  {
    if (*(char *)(v9 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v9 + 32), *(_QWORD *)(v9 + 40));
    }
    else
    {
      v5 = *(_OWORD *)(v9 + 32);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 48);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, siri::intelligence::TYPE_UNKNOWN);
  }
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22AEF914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableReference::~VariableReference(void **this)
{
  *this = off_24F540970;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  siri::intelligence::Variable::~Variable(this);
}

{
  *this = off_24F540970;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  siri::intelligence::Variable::~Variable(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void siri::intelligence::HashUtils::ComputeMD5(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  CC_LONG v4;
  CC_LONG v5;
  id v6;
  unsigned __int8 md[16];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = *((char *)a1 + 23);
  v4 = a1[2];
  if (v3 >= 0)
  {
    v5 = v3;
  }
  else
  {
    a1 = *(_DWORD **)a1;
    v5 = v4;
  }
  CC_MD5(a1, v5, md);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"), md[0], md[1], md[2], md[3], md[4], md[5], md[6], md[7], md[8], md[9], md[10], md[11], md[12], md[13], md[14], md[15]);
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v6, "UTF8String"));

}

void sub_22AEF92F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *siri::intelligence::HashUtils::ComputeSHA256@<X0>(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  CC_LONG v4;
  CC_LONG v5;
  uint64_t v6;
  std::string *result;
  char __str[2];
  char v9;
  unsigned __int8 md[32];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *((char *)a1 + 23);
  v4 = a1[2];
  if (v3 >= 0)
  {
    v5 = v3;
  }
  else
  {
    a1 = *(_DWORD **)a1;
    v5 = v4;
  }
  CC_SHA256(a1, v5, md);
  v6 = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  do
  {
    v9 = 0;
    *(_WORD *)__str = 0;
    snprintf(__str, 3uLL, "%02hhx", md[v6]);
    result = std::string::append(a2, __str);
    ++v6;
  }
  while (v6 != 32);
  return result;
}

void sub_22AEF93D8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void siri::intelligence::HashUtils::ComputeCATIGuid(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 45;
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a1;
  else
    v10 = *(const std::string::value_type **)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v12 = std::string::append(&v14, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  siri::intelligence::HashUtils::ComputeMD5(__p, a3);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_22AEF94FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_22AEF962C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_22AEF9758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AEF9810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22AEF98BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AEF9974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22AEF9A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_22AEF9CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL siri::intelligence::DialogTypes::IsPrimitiveDialogType(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;

  if (*((char *)a1 + 23) < 0)
  {
    v2 = a1[1];
    if (v2 != 13)
    {
      if (v2 != 14)
        return 0;
      a1 = (uint64_t *)*a1;
      goto LABEL_8;
    }
    v9 = (uint64_t *)*a1;
    if (*(_QWORD *)*a1 != 0x532E676F6C616964 || *(_QWORD *)(*a1 + 5) != 0x676E697274532E67)
    {
      v11 = *v9;
      v12 = *(uint64_t *)((char *)v9 + 5);
      return v11 == 0x4E2E676F6C616964 && v12 == 0x7265626D754E2E67;
    }
    return 1;
  }
  v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 != 13)
  {
    if (v1 != 14)
      return 0;
LABEL_8:
    v3 = *(uint64_t *)((char *)a1 + 6);
    v4 = *a1 == 0x422E676F6C616964;
    v5 = 0x6E61656C6F6F422ELL;
    return v4 && v3 == v5;
  }
  if (*a1 == 0x532E676F6C616964 && *(uint64_t *)((char *)a1 + 5) == 0x676E697274532E67)
    return 1;
  v3 = *(uint64_t *)((char *)a1 + 5);
  v4 = *a1 == 0x4E2E676F6C616964;
  v5 = 0x7265626D754E2E67;
  return v4 && v3 == v5;
}

BOOL siri::intelligence::DialogTypes::IsDialogType(siri::intelligence *a1)
{
  _QWORD **v2;
  std::string __p;
  _BYTE v5[8];
  _QWORD *v6;

  siri::intelligence::GetDialogTypes(a1);
  siri::intelligence::GetArrayElementType((uint64_t)a1, &__p);
  v2 = (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)v5, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)v5, v6);
  return &v6 != v2;
}

void sub_22AEF9FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetDialogTypes(siri::intelligence *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  unint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i22;
  const void **v39[3];
  void *__p[2];
  char v41;
  const void **v42[3];
  void *v43[2];
  char v44;
  const void **v45[3];
  __int128 v46;
  char v47;
  const void **v48[3];
  __int128 v49;
  char v50;
  const void **v51[3];
  __int128 v52;
  char v53;
  const void **v54[3];
  __int128 v55;
  char v56;
  const void **v57[3];
  __int128 v58;
  char v59;
  const void **v60[3];
  __int128 v61;
  char v62;
  const void **v63[3];
  __int128 v64;
  char v65;
  const void **v66[3];
  __int128 v67;
  char v68;
  const void **v69[3];
  __int128 v70;
  char v71;
  const void **v72[3];
  __int128 v73;
  char v74;
  const void **v75[3];
  __int128 v76;
  char v77;
  const void **v78[3];
  __int128 v79;
  char v80;
  const void **v81[3];
  __int128 v82;
  char v83;
  const void **v84;
  _QWORD *v85[2];
  __int128 v86;
  char v87;
  const void **v88;
  _QWORD *v89[2];
  __int128 v90;
  char v91;
  const void **v92[3];
  __int128 v93;
  char v94;
  const void **v95[3];
  __int128 v96;
  char v97;
  const void **v98[3];
  __int128 v99;
  char v100;
  const void **v101[3];
  __int128 v102;
  char v103;
  const void **v104[3];
  __int128 v105;
  char v106;
  const void **v107[3];
  __int128 v108;
  char v109;
  const void **v110[3];
  __int128 v111;
  char v112;
  const void **v113[3];
  __int128 v114;
  char v115;
  const void **v116;
  _QWORD *v117[2];
  __int128 v118;
  char v119;
  const void **v120[3];
  __int128 v121;
  char v122;
  const void **v123[3];
  __int128 v124;
  char v125;
  const void **v126[3];
  __int128 v127;
  char v128;
  const void **v129[3];
  __int128 v130;
  char v131;
  const void **v132[3];
  __int128 v133;
  char v134;
  const void **v135[3];
  __int128 v136;
  char v137;
  const void **v138[3];
  __int128 v139;
  char v140;
  const void **v141[3];
  __int128 v142;
  char v143;
  const void **v144[3];
  __int128 v145;
  char v146;
  const void **v147[3];
  __int128 v148;
  char v149;
  const void **v150[3];
  __int128 v151;
  char v152;
  const void **v153[3];
  __int128 v154;
  char v155;
  const void **v156[3];
  __int128 v157;
  char v158;
  const void **v159;
  _QWORD *v160[2];
  __int128 v161;
  char v162;
  const void **v163;
  _QWORD *v164[2];
  __int128 v165;
  char v166;
  const void **v167[3];
  __int128 v168;
  char v169;
  const void **v170[3];
  __int128 v171;
  char v172;
  void *v173[6];
  const void *v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  const void *v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  const void *v182[6];
  _QWORD v183[6];
  const void *v184[6];
  _QWORD v185[6];
  const void *v186[6];
  _QWORD v187[6];
  const void *v188[6];
  _QWORD v189[6];
  const void *v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  void *v215[6];
  const void *v216[6];
  _QWORD v217[6];
  const void *v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  const void *v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  const void *v234[6];
  _QWORD v235[6];
  const void *v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  const void *v239[6];
  _QWORD v240[6];
  const void *v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  void *v244[6];
  const void *v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  const void *v248[6];
  _QWORD v249[6];
  const void *v250[6];
  _QWORD v251[6];
  const void *v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  const void *v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  const void *v268[6];
  _QWORD v269[6];
  void *v270[6];
  void *v271[6];
  const void *v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  void *v284[6];
  const void *v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  void *v288[6];
  const void *v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  const void *v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  const void *v296[6];
  _QWORD v297[6];
  const void *v298[6];
  _QWORD v299[6];
  const void *v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  const void *v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  const void *v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  const void *v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  const void *v313[6];
  _QWORD v314[6];
  std::string v315[2];
  std::string v316[2];
  std::string v317[2];
  std::string v318[2];
  std::string v319[2];
  std::string v320[2];
  std::string v321[2];
  std::string v322[2];
  std::string v323[2];
  std::string v324[2];
  std::string v325[2];
  std::string v326[2];
  std::string v327[2];
  std::string v328[2];
  std::string v329[2];
  std::string v330[2];
  std::string v331[2];
  std::string v332[2];
  std::string v333[2];
  std::string v334[2];
  std::string v335[2];
  std::string v336[2];
  std::string v337[2];
  std::string v338[2];
  std::string v339[2];
  std::string v340[2];
  std::string v341[2];
  std::string v342[2];
  std::string v343[2];
  std::string v344[2];
  std::string v345[2];
  std::string v346[2];
  std::string v347[2];
  std::string v348[2];
  std::string v349[2];
  std::string v350[2];
  std::string v351[2];
  std::string v352[2];
  std::string v353[2];
  std::string v354[2];
  std::string v355[2];
  std::string v356[2];
  std::string v357[2];
  uint64_t v358;

  MEMORY[0x24BDAC7A8](this);
  v2 = v1;
  v358 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v1) = atomic_load((unsigned __int8 *)&_MergedGlobals_5);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v171, "dialog.AbstractMeasurement");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v313, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v314, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v170, v313, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v315, &v171, v170);
    std::string::basic_string[abi:ne180100]<0>(&v168, "dialog.Area");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v310, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v311, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v312, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v167, v310, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v316, &v168, v167);
    std::string::basic_string[abi:ne180100]<0>(&v165, "dialog.Array");
    v164[1] = 0;
    v164[0] = 0;
    v163 = (const void **)v164;
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v317, &v165, &v163);
    std::string::basic_string[abi:ne180100]<0>(&v161, "dialog.Boolean");
    v160[1] = 0;
    v160[0] = 0;
    v159 = (const void **)v160;
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v318, &v161, &v159);
    std::string::basic_string[abi:ne180100]<0>(&v157, "dialog.Calendar");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[21],0>(v306);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v307, "secs", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v308, "timeZone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v309, "utcOffsetSecs", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v156, v306, 4);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v319, &v157, v156);
    std::string::basic_string[abi:ne180100]<0>(&v154, "dialog.CalendarRange");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v303, "endSecs", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[14],0>(v304, "startSecs", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v305, "timeZone");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v153, v303, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v320, &v154, v153);
    std::string::basic_string[abi:ne180100]<0>(&v151, "dialog.ConvertibleMeasurement");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v300, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v301, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v302, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v150, v300, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v321, &v151, v150);
    std::string::basic_string[abi:ne180100]<0>(&v148, "dialog.Currency");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v298, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v299, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v147, v298, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v322, &v148, v147);
    std::string::basic_string[abi:ne180100]<0>(&v145, "dialog.DateFormatter");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v296, "length", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[15],0>(v297, "omitYear");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v144, v296, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v323, &v145, v144);
    std::string::basic_string[abi:ne180100]<0>(&v142, "dialog.DateTime");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[14],0>(v292, "day", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v293, "month", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v294, "timeZone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v295, "year", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v141, v292, 4);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v324, &v142, v141);
    std::string::basic_string[abi:ne180100]<0>(&v139, "dialog.Density");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v289, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v290, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v291, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v138, v289, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v325, &v139, v138);
    std::string::basic_string[abi:ne180100]<0>(&v136, "dialog.Duration");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v288, "secs", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v135, (const void **)v288, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v326, &v136, v135);
    std::string::basic_string[abi:ne180100]<0>(&v133, "dialog.Length");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v285, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v286, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v287, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v132, v285, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v327, &v133, v132);
    std::string::basic_string[abi:ne180100]<0>(&v130, "dialog.Location");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[23],0>(v284);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v129, (const void **)v284, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v328, &v130, v129);
    std::string::basic_string[abi:ne180100]<0>(&v127, "dialog.LocationAddress");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[14],0>(v272);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v273, "administrativeAreaCode");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v274, "country", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v275, "countryCode");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v276, "fullThoroughfare");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v277, "locality");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v278, "name", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v279, "postCode");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[14],0>(v280);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v281, "subLocality");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v282, "subThoroughfare");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v283, "thoroughfare");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v126, v272, 12);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v329, &v127, v126);
    std::string::basic_string[abi:ne180100]<0>(&v124, "dialog.LocationValue");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[23],0>(v271);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v123, (const void **)v271, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v330, &v124, v123);
    std::string::basic_string[abi:ne180100]<0>(&v121, "dialog.MultiLevelItem");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[24],0>(v270);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v120, (const void **)v270, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v331, &v121, v120);
    std::string::basic_string[abi:ne180100]<0>(&v118, "dialog.Number");
    v117[1] = 0;
    v117[0] = 0;
    v116 = (const void **)v117;
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v332, &v118, &v116);
    std::string::basic_string[abi:ne180100]<0>(&v114, "dialog.Percent");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v268, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v269, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v113, v268, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v333, &v114, v113);
    std::string::basic_string[abi:ne180100]<0>(&v111, "dialog.Person");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v255, "company", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v256, "familyName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v257);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v258, "fullName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[14],0>(v259, "givenName", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v260, "middleName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v261, "nickname");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[20],0>(v262);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v263, "pronoun", "dialog.Pronoun");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v264, "related", "dialog.Boolean");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v265, "relationship");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(v266, "useConversationalName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(v267);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v110, v255, 13);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v334, &v111, v110);
    std::string::basic_string[abi:ne180100]<0>(&v108, "dialog.PersonHandle");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v252, "label", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v253, "type", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v254, "value", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v107, v252, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v335, &v108, v107);
    std::string::basic_string[abi:ne180100]<0>(&v105, "dialog.PersonHeight");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v250, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v251, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v104, v250, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v336, &v105, v104);
    std::string::basic_string[abi:ne180100]<0>(&v102, "dialog.PhoneNumber");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v248, "countryCode");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v249, "value", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v101, v248, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v337, &v102, v101);
    std::string::basic_string[abi:ne180100]<0>(&v99, "dialog.Pressure");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v245, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v246, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v247, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v98, v245, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v338, &v99, v98);
    std::string::basic_string[abi:ne180100]<0>(&v96, "dialog.Pronoun");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v244, "gender", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v95, (const void **)v244, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v339, &v96, v95);
    std::string::basic_string[abi:ne180100]<0>(&v93, "dialog.Speed");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v241, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v242, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v243, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v92, v241, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v340, &v93, v92);
    std::string::basic_string[abi:ne180100]<0>(&v90, "dialog.State");
    v89[1] = 0;
    v89[0] = 0;
    v88 = (const void **)v89;
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v341, &v90, &v88);
    std::string::basic_string[abi:ne180100]<0>(&v86, "dialog.String");
    v85[1] = 0;
    v85[0] = 0;
    v84 = (const void **)v85;
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v342, &v86, &v84);
    std::string::basic_string[abi:ne180100]<0>(&v82, "dialog.StringPair");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v239, "first", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v240, "second", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v81, v239, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v343, &v82, v81);
    std::string::basic_string[abi:ne180100]<0>(&v79, "dialog.Temperature");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v236, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v237, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v238, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v78, v236, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v344, &v79, v78);
    std::string::basic_string[abi:ne180100]<0>(&v76, "dialog.TimeZone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v234, "secs", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v235, "timeZone");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v75, v234, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v345, &v76, v75);
    std::string::basic_string[abi:ne180100]<0>(&v73, "dialog.User");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v221, "company", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v222, "familyName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(v223);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v224, "fullName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[14],0>(v225, "givenName", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v226, "middleName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v227, "nickname");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[20],0>(v228);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v229, "pronoun", "dialog.Pronoun");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v230, "related", "dialog.Boolean");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v231, "relationship");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(v232, "useConversationalName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(v233);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v72, v221, 13);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v346, &v73, v72);
    std::string::basic_string[abi:ne180100]<0>(&v70, "dialog.Weight");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v218, "outputUnits");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v219, "units", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v220, "value", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v69, v218, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v347, &v70, v69);
    std::string::basic_string[abi:ne180100]<0>(&v67, "sirikit.App");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v216, "appId", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[27],0>(v217);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v66, v216, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v348, &v67, v66);
    std::string::basic_string[abi:ne180100]<0>(&v64, "sirikit.DeviceRestrictions");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v215);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v63, (const void **)v215, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v349, &v64, v63);
    std::string::basic_string[abi:ne180100]<0>(&v61, "sirikit.DeviceState");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v190, "companionName", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v191, "deviceName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(v192, "deviceRegionCode");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v193, "inputOrigin");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v194, "interactionType");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[15],0>(v195, "isAppleTV");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v196);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[15],0>(v197, "isCarDnD");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[15],0>(v198, "isCarPlay");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[15],0>(v199, "isEyesFree");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[15],0>(v200, "isHomePod");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[15],0>(v201);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[15],0>(v202, "isMac");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[15],0>(v203, "isPad");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v204, "isPhone", "dialog.Boolean");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[15],0>(v205, "isSidekick");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(v206, "isTextToSpeechEnabled");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[15],0>(v207, "isVOX");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(v208, "isVoiceTriggerEnabled");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v209, "isWatch", "dialog.Boolean");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v210);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[27],0>(v211);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(v212, "siriLocale");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(v213, "userAssignedDeviceName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v214, "voiceGender");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v60, v190, 25);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v350, &v61, v60);
    std::string::basic_string[abi:ne180100]<0>(&v58, "sirikit.LocalizedAppName");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v188, "appName", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v189, "locale", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v57, v188, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v351, &v58, v57);
    std::string::basic_string[abi:ne180100]<0>(&v55, "visual.AppIcon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v186, "bundleId");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(v187, "iconType");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v54, v186, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v352, &v55, v54);
    std::string::basic_string[abi:ne180100]<0>(&v52, "visual.AspectRatio");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v184, "height", "dialog.Number");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(v185, "width", "dialog.Number");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v51, v184, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v353, &v52, v51);
    std::string::basic_string[abi:ne180100]<0>(&v49, "visual.ImageData");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[19],0>(v182);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(v183, "encodedData");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v48, v182, 2);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v354, &v49, v48);
    std::string::basic_string[abi:ne180100]<0>(&v46, "visual.ImageResource");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(v177, "appIcon", "visual.AppIcon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[17],0>(v178);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[14],0>(v179, "imageType", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[16],0>(v180);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(v181, "symbol", "visual.Symbol");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v45, v177, 5);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v355, &v46, v45);
    std::string::basic_string[abi:ne180100]<0>(v43, "visual.ImageUrl");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[19],0>(v174);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(v175, "darkUrl", "dialog.String");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[14],0>(v176, "url", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v42, v174, 3);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v356, (__int128 *)v43, v42);
    std::string::basic_string[abi:ne180100]<0>(__p, "visual.Symbol");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(v173, "name", "dialog.String");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v39, (const void **)v173, 1);
    std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(v357, (__int128 *)__p, v39);
    std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100]((const void **)&v315[0].__r_.__value_.__l.__data_, 43);
    for (i = 2016; i != -48; i -= 48)
      std::pair<std::string const,std::map<std::string,std::string>>::~pair((uint64_t)&v315[i / 0x18]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v39, v39[1]);
    siri::intelligence::TestParseError::~TestParseError(v173);
    if (v41 < 0)
      operator delete(__p[0]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v42, v42[1]);
    for (j = 12; j != -6; j -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v174[j]);
    if (v44 < 0)
      operator delete(v43[0]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v45, v45[1]);
    for (k = 24; k != -6; k -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v177[k]);
    if (v47 < 0)
      operator delete((void *)v46);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v48, v48[1]);
    for (m = 6; m != -6; m -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v182[m]);
    if (v50 < 0)
      operator delete((void *)v49);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v51, v51[1]);
    for (n = 6; n != -6; n -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v184[n]);
    if (v53 < 0)
      operator delete((void *)v52);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v54, v54[1]);
    for (ii = 6; ii != -6; ii -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v186[ii]);
    if (v56 < 0)
      operator delete((void *)v55);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v57, v57[1]);
    for (jj = 6; jj != -6; jj -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v188[jj]);
    if (v59 < 0)
      operator delete((void *)v58);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v60, v60[1]);
    for (kk = 144; kk != -6; kk -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v190[kk]);
    if (v62 < 0)
      operator delete((void *)v61);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v63, v63[1]);
    siri::intelligence::TestParseError::~TestParseError(v215);
    if (v65 < 0)
      operator delete((void *)v64);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v66, v66[1]);
    for (mm = 6; mm != -6; mm -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v216[mm]);
    if (v68 < 0)
      operator delete((void *)v67);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v69, v69[1]);
    for (nn = 12; nn != -6; nn -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v218[nn]);
    if (v71 < 0)
      operator delete((void *)v70);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v72, v72[1]);
    for (i1 = 72; i1 != -6; i1 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v221[i1]);
    if (v74 < 0)
      operator delete((void *)v73);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v75, v75[1]);
    for (i2 = 6; i2 != -6; i2 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v234[i2]);
    if (v77 < 0)
      operator delete((void *)v76);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v78, v78[1]);
    for (i3 = 12; i3 != -6; i3 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v236[i3]);
    if (v80 < 0)
      operator delete((void *)v79);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v81, v81[1]);
    for (i4 = 6; i4 != -6; i4 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v239[i4]);
    if (v83 < 0)
      operator delete((void *)v82);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v84, v85[0]);
    if (v87 < 0)
      operator delete((void *)v86);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v88, v89[0]);
    if (v91 < 0)
      operator delete((void *)v90);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v92, v92[1]);
    for (i5 = 12; i5 != -6; i5 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v241[i5]);
    if (v94 < 0)
      operator delete((void *)v93);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v95, v95[1]);
    siri::intelligence::TestParseError::~TestParseError(v244);
    if (v97 < 0)
      operator delete((void *)v96);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v98, v98[1]);
    for (i6 = 12; i6 != -6; i6 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v245[i6]);
    if (v100 < 0)
      operator delete((void *)v99);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v101, v101[1]);
    for (i7 = 6; i7 != -6; i7 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v248[i7]);
    if (v103 < 0)
      operator delete((void *)v102);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v104, v104[1]);
    for (i8 = 6; i8 != -6; i8 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v250[i8]);
    if (v106 < 0)
      operator delete((void *)v105);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v107, v107[1]);
    for (i9 = 12; i9 != -6; i9 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v252[i9]);
    if (v109 < 0)
      operator delete((void *)v108);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v110, v110[1]);
    for (i10 = 72; i10 != -6; i10 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v255[i10]);
    if (v112 < 0)
      operator delete((void *)v111);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v113, v113[1]);
    for (i11 = 6; i11 != -6; i11 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v268[i11]);
    if (v115 < 0)
      operator delete((void *)v114);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v116, v117[0]);
    if (v119 < 0)
      operator delete((void *)v118);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v120, v120[1]);
    siri::intelligence::TestParseError::~TestParseError(v270);
    if (v122 < 0)
      operator delete((void *)v121);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v123, v123[1]);
    siri::intelligence::TestParseError::~TestParseError(v271);
    if (v125 < 0)
      operator delete((void *)v124);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v126, v126[1]);
    for (i12 = 66; i12 != -6; i12 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v272[i12]);
    if (v128 < 0)
      operator delete((void *)v127);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v129, v129[1]);
    siri::intelligence::TestParseError::~TestParseError(v284);
    if (v131 < 0)
      operator delete((void *)v130);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v132, v132[1]);
    for (i13 = 12; i13 != -6; i13 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v285[i13]);
    if (v134 < 0)
      operator delete((void *)v133);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v135, v135[1]);
    siri::intelligence::TestParseError::~TestParseError(v288);
    if (v137 < 0)
      operator delete((void *)v136);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v138, v138[1]);
    for (i14 = 12; i14 != -6; i14 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v289[i14]);
    if (v140 < 0)
      operator delete((void *)v139);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v141, v141[1]);
    for (i15 = 18; i15 != -6; i15 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v292[i15]);
    if (v143 < 0)
      operator delete((void *)v142);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v144, v144[1]);
    for (i16 = 6; i16 != -6; i16 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v296[i16]);
    if (v146 < 0)
      operator delete((void *)v145);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v147, v147[1]);
    for (i17 = 6; i17 != -6; i17 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v298[i17]);
    if (v149 < 0)
      operator delete((void *)v148);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v150, v150[1]);
    for (i18 = 12; i18 != -6; i18 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v300[i18]);
    if (v152 < 0)
      operator delete((void *)v151);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v153, v153[1]);
    for (i19 = 12; i19 != -6; i19 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v303[i19]);
    if (v155 < 0)
      operator delete((void *)v154);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v156, v156[1]);
    for (i20 = 18; i20 != -6; i20 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v306[i20]);
    if (v158 < 0)
      operator delete((void *)v157);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v159, v160[0]);
    if (v162 < 0)
      operator delete((void *)v161);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v163, v164[0]);
    if (v166 < 0)
      operator delete((void *)v165);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v167, v167[1]);
    for (i21 = 12; i21 != -6; i21 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v310[i21]);
    if (v169 < 0)
      operator delete((void *)v168);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v170, v170[1]);
    for (i22 = 6; i22 != -6; i22 -= 6)
      siri::intelligence::TestParseError::~TestParseError((void **)&v313[i22]);
    if (v172 < 0)
      operator delete((void *)v171);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::map<std::string,std::string>>::~map[abi:ne180100], &qword_253F46210, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_5);
  }
  v2[1] = 0;
  v2[2] = 0;
  *v2 = v2 + 1;
  v3 = qword_253F46210;
  if ((uint64_t *)qword_253F46210 != &qword_253F46218)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)v2, v2 + 1, (const void **)(v3 + 32), v3 + 32);
      v4 = *(uint64_t **)(v3 + 8);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (uint64_t *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = *(uint64_t **)(v3 + 16);
          v6 = *v5 == v3;
          v3 = (uint64_t)v5;
        }
        while (!v6);
      }
      v3 = (uint64_t)v5;
    }
    while (v5 != &qword_253F46218);
  }
}

void sub_22AEFC444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,_QWORD *a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a69;
  char a71;
  char a72;
  char a73;
  char a74;
  char a75;
  char a76;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i22;

  for (i = 2016; i != -48; i -= 48)
    std::pair<std::string const,std::map<std::string,std::string>>::~pair(v76 + i);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a11, a12);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x948]);
  if (a19 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a21, a22);
  for (j = 96; j != -48; j -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x978] + j));
  if (a29 < 0)
    operator delete(a24);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a31, a32);
  for (k = 192; k != -48; k -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xA08] + k));
  if (a39 < 0)
    operator delete(*(void **)v77);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a41, *(_QWORD **)(v77 + 40));
  for (m = 48; m != -48; m -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xAF8] + m));
  if (a49 < 0)
    operator delete(*(void **)(v77 + 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a51, *(_QWORD **)(v77 + 96));
  for (n = 48; n != -48; n -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xB58] + n));
  if (a59 < 0)
    operator delete(*(void **)(v77 + 112));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a61, *(_QWORD **)(v77 + 152));
  for (ii = 48; ii != -48; ii -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xBB8] + ii));
  if (a69 < 0)
    operator delete(*(void **)(v77 + 168));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a71, *(_QWORD **)(v77 + 208));
  for (jj = 48; jj != -48; jj -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xC18] + jj));
  if (a72 < 0)
    operator delete(*(void **)(v77 + 224));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a73, *(_QWORD **)(v77 + 264));
  for (kk = 1152; kk != -48; kk -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0xC78] + kk));
  if (a74 < 0)
    operator delete(*(void **)(v77 + 280));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a75, *(_QWORD **)(v77 + 320));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1128]);
  if (a76 < 0)
    operator delete(*(void **)(v77 + 336));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x208], *(_QWORD **)(v77 + 376));
  for (mm = 48; mm != -48; mm -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1158] + mm));
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete(*(void **)(v77 + 392));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x240], *(_QWORD **)(v77 + 432));
  for (nn = 96; nn != -48; nn -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x11B8] + nn));
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete(*(void **)(v77 + 448));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x278], *(_QWORD **)(v77 + 488));
  for (i1 = 576; i1 != -48; i1 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1248] + i1));
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete(*(void **)(v77 + 504));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x2B0], *(_QWORD **)(v77 + 544));
  for (i2 = 48; i2 != -48; i2 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x14B8] + i2));
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete(*(void **)(v77 + 560));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x2E8], *(_QWORD **)(v77 + 600));
  for (i3 = 96; i3 != -48; i3 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1518] + i3));
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete(*(void **)(v77 + 616));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x320], *(_QWORD **)(v77 + 656));
  for (i4 = 48; i4 != -48; i4 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x15A8] + i4));
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete(*(void **)(v77 + 672));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x350], *(_QWORD **)(v77 + 704));
  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete(*(void **)(v77 + 720));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x380], *(_QWORD **)(v77 + 752));
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete(*(void **)(v77 + 768));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x3B8], *(_QWORD **)(v77 + 808));
  for (i5 = 96; i5 != -48; i5 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1608] + i5));
  if (SLOBYTE(STACK[0x3E7]) < 0)
    operator delete(*(void **)(v77 + 824));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x3F0], *(_QWORD **)(v77 + 864));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1698]);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete(*(void **)(v77 + 880));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x428], *(_QWORD **)(v77 + 920));
  for (i6 = 96; i6 != -48; i6 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x16C8] + i6));
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete(*(void **)(v77 + 936));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x460], *(_QWORD **)(v77 + 976));
  for (i7 = 48; i7 != -48; i7 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1758] + i7));
  if (SLOBYTE(STACK[0x48F]) < 0)
    operator delete(*(void **)(v77 + 992));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x498], *(_QWORD **)(v77 + 1032));
  for (i8 = 48; i8 != -48; i8 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x17B8] + i8));
  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete(*(void **)(v77 + 1048));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x4D0], *(_QWORD **)(v77 + 1088));
  for (i9 = 96; i9 != -48; i9 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1818] + i9));
  if (SLOBYTE(STACK[0x4FF]) < 0)
    operator delete(*(void **)(v77 + 1104));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x508], *(_QWORD **)(v77 + 1144));
  for (i10 = 576; i10 != -48; i10 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x18A8] + i10));
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete(*(void **)(v77 + 1160));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x540], *(_QWORD **)(v77 + 1200));
  for (i11 = 48; i11 != -48; i11 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1B18] + i11));
  if (SLOBYTE(STACK[0x56F]) < 0)
    operator delete(*(void **)(v77 + 1216));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x570], *(_QWORD **)(v77 + 1248));
  if (SLOBYTE(STACK[0x59F]) < 0)
    operator delete(*(void **)(v77 + 1264));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x5A8], *(_QWORD **)(v77 + 1304));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1B78]);
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete(*(void **)(v77 + 1320));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x5E0], *(_QWORD **)(v77 + 1360));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1BA8]);
  if (SLOBYTE(STACK[0x60F]) < 0)
    operator delete(*(void **)(v77 + 1376));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x618], *(_QWORD **)(v77 + 1416));
  for (i12 = 528; i12 != -48; i12 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1BD8] + i12));
  if (SLOBYTE(STACK[0x647]) < 0)
    operator delete(*(void **)(v77 + 1432));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x650], *(_QWORD **)(v77 + 1472));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1E18]);
  if (SLOBYTE(STACK[0x67F]) < 0)
    operator delete(*(void **)(v77 + 1488));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x688], *(_QWORD **)(v77 + 1528));
  for (i13 = 96; i13 != -48; i13 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1E48] + i13));
  if (SLOBYTE(STACK[0x6B7]) < 0)
    operator delete(*(void **)(v77 + 1544));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x6C0], *(_QWORD **)(v77 + 1584));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x1ED8]);
  if (SLOBYTE(STACK[0x6EF]) < 0)
    operator delete(*(void **)(v77 + 1600));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x6F8], *(_QWORD **)(v77 + 1640));
  for (i14 = 96; i14 != -48; i14 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1F08] + i14));
  if (SLOBYTE(STACK[0x727]) < 0)
    operator delete(*(void **)(v77 + 1656));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x730], *(_QWORD **)(v77 + 1696));
  for (i15 = 144; i15 != -48; i15 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x1F98] + i15));
  if (SLOBYTE(STACK[0x75F]) < 0)
    operator delete(*(void **)(v77 + 1712));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x768], *(_QWORD **)(v77 + 1752));
  for (i16 = 48; i16 != -48; i16 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2058] + i16));
  if (SLOBYTE(STACK[0x797]) < 0)
    operator delete(*(void **)(v77 + 1768));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x7A0], *(_QWORD **)(v77 + 1808));
  for (i17 = 48; i17 != -48; i17 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x20B8] + i17));
  if (SLOBYTE(STACK[0x7CF]) < 0)
    operator delete(*(void **)(v77 + 1824));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x7D8], *(_QWORD **)(v77 + 1864));
  for (i18 = 96; i18 != -48; i18 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2118] + i18));
  if (SLOBYTE(STACK[0x807]) < 0)
    operator delete(*(void **)(v77 + 1880));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x810], *(_QWORD **)(v77 + 1920));
  for (i19 = 96; i19 != -48; i19 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x21A8] + i19));
  if (SLOBYTE(STACK[0x83F]) < 0)
    operator delete(*(void **)(v77 + 1936));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x848], *(_QWORD **)(v77 + 1976));
  for (i20 = 144; i20 != -48; i20 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2238] + i20));
  if (SLOBYTE(STACK[0x877]) < 0)
    operator delete(*(void **)(v77 + 1992));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x878], *(_QWORD **)(v77 + 2024));
  if (SLOBYTE(STACK[0x8A7]) < 0)
    operator delete(*(void **)(v77 + 2040));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x8A8], *(_QWORD **)(v77 + 2072));
  if (SLOBYTE(STACK[0x8D7]) < 0)
    operator delete(*(void **)(v77 + 2088));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x8E0], *(_QWORD **)(v77 + 2128));
  for (i21 = 96; i21 != -48; i21 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x22F8] + i21));
  if (SLOBYTE(STACK[0x90F]) < 0)
    operator delete(*(void **)(v77 + 2144));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x918], *(_QWORD **)(v77 + 2184));
  for (i22 = 48; i22 != -48; i22 -= 48)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2388] + i22));
  if (SLOBYTE(STACK[0x947]) < 0)
    operator delete(*(void **)(v77 + 2200));
  __cxa_guard_abort(&_MergedGlobals_5);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetArrayElementType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  BOOL v4;
  uint64_t v5;
  char v6;

  v4 = siri::intelligence::StringEndsWith((std::string *)a1, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if (v4)
  {
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a1 + 8);
    std::string::basic_string(a2, (const std::string *)a1, 0, v5 - 2, (std::allocator<char> *)&v6);
  }
  else if ((v5 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

uint64_t std::map<std::string,std::map<std::string,std::string>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

BOOL siri::intelligence::DialogTypes::IsArrayType(std::string *a1)
{
  return siri::intelligence::StringEndsWith(a1, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX);
}

BOOL siri::intelligence::DialogTypes::IsDialogTypeInput(siri::intelligence *a1, const void **a2)
{
  _QWORD **v4;
  _BOOL8 v5;
  std::string __p;
  _BYTE v8[8];
  _QWORD *v9;

  siri::intelligence::GetDialogTypes(a1);
  siri::intelligence::GetArrayElementType((uint64_t)a1, &__p);
  v4 = (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)v8, (const void **)&__p.__r_.__value_.__l.__data_);
  v5 = &v9 != v4 && v4 + 8 != (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)(v4 + 7), a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)v8, v9);
  return v5;
}

void sub_22AEFD8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void siri::intelligence::DialogTypes::GetDialogTypeInputType(siri::intelligence *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  _QWORD **v6;
  _QWORD **v7;
  uint64_t v8;
  __int128 v9;
  std::string __p;
  _BYTE v11[8];
  _QWORD *v12;

  siri::intelligence::GetDialogTypes(a1);
  siri::intelligence::GetArrayElementType((uint64_t)a1, &__p);
  v6 = (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)v11, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v6;
  if (&v12 == v6 || (v8 = std::__tree<std::string>::find<std::string>((uint64_t)(v6 + 7), a2), v7 + 8 == (_QWORD **)v8))
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v8 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v8 + 56), *(_QWORD *)(v8 + 64));
  }
  else
  {
    v9 = *(_OWORD *)(v8 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)v11, v12);
}

void sub_22AEFD9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::map<std::string,std::string>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFDA84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_22AEFDB08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22AEFDC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22AEFDC94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_22AEFDD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22AEFDD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFDE34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[21],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dateFormatter");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.DateFormatter");
  return a1;
}

void sub_22AEFDE8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFDEDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFDF2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFDF7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFDFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFE01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFE06C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[15],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE0BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[14],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFE10C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[23],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "values");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.LocationValue[]");
  return a1;
}

void sub_22AEFE164(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[14],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "administrativeArea");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE1BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE20C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE25C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[14],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "subAdministrativeArea");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE304(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE354(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[23],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "address");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.LocationAddress");
  return a1;
}

void sub_22AEFE3AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[24],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "childItems");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.MultiLevelItem[]");
  return a1;
}

void sub_22AEFE404(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[14],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE454(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "friendlyPhoneNumberName");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE4AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[20],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "personHandle");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.PersonHandle");
  return a1;
}

void sub_22AEFE504(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[15],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_22AEFE554(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[15],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE5A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "useRelationshipName");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE5FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[27],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "localizedAppNames");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "sirikit.LocalizedAppName[]");
  return a1;
}

void sub_22AEFE654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "noPrimaryDisplay");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE6AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[15],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE6FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "isAuthenticated");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE754(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[15],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE7A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "isLockedWithPasscode");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE7FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[15],0>(_QWORD *a1, char *a2)
{
  _QWORD *v3;

  v3 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v3 + 3, "dialog.Boolean");
  return a1;
}

void sub_22AEFE84C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "multiUserState");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dialog.String");
  return a1;
}

void sub_22AEFE8A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[27],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "restrictions");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "sirikit.DeviceRestrictions");
  return a1;
}

void sub_22AEFE8FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[19],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "aspectRatio");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "visual.AspectRatio");
  return a1;
}

void sub_22AEFE954(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[17],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "imageData");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "visual.ImageData");
  return a1;
}

void sub_22AEFE9AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[16],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "imageUrl");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "visual.ImageUrl");
  return a1;
}

void sub_22AEFEA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100](const void **a1, uint64_t a2)
{
  uint64_t v3;

  qword_253F46220 = 0;
  qword_253F46218 = 0;
  qword_253F46210 = (uint64_t)&qword_253F46218;
  if (a2)
  {
    v3 = 48 * a2;
    do
    {
      std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)&qword_253F46210, &qword_253F46218, a1, (uint64_t)a1);
      a1 += 6;
      v3 -= 48;
    }
    while (v3);
  }
}

void sub_22AEFEA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>(uint64_t a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  const void **v13;
  const void **v14;
  uint64_t *v15;
  BOOL v16;
  const void **v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;
  uint64_t *v24;
  const void **v25;

  v8 = a1 + 8;
  if ((uint64_t *)(a1 + 8) != a2
    && !std::less<std::string>::operator()[abi:ne180100](a1 + 16, a3, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)a2 + 4, a3))
    {
      v24 = a2;
      v25 = (const void **)a2;
      v12 = &v24;
      if (a2)
        return;
      goto LABEL_31;
    }
    v12 = (uint64_t **)(a2 + 1);
    v11 = (uint64_t *)a2[1];
    if (v11)
    {
      v13 = (const void **)a2[1];
      do
      {
        v14 = v13;
        v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = (const void **)a2;
      do
      {
        v14 = (const void **)v17[2];
        v16 = *v14 == v17;
        v17 = v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100](a1 + 16, a3, v14 + 4))
      {
LABEL_29:
        v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v25, a3);
        goto LABEL_30;
      }
      v11 = *v12;
    }
    if (v11)
    {
      v25 = v14;
      v12 = (uint64_t **)v14;
    }
    else
    {
      v25 = (const void **)a2;
    }
LABEL_30:
    if (*v12)
      return;
    goto LABEL_31;
  }
  if (*(uint64_t **)a1 != a2)
  {
    v9 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)v10 + 4, a3))
      goto LABEL_16;
    goto LABEL_29;
  }
  v10 = a2;
LABEL_16:
  if (*a2)
  {
    v25 = (const void **)v10;
    v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  v25 = (const void **)a2;
  v12 = (uint64_t **)a2;
LABEL_31:
  v18 = (char *)operator new(0x50uLL);
  v19 = (uint64_t *)v18;
  v22[0] = v18;
  v22[1] = v8;
  v23 = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v18 + 32), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v18 + 2) = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  std::map<std::string,std::string>::map[abi:ne180100](v19 + 7, (const void ***)(a4 + 24));
  v23 = 1;
  v20 = (uint64_t)v25;
  *v19 = 0;
  v19[1] = 0;
  v19[2] = v20;
  *v12 = v19;
  v21 = **(_QWORD **)a1;
  if (v21)
  {
    *(_QWORD *)a1 = v21;
    v19 = *v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v19);
  ++*(_QWORD *)(a1 + 16);
  v22[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v22);
}

void sub_22AEFECD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F53FE48, MEMORY[0x24BEDAB00]);
}

void sub_22AEFEE1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

double siri::intelligence::ResponseBase::ResponseBase(siri::intelligence::ResponseBase *this)
{
  double result;

  *(_QWORD *)this = &unk_24F5406B8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 69) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &unk_24F5406B8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 69) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  return result;
}

std::string *siri::intelligence::ResponseBase::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void siri::intelligence::ResponseBase::GetId(siri::intelligence::ResponseBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

std::string *siri::intelligence::ResponseBase::SetInputGroup(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::intelligence::ResponseBase::GetInputGroup(siri::intelligence::ResponseBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

std::string *siri::intelligence::ResponseBase::SetCondition(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::intelligence::ResponseBase::GetCondition(siri::intelligence::ResponseBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

uint64_t siri::intelligence::ResponseBase::SetRepeat(uint64_t this, char a2)
{
  *(_BYTE *)(this + 84) = a2;
  return this;
}

uint64_t siri::intelligence::ResponseBase::SetPriority(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t siri::intelligence::ResponseBase::GetPriority(siri::intelligence::ResponseBase *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t siri::intelligence::ResponseBase::IsRepeat(siri::intelligence::ResponseBase *this)
{
  return *((unsigned __int8 *)this + 84);
}

void siri::intelligence::ResponseBase::SetNextIds(std::vector<std::string> *a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = a1 + 4;
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

uint64_t siri::intelligence::ResponseBase::GetNextIds(siri::intelligence::ResponseBase *this)
{
  return (uint64_t)this + 96;
}

uint64_t siri::intelligence::ResponseBase::SetSelectionMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t siri::intelligence::ResponseBase::GetSelectionMode(siri::intelligence::ResponseBase *this)
{
  return *((unsigned int *)this + 20);
}

BOOL siri::intelligence::ResponseBase::IsValid(siri::intelligence::ResponseBase *this)
{
  uint64_t v1;

  if (*((char *)this + 31) < 0)
    v1 = *((_QWORD *)this + 2);
  else
    v1 = *((unsigned __int8 *)this + 31);
  return v1 != 0;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_22AEFF154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22AEFF15C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

double siri::intelligence::DirectInvocation::DirectInvocation(siri::intelligence::DirectInvocation *this)
{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void siri::intelligence::DirectInvocation::GetId(siri::intelligence::DirectInvocation *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t siri::intelligence::DirectInvocation::GetUserData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::intelligence::DirectInvocation::SetUserData(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), a2);
}

uint64_t siri::intelligence::IsiOS(siri::intelligence *this)
{
  return 1;
}

uint64_t siri::intelligence::IsMacOS(siri::intelligence *this)
{
  return 0;
}

uint64_t siri::intelligence::IsInternal(siri::intelligence *this)
{
  return os_variant_has_internal_diagnostics();
}

uint64_t siri::intelligence::IsSeed(siri::intelligence *this)
{
  return 0;
}

uint64_t siri::intelligence::IsProduction(siri::intelligence *this)
{
  return os_variant_has_internal_diagnostics() ^ 1;
}

siri::intelligence::ReferenceResponse *siri::intelligence::ReferenceResponse::ReferenceResponse(siri::intelligence::ReferenceResponse *this)
{
  char *v2;

  *(_OWORD *)((char *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_24F540A00;
  v2 = (char *)operator new(0x38uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24F540A38;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)this + 15) = v2 + 24;
  *((_QWORD *)this + 16) = v2;
  MEMORY[0x22E2E99E4](v2 + 24, "");
  *(_BYTE *)(*((_QWORD *)this + 15) + 24) = 1;
  return this;
}

void sub_22AEFF35C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v2);
  siri::intelligence::ResponseBase::~ResponseBase(v1);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::ReferenceResponse::SetReferenceId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 120), a2);
}

uint64_t siri::intelligence::ReferenceResponse::GetReferenceId(siri::intelligence::ReferenceResponse *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t siri::intelligence::ReferenceResponse::SetReturnAfterFinished(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 120) + 24) = a2;
  return this;
}

uint64_t siri::intelligence::ReferenceResponse::GetReturnAfterFinished(siri::intelligence::ReferenceResponse *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 15) + 24);
}

void siri::intelligence::ReferenceResponse::~ReferenceResponse(void **this)
{
  *this = &off_24F540A00;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
}

{
  *this = &off_24F540A00;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  siri::intelligence::ResponseBase::~ResponseBase(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_emplace<siri::intelligence::ReferenceResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::ReferenceResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F540A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_emplace<siri::intelligence::ReferenceResponse::Impl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

BOOL YAML::IsNullString(unsigned __int8 **a1)
{
  int v1;
  unsigned __int8 *v2;
  int v5;

  if (*((char *)a1 + 23) < 0)
  {
    v2 = a1[1];
    if (!v2)
      return 1;
    if (v2 != (unsigned __int8 *)1)
    {
      if (v2 == (unsigned __int8 *)4)
      {
        a1 = (unsigned __int8 **)*a1;
        if (*(_DWORD *)a1 != 1819047278 && *(_DWORD *)a1 != 1819047246)
          return *(_DWORD *)a1 == 1280070990;
        return 1;
      }
      return 0;
    }
    v5 = **a1;
  }
  else
  {
    v1 = *((unsigned __int8 *)a1 + 23);
    if (!*((_BYTE *)a1 + 23))
      return 1;
    if (v1 != 1)
    {
      if (v1 == 4)
      {
        if ((*(_DWORD *)a1 | 0x20) != 0x6C6C756E)
          return *(_DWORD *)a1 == 1280070990;
        return 1;
      }
      return 0;
    }
    v5 = *(unsigned __int8 *)a1;
  }
  return v5 == 126;
}

void sub_22AEFF5D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

siri::intelligence::DecisionInfo *siri::intelligence::DecisionInfo::DecisionInfo(siri::intelligence::DecisionInfo *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_22AEFF6D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::DecisionInfo::GetInputId(siri::intelligence::DecisionInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t siri::intelligence::DecisionInfo::SetInputType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t siri::intelligence::DecisionInfo::GetInputType(siri::intelligence::DecisionInfo *this)
{
  return *((unsigned int *)this + 12);
}

_QWORD *siri::intelligence::DecisionInfo::GetInputTypeString@<X0>(siri::intelligence::DecisionInfo *this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  const char *v3;
  char *v4;

  v2 = *((_DWORD *)this + 12);
  v3 = "NONE";
  if (v2 == 2)
    v3 = "FALLBACK";
  if (v2 == 1)
    v4 = "INTENT";
  else
    v4 = (char *)v3;
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void siri::intelligence::DecisionInfo::GetInputGroupId(siri::intelligence::DecisionInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::intelligence::DecisionInfo::SetInputGroupId(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t siri::intelligence::DecisionInfo::SetMatchScope(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t siri::intelligence::DecisionInfo::GetMatchScope(siri::intelligence::DecisionInfo *this)
{
  return *((unsigned int *)this + 13);
}

_QWORD *siri::intelligence::DecisionInfo::GetMatchScopeString@<X0>(siri::intelligence::DecisionInfo *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  char *v5;

  v4 = *((_DWORD *)this + 13) - 1;
  if (v4 > 2)
    v5 = "LOCAL_SCOPE";
  else
    v5 = off_24F540A78[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void siri::intelligence::DecisionInfo::GetIntentId(siri::intelligence::DecisionInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

std::string *siri::intelligence::DecisionInfo::SetIntentId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void sub_22AEFFA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(void), void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  if (a24 < 0)
    operator delete(__p);
  IEDefer::~IEDefer(&a18);
  v27 = a16;
  a16 = 0;
  if (v27)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a16, v27);
  v28 = *(_QWORD *)(v25 - 40);
  *(_QWORD *)(v25 - 48) = &off_24F543888;
  *(_QWORD *)(v25 - 40) = 0;
  if (v28)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v25 - 40, v28);

  _Unwind_Resume(a1);
}

void siri::intelligence::Configuration::GetPathFromFlowId(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "flow");
  std::string::basic_string[abi:ne180100]<0>(__p, ".flowfamily");
  siri::intelligence::GetPathFromId(a1, (uint64_t)v8, (uint64_t)__p, a2, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_22AEFFC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::GetPathFromId(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  const char *v10;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  const std::string::value_type *v13;
  uint64_t *v14;
  std::string *v15;
  std::string *v16;
  std::vector<std::string>::pointer i;
  void *__p[2];
  char v19;
  std::string v20;
  std::string v21;
  std::vector<std::string> v22;

  memset(&v21, 0, sizeof(v21));
  siri::intelligence::StringSplit(a1, "#", (uint64_t *)&v21, &v22);
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  begin = v22.__begin_;
  end = v22.__end_;
  if (v22.__begin_ == v22.__end_)
  {
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const std::string::value_type *)a2;
    else
      v13 = *(const std::string::value_type **)a2;
    if ((a1[23] & 0x80u) == 0)
      v14 = (uint64_t *)a1;
    else
      v14 = *(uint64_t **)a1;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Illegal %s ID encountered: '%s'", v10, v13, v14);
    std::string::basic_string[abi:ne180100]<0>(a5, "");
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      begin = v22.__begin_;
      end = v22.__end_;
    }
    else
    {
      v21 = *(std::string *)a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) >= 2)
    {
      siri::intelligence::AddExtension((uint64_t)begin, a3, (uint64_t)__p);
      siri::intelligence::JoinPath((uint64_t)&v21, (uint64_t)__p, (uint64_t)&v20);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v21 = v20;
      *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
      v20.__r_.__value_.__s.__data_[0] = 0;
      if (v19 < 0)
        operator delete(__p[0]);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v20, (__int128 *)&v22.__begin_[1], (__int128 *)v22.__end_, (uint64_t)v22.__begin_);
      v16 = v15;
      for (i = v22.__end_; i != v16; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v22.__end_ = v16;
      begin = v22.__begin_;
    }
    siri::intelligence::AddExtension((uint64_t)begin, a4, (uint64_t)&v20);
    siri::intelligence::JoinPath((uint64_t)&v21, (uint64_t)&v20, (uint64_t)a5);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_22AEFFE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  __p = (void *)(v28 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Configuration::GetFlowIdFromPath(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  std::string v11;
  std::string __p;
  std::vector<std::string> v13;
  void **v14[3];

  v14[2] = *(void ***)MEMORY[0x24BDAC8D0];
  siri::intelligence::StringTrim("/", a1, &__p);
  memset(&v11, 0, sizeof(v11));
  siri::intelligence::StringSplit((unsigned __int8 *)&__p, "/", (uint64_t *)&v11, &v13);
  v14[0] = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13.__begin_ == v13.__end_)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
  }
  else
  {
    siri::intelligence::RemoveExtension((uint64_t)&v13.__end_[-1], (std::string *)a2);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3) >= 2)
    {
      siri::intelligence::RemoveExtension((uint64_t)&v13.__begin_[-2] + 8 * (((char *)v13.__end_ - (char *)v13.__begin_) >> 3), &v11);
      v3 = std::string::append(&v11, "#");
      v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      v5 = *(char *)(a2 + 23);
      if (v5 >= 0)
        v6 = (const std::string::value_type *)a2;
      else
        v6 = *(const std::string::value_type **)a2;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(a2 + 23);
      else
        v7 = *(_QWORD *)(a2 + 8);
      v8 = std::string::append(&__p, v6, v7);
      v9 = v8->__r_.__value_.__r.__words[0];
      v14[0] = (void **)v8->__r_.__value_.__l.__size_;
      *(void ***)((char *)v14 + 7) = *(void ***)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
      v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_QWORD *)a2 = v9;
      *(void ***)(a2 + 8) = v14[0];
      *(void ***)(a2 + 15) = *(void ***)((char *)v14 + 7);
      *(_BYTE *)(a2 + 23) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22AF000AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Configuration::GetPathFromCatId(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "dialog");
  std::string::basic_string[abi:ne180100]<0>(v6, ".catfamily");
  std::string::basic_string[abi:ne180100]<0>(__p, ".cat");
  siri::intelligence::GetPathFromId(a1, (uint64_t)v8, (uint64_t)v6, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_22AF001DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Configuration::GetPathFromPatternId(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "pattern");
  std::string::basic_string[abi:ne180100]<0>(__p, ".patternfamily");
  siri::intelligence::GetPathFromId(a1, (uint64_t)v8, (uint64_t)__p, a2, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_22AF002B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Configuration::GetTemplateDirFromPath(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  _BOOL4 v6;
  std::string *p_p;
  int data;
  int v9;
  int v11;
  void *v12;
  std::string::size_type v13;
  std::string __p;
  std::string v15;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v15 = *(std::string *)a1;
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_55:
    *(std::string *)a2 = v15;
    return;
  }
  while (1)
  {
    siri::intelligence::BaseName((uint64_t)&v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 9)
      {
        v6 = *(_QWORD *)__p.__r_.__value_.__l.__data_ != 0x6574616C706D6554
          || *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 8) != 115;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v6)
          goto LABEL_55;
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 9
           && __p.__r_.__value_.__r.__words[0] == 0x6574616C706D6554
           && __p.__r_.__value_.__s.__data_[8] == 115)
    {
      goto LABEL_55;
    }
    siri::intelligence::PopPath((uint64_t)&v15, (std::string *)a2);
    siri::intelligence::BaseName((uint64_t)&v15, &__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
      {
        if (LODWORD(__p.__r_.__value_.__l.__data_) == 2003790950)
          goto LABEL_57;
        goto LABEL_42;
      }
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_42;
      p_p = &__p;
LABEL_32:
      data = (int)p_p->__r_.__value_.__l.__data_;
      v9 = WORD2(p_p->__r_.__value_.__r.__words[0]);
      if (data == 1818323300 && v9 == 26479)
      {
        v11 = 0;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_43;
LABEL_45:
        v12 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_46;
      }
LABEL_42:
      std::string::operator=(&v15, (const std::string *)a2);
      v11 = 1;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_43:
        if (!v11)
          break;
        goto LABEL_47;
      }
      goto LABEL_45;
    }
    if (__p.__r_.__value_.__l.__size_ != 4)
    {
      if (__p.__r_.__value_.__l.__size_ != 6)
        goto LABEL_42;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_32;
    }
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)__p.__r_.__value_.__l.__data_ != 2003790950)
      goto LABEL_42;
    v11 = 0;
LABEL_46:
    operator delete(v12);
    if (!v11)
      break;
LABEL_47:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      break;
    operator delete(*(void **)a2);
LABEL_50:
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = v15.__r_.__value_.__l.__size_;
    if (!v13)
      goto LABEL_55;
  }
  if (v11)
    goto LABEL_50;
LABEL_57:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_22AF00510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t *YAML::detail::memory_holder::merge(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;

  result = (uint64_t *)*a1;
  if (result != (uint64_t *)*a2)
  {
    std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(result, *(_QWORD **)*a2, (_QWORD *)(*a2 + 8));
    return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](a2, a1);
  }
  return result;
}

uint64_t *YAML::detail::memory::merge(uint64_t *a1, uint64_t a2)
{
  return std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
}

uint64_t YAML::detail::memory::create_node(uint64_t **this)
{
  YAML::detail::node *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (YAML::detail::node *)operator new();
  YAML::detail::node::node(v2);
  std::shared_ptr<YAML::detail::node>::shared_ptr[abi:ne180100]<YAML::detail::node,void>(&v8, (uint64_t)v2);
  std::__tree<std::shared_ptr<YAML::detail::node>>::__emplace_unique_key_args<std::shared_ptr<YAML::detail::node>,std::shared_ptr<YAML::detail::node> const&>(this, (unint64_t *)&v8, &v8);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_22AF006C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::shared_ptr<YAML::detail::node>>::__emplace_hint_unique_key_args<std::shared_ptr<YAML::detail::node>,std::shared_ptr<YAML::detail::node> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_QWORD *YAML::detail::node::node(YAML::detail::node *this)
{
  YAML::detail::node_ref *v2;
  _QWORD *result;

  v2 = (YAML::detail::node_ref *)operator new();
  YAML::detail::node_ref::node_ref(v2);
  result = std::shared_ptr<YAML::detail::node_ref>::shared_ptr[abi:ne180100]<YAML::detail::node_ref,void>(this, (uint64_t)v2);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  return result;
}

void sub_22AF007D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

_QWORD *YAML::detail::node_ref::node_ref(YAML::detail::node_ref *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_BYTE *)v2 = 0;
  *(_QWORD *)(v2 + 4) = -1;
  *(_QWORD *)(v2 + 12) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 136) = v2 + 136;
  *(_QWORD *)(v2 + 144) = v2 + 136;
  *(_QWORD *)(v2 + 152) = 0;
  return std::shared_ptr<YAML::detail::node_data>::shared_ptr[abi:ne180100]<YAML::detail::node_data,void>(this, v2);
}

_QWORD *std::shared_ptr<YAML::detail::node_data>::shared_ptr[abi:ne180100]<YAML::detail::node_data,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F540AA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22AF008D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(a2 + 136));
    v3 = *(void **)(a2 + 112);
    if (v3)
    {
      *(_QWORD *)(a2 + 120) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 80);
    if (v4)
    {
      *(_QWORD *)(a2 + 88) = v4;
      operator delete(v4);
    }
    if (*(char *)(a2 + 79) < 0)
      operator delete(*(void **)(a2 + 56));
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    JUMPOUT(0x22E2E9CCCLL);
  }
}

_QWORD *std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *std::shared_ptr<YAML::detail::node_ref>::shared_ptr[abi:ne180100]<YAML::detail::node_ref,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F540B18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22AF00AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::detail::memory_holder>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<YAML::detail::node>::shared_ptr[abi:ne180100]<YAML::detail::node,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24F540B90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22AF00BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<YAML::detail::node>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<YAML::detail::node>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<YAML::detail::node>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(a2 + 16, *(_QWORD **)(a2 + 24));
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a2);
    JUMPOUT(0x22E2E9CCCLL);
  }
}

uint64_t *std::__tree<std::shared_ptr<YAML::detail::node>>::__emplace_unique_key_args<std::shared_ptr<YAML::detail::node>,std::shared_ptr<YAML::detail::node> const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = v5[4];
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        return (uint64_t *)v8;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v16[1] = v6;
    v12 = a3[1];
    v11[4] = *a3;
    v11[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v17 = 1;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v11;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::shared_ptr<YAML::detail::node>>::__emplace_hint_unique_key_args<std::shared_ptr<YAML::detail::node>,std::shared_ptr<YAML::detail::node> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<YAML::detail::node>>::__find_equal<std::shared_ptr<YAML::detail::node>>(a1, a2, &v16, &v15, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v13[1] = a1 + 1;
    v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v14 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v16, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::shared_ptr<YAML::detail::node>>::__find_equal<std::shared_ptr<YAML::detail::node>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void siri::intelligence::Updater::GetFileVersion(std::string *a1@<X0>, std::string *a2@<X8>)
{
  int FormatForFilename;
  __int128 *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  FormatForFilename = siri::intelligence::GetFormatForFilename((uint64_t)a1);
  siri::intelligence::Loader::LoadFile(a1, FormatForFilename, 0, &v10);
  if ((_QWORD)v10)
  {
    v5 = *(__int128 **)(v10 + 528);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v6 = *v5;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_1);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22AF01188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::Updater::GetHighestVersionWithinRelease(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  BOOL v6;
  void *__p[2];
  char v8;
  _QWORD v9[3];
  void *v10[2];
  char v11;

  siri::intelligence::Utils::GetMajorMinorVersion((unsigned __int8 *)a1, (uint64_t)v10);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  siri::intelligence::GetFormatUpdaters((siri::intelligence *)v9);
  v4 = (std::string *)v9[0];
  v5 = (std::string *)v9[1];
  while (v4 != v5)
  {
    siri::intelligence::Utils::GetMajorMinorVersion((unsigned __int8 *)v4, (uint64_t)__p);
    v6 = siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)v10, (unsigned __int8 *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    if (v6)
      break;
    std::string::operator=(a2, v4);
    v4 = (std::string *)((char *)v4 + 32);
  }
  __p[0] = v9;
  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_22AF01274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::GetFormatUpdaters(siri::intelligence *this)
{
  std::string *v2;
  uint64_t v3;
  std::string *v4;
  const std::string::value_type **v5;
  __int128 v6;
  std::string *v7;
  uint64_t v8;
  _QWORD v9[2];
  std::string **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  _QWORD v14[4];
  _QWORD v15[4];
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[4];
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[5];

  v36[4] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v14, "1.0.1");
  v14[3] = siri::intelligence::UpdateTo_1_0_1;
  std::string::basic_string[abi:ne180100]<0>(v15, "1.0.2");
  v15[3] = siri::intelligence::UpdateTo_1_0_2;
  std::string::basic_string[abi:ne180100]<0>(v16, "1.0.3");
  v16[3] = siri::intelligence::UpdateTo_1_0_3;
  std::string::basic_string[abi:ne180100]<0>(v17, "1.0.4");
  v17[3] = siri::intelligence::UpdateTo_1_0_4;
  std::string::basic_string[abi:ne180100]<0>(v18, "1.0.5");
  v18[3] = siri::intelligence::UpdateTo_1_0_5;
  std::string::basic_string[abi:ne180100]<0>(v19, "1.0.6");
  v19[3] = siri::intelligence::UpdateTo_1_0_6;
  std::string::basic_string[abi:ne180100]<0>(v20, "1.0.7");
  v20[3] = siri::intelligence::UpdateTo_1_0_7;
  std::string::basic_string[abi:ne180100]<0>(v21, "1.4.0");
  v21[3] = siri::intelligence::UpdateTo_1_4_0;
  std::string::basic_string[abi:ne180100]<0>(v22, "1.4.1");
  v22[3] = siri::intelligence::UpdateTo_1_4_1;
  std::string::basic_string[abi:ne180100]<0>(v23, "1.4.2");
  v23[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v24, "1.4.3");
  v24[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v25, "1.4.4");
  v25[3] = siri::intelligence::UpdateTo_1_4_4;
  std::string::basic_string[abi:ne180100]<0>(v26, "1.4.5");
  v26[3] = siri::intelligence::UpdateTo_1_4_5;
  std::string::basic_string[abi:ne180100]<0>(v27, "1.4.6");
  v27[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v28, "1.4.7");
  v28[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v29, "2.0.0");
  v29[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v30, "2.0.1");
  v30[3] = siri::intelligence::UpdateTo_2_0_1;
  std::string::basic_string[abi:ne180100]<0>(v31, "2.0.2");
  v31[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v32, "2.0.3");
  v32[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v33, "2.0.4");
  v33[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v34, "2.0.5");
  v34[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v35, "2.0.6");
  v35[3] = siri::intelligence::UpdateNoOp;
  std::string::basic_string[abi:ne180100]<0>(v36, "2.0.7");
  v36[3] = siri::intelligence::UpdateNoOp;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  v2 = (std::string *)operator new(0x2E0uLL);
  v3 = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = (char *)v2 + 736;
  v12 = v2;
  v13 = v2;
  v9[0] = (char *)this + 16;
  v9[1] = &v12;
  v10 = &v13;
  v4 = v2;
  v11 = 0;
  do
  {
    v5 = (const std::string::value_type **)&v14[v3];
    if (SHIBYTE(v14[v3 + 2]) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *v5, (std::string::size_type)v5[1]);
      v7 = v13;
    }
    else
    {
      v6 = *(_OWORD *)v5;
      v4->__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v6;
      v7 = v4;
    }
    v4[1].__r_.__value_.__r.__words[0] = v14[v3 + 3];
    v4 = (std::string *)((char *)v7 + 32);
    v13 = (std::string *)((char *)v7 + 32);
    v3 += 4;
  }
  while (v3 != 92);
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,void (*)(protobuf::Intelligence *)>>,std::pair<std::string,void (*)(protobuf::Intelligence *)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  *((_QWORD *)this + 1) = v4;
  v8 = 92;
  do
  {
    if (*((char *)&v12 + v8 * 8 + 7) < 0)
      operator delete((&v10)[v8]);
    v8 -= 4;
  }
  while (v8 * 8);
}

void sub_22AF016D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v20;

  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v20 = 736;
  while (1)
  {
    if (*(&a19 + v20) < 0)
      operator delete(*(void **)((char *)&a14 + v20));
    v20 -= 32;
    if (!v20)
      _Unwind_Resume(a1);
  }
}

BOOL siri::intelligence::Updater::IsUpdateAvailable(unsigned __int8 *a1, uint64_t a2)
{
  std::string::size_type size;
  _BOOL8 v4;
  std::string v6;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v7.__r_.__value_.__l.__size_;
  if (!size)
  {
    siri::intelligence::Updater::GetHighestVersionWithinRelease((uint64_t)a1, &v6);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    v7 = v6;
  }
  v4 = siri::intelligence::Utils::VersionLessThan(a1, (unsigned __int8 *)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

void sub_22AF01808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Updater::IsValidVersion(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;

  siri::intelligence::GetFormatUpdaters((siri::intelligence *)&v15);
  v2 = v15;
  v3 = v16;
  if (v15 != v16)
  {
    v4 = a1[23];
    v6 = *(const void **)a1;
    v5 = *((_QWORD *)a1 + 1);
    if ((v4 & 0x80u) == 0)
      v7 = a1[23];
    else
      v7 = *((_QWORD *)a1 + 1);
    do
    {
      v8 = v2[23];
      v9 = (char)v8;
      if ((v8 & 0x80u) != 0)
        v8 = *((_QWORD *)v2 + 1);
      if (v7 == v8)
      {
        if (v9 >= 0)
          v10 = v2;
        else
          v10 = *(unsigned __int8 **)v2;
        if ((v4 & 0x80) != 0)
        {
          if (!memcmp(v6, v10, v5))
          {
LABEL_20:
            v13 = 1;
            goto LABEL_21;
          }
        }
        else
        {
          if (!(_DWORD)v4)
            goto LABEL_20;
          v11 = a1;
          v12 = v4;
          while (*v11 == *v10)
          {
            ++v11;
            ++v10;
            if (!--v12)
              goto LABEL_20;
          }
        }
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
  v13 = 0;
LABEL_21:
  v17 = &v15;
  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  return v13;
}

void siri::intelligence::Updater::GetValidVersions(uint64_t *a1@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 **v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  siri::intelligence::GetFormatUpdaters((siri::intelligence *)&v6);
  v3 = v6;
  v4 = v7;
  if (v6 != v7)
  {
    v5 = a1[1];
    do
    {
      if (v5 >= a1[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, v3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, v3);
        v5 += 24;
      }
      a1[1] = v5;
      v3 += 2;
    }
    while (v3 != v4);
  }
  v8 = &v6;
  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
}

void sub_22AF019C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Updater::UpdateToVersion(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 *v5;
  __int128 v6;
  _BOOL4 v7;
  const char *v8;
  _BOOL4 v9;
  std::string *p_p;
  char v11;
  std::string::size_type size;
  std::string::size_type v13;
  char IsValidVersion;
  const char *v15;
  std::string *p_str;
  _BOOL4 v17;
  const char *v18;
  _BOOL4 v19;
  std::string *v20;
  uint64_t v21;
  std::string::size_type v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string v30;
  std::string __str;
  std::string __p;
  std::string *v33;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) == 0)
  {
    *(_DWORD *)(a1 + 16) = v4 | 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "1.0");
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 528), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 544) = 0;
    *(_DWORD *)(a1 + 16) &= ~4u;
  }
  v5 = *(__int128 **)(a1 + 528);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "2.0.7");
  v7 = siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)&__p);
  v9 = v7;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_10;
  }
  else if (v7)
  {
LABEL_10:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Version of upgrader (2.0.7) is older than the format version in the file (%s). Skipping update.", v8, p_p);
    v11 = 0;
    goto LABEL_60;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  LOBYTE(v13) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    IsValidVersion = siri::intelligence::Updater::IsValidVersion((unsigned __int8 *)&__str);
    LOBYTE(v13) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
    if ((IsValidVersion & 1) == 0)
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      siri::intelligence::Log::Warning((siri::intelligence::Log *)"Invalid version number specified: %s. Will update to the latest format within the current release instead.", v15, p_str);
      MEMORY[0x22E2E99E4](&__str, &str_1);
      LOBYTE(v13) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
    }
  }
  v13 = v13;
  if ((v13 & 0x80u) != 0)
    v13 = __str.__r_.__value_.__l.__size_;
  if (!v13)
  {
    siri::intelligence::Updater::GetHighestVersionWithinRelease((uint64_t)&__p, &v30);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v30;
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "2.0.7");
  v17 = siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)&v30, (unsigned __int8 *)&__str);
  v19 = v17;
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v17)
      goto LABEL_37;
LABEL_34:
    v20 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"This updater cannot update to version %s. The maximum supported version of %s will be used instead.", v18, v20, "2.0.7");
    MEMORY[0x22E2E99E4](&__str, "2.0.7");
    goto LABEL_37;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (v19)
    goto LABEL_34;
LABEL_37:
  siri::intelligence::GetFormatUpdaters((siri::intelligence *)&v30);
  v22 = v30.__r_.__value_.__l.__size_;
  v21 = v30.__r_.__value_.__r.__words[0];
  if (v30.__r_.__value_.__r.__words[0] == v30.__r_.__value_.__l.__size_)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    while (!siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)v21))
    {
      if (siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)&__p, (unsigned __int8 *)v21))
      {
        v25 = v21;
        if (*(char *)(v21 + 23) < 0)
          v25 = *(_QWORD *)v21;
        siri::intelligence::Log::Info((siri::intelligence::Log *)"Upgrading flow file to version %s", v24, v25);
        (*(void (**)(uint64_t))(v21 + 24))(a1);
        *(_DWORD *)(a1 + 16) |= 1u;
        v26 = *(std::string **)(a1 + 528);
        if (v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 528), v21);
        else
          std::string::operator=(v26, (const std::string *)v21);
        v11 = 1;
      }
      v21 += 32;
      if (v21 == v22)
        goto LABEL_53;
    }
    v27 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Info((siri::intelligence::Log *)"Flow file updated to target version %s", v23, v27);
  }
LABEL_53:
  v33 = &v30;
  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (siri::intelligence::Utils::VersionLessThan(*(unsigned __int8 **)(a1 + 528), (unsigned __int8 *)&__str))
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    v28 = *(std::string **)(a1 + 528);
    if (v28 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 528), (uint64_t)&__str);
    else
      std::string::operator=(v28, &__str);
    v11 = 1;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_60:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11 & 1;
}

void sub_22AF01DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  *(_QWORD *)(v30 - 72) = &a12;
  std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 72));
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Updater::UpdateToVersion(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int FormatForFilename;
  const char *v7;
  siri::intelligence *v8;
  unsigned __int8 *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  unint64_t v19;
  std::string *v20;
  void *v22;
  BOOL v24;
  char *v25;
  __int128 v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  siri::intelligence *v46[2];
  siri::intelligence *v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  char v52;
  void *__p[2];
  char v54;
  std::string v55;
  __int128 *v56;
  __int128 *v57;
  char v58;

  if (a3)
    *a3 = 0;
  FormatForFilename = siri::intelligence::GetFormatForFilename(a1);
  siri::intelligence::Loader::LoadFile((std::string *)a1, FormatForFilename, 0, &v50);
  v8 = (siri::intelligence *)v50;
  if (!(_QWORD)v50)
  {
    if (*(char *)(a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unable to load file for upgrade: %s", v7, v12);
    v13 = 0;
    goto LABEL_82;
  }
  v9 = *(unsigned __int8 **)(v50 + 528);
  std::string::basic_string[abi:ne180100]<0>(&v56, "1.4.5");
  v10 = siri::intelligence::Utils::VersionLessThan(v9, (unsigned __int8 *)&v56);
  v11 = v10;
  if ((v58 & 0x80000000) == 0)
  {
    if (!v10)
      goto LABEL_70;
LABEL_12:
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    v47 = v8;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (siri::intelligence::GetFormatForFilename(a1) == 2)
    {
      siri::intelligence::ReadFileToLines((uint64_t *)&v56);
      v17 = v56;
      if (v57 != v56)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = (std::string *)((char *)v17 + v18);
          siri::intelligence::StringTrim(" \t\n\r", (const std::string *)((char *)v17 + v18), &v55);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          {
            v22 = (void *)v55.__r_.__value_.__r.__words[0];
            if (v55.__r_.__value_.__l.__size_ != 7)
              goto LABEL_44;
            if (*(_DWORD *)v55.__r_.__value_.__l.__data_ != 1852143205
              || *(_DWORD *)(v55.__r_.__value_.__r.__words[0] + 3) != 980644974)
            {
              goto LABEL_44;
            }
          }
          else
          {
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) != 7)
              goto LABEL_45;
            if (LODWORD(v55.__r_.__value_.__l.__data_) != 1852143205
              || *(_DWORD *)((char *)v55.__r_.__value_.__r.__words + 3) != 980644974)
            {
              goto LABEL_45;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "events");
          v24 = siri::intelligence::StringStartsWith(v20, (unsigned __int8 *)__p);
          if (v54 < 0)
            operator delete(__p[0]);
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (v24)
              goto LABEL_45;
LABEL_38:
            std::string::basic_string[abi:ne180100]<0>(__p, "events:");
            std::string::basic_string[abi:ne180100]<0>(v51, "legacyEvents:");
            siri::intelligence::StringReplace((uint64_t)v20, (char *)__p, (uint64_t)v51, 0, &v55);
            v25 = (char *)v56 + v18;
            if (*((char *)v56 + v18 + 23) < 0)
              operator delete(*(void **)v25);
            v26 = *(_OWORD *)&v55.__r_.__value_.__l.__data_;
            *((_QWORD *)v25 + 2) = *((_QWORD *)&v55.__r_.__value_.__l + 2);
            *(_OWORD *)v25 = v26;
            *((_BYTE *)&v55.__r_.__value_.__s + 23) = 0;
            v55.__r_.__value_.__s.__data_[0] = 0;
            if (v52 < 0)
              operator delete(v51[0]);
            if ((v54 & 0x80000000) == 0)
              goto LABEL_45;
            v22 = __p[0];
LABEL_44:
            operator delete(v22);
            goto LABEL_45;
          }
          operator delete(v55.__r_.__value_.__l.__data_);
          if (!v24)
            goto LABEL_38;
LABEL_45:
          ++v19;
          v17 = v56;
          v18 += 24;
        }
        while (v19 < 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1);
      std::string::basic_string[abi:ne180100]<0>(v51, ".yamlflow");
      siri::intelligence::WriteTempFileFromString((const void **)__p, (uint64_t)v51, &v55);
      if (v52 < 0)
        operator delete(v51[0]);
      if (v54 < 0)
        operator delete(__p[0]);
      siri::intelligence::WriteFileFromLines(&v56, &v55);
      v27 = siri::intelligence::GetFormatForFilename((uint64_t)&v55);
      siri::intelligence::Loader::LoadFile(&v55, v27, 0, &v49);
      siri::intelligence::DeleteFile((const char *)&v55);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
      v8 = (siri::intelligence *)v49;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    }
    else
    {
      v47 = 0;
      v48 = 0;
      v28 = v14;
    }
    v49 = 0uLL;
    *(_QWORD *)&v50 = v8;
    *((_QWORD *)&v50 + 1) = v28;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v48)
    {
      v34 = &v48->__shared_owners_;
      do
        v35 = __ldaxr((unint64_t *)v34);
      while (__stlxr(v35 - 1, (unint64_t *)v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v8 = (siri::intelligence *)v50;
    goto LABEL_70;
  }
  operator delete(v56);
  if (v11)
    goto LABEL_12;
LABEL_70:
  v36 = siri::intelligence::Updater::UpdateToVersion((uint64_t)v8, a2);
  if (a3)
    *a3 = v36;
  if (v36)
  {
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    v46[0] = v8;
    v46[1] = *((siri::intelligence **)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v13 = siri::intelligence::Saver::SaveFile(v46, (std::string *)a1);
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v13 = 1;
  }
LABEL_82:
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return v13;
}

void sub_22AF02308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a37 < 0)
    operator delete(__p);
  __p = (void *)(v37 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_0_1(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  const protobuf::Intelligence_ResponseGroup *v4;
  int *v5;
  uint64_t v6;
  int v7;
  protobuf::Intelligence_ResponseGroup *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const protobuf::Intelligence_InputGroup *v12;
  int *v13;
  uint64_t v14;
  int v15;
  protobuf::Intelligence_InputGroup *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::string **v23;
  std::string *v24;
  uint64_t *v25;
  const std::string *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  std::string **v32;
  std::string *v33;
  uint64_t *v34;
  const std::string *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  std::string **v41;
  std::string *v42;
  uint64_t *v43;
  const std::string *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  std::string **v50;
  std::string *v51;
  uint64_t *v52;
  const std::string *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int i;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  std::string **v64;
  __int128 v65;
  __int128 v66;
  std::string *v67;
  int j;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  std::string *p_str;
  std::string::size_type v73;
  int v74;
  std::string *v76;
  std::string *p_p;
  std::string::size_type v78;
  int v79;
  int v81;
  std::string::size_type size;
  int v84;
  BOOL v85;
  int v86;
  const char *v87;
  std::string *v88;
  int v89;
  std::string *v91;
  std::string *v92;
  int data;
  int v94;
  int v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  int v100;
  protobuf::Intelligence_Variable *v101;
  uint64_t v102;
  uint64_t v103;
  const std::string *v104;
  std::string *v105;
  const std::string *v106;
  std::string *v107;
  std::string **v108;
  uint64_t *v109;
  int v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  int v114;
  protobuf::Intelligence_Variable *v115;
  uint64_t v116;
  uint64_t v117;
  const std::string *v118;
  std::string *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  int v125;
  protobuf::Intelligence_Variable *v126;
  uint64_t v127;
  uint64_t v128;
  const std::string *v129;
  std::string *v130;
  char v131;
  int v132;
  uint64_t v133;
  int *v134;
  uint64_t v135;
  int v136;
  protobuf::Intelligence_Variable *v137;
  uint64_t v138;
  uint64_t v139;
  const std::string *v140;
  std::string *v141;
  int v142;
  int *v143;
  uint64_t v144;
  int v145;
  protobuf::Intelligence_KeyValueParameter *v146;
  uint64_t v147;
  uint64_t v148;
  const std::string *v149;
  std::string *v150;
  std::string **v151;
  uint64_t *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  std::string __p;
  std::string __str;
  std::string v159;

  if (*((int *)this + 32) >= 1)
  {
    v3 = 0;
    while (1)
    {
      v4 = (const protobuf::Intelligence_ResponseGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 120, v3);
      v5 = (int *)*((_QWORD *)this + 53);
      if (!v5)
        break;
      v6 = *((int *)this + 104);
      v7 = *v5;
      if ((int)v6 >= *v5)
      {
        if (v7 == *((_DWORD *)this + 105))
        {
LABEL_8:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 102, v7 + 1);
          v5 = (int *)*((_QWORD *)this + 53);
          v7 = *v5;
        }
        *v5 = v7 + 1;
        v8 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                               + 51));
        v9 = *((_QWORD *)this + 53);
        v10 = *((int *)this + 104);
        *((_DWORD *)this + 104) = v10 + 1;
        *(_QWORD *)(v9 + 8 * v10 + 8) = v8;
        goto LABEL_10;
      }
      *((_DWORD *)this + 104) = v6 + 1;
      v8 = *(protobuf::Intelligence_ResponseGroup **)&v5[2 * v6 + 2];
LABEL_10:
      if (v4 != v8)
      {
        protobuf::Intelligence_ResponseGroup::Clear(v8);
        protobuf::Intelligence_ResponseGroup::MergeFrom(v8, v4);
      }
      if (++v3 >= *((_DWORD *)this + 32))
        goto LABEL_13;
    }
    v7 = *((_DWORD *)this + 105);
    goto LABEL_8;
  }
LABEL_13:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 120);
  if (*((int *)this + 38) >= 1)
  {
    v11 = 0;
    while (1)
    {
      v12 = (const protobuf::Intelligence_InputGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 144, v11);
      v13 = (int *)*((_QWORD *)this + 56);
      if (!v13)
        break;
      v14 = *((int *)this + 110);
      v15 = *v13;
      if ((int)v14 >= *v13)
      {
        if (v15 == *((_DWORD *)this + 111))
        {
LABEL_20:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 108, v15 + 1);
          v13 = (int *)*((_QWORD *)this + 56);
          v15 = *v13;
        }
        *v13 = v15 + 1;
        v16 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                             + 54));
        v17 = *((_QWORD *)this + 56);
        v18 = *((int *)this + 110);
        *((_DWORD *)this + 110) = v18 + 1;
        *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
        goto LABEL_22;
      }
      *((_DWORD *)this + 110) = v14 + 1;
      v16 = *(protobuf::Intelligence_InputGroup **)&v13[2 * v14 + 2];
LABEL_22:
      if (v12 != v16)
      {
        protobuf::Intelligence_InputGroup::Clear(v16);
        protobuf::Intelligence_InputGroup::MergeFrom(v16, v12);
      }
      if (++v11 >= *((_DWORD *)this + 38))
        goto LABEL_25;
    }
    v15 = *((_DWORD *)this + 111);
    goto LABEL_20;
  }
LABEL_25:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 144);
  if (*((int *)this + 14) >= 1)
  {
    v19 = 0;
    do
    {
      v20 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, v19);
      v21 = *(_DWORD *)(v20 + 16);
      if ((v21 & 8) != 0)
      {
        v22 = v20;
        v25 = *(uint64_t **)(v20 + 160);
        v23 = (std::string **)(v20 + 160);
        v24 = (std::string *)v25;
        v26 = *(v23 - 2);
        *((_DWORD *)v23 - 36) = v21 | 0x20;
        if (v25 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v23, (uint64_t)v26);
        else
          std::string::operator=(v24, v26);
        v27 = *(_QWORD *)(v22 + 144);
        if ((uint64_t *)v27 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            **(_BYTE **)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v27 = 0;
            *(_BYTE *)(v27 + 23) = 0;
          }
        }
        *(_DWORD *)(v22 + 16) &= ~8u;
      }
      ++v19;
    }
    while (v19 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v28 = 0;
    do
    {
      v29 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, v28);
      v30 = *(_DWORD *)(v29 + 16);
      if ((v30 & 8) != 0)
      {
        v31 = v29;
        v34 = *(uint64_t **)(v29 + 112);
        v32 = (std::string **)(v29 + 112);
        v33 = (std::string *)v34;
        v35 = *(v32 - 2);
        *((_DWORD *)v32 - 24) = v30 | 0x20;
        if (v34 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v32, (uint64_t)v35);
        else
          std::string::operator=(v33, v35);
        v36 = *(_QWORD *)(v31 + 96);
        if ((uint64_t *)v36 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v36 + 23) < 0)
          {
            **(_BYTE **)v36 = 0;
            *(_QWORD *)(v36 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v36 = 0;
            *(_BYTE *)(v36 + 23) = 0;
          }
        }
        *(_DWORD *)(v31 + 16) &= ~8u;
      }
      ++v28;
    }
    while (v28 < *((_DWORD *)this + 20));
  }
  if (*((int *)this + 26) >= 1)
  {
    v37 = 0;
    do
    {
      v38 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((uint64_t)this + 96, v37);
      v39 = *(_DWORD *)(v38 + 16);
      if ((v39 & 8) != 0)
      {
        v40 = v38;
        v43 = *(uint64_t **)(v38 + 88);
        v41 = (std::string **)(v38 + 88);
        v42 = (std::string *)v43;
        v44 = *(v41 - 2);
        *((_DWORD *)v41 - 18) = v39 | 0x20;
        if (v43 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v41, (uint64_t)v44);
        else
          std::string::operator=(v42, v44);
        v45 = *(_QWORD *)(v40 + 72);
        if ((uint64_t *)v45 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v45 + 23) < 0)
          {
            **(_BYTE **)v45 = 0;
            *(_QWORD *)(v45 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v45 = 0;
            *(_BYTE *)(v45 + 23) = 0;
          }
        }
        *(_DWORD *)(v40 + 16) &= ~8u;
      }
      ++v37;
    }
    while (v37 < *((_DWORD *)this + 26));
  }
  if (*((int *)this + 104) >= 1)
  {
    v46 = 0;
    do
    {
      v47 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408, v46);
      v48 = *(_DWORD *)(v47 + 16);
      if ((v48 & 8) != 0)
      {
        v49 = v47;
        v52 = *(uint64_t **)(v47 + 88);
        v50 = (std::string **)(v47 + 88);
        v51 = (std::string *)v52;
        v53 = *(v50 - 2);
        *((_DWORD *)v50 - 18) = v48 | 0x20;
        if (v52 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v50, (uint64_t)v53);
        else
          std::string::operator=(v51, v53);
        v54 = *(_QWORD *)(v49 + 72);
        if ((uint64_t *)v54 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v54 + 23) < 0)
          {
            **(_BYTE **)v54 = 0;
            *(_QWORD *)(v54 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v54 = 0;
            *(_BYTE *)(v54 + 23) = 0;
          }
        }
        *(_DWORD *)(v49 + 16) &= ~8u;
      }
      ++v46;
    }
    while (v46 < *((_DWORD *)this + 104));
  }
  if (*((int *)this + 44) >= 1)
  {
    v55 = 0;
    do
    {
      v56 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, v55);
      if ((*(_BYTE *)(v56 + 16) & 4) != 0)
      {
        v57 = v56;
        v58 = (uint64_t *)(v56 + 64);
        v59 = *(_QWORD *)(v56 + 64);
        std::string::basic_string[abi:ne180100]<0>(&__str, "global_ruleset");
        std::string::basic_string[abi:ne180100]<0>(&__p, "global_input_group");
        siri::intelligence::StringReplace(v59, (char *)&__str, (uint64_t)&__p, 0, &v159);
        *(_DWORD *)(v57 + 16) |= 4u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena(v58, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v159);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      ++v55;
    }
    while (v55 < *((_DWORD *)this + 44));
  }
  if (*((int *)this + 20) >= 1)
  {
    for (i = 0; i < *((_DWORD *)this + 20); ++i)
    {
      v61 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, i);
      if ((*(_BYTE *)(v61 + 16) & 0x80) != 0)
      {
        v62 = v61;
        v64 = (std::string **)(v61 + 128);
        v63 = *(std::string **)(v61 + 128);
        if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v159, v63->__r_.__value_.__l.__data_, v63->__r_.__value_.__l.__size_);
          v63 = *v64;
        }
        else
        {
          v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v159.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v65;
        }
        if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, v63->__r_.__value_.__l.__data_, v63->__r_.__value_.__l.__size_);
        }
        else
        {
          v66 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
        }
        std::string::basic_string[abi:ne180100]<0>(v155, "clear_label");
        std::string::basic_string[abi:ne180100]<0>(v153, "clear_string");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "set_label");
        std::string::basic_string[abi:ne180100]<0>(v153, "set_string");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "split_label");
        std::string::basic_string[abi:ne180100]<0>(v153, "split_string");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "clear_flag");
        std::string::basic_string[abi:ne180100]<0>(v153, "clear_BOOLean");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "set_flag");
        std::string::basic_string[abi:ne180100]<0>(v153, "set_BOOLean");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "decrease_counter");
        std::string::basic_string[abi:ne180100]<0>(v153, "decrease_number");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "increase_counter");
        std::string::basic_string[abi:ne180100]<0>(v153, "increase_number");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "set_counter");
        std::string::basic_string[abi:ne180100]<0>(v153, "set_number");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "clear_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "clear_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "extend_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "extend_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "extract_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "extract_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "pop_back_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "pop_back_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "length_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "length_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "reduce_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "reduce_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        std::string::basic_string[abi:ne180100]<0>(v155, "uniquify_list");
        std::string::basic_string[abi:ne180100]<0>(v153, "uniquify_array");
        siri::intelligence::StringReplace((uint64_t)&__str, (char *)v155, (uint64_t)v153, 0, &__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v154 < 0)
          operator delete(v153[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        *(_DWORD *)(v62 + 16) |= 0x80u;
        v67 = *(std::string **)(v62 + 128);
        if (v67 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v64, (uint64_t)&__str);
        else
          std::string::operator=(v67, &__str);
        if (*(int *)(v62 + 32) >= 1)
        {
          for (j = 0; j < *(_DWORD *)(v62 + 32); ++j)
          {
            v69 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v62 + 24, j);
            v70 = *(__int128 **)(v69 + 120);
            if (*((char *)v70 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v70, *((_QWORD *)v70 + 1));
            }
            else
            {
              v71 = *v70;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v70 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v71;
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__str.__r_.__value_.__l.__size_ != 12)
                goto LABEL_211;
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 12)
                goto LABEL_211;
              p_str = &__str;
            }
            v73 = p_str->__r_.__value_.__r.__words[0];
            v74 = p_str->__r_.__value_.__r.__words[1];
            if (v73 == 0x74735F74696C7073 && v74 == 1735289202)
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                if (__p.__r_.__value_.__l.__size_ == 4)
                {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_253:
                  if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1953720684)
                    goto LABEL_262;
                }
              }
              else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
              {
                p_p = &__p;
                goto LABEL_253;
              }
            }
            if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (__str.__r_.__value_.__l.__size_ != 12)
                goto LABEL_211;
              v76 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 12)
                goto LABEL_211;
              v76 = &__str;
            }
            v78 = v76->__r_.__value_.__r.__words[0];
            v79 = v76->__r_.__value_.__r.__words[1];
            if (v78 == 0x615F6874676E656CLL && v79 == 2036429426)
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                size = __p.__r_.__value_.__l.__size_;
                if (__p.__r_.__value_.__l.__size_ != 7)
                  goto LABEL_223;
                v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 7)
                  goto LABEL_213;
                v92 = &__p;
              }
              data = (int)v92->__r_.__value_.__l.__data_;
              v94 = *(_DWORD *)((char *)v92->__r_.__value_.__r.__words + 3);
              if (data == 1853189987 && v94 == 1919251566)
              {
LABEL_262:
                v87 = "target";
                goto LABEL_240;
              }
            }
LABEL_211:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_213:
              if (v81 == 4)
              {
                v87 = "name";
                if (LODWORD(__p.__r_.__value_.__l.__data_) != 1734437990)
                  goto LABEL_241;
                goto LABEL_240;
              }
              if (v81 != 5)
              {
                if (v81 != 7)
                  goto LABEL_241;
                if (LODWORD(__p.__r_.__value_.__l.__data_) != 1853189987
                  || *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) != 1919251566)
                {
                  goto LABEL_241;
                }
                goto LABEL_239;
              }
              v88 = &__p;
LABEL_233:
              v89 = (int)v88->__r_.__value_.__l.__data_;
              v84 = v88->__r_.__value_.__s.__data_[4];
              v85 = v89 == 1700946284;
              v86 = 108;
              goto LABEL_234;
            }
            size = __p.__r_.__value_.__l.__size_;
LABEL_223:
            switch(size)
            {
              case 4uLL:
                if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == 1734437990)
                  goto LABEL_239;
                break;
              case 5uLL:
                v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
                goto LABEL_233;
              case 7uLL:
                v84 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3);
                v85 = *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1853189987;
                v86 = 1919251566;
LABEL_234:
                if (!v85 || v84 != v86)
                  break;
LABEL_239:
                v87 = "name";
LABEL_240:
                MEMORY[0x22E2E99E4](&__p, v87);
                break;
            }
LABEL_241:
            *(_DWORD *)(v69 + 16) |= 1u;
            v91 = *(std::string **)(v69 + 120);
            if (v91 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v69 + 120), (uint64_t)&__p);
            else
              std::string::operator=(v91, &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)this + 86) >= 1)
  {
    v96 = 0;
    while (1)
    {
      v97 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((uint64_t)this + 336, v96);
      v98 = (int *)*((_QWORD *)this + 50);
      if (!v98)
        break;
      v99 = *((int *)this + 98);
      v100 = *v98;
      if ((int)v99 >= *v98)
      {
        if (v100 == *((_DWORD *)this + 99))
        {
LABEL_275:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 96, v100 + 1);
          v98 = (int *)*((_QWORD *)this + 50);
          v100 = *v98;
        }
        *v98 = v100 + 1;
        v101 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 48));
        v102 = *((_QWORD *)this + 50);
        v103 = *((int *)this + 98);
        *((_DWORD *)this + 98) = v103 + 1;
        *(_QWORD *)(v102 + 8 * v103 + 8) = v101;
        goto LABEL_277;
      }
      *((_DWORD *)this + 98) = v99 + 1;
      v101 = *(protobuf::Intelligence_Variable **)&v98[2 * v99 + 2];
LABEL_277:
      v104 = *(const std::string **)(v97 + 24);
      v105 = (std::string *)*((_QWORD *)v101 + 9);
      *((_DWORD *)v101 + 4) |= 1u;
      if (v105 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v101 + 9, (uint64_t)v104);
      else
        std::string::operator=(v105, v104);
      protobuf::Intelligence_Variable::set_type(v101, siri::intelligence::TYPE_STRING[0]);
      if ((*(_BYTE *)(v97 + 16) & 2) != 0)
      {
        v106 = *(const std::string **)(v97 + 32);
        v109 = (uint64_t *)*((_QWORD *)v101 + 12);
        v108 = (std::string **)((char *)v101 + 96);
        v107 = (std::string *)v109;
        *((_DWORD *)v108 - 20) |= 8u;
        if (v109 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v108, (uint64_t)v106);
        else
          std::string::operator=(v107, v106);
      }
      if (++v96 >= *((_DWORD *)this + 86))
        goto LABEL_285;
    }
    v100 = *((_DWORD *)this + 99);
    goto LABEL_275;
  }
LABEL_285:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((uint64_t)this + 336);
  if (*((int *)this + 74) >= 1)
  {
    v110 = 0;
    while (1)
    {
      v111 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((uint64_t)this + 288, v110);
      v112 = (int *)*((_QWORD *)this + 50);
      if (!v112)
        break;
      v113 = *((int *)this + 98);
      v114 = *v112;
      if ((int)v113 >= *v112)
      {
        if (v114 == *((_DWORD *)this + 99))
        {
LABEL_292:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 96, v114 + 1);
          v112 = (int *)*((_QWORD *)this + 50);
          v114 = *v112;
        }
        *v112 = v114 + 1;
        v115 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 48));
        v116 = *((_QWORD *)this + 50);
        v117 = *((int *)this + 98);
        *((_DWORD *)this + 98) = v117 + 1;
        *(_QWORD *)(v116 + 8 * v117 + 8) = v115;
        goto LABEL_294;
      }
      *((_DWORD *)this + 98) = v113 + 1;
      v115 = *(protobuf::Intelligence_Variable **)&v112[2 * v113 + 2];
LABEL_294:
      v118 = *(const std::string **)(v111 + 24);
      v119 = (std::string *)*((_QWORD *)v115 + 9);
      *((_DWORD *)v115 + 4) |= 1u;
      if (v119 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v115 + 9, (uint64_t)v118);
      else
        std::string::operator=(v119, v118);
      protobuf::Intelligence_Variable::set_type(v115, siri::intelligence::TYPE_NUMBER[0]);
      if ((*(_BYTE *)(v111 + 16) & 2) != 0)
      {
        v120 = *(_QWORD *)(v111 + 32);
        *((_DWORD *)v115 + 4) |= 0x20u;
        *((_QWORD *)v115 + 14) = v120;
      }
      if (++v110 >= *((_DWORD *)this + 74))
        goto LABEL_300;
    }
    v114 = *((_DWORD *)this + 99);
    goto LABEL_292;
  }
LABEL_300:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((uint64_t)this + 288);
  if (*((int *)this + 80) >= 1)
  {
    v121 = 0;
    while (1)
    {
      v122 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((uint64_t)this + 312, v121);
      v123 = (int *)*((_QWORD *)this + 50);
      if (!v123)
        break;
      v124 = *((int *)this + 98);
      v125 = *v123;
      if ((int)v124 >= *v123)
      {
        if (v125 == *((_DWORD *)this + 99))
        {
LABEL_307:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 96, v125 + 1);
          v123 = (int *)*((_QWORD *)this + 50);
          v125 = *v123;
        }
        *v123 = v125 + 1;
        v126 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                            + 48));
        v127 = *((_QWORD *)this + 50);
        v128 = *((int *)this + 98);
        *((_DWORD *)this + 98) = v128 + 1;
        *(_QWORD *)(v127 + 8 * v128 + 8) = v126;
        goto LABEL_309;
      }
      *((_DWORD *)this + 98) = v124 + 1;
      v126 = *(protobuf::Intelligence_Variable **)&v123[2 * v124 + 2];
LABEL_309:
      v129 = *(const std::string **)(v122 + 24);
      v130 = (std::string *)*((_QWORD *)v126 + 9);
      *((_DWORD *)v126 + 4) |= 1u;
      if (v130 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v126 + 9, (uint64_t)v129);
      else
        std::string::operator=(v130, v129);
      protobuf::Intelligence_Variable::set_type(v126, siri::intelligence::TYPE_BOOLEAN[0]);
      if ((*(_BYTE *)(v122 + 16) & 2) != 0)
      {
        v131 = *(_BYTE *)(v122 + 32);
        *((_DWORD *)v126 + 4) |= 0x80u;
        *((_BYTE *)v126 + 121) = v131;
      }
      if (++v121 >= *((_DWORD *)this + 80))
        goto LABEL_315;
    }
    v125 = *((_DWORD *)this + 99);
    goto LABEL_307;
  }
LABEL_315:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((uint64_t)this + 312);
  if (*((int *)this + 92) >= 1)
  {
    v132 = 0;
    while (1)
    {
      v133 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((uint64_t)this + 360, v132);
      v134 = (int *)*((_QWORD *)this + 50);
      if (!v134)
        break;
      v135 = *((int *)this + 98);
      v136 = *v134;
      if ((int)v135 < *v134)
      {
        *((_DWORD *)this + 98) = v135 + 1;
        v137 = *(protobuf::Intelligence_Variable **)&v134[2 * v135 + 2];
        goto LABEL_324;
      }
      if (v136 == *((_DWORD *)this + 99))
        goto LABEL_322;
LABEL_323:
      *v134 = v136 + 1;
      v137 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                          + 48));
      v138 = *((_QWORD *)this + 50);
      v139 = *((int *)this + 98);
      *((_DWORD *)this + 98) = v139 + 1;
      *(_QWORD *)(v138 + 8 * v139 + 8) = v137;
LABEL_324:
      v140 = *(const std::string **)(v133 + 48);
      v141 = (std::string *)*((_QWORD *)v137 + 9);
      *((_DWORD *)v137 + 4) |= 1u;
      if (v141 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v137 + 9, (uint64_t)v140);
      else
        std::string::operator=(v141, v140);
      *((_DWORD *)v137 + 4) |= 2u;
      std::string::basic_string[abi:ne180100]<0>(&v159, "string[]");
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v137 + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v159);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (*(int *)(v133 + 32) >= 1)
      {
        v142 = 0;
        while (1)
        {
          v143 = (int *)*((_QWORD *)v137 + 5);
          if (!v143)
            break;
          v144 = *((int *)v137 + 8);
          v145 = *v143;
          if ((int)v144 >= *v143)
          {
            if (v145 == *((_DWORD *)v137 + 9))
            {
LABEL_336:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v137 + 6, v145 + 1);
              v143 = (int *)*((_QWORD *)v137 + 5);
              v145 = *v143;
            }
            *v143 = v145 + 1;
            v146 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v137 + 3));
            v147 = *((_QWORD *)v137 + 5);
            v148 = *((int *)v137 + 8);
            *((_DWORD *)v137 + 8) = v148 + 1;
            *(_QWORD *)(v147 + 8 * v148 + 8) = v146;
            goto LABEL_338;
          }
          *((_DWORD *)v137 + 8) = v144 + 1;
          v146 = *(protobuf::Intelligence_KeyValueParameter **)&v143[2 * v144 + 2];
LABEL_338:
          v149 = (const std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v133 + 24, v142);
          v152 = (uint64_t *)*((_QWORD *)v146 + 16);
          v151 = (std::string **)((char *)v146 + 128);
          v150 = (std::string *)v152;
          *((_DWORD *)v151 - 28) |= 2u;
          if (v152 == &google::protobuf::internal::fixed_address_empty_string)
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v151, (uint64_t)v149);
          else
            std::string::operator=(v150, v149);
          if (++v142 >= *(_DWORD *)(v133 + 32))
            goto LABEL_342;
        }
        v145 = *((_DWORD *)v137 + 9);
        goto LABEL_336;
      }
LABEL_342:
      if (++v132 >= *((_DWORD *)this + 92))
        goto LABEL_343;
    }
    v136 = *((_DWORD *)this + 99);
LABEL_322:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 96, v136 + 1);
    v134 = (int *)*((_QWORD *)this + 50);
    v136 = *v134;
    goto LABEL_323;
  }
LABEL_343:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((uint64_t)this + 360);
}

void sub_22AF03A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::UpdateTo_1_0_2(siri::intelligence *this, protobuf::Intelligence *a2)
{
  siri::intelligence *v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v11;
  uint64_t v12;
  std::string *v13;
  const std::string *v14;
  uint64_t v15;
  int v16;
  siri::intelligence *v17;
  protobuf::Intelligence_KeyValueParameter *v18;
  int v19;
  siri::intelligence *v20;
  protobuf::Intelligence_KeyValueParameter *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  std::string::size_type j;
  std::string::size_type v29;
  __int128 v30;
  uint64_t v31;
  std::string *v32;
  const std::string *v33;
  uint64_t v34;
  int v35;
  siri::intelligence *v36;
  protobuf::Intelligence_KeyValueParameter *v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 *v48;
  std::string::size_type k;
  std::string::size_type v50;
  __int128 v51;
  uint64_t v52;
  std::string *v53;
  const std::string *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 *v61;
  std::string::size_type m;
  std::string::size_type v63;
  __int128 v64;
  uint64_t v65;
  std::string *v66;
  const std::string *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  const std::string *v77;
  int *v78;
  uint64_t v79;
  int v80;
  std::string *v81;
  google::protobuf::internal::ArenaImpl *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  const std::string *v90;
  int *v91;
  uint64_t v92;
  int v93;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::string *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  std::string::size_type n;
  std::string::size_type v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  siri::intelligence *v110;
  protobuf::Intelligence_KeyValueParameter *v111;
  int v112;
  siri::intelligence *v113;
  protobuf::Intelligence_KeyValueParameter *v114;
  int v115;
  std::string __p;
  std::string v118;
  std::string v119[2];

  v2 = this;
  if (*((int *)this + 14) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 48;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)v4, v3);
      v6 = v5;
      v7 = *(_DWORD *)(v5 + 16);
      if ((v7 & 2) != 0)
      {
        v8 = *(unsigned __int8 **)(v5 + 128);
        memset(&v118, 0, sizeof(v118));
        siri::intelligence::StringSplit(v8, ",", (uint64_t *)&v118, (std::vector<std::string> *)v119);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        size = v119[0].__r_.__value_.__l.__size_;
        for (i = v119[0].__r_.__value_.__r.__words[0]; i != size; i += 24)
        {
          if (*(char *)(i + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
          }
          else
          {
            v11 = *(_OWORD *)i;
            v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v11;
          }
          siri::intelligence::StringTrim(" \t\n\r", &v118, &__p);
          google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v6 + 72, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
        }
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        v12 = *(_QWORD *)(v6 + 128);
        v2 = this;
        if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v12 + 23) < 0)
          {
            **(_BYTE **)v12 = 0;
            *(_QWORD *)(v12 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v12 = 0;
            *(_BYTE *)(v12 + 23) = 0;
          }
        }
        v7 = *(_DWORD *)(v6 + 16) & 0xFFFFFFFD;
        *(_DWORD *)(v6 + 16) = v7;
      }
      if ((v7 & 4) != 0 && siri::intelligence::IsNewStyleCondition(*(_QWORD *)(v6 + 136)))
      {
        v13 = *(std::string **)(v6 + 208);
        v14 = *(const std::string **)(v6 + 136);
        *(_DWORD *)(v6 + 16) |= 0x800u;
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v6 + 208), (uint64_t)v14);
        else
          std::string::operator=(v13, v14);
        v15 = *(_QWORD *)(v6 + 136);
        if ((uint64_t *)v15 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v15 + 23) < 0)
          {
            **(_BYTE **)v15 = 0;
            *(_QWORD *)(v15 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v15 = 0;
            *(_BYTE *)(v15 + 23) = 0;
          }
        }
        *(_DWORD *)(v6 + 16) &= ~4u;
      }
      if (*(int *)(v6 + 32) >= 1)
      {
        v16 = 0;
        do
        {
          v17 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v6 + 24, v16);
          siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v17, v18);
          ++v16;
        }
        while (v16 < *(_DWORD *)(v6 + 32));
      }
      if (*(int *)(v6 + 56) >= 1)
      {
        v19 = 0;
        do
        {
          v20 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v6 + 48, v19);
          siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v20, v21);
          ++v19;
        }
        while (v19 < *(_DWORD *)(v6 + 56));
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)v2 + 14));
  }
  if (*((int *)v2 + 20) >= 1)
  {
    v22 = 0;
    v23 = (uint64_t)v2 + 72;
    do
    {
      v24 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(v23, v22);
      v25 = v24;
      v26 = *(_DWORD *)(v24 + 16);
      if ((v26 & 2) != 0)
      {
        v27 = *(unsigned __int8 **)(v24 + 80);
        memset(&v118, 0, sizeof(v118));
        siri::intelligence::StringSplit(v27, ",", (uint64_t *)&v118, (std::vector<std::string> *)v119);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v29 = v119[0].__r_.__value_.__l.__size_;
        for (j = v119[0].__r_.__value_.__r.__words[0]; j != v29; j += 24)
        {
          if (*(char *)(j + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
          }
          else
          {
            v30 = *(_OWORD *)j;
            v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v30;
          }
          siri::intelligence::StringTrim(" \t\n\r", &v118, &__p);
          google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v25 + 48, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
        }
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        v31 = *(_QWORD *)(v25 + 80);
        v2 = this;
        if ((uint64_t *)v31 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v31 + 23) < 0)
          {
            **(_BYTE **)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v31 = 0;
            *(_BYTE *)(v31 + 23) = 0;
          }
        }
        v26 = *(_DWORD *)(v25 + 16) & 0xFFFFFFFD;
        *(_DWORD *)(v25 + 16) = v26;
      }
      if ((v26 & 4) != 0 && siri::intelligence::IsNewStyleCondition(*(_QWORD *)(v25 + 88)))
      {
        v32 = *(std::string **)(v25 + 136);
        v33 = *(const std::string **)(v25 + 88);
        *(_DWORD *)(v25 + 16) |= 0x100u;
        if (v32 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v25 + 136), (uint64_t)v33);
        else
          std::string::operator=(v32, v33);
        v34 = *(_QWORD *)(v25 + 88);
        if ((uint64_t *)v34 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v34 + 23) < 0)
          {
            **(_BYTE **)v34 = 0;
            *(_QWORD *)(v34 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v34 = 0;
            *(_BYTE *)(v34 + 23) = 0;
          }
        }
        *(_DWORD *)(v25 + 16) &= ~4u;
      }
      if (*(int *)(v25 + 32) >= 1)
      {
        v35 = 0;
        do
        {
          v36 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v25 + 24, v35);
          siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v36, v37);
          ++v35;
        }
        while (v35 < *(_DWORD *)(v25 + 32));
      }
      v38 = *(uint64_t **)(v25 + 128);
      v39 = *((char *)v38 + 23);
      if (v39 < 0)
      {
        if (v38[1] == 11)
        {
          v38 = (uint64_t *)*v38;
LABEL_70:
          v40 = (uint64_t *)*v38;
          v41 = *(uint64_t *)((char *)v38 + 3);
          if (v40 == (uint64_t *)0x75725F7972746572 && v41 == 0x73656C75725F7972)
          {
            *(_DWORD *)(v25 + 16) |= 0x80u;
            std::string::basic_string[abi:ne180100]<0>(v119, "retry_inputs");
            google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(v25 + 128), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)v119);
            if (SHIBYTE(v119[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v119[0].__r_.__value_.__l.__data_);
          }
        }
      }
      else if (v39 == 11)
      {
        goto LABEL_70;
      }
      ++v22;
    }
    while (v22 < *((_DWORD *)v2 + 20));
  }
  if (*((int *)v2 + 26) >= 1)
  {
    v43 = 0;
    v44 = (uint64_t)v2 + 96;
    do
    {
      v45 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(v44, v43);
      v46 = v45;
      v47 = *(_DWORD *)(v45 + 16);
      if ((v47 & 2) != 0)
      {
        v48 = *(unsigned __int8 **)(v45 + 56);
        memset(&v118, 0, sizeof(v118));
        siri::intelligence::StringSplit(v48, ",", (uint64_t *)&v118, (std::vector<std::string> *)v119);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v50 = v119[0].__r_.__value_.__l.__size_;
        for (k = v119[0].__r_.__value_.__r.__words[0]; k != v50; k += 24)
        {
          if (*(char *)(k + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)k, *(_QWORD *)(k + 8));
          }
          else
          {
            v51 = *(_OWORD *)k;
            v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(k + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v51;
          }
          siri::intelligence::StringTrim(" \t\n\r", &v118, &__p);
          google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v46 + 24, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
        }
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        v52 = *(_QWORD *)(v46 + 56);
        v2 = this;
        if ((uint64_t *)v52 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v52 + 23) < 0)
          {
            **(_BYTE **)v52 = 0;
            *(_QWORD *)(v52 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v52 = 0;
            *(_BYTE *)(v52 + 23) = 0;
          }
        }
        v47 = *(_DWORD *)(v46 + 16) & 0xFFFFFFFD;
        *(_DWORD *)(v46 + 16) = v47;
      }
      if ((v47 & 4) != 0 && siri::intelligence::IsNewStyleCondition(*(_QWORD *)(v46 + 64)))
      {
        v53 = *(std::string **)(v46 + 120);
        v54 = *(const std::string **)(v46 + 64);
        *(_DWORD *)(v46 + 16) |= 0x200u;
        if (v53 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v46 + 120), (uint64_t)v54);
        else
          std::string::operator=(v53, v54);
        v55 = *(_QWORD *)(v46 + 64);
        if ((uint64_t *)v55 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v55 + 23) < 0)
          {
            **(_BYTE **)v55 = 0;
            *(_QWORD *)(v55 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v55 = 0;
            *(_BYTE *)(v55 + 23) = 0;
          }
        }
        *(_DWORD *)(v46 + 16) &= ~4u;
      }
      ++v43;
    }
    while (v43 < *((_DWORD *)v2 + 26));
  }
  if (*((int *)v2 + 104) >= 1)
  {
    v56 = 0;
    v57 = (uint64_t)v2 + 408;
    do
    {
      v58 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(v57, v56);
      v59 = v58;
      v60 = *(_DWORD *)(v58 + 16);
      if ((v60 & 2) != 0)
      {
        v61 = *(unsigned __int8 **)(v58 + 56);
        memset(&v118, 0, sizeof(v118));
        siri::intelligence::StringSplit(v61, ",", (uint64_t *)&v118, (std::vector<std::string> *)v119);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v63 = v119[0].__r_.__value_.__l.__size_;
        for (m = v119[0].__r_.__value_.__r.__words[0]; m != v63; m += 24)
        {
          if (*(char *)(m + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)m, *(_QWORD *)(m + 8));
          }
          else
          {
            v64 = *(_OWORD *)m;
            v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(m + 16);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v64;
          }
          siri::intelligence::StringTrim(" \t\n\r", &v118, &__p);
          google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v59 + 24, (__n128 *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v118.__r_.__value_.__l.__data_);
        }
        v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
        v65 = *(_QWORD *)(v59 + 56);
        v2 = this;
        if ((uint64_t *)v65 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v65 + 23) < 0)
          {
            **(_BYTE **)v65 = 0;
            *(_QWORD *)(v65 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v65 = 0;
            *(_BYTE *)(v65 + 23) = 0;
          }
        }
        v60 = *(_DWORD *)(v59 + 16) & 0xFFFFFFFD;
        *(_DWORD *)(v59 + 16) = v60;
      }
      if ((v60 & 4) != 0 && siri::intelligence::IsNewStyleCondition(*(_QWORD *)(v59 + 64)))
      {
        v66 = *(std::string **)(v59 + 104);
        v67 = *(const std::string **)(v59 + 64);
        *(_DWORD *)(v59 + 16) |= 0x80u;
        if (v66 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v59 + 104), (uint64_t)v67);
        else
          std::string::operator=(v66, v67);
        v68 = *(_QWORD *)(v59 + 64);
        if ((uint64_t *)v68 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v68 + 23) < 0)
          {
            **(_BYTE **)v68 = 0;
            *(_QWORD *)(v68 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v68 = 0;
            *(_BYTE *)(v68 + 23) = 0;
          }
        }
        *(_DWORD *)(v59 + 16) &= ~4u;
      }
      ++v56;
    }
    while (v56 < *((_DWORD *)v2 + 104));
  }
  if (*((int *)v2 + 110) >= 1)
  {
    v69 = 0;
    while (1)
    {
      v115 = v69;
      v70 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 432, v69);
      LODWORD(v71) = *(_DWORD *)(v70 + 56);
      if ((int)v71 >= 1)
        break;
LABEL_156:
      if (*(int *)(v70 + 32) >= 1)
      {
        v85 = 0;
        while (1)
        {
          v86 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(v70 + 24, v85);
          v87 = v86;
          if (*(int *)(v86 + 32) >= 1)
            break;
LABEL_173:
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v87 + 24);
          if (++v85 >= *(_DWORD *)(v70 + 32))
            goto LABEL_174;
        }
        v88 = 0;
        v89 = (uint64_t *)(v86 + 48);
        while (2)
        {
          v90 = (const std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v87 + 24, v88);
          v91 = *(int **)(v87 + 64);
          if (v91)
          {
            v92 = *(int *)(v87 + 56);
            v93 = *v91;
            if ((int)v92 < *v91)
            {
              *(_DWORD *)(v87 + 56) = v92 + 1;
              AlignedAndAddCleanup = *(std::string **)&v91[2 * v92 + 2];
              goto LABEL_172;
            }
            if (v93 == *(_DWORD *)(v87 + 60))
            {
LABEL_165:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v87 + 48), v93 + 1);
              v91 = *(int **)(v87 + 64);
              v93 = *v91;
            }
            *v91 = v93 + 1;
            v95 = (google::protobuf::internal::ArenaImpl *)*v89;
            if (*v89)
            {
              if (*((_QWORD *)v95 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v95, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v96 = *(_QWORD *)(v87 + 64);
            v97 = *(int *)(v87 + 56);
            *(_DWORD *)(v87 + 56) = v97 + 1;
            *(_QWORD *)(v96 + 8 * v97 + 8) = AlignedAndAddCleanup;
LABEL_172:
            std::string::operator=(AlignedAndAddCleanup, v90);
            if (++v88 >= *(_DWORD *)(v87 + 32))
              goto LABEL_173;
            continue;
          }
          break;
        }
        v93 = *(_DWORD *)(v87 + 60);
        goto LABEL_165;
      }
LABEL_174:
      LODWORD(v98) = *(_DWORD *)(v70 + 80);
      if ((int)v98 >= 1)
      {
        v99 = 0;
        do
        {
          if (v99 >= (int)v98)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v119, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
            v100 = google::protobuf::internal::LogMessage::operator<<(v119, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v118, (const char **)&v100->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v119[0].__r_.__value_.__l.__data_);
          }
          v101 = *(_QWORD *)(*(_QWORD *)(v70 + 88) + 8 * v99 + 8);
          if ((*(_BYTE *)(v101 + 16) & 2) != 0)
          {
            v102 = *(unsigned __int8 **)(v101 + 56);
            memset(&v118, 0, sizeof(v118));
            siri::intelligence::StringSplit(v102, ",", (uint64_t *)&v118, (std::vector<std::string> *)v119);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v104 = v119[0].__r_.__value_.__l.__size_;
            for (n = v119[0].__r_.__value_.__r.__words[0]; n != v104; n += 24)
            {
              if (*(char *)(n + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)n, *(_QWORD *)(n + 8));
              }
              else
              {
                v105 = *(_OWORD *)n;
                v118.__r_.__value_.__r.__words[2] = *(_QWORD *)(n + 16);
                *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v105;
              }
              siri::intelligence::StringTrim(" \t\n\r", &v118, &__p);
              google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v101 + 24, (__n128 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v118.__r_.__value_.__l.__data_);
            }
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            v106 = *(_QWORD *)(v101 + 56);
            if ((uint64_t *)v106 != &google::protobuf::internal::fixed_address_empty_string)
            {
              if (*(char *)(v106 + 23) < 0)
              {
                **(_BYTE **)v106 = 0;
                *(_QWORD *)(v106 + 8) = 0;
              }
              else
              {
                *(_BYTE *)v106 = 0;
                *(_BYTE *)(v106 + 23) = 0;
              }
            }
            *(_DWORD *)(v101 + 16) &= ~2u;
          }
          ++v99;
          v98 = *(int *)(v70 + 80);
        }
        while (v99 < v98);
      }
      v69 = v115 + 1;
      if (v115 + 1 >= *((_DWORD *)this + 110))
        goto LABEL_195;
    }
    v72 = 0;
    while (1)
    {
      if (v72 >= (int)v71)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v119, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
        v73 = google::protobuf::internal::LogMessage::operator<<(v119, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v118, (const char **)&v73->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v119[0].__r_.__value_.__l.__data_);
      }
      v74 = *(_QWORD *)(*(_QWORD *)(v70 + 64) + 8 * v72 + 8);
      if (*(int *)(v74 + 32) >= 1)
        break;
LABEL_155:
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v74 + 24);
      ++v72;
      v71 = *(int *)(v70 + 56);
      if (v72 >= v71)
        goto LABEL_156;
    }
    v75 = 0;
    v76 = (uint64_t *)(v74 + 48);
    while (1)
    {
      v77 = (const std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v74 + 24, v75);
      v78 = *(int **)(v74 + 64);
      if (!v78)
        break;
      v79 = *(int *)(v74 + 56);
      v80 = *v78;
      if ((int)v79 >= *v78)
      {
        if (v80 == *(_DWORD *)(v74 + 60))
        {
LABEL_147:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v74 + 48), v80 + 1);
          v78 = *(int **)(v74 + 64);
          v80 = *v78;
        }
        *v78 = v80 + 1;
        v82 = (google::protobuf::internal::ArenaImpl *)*v76;
        if (*v76)
        {
          if (*((_QWORD *)v82 + 14))
          v81 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v82, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          v81 = (std::string *)operator new();
        }
        v81->__r_.__value_.__r.__words[0] = 0;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v83 = *(_QWORD *)(v74 + 64);
        v84 = *(int *)(v74 + 56);
        *(_DWORD *)(v74 + 56) = v84 + 1;
        *(_QWORD *)(v83 + 8 * v84 + 8) = v81;
        goto LABEL_154;
      }
      *(_DWORD *)(v74 + 56) = v79 + 1;
      v81 = *(std::string **)&v78[2 * v79 + 2];
LABEL_154:
      std::string::operator=(v81, v77);
      if (++v75 >= *(_DWORD *)(v74 + 32))
        goto LABEL_155;
    }
    v80 = *(_DWORD *)(v74 + 60);
    goto LABEL_147;
  }
LABEL_195:
  if (*((int *)this + 98) >= 1)
  {
    v107 = 0;
    do
    {
      v108 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)this + 384, v107);
      if (*(int *)(v108 + 32) >= 1)
      {
        v109 = 0;
        do
        {
          v110 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v108 + 24, v109);
          siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v110, v111);
          ++v109;
        }
        while (v109 < *(_DWORD *)(v108 + 32));
      }
      if (*(int *)(v108 + 56) >= 1)
      {
        v112 = 0;
        do
        {
          v113 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v108 + 48, v112);
          siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v113, v114);
          ++v112;
        }
        while (v112 < *(_DWORD *)(v108 + 56));
      }
      ++v107;
    }
    while (v107 < *((_DWORD *)this + 98));
  }
}

void sub_22AF049B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::UpdateTo_1_0_3(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  char *v4;
  protobuf::Intelligence_Condition_ConditionEntry *v5;
  uint64_t v6;
  siri::intelligence *v7;

  if (*((int *)this + 68) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 264;
    do
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((uint64_t)v4, v3);
      *(_DWORD *)(v6 + 16) |= 2u;
      v7 = *(siri::intelligence **)(v6 + 32);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
        *(_QWORD *)(v6 + 32) = v7;
      }
      siri::intelligence::UpdateConditionEntryTo_1_0_3(v7, v5);
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 68));
  }
}

void siri::intelligence::UpdateTo_1_0_4(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::string *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  __n128 __p;
  char v12;

  if (*((int *)this + 98) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 384;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)v4, v3);
      if ((*(_BYTE *)(v5 + 16) & 2) != 0)
      {
        v6 = v5;
        v7 = (uint64_t *)(v5 + 80);
        v8 = *(std::string **)(v5 + 80);
        std::string::basic_string[abi:ne180100]<0>(&__p, "[]");
        v9 = siri::intelligence::StringEndsWith(v8, (unsigned __int8 *)&__p);
        v10 = v9;
        if (v12 < 0)
        {
          operator delete((void *)__p.n128_u64[0]);
          if (v10)
          {
LABEL_8:
            *(_DWORD *)(v6 + 16) |= 2u;
            std::string::basic_string[abi:ne180100]<0>(&__p, "array");
            google::protobuf::internal::ArenaStringPtr::SetNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &__p);
            if (v12 < 0)
              operator delete((void *)__p.n128_u64[0]);
          }
        }
        else if (v9)
        {
          goto LABEL_8;
        }
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 98));
  }
}

void sub_22AF04C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::UpdateTo_1_0_5(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  protobuf::Intelligence_KeyValueParameter *v8;
  uint64_t v9;
  const protobuf::Intelligence_KeyValueParameter **v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_KeyValueParameter *v14;
  uint64_t v15;
  uint64_t v16;
  const protobuf::Intelligence_KeyValueParameter *v17;
  uint64_t v18;
  protobuf::Intelligence_KeyValueParameter *v19;
  const std::string *v20;
  std::string **v21;
  std::string *v22;
  uint64_t *v23;
  protobuf::Intelligence_KeyValueParameter *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  protobuf::Intelligence_KeyValueParameter *v28;
  char v29;
  protobuf::Intelligence_KeyValueParameter *v30;
  const protobuf::Intelligence_KeyValueParameter **v31;
  int *v32;
  uint64_t v33;
  int v34;
  protobuf::Intelligence_KeyValueParameter *v35;
  uint64_t v36;
  uint64_t v37;
  const protobuf::Intelligence_KeyValueParameter *v38;
  uint64_t v39;
  signed int *v40;
  uint64_t v41;
  uint64_t v42;

  if (*((int *)this + 98) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 384;
    while (1)
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)v4, v3);
      v6 = v5;
      v7 = *(_DWORD *)(v5 + 16);
      if ((v7 & 8) != 0)
      {
        *(_DWORD *)(v5 + 16) = v7 | 0x10;
        v19 = *(protobuf::Intelligence_KeyValueParameter **)(v5 + 104);
        if (!v19)
        {
          v19 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
          *(_QWORD *)(v6 + 104) = v19;
        }
        v20 = *(const std::string **)(v6 + 96);
        v23 = (uint64_t *)*((_QWORD *)v19 + 16);
        v21 = (std::string **)((char *)v19 + 128);
        v22 = (std::string *)v23;
        *((_DWORD *)v21 - 28) |= 2u;
        if (v23 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v21, (uint64_t)v20);
        else
          std::string::operator=(v22, v20);
        v27 = *(_QWORD *)(v6 + 96);
        if ((uint64_t *)v27 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            **(_BYTE **)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v27 = 0;
            *(_BYTE *)(v27 + 23) = 0;
          }
        }
        v26 = *(_DWORD *)(v6 + 16) & 0xFFFFFFF7;
        goto LABEL_43;
      }
      if ((v7 & 0x20) != 0)
        break;
      if ((v7 & 0x80) != 0)
      {
        *(_DWORD *)(v5 + 16) = v7 | 0x10;
        v28 = *(protobuf::Intelligence_KeyValueParameter **)(v5 + 104);
        if (!v28)
        {
          v28 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
          *(_QWORD *)(v6 + 104) = v28;
        }
        v29 = *(_BYTE *)(v6 + 121);
        *((_DWORD *)v28 + 4) |= 0x100u;
        *((_BYTE *)v28 + 184) = v29;
        *(_BYTE *)(v6 + 121) = 0;
        v26 = *(_DWORD *)(v6 + 16) & 0xFFFFFF7F;
LABEL_43:
        *(_DWORD *)(v6 + 16) = v26;
        goto LABEL_44;
      }
      if (*(int *)(v5 + 32) >= 1)
      {
        *(_DWORD *)(v5 + 16) = v7 | 0x10;
        v8 = *(protobuf::Intelligence_KeyValueParameter **)(v5 + 104);
        if (!v8)
        {
          v8 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
          *(_QWORD *)(v6 + 104) = v8;
        }
        v9 = v6 + 24;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(&v40, v9);
        if ((_DWORD)v41)
        {
          if (v42)
            v10 = (const protobuf::Intelligence_KeyValueParameter **)(v42 + 8);
          else
            v10 = 0;
          while (1)
          {
            v11 = (int *)*((_QWORD *)v8 + 8);
            if (!v11)
              break;
            v12 = *((int *)v8 + 14);
            v13 = *v11;
            if ((int)v12 >= *v11)
            {
              if (v13 == *((_DWORD *)v8 + 15))
              {
LABEL_18:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v8 + 12, v13 + 1);
                v11 = (int *)*((_QWORD *)v8 + 8);
                v13 = *v11;
              }
              *v11 = v13 + 1;
              v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v8 + 6));
              v15 = *((_QWORD *)v8 + 8);
              v16 = *((int *)v8 + 14);
              *((_DWORD *)v8 + 14) = v16 + 1;
              *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
              goto LABEL_20;
            }
            *((_DWORD *)v8 + 14) = v12 + 1;
            v14 = *(protobuf::Intelligence_KeyValueParameter **)&v11[2 * v12 + 2];
LABEL_20:
            v17 = *v10;
            if (*v10 != v14)
            {
              protobuf::Intelligence_KeyValueParameter::Clear(v14);
              protobuf::Intelligence_KeyValueParameter::MergeFrom(v14, v17);
            }
            ++v10;
            if (v42)
              v18 = v42 + 8;
            else
              v18 = 0;
            if (v10 == (const protobuf::Intelligence_KeyValueParameter **)(v18 + 8 * (int)v41))
              goto LABEL_66;
          }
          v13 = *((_DWORD *)v8 + 15);
          goto LABEL_18;
        }
        goto LABEL_66;
      }
      if (*(int *)(v5 + 56) >= 1)
      {
        *(_DWORD *)(v5 + 16) = v7 | 0x10;
        v30 = *(protobuf::Intelligence_KeyValueParameter **)(v5 + 104);
        if (!v30)
        {
          v30 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
          *(_QWORD *)(v6 + 104) = v30;
        }
        v9 = v6 + 48;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(&v40, v9);
        if (!(_DWORD)v41)
        {
LABEL_66:
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v9);
          google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v40);
          goto LABEL_44;
        }
        if (v42)
          v31 = (const protobuf::Intelligence_KeyValueParameter **)(v42 + 8);
        else
          v31 = 0;
        while (2)
        {
          v32 = (int *)*((_QWORD *)v30 + 11);
          if (v32)
          {
            v33 = *((int *)v30 + 20);
            v34 = *v32;
            if ((int)v33 < *v32)
            {
              *((_DWORD *)v30 + 20) = v33 + 1;
              v35 = *(protobuf::Intelligence_KeyValueParameter **)&v32[2 * v33 + 2];
              goto LABEL_60;
            }
            if (v34 == *((_DWORD *)v30 + 21))
            {
LABEL_58:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v30 + 18, v34 + 1);
              v32 = (int *)*((_QWORD *)v30 + 11);
              v34 = *v32;
            }
            *v32 = v34 + 1;
            v35 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v30 + 9));
            v36 = *((_QWORD *)v30 + 11);
            v37 = *((int *)v30 + 20);
            *((_DWORD *)v30 + 20) = v37 + 1;
            *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
LABEL_60:
            v38 = *v31;
            if (*v31 != v35)
            {
              protobuf::Intelligence_KeyValueParameter::Clear(v35);
              protobuf::Intelligence_KeyValueParameter::MergeFrom(v35, v38);
            }
            ++v31;
            if (v42)
              v39 = v42 + 8;
            else
              v39 = 0;
            if (v31 == (const protobuf::Intelligence_KeyValueParameter **)(v39 + 8 * (int)v41))
              goto LABEL_66;
            continue;
          }
          break;
        }
        v34 = *((_DWORD *)v30 + 21);
        goto LABEL_58;
      }
LABEL_44:
      if (++v3 >= *((_DWORD *)this + 98))
        return;
    }
    *(_DWORD *)(v5 + 16) = v7 | 0x10;
    v24 = *(protobuf::Intelligence_KeyValueParameter **)(v5 + 104);
    if (!v24)
    {
      v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
      *(_QWORD *)(v6 + 104) = v24;
    }
    v25 = *(_QWORD *)(v6 + 112);
    *((_DWORD *)v24 + 4) |= 0x80u;
    *((_QWORD *)v24 + 22) = v25;
    *(_QWORD *)(v6 + 112) = 0;
    v26 = *(_DWORD *)(v6 + 16) & 0xFFFFFFDF;
    goto LABEL_43;
  }
}

void sub_22AF05024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_0_6(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const std::string *v16;
  std::string *v17;
  char **v18;
  int v19;
  int v20;
  protobuf::Intelligence_Start *v21;
  const std::string *v22;
  std::string **v23;
  std::string *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _BOOL4 v32;
  protobuf::Intelligence_Start *v33;
  uint64_t v34;
  __int128 **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  int *v41;
  uint64_t v42;
  int v43;
  std::string *v44;
  google::protobuf::internal::ArenaImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t *v50;
  int v51;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  int *v70;
  uint64_t v71;
  int v72;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  BOOL v87;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  _BYTE *v101;
  std::string *v102;
  unint64_t v103;
  int v104;
  std::string *v105;
  std::string *v106;
  std::string *v107;
  std::string *v108;
  uint64_t v109;
  std::string *v110;
  std::string *v111;
  std::string *v112;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  protobuf::Intelligence_Start *v119;
  const std::string *v120;
  std::string *v121;
  std::string **v122;
  uint64_t *v123;
  std::string *v124;
  protobuf::Intelligence_Start *v125;
  std::string *v126;
  google::protobuf::internal::RepeatedPtrFieldBase *v127;
  char *v128;
  char v129;
  std::string __p[2];

  if (*((int *)this + 110) < 1)
    goto LABEL_224;
  v3 = 0;
  v4 = (siri::intelligence *)((char *)this + 432);
  v127 = (siri::intelligence *)((char *)this + 432);
  v128 = (char *)this + 168;
  do
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)v4, v3);
    if ((*(_BYTE *)(v5 + 16) & 2) == 0 || *((int *)this + 44) < 1)
      goto LABEL_36;
    v6 = 0;
    while (1)
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)v128, v6);
      v8 = *(unsigned __int8 **)(v7 + 56);
      v9 = *(_QWORD *)(v5 + 152);
      v10 = v8[23];
      if ((v10 & 0x80u) == 0)
        v11 = v8[23];
      else
        v11 = *((_QWORD *)v8 + 1);
      v12 = *(unsigned __int8 *)(v9 + 23);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v9 + 8);
      if (v11 != v12)
        goto LABEL_21;
      v14 = v7;
      v15 = v13 >= 0 ? *(unsigned __int8 **)(v5 + 152) : *(unsigned __int8 **)v9;
      if ((v10 & 0x80) != 0)
        break;
      if (!v8[23])
        goto LABEL_23;
      while (*v8 == *v15)
      {
        ++v8;
        ++v15;
        if (!--v10)
          goto LABEL_23;
      }
LABEL_21:
      if (++v6 >= *((_DWORD *)this + 44))
        goto LABEL_36;
    }
    if (memcmp(*(const void **)v8, v15, *((_QWORD *)v8 + 1)))
      goto LABEL_21;
LABEL_23:
    v16 = *(const std::string **)(v5 + 144);
    v17 = *(std::string **)(v14 + 72);
    *(_DWORD *)(v14 + 16) |= 8u;
    if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v14 + 72), (uint64_t)v16);
    else
      std::string::operator=(v17, v16);
    v18 = *(char ***)(v14 + 64);
    std::string::basic_string[abi:ne180100]<0>(__p, "default=yes");
    v19 = siri::intelligence::StringContains(v18, (char *)__p);
    v20 = v19;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_35;
    }
    else if (!v19)
    {
      goto LABEL_35;
    }
    *((_DWORD *)this + 4) |= 2u;
    v21 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
    if (v21
      || (v21 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0),
          (*((_QWORD *)this + 67) = v21) != 0))
    {
      v22 = *(const std::string **)(v14 + 56);
      v25 = (uint64_t *)*((_QWORD *)v21 + 6);
      v23 = (std::string **)((char *)v21 + 48);
      v24 = (std::string *)v25;
      *((_DWORD *)v23 - 8) |= 1u;
      if (v25 == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v23, (uint64_t)v22);
      else
        std::string::operator=(v24, v22);
    }
LABEL_35:
    *(_BYTE *)(v5 + 168) = 0;
    *(_DWORD *)(v5 + 16) &= ~8u;
LABEL_36:
    if (*(int *)(v5 + 80) >= 1)
    {
      v26 = 0;
      while (1)
      {
        v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(v5 + 72, v26);
        siri::intelligence::StringToUpper(*(_QWORD *)(v27 + 48), __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          break;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 18)
        {
          v28 = __p[0].__r_.__value_.__r.__words[0] == 0x4F435F5452415453
             && __p[0].__r_.__value_.__l.__size_ == 0x495441535245564ELL;
          if (v28 && LOWORD(__p[0].__r_.__value_.__r.__words[2]) == 20047)
            goto LABEL_64;
        }
LABEL_62:
        if ((int)++v26 >= *(_DWORD *)(v5 + 80))
          goto LABEL_157;
      }
      if (__p[0].__r_.__value_.__l.__size_ != 18)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_62;
      }
      v32 = *(_QWORD *)__p[0].__r_.__value_.__l.__data_ != 0x4F435F5452415453
         || *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 8) != 0x495441535245564ELL
         || *(_WORD *)(__p[0].__r_.__value_.__r.__words[0] + 16) != 20047;
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v32)
        goto LABEL_62;
LABEL_64:
      if (*(int *)(v27 + 32) < 1)
        goto LABEL_143;
      if ((*(_BYTE *)(v5 + 16) & 2) == 0)
        goto LABEL_66;
      v48 = *(uint64_t **)(v5 + 152);
      v49 = *((char *)v48 + 23);
      if (v49 < 0)
      {
        if (v48[1] != 10)
          goto LABEL_101;
        v48 = (uint64_t *)*v48;
      }
      else if (v49 != 10)
      {
        goto LABEL_101;
      }
      v50 = (uint64_t *)*v48;
      v51 = *((unsigned __int16 *)v48 + 4);
      if (v50 != (uint64_t *)0x6C61626F6C675F5FLL || v51 != 24415)
      {
LABEL_101:
        if (*((int *)this + 44) >= 1)
        {
          v53 = 0;
          while (1)
          {
            v54 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)v128, v53);
            v55 = *(unsigned __int8 **)(v54 + 56);
            v56 = *(unsigned __int8 ***)(v5 + 152);
            v57 = v55[23];
            if ((v57 & 0x80u) == 0)
              v58 = (unsigned __int8 *)v55[23];
            else
              v58 = (unsigned __int8 *)*((_QWORD *)v55 + 1);
            v59 = (unsigned __int8 *)*((unsigned __int8 *)v56 + 23);
            v60 = (char)v59;
            if ((char)v59 < 0)
              v59 = v56[1];
            if (v58 == v59)
            {
              v61 = v54;
              if (v60 >= 0)
                v62 = *(unsigned __int8 **)(v5 + 152);
              else
                v62 = *v56;
              if ((v57 & 0x80) == 0)
              {
                if (!v55[23])
                  break;
                while (*v55 == *v62)
                {
                  ++v55;
                  ++v62;
                  if (!--v57)
                    goto LABEL_120;
                }
                goto LABEL_118;
              }
              if (!memcmp(*(const void **)v55, v62, *((_QWORD *)v55 + 1)))
                break;
            }
LABEL_118:
            if (++v53 >= *((_DWORD *)this + 44))
              goto LABEL_143;
          }
LABEL_120:
          v63 = *(_QWORD *)(v27 + 40);
          v64 = v63 ? v63 + 8 : 0;
          v65 = *(int *)(v27 + 32);
          if ((_DWORD)v65)
          {
            v66 = (uint64_t *)(v61 + 24);
            v67 = 8 * v65;
            while (1)
            {
              v68 = *(__int128 **)v64;
              if (*(char *)(*(_QWORD *)v64 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
              }
              else
              {
                v69 = *v68;
                __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v69;
              }
              v70 = *(int **)(v61 + 40);
              if (!v70)
                break;
              v71 = *(int *)(v61 + 32);
              v72 = *v70;
              if ((int)v71 >= *v70)
              {
                if (v72 == *(_DWORD *)(v61 + 36))
                {
LABEL_133:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v61 + 24), v72 + 1);
                  v70 = *(int **)(v61 + 40);
                  v72 = *v70;
                }
                *v70 = v72 + 1;
                v74 = (google::protobuf::internal::ArenaImpl *)*v66;
                if (*v66)
                {
                  if (*((_QWORD *)v74 + 14))
                  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v74, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                }
                else
                {
                  AlignedAndAddCleanup = (std::string *)operator new();
                }
                AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                v75 = *(_QWORD *)(v61 + 40);
                v76 = *(int *)(v61 + 32);
                *(_DWORD *)(v61 + 32) = v76 + 1;
                *(_QWORD *)(v75 + 8 * v76 + 8) = AlignedAndAddCleanup;
                goto LABEL_140;
              }
              *(_DWORD *)(v61 + 32) = v71 + 1;
              AlignedAndAddCleanup = *(std::string **)&v70[2 * v71 + 2];
LABEL_140:
              std::string::operator=(AlignedAndAddCleanup, __p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              v64 += 8;
              v67 -= 8;
              if (!v67)
                goto LABEL_143;
            }
            v72 = *(_DWORD *)(v61 + 36);
            goto LABEL_133;
          }
        }
        goto LABEL_143;
      }
LABEL_66:
      if ((*((_DWORD *)this + 4) |= 2u, (v33 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67)) == 0)
        && (v33 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0),
            (*((_QWORD *)this + 67) = v33) == 0)
        || ((v34 = *(_QWORD *)(v27 + 40)) != 0 ? (v35 = (__int128 **)(v34 + 8)) : (v35 = 0),
            v36 = *(int *)(v27 + 32),
            !(_DWORD)v36))
      {
LABEL_143:
        if (*(_DWORD *)(v5 + 80) < (int)v26 + 1)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2043);
          v77 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start + num) <= (size()): ");
          google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v77->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
        }
        if ((int)v26 >= *(_DWORD *)(v5 + 80))
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1568);
          v78 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v78->__r_.__value_.__l.__data_);
          v4 = v127;
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
        }
        else
        {
          v4 = v127;
        }
        v79 = *(_QWORD *)(*(_QWORD *)(v5 + 88) + 8 * v26 + 8);
        if (v79)
          v80 = *(_QWORD *)(v5 + 72) == 0;
        else
          v80 = 0;
        if (v80)
          (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
        if (*(_DWORD *)(v5 + 80) < (int)v26 + 1)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2065);
          v81 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start + num) <= (size()): ");
          google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v81->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
        }
        google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(v5 + 72, v26, 1);
        goto LABEL_157;
      }
      v37 = (uint64_t *)((char *)v33 + 24);
      v38 = 8 * v36;
      while (1)
      {
        v39 = *v35;
        if (*((char *)*v35 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
        }
        else
        {
          v40 = *v39;
          __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
        }
        v41 = (int *)*((_QWORD *)v33 + 5);
        if (!v41)
          break;
        v42 = *((int *)v33 + 8);
        v43 = *v41;
        if ((int)v42 >= *v41)
        {
          if (v43 == *((_DWORD *)v33 + 9))
          {
LABEL_81:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v33 + 6, v43 + 1);
            v41 = (int *)*((_QWORD *)v33 + 5);
            v43 = *v41;
          }
          *v41 = v43 + 1;
          v45 = (google::protobuf::internal::ArenaImpl *)*v37;
          if (*v37)
          {
            if (*((_QWORD *)v45 + 14))
            v44 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v45, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            v44 = (std::string *)operator new();
          }
          v44->__r_.__value_.__r.__words[0] = 0;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v46 = *((_QWORD *)v33 + 5);
          v47 = *((int *)v33 + 8);
          *((_DWORD *)v33 + 8) = v47 + 1;
          *(_QWORD *)(v46 + 8 * v47 + 8) = v44;
          goto LABEL_88;
        }
        *((_DWORD *)v33 + 8) = v42 + 1;
        v44 = *(std::string **)&v41[2 * v42 + 2];
LABEL_88:
        std::string::operator=(v44, __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        ++v35;
        v38 -= 8;
        if (!v38)
          goto LABEL_143;
      }
      v43 = *((_DWORD *)v33 + 9);
      goto LABEL_81;
    }
LABEL_157:
    v82 = *(_DWORD *)(v5 + 16);
    if ((v82 & 2) != 0)
    {
      v83 = *(_QWORD *)(v5 + 152);
      if ((uint64_t *)v83 != &google::protobuf::internal::fixed_address_empty_string)
      {
        if (*(char *)(v83 + 23) < 0)
        {
          **(_BYTE **)v83 = 0;
          *(_QWORD *)(v83 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v83 = 0;
          *(_BYTE *)(v83 + 23) = 0;
        }
      }
      v82 = *(_DWORD *)(v5 + 16) & 0xFFFFFFFD;
      *(_DWORD *)(v5 + 16) = v82;
    }
    if (!*(_BYTE *)(v5 + 168))
    {
      *(_BYTE *)(v5 + 168) = 0;
      *(_DWORD *)(v5 + 16) = v82 & 0xFFFFFFF7;
    }
    ++v3;
    v84 = *((unsigned int *)this + 110);
  }
  while (v3 < (int)v84);
  if ((int)v84 >= 1)
  {
    while (1)
    {
      v85 = v84 - 1;
      v86 = (_DWORD *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)v4, (int)v84 - 1);
      v87 = !v86[8] && v86[14] == 0;
      if (v87 && v86[20] == 0)
        break;
LABEL_222:
      if (v84-- <= 1)
        goto LABEL_224;
    }
    if (*((int *)this + 44) >= 1)
    {
      v89 = v86;
      v90 = 0;
      while (1)
      {
        v91 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)v128, v90);
        v92 = *(_QWORD *)(v91 + 72);
        v93 = *((_QWORD *)v89 + 18);
        v94 = *(unsigned __int8 *)(v92 + 23);
        if ((v94 & 0x80u) == 0)
          v95 = *(unsigned __int8 *)(v92 + 23);
        else
          v95 = *(_QWORD *)(v92 + 8);
        v96 = *(unsigned __int8 *)(v93 + 23);
        v97 = (char)v96;
        if ((v96 & 0x80u) != 0)
          v96 = *(_QWORD *)(v93 + 8);
        if (v95 != v96)
          goto LABEL_197;
        v98 = v91;
        v99 = v97 >= 0 ? (unsigned __int8 *)*((_QWORD *)v89 + 18) : *(unsigned __int8 **)v93;
        if ((v94 & 0x80) == 0)
          break;
        v101 = *(_BYTE **)v92;
        if (!memcmp(*(const void **)v92, v99, *(_QWORD *)(v92 + 8)))
        {
          if ((uint64_t *)v92 != &google::protobuf::internal::fixed_address_empty_string)
          {
            *v101 = 0;
            *(_QWORD *)(v92 + 8) = 0;
          }
LABEL_196:
          *(_DWORD *)(v98 + 16) &= ~8u;
        }
LABEL_197:
        if (++v90 >= *((_DWORD *)this + 44))
          goto LABEL_198;
      }
      if (*(_BYTE *)(v92 + 23))
      {
        v100 = 0;
        while (*(unsigned __int8 *)(v92 + v100) == v99[v100])
        {
          if (v94 == ++v100)
            goto LABEL_191;
        }
        goto LABEL_197;
      }
LABEL_191:
      if ((uint64_t *)v92 != &google::protobuf::internal::fixed_address_empty_string)
      {
        *(_BYTE *)v92 = 0;
        *(_BYTE *)(v92 + 23) = 0;
      }
      goto LABEL_196;
    }
LABEL_198:
    if ((v85 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2041);
      v102 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v102->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    v103 = (unint64_t)(8 * v85 + 8) >> 3;
    v104 = v103 - v85;
    if ((_DWORD)v103 - (_DWORD)v85 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2042);
      v105 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (num) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v105->__r_.__value_.__l.__data_);
      v4 = v127;
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    else
    {
      v4 = v127;
    }
    if (*((_DWORD *)this + 110) < (int)v103)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2043);
      v106 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start + num) <= (size()): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v106->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    if (v104 >= 1)
    {
      if ((v85 & 0x80000000) != 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1567);
        v107 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) >= (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v107->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      if ((int)v85 >= (uint64_t)*((int *)this + 110))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1568);
        v108 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v108->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      v109 = *(_QWORD *)(*((_QWORD *)this + 56) + 8 * (int)v85 + 8);
      v4 = v127;
      if (v109 && !*((_QWORD *)this + 54))
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
    }
    if ((v85 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2063);
      v110 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v110->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      if (v104 < 0)
        goto LABEL_217;
    }
    else if (v104 < 0)
    {
LABEL_217:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2064);
      v111 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (num) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v111->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    if (*((_DWORD *)this + 110) < (int)v103)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2065);
      v112 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (start + num) <= (size()): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v112->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    if (v104 > 0)
      google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)v4, v84 - 1, v104);
    goto LABEL_222;
  }
LABEL_224:
  if (*((int *)this + 44) >= 1)
  {
    v114 = 0;
    do
    {
      v115 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, v114);
      v116 = *(_QWORD *)(v115 + 64);
      if ((uint64_t *)v116 != &google::protobuf::internal::fixed_address_empty_string)
      {
        if (*(char *)(v116 + 23) < 0)
        {
          **(_BYTE **)v116 = 0;
          *(_QWORD *)(v116 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v116 = 0;
          *(_BYTE *)(v116 + 23) = 0;
        }
      }
      *(_DWORD *)(v115 + 16) &= ~4u;
      ++v114;
      v117 = *((_DWORD *)this + 44);
    }
    while (v114 < v117);
    if (v117 > 0)
    {
      v118 = *((_DWORD *)this + 4);
      if ((v118 & 2) != 0)
      {
        if (!*((_QWORD *)this + 67))
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22067);
          v124 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || start_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v124->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *((_DWORD *)this + 4) = v118 | 2;
        v119 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
        if (v119)
          goto LABEL_234;
        v125 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0);
        *((_QWORD *)this + 67) = v125;
        if (v125)
        {
          v119 = v125;
          if (*((int *)this + 44) <= 0)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
            v126 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v129, (const char **)&v126->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
LABEL_234:
          v120 = *(const std::string **)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) + 56);
          v123 = (uint64_t *)*((_QWORD *)v119 + 6);
          v122 = (std::string **)((char *)v119 + 48);
          v121 = (std::string *)v123;
          *((_DWORD *)v122 - 8) |= 1u;
          if (v123 == &google::protobuf::internal::fixed_address_empty_string)
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v122, (uint64_t)v120);
          else
            std::string::operator=(v121, v120);
        }
      }
    }
  }
}

void sub_22AF05DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_0_7(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::string **v7;
  std::string *v8;
  uint64_t *v9;
  const std::string *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::string **v16;
  std::string *v17;
  uint64_t *v18;
  const std::string *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  std::string **v25;
  std::string *v26;
  uint64_t *v27;
  const std::string *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::string **v34;
  std::string *v35;
  uint64_t *v36;
  const std::string *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  std::string **v43;
  std::string *v44;
  uint64_t *v45;
  const std::string *v46;
  uint64_t v47;

  if (*((int *)this + 14) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, v3);
      v5 = *(_DWORD *)(v4 + 16);
      if ((v5 & 0x20) != 0)
      {
        v6 = v4;
        v9 = *(uint64_t **)(v4 + 216);
        v7 = (std::string **)(v4 + 216);
        v8 = (std::string *)v9;
        v10 = *(v7 - 7);
        *((_DWORD *)v7 - 50) = v5 | 0x1000;
        if (v9 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v10);
        else
          std::string::operator=(v8, v10);
        v11 = *(_QWORD *)(v6 + 160);
        if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v11 + 23) < 0)
          {
            **(_BYTE **)v11 = 0;
            *(_QWORD *)(v11 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v11 = 0;
            *(_BYTE *)(v11 + 23) = 0;
          }
        }
        *(_DWORD *)(v6 + 16) &= ~0x20u;
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, v12);
      v14 = *(_DWORD *)(v13 + 16);
      if ((v14 & 0x20) != 0)
      {
        v15 = v13;
        v18 = *(uint64_t **)(v13 + 144);
        v16 = (std::string **)(v13 + 144);
        v17 = (std::string *)v18;
        v19 = *(v16 - 4);
        *((_DWORD *)v16 - 32) = v14 | 0x200;
        if (v18 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v19);
        else
          std::string::operator=(v17, v19);
        v20 = *(_QWORD *)(v15 + 112);
        if ((uint64_t *)v20 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v20 + 23) < 0)
          {
            **(_BYTE **)v20 = 0;
            *(_QWORD *)(v20 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v20 = 0;
            *(_BYTE *)(v20 + 23) = 0;
          }
        }
        *(_DWORD *)(v15 + 16) &= ~0x20u;
      }
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 20));
  }
  if (*((int *)this + 26) >= 1)
  {
    v21 = 0;
    do
    {
      v22 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((uint64_t)this + 96, v21);
      v23 = *(_DWORD *)(v22 + 16);
      if ((v23 & 0x20) != 0)
      {
        v24 = v22;
        v27 = *(uint64_t **)(v22 + 128);
        v25 = (std::string **)(v22 + 128);
        v26 = (std::string *)v27;
        v28 = *(v25 - 5);
        *((_DWORD *)v25 - 28) = v23 | 0x400;
        if (v27 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v25, (uint64_t)v28);
        else
          std::string::operator=(v26, v28);
        v29 = *(_QWORD *)(v24 + 88);
        if ((uint64_t *)v29 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v29 + 23) < 0)
          {
            **(_BYTE **)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v29 = 0;
            *(_BYTE *)(v29 + 23) = 0;
          }
        }
        *(_DWORD *)(v24 + 16) &= ~0x20u;
      }
      ++v21;
    }
    while (v21 < *((_DWORD *)this + 26));
  }
  if (*((int *)this + 104) >= 1)
  {
    v30 = 0;
    do
    {
      v31 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408, v30);
      v32 = *(_DWORD *)(v31 + 16);
      if ((v32 & 0x20) != 0)
      {
        v33 = v31;
        v36 = *(uint64_t **)(v31 + 112);
        v34 = (std::string **)(v31 + 112);
        v35 = (std::string *)v36;
        v37 = *(v34 - 3);
        *((_DWORD *)v34 - 24) = v32 | 0x100;
        if (v36 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v34, (uint64_t)v37);
        else
          std::string::operator=(v35, v37);
        v38 = *(_QWORD *)(v33 + 88);
        if ((uint64_t *)v38 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v38 + 23) < 0)
          {
            **(_BYTE **)v38 = 0;
            *(_QWORD *)(v38 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v38 = 0;
            *(_BYTE *)(v38 + 23) = 0;
          }
        }
        *(_DWORD *)(v33 + 16) &= ~0x20u;
      }
      ++v30;
    }
    while (v30 < *((_DWORD *)this + 104));
  }
  if (*((int *)this + 44) >= 1)
  {
    v39 = 0;
    do
    {
      v40 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, v39);
      v41 = *(_DWORD *)(v40 + 16);
      if ((v41 & 8) != 0)
      {
        v42 = v40;
        v45 = *(uint64_t **)(v40 + 80);
        v43 = (std::string **)(v40 + 80);
        v44 = (std::string *)v45;
        v46 = *(v43 - 1);
        *((_DWORD *)v43 - 16) = v41 | 0x10;
        if (v45 == &google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v43, (uint64_t)v46);
        else
          std::string::operator=(v44, v46);
        v47 = *(_QWORD *)(v42 + 72);
        if ((uint64_t *)v47 != &google::protobuf::internal::fixed_address_empty_string)
        {
          if (*(char *)(v47 + 23) < 0)
          {
            **(_BYTE **)v47 = 0;
            *(_QWORD *)(v47 + 8) = 0;
          }
          else
          {
            *(_BYTE *)v47 = 0;
            *(_BYTE *)(v47 + 23) = 0;
          }
        }
        *(_DWORD *)(v42 + 16) &= ~8u;
      }
      ++v39;
    }
    while (v39 < *((_DWORD *)this + 44));
  }
}

void siri::intelligence::UpdateTo_1_4_0(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  char *v4;
  const char *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  char v9;
  std::string *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  int v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  std::string *v39;
  std::string::size_type v42;
  int v44;
  BOOL v45;
  int v46;
  int v53;
  BOOL v54;
  int v55;
  std::string::size_type v61;
  uint64_t v62;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  protobuf::Intelligence_KeyValueParameter *v68;
  uint64_t v69;
  uint64_t v70;
  const protobuf::Intelligence_KeyValueParameter *v71;
  _BYTE v72[72];
  uint64_t v73;
  int v74;
  std::string v75;
  char v76;
  __n128 v77;
  char v78;

  if (*((int *)this + 20) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 72;
    while (1)
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)v4, v3);
      v7 = *(__int128 **)(v6 + 128);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v8 = *v7;
        v75.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v8;
      }
      v9 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v10 = &v75;
        switch(*((_BYTE *)&v75.__r_.__value_.__s + 23))
        {
          case 7:
            v11 = *(_DWORD *)((char *)v75.__r_.__value_.__r.__words + 3);
            v12 = LODWORD(v75.__r_.__value_.__l.__data_) == 1114664816;
            v13 = 1801675074;
            goto LABEL_21;
          case 8:
            if (v75.__r_.__value_.__r.__words[0] != 0x6B63614268737570
              && v75.__r_.__value_.__r.__words[0] != 0x7961727241746573
              && v75.__r_.__value_.__r.__words[0] != 0x7974706D45746573)
            {
              goto LABEL_199;
            }
            goto LABEL_78;
          case 9:
            if (v75.__r_.__value_.__r.__words[0] == 0x6E69727453746573 && v75.__r_.__value_.__s.__data_[8] == 103)
              goto LABEL_78;
            v11 = v75.__r_.__value_.__s.__data_[8];
            v12 = v75.__r_.__value_.__r.__words[0] == 0x65626D754E746573;
            v13 = 114;
LABEL_21:
            if (!v12 || v11 != v13)
              goto LABEL_199;
            goto LABEL_78;
          case 0xA:
            v11 = LOWORD(v75.__r_.__value_.__r.__words[1]);
            v12 = v75.__r_.__value_.__r.__words[0] == 0x656C6F6F42746573;
            v13 = 28257;
            goto LABEL_21;
          case 0xC:
            v19 = LODWORD(v75.__r_.__value_.__r.__words[1]);
            v20 = v75.__r_.__value_.__r.__words[0] == 0x6665646E55746573;
            v21 = 1684369001;
            goto LABEL_29;
          case 0xD:
            v19 = *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 5);
            v20 = v75.__r_.__value_.__r.__words[0] == 0x6974636944746573;
            v21 = 0x7972616E6F697463;
LABEL_29:
            if (!v20 || v19 != v21)
              goto LABEL_199;
            goto LABEL_78;
          case 0xE:
            goto LABEL_63;
          case 0x16:
            if (v75.__r_.__value_.__r.__words[0] != 0x706E497972746572
              || v75.__r_.__value_.__l.__size_ != 0x6552726F46737475
              || *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 6) != 0x65736E6F70736552)
            {
              goto LABEL_199;
            }
            goto LABEL_78;
          default:
            goto LABEL_199;
        }
      }
      switch(v75.__r_.__value_.__l.__size_)
      {
        case 7uLL:
          v14 = *(_DWORD *)(v75.__r_.__value_.__r.__words[0] + 3);
          v15 = *(_DWORD *)v75.__r_.__value_.__l.__data_ == 1114664816;
          v16 = 1801675074;
          goto LABEL_54;
        case 8uLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x7961727241746573
            || *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6B63614268737570
            || *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x7974706D45746573)
          {
            goto LABEL_78;
          }
          goto LABEL_198;
        case 9uLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6E69727453746573
            && *(_BYTE *)(v75.__r_.__value_.__r.__words[0] + 8) == 103)
          {
            goto LABEL_78;
          }
          v14 = *(unsigned __int8 *)(v75.__r_.__value_.__r.__words[0] + 8);
          v15 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x65626D754E746573;
          v16 = 114;
LABEL_54:
          if (!v15 || v14 != v16)
            goto LABEL_198;
          goto LABEL_78;
        case 0xAuLL:
          v14 = *(unsigned __int16 *)(v75.__r_.__value_.__r.__words[0] + 8);
          v15 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x656C6F6F42746573;
          v16 = 28257;
          goto LABEL_54;
        case 0xCuLL:
          v27 = *(unsigned int *)(v75.__r_.__value_.__r.__words[0] + 8);
          v28 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6665646E55746573;
          v29 = 1684369001;
          goto LABEL_73;
        case 0xDuLL:
          v27 = *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 5);
          v28 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6974636944746573;
          v29 = 0x7972616E6F697463;
          goto LABEL_73;
        case 0xEuLL:
          v10 = (std::string *)v75.__r_.__value_.__r.__words[0];
LABEL_63:
          v30 = v10->__r_.__value_.__r.__words[0];
          v31 = *(std::string::size_type *)((char *)v10->__r_.__value_.__r.__words + 6);
          if (v30 != 0x6341686374697773 || v31 != 0x7974697669746341)
            goto LABEL_197;
          goto LABEL_78;
        case 0x16uLL:
          v27 = *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 14);
          v28 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x706E497972746572
             && *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 8) == 0x6552726F46737475;
          v29 = 0x65736E6F70736552;
LABEL_73:
          if (!v28 || v27 != v29)
            goto LABEL_198;
LABEL_78:
          v34 = *(_DWORD *)(v6 + 32);
          if (!v34)
            goto LABEL_197;
          if (v34 >= 2)
          {
            v35 = &v75;
            if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v35 = (std::string *)v75.__r_.__value_.__r.__words[0];
            siri::intelligence::Log::Error((siri::intelligence::Log *)"Found more than 1 array parameter for behavior '%s' while upgrading to v1.0.8", v5, v35);
          }
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)v72);
          if (*(int *)(v6 + 32) <= 0)
          {
            v36 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v77, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
            v37 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v76, (const char **)&v37->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v77);
          }
          v38 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
          if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            v39 = &v75;
            switch(*((_BYTE *)&v75.__r_.__value_.__s + 23))
            {
              case 7:
                if (LODWORD(v75.__r_.__value_.__l.__data_) == 1114664816
                  && *(_DWORD *)((char *)v75.__r_.__value_.__r.__words + 3) == 1801675074)
                {
                  goto LABEL_99;
                }
                goto LABEL_184;
              case 8:
                v42 = v75.__r_.__value_.__r.__words[0];
                if (v75.__r_.__value_.__r.__words[0] == 0x6B63614268737570
                  || v75.__r_.__value_.__r.__words[0] == 0x7961727241746573)
                {
                  goto LABEL_166;
                }
                goto LABEL_141;
              case 9:
                if (v75.__r_.__value_.__r.__words[0] == 0x6E69727453746573 && v75.__r_.__value_.__s.__data_[8] == 103)
                  goto LABEL_166;
                v44 = v75.__r_.__value_.__s.__data_[8];
                v45 = v75.__r_.__value_.__r.__words[0] == 0x65626D754E746573;
                v46 = 114;
                goto LABEL_111;
              case 0xA:
                v44 = LOWORD(v75.__r_.__value_.__r.__words[1]);
                v45 = v75.__r_.__value_.__r.__words[0] == 0x656C6F6F42746573;
                v46 = 28257;
LABEL_111:
                if (!v45 || v44 != v46)
                  goto LABEL_184;
                goto LABEL_166;
              case 0xC:
                if (v75.__r_.__value_.__r.__words[0] == 0x6665646E55746573
                  && LODWORD(v75.__r_.__value_.__r.__words[1]) == 1684369001)
                {
                  goto LABEL_142;
                }
                goto LABEL_184;
              case 0xD:
                if (v75.__r_.__value_.__r.__words[0] == 0x6974636944746573
                  && *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 5) == 0x7972616E6F697463)
                {
                  goto LABEL_166;
                }
                goto LABEL_184;
              case 0xE:
                goto LABEL_180;
              case 0x16:
                if (v75.__r_.__value_.__r.__words[0] == 0x706E497972746572
                  && v75.__r_.__value_.__l.__size_ == 0x6552726F46737475
                  && *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 6) == 0x65736E6F70736552)
                {
                  goto LABEL_202;
                }
                goto LABEL_184;
              default:
                goto LABEL_184;
            }
          }
          break;
        default:
          goto LABEL_198;
      }
      switch(v75.__r_.__value_.__l.__size_)
      {
        case 7uLL:
          if (*(_DWORD *)v75.__r_.__value_.__l.__data_ == 1114664816
            && *(_DWORD *)(v75.__r_.__value_.__r.__words[0] + 3) == 1801675074)
          {
LABEL_99:
            std::string::basic_string[abi:ne180100]<0>(&v77, "name");
            siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 0, (char *)&v77);
            if (v78 < 0)
              operator delete((void *)v77.n128_u64[0]);
            std::string::basic_string[abi:ne180100]<0>(&v77, "destination");
            siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 1, (char *)&v77);
            goto LABEL_169;
          }
          goto LABEL_184;
        case 8uLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x7961727241746573
            || *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6B63614268737570)
          {
            goto LABEL_166;
          }
          v42 = *(_QWORD *)v75.__r_.__value_.__l.__data_;
LABEL_141:
          if (v42 == 0x7974706D45746573)
            goto LABEL_142;
          goto LABEL_184;
        case 9uLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x6E69727453746573
            && *(_BYTE *)(v75.__r_.__value_.__r.__words[0] + 8) == 103)
          {
            goto LABEL_166;
          }
          v53 = *(unsigned __int8 *)(v75.__r_.__value_.__r.__words[0] + 8);
          v54 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x65626D754E746573;
          v55 = 114;
          goto LABEL_149;
        case 0xAuLL:
          v53 = *(unsigned __int16 *)(v75.__r_.__value_.__r.__words[0] + 8);
          v54 = *(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x656C6F6F42746573;
          v55 = 28257;
LABEL_149:
          if (!v54 || v53 != v55)
            goto LABEL_184;
          goto LABEL_166;
        case 0xCuLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ != 0x6665646E55746573
            || *(_DWORD *)(v75.__r_.__value_.__r.__words[0] + 8) != 1684369001)
          {
            goto LABEL_184;
          }
LABEL_142:
          std::string::basic_string[abi:ne180100]<0>(&v77, "name");
          siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 0, (char *)&v77);
          goto LABEL_169;
        case 0xDuLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ != 0x6974636944746573
            || *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 5) != 0x7972616E6F697463)
          {
            goto LABEL_184;
          }
LABEL_166:
          std::string::basic_string[abi:ne180100]<0>(&v77, "name");
          siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 0, (char *)&v77);
          if (v78 < 0)
            operator delete((void *)v77.n128_u64[0]);
          std::string::basic_string[abi:ne180100]<0>(&v77, "value");
          siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 1, (char *)&v77);
          goto LABEL_169;
        case 0xEuLL:
          goto LABEL_179;
        case 0x16uLL:
          if (*(_QWORD *)v75.__r_.__value_.__l.__data_ == 0x706E497972746572
            && *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 8) == 0x6552726F46737475
            && *(_QWORD *)(v75.__r_.__value_.__r.__words[0] + 14) == 0x65736E6F70736552)
          {
LABEL_202:
            std::string::basic_string[abi:ne180100]<0>(&v77, "responseId");
            siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 0, (char *)&v77);
            if (v78 < 0)
              operator delete((void *)v77.n128_u64[0]);
            *(_DWORD *)(v6 + 16) |= 0x80u;
            std::string::basic_string[abi:ne180100]<0>(&v77, "retryInputs");
            google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(v6 + 128), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &v77);
            goto LABEL_169;
          }
          if (v75.__r_.__value_.__l.__size_ != 14)
            goto LABEL_184;
LABEL_179:
          v39 = (std::string *)v75.__r_.__value_.__r.__words[0];
LABEL_180:
          v61 = v39->__r_.__value_.__r.__words[0];
          v62 = *(std::string::size_type *)((char *)v39->__r_.__value_.__r.__words + 6);
          if (v61 == 0x6341686374697773 && v62 == 0x7974697669746341)
          {
            std::string::basic_string[abi:ne180100]<0>(&v77, "activityId");
            siri::intelligence::ConvertPositionalArgToDictionary((uint64_t)v72, v38, 0, (char *)&v77);
LABEL_169:
            if (v78 < 0)
              operator delete((void *)v77.n128_u64[0]);
          }
LABEL_184:
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v6 + 24);
          if (v74 >= 1)
          {
            v64 = 0;
            while (1)
            {
              v65 = *(int **)(v6 + 40);
              if (!v65)
                break;
              v66 = *(int *)(v6 + 32);
              v67 = *v65;
              if ((int)v66 >= *v65)
              {
                if (v67 == *(_DWORD *)(v6 + 36))
                {
LABEL_191:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v6 + 24), v67 + 1);
                  v65 = *(int **)(v6 + 40);
                  v67 = *v65;
                }
                *v65 = v67 + 1;
                v68 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(v6 + 24));
                v69 = *(_QWORD *)(v6 + 40);
                v70 = *(int *)(v6 + 32);
                *(_DWORD *)(v6 + 32) = v70 + 1;
                *(_QWORD *)(v69 + 8 * v70 + 8) = v68;
                goto LABEL_193;
              }
              *(_DWORD *)(v6 + 32) = v66 + 1;
              v68 = *(protobuf::Intelligence_KeyValueParameter **)&v65[2 * v66 + 2];
LABEL_193:
              v71 = (const protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)&v73, v64);
              if (v71 != v68)
              {
                protobuf::Intelligence_KeyValueParameter::Clear(v68);
                protobuf::Intelligence_KeyValueParameter::MergeFrom(v68, v71);
              }
              if (++v64 >= v74)
                goto LABEL_196;
            }
            v67 = *(_DWORD *)(v6 + 36);
            goto LABEL_191;
          }
LABEL_196:
          protobuf::Intelligence_KeyValueParameter::~Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)v72);
          v9 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
LABEL_197:
          if (v9 < 0)
LABEL_198:
            operator delete(v75.__r_.__value_.__l.__data_);
LABEL_199:
          if (++v3 >= *((_DWORD *)this + 20))
            return;
          break;
        default:
          goto LABEL_184;
      }
    }
  }
}

void sub_22AF06D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 121) < 0)
    operator delete(*(void **)(v3 - 144));
  protobuf::Intelligence_KeyValueParameter::~Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)va);
  if (*(char *)(v3 - 153) < 0)
    operator delete(*(void **)(v3 - 176));
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_4_1(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  siri::intelligence *v6;
  protobuf::Intelligence_KeyValueParameter *v7;
  int v8;
  siri::intelligence *v9;
  protobuf::Intelligence_KeyValueParameter *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  siri::intelligence *v16;
  protobuf::Intelligence_KeyValueParameter *v17;
  int v18;
  uint64_t v19;
  protobuf::Intelligence_KeyValueParameter *v20;
  int v21;
  uint64_t v22;
  siri::intelligence *v23;
  std::string *v24;
  int v25;
  uint64_t v26;
  protobuf::Intelligence_Condition_ConditionEntry *v27;
  int v28;
  uint64_t v29;
  siri::intelligence *v30;
  std::string *v31;
  char v32;
  std::string v33[2];

  if (*((int *)this + 14) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, v3);
      if (*(int *)(v4 + 32) >= 1)
      {
        v5 = 0;
        do
        {
          v6 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v4 + 24, v5);
          siri::intelligence::UpdateFunctionToParameterDictionary(v6, v7);
          ++v5;
        }
        while (v5 < *(_DWORD *)(v4 + 32));
      }
      if (*(int *)(v4 + 56) >= 1)
      {
        v8 = 0;
        do
        {
          v9 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v4 + 48, v8);
          siri::intelligence::UpdateFunctionToParameterDictionary(v9, v10);
          ++v8;
        }
        while (v8 < *(_DWORD *)(v4 + 56));
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, v11);
      if (*(int *)(v12 + 32) >= 1)
      {
        v13 = v12;
        v14 = 0;
        v15 = v12 + 24;
        do
        {
          v16 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v15, v14);
          siri::intelligence::UpdateFunctionToParameterDictionary(v16, v17);
          ++v14;
        }
        while (v14 < *(_DWORD *)(v13 + 32));
      }
      ++v11;
    }
    while (v11 < *((_DWORD *)this + 20));
  }
  if (*((int *)this + 98) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)this + 384, v18);
      v21 = *(_DWORD *)(v19 + 16);
      if ((v21 & 0x10) != 0)
      {
        v22 = v19;
        v23 = *(siri::intelligence **)(v19 + 104);
        if (!v23)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17713);
          v24 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: !value || default_value_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v32, (const char **)&v24->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
          v23 = *(siri::intelligence **)(v22 + 104);
          v21 = *(_DWORD *)(v22 + 16);
        }
        *(_DWORD *)(v22 + 16) = v21 | 0x10;
        siri::intelligence::UpdateFunctionToParameterDictionary(v23, v20);
      }
      ++v18;
    }
    while (v18 < *((_DWORD *)this + 98));
  }
  if (*((int *)this + 68) >= 1)
  {
    v25 = 0;
    do
    {
      v26 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((uint64_t)this + 264, v25);
      v28 = *(_DWORD *)(v26 + 16);
      if ((v28 & 2) != 0)
      {
        v29 = v26;
        v30 = *(siri::intelligence **)(v26 + 32);
        if (!v30)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21745);
          v31 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: !value || condition_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v32, (const char **)&v31->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
          v30 = *(siri::intelligence **)(v29 + 32);
          v28 = *(_DWORD *)(v29 + 16);
        }
        *(_DWORD *)(v29 + 16) = v28 | 2;
        siri::intelligence::UpdateFunctionInCondition(v30, v27);
      }
      ++v25;
    }
    while (v25 < *((_DWORD *)this + 68));
  }
}

void sub_22AF07030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_4_4(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  protobuf::Intelligence_Undo *v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  if (*((int *)this + 20) >= 1)
  {
    v3 = 0;
    v4 = (char *)this + 72;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)v4, v3);
      if ((*(_DWORD *)(v5 + 16) & 0x400) != 0)
      {
        v6 = v5;
        v7 = *(protobuf::Intelligence_Undo **)(v5 + 152);
        if (!v7)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 12067);
          v8 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !value || undo_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v8->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
          v7 = *(protobuf::Intelligence_Undo **)(v6 + 152);
        }
        protobuf::Intelligence_Undo::Clear(v7);
        *(_DWORD *)(v6 + 16) &= ~0x400u;
      }
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 20));
  }
}

void sub_22AF07124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_1_4_5(siri::intelligence *this, protobuf::Intelligence *a2)
{
  siri::intelligence *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  protobuf::Intelligence_InputGroup_Event *v11;
  uint64_t v12;
  uint64_t v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const protobuf::Intelligence_InputGroup_Interjection *v20;
  std::string *v21;
  protobuf::Intelligence_InputGroup_Interjection *v22;
  const protobuf::Intelligence_InputGroup_Interjection *v23;
  int v24;
  uint64_t *v25;
  const std::string *v26;
  int *v27;
  uint64_t v28;
  int v29;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  std::string *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  int v41;
  protobuf::Intelligence_Event *v42;
  uint64_t v43;
  uint64_t v44;
  const std::string *v45;
  std::string *v46;
  const std::string *v47;
  std::string *v48;
  const protobuf::Intelligence_NLParameters *v49;
  std::string *v50;
  protobuf::Intelligence_NLParameters *v51;
  const protobuf::Intelligence_NLParameters *v52;
  int v53;
  int *v54;
  uint64_t v55;
  int v56;
  protobuf::Intelligence_NLParameters *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const protobuf::Intelligence_NLParameters *v61;
  char *v62;
  int v63;
  unsigned int *v65;
  uint64_t v66;
  char v67;
  std::string v68[2];

  v2 = this;
  if (*((int *)this + 110) >= 1)
  {
    v3 = 0;
    v62 = (char *)this + 432;
    while (1)
    {
      v63 = v3;
      v4 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)v62, v3);
      v5 = v4;
      if (*(int *)(v4 + 32) >= 1)
        break;
LABEL_50:
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(v5 + 24);
      v3 = v63 + 1;
      v2 = this;
      if (v63 + 1 >= *((_DWORD *)this + 110))
        goto LABEL_51;
    }
    v6 = 0;
    v65 = (unsigned int *)(v4 + 120);
    v66 = v4 + 24;
    while (1)
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(v66, v6);
      v8 = *(int **)(v5 + 136);
      if (!v8)
        break;
      v9 = *(int *)(v5 + 128);
      v10 = *v8;
      if ((int)v9 < *v8)
      {
        *(_DWORD *)(v5 + 128) = v9 + 1;
        v11 = *(protobuf::Intelligence_InputGroup_Event **)&v8[2 * v9 + 2];
        goto LABEL_12;
      }
      if (v10 == *(_DWORD *)(v5 + 132))
        goto LABEL_10;
LABEL_11:
      *v8 = v10 + 1;
      v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(*(google::protobuf::internal::ArenaImpl **)(v5 + 120));
      v12 = *(_QWORD *)(v5 + 136);
      v13 = *(int *)(v5 + 128);
      *(_DWORD *)(v5 + 128) = v13 + 1;
      *(_QWORD *)(v12 + 8 * v13 + 8) = v11;
LABEL_12:
      if ((*(_BYTE *)(v7 + 16) & 1) != 0)
      {
        v14 = *(const std::string **)(v7 + 72);
        v15 = (std::string *)*((_QWORD *)v11 + 6);
        *((_DWORD *)v11 + 4) |= 1u;
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 6, (uint64_t)v14);
        else
          std::string::operator=(v15, v14);
      }
      if ((*(_BYTE *)(v7 + 16) & 2) != 0)
      {
        v16 = *(const std::string **)(v7 + 80);
        v17 = (std::string *)*((_QWORD *)v11 + 8);
        *((_DWORD *)v11 + 4) |= 4u;
        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 8, (uint64_t)v16);
        else
          std::string::operator=(v17, v16);
      }
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        v18 = *(const std::string **)(v7 + 88);
        v19 = (std::string *)*((_QWORD *)v11 + 7);
        *((_DWORD *)v11 + 4) |= 2u;
        if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 7, (uint64_t)v18);
        else
          std::string::operator=(v19, v18);
      }
      if ((*(_DWORD *)(v7 + 16) & 8) != 0)
      {
        v20 = *(const protobuf::Intelligence_InputGroup_Interjection **)(v7 + 96);
        if (!v20)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v68, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 14620);
          v21 = google::protobuf::internal::LogMessage::operator<<(v68, "CHECK failed: !value || interjection_settings_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v67, (const char **)&v21->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v68[0].__r_.__value_.__l.__data_);
          v20 = *(const protobuf::Intelligence_InputGroup_Interjection **)(v7 + 96);
        }
        *((_DWORD *)v11 + 4) |= 8u;
        v22 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)v11 + 9);
        if (!v22)
        {
          v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
          *((_QWORD *)v11 + 9) = v22;
          v20 = *(const protobuf::Intelligence_InputGroup_Interjection **)(v7 + 96);
        }
        if (v20)
          v23 = v20;
        else
          v23 = (const protobuf::Intelligence_InputGroup_Interjection *)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
        if (v23 != v22)
        {
          protobuf::Intelligence_InputGroup_Interjection::Clear(v22);
          protobuf::Intelligence_InputGroup_Interjection::MergeFrom(v22, v23);
        }
      }
      if (*(int *)(v7 + 56) >= 1)
      {
        v24 = 0;
        v25 = (uint64_t *)((char *)v11 + 24);
        while (1)
        {
          v26 = (const std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v7 + 48, v24);
          v27 = (int *)*((_QWORD *)v11 + 5);
          if (!v27)
            break;
          v28 = *((int *)v11 + 8);
          v29 = *v27;
          if ((int)v28 >= *v27)
          {
            if (v29 == *((_DWORD *)v11 + 9))
            {
LABEL_41:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v11 + 6, v29 + 1);
              v27 = (int *)*((_QWORD *)v11 + 5);
              v29 = *v27;
            }
            *v27 = v29 + 1;
            v31 = (google::protobuf::internal::ArenaImpl *)*v25;
            if (*v25)
            {
              if (*((_QWORD *)v31 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v31, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v32 = *((_QWORD *)v11 + 5);
            v33 = *((int *)v11 + 8);
            *((_DWORD *)v11 + 8) = v33 + 1;
            *(_QWORD *)(v32 + 8 * v33 + 8) = AlignedAndAddCleanup;
            goto LABEL_48;
          }
          *((_DWORD *)v11 + 8) = v28 + 1;
          AlignedAndAddCleanup = *(std::string **)&v27[2 * v28 + 2];
LABEL_48:
          std::string::operator=(AlignedAndAddCleanup, v26);
          if (++v24 >= *(_DWORD *)(v7 + 56))
            goto LABEL_49;
        }
        v29 = *((_DWORD *)v11 + 9);
        goto LABEL_41;
      }
LABEL_49:
      if (++v6 >= *(_DWORD *)(v5 + 32))
        goto LABEL_50;
    }
    v10 = *(_DWORD *)(v5 + 132);
LABEL_10:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v65, v10 + 1);
    v8 = *(int **)(v5 + 136);
    v10 = *v8;
    goto LABEL_11;
  }
LABEL_51:
  LODWORD(v34) = *((_DWORD *)v2 + 62);
  if ((int)v34 >= 1)
  {
    v35 = 0;
    v36 = (unsigned int *)((char *)v2 + 504);
    while (1)
    {
      if (v35 >= (int)v34)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v68, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
        v37 = google::protobuf::internal::LogMessage::operator<<(v68, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v67, (const char **)&v37->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v68[0].__r_.__value_.__l.__data_);
      }
      v38 = *(_QWORD *)(*((_QWORD *)v2 + 32) + 8 * v35 + 8);
      v39 = (int *)*((_QWORD *)v2 + 65);
      if (!v39)
        break;
      v40 = *((int *)v2 + 128);
      v41 = *v39;
      if ((int)v40 < *v39)
      {
        *((_DWORD *)v2 + 128) = v40 + 1;
        v42 = *(protobuf::Intelligence_Event **)&v39[2 * v40 + 2];
        goto LABEL_62;
      }
      if (v41 == *((_DWORD *)v2 + 129))
        goto LABEL_60;
LABEL_61:
      *v39 = v41 + 1;
      v42 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(*((google::protobuf::internal::ArenaImpl **)v2
                                                                                      + 63));
      v43 = *((_QWORD *)v2 + 65);
      v44 = *((int *)v2 + 128);
      *((_DWORD *)v2 + 128) = v44 + 1;
      *(_QWORD *)(v43 + 8 * v44 + 8) = v42;
LABEL_62:
      if ((*(_BYTE *)(v38 + 16) & 1) != 0)
      {
        v45 = *(const std::string **)(v38 + 48);
        v46 = (std::string *)*((_QWORD *)v42 + 15);
        *((_DWORD *)v42 + 4) |= 1u;
        if (v46 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v42 + 15, (uint64_t)v45);
        else
          std::string::operator=(v46, v45);
      }
      if ((*(_BYTE *)(v38 + 16) & 2) != 0)
      {
        v47 = *(const std::string **)(v38 + 56);
        v48 = (std::string *)*((_QWORD *)v42 + 16);
        *((_DWORD *)v42 + 4) |= 2u;
        if (v48 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v42 + 16, (uint64_t)v47);
        else
          std::string::operator=(v48, v47);
      }
      if ((*(_DWORD *)(v38 + 16) & 4) != 0)
      {
        v49 = *(const protobuf::Intelligence_NLParameters **)(v38 + 64);
        if (!v49)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v68, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 19106);
          v50 = google::protobuf::internal::LogMessage::operator<<(v68, "CHECK failed: !value || nl_producer_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v67, (const char **)&v50->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v68[0].__r_.__value_.__l.__data_);
          v49 = *(const protobuf::Intelligence_NLParameters **)(v38 + 64);
        }
        *((_DWORD *)v42 + 4) |= 0x20u;
        v51 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)v42 + 20);
        if (!v51)
        {
          v51 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
          *((_QWORD *)v42 + 20) = v51;
          v49 = *(const protobuf::Intelligence_NLParameters **)(v38 + 64);
        }
        if (v49)
          v52 = v49;
        else
          v52 = (const protobuf::Intelligence_NLParameters *)&protobuf::_Intelligence_NLParameters_default_instance_;
        if (v52 != v51)
        {
          protobuf::Intelligence_NLParameters::Clear(v51);
          protobuf::Intelligence_NLParameters::MergeFrom(v51, v52);
        }
      }
      if (*(int *)(v38 + 32) >= 1)
      {
        v53 = 0;
        while (1)
        {
          v54 = (int *)*((_QWORD *)v42 + 5);
          if (!v54)
            break;
          v55 = *((int *)v42 + 8);
          v56 = *v54;
          if ((int)v55 >= *v54)
          {
            if (v56 == *((_DWORD *)v42 + 9))
            {
LABEL_87:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v42 + 6, v56 + 1);
              v54 = (int *)*((_QWORD *)v42 + 5);
              v56 = *v54;
            }
            *v54 = v56 + 1;
            v57 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(*((google::protobuf::internal::ArenaImpl **)v42 + 3));
            v58 = *((_QWORD *)v42 + 5);
            v59 = *((int *)v42 + 8);
            *((_DWORD *)v42 + 8) = v59 + 1;
            *(_QWORD *)(v58 + 8 * v59 + 8) = v57;
            goto LABEL_89;
          }
          *((_DWORD *)v42 + 8) = v55 + 1;
          v57 = *(protobuf::Intelligence_NLParameters **)&v54[2 * v55 + 2];
LABEL_89:
          v60 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(v38 + 24, v53);
          if ((protobuf::Intelligence_NLParameters *)v60 != v57)
          {
            v61 = (const protobuf::Intelligence_NLParameters *)v60;
            protobuf::Intelligence_NLParameters::Clear(v57);
            protobuf::Intelligence_NLParameters::MergeFrom(v57, v61);
          }
          if (++v53 >= *(_DWORD *)(v38 + 32))
            goto LABEL_92;
        }
        v56 = *((_DWORD *)v42 + 9);
        goto LABEL_87;
      }
LABEL_92:
      ++v35;
      v2 = this;
      v34 = *((int *)this + 62);
      if (v35 >= v34)
        goto LABEL_93;
    }
    v41 = *((_DWORD *)v2 + 129);
LABEL_60:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v36, v41 + 1);
    v39 = (int *)*((_QWORD *)v2 + 65);
    v41 = *v39;
    goto LABEL_61;
  }
LABEL_93:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>((uint64_t)v2 + 240);
}

void sub_22AF07804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateTo_2_0_1(siri::intelligence *this, protobuf::Intelligence *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::string *v6;
  std::string *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **p_data;
  protobuf::Intelligence_NLParameters *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  std::string *p_str;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string::size_type size;
  std::string::size_type v59;
  int v60;
  std::string *v61;
  std::string::size_type v62;
  uint64_t v63;
  uint64_t *v64;
  std::string *v65;
  char v66;
  void *v67;
  unint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  void **v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void **v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v99;
  BOOL v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  void **v106;
  const std::string *v107;
  int *v108;
  uint64_t v109;
  int v110;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  unint64_t v116;
  void **v117;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  void **v124;
  uint64_t v125;
  std::string *v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  std::string *v130;
  std::string *v131;
  std::string *v132;
  std::string *v133;
  uint64_t v134;
  BOOL v135;
  std::string *v136;
  std::string *v137;
  std::string *v138;
  std::string *v139;
  const std::string *v140;
  int *v141;
  uint64_t v142;
  int v143;
  std::string *v144;
  google::protobuf::internal::ArenaImpl *v145;
  uint64_t v146;
  uint64_t v147;
  std::string::size_type v148;
  std::string *v149;
  std::string::size_type v150;
  std::string *v151;
  uint64_t *v152;
  uint64_t v153;
  int v154;
  size_t v155;
  uint64_t v156;
  std::string::size_type v157;
  std::string *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  std::string::size_type v161;
  std::string *v162;
  unsigned __int8 *v163;
  uint64_t *v164;
  int v166;
  unsigned int *v167;
  char v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  std::string v172;
  std::string v173;
  std::string v174;
  void *__p[2];
  unsigned __int8 v176;
  void *v177[2];
  unsigned __int8 v178;
  void *v179[2];
  unsigned __int8 v180;
  void *v181[2];
  unsigned __int8 v182;
  void *v183[2];
  unsigned __int8 v184;
  void *v185[2];
  unsigned __int8 v186;
  void *v187[2];
  unsigned __int8 v188;
  void *v189[2];
  unsigned __int8 v190;
  std::string *v191;
  uint64_t v192;
  unsigned __int8 v193;
  void **v194;
  uint64_t v195;
  unsigned __int8 v196;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&v194, "socialCATI");
  std::string::basic_string[abi:ne180100]<0>(&v191, "identifierValue");
  std::string::basic_string[abi:ne180100]<0>(v189, "matchers");
  std::string::basic_string[abi:ne180100]<0>(v187, "namespace");
  std::string::basic_string[abi:ne180100]<0>(v185, "directInvocation");
  std::string::basic_string[abi:ne180100]<0>(v183, "invocations");
  std::string::basic_string[abi:ne180100]<0>(v181, "identifier");
  std::string::basic_string[abi:ne180100]<0>(v179, "userData");
  std::string::basic_string[abi:ne180100]<0>(v177, "usoLiteral");
  std::string::basic_string[abi:ne180100]<0>(__p, "userDialogActs");
  if (*((int *)this + 128) >= 1)
  {
    v2 = 0;
    do
    {
      v166 = v2;
      v3 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((uint64_t)this + 504, v2);
      v4 = v3;
      memset(&v174, 0, sizeof(v174));
      memset(&v173, 0, sizeof(v173));
      if ((*(_DWORD *)(v3 + 16) & 0x20) == 0)
        goto LABEL_44;
      v5 = *(_QWORD **)(v3 + 160);
      if (!v5)
      {
        v6 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18861);
        v7 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !value || nl_producer_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v7->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
        v5 = *(_QWORD **)(v4 + 160);
      }
      if (v5)
        v8 = v5;
      else
        v8 = &protobuf::_Intelligence_NLParameters_default_instance_;
      v9 = (unsigned __int8 *)v8[6];
      v10 = v9[23];
      if ((v10 & 0x80u) == 0)
        v11 = v9[23];
      else
        v11 = *((_QWORD *)v9 + 1);
      v12 = v196;
      if ((v196 & 0x80u) != 0)
        v12 = v195;
      if (v11 != v12)
        goto LABEL_44;
      if ((v196 & 0x80u) == 0)
        v13 = (void **)&v194;
      else
        v13 = v194;
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v9, v13, *((_QWORD *)v9 + 1)))
          goto LABEL_44;
      }
      else if (v9[23])
      {
        while (*v9 == *(unsigned __int8 *)v13)
        {
          ++v9;
          v13 = (void **)((char *)v13 + 1);
          if (!--v10)
            goto LABEL_24;
        }
        goto LABEL_44;
      }
LABEL_24:
      if (*((_DWORD *)v8 + 8) == 1)
      {
        v14 = *(_QWORD *)(v8[5] + 8);
        v15 = *(unsigned __int8 **)(v14 + 120);
        v16 = v15[23];
        v17 = v192;
        if ((v16 & 0x80u) == 0)
          v18 = v15[23];
        else
          v18 = *((_QWORD *)v15 + 1);
        if ((v193 & 0x80u) == 0)
          v17 = v193;
        if (v18 == v17)
        {
          if ((v193 & 0x80u) == 0)
            p_data = (void **)&v191;
          else
            p_data = (void **)&v191->__r_.__value_.__l.__data_;
          if ((v16 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v15, p_data, *((_QWORD *)v15 + 1)))
              goto LABEL_44;
LABEL_40:
            if ((*(_BYTE *)(v14 + 16) & 2) != 0)
            {
              std::string::operator=(&v173, *(const std::string **)(v14 + 128));
              v20 = *(protobuf::Intelligence_NLParameters **)(v4 + 160);
              if (v20)
                protobuf::Intelligence_NLParameters::Clear(v20);
              *(_DWORD *)(v4 + 16) &= ~0x20u;
            }
            goto LABEL_44;
          }
          if (!v15[23])
            goto LABEL_40;
          while (*v15 == *(unsigned __int8 *)p_data)
          {
            ++v15;
            p_data = (void **)((char *)p_data + 1);
            if (!--v16)
              goto LABEL_40;
          }
        }
      }
LABEL_44:
      if (*(int *)(v4 + 32) >= 1)
      {
        v21 = 0;
        v22 = v4 + 24;
        v167 = (unsigned int *)(v4 + 72);
        v164 = (uint64_t *)(v4 + 48);
        do
        {
          v23 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(v22, v21);
          v24 = v23;
          v25 = *(unsigned __int8 **)(v23 + 48);
          v26 = (char *)v25[23];
          v27 = *((_QWORD *)v25 + 1);
          if ((char)v26 >= 0)
            v28 = v25[23];
          else
            v28 = *((_QWORD *)v25 + 1);
          v29 = v196;
          if ((v196 & 0x80u) != 0)
            v29 = v195;
          if (v28 != v29)
            goto LABEL_79;
          if ((v196 & 0x80u) == 0)
            v30 = (void **)&v194;
          else
            v30 = v194;
          if ((v26 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v25, v30, *((_QWORD *)v25 + 1)) || *(_DWORD *)(v24 + 32) != 1)
              goto LABEL_79;
          }
          else
          {
            if (v25[23])
            {
              v31 = 0;
              while (v25[v31] == *((unsigned __int8 *)v30 + v31))
              {
                if (v26 == (char *)++v31)
                  goto LABEL_60;
              }
LABEL_79:
              v39 = 0;
              goto LABEL_166;
            }
LABEL_60:
            if (*(_DWORD *)(v23 + 32) != 1)
              goto LABEL_79;
          }
          v32 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
          v33 = *(unsigned __int8 **)(v32 + 120);
          v34 = v33[23];
          v35 = (unint64_t)v189[1];
          if ((v34 & 0x80u) == 0)
            v36 = (void *)v33[23];
          else
            v36 = (void *)*((_QWORD *)v33 + 1);
          if ((v190 & 0x80u) == 0)
            v35 = v190;
          if (v36 == (void *)v35)
          {
            if ((v190 & 0x80u) == 0)
              p_str = (std::string *)v189;
            else
              p_str = (std::string *)v189[0];
            if ((v34 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v33, p_str, *((_QWORD *)v33 + 1)))
                goto LABEL_164;
            }
            else if (v33[23])
            {
              while (*v33 == p_str->__r_.__value_.__s.__data_[0])
              {
                ++v33;
                p_str = (std::string *)((char *)p_str + 1);
                if (!--v34)
                  goto LABEL_81;
              }
              goto LABEL_164;
            }
LABEL_81:
            v40 = *(unsigned int *)(v32 + 56);
            if ((int)v40 >= 1)
            {
              v168 = 0;
              v41 = *(_QWORD *)(v32 + 64);
              if (v41)
                v42 = (uint64_t *)(v41 + 8);
              else
                v42 = 0;
              v170 = &v42[v40];
              while (1)
              {
                v43 = *v42;
                memset(&__str, 0, sizeof(__str));
                memset(&v172, 0, sizeof(v172));
                v44 = *(_QWORD *)(v43 + 88);
                if (v44)
                  v45 = (uint64_t *)(v44 + 8);
                else
                  v45 = 0;
                v46 = *(int *)(v43 + 80);
                if ((_DWORD)v46)
                {
                  v47 = &v45[v46];
                  while (1)
                  {
                    v48 = *v45;
                    v49 = *(unsigned __int8 **)(*v45 + 120);
                    v50 = (char *)v49[23];
                    v51 = *((_QWORD *)v49 + 1);
                    if ((char)v50 >= 0)
                      v52 = v49[23];
                    else
                      v52 = *((_QWORD *)v49 + 1);
                    v53 = v193;
                    if ((v193 & 0x80u) != 0)
                      v53 = v192;
                    if (v52 == v53)
                    {
                      if ((v193 & 0x80u) == 0)
                        p_str = (std::string *)&v191;
                      else
                        p_str = v191;
                      if ((v50 & 0x80) != 0)
                      {
                        if (memcmp(*(const void **)v49, p_str, *((_QWORD *)v49 + 1)))
                          goto LABEL_109;
LABEL_107:
                        if ((*(_BYTE *)(v48 + 16) & 2) != 0)
                        {
                          std::string::operator=(&__str, *(const std::string **)(v48 + 128));
                          v49 = *(unsigned __int8 **)(v48 + 120);
                          v50 = (char *)v49[23];
                          v51 = *((_QWORD *)v49 + 1);
                        }
                        goto LABEL_109;
                      }
                      if (!v49[23])
                        goto LABEL_107;
                      v54 = 0;
                      while (v49[v54] == p_str->__r_.__value_.__s.__data_[v54])
                      {
                        if (v50 == (char *)++v54)
                          goto LABEL_107;
                      }
                    }
LABEL_109:
                    if ((char)v50 >= 0)
                      v55 = v50;
                    else
                      v55 = (void *)v51;
                    v56 = v188;
                    if ((v188 & 0x80u) != 0)
                      v56 = (unint64_t)v187[1];
                    if (v55 != (void *)v56)
                      goto LABEL_126;
                    if ((v188 & 0x80u) == 0)
                      p_str = (std::string *)v187;
                    else
                      p_str = (std::string *)v187[0];
                    if ((v50 & 0x80) == 0)
                    {
                      if ((_DWORD)v50)
                      {
                        while (*v49 == p_str->__r_.__value_.__s.__data_[0])
                        {
                          ++v49;
                          p_str = (std::string *)((char *)p_str + 1);
                          if (!--v50)
                            goto LABEL_124;
                        }
                        goto LABEL_126;
                      }
LABEL_124:
                      if ((*(_BYTE *)(v48 + 16) & 2) != 0)
                        std::string::operator=(&v172, *(const std::string **)(v48 + 128));
                      goto LABEL_126;
                    }
                    if (!memcmp(*(const void **)v49, p_str, v51))
                      goto LABEL_124;
LABEL_126:
                    if (++v45 == v47)
                    {
                      v57 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                      size = __str.__r_.__value_.__l.__size_;
                      v59 = HIBYTE(v172.__r_.__value_.__r.__words[2]);
                      v22 = v4 + 24;
                      goto LABEL_129;
                    }
                  }
                }
                v59 = 0;
                size = 0;
                v57 = 0;
LABEL_129:
                v60 = (char)v57;
                if ((v57 & 0x80u) != 0)
                  v57 = size;
                if (v57)
                  break;
LABEL_158:
                if ((v59 & 0x80) != 0)
                  operator delete(v172.__r_.__value_.__l.__data_);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                if (++v42 == v170)
                {
                  v25 = *(unsigned __int8 **)(v24 + 48);
                  v26 = (char *)v25[23];
                  v27 = *((_QWORD *)v25 + 1);
                  v66 = v168;
                  goto LABEL_165;
                }
              }
              if ((v59 & 0x80u) != 0)
                v59 = v172.__r_.__value_.__l.__size_;
              if (v59)
              {
                v61 = &v174;
LABEL_157:
                std::string::operator=(v61, &__str);
                LOBYTE(v59) = *((_BYTE *)&v172.__r_.__value_.__s + 23);
                v168 = 1;
                goto LABEL_158;
              }
              if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v62 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
              else
                v62 = v173.__r_.__value_.__l.__size_;
              if (v62)
              {
                if (v62 != v57)
                  goto LABEL_151;
                if (v60 >= 0)
                  p_str = &__str;
                else
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                if ((*((_BYTE *)&v173.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (memcmp(v173.__r_.__value_.__l.__data_, p_str, v173.__r_.__value_.__l.__size_))
                    goto LABEL_151;
                }
                else if (*((_BYTE *)&v173.__r_.__value_.__s + 23))
                {
                  v63 = 0;
                  while (v173.__r_.__value_.__s.__data_[v63] == p_str->__r_.__value_.__s.__data_[v63])
                  {
                    ++v63;
                    v61 = &v173;
                    if (HIBYTE(v173.__r_.__value_.__r.__words[2]) == v63)
                      goto LABEL_157;
                  }
LABEL_151:
                  v64 = *(uint64_t **)(v24 + 48);
                  if (*((char *)v64 + 23) < 0)
                    v64 = (uint64_t *)*v64;
                  v65 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if (v60 >= 0)
                    v65 = &__str;
                  siri::intelligence::Log::Warning((siri::intelligence::Log *)"CATI GUID is different for parser and producer for event %s. Using '%s'.", (const char *)p_str, v64, v65);
                }
              }
              v61 = &v173;
              goto LABEL_157;
            }
          }
LABEL_164:
          v66 = 0;
LABEL_165:
          v39 = v66;
LABEL_166:
          if ((char)v26 >= 0)
            v67 = v26;
          else
            v67 = (void *)v27;
          v68 = v186;
          if ((v186 & 0x80u) != 0)
            v68 = (unint64_t)v185[1];
          if (v67 != (void *)v68)
            goto LABEL_269;
          if ((v186 & 0x80u) == 0)
            v69 = v185;
          else
            v69 = (void **)v185[0];
          if ((v26 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v25, v69, v27) || *(_DWORD *)(v24 + 32) != 1)
              goto LABEL_269;
          }
          else
          {
            if ((_DWORD)v26)
            {
              v70 = 0;
              while (v25[v70] == *((unsigned __int8 *)v69 + v70))
              {
                if (v26 == (char *)++v70)
                  goto LABEL_180;
              }
              goto LABEL_269;
            }
LABEL_180:
            if (*(_DWORD *)(v24 + 32) != 1)
              goto LABEL_269;
          }
          v72 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
          v73 = *(unsigned __int8 **)(v72 + 120);
          v74 = v73[23];
          v75 = (unint64_t)v183[1];
          if ((v74 & 0x80u) == 0)
            v76 = (void *)v73[23];
          else
            v76 = (void *)*((_QWORD *)v73 + 1);
          if ((v184 & 0x80u) == 0)
            v75 = v184;
          if (v76 == (void *)v75)
          {
            if ((v184 & 0x80u) == 0)
              v77 = v183;
            else
              v77 = (void **)v183[0];
            if ((v74 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v73, v77, *((_QWORD *)v73 + 1)))
                goto LABEL_269;
LABEL_202:
              v78 = *(unsigned int *)(v72 + 56);
              if ((int)v78 < 1)
                goto LABEL_269;
              v79 = *(_QWORD *)(v72 + 64);
              if (v79)
                v80 = v79 + 8;
              else
                v80 = 0;
              v169 = v24;
              v171 = v80 + 8 * v78;
              while (1)
              {
                v81 = *(_QWORD *)(*(_QWORD *)v80 + 88);
                v82 = v81 ? v81 + 8 : 0;
                v83 = *(int *)(*(_QWORD *)v80 + 80);
                if ((_DWORD)v83)
                  break;
LABEL_267:
                v80 += 8;
                if (v80 == v171)
                  goto LABEL_268;
              }
              v84 = 0;
              v85 = v82 + 8 * v83;
              if ((v180 & 0x80u) == 0)
                v86 = v180;
              else
                v86 = (unint64_t)v179[1];
              if ((v180 & 0x80u) == 0)
                v87 = v179;
              else
                v87 = (void **)v179[0];
              v88 = v82;
              do
              {
                v89 = *(unsigned __int8 **)(*(_QWORD *)v88 + 120);
                v90 = v89[23];
                if ((v90 & 0x80u) == 0)
                  v91 = (void *)v89[23];
                else
                  v91 = (void *)*((_QWORD *)v89 + 1);
                if (v91 == (void *)v86)
                {
                  if ((v90 & 0x80) != 0)
                  {
                    v100 = memcmp(*(const void **)v89, v87, *((_QWORD *)v89 + 1)) == 0;
                  }
                  else if (v89[23])
                  {
                    v92 = v90 - 1;
                    v93 = v87;
                    do
                    {
                      v95 = *v89++;
                      v94 = v95;
                      v97 = *(unsigned __int8 *)v93;
                      v93 = (void **)((char *)v93 + 1);
                      v96 = v97;
                      v99 = v92-- != 0;
                      v100 = v94 == v96;
                    }
                    while (v100 && v99);
                  }
                  else
                  {
                    v100 = 1;
                  }
                }
                else
                {
                  v100 = 0;
                }
                v84 |= v100;
                v88 += 8;
              }
              while (v88 != v85);
              if ((v84 & 1) != 0)
              {
LABEL_268:
                v22 = v4 + 24;
                v24 = v169;
                v25 = *(unsigned __int8 **)(v169 + 48);
                v26 = (char *)v25[23];
                v27 = *((_QWORD *)v25 + 1);
                goto LABEL_269;
              }
              while (2)
              {
                v101 = *(_QWORD *)v82;
                v102 = *(unsigned __int8 **)(*(_QWORD *)v82 + 120);
                v103 = v102[23];
                if ((v103 & 0x80u) == 0)
                  v104 = (void *)v102[23];
                else
                  v104 = (void *)*((_QWORD *)v102 + 1);
                v105 = v182;
                if ((v182 & 0x80u) != 0)
                  v105 = (unint64_t)v181[1];
                if (v104 != (void *)v105)
                {
LABEL_266:
                  v82 += 8;
                  if (v82 == v85)
                    goto LABEL_267;
                  continue;
                }
                break;
              }
              if ((v182 & 0x80u) == 0)
                v106 = v181;
              else
                v106 = (void **)v181[0];
              if ((v103 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v102, v106, *((_QWORD *)v102 + 1)))
                  goto LABEL_266;
              }
              else if (v102[23])
              {
                while (*v102 == *(unsigned __int8 *)v106)
                {
                  ++v102;
                  v106 = (void **)((char *)v106 + 1);
                  if (!--v103)
                    goto LABEL_252;
                }
                goto LABEL_266;
              }
LABEL_252:
              if ((*(_BYTE *)(v101 + 16) & 2) == 0)
                goto LABEL_266;
              v107 = *(const std::string **)(v101 + 128);
              v108 = *(int **)(v4 + 88);
              if (v108)
              {
                v109 = *(int *)(v4 + 80);
                v110 = *v108;
                if ((int)v109 < *v108)
                {
                  *(_DWORD *)(v4 + 80) = v109 + 1;
                  AlignedAndAddCleanup = *(std::string **)&v108[2 * v109 + 2];
LABEL_265:
                  std::string::operator=(AlignedAndAddCleanup, v107);
                  v39 = 1;
                  goto LABEL_266;
                }
                if (v110 == *(_DWORD *)(v4 + 84))
                {
LABEL_258:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v167, v110 + 1);
                  v108 = *(int **)(v4 + 88);
                  v110 = *v108;
                }
                *v108 = v110 + 1;
                v112 = *(google::protobuf::internal::ArenaImpl **)v167;
                if (*(_QWORD *)v167)
                {
                  if (*((_QWORD *)v112 + 14))
                  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v112, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                }
                else
                {
                  AlignedAndAddCleanup = (std::string *)operator new();
                }
                AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                v113 = *(_QWORD *)(v4 + 88);
                v114 = *(int *)(v4 + 80);
                *(_DWORD *)(v4 + 80) = v114 + 1;
                *(_QWORD *)(v113 + 8 * v114 + 8) = AlignedAndAddCleanup;
                goto LABEL_265;
              }
              v110 = *(_DWORD *)(v4 + 84);
              goto LABEL_258;
            }
            if (!v73[23])
              goto LABEL_202;
            while (*v73 == *(unsigned __int8 *)v77)
            {
              ++v73;
              v77 = (void **)((char *)v77 + 1);
              if (!--v74)
                goto LABEL_202;
            }
          }
LABEL_269:
          if ((char)v26 >= 0)
            v115 = v26;
          else
            v115 = (void *)v27;
          v116 = v178;
          if ((v178 & 0x80u) != 0)
            v116 = (unint64_t)v177[1];
          if (v115 != (void *)v116)
            goto LABEL_306;
          if ((v178 & 0x80u) == 0)
            v117 = v177;
          else
            v117 = (void **)v177[0];
          if ((v26 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v25, v117, v27) || *(_DWORD *)(v24 + 32) != 1)
              goto LABEL_306;
          }
          else
          {
            if ((_DWORD)v26)
            {
              while (*v25 == *(unsigned __int8 *)v117)
              {
                ++v25;
                v117 = (void **)((char *)v117 + 1);
                if (!--v26)
                  goto LABEL_282;
              }
              goto LABEL_306;
            }
LABEL_282:
            if (*(_DWORD *)(v24 + 32) != 1)
              goto LABEL_306;
          }
          v119 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
          v120 = *(unsigned __int8 **)(v119 + 120);
          v121 = v120[23];
          v122 = (unint64_t)__p[1];
          if ((v121 & 0x80u) == 0)
            v123 = (void *)v120[23];
          else
            v123 = (void *)*((_QWORD *)v120 + 1);
          if ((v176 & 0x80u) == 0)
            v122 = v176;
          if (v123 != (void *)v122)
            goto LABEL_306;
          if ((v176 & 0x80u) == 0)
            v124 = __p;
          else
            v124 = (void **)__p[0];
          if ((v121 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v120, v124, *((_QWORD *)v120 + 1)))
              goto LABEL_306;
LABEL_304:
            if (*(_DWORD *)(v119 + 56) != 1)
              goto LABEL_306;
            v125 = *(_QWORD *)(*(_QWORD *)(v119 + 64) + 8);
            if ((*(_BYTE *)(v125 + 16) & 2) == 0)
              goto LABEL_306;
            v140 = *(const std::string **)(v125 + 128);
            v141 = *(int **)(v4 + 64);
            if (v141)
            {
              v142 = *(int *)(v4 + 56);
              v143 = *v141;
              if ((int)v142 < *v141)
              {
                *(_DWORD *)(v4 + 56) = v142 + 1;
                v144 = *(std::string **)&v141[2 * v142 + 2];
LABEL_340:
                std::string::operator=(v144, v140);
LABEL_307:
                if (v21 < 0)
                {
                  v126 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2041);
                  v127 = google::protobuf::internal::LogMessage::operator<<(v126, "CHECK failed: (start) >= (0): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v127->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                if (*(_DWORD *)(v4 + 32) <= v21)
                {
                  v128 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2043);
                  v129 = google::protobuf::internal::LogMessage::operator<<(v128, "CHECK failed: (start + num) <= (size()): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v129->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                if (v21 < 0)
                {
                  v130 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1567);
                  v131 = google::protobuf::internal::LogMessage::operator<<(v130, "CHECK failed: (index) >= (0): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v131->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                if (*(_DWORD *)(v4 + 32) <= v21)
                {
                  v132 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1568);
                  v133 = google::protobuf::internal::LogMessage::operator<<(v132, "CHECK failed: (index) < (current_size_): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v133->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                v134 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v21 + 8);
                if (v134)
                  v135 = *(_QWORD *)(v4 + 24) == 0;
                else
                  v135 = 0;
                if (v135)
                  (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
                if (v21 < 0)
                {
                  v136 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2063);
                  v137 = google::protobuf::internal::LogMessage::operator<<(v136, "CHECK failed: (start) >= (0): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v137->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                if (*(_DWORD *)(v4 + 32) <= v21)
                {
                  v138 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__str, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 2065);
                  v139 = google::protobuf::internal::LogMessage::operator<<(v138, "CHECK failed: (start + num) <= (size()): ");
                  google::protobuf::internal::LogFinisher::operator=((int)&v172, (const char **)&v139->__r_.__value_.__l.__data_);
                  google::protobuf::internal::LogMessage::~LogMessage((void **)&__str.__r_.__value_.__l.__data_);
                }
                google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(v22, v21--, 1);
                goto LABEL_326;
              }
              if (v143 != *(_DWORD *)(v4 + 60))
              {
LABEL_334:
                *v141 = v143 + 1;
                v145 = (google::protobuf::internal::ArenaImpl *)*v164;
                if (*v164)
                {
                  if (*((_QWORD *)v145 + 14))
                  v144 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v145, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                }
                else
                {
                  v144 = (std::string *)operator new();
                }
                v144->__r_.__value_.__r.__words[0] = 0;
                v144->__r_.__value_.__l.__size_ = 0;
                v144->__r_.__value_.__r.__words[2] = 0;
                v146 = *(_QWORD *)(v4 + 64);
                v147 = *(int *)(v4 + 56);
                *(_DWORD *)(v4 + 56) = v147 + 1;
                *(_QWORD *)(v146 + 8 * v147 + 8) = v144;
                goto LABEL_340;
              }
            }
            else
            {
              v143 = *(_DWORD *)(v4 + 60);
            }
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v164, v143 + 1);
            v141 = *(int **)(v4 + 64);
            v143 = *v141;
            goto LABEL_334;
          }
          if (!v120[23])
            goto LABEL_304;
          while (*v120 == *(unsigned __int8 *)v124)
          {
            ++v120;
            v124 = (void **)((char *)v124 + 1);
            if (!--v121)
              goto LABEL_304;
          }
LABEL_306:
          if ((v39 & 1) != 0)
            goto LABEL_307;
LABEL_326:
          ++v21;
        }
        while (v21 < *(_DWORD *)(v4 + 32));
      }
      v148 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v148 = v174.__r_.__value_.__l.__size_;
      if (v148)
      {
        v149 = *(std::string **)(v4 + 136);
        *(_DWORD *)(v4 + 16) |= 4u;
        if (v149 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v4 + 136), (uint64_t)&v174);
        else
          std::string::operator=(v149, &v174);
      }
      v150 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
      if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v150 = v173.__r_.__value_.__l.__size_;
      if (v150)
      {
        v151 = *(std::string **)(v4 + 144);
        *(_DWORD *)(v4 + 16) |= 8u;
        if (v151 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v4 + 144), (uint64_t)&v173);
        else
          std::string::operator=(v151, &v173);
      }
      if ((*(_BYTE *)(v4 + 16) & 2) != 0)
      {
        v152 = *(uint64_t **)(v4 + 128);
        v153 = *((unsigned __int8 *)v152 + 23);
        v154 = *((unsigned __int8 *)v152 + 23);
        v155 = v152[1];
        if ((v153 & 0x80u) == 0)
          v156 = *((unsigned __int8 *)v152 + 23);
        else
          v156 = v152[1];
        v157 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
        if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v157 = v174.__r_.__value_.__l.__size_;
        if (v156 == v157)
        {
          if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v158 = &v174;
          else
            v158 = (std::string *)v174.__r_.__value_.__r.__words[0];
          if ((v154 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v152, v158, v152[1]))
              goto LABEL_383;
          }
          else
          {
            if (!*((_BYTE *)v152 + 23))
              goto LABEL_383;
            v159 = *(unsigned __int8 **)(v4 + 128);
            v160 = *((unsigned __int8 *)v152 + 23);
            while (*v159 == v158->__r_.__value_.__s.__data_[0])
            {
              ++v159;
              v158 = (std::string *)((char *)v158 + 1);
              if (!--v160)
                goto LABEL_383;
            }
          }
        }
        v161 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v161 = v173.__r_.__value_.__l.__size_;
        if (v156 != v161)
          goto LABEL_388;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v162 = &v173;
        else
          v162 = (std::string *)v173.__r_.__value_.__r.__words[0];
        if ((v154 & 0x80) == 0)
        {
          if (v154)
          {
            v163 = (unsigned __int8 *)v152;
            while (*v163 == v162->__r_.__value_.__s.__data_[0])
            {
              ++v163;
              v162 = (std::string *)((char *)v162 + 1);
              if (!--v153)
                goto LABEL_383;
            }
            goto LABEL_388;
          }
LABEL_383:
          if (v152 != &google::protobuf::internal::fixed_address_empty_string)
          {
            if ((v154 & 0x80) != 0)
            {
              *(_BYTE *)*v152 = 0;
              v152[1] = 0;
            }
            else
            {
              *(_BYTE *)v152 = 0;
              *((_BYTE *)v152 + 23) = 0;
            }
          }
          *(_DWORD *)(v4 + 16) &= ~2u;
          goto LABEL_388;
        }
        if (!memcmp((const void *)*v152, v162, v155))
          goto LABEL_383;
      }
LABEL_388:
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v173.__r_.__value_.__l.__data_);
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v174.__r_.__value_.__l.__data_);
      v2 = v166 + 1;
    }
    while (v166 + 1 < *((_DWORD *)this + 128));
  }
  if ((char)v176 < 0)
    operator delete(__p[0]);
  if ((char)v178 < 0)
    operator delete(v177[0]);
  if ((char)v180 < 0)
    operator delete(v179[0]);
  if ((char)v182 < 0)
    operator delete(v181[0]);
  if ((char)v184 < 0)
    operator delete(v183[0]);
  if ((char)v186 < 0)
    operator delete(v185[0]);
  if ((char)v188 < 0)
    operator delete(v187[0]);
  if ((char)v190 < 0)
    operator delete(v189[0]);
  if ((char)v193 < 0)
    operator delete(v191);
  if ((char)v196 < 0)
    operator delete(v194);
}

void sub_22AF0895C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 233) < 0)
    operator delete(*(void **)(v63 - 256));
  if (*(char *)(v63 - 209) < 0)
    operator delete(*(void **)(v63 - 232));
  if (*(char *)(v63 - 185) < 0)
    operator delete(*(void **)(v63 - 208));
  if (*(char *)(v63 - 161) < 0)
    operator delete(*(void **)(v63 - 184));
  if (*(char *)(v63 - 137) < 0)
    operator delete(*(void **)(v63 - 160));
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void protobuf::Intelligence_Variable::set_type(protobuf::Intelligence_Variable *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17578);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 2u;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_22AF08C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF08D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_ResponseGroup **v3;
  protobuf::Intelligence_ResponseGroup *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_ResponseGroup **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_ResponseGroup::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF08DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF08EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_InputGroup **v3;
  protobuf::Intelligence_InputGroup *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_InputGroup **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF08F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  char v7;
  std::string v8[2];

  if (!a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arenastring.h", 376);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: initial_value != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = (std::string *)operator new();
  v6 = v5;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v6;
}

void sub_22AF09100(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF091F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF092D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF093AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_Label **v3;
  protobuf::Intelligence_Label *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_Label **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Label::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF096F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF097C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_Counter **v3;
  protobuf::Intelligence_Counter *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_Counter **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Counter::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF0987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_Flag **v3;
  protobuf::Intelligence_Flag *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_Flag **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Flag::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF09A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_List **v3;
  protobuf::Intelligence_List *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_List **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_List::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF09B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::IsNewStyleCondition(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  int v5;
  void *__p[2];
  char v8;
  std::string v9;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  siri::intelligence::StringTrim(" \t\n\r", (const std::string *)a1, &v9);
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  v3 = siri::intelligence::StringContains(&v9.__r_.__value_.__l.__data_, (char *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v3 & 1) != 0)
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "$");
  if ((siri::intelligence::StringContains((char **)a1, (char *)&v9) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "(");
    v5 = siri::intelligence::StringContains((char **)a1, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    v4 = v5 ^ 1u;
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v4;
}

void sub_22AF09CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::UpdateKeyValueParameterTo_1_0_2(siri::intelligence *this, protobuf::Intelligence_KeyValueParameter *a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  const protobuf::Intelligence_KeyValueParameter *v7;
  int *v8;
  uint64_t v9;
  int v10;
  protobuf::Intelligence_KeyValueParameter *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  siri::intelligence *v15;
  protobuf::Intelligence_KeyValueParameter *v16;
  int v17;
  siri::intelligence *v18;
  protobuf::Intelligence_KeyValueParameter *v19;

  v3 = *((_DWORD *)this + 4);
  if ((v3 & 4) != 0)
  {
    v4 = *((_QWORD *)this + 17);
    if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
      }
    }
    v3 = *((_DWORD *)this + 4) & 0xFFFFFFFB;
    *((_DWORD *)this + 4) = v3;
  }
  if ((v3 & 0x20) != 0)
  {
    *((_QWORD *)this + 22) = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v5 = -161;
  }
  else
  {
    if ((v3 & 0x40) == 0)
      goto LABEL_12;
    *((double *)this + 22) = (double)*((uint64_t *)this + 21);
    *((_QWORD *)this + 21) = 0;
    v5 = -193;
  }
  v3 = v3 & v5 | 0x80;
  *((_DWORD *)this + 4) = v3;
LABEL_12:
  if ((v3 & 0x200) != 0)
  {
    *((_WORD *)this + 92) = *((unsigned __int8 *)this + 185);
    *((_DWORD *)this + 4) = v3 & 0xFFFFFCFF | 0x100;
  }
  if (*((int *)this + 8) >= 1)
  {
    v6 = 0;
    while (1)
    {
      v7 = (const protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, v6);
      v8 = (int *)*((_QWORD *)this + 11);
      if (!v8)
        break;
      v9 = *((int *)this + 20);
      v10 = *v8;
      if ((int)v9 >= *v8)
      {
        if (v10 == *((_DWORD *)this + 21))
        {
LABEL_21:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 18, v10 + 1);
          v8 = (int *)*((_QWORD *)this + 11);
          v10 = *v8;
        }
        *v8 = v10 + 1;
        v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)this + 9));
        v12 = *((_QWORD *)this + 11);
        v13 = *((int *)this + 20);
        *((_DWORD *)this + 20) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13 + 8) = v11;
        goto LABEL_23;
      }
      *((_DWORD *)this + 20) = v9 + 1;
      v11 = *(protobuf::Intelligence_KeyValueParameter **)&v8[2 * v9 + 2];
LABEL_23:
      if (v7 != v11)
      {
        protobuf::Intelligence_KeyValueParameter::Clear(v11);
        protobuf::Intelligence_KeyValueParameter::MergeFrom(v11, v7);
      }
      if (++v6 >= *((_DWORD *)this + 8))
        goto LABEL_26;
    }
    v10 = *((_DWORD *)this + 21);
    goto LABEL_21;
  }
LABEL_26:
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  if (*((int *)this + 20) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 72, v14);
      siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v15, v16);
      ++v14;
    }
    while (v14 < *((_DWORD *)this + 20));
  }
  if (*((int *)this + 14) >= 1)
  {
    v17 = 0;
    do
    {
      v18 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, v17);
      siri::intelligence::UpdateKeyValueParameterTo_1_0_2(v18, v19);
      ++v17;
    }
    while (v17 < *((_DWORD *)this + 14));
  }
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF09F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_KeyValueParameter **v3;
  protobuf::Intelligence_KeyValueParameter *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_KeyValueParameter **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_KeyValueParameter::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF0A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0A124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0A200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateConditionEntryTo_1_0_3(siri::intelligence *this, protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  unsigned int v3;
  protobuf::Intelligence_KeyValueParameter *v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  int v8;
  siri::intelligence *v9;
  protobuf::Intelligence_Condition_ConditionEntry *v10;
  int v11;
  siri::intelligence *v12;
  protobuf::Intelligence_Condition_ConditionEntry *v13;
  int v14;
  siri::intelligence *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v3 = *((_DWORD *)this + 4);
  if ((v3 & 1) != 0)
  {
    *((_DWORD *)this + 4) = v3 | 0x10;
    v4 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
    if (!v4)
    {
      v4 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
      *((_QWORD *)this + 13) = v4;
    }
    siri::intelligence::CreateConditionKeyValueParameter_1_0_3((uint64_t)v4, *((_QWORD *)this + 9));
    v5 = *((_QWORD *)this + 9);
    if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
      }
    }
    v3 = *((_DWORD *)this + 4) & 0xFFFFFFFE;
    *((_DWORD *)this + 4) = v3;
  }
  if ((v3 & 4) != 0)
  {
    *((_DWORD *)this + 4) = v3 | 0x20;
    v6 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 14);
    if (!v6)
    {
      v6 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
      *((_QWORD *)this + 14) = v6;
    }
    siri::intelligence::CreateConditionKeyValueParameter_1_0_3((uint64_t)v6, *((_QWORD *)this + 11));
    v7 = *((_QWORD *)this + 11);
    if ((uint64_t *)v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    *((_DWORD *)this + 4) &= ~4u;
  }
  if (*((int *)this + 8) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 24, v8);
      siri::intelligence::UpdateConditionEntryTo_1_0_3(v9, v10);
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 8));
  }
  if (*((int *)this + 14) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 48, v11);
      siri::intelligence::UpdateConditionEntryTo_1_0_3(v12, v13);
      ++v11;
    }
    while (v11 < *((_DWORD *)this + 14));
  }
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 8) != 0)
  {
    v15 = (siri::intelligence *)*((_QWORD *)this + 12);
    if (!v15)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
      v15 = (siri::intelligence *)*((_QWORD *)this + 12);
      v14 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 4) = v14 | 8;
    siri::intelligence::UpdateConditionEntryTo_1_0_3(v15, a2);
  }
}

void sub_22AF0A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::CreateConditionKeyValueParameter_1_0_3(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  void **v7;
  size_t v8;
  char *v9;
  size_t v10;
  void **v11;
  char *v12;
  size_t v13;
  void **v14;
  std::string *v15;
  std::string **v16;
  uint64_t *v17;
  char v18;
  const char *v19;
  uint64_t v20;
  std::string *v21;
  std::string **v22;
  uint64_t *v23;
  uint64_t v24;
  std::string __p;
  std::string v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void **v30;
  size_t v31;
  unsigned __int8 v32;

  siri::intelligence::GetLiteralType((std::string *)a2, &v30);
  v4 = strlen(siri::intelligence::TYPE_STRING[0]);
  v5 = v4;
  v6 = v32;
  if ((char)v32 < 0)
  {
    v8 = v31;
    if (v4 != v31)
    {
      v9 = siri::intelligence::TYPE_BOOLEAN[0];
      v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      goto LABEL_15;
    }
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v7 = v30;
  }
  else
  {
    if (v4 != v32)
    {
      v9 = siri::intelligence::TYPE_BOOLEAN[0];
      v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      goto LABEL_11;
    }
    v7 = (void **)&v30;
  }
  if (!memcmp(v7, siri::intelligence::TYPE_STRING[0], v5))
  {
    v17 = *(uint64_t **)(a1 + 128);
    v16 = (std::string **)(a1 + 128);
    v15 = (std::string *)v17;
    *((_DWORD *)v16 - 28) |= 2u;
    if (v17 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, a2);
    else
      std::string::operator=(v15, (const std::string *)a2);
    goto LABEL_47;
  }
  v9 = siri::intelligence::TYPE_BOOLEAN[0];
  v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
  if ((v6 & 0x80) != 0)
  {
    v8 = v31;
LABEL_15:
    if (v10 != v8)
    {
      v12 = siri::intelligence::TYPE_NUMBER[0];
      v13 = strlen(siri::intelligence::TYPE_NUMBER[0]);
      goto LABEL_27;
    }
    if (v8 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v11 = v30;
LABEL_18:
    if (!memcmp(v11, v9, v8))
    {
      v18 = siri::intelligence::StringToBool((const std::string *)a2, 0);
      *(_DWORD *)(a1 + 16) |= 0x100u;
      *(_BYTE *)(a1 + 184) = v18;
      goto LABEL_47;
    }
    v12 = siri::intelligence::TYPE_NUMBER[0];
    v13 = strlen(siri::intelligence::TYPE_NUMBER[0]);
    if ((v6 & 0x80) == 0)
      goto LABEL_20;
    v8 = v31;
LABEL_27:
    if (v13 != v8)
      goto LABEL_31;
    if (v8 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v14 = v30;
    v6 = v8;
    goto LABEL_30;
  }
LABEL_11:
  if (v10 == v6)
  {
    v11 = (void **)&v30;
    v8 = v6;
    goto LABEL_18;
  }
  v12 = siri::intelligence::TYPE_NUMBER[0];
  v13 = strlen(siri::intelligence::TYPE_NUMBER[0]);
LABEL_20:
  if (v13 != v6)
    goto LABEL_31;
  v14 = (void **)&v30;
LABEL_30:
  if (!memcmp(v14, v12, v6))
  {
    siri::intelligence::StringToDouble(a2, 0);
    *(_DWORD *)(a1 + 16) |= 0x80u;
    *(_QWORD *)(a1 + 176) = v24;
    goto LABEL_47;
  }
LABEL_31:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v26);
  if (v29)
  {
    siri::intelligence::Entity::GetName((siri::intelligence::Entity *)&v26, &__p);
    *(_DWORD *)(a1 + 16) |= 8u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 144), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      v20 = a2;
    else
      v20 = *(_QWORD *)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unable to update old-style condition: %s", v19, v20);
    v23 = *(uint64_t **)(a1 + 128);
    v22 = (std::string **)(a1 + 128);
    v21 = (std::string *)v23;
    *((_DWORD *)v22 - 28) |= 2u;
    if (v23 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v22, a2);
    else
      std::string::operator=(v21, (const std::string *)a2);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_47:
  if ((char)v32 < 0)
    operator delete(v30);
}

void sub_22AF0A8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 49) < 0)
    operator delete(*(void **)(v21 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(signed int **this, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  const protobuf::Intelligence_KeyValueParameter **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if ((signed int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const protobuf::Intelligence_KeyValueParameter **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((google::protobuf::internal::ArenaImpl **)this, (protobuf::Intelligence_KeyValueParameter **)v7, v6, v5, *this[2] - *((_DWORD *)this + 2));
    v8 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v8;
    v9 = this[2];
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_22AF0AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(google::protobuf::internal::ArenaImpl **a1, protobuf::Intelligence_KeyValueParameter **a2, const protobuf::Intelligence_KeyValueParameter **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  const protobuf::Intelligence_KeyValueParameter **v11;
  protobuf::Intelligence_KeyValueParameter **v12;
  const protobuf::Intelligence_KeyValueParameter *v13;
  const protobuf::Intelligence_KeyValueParameter *v14;
  protobuf::Intelligence_KeyValueParameter *v15;
  BOOL v16;
  int v17;
  google::protobuf::internal::ArenaImpl *v18;
  protobuf::Intelligence_KeyValueParameter **v19;
  const protobuf::Intelligence_KeyValueParameter **v20;
  const protobuf::Intelligence_KeyValueParameter *v21;
  protobuf::Intelligence_KeyValueParameter *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_KeyValueParameter>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a2[a5];
    v20 = &a3[a5];
    do
    {
      v21 = *v20++;
      v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(v18);
      google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_KeyValueParameter>::Merge(v21, v22);
      *v19++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_KeyValueParameter>::Merge(const protobuf::Intelligence_KeyValueParameter *a1, protobuf::Intelligence_KeyValueParameter *a2)
{
  protobuf::Intelligence_KeyValueParameter::MergeFrom(a2, a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0AD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_LegacyEvent>::Merge(const protobuf::Intelligence_InputGroup_LegacyEvent *a1, protobuf::Intelligence_InputGroup_LegacyEvent *a2)
{
  protobuf::Intelligence_InputGroup_LegacyEvent::MergeFrom(a2, a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup>::Merge(const protobuf::Intelligence_InputGroup *a1, protobuf::Intelligence_InputGroup *a2)
{
  protobuf::Intelligence_InputGroup::MergeFrom(a2, a1);
}

void siri::intelligence::ConvertPositionalArgToDictionary(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int *v8;
  uint64_t v9;
  int v10;
  protobuf::Intelligence_KeyValueParameter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const protobuf::Intelligence_KeyValueParameter *v15;
  char *v16;

  if (*(_DWORD *)(a2 + 56) <= a3)
    return;
  v8 = *(int **)(a1 + 88);
  if (!v8)
  {
    v10 = *(_DWORD *)(a1 + 84);
    goto LABEL_8;
  }
  v9 = *(int *)(a1 + 80);
  v10 = *v8;
  if ((int)v9 >= *v8)
  {
    if (v10 != *(_DWORD *)(a1 + 84))
    {
LABEL_9:
      *v8 = v10 + 1;
      v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 72));
      v12 = *(_QWORD *)(a1 + 88);
      v13 = *(int *)(a1 + 80);
      *(_DWORD *)(a1 + 80) = v13 + 1;
      *(_QWORD *)(v12 + 8 * v13 + 8) = v11;
      goto LABEL_10;
    }
LABEL_8:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v10 + 1);
    v8 = *(int **)(a1 + 88);
    v10 = *v8;
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 80) = v9 + 1;
  v11 = *(protobuf::Intelligence_KeyValueParameter **)&v8[2 * v9 + 2];
LABEL_10:
  v14 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 48, a3);
  if ((protobuf::Intelligence_KeyValueParameter *)v14 != v11)
  {
    v15 = (const protobuf::Intelligence_KeyValueParameter *)v14;
    protobuf::Intelligence_KeyValueParameter::Clear(v11);
    protobuf::Intelligence_KeyValueParameter::MergeFrom(v11, v15);
  }
  if (a4[23] >= 0)
    v16 = a4;
  else
    v16 = *(char **)a4;
  protobuf::Intelligence_KeyValueParameter::set_key(v11, v16);
}

void protobuf::Intelligence_KeyValueParameter::set_key(protobuf::Intelligence_KeyValueParameter *this, char *__s)
{
  std::string *v4;
  char v5;
  std::string __p[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 9493);
    v4 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 1u;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)this + 15, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_22AF0AF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::UpdateFunctionToParameterDictionary(siri::intelligence *this, protobuf::Intelligence_KeyValueParameter *a2)
{
  __int128 *v3;
  __int128 v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  int data_low;
  int v18;
  std::string *v20;
  int v22;
  int v23;
  std::string::size_type v25;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v39;
  siri::intelligence *v40;
  protobuf::Intelligence_KeyValueParameter *v41;
  int v42;
  siri::intelligence *v43;
  protobuf::Intelligence_KeyValueParameter *v44;
  int v45;
  siri::intelligence *v46;
  protobuf::Intelligence_KeyValueParameter *v47;
  void *__p[2];
  char v49;
  std::string v50;

  if ((*((_BYTE *)this + 16) & 0x10) == 0)
    goto LABEL_186;
  v3 = (__int128 *)*((_QWORD *)this + 19);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v50.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v4;
  }
  v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v50.__r_.__value_.__l.__size_;
    if (v50.__r_.__value_.__l.__size_ == 3)
    {
      if ((*(_WORD *)v50.__r_.__value_.__l.__data_ != 25185 || *(_BYTE *)(v50.__r_.__value_.__r.__words[0] + 2) != 115)
        && (*(_WORD *)v50.__r_.__value_.__l.__data_ != 25711 || *(_BYTE *)(v50.__r_.__value_.__r.__words[0] + 2) != 100))
      {
LABEL_54:
        v11 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v50.__r_.__value_.__l.__data_ == 25697 && *(_BYTE *)(v50.__r_.__value_.__r.__words[0] + 2) == 100)
          goto LABEL_81;
LABEL_58:
        data_low = LOWORD(v11->__r_.__value_.__l.__data_);
        v18 = v11->__r_.__value_.__s.__data_[2];
        if (data_low != 26989 || v18 != 110)
        {
          if ((v5 & 0x80) == 0)
          {
LABEL_63:
            if (v5 != 3)
            {
LABEL_87:
              if (v5 != 9)
              {
LABEL_95:
                if (v5 != 5)
                {
LABEL_121:
                  if (v5 != 10)
                  {
LABEL_130:
                    if (v5 != 8)
                    {
LABEL_141:
                      if (v5 != 8)
                        goto LABEL_151;
                      v12 = &v50;
LABEL_149:
                      if (v12->__r_.__value_.__r.__words[0] == 0x736E6961746E6F63)
                      {
                        std::string::basic_string[abi:ne180100]<0>(__p, "haystack");
                        siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
                        if (v49 < 0)
                          operator delete(__p[0]);
                        std::string::basic_string[abi:ne180100]<0>(__p, "needle");
                        siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 1, (char *)__p);
                        if (v49 < 0)
                          operator delete(__p[0]);
                        v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
                        if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
                          goto LABEL_151;
                      }
                      else if ((v5 & 0x80) == 0)
                      {
LABEL_151:
                        v12 = &v50;
                        switch(v5)
                        {
                          case 5:
                            v31 = v50.__r_.__value_.__s.__data_[4];
                            v32 = LODWORD(v50.__r_.__value_.__l.__data_) == 1953525093;
                            v33 = 121;
                            goto LABEL_167;
                          case 6:
                            goto LABEL_153;
                          case 7:
                            v31 = *(_DWORD *)((char *)v50.__r_.__value_.__r.__words + 3);
                            v32 = LODWORD(v50.__r_.__value_.__l.__data_) == 1768318308;
                            v33 = 1684369001;
                            goto LABEL_167;
                          case 8:
                            goto LABEL_162;
                          case 9:
                            v31 = v50.__r_.__value_.__s.__data_[8];
                            v32 = v50.__r_.__value_.__r.__words[0] == 0x656E696665646E75;
                            v33 = 100;
                            goto LABEL_167;
                          default:
                            goto LABEL_186;
                        }
                        goto LABEL_186;
                      }
                      v25 = v50.__r_.__value_.__l.__size_;
                      v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_160:
                      switch(v25)
                      {
                        case 5uLL:
                          v34 = v12->__r_.__value_.__s.__data_[4];
                          v35 = LODWORD(v12->__r_.__value_.__l.__data_) == 1953525093;
                          v36 = 121;
                          goto LABEL_176;
                        case 6uLL:
                          v34 = WORD2(v12->__r_.__value_.__r.__words[0]);
                          v35 = LODWORD(v12->__r_.__value_.__l.__data_) == 1735288172;
                          v36 = 26740;
                          goto LABEL_176;
                        case 7uLL:
                          v34 = *(_DWORD *)((char *)v12->__r_.__value_.__r.__words + 3);
                          v35 = LODWORD(v12->__r_.__value_.__l.__data_) == 1768318308;
                          v36 = 1684369001;
                          goto LABEL_176;
                        case 8uLL:
LABEL_162:
                          if (v12->__r_.__value_.__r.__words[0] == 0x7974706D656E6F6ELL)
                            goto LABEL_181;
                          if ((v5 & 0x80) != 0)
                            goto LABEL_184;
                          goto LABEL_186;
                        case 9uLL:
                          v34 = v12->__r_.__value_.__s.__data_[8];
                          v35 = v12->__r_.__value_.__r.__words[0] == 0x656E696665646E75;
                          v36 = 100;
LABEL_176:
                          if (!v35 || v34 != v36)
                            goto LABEL_185;
                          goto LABEL_181;
                        default:
                          goto LABEL_185;
                      }
                    }
                    v12 = &v50;
LABEL_139:
                    if (v12->__r_.__value_.__r.__words[0] == 0x6874695773646E65)
                    {
                      std::string::basic_string[abi:ne180100]<0>(__p, "string");
                      siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
                      if (v49 < 0)
                        operator delete(__p[0]);
                      std::string::basic_string[abi:ne180100]<0>(__p, "suffix");
                      siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 1, (char *)__p);
                      if (v49 < 0)
                        operator delete(__p[0]);
                      v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
                      if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
                        goto LABEL_141;
                    }
                    else if ((v5 & 0x80) == 0)
                    {
                      goto LABEL_141;
                    }
                    v25 = v50.__r_.__value_.__l.__size_;
                    v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
                    if (v50.__r_.__value_.__l.__size_ != 8)
                      goto LABEL_160;
                    goto LABEL_149;
                  }
                  v12 = &v50;
LABEL_125:
                  if (v12->__r_.__value_.__r.__words[0] == 0x6957737472617473
                    && LOWORD(v12->__r_.__value_.__r.__words[1]) == 26740)
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, "string");
                    siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
                    if (v49 < 0)
                      operator delete(__p[0]);
                    std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
                    siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 1, (char *)__p);
                    if (v49 < 0)
                      operator delete(__p[0]);
                    v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
                    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
                      goto LABEL_130;
                  }
                  else if ((v5 & 0x80) == 0)
                  {
                    goto LABEL_130;
                  }
                  v25 = v50.__r_.__value_.__l.__size_;
                  v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_138:
                  if (v25 != 8)
                    goto LABEL_160;
                  goto LABEL_139;
                }
                if (LODWORD(v50.__r_.__value_.__l.__data_) == 1701867637 && v50.__r_.__value_.__s.__data_[4] == 114)
                  goto LABEL_117;
                v12 = &v50;
                v5 = 5;
LABEL_112:
                if (LODWORD(v12->__r_.__value_.__l.__data_) != 1702326124 || v12->__r_.__value_.__s.__data_[4] != 114)
                {
LABEL_120:
                  if ((v5 & 0x80) == 0)
                    goto LABEL_121;
                  v25 = v50.__r_.__value_.__l.__size_;
                  v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_124:
                  if (v25 != 10)
                    goto LABEL_138;
                  goto LABEL_125;
                }
LABEL_117:
                std::string::basic_string[abi:ne180100]<0>(__p, "string");
                siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
                if (v49 < 0)
                  operator delete(__p[0]);
                v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
                goto LABEL_120;
              }
              v12 = &v50;
LABEL_90:
              if (v12->__r_.__value_.__r.__words[0] == 0x6E496D6F646E6172 && v12->__r_.__value_.__s.__data_[8] == 116)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "minValue");
                siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
                if (v49 < 0)
                  operator delete(__p[0]);
                std::string::basic_string[abi:ne180100]<0>(__p, "maxValue");
                siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 1, (char *)__p);
                if (v49 < 0)
                  operator delete(__p[0]);
                v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
                if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_95;
              }
              else if ((v5 & 0x80) == 0)
              {
                goto LABEL_95;
              }
              v25 = v50.__r_.__value_.__l.__size_;
              v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_107:
              if (v25 != 5)
                goto LABEL_124;
              if (LODWORD(v12->__r_.__value_.__l.__data_) == 1701867637 && v12->__r_.__value_.__s.__data_[4] == 114)
                goto LABEL_117;
              goto LABEL_112;
            }
            v20 = &v50;
            goto LABEL_76;
          }
LABEL_74:
          if (v50.__r_.__value_.__l.__size_ != 3)
            goto LABEL_89;
          v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_76:
          v22 = LOWORD(v20->__r_.__value_.__l.__data_);
          v23 = v20->__r_.__value_.__s.__data_[2];
          if (v22 != 24941 || v23 != 120)
            goto LABEL_86;
        }
LABEL_81:
        std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
        siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
        if (v49 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
        siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 1, (char *)__p);
        if (v49 < 0)
          operator delete(__p[0]);
        v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
LABEL_86:
        if ((v5 & 0x80) == 0)
          goto LABEL_87;
LABEL_89:
        v25 = v50.__r_.__value_.__l.__size_;
        v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v50.__r_.__value_.__l.__size_ != 9)
          goto LABEL_107;
        goto LABEL_90;
      }
      goto LABEL_50;
    }
    if (v50.__r_.__value_.__l.__size_ != 4)
      goto LABEL_65;
    v6 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)v50.__r_.__value_.__l.__data_ != 1953657203)
      goto LABEL_13;
  }
  else
  {
    if (HIBYTE(v50.__r_.__value_.__r.__words[2]) == 3)
    {
      if ((LOWORD(v50.__r_.__value_.__l.__data_) != 25185 || v50.__r_.__value_.__s.__data_[2] != 115)
        && (LOWORD(v50.__r_.__value_.__l.__data_) != 25711 || v50.__r_.__value_.__s.__data_[2] != 100))
      {
LABEL_27:
        if (LOWORD(v50.__r_.__value_.__l.__data_) == 25697 && v50.__r_.__value_.__s.__data_[2] == 100)
          goto LABEL_81;
        v11 = &v50;
        v5 = 3;
        goto LABEL_58;
      }
      goto LABEL_50;
    }
    if (HIBYTE(v50.__r_.__value_.__r.__words[2]) != 4)
      goto LABEL_15;
    if (LODWORD(v50.__r_.__value_.__l.__data_) != 1953657203)
    {
      v6 = &v50;
LABEL_13:
      if (LODWORD(v6->__r_.__value_.__l.__data_) != 1852143205)
      {
        if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_15;
LABEL_53:
        size = v50.__r_.__value_.__l.__size_;
        if (v50.__r_.__value_.__l.__size_ == 3)
          goto LABEL_54;
LABEL_65:
        if (size == 6)
        {
          if (*(_DWORD *)v50.__r_.__value_.__l.__data_ != 1769367908
            || *(_WORD *)(v50.__r_.__value_.__r.__words[0] + 4) != 25956)
          {
            goto LABEL_74;
          }
        }
        else if (size != 8
               || *(_QWORD *)v50.__r_.__value_.__l.__data_ != 0x7463617274627573
               && *(_QWORD *)v50.__r_.__value_.__l.__data_ != 0x796C7069746C756DLL)
        {
          goto LABEL_74;
        }
        goto LABEL_81;
      }
    }
  }
LABEL_50:
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
  if (v49 < 0)
    operator delete(__p[0]);
  v5 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_53;
LABEL_15:
  if (v5 == 8)
  {
    if (v50.__r_.__value_.__r.__words[0] != 0x7463617274627573
      && v50.__r_.__value_.__r.__words[0] != 0x796C7069746C756DLL)
    {
      v12 = &v50;
      v5 = 8;
      goto LABEL_139;
    }
    goto LABEL_81;
  }
  if (v5 != 6)
  {
    if (v5 != 3)
      goto LABEL_63;
    goto LABEL_27;
  }
  if (LODWORD(v50.__r_.__value_.__l.__data_) == 1769367908 && WORD2(v50.__r_.__value_.__r.__words[0]) == 25956)
    goto LABEL_81;
LABEL_153:
  v31 = WORD2(v50.__r_.__value_.__r.__words[0]);
  v32 = LODWORD(v50.__r_.__value_.__l.__data_) == 1735288172;
  v33 = 26740;
LABEL_167:
  if (v32 && v31 == v33)
  {
LABEL_181:
    std::string::basic_string[abi:ne180100]<0>(__p, "variable");
    siri::intelligence::SetFunctionArgumentKey((uint64_t)this, 0, (char *)__p);
    if (v49 < 0)
      operator delete(__p[0]);
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_184:
      v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
LABEL_185:
      operator delete(v12);
    }
  }
LABEL_186:
  if (*((int *)this + 14) >= 1)
  {
    v39 = 0;
    do
    {
      v40 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, v39);
      siri::intelligence::UpdateFunctionToParameterDictionary(v40, v41);
      ++v39;
    }
    while (v39 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v42 = 0;
    do
    {
      v43 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 72, v42);
      siri::intelligence::UpdateFunctionToParameterDictionary(v43, v44);
      ++v42;
    }
    while (v42 < *((_DWORD *)this + 20));
  }
  if (*((int *)this + 26) >= 1)
  {
    v45 = 0;
    do
    {
      v46 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96, v45);
      siri::intelligence::UpdateFunctionToParameterDictionary(v46, v47);
      ++v45;
    }
    while (v45 < *((_DWORD *)this + 26));
  }
}

void sub_22AF0B898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::UpdateFunctionInCondition(siri::intelligence *this, protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  int v3;
  siri::intelligence *v4;
  std::string *v5;
  std::string *v6;
  siri::intelligence *v7;
  siri::intelligence *v8;
  std::string *v9;
  int v10;
  siri::intelligence *v11;
  protobuf::Intelligence_Condition_ConditionEntry *v12;
  int v13;
  siri::intelligence *v14;
  protobuf::Intelligence_Condition_ConditionEntry *v15;
  char v16;
  std::string v17[2];

  v3 = *((_DWORD *)this + 4);
  if ((v3 & 0x10) != 0)
  {
    v4 = (siri::intelligence *)*((_QWORD *)this + 13);
    if (!v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
      v5 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
      v4 = (siri::intelligence *)*((_QWORD *)this + 13);
      v3 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 4) = v3 | 0x10;
    siri::intelligence::UpdateFunctionToParameterDictionary(v4, a2);
    v3 = *((_DWORD *)this + 4);
  }
  if ((v3 & 0x20) != 0)
  {
    if (!*((_QWORD *)this + 14))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
      v6 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: !value || right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v6->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
      v3 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 4) = v3 | 0x10;
    v7 = (siri::intelligence *)*((_QWORD *)this + 13);
    if (!v7)
    {
      v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
      *((_QWORD *)this + 13) = v7;
    }
    siri::intelligence::UpdateFunctionToParameterDictionary(v7, a2);
    v3 = *((_DWORD *)this + 4);
  }
  if ((v3 & 8) != 0)
  {
    v8 = (siri::intelligence *)*((_QWORD *)this + 12);
    if (!v8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
      v9 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v9->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
      v8 = (siri::intelligence *)*((_QWORD *)this + 12);
      v3 = *((_DWORD *)this + 4);
    }
    *((_DWORD *)this + 4) = v3 | 8;
    siri::intelligence::UpdateFunctionInCondition(v8, a2);
  }
  if (*((int *)this + 8) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 24, v10);
      siri::intelligence::UpdateFunctionInCondition(v11, v12);
      ++v10;
    }
    while (v10 < *((_DWORD *)this + 8));
  }
  if (*((int *)this + 14) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (siri::intelligence *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 48, v13);
      siri::intelligence::UpdateFunctionInCondition(v14, v15);
      ++v13;
    }
    while (v13 < *((_DWORD *)this + 14));
  }
}

void sub_22AF0BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::SetFunctionArgumentKey(uint64_t a1, int a2, char *a3)
{
  protobuf::Intelligence_KeyValueParameter *v4;
  char *v5;

  if (*(_DWORD *)(a1 + 104) > a2)
  {
    v4 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1 + 96, a2);
    if (a3[23] >= 0)
      v5 = a3;
    else
      v5 = *(char **)a3;
    protobuf::Intelligence_KeyValueParameter::set_key(v4, v5);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_InputGroup_Intent **v3;
  protobuf::Intelligence_InputGroup_Intent *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_Intent **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_Intent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF0BBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_Intent **v3;
  protobuf::Intelligence_Intent *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_Intent **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Intent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF0BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1560);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1561);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF0BE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_NLParameters>::Merge(const protobuf::Intelligence_NLParameters *a1, protobuf::Intelligence_NLParameters *a2)
{
  protobuf::Intelligence_NLParameters::MergeFrom(a2, a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,void (*)(protobuf::Intelligence *)>>,std::pair<std::string,void (*)(protobuf::Intelligence *)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0)
        operator delete(*(void **)(i - 32));
    }
  }
  return a1;
}

void std::vector<std::pair<std::string,void (*)(protobuf::Intelligence *)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_22AF0BFA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22AF0C0BC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::TestCase::TestCase(std::string *this, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  const protobuf::FlowTest_Step *v13;
  std::string::pointer data;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  std::string::size_type v22;
  std::string::size_type size;
  unint64_t v24;
  std::string::size_type v25;
  unint64_t v26;
  int64x2_t v27;
  std::string::pointer v28;
  int64x2_t *v30;
  char *v31;
  int64x2_t v32;
  std::string::size_type v33;
  std::string *v34;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  v30 = (int64x2_t *)&this[4].__r_.__value_.__r.__words[1];
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  if (a2)
  {
    std::string::operator=(this + 2, *(const std::string **)(a2 + 48));
    std::string::operator=(this + 3, *(const std::string **)(a2 + 56));
    v9 = *(_DWORD *)(a2 + 16);
    v10 = (v9 & 4) == 0 || *(_BYTE *)(a2 + 64) != 0;
    this[4].__r_.__value_.__s.__data_[0] = v10;
    v11 = (v9 & 8) != 0 ? *(_DWORD *)(a2 + 68) : 1;
    HIDWORD(this[4].__r_.__value_.__r.__words[0]) = v11;
    if (*(int *)(a2 + 32) >= 1)
    {
      v12 = 0;
      do
      {
        v13 = (const protobuf::FlowTest_Step *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>(a2 + 24, v12);
        v15 = this[4].__r_.__value_.__r.__words[2];
        data = this[5].__r_.__value_.__l.__data_;
        if (v15 >= (unint64_t)data)
        {
          v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - v30->i64[0]) >> 4);
          v18 = v17 + 1;
          if (v17 + 1 > 0x333333333333333)
            std::vector<siri::intelligence::TestParseError>::__throw_length_error[abi:ne180100]();
          v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&data[-v30->i64[0]] >> 4);
          if (2 * v19 > v18)
            v18 = 2 * v19;
          if (v19 >= 0x199999999999999)
            v20 = 0x333333333333333;
          else
            v20 = v18;
          v34 = this + 5;
          if (v20)
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>((uint64_t)&this[5], v20);
          else
            v21 = 0;
          v31 = v21;
          v32.i64[0] = (uint64_t)&v21[80 * v17];
          v32.i64[1] = v32.i64[0];
          v33 = (std::string::size_type)&v21[80 * v20];
          protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)v32.i64[0], v13);
          v22 = v32.i64[0];
          v16 = v32.i64[1] + 80;
          v32.i64[1] += 80;
          size = this[4].__r_.__value_.__l.__size_;
          v24 = this[4].__r_.__value_.__r.__words[2];
          if (v24 == size)
          {
            v27 = vdupq_n_s64(v24);
          }
          else
          {
            do
            {
              v25 = v22 - 80;
              protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)(v22 - 80));
              v26 = v24 - 80;
              if (v22 != v24)
                protobuf::FlowTest_Step::InternalSwap((protobuf::FlowTest_Step *)(v22 - 80), (protobuf::FlowTest_Step *)(v24 - 80));
              v24 -= 80;
              v22 -= 80;
            }
            while (v26 != size);
            v27 = *v30;
            v16 = v32.i64[1];
            v22 = v25;
          }
          this[4].__r_.__value_.__l.__size_ = v22;
          this[4].__r_.__value_.__r.__words[2] = v16;
          v32 = v27;
          v28 = this[5].__r_.__value_.__l.__data_;
          this[5].__r_.__value_.__r.__words[0] = v33;
          v33 = (std::string::size_type)v28;
          v31 = (char *)v27.i64[0];
          std::__split_buffer<protobuf::FlowTest_Step>::~__split_buffer((uint64_t)&v31);
        }
        else
        {
          protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)this[4].__r_.__value_.__r.__words[2], v13);
          v16 = v15 + 80;
          this[4].__r_.__value_.__r.__words[2] = v15 + 80;
        }
        this[4].__r_.__value_.__r.__words[2] = v16;
        ++v12;
      }
      while (v12 < *(_DWORD *)(a2 + 32));
    }
  }
  return this;
}

void sub_22AF0C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCase::GetTemplateDir(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::intelligence::TestCase::GetFlowId(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void siri::intelligence::TestCase::GetFlowFilename(siri::intelligence::TestCase *this@<X0>, uint64_t a2@<X8>)
{
  siri::intelligence::FindFileForFlowId((uint64_t)this, (unsigned __int8 *)this + 24, a2);
}

void siri::intelligence::TestCase::GetTestFilename(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, ".flowtest");
  std::string::basic_string[abi:ne180100]<0>(v4, ".flow");
  siri::intelligence::Configuration::GetPathFromFlowId((unsigned __int8 *)this + 24, (uint64_t)v4, v6);
  siri::intelligence::JoinPath((uint64_t)this, (uint64_t)v6, (uint64_t)__p);
  siri::intelligence::ChangeExtension((uint64_t)__p, (uint64_t)v10, a2);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_22AF0C54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCase::GetName(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void siri::intelligence::TestCase::GetDescription(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

_QWORD *siri::intelligence::TestCase::GetSteps@<X0>(siri::intelligence::TestCase *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<protobuf::FlowTest_Step>::__init_with_size[abi:ne180100]<protobuf::FlowTest_Step*,protobuf::FlowTest_Step*>(a2, *((_QWORD *)this + 13), *((_QWORD *)this + 14), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 4));
}

uint64_t siri::intelligence::TestCase::GetRepeat(siri::intelligence::TestCase *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t siri::intelligence::TestCase::IsEnabled(siri::intelligence::TestCase *this)
{
  return *((unsigned __int8 *)this + 96);
}

BOOL siri::intelligence::TestCase::ShouldSkip(siri::intelligence::TestCase *this)
{
  return *((_BYTE *)this + 96) == 0;
}

_QWORD *siri::intelligence::TestCase::GetSkipReason@<X0>(siri::intelligence::TestCase *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*((_BYTE *)this + 96))
    v2 = (char *)&str_2_1;
  else
    v2 = "test is disabled";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void siri::intelligence::TestCase::ToString(siri::intelligence::TestCase *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *v5;
  char *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string __p;
  std::string v11;

  if (*((char *)this + 47) >= 0)
    v4 = *((unsigned __int8 *)this + 47);
  else
    v4 = *((_QWORD *)this + 4);
  v5 = &v11;
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v4 + 2);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 47) >= 0)
      v6 = (char *)this + 24;
    else
      v6 = (char *)*((_QWORD *)this + 3);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ": ");
  if (*((char *)this + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  else
    __p = *(std::string *)((_BYTE *)this + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_22AF0C798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<protobuf::FlowTest_Step>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 80);
    *(_QWORD *)(a1 + 16) = i - 80;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t YAML::Scanner::SimpleKey::SimpleKey(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

_QWORD *YAML::Scanner::SimpleKey::Validate(_QWORD *this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = this[3];
  if (v1)
    *(_DWORD *)(v1 + 8) = 0;
  v2 = (_DWORD *)this[4];
  if (v2)
    *v2 = 0;
  v3 = (_DWORD *)this[5];
  if (v3)
    *v3 = 0;
  return this;
}

_QWORD *YAML::Scanner::SimpleKey::Invalidate(_QWORD *this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = this[3];
  if (v1)
    *(_DWORD *)(v1 + 8) = 1;
  v2 = (_DWORD *)this[4];
  if (v2)
    *v2 = 1;
  v3 = (_DWORD *)this[5];
  if (v3)
    *v3 = 1;
  return this;
}

BOOL YAML::Scanner::CanInsertPotentialSimpleKey(YAML::Scanner *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 146))
    return 0;
  v1 = *((_QWORD *)this + 24);
  return !v1
      || *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((v1 + *((_QWORD *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((_QWORD *)this + 23) - 1) % 0x55uLL)
                   + 16) != *((_QWORD *)this + 39);
}

BOOL YAML::Scanner::ExistsActiveSimpleKey(YAML::Scanner *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  return v1
      && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((v1 + *((_QWORD *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((_QWORD *)this + 23) - 1) % 0x55uLL)
                   + 16) == *((_QWORD *)this + 39);
}

double YAML::Scanner::InsertPotentialSimpleKey(YAML::Scanner *this)
{
  double result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  __int128 v9;
  int v10;
  void *__p[2];
  _OWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  void **v20;

  if (YAML::Scanner::CanInsertPotentialSimpleKey(this))
  {
    v3 = *((_DWORD *)this + 4);
    v4 = *((_QWORD *)this + 39);
    v14 = *((_QWORD *)this + 1);
    v15 = v3;
    v16 = v4;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    if (!v4)
    {
      v5 = YAML::Scanner::PushIndentTo((uint64_t)this, v3, 0);
      v17 = v5;
      if (v5)
      {
        *(_DWORD *)(v5 + 8) = 2;
        v18 = *(_DWORD **)(v5 + 16);
        *v18 = 2;
      }
    }
    v6 = *((_QWORD *)this + 1);
    v7 = *((_DWORD *)this + 4);
    *(_QWORD *)&v9 = 0xE00000000;
    *((_QWORD *)&v9 + 1) = v6;
    v10 = v7;
    *(_OWORD *)__p = 0u;
    memset(v12, 0, sizeof(v12));
    v13 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
    v20 = (void **)v12 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SBYTE7(v12[0]) < 0)
      operator delete(__p[0]);
    v8 = *((_QWORD *)this + 17) + *((_QWORD *)this + 16) - 1;
    v19 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * (v8 / 0x33)) + 80 * (v8 % 0x33));
    *v19 = 2;
    *(_QWORD *)&result = std::deque<YAML::Scanner::SimpleKey>::push_back((_QWORD *)this + 19, (uint64_t)&v14).n128_u64[0];
  }
  return result;
}

void sub_22AF0CA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Token::~Token(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

_QWORD *YAML::Scanner::InvalidateSimpleKey(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  v1 = this[24];
  if (v1)
  {
    v2 = v1 - 1;
    v3 = this[23] + v1 - 1;
    v4 = *(_QWORD *)(this[20] + 8 * (v3 / 0x55));
    v5 = v3 % 0x55;
    if (*(_QWORD *)(v4 + 48 * (v3 % 0x55) + 16) == this[39])
    {
      v6 = *(_QWORD *)(v4 + 48 * v5 + 24);
      if (v6)
        *(_DWORD *)(v6 + 8) = 1;
      v7 = *(_DWORD **)(v4 + 48 * v5 + 32);
      if (v7)
        *v7 = 1;
      v8 = *(_DWORD **)(v4 + 48 * v5 + 40);
      if (v8)
        *v8 = 1;
      this[24] = v2;
      return (_QWORD *)std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100](this + 19, 1);
    }
  }
  return this;
}

uint64_t YAML::Scanner::VerifySimpleKey(YAML::Scanner *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((*((_QWORD *)this + 23) + v3) / 0x55uLL))
     + 48 * ((*((_QWORD *)this + 23) + v3) % 0x55uLL);
  if (*(_QWORD *)(v4 + 16) != *((_QWORD *)this + 39))
    return 0;
  v6 = *(_QWORD *)(v4 + 24);
  v5 = *(_DWORD **)(v4 + 32);
  v7 = *(int **)(v4 + 40);
  v8 = *(_DWORD *)v4;
  v9 = *(_DWORD *)(v4 + 4);
  *((_QWORD *)this + 24) = v3;
  std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19, 1);
  if (*((_DWORD *)this + 3) == v9 && *((_DWORD *)this + 2) - v8 <= 1024)
  {
    if (v6)
      *(_DWORD *)(v6 + 8) = 0;
    if (v5)
      *v5 = 0;
    result = 1;
    if (v7)
    {
      v11 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (v6)
      *(_DWORD *)(v6 + 8) = 1;
    if (v5)
      *v5 = 1;
    result = 0;
    if (v7)
    {
      v11 = 1;
LABEL_18:
      *v7 = v11;
    }
  }
  return result;
}

uint64_t YAML::Scanner::PopAllSimpleKeys(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(this + 192);
  if (v1)
  {
    v2 = this;
    v3 = (_QWORD *)(this + 152);
    do
    {
      *(_QWORD *)(v2 + 192) = v1 - 1;
      this = std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      v1 = *(_QWORD *)(v2 + 192);
    }
    while (v1);
  }
  return this;
}

__n128 std::deque<YAML::Token>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<YAML::Token>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v8 = v9;
  v10 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  result = (__n128)a2[3];
  *(__n128 *)(v8 + 48) = result;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void std::deque<YAML::Token>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x33;
  v4 = v2 - 51;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<YAML::Token *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<YAML::Token *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22AF0D0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<YAML::Token *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<YAML::Token *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

__n128 std::deque<YAML::Scanner::SimpleKey>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<YAML::Scanner::SimpleKey>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)v8 = result;
  ++a1[5];
  return result;
}

void std::deque<YAML::Scanner::SimpleKey>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0xFF0uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v28);
  v31 = v30;
  v32 = operator new(0xFF0uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_22AF0DA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 85 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x55)
    a2 = 1;
  if (v5 < 0xAA)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void __cxx_global_array_dtor()
{
  uint64_t v0;

  v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0)
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void siri::intelligence::Activity::GetId(siri::intelligence::Activity *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

std::string *siri::intelligence::Activity::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::intelligence::Activity::GetName(siri::intelligence::Activity *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::intelligence::Activity::SetInputGroup(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::intelligence::Activity::GetInputGroup(siri::intelligence::Activity *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void siri::intelligence::Activity::SetResponseIds(std::vector<std::string> *a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = a1 + 3;
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

std::string *siri::intelligence::Activity::GetResponseIds@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[9], this[10], 0xAAAAAAAAAAAAAAABLL * (((char *)this[10] - (char *)this[9]) >> 3));
}

uint64_t siri::intelligence::Activity::UseGlobalInputGroup(siri::intelligence::Activity *this)
{
  return 1;
}

void YAML::Scanner::ScanDirective(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  std::string::value_type v6;
  YAML::Exp *v7;
  YAML::Exp *v8;
  int *v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  int v14;
  unsigned __int8 v15;
  std::string::value_type v16;
  YAML::Exp *v17;
  YAML::Exp *v18;
  int *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  YAML::Exp *v23;
  int *v24;
  int *v25;
  std::string v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  int v33;
  _QWORD v34[4];
  std::string::size_type *p_size;
  YAML::Scanner *v36;

  memset(v34, 0, 24);
  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19, 1);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_DWORD *)this + 4);
  *(_QWORD *)&v28 = 0;
  *((_QWORD *)&v28 + 1) = v3;
  v29 = v4;
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  YAML::Stream::get(this);
  while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
       || *((_QWORD *)this + 8)
       && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
  {
    if ((v5 & 1) == 0)
    {
      if ((_DWORD)v7)
      {
        v8 = (YAML::Exp *)YAML::Exp::Blank(v7);
        v9 = (int *)YAML::Exp::Break(v8);
        YAML::operator|((int *)v8, v9, (uint64_t)&YAML::Exp::BlankOrBreak(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlankOrBreak(void)::e, &dword_22AEC9000);
      }
    }
    v26.__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&v26) & 0x80000000) == 0)break;
    v6 = YAML::Stream::get(this);
    std::string::push_back((std::string *)__p, v6);
  }
  while (1)
  {
    while (1)
    {
      if ((v10 & 1) == 0)
      {
        if ((_DWORD)v23)
        {
          v24 = YAML::Exp::Space(v23);
          v25 = YAML::Exp::Tab((YAML::Exp *)v24);
          YAML::operator|(v24, v25, (uint64_t)&YAML::Exp::Blank(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Blank(void)::e, &dword_22AEC9000);
        }
      }
      v26.__r_.__value_.__r.__words[0] = 0;
      v26.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      v11 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Blank(void)::e, (unint64_t *)&v26);
      if ((v11 & 0x80000000) != 0)
        break;
      YAML::Stream::get(this);
    }
    if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
      && (!*((_QWORD *)this + 8)
       || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4))
    {
      break;
    }
    v12 = YAML::Exp::Break((YAML::Exp *)v11);
    v26.__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v12, (unint64_t *)&v26) & 0x80000000) == 0)
      break;
    {
      YAML::Exp::Comment(void)::e = 1;
      word_255B57A4C = 35;
      qword_255B57A58 = 0;
      unk_255B57A60 = 0;
      qword_255B57A50 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_22AEC9000);
    }
    LODWORD(v26.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
    WORD2(v26.__r_.__value_.__r.__words[0]) = word_255B57A4C;
    v27 = 0;
    *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v26.__r_.__value_.__l.__size_, (int *)qword_255B57A50, (int *)qword_255B57A58, (qword_255B57A58 - qword_255B57A50) >> 5);
    p_size = 0;
    v36 = this;
    v14 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v26, (unint64_t *)&p_size);
    p_size = &v26.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    if ((v14 & 0x80000000) == 0)
      break;
    memset(&v26, 0, sizeof(v26));
    while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
         || *((_QWORD *)this + 8)
         && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
    {
      if ((v15 & 1) == 0)
      {
        if ((_DWORD)v17)
        {
          v18 = (YAML::Exp *)YAML::Exp::Blank(v17);
          v19 = (int *)YAML::Exp::Break(v18);
          YAML::operator|((int *)v18, v19, (uint64_t)&YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlankOrBreak(void)::e, &dword_22AEC9000);
        }
      }
      p_size = 0;
      v36 = this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&p_size) & 0x80000000) == 0)break;
      v16 = YAML::Stream::get(this);
      std::string::push_back(&v26, v16);
    }
    v20 = (_OWORD *)v32;
    if ((unint64_t)v32 >= *((_QWORD *)&v32 + 1))
    {
      v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v31 + 1, (__int128 *)&v26);
    }
    else
    {
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v32, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else
      {
        v21 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
        *v20 = v21;
      }
      v22 = (uint64_t)v20 + 24;
    }
    *(_QWORD *)&v32 = v22;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v28);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v28 = v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_22AF0E0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  YAML::Token::~Token((void **)&a17);
  a17 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void *YAML::Exp::BlankOrBreak(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  YAML::Exp *v4;
  int *v5;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = (YAML::Exp *)YAML::Exp::Blank(v3);
      v5 = (int *)YAML::Exp::Break(v4);
      YAML::operator|((int *)v4, v5, (uint64_t)&YAML::Exp::BlankOrBreak(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlankOrBreak(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::BlankOrBreak(void)::e;
}

void sub_22AF0E228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *YAML::Exp::Blank(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  int *v5;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = YAML::Exp::Space(v3);
      v5 = YAML::Exp::Tab((YAML::Exp *)v4);
      YAML::operator|(v4, v5, (uint64_t)&YAML::Exp::Blank(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Blank(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::Blank(void)::e;
}

void sub_22AF0E2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *YAML::Exp::Break(YAML::Exp *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v4;
  void **v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  _QWORD v9[3];
  void **v10;

  {
    v7 = 1;
    v8 = 10;
    memset(v9, 0, sizeof(v9));
    std::string::basic_string[abi:ne180100]<0>(__p, "\r\n");
    YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 6);
    YAML::operator|(&v7, (int *)&v5, (uint64_t)&YAML::Exp::Break(void)::e);
    v10 = (void **)&v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
    if (v4 < 0)
      operator delete(__p[0]);
    v5 = (void **)v9;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Break(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::Break(void)::e;
}

void sub_22AF0E3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = v15 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  if (a14 < 0)
    operator delete(__p);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

_QWORD *YAML::Exp::Comment(YAML::Exp *this)
{
  unsigned __int8 v1;
  int v3;
  YAML::Exp *v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    this = v4;
    if (v3)
    {
      YAML::Exp::Comment(void)::e = 1;
      word_255B57A4C = 35;
      qword_255B57A58 = 0;
      unk_255B57A60 = 0;
      qword_255B57A50 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_22AEC9000);
      this = v4;
    }
  }
  *(_DWORD *)this = YAML::Exp::Comment(void)::e;
  *((_WORD *)this + 2) = word_255B57A4C;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  return std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((_QWORD *)this + 1, (int *)qword_255B57A50, (int *)qword_255B57A58, (qword_255B57A58 - qword_255B57A50) >> 5);
}

void YAML::RegEx::~RegEx(YAML::RegEx *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void YAML::Scanner::ScanDocStart(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  void **v11;

  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19, 1);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = 3;
  v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(_QWORD *)&v6 = 0x100000000;
  *((_QWORD *)&v6 + 1) = v3;
  v7 = v5;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v6);
  v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0E608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDocEnd(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  void **v11;

  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19, 1);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = 3;
  v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(_QWORD *)&v6 = 0x200000000;
  *((_QWORD *)&v6 + 1) = v3;
  v7 = v5;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v6);
  v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0E6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowStart(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  int v4;
  __int128 v5;
  int v6;
  void *__p[2];
  _OWORD v8[2];
  int v9;
  _BOOL4 v10;
  void **v11;

  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  v10 = YAML::Stream::get(this) == 91;
  std::deque<YAML::Scanner::FLOW_MARKER>::push_back((_QWORD *)this + 34, &v10);
  if (v10)
    v4 = 8;
  else
    v4 = 9;
  LODWORD(v5) = 0;
  DWORD1(v5) = v4;
  *((_QWORD *)&v5 + 1) = v2;
  v6 = v3;
  *(_OWORD *)__p = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v5);
  v11 = (void **)v8 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v8[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0E7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  YAML::Token::~Token(&a9);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowEnd(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *exception;
  int v17;
  _QWORD *v18;
  __int128 v19;
  int v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  int v24;
  void **v25;
  int v26;
  void **v27;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v17 = *((_DWORD *)this + 4);
    v25 = (void **)*((_QWORD *)this + 1);
    v26 = v17;
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)exception, &v25, (uint64_t)&v19);
    *exception = &unk_24F5439A0;
  }
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((_QWORD *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 1);
      v5 = *((_DWORD *)this + 4);
      *(_QWORD *)&v19 = 0xF00000000;
      *((_QWORD *)&v19 + 1) = v4;
      v20 = v5;
      *(_OWORD *)__p = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v19);
      v25 = (void **)&v22 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (SBYTE7(v22) < 0)
        operator delete(__p[0]);
      goto LABEL_9;
    }
    v6 = *((_QWORD *)this + 39) + *((_QWORD *)this + 38) - 1;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1)
    YAML::Scanner::InvalidateSimpleKey(this);
LABEL_9:
  *((_WORD *)this + 73) = 256;
  v7 = *((_DWORD *)this + 4);
  v25 = (void **)*((_QWORD *)this + 1);
  v26 = v7;
  v8 = YAML::Stream::get(this);
  v9 = *((_QWORD *)this + 39) - 1;
  v10 = v9 + *((_QWORD *)this + 38);
  v11 = *((_QWORD *)this + 35);
  if (*(_DWORD *)(*(_QWORD *)(v11 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF)) != (v8 == 93))
  {
    v18 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)v18, &v25, (uint64_t)&v19);
    *v18 = &unk_24F5439A0;
  }
  v12 = v8;
  v13 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 39) = v9;
  if (v13 == v11)
    v14 = 0;
  else
    v14 = ((v13 - v11) << 7) - 1;
  if (v14 - v10 >= 0x800)
  {
    operator delete(*(void **)(v13 - 8));
    *((_QWORD *)this + 36) -= 8;
  }
  if (v12 == 93)
    v15 = 10;
  else
    v15 = 11;
  LODWORD(v19) = 0;
  DWORD1(v19) = v15;
  *((_QWORD *)&v19 + 1) = v25;
  v20 = v26;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v19);
  v27 = (void **)&v22 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
}

void sub_22AF0EA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  YAML::Token::~Token(&__p);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowEntry(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  int v14;
  void **v15;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
    goto LABEL_9;
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((_QWORD *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 1);
      v5 = *((_DWORD *)this + 4);
      *(_QWORD *)&v9 = 0xF00000000;
      *((_QWORD *)&v9 + 1) = v4;
      v10 = v5;
      *(_OWORD *)__p = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
      v15 = (void **)&v12 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
      if (SBYTE7(v12) < 0)
        operator delete(__p[0]);
      goto LABEL_9;
    }
    v6 = *((_QWORD *)this + 39) + *((_QWORD *)this + 38) - 1;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1)
    YAML::Scanner::InvalidateSimpleKey(this);
LABEL_9:
  *((_WORD *)this + 73) = 1;
  v7 = *((_QWORD *)this + 1);
  v8 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v9 = 0xD00000000;
  *((_QWORD *)&v9 + 1) = v7;
  v10 = v8;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
  v15 = (void **)&v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
}

void sub_22AF0EC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockEntry(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  _QWORD *exception;
  int v5;
  _QWORD *v6;
  int v7;
  __int128 v8;
  int v9;
  void *__p[2];
  _OWORD v11[2];
  int v12;
  void **v13;
  int v14;

  if (*((_QWORD *)this + 39))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v5 = *((_DWORD *)this + 4);
    v13 = (void **)*((_QWORD *)this + 1);
    v14 = v5;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)exception, &v13, (uint64_t)&v8);
    *exception = &unk_24F5439A0;
  }
  if (!*((_BYTE *)this + 146))
  {
    v6 = __cxa_allocate_exception(0x38uLL);
    v7 = *((_DWORD *)this + 4);
    v13 = (void **)*((_QWORD *)this + 1);
    v14 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)v6, &v13, (uint64_t)&v8);
    *v6 = &unk_24F5439A0;
  }
  YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 1);
  *((_WORD *)this + 73) = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v8 = 0x700000000;
  *((_QWORD *)&v8 + 1) = v2;
  v9 = v3;
  *(_OWORD *)__p = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v8);
  v13 = (void **)v11 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SBYTE7(v11[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0EE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanKey(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *exception;
  YAML::Scanner *v6;
  _QWORD *v7;
  void **v8;
  __int128 v9;
  int v10;
  void *__p[2];
  _OWORD v12[2];
  int v13;
  void **v14;
  int v15;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
  {
    if (!*((_BYTE *)this + 146))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v6 = this;
      v7 = exception;
      v8 = (void **)*((_QWORD *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 4);
      v14 = v8;
      v15 = (int)v6;
      std::string::basic_string[abi:ne180100]<0>(&v9, "illegal map key");
      YAML::Exception::Exception((uint64_t)v7, &v14, (uint64_t)&v9);
      *v7 = &unk_24F5439A0;
    }
    YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 0);
    v2 = *((_QWORD *)this + 39);
  }
  *((_BYTE *)this + 146) = v2 == 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v9 = 0xE00000000;
  *((_QWORD *)&v9 + 1) = v3;
  v10 = v4;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
  v14 = (void **)v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SBYTE7(v12[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0EF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanValue(YAML::Scanner *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *exception;
  YAML::Scanner *v7;
  _QWORD *v8;
  void **v9;
  __int128 v10;
  int v11;
  void *__p[2];
  _OWORD v13[2];
  int v14;
  void **v15;
  int v16;

  v2 = YAML::Scanner::VerifySimpleKey(this);
  *((_BYTE *)this + 147) = 0;
  if (v2)
  {
    *((_BYTE *)this + 146) = 0;
  }
  else
  {
    v3 = *((_QWORD *)this + 39);
    if (!v3)
    {
      if (!*((_BYTE *)this + 146))
      {
        exception = __cxa_allocate_exception(0x38uLL);
        v7 = this;
        v8 = exception;
        v9 = (void **)*((_QWORD *)v7 + 1);
        LODWORD(v7) = *((_DWORD *)v7 + 4);
        v15 = v9;
        v16 = (int)v7;
        std::string::basic_string[abi:ne180100]<0>(&v10, "illegal map value");
        YAML::Exception::Exception((uint64_t)v8, &v15, (uint64_t)&v10);
        *v8 = &unk_24F5439A0;
      }
      YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 0);
      v3 = *((_QWORD *)this + 39);
    }
    *((_BYTE *)this + 146) = v3 == 0;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v10 = 0xF00000000;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = v5;
  *(_OWORD *)__p = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v10);
  v15 = (void **)v13 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v13[0]) < 0)
    operator delete(__p[0]);
}

void sub_22AF0F11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanAnchorOrAlias(void **this)
{
  void *v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  std::string::value_type v6;
  YAML::Exp *v7;
  int *v8;
  std::string::size_type size;
  unsigned __int8 v10;
  int v11;
  _QWORD *exception;
  int v13;
  char *v14;
  YAML::Exp *v15;
  int *v16;
  _QWORD *v17;
  int v18;
  char *v19;
  __int128 v20;
  int v21;
  void *v22[2];
  _OWORD v23[2];
  int v24;
  std::string __str;
  void *__p[2];
  char v27;
  void *v28;
  int v29;
  char v30;
  void **v31[2];

  memset(&__str, 0, sizeof(__str));
  YAML::Scanner::InsertPotentialSimpleKey((YAML::Scanner *)this);
  *((_WORD *)this + 73) = 0;
  v2 = this[1];
  v3 = *((_DWORD *)this + 4);
  v4 = YAML::Stream::get((YAML::Stream *)this);
  while (!*(_DWORD *)((char *)*this + *(_QWORD *)(*(_QWORD *)*this - 24) + 32)
       || this[8]
       && *(_BYTE *)(*(_QWORD *)((char *)this[4] + (((unint64_t)this[7] >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((unint64_t)this[7] & 0xFFF)) != 4)
  {
    v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_7);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_7))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "[]{},");
      v7 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v28, (char *)__p, 3);
      v8 = (int *)YAML::Exp::BlankOrBreak(v7);
      YAML::operator|((int *)&v28, v8, (uint64_t)&v20);
      YAML::operator!((int *)&v20, (uint64_t)&unk_253F46270);
      v31[0] = (void **)&v20 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v31);
      v31[0] = (void **)&v29;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v31);
      if (v27 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46270, &dword_22AEC9000);
      __cxa_guard_release(&_MergedGlobals_7);
    }
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_253F46270, (unint64_t *)&v20) & 0x80000000) != 0)
      break;
    v6 = YAML::Stream::get((YAML::Stream *)this);
    std::string::push_back(&__str, v6);
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (!size)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v13 = *((_DWORD *)this + 4);
    v28 = this[1];
    v29 = v13;
    if (v4 == 42)
      v14 = "alias not found after *";
    else
      v14 = "anchor not found after &";
    std::string::basic_string[abi:ne180100]<0>(&v20, v14);
    YAML::Exception::Exception((uint64_t)exception, &v28, (uint64_t)&v20);
    *exception = &unk_24F5439A0;
  }
  if (!*(_DWORD *)((char *)*this + *(_QWORD *)(*(_QWORD *)*this - 24) + 32)
    || this[8]
    && *(_BYTE *)(*(_QWORD *)((char *)this[4] + (((unint64_t)this[7] >> 9) & 0x7FFFFFFFFFFFF8))
                + ((unint64_t)this[7] & 0xFFF)) != 4)
  {
    v10 = atomic_load((unsigned __int8 *)&qword_253F46240);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_253F46240))
    {
      v15 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v20, (char *)&v28, 3);
      v16 = (int *)YAML::Exp::BlankOrBreak(v15);
      YAML::operator|((int *)&v20, v16, (uint64_t)&unk_253F46290);
      __p[0] = (char *)&v20 + 8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v30 < 0)
        operator delete(v28);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46290, &dword_22AEC9000);
      __cxa_guard_release(&qword_253F46240);
    }
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_253F46290, (unint64_t *)&v20) & 0x80000000) != 0)
    {
      v17 = __cxa_allocate_exception(0x38uLL);
      v18 = *((_DWORD *)this + 4);
      v28 = this[1];
      v29 = v18;
      if (v4 == 42)
        v19 = "illegal character found while scanning alias";
      else
        v19 = "illegal character found while scanning anchor";
      std::string::basic_string[abi:ne180100]<0>(&v20, v19);
      YAML::Exception::Exception((uint64_t)v17, &v28, (uint64_t)&v20);
      *v17 = &unk_24F5439A0;
    }
  }
  if (v4 == 42)
    v11 = 17;
  else
    v11 = 16;
  LODWORD(v20) = 0;
  DWORD1(v20) = v11;
  *((_QWORD *)&v20 + 1) = v2;
  v21 = v3;
  *(_OWORD *)v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  std::string::operator=((std::string *)v22, &__str);
  std::deque<YAML::Token>::push_back(this + 12, &v20);
  v28 = (char *)v23 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SBYTE7(v23[0]) < 0)
    operator delete(v22[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AF0F598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F46240);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanTag(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  char v11;
  std::string __str;
  __int128 v13;
  int v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  int v18;

  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  *(_QWORD *)&v13 = 0x1200000000;
  *((_QWORD *)&v13 + 1) = v2;
  v14 = v3;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  YAML::Stream::get(this);
  v4 = *((_QWORD *)this + 8);
  if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
    if (!v4
      || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4)
    {
      goto LABEL_9;
    }
  }
  else if (!v4)
  {
    goto LABEL_9;
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) == 60)
  {
    YAML::ScanVerbatimTag(this, &__str);
    std::string::operator=((std::string *)__p, &__str);
    v18 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
LABEL_9:
  v11 = 0;
  YAML::ScanTagHandle(this, (YAML::Stream *)&v11, &__str);
  std::string::operator=((std::string *)__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v5 = (void *)BYTE7(v16);
  if (!v11)
  {
    if (SBYTE7(v16) < 0)
      v5 = __p[1];
    if (v5)
      v9 = 1;
    else
      v9 = 4;
    goto LABEL_33;
  }
  if (SBYTE7(v16) < 0)
    v5 = __p[1];
  if (v5)
    v6 = 1;
  else
    v6 = 2;
  v18 = v6;
  if (*((_QWORD *)this + 8)
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) == 33)
  {
    YAML::Stream::get(this);
    YAML::ScanTagSuffix((std::string *)this, (uint64_t)&__str);
    v7 = (_OWORD *)v17;
    if ((unint64_t)v17 >= *((_QWORD *)&v17 + 1))
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v16 + 1, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v17, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *v7 = v8;
      }
      v10 = (uint64_t)v7 + 24;
    }
    *(_QWORD *)&v17 = v10;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v9 = 3;
LABEL_33:
    v18 = v9;
  }
LABEL_34:
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
}

void sub_22AF0F904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0)
    operator delete(__p);
  YAML::Token::~Token(&a16);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanPlainScalar(YAML::Scanner *this)
{
  unsigned __int8 v2;
  void *v3;
  YAML::Exp *v4;
  YAML::Exp *v5;
  int *v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  std::string::size_type v10;
  int v11;
  YAML::Exp *v12;
  YAML::Exp *v13;
  int *v14;
  __guard *v15;
  std::string v16;
  void *__p[2];
  _OWORD v18[2];
  int v19;
  void *v20;
  char v21;
  int v22;
  __int16 v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  std::string __str;
  void **v31;
  _BYTE v32[24];
  std::string::size_type *p_size;

  memset(&__str, 0, sizeof(__str));
  v24 = 0;
  v23 = 0;
  v29 = 0;
  if (*((_QWORD *)this + 39))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_253F46248);
    v3 = &unk_253F462B0;
    if ((v2 & 1) == 0)
    {
      v15 = &qword_253F46248;
      v4 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F46248);
      if ((_DWORD)v4)
      {
        v5 = (YAML::Exp *)YAML::Exp::EndScalarInFlow(v4);
        v6 = (int *)YAML::Exp::BlankOrBreak(v5);
        YAML::Exp::Comment((YAML::Exp *)&v31);
        YAML::operator+(v6, (int *)&v31, (uint64_t)&v16);
        YAML::operator|((int *)v5, (int *)&v16, (uint64_t)&unk_253F462B0);
        p_size = &v16.__r_.__value_.__l.__size_;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
        p_size = (std::string::size_type *)v32;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
        v3 = &unk_253F462B0;
LABEL_17:
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, v3, &dword_22AEC9000);
        __cxa_guard_release(v15);
      }
    }
  }
  else
  {
    v7 = atomic_load((unsigned __int8 *)&qword_253F46250);
    v3 = &unk_253F462D0;
    if ((v7 & 1) == 0)
    {
      v15 = &qword_253F46250;
      v12 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F46250);
      if ((_DWORD)v12)
      {
        v13 = (YAML::Exp *)YAML::Exp::EndScalar(v12);
        v14 = (int *)YAML::Exp::BlankOrBreak(v13);
        YAML::Exp::Comment((YAML::Exp *)&v31);
        YAML::operator+(v14, (int *)&v31, (uint64_t)&v16);
        YAML::operator|((int *)v13, (int *)&v16, (uint64_t)&unk_253F462D0);
        p_size = &v16.__r_.__value_.__l.__size_;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
        p_size = (std::string::size_type *)v32;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
        v3 = &unk_253F462D0;
        goto LABEL_17;
      }
    }
  }
  v8 = 0;
  v20 = v3;
  v21 = 0;
  if (!*((_QWORD *)this + 39))
  {
    v9 = *((_QWORD *)this + 30);
    if (v9)
      v8 = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                   + (((unint64_t)(v9 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v9 + *((_QWORD *)this + 29) - 1) & 0x1FF))
         + 1;
    else
      v8 = 1;
  }
  v22 = v8;
  v25 = 2;
  HIBYTE(v23) = 1;
  v26 = 1;
  v27 = 0x1FFFFFFFFLL;
  v28 = 2;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  v10 = *((_QWORD *)this + 1);
  v11 = *((_DWORD *)this + 4);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v20, &v16);
  __str = v16;
  *((_BYTE *)this + 146) = v29;
  *((_BYTE *)this + 147) = 0;
  v16.__r_.__value_.__r.__words[0] = 0x1300000000;
  v16.__r_.__value_.__l.__size_ = v10;
  LODWORD(v16.__r_.__value_.__r.__words[2]) = v11;
  *(_OWORD *)__p = 0u;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&v16);
  v31 = (void **)v18 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (SBYTE7(v18[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AF0FC18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  *(_QWORD *)(v2 - 56) = v2 - 80;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  __cxa_guard_abort(&qword_253F46250);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanQuotedScalar(YAML::Scanner *this)
{
  int v2;
  unsigned __int8 v3;
  char v4;
  std::string::size_type v5;
  int v6;
  std::string v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  std::string::size_type *p_size;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  _QWORD v16[3];
  int *v17;
  char v18;
  _DWORD v19[2];
  int v20;
  char v21;
  _QWORD v22[2];
  std::string __str;
  void **v24[2];
  char v25;

  memset(&__str, 0, sizeof(__str));
  if (*((_QWORD *)this + 8))
    v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                            + (*((_QWORD *)this + 7) & 0xFFFLL));
  else
    v2 = 4;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v20 = 0;
  memset(v19, 0, 7);
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 5) = 0;
  if (v2 == 39)
  {
    LODWORD(v7.__r_.__value_.__l.__data_) = 1;
    WORD2(v7.__r_.__value_.__r.__words[0]) = 39;
    __p[0] = 0;
    *(_OWORD *)&v7.__r_.__value_.__r.__words[1] = 0uLL;
    v3 = atomic_load((unsigned __int8 *)&qword_253F46258);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253F46258))
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "''");
      YAML::RegEx::RegEx((uint64_t)dword_253F462F0, (char *)v24, 6);
      if (v25 < 0)
        operator delete(v24[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, dword_253F462F0, &dword_22AEC9000);
      __cxa_guard_release(&qword_253F46258);
    }
    YAML::operator!(dword_253F462F0, (uint64_t)&p_size);
    YAML::operator&((int *)&v7, (int *)&p_size, (uint64_t)&v13);
    v24[0] = (void **)&v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v24);
    p_size = &v7.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    v4 = 39;
  }
  else
  {
    v13 = 1;
    v14 = v2;
    v15 = 0;
    v4 = 92;
    memset(v16, 0, sizeof(v16));
  }
  v17 = &v13;
  v18 = 1;
  BYTE2(v19[1]) = v4;
  v19[0] = 0;
  v20 = 2;
  BYTE1(v19[1]) = 1;
  v21 = 0;
  v22[0] = 0x200000000;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v17, &v7);
  __str = v7;
  *((_WORD *)this + 73) = 256;
  v7.__r_.__value_.__r.__words[0] = 0x1400000000;
  v7.__r_.__value_.__l.__size_ = v5;
  LODWORD(v7.__r_.__value_.__r.__words[2]) = v6;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&v7);
  p_size = (std::string::size_type *)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AF0FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  if (*(char *)(v11 - 49) < 0)
    operator delete(*(void **)(v11 - 72));
  __cxa_guard_abort(&qword_253F46258);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockScalar(YAML::Scanner *this)
{
  std::string::size_type v2;
  int v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  YAML::Exp *v11;
  int *v12;
  int *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *exception;
  int v22;
  YAML::Exp *v23;
  YAML::Exp *v24;
  int *v25;
  YAML::Exp *v26;
  int *v27;
  YAML::Exp *v28;
  YAML::Exp *v29;
  int *v30;
  _QWORD *v31;
  int v32;
  std::string __p;
  void *v34[2];
  _OWORD v35[2];
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  __int16 v40;
  char v41;
  _BOOL4 v42;
  char v43;
  int v44;
  uint64_t v45;
  char v46;
  std::string __str;
  void **v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  std::string::size_type *p_size;
  YAML::Scanner *v53;
  void **v54[2];

  memset(&__str, 0, sizeof(__str));
  v37 = 0;
  v38 = 0;
  v43 = 0;
  v41 = 0;
  v45 = 0;
  v46 = 0;
  v39 = 1;
  v40 = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  v42 = YAML::Stream::get(this) == 62;
  v44 = 0;
  v4 = atomic_load((unsigned __int8 *)&qword_253F46260);
  if ((v4 & 1) == 0)
  {
    v23 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F46260);
    if ((_DWORD)v23)
    {
      YAML::Exp::ChompIndicator(v23);
      v25 = YAML::Exp::Digit(v24);
      v26 = (YAML::Exp *)YAML::operator+(dword_253F46330, v25, (uint64_t)&v50);
      v27 = YAML::Exp::Digit(v26);
      YAML::Exp::ChompIndicator((YAML::Exp *)v27);
      YAML::operator+(v27, dword_253F46330, (uint64_t)&v48);
      v28 = (YAML::Exp *)YAML::operator|(&v50, (int *)&v48, (uint64_t)&p_size);
      YAML::Exp::ChompIndicator(v28);
      v29 = (YAML::Exp *)YAML::operator|((int *)&p_size, dword_253F46330, (uint64_t)&__p);
      v30 = YAML::Exp::Digit(v29);
      YAML::operator|((int *)&__p, v30, (uint64_t)&unk_253F46310);
      v54[0] = (void **)&__p.__r_.__value_.__l.__size_;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v54);
      v54[0] = (void **)&v53;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v54);
      v54[0] = (void **)&v49;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v54);
      v48 = (void **)&v51;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v48);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46310, &dword_22AEC9000);
      __cxa_guard_release(&qword_253F46260);
    }
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_253F46310, (unint64_t *)&__p);
  if (v5 >= 1)
  {
    while (1)
    {
      v6 = YAML::Stream::get(this);
      v7 = v6;
      if (v6 == 45)
      {
        v44 = -1;
      }
      else if (v6 == 43)
      {
        v44 = 1;
      }
      else
      {
        {
          YAML::Exp::Digit(void)::e = 2;
          word_255B57984 = 14640;
          qword_255B57990 = 0;
          unk_255B57998 = 0;
          qword_255B57988 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_22AEC9000);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::push_back(&__p, v7);
        v9 = YAML::RegEx::Match((uint64_t)&YAML::Exp::Digit(void)::e, (char *)&__p);
        v10 = v9;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v10 & 0x80000000) == 0)
          {
LABEL_12:
            if (v7 == 48)
            {
              exception = __cxa_allocate_exception(0x38uLL);
              v22 = *((_DWORD *)this + 4);
              p_size = (std::string::size_type *)*((_QWORD *)this + 1);
              LODWORD(v53) = v22;
              std::string::basic_string[abi:ne180100]<0>(&__p, "cannot set zero indentation for a block scalar");
              YAML::Exception::Exception((uint64_t)exception, &p_size, (uint64_t)&__p);
              *exception = &unk_24F5439A0;
            }
            v39 = v7 - 48;
            LOBYTE(v40) = 0;
          }
        }
        else if ((v9 & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
      }
      if (!--v5)
        goto LABEL_21;
    }
  }
  while (1)
  {
LABEL_21:
    if ((v14 & 1) == 0)
    {
      if ((_DWORD)v11)
      {
        v12 = YAML::Exp::Space(v11);
        v13 = YAML::Exp::Tab((YAML::Exp *)v12);
        YAML::operator|(v12, v13, (uint64_t)&YAML::Exp::Blank(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Blank(void)::e, &dword_22AEC9000);
      }
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Blank(void)::e, (unint64_t *)&__p) & 0x80000000) != 0)
      break;
    YAML::Stream::get(this);
  }
  {
    YAML::Exp::Comment(void)::e = 1;
    word_255B57A4C = 35;
    qword_255B57A58 = 0;
    unk_255B57A60 = 0;
    qword_255B57A50 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_22AEC9000);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
  WORD2(__p.__r_.__value_.__r.__words[0]) = word_255B57A4C;
  v34[0] = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&__p.__r_.__value_.__l.__size_, (int *)qword_255B57A50, (int *)qword_255B57A58, (qword_255B57A58 - qword_255B57A50) >> 5);
  p_size = 0;
  v53 = this;
  v16 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&__p, (unint64_t *)&p_size);
  p_size = &__p.__r_.__value_.__l.__size_;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if ((v16 & 0x80000000) == 0)
  {
    while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
         || *((_QWORD *)this + 8)
         && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
    {
      v18 = YAML::Exp::Break((YAML::Exp *)v17);
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      v17 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v18, (unint64_t *)&__p);
      if ((v17 & 0x80000000) == 0)
        break;
      v17 = YAML::Stream::get(this);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
    || *((_QWORD *)this + 8)
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
  {
    v19 = YAML::Exp::Break((YAML::Exp *)v17);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v19, (unint64_t *)&__p) & 0x80000000) != 0)
    {
      v31 = __cxa_allocate_exception(0x38uLL);
      v32 = *((_DWORD *)this + 4);
      p_size = (std::string::size_type *)*((_QWORD *)this + 1);
      LODWORD(v53) = v32;
      std::string::basic_string[abi:ne180100]<0>(&__p, "unexpected character in block scalar");
      YAML::Exception::Exception((uint64_t)v31, &p_size, (uint64_t)&__p);
      *v31 = &unk_24F5439A0;
    }
  }
  v20 = *((_QWORD *)this + 30);
  if (!v20
    || (LODWORD(v20) = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                               + (((unint64_t)(v20 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v20 + *((_QWORD *)this + 29) - 1) & 0x1FF)),
        (v20 & 0x80000000) == 0))
  {
    v39 += v20;
  }
  HIBYTE(v40) = 0;
  v43 = 0;
  HIDWORD(v45) = 2;
  YAML::ScanScalar((std::string::size_type)this, (uint64_t)&v37, &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = __p;
  *((_WORD *)this + 73) = 1;
  __p.__r_.__value_.__r.__words[0] = 0x1400000000;
  __p.__r_.__value_.__l.__size_ = v2;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  *(_OWORD *)v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  std::string::operator=((std::string *)v34, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&__p);
  p_size = (std::string::size_type *)v35 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v35[0]) < 0)
    operator delete(v34[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_22AF106C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 96) = &a36;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 96));
  a35 = v36 - 152;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  __cxa_guard_abort(&qword_253F46260);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

int *YAML::Exp::Digit(YAML::Exp *this)
{
  unsigned __int8 v1;

  {
    YAML::Exp::Digit(void)::e = 2;
    word_255B57984 = 14640;
    qword_255B57990 = 0;
    unk_255B57998 = 0;
    qword_255B57988 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::Digit(void)::e;
}

int *YAML::Exp::Space(YAML::Exp *this)
{
  unsigned __int8 v1;

  {
    YAML::Exp::Space(void)::e = 1;
    word_255B579FC = 32;
    qword_255B57A08 = 0;
    unk_255B57A10 = 0;
    qword_255B57A00 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::Space(void)::e;
}

int *YAML::Exp::Tab(YAML::Exp *this)
{
  unsigned __int8 v1;

  {
    YAML::Exp::Tab(void)::e = 1;
    word_255B57A24 = 9;
    qword_255B57A30 = 0;
    unk_255B57A38 = 0;
    qword_255B57A28 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::Tab(void)::e;
}

_QWORD *std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<YAML::RegEx>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<YAML::RegEx>,YAML::RegEx*,YAML::RegEx*,YAML::RegEx*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AF109E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<YAML::RegEx>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<YAML::RegEx>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<YAML::RegEx>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<YAML::RegEx>,YAML::RegEx*,YAML::RegEx*,YAML::RegEx*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_WORD *)(v4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)v4 = v7;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v4 + 8);
      v4 = v12 + 32;
      v12 += 32;
      v6 += 8;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22AF10B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 32;
      v4 = (void **)(v1 - 24);
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = v4 - 24;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *YAML::Exp::EndScalarInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  void *__p[2];
  char v6;
  void **v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void **v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  void **v25;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v20 = 1;
      v21 = 58;
      memset(v22, 0, sizeof(v22));
      v4 = (int *)YAML::Exp::BlankOrBreak(v3);
      v13 = 0;
      v14 = 0;
      memset(v15, 0, sizeof(v15));
      YAML::operator|(v4, &v13, (uint64_t)&v16);
      std::string::basic_string[abi:ne180100]<0>(v9, ",]}");
      YAML::RegEx::RegEx((uint64_t)&v11, (char *)v9, 3);
      YAML::operator|(&v16, (int *)&v11, (uint64_t)&v18);
      YAML::operator+(&v20, (int *)&v18, (uint64_t)&v23);
      std::string::basic_string[abi:ne180100]<0>(__p, ",?[]{}");
      YAML::RegEx::RegEx((uint64_t)&v7, (char *)__p, 3);
      YAML::operator|(&v23, (int *)&v7, (uint64_t)&YAML::Exp::EndScalarInFlow(void)::e);
      v25 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (v6 < 0)
        operator delete(__p[0]);
      v7 = (void **)&v24;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = (void **)&v19;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      if (v10 < 0)
        operator delete(v9[0]);
      v11 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v11 = (void **)v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v18 = (void **)v22;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalarInFlow(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::EndScalarInFlow(void)::e;
}

void sub_22AF10E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 56) = v36 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a15 < 0)
    operator delete(__p);
  a16 = (uint64_t *)(v37 - 80);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (uint64_t *)(v37 - 144);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a27;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a25 < 0)
    operator delete(a20);
  a26 = &a35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  *(_QWORD *)(v37 - 152) = v35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 152));
  _Unwind_Resume(a1);
}

void sub_22AF10F04()
{
  JUMPOUT(0x22AF10ED8);
}

void sub_22AF10F0C()
{
  JUMPOUT(0x22AF10EE4);
}

void *YAML::Exp::EndScalar(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  int v5;
  __int16 v6;
  _QWORD v7[3];
  void **v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  _QWORD v12[3];
  void **v13;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v10 = 1;
      v11 = 58;
      memset(v12, 0, sizeof(v12));
      v4 = (int *)YAML::Exp::BlankOrBreak(v3);
      v5 = 0;
      v6 = 0;
      memset(v7, 0, sizeof(v7));
      YAML::operator|(v4, &v5, (uint64_t)&v8);
      YAML::operator+(&v10, (int *)&v8, (uint64_t)&YAML::Exp::EndScalar(void)::e);
      v13 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      v13 = (void **)v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      v8 = (void **)v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalar(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::EndScalar(void)::e;
}

void sub_22AF11018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(_QWORD *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Exp::ChompIndicator(YAML::Exp *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v3;

  v1 = atomic_load((unsigned __int8 *)&qword_253F46268);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253F46268))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "+-");
    YAML::RegEx::RegEx((uint64_t)&unk_253F46330, (char *)__p, 3);
    if (v3 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46330, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46268);
  }
}

void sub_22AF11104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253F46268);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::Match<YAML::StreamCharSource>(uint64_t a1, unint64_t *a2)
{
  YAML::Stream *v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _QWORD v26[2];

  v5 = *a2;
  v4 = (YAML::Stream *)a2[1];
  if (*((_QWORD *)v4 + 8) > v5 || YAML::Stream::_ReadAheadTo(v4, v5))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                  + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                      + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF)) == 4)
          return 0;
        else
          return 0xFFFFFFFFLL;
      case 1:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                            + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                                + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF)) == *(unsigned __int8 *)(a1 + 4))
          return 1;
        else
          return 0xFFFFFFFFLL;
      case 2:
        v8 = *(char *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                 + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                     + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF));
        v7 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v8)
        {
          if (*(char *)(a1 + 5) < v8)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v7;
      case 3:
        v9 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v9)
          return 0xFFFFFFFFLL;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v9 + v10, a2);
          if ((v12 & 0x80000000) == 0)
            break;
          ++v11;
          v9 = *(_QWORD *)(a1 + 8);
          v10 += 32;
          v7 = 0xFFFFFFFFLL;
          if (v11 >= (*(_QWORD *)(a1 + 16) - v9) >> 5)
            return v7;
        }
        return v12;
      case 4:
        v13 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v13)
          return 0xFFFFFFFFLL;
        v14 = 0;
        v15 = 0;
        LODWORD(v7) = -1;
        break;
      case 5:
        v17 = *(_QWORD *)(a1 + 8);
        v7 = 0xFFFFFFFFLL;
        if (v17 != *(_QWORD *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v17, a2) >= 0)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v7;
      case 6:
        v18 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v18)
          return 0;
        v19 = 0;
        LODWORD(v7) = 0;
        v20 = 0;
        while (1)
        {
          v21 = v18 + v19;
          v22 = a2[1];
          v23 = *a2 + (int)v7;
          if ((int)(v7 + *a2) < 0 != __OFADD__((_DWORD)v7, *a2))
            v23 = 0;
          v26[0] = v23;
          v26[1] = v22;
          v24 = YAML::RegEx::Match<YAML::StreamCharSource>(v21, v26);
          if (v24 == -1)
            break;
          v7 = (v24 + v7);
          ++v20;
          v18 = *(_QWORD *)(a1 + 8);
          v19 += 32;
          if (v20 >= (*(_QWORD *)(a1 + 16) - v18) >> 5)
            return v7;
        }
        return 0xFFFFFFFFLL;
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      v16 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v13 + v14, a2);
      if (v16 == -1)
        break;
      if (v15)
        v7 = v7;
      else
        v7 = v16;
      ++v15;
      v13 = *(_QWORD *)(a1 + 8);
      v14 += 32;
      if (v15 >= (*(_QWORD *)(a1 + 16) - v13) >> 5)
        return v7;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v23[2];

  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL)) == 4)
        v4 = 0;
      else
        v4 = 0xFFFFFFFFLL;
      break;
    case 1:
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                          + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL)) == *(unsigned __int8 *)(a1 + 4))
        v4 = 1;
      else
        v4 = 0xFFFFFFFFLL;
      break;
    case 2:
      v5 = *(char *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                               + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL));
      v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = 1;
      }
      break;
    case 3:
      v6 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v6)
        goto LABEL_37;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0)
          break;
        ++v8;
        v6 = *(_QWORD *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(_QWORD *)(a1 + 16) - v6) >> 5)
          goto LABEL_37;
      }
      v4 = v9;
      break;
    case 4:
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v10)
        goto LABEL_37;
      v11 = 0;
      v12 = 0;
      LODWORD(v4) = -1;
      do
      {
        v13 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v10 + v11, a2);
        if (v13 == -1)
          goto LABEL_37;
        if (v12)
          v4 = v4;
        else
          v4 = v13;
        ++v12;
        v10 = *(_QWORD *)(a1 + 8);
        v11 += 32;
      }
      while (v12 < (*(_QWORD *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      v14 = *(_QWORD *)(a1 + 8);
      v4 = 0xFFFFFFFFLL;
      if (v14 != *(_QWORD *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v14, a2) >= 0)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = 1;
      }
      break;
    case 6:
      v15 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v15)
      {
        v4 = 0;
      }
      else
      {
        v16 = 0;
        LODWORD(v4) = 0;
        v17 = 0;
        do
        {
          v18 = v15 + v16;
          v19 = a2[1];
          v20 = *a2 + (int)v4;
          if ((int)(v4 + *a2) < 0 != __OFADD__((_DWORD)v4, *a2))
            v20 = 0;
          v23[0] = v20;
          v23[1] = v19;
          v21 = YAML::RegEx::Match<YAML::StreamCharSource>(v18, v23);
          if (v21 == -1)
            goto LABEL_37;
          v4 = (v21 + v4);
          ++v17;
          v15 = *(_QWORD *)(a1 + 8);
          v16 += 32;
        }
        while (v17 < (*(_QWORD *)(a1 + 16) - v15) >> 5);
      }
      break;
    default:
LABEL_37:
      v4 = 0xFFFFFFFFLL;
      break;
  }
  return v4;
}

uint64_t YAML::RegEx::Match(uint64_t a1, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = *(char **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v18 = v3;
  *((_QWORD *)&v18 + 1) = v2;
  v19 = 0;
  if ((*(_DWORD *)a1 - 3) < 0xFFFFFFFE || v2 != 0)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2)
          return 0xFFFFFFFFLL;
        else
          return 0;
      case 1:
        if (*v3 == *(_BYTE *)(a1 + 4))
          return 1;
        else
          return 0xFFFFFFFFLL;
      case 2:
        v11 = *v3;
        v6 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v11)
        {
          if (*(char *)(a1 + 5) < v11)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v6;
      case 3:
        v12 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v12)
          return 0xFFFFFFFFLL;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v12 + v13, &v18);
          if ((v15 & 0x80000000) == 0)
            break;
          ++v14;
          v12 = *(_QWORD *)(a1 + 8);
          v13 += 32;
          v6 = 0xFFFFFFFFLL;
          if (v14 >= (*(_QWORD *)(a1 + 16) - v12) >> 5)
            return v6;
        }
        return v15;
      case 4:
        v7 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v7)
          return 0xFFFFFFFFLL;
        v8 = 0;
        v9 = 0;
        LODWORD(v6) = -1;
        break;
      case 5:
        v17 = *(_QWORD *)(a1 + 8);
        v6 = 0xFFFFFFFFLL;
        if (v17 != *(_QWORD *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v17, &v18) >= 0)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v6;
      case 6:
        return YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(a1, &v18);
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      v10 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v7 + v8, &v18);
      if (v10 == -1)
        break;
      if (v9)
        v6 = v6;
      else
        v6 = v10;
      ++v9;
      v7 = *(_QWORD *)(a1 + 8);
      v8 += 32;
      if (v9 >= (*(_QWORD *)(a1 + 16) - v7) >> 5)
        return v6;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  unint64_t v40;

  switch(*(_DWORD *)a1)
  {
    case 0:
      if (a2[2] >= a2[1])
        return 0;
      else
        return 0xFFFFFFFFLL;
    case 1:
      if (*(unsigned __int8 *)(*a2 + a2[2]) == *(unsigned __int8 *)(a1 + 4))
        return 1;
      else
        return 0xFFFFFFFFLL;
    case 2:
      v5 = *(char *)(*a2 + a2[2]);
      v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return v4;
    case 3:
      v6 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v6)
        return 0xFFFFFFFFLL;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0)
          break;
        ++v8;
        v6 = *(_QWORD *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(_QWORD *)(a1 + 16) - v6) >> 5)
          return 0xFFFFFFFFLL;
      }
      return v9;
    case 4:
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v10)
        return 0xFFFFFFFFLL;
      v11 = 0;
      v12 = 0;
      LODWORD(v4) = -1;
      while (1)
      {
        v13 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v10 + v11, a2);
        if (v13 == -1)
          break;
        if (v12)
          v4 = v4;
        else
          v4 = v13;
        ++v12;
        v10 = *(_QWORD *)(a1 + 8);
        v11 += 32;
        if (v12 >= (*(_QWORD *)(a1 + 16) - v10) >> 5)
          return v4;
      }
      return 0xFFFFFFFFLL;
    case 5:
      v14 = *(_QWORD *)(a1 + 8);
      v4 = 0xFFFFFFFFLL;
      if (v14 != *(_QWORD *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v14, a2) >= 0)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return v4;
    case 6:
      v15 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) != v15)
      {
        v16 = 0;
        LODWORD(v4) = 0;
        while (1)
        {
          v17 = (_DWORD *)(v15 + 32 * v16);
          v40 = a2[2];
          v39 = *(_OWORD *)a2;
          v18 = v40 + (int)v4;
          if ((int)v4 + (int)v40 < 0 != __OFADD__((_DWORD)v4, (_DWORD)v40))
            v18 = 0;
          v40 = v18;
          switch(*v17)
          {
            case 0:
              if (v18 >= *((_QWORD *)&v39 + 1))
                v19 = 0;
              else
                v19 = -1;
              goto LABEL_59;
            case 1:
              if (*(unsigned __int8 *)(v39 + v18) != *(unsigned __int8 *)(v15 + 32 * v16 + 4))
                return 0xFFFFFFFFLL;
              goto LABEL_57;
            case 2:
              v20 = v15 + 32 * v16;
              v21 = *(char *)(v39 + v18);
              if (*(char *)(v20 + 4) > v21 || *(char *)(v20 + 5) < v21)
                return 0xFFFFFFFFLL;
              goto LABEL_57;
            case 3:
              v22 = v15 + 32 * v16;
              v25 = *(_QWORD *)(v22 + 8);
              v24 = (uint64_t *)(v22 + 8);
              v23 = v25;
              if (v24[1] == v25)
                return 0xFFFFFFFFLL;
              v26 = 0;
              v27 = 0;
              while (1)
              {
                v28 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v23 + v26, &v39);
                if ((v28 & 0x80000000) == 0)
                  break;
                ++v27;
                v23 = *v24;
                v26 += 32;
                if (v27 >= (v24[1] - *v24) >> 5)
                  return 0xFFFFFFFFLL;
              }
              v19 = v28;
              goto LABEL_60;
            case 4:
              v29 = v15 + 32 * v16;
              v32 = *(_QWORD *)(v29 + 8);
              v31 = (uint64_t *)(v29 + 8);
              v30 = v32;
              if (v31[1] == v32)
                return 0xFFFFFFFFLL;
              v33 = 0;
              v34 = 0;
              v19 = -1;
              break;
            case 5:
              v36 = v15 + 32 * v16;
              v37 = *(_QWORD *)(v36 + 8);
              if (v37 == *(_QWORD *)(v36 + 16)
                || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v37, &v39) & 0x80000000) == 0)
              {
                return 0xFFFFFFFFLL;
              }
LABEL_57:
              v19 = 1;
              goto LABEL_60;
            case 6:
              v19 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)v17, &v39);
              goto LABEL_59;
            default:
              return 0xFFFFFFFFLL;
          }
          do
          {
            v35 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v30 + v33, &v39);
            if (v35 == -1)
              return 0xFFFFFFFFLL;
            if (!v34)
              v19 = v35;
            ++v34;
            v30 = *v31;
            v33 += 32;
          }
          while (v34 < (v31[1] - *v31) >> 5);
LABEL_59:
          if (v19 == -1)
            return 0xFFFFFFFFLL;
LABEL_60:
          v4 = (v19 + v4);
          ++v16;
          v15 = *(_QWORD *)(a1 + 8);
          if (v16 >= (*(_QWORD *)(a1 + 16) - v15) >> 5)
            return v4;
        }
      }
      return 0;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  unint64_t v30;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == v2)
    return 0;
  v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    v30 = *((_QWORD *)a2 + 2);
    v29 = *a2;
    v8 = v30 + (int)v7;
    if ((int)v7 + (int)v30 < 0 != __OFADD__((_DWORD)v7, (_DWORD)v30))
      v8 = 0;
    v30 = v8;
    switch(*(_DWORD *)(v2 + 32 * v6))
    {
      case 0:
        if (v8 >= *((_QWORD *)&v29 + 1))
          v9 = 0;
        else
          v9 = -1;
        goto LABEL_31;
      case 1:
        if (*(unsigned __int8 *)(v29 + v8) != *(unsigned __int8 *)(v2 + 32 * v6 + 4))
          return 0xFFFFFFFFLL;
        goto LABEL_14;
      case 2:
        v10 = v2 + 32 * v6;
        v11 = *(char *)(v29 + v8);
        if (*(char *)(v10 + 4) > v11 || *(char *)(v10 + 5) < v11)
          return 0xFFFFFFFFLL;
LABEL_14:
        v9 = 1;
        goto LABEL_33;
      case 3:
        v12 = v2 + 32 * v6;
        v15 = *(_QWORD *)(v12 + 8);
        v14 = (uint64_t *)(v12 + 8);
        v13 = v15;
        if (v14[1] == v15)
          return 0xFFFFFFFFLL;
        v16 = 0;
        v17 = 0;
        while (1)
        {
          v18 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v13 + v16, &v29);
          if ((v18 & 0x80000000) == 0)
            break;
          ++v17;
          v13 = *v14;
          v16 += 32;
          if (v17 >= (v14[1] - *v14) >> 5)
            return 0xFFFFFFFFLL;
        }
        v9 = v18;
        goto LABEL_32;
      case 4:
        v19 = v2 + 32 * v6;
        v22 = *(_QWORD *)(v19 + 8);
        v21 = (uint64_t *)(v19 + 8);
        v20 = v22;
        if (v21[1] == v22)
          return 0xFFFFFFFFLL;
        v23 = 0;
        v24 = 0;
        v9 = -1;
        break;
      case 5:
        v26 = v2 + 32 * v6;
        v27 = *(_QWORD *)(v26 + 8);
        if (v27 == *(_QWORD *)(v26 + 16)
          || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v27, &v29) & 0x80000000) == 0)
        {
          return 0xFFFFFFFFLL;
        }
        v9 = 1;
        goto LABEL_32;
      case 6:
        v9 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>();
        goto LABEL_31;
      default:
        return 0xFFFFFFFFLL;
    }
    do
    {
      v25 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v20 + v23, &v29);
      if (v25 == -1)
        return 0xFFFFFFFFLL;
      if (!v24)
        v9 = v25;
      ++v24;
      v20 = *v21;
      v23 += 32;
    }
    while (v24 < (v21[1] - *v21) >> 5);
LABEL_31:
    if (v9 == -1)
      return 0xFFFFFFFFLL;
LABEL_32:
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a1 + 16);
LABEL_33:
    v7 = (v9 + v7);
    ++v6;
  }
  while (v6 < (v3 - v2) >> 5);
  return v7;
}

std::string *std::deque<YAML::Token>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::string *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 51 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<YAML::Token>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  }
  v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v8 = v9;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 24), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v8 + 24) = v10;
  }
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v8 + 48), *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void sub_22AF11DF8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::deque<YAML::Scanner::FLOW_MARKER>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<YAML::Scanner::FLOW_MARKER>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<YAML::Scanner::FLOW_MARKER>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_22AF122B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_0()
{
  uint64_t v0;

  v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0)
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void siri::intelligence::Undo::GetIdentifier(siri::intelligence::Undo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

_QWORD *siri::intelligence::Undo::SetUserData(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), a2);
}

uint64_t siri::intelligence::Undo::GetUserData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::intelligence::Undo::GetExpanded(const std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  std::string::pointer data;
  void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *lpsrc;
  std::__shared_weak_count *v18;
  void *v19;
  std::__shared_weak_count *v20;

  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_24F540C08;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 7) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *a3 = v6 + 24;
  a3[1] = v6;
  std::string::operator=((std::string *)v6 + 1, a1);
  data = a1[1].__r_.__value_.__l.__data_;
  if (data)
  {
    (*(void (**)(void **__return_ptr, std::string::pointer, uint64_t))(*(_QWORD *)data + 88))(&lpsrc, data, a2);
    if (lpsrc
    {
      v19 = v8;
      v20 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)v6 + 6, (uint64_t *)&v19);
    v11 = v20;
    if (v20)
    {
      v12 = (unint64_t *)&v20->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v18;
    if (v18)
    {
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_22AF124F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::Undo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F540C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::Undo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F540C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_emplace<siri::intelligence::Undo>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<siri::intelligence::NLParameters>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t YAML::Exp::ParseHex(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *exception;
  _QWORD v10[3];

  v2 = *(unsigned __int8 *)(result + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return 0;
  v4 = (_QWORD *)result;
  LODWORD(result) = 0;
  if (v3 < 0)
    v4 = (_QWORD *)*v4;
  do
  {
    v6 = *(char *)v4;
    v4 = (_QWORD *)((char *)v4 + 1);
    v5 = v6;
    if ((v6 - 97) >= 6)
    {
      if ((v5 - 65) >= 6)
      {
        if ((v5 - 48) >= 0xA)
        {
          exception = __cxa_allocate_exception(0x38uLL);
          std::string::basic_string[abi:ne180100]<0>(v10, "bad character found while scanning hex number");
          YAML::Exception::Exception((uint64_t)exception, a2, (uint64_t)v10);
          *exception = &unk_24F5439A0;
        }
        v7 = -48;
      }
      else
      {
        v7 = -55;
      }
    }
    else
    {
      v7 = -87;
    }
    result = (v5 + 16 * result + v7);
    --v2;
  }
  while (v2);
  return result;
}

void sub_22AF12684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::Exp::Str@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  a2[23] = 1;
  *a2 = this;
  a2[1] = 0;
  return this;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, YAML::Stream *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  std::string::value_type v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *v11;
  void *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  _QWORD *exception;
  int v22;
  void *__p;
  char v24;
  std::string::value_type v25[8];
  char v26;
  std::string::value_type v27[8];
  char v28;
  std::string v29;
  std::string __s;
  std::string v31;
  std::string v32;

  memset(&v32, 0, sizeof(v32));
  if ((int)a2 >= 1)
  {
    v5 = (int)a2;
    do
    {
      v6 = YAML::Stream::get(this);
      std::string::push_back(&v32, v6);
      --v5;
    }
    while (v5);
  }
  v7 = *((_DWORD *)this + 4);
  v31.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 1);
  LODWORD(v31.__r_.__value_.__r.__words[1]) = v7;
  v8 = YAML::Exp::ParseHex((uint64_t)&v32, &v31);
  v9 = v8;
  if (HIWORD(v8) > 0x10u || (v8 & 0xFFFFF800) == 55296)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31.__r_.__value_.__r.__words[2], (uint64_t)"invalid unicode: ", 17);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x38uLL);
    v22 = *((_DWORD *)this + 4);
    v29.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 1);
    LODWORD(v29.__r_.__value_.__r.__words[1]) = v22;
    std::stringbuf::str();
    YAML::Exception::Exception((uint64_t)exception, &v29, (uint64_t)&__s);
    *exception = &unk_24F5439A0;
  }
  if (v8 <= 0x7F)
  {
    *(_BYTE *)(a3 + 23) = 1;
    *(_WORD *)a3 = v8;
    goto LABEL_37;
  }
  if (v8 > 0x7FF)
  {
    if (HIWORD(v8))
    {
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = ((v8 >> 18) - 16);
      v28 = 1;
      v27[0] = (v8 >> 12) & 0x3F | 0x80;
      v27[1] = 0;
      v16 = std::string::append(&v29, v27, 1uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v26 = 1;
      v25[0] = (v9 >> 6) & 0x3F | 0x80;
      v25[1] = 0;
      v18 = std::string::append(&__s, v25, 1uLL);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v24 = 1;
      LOWORD(__p) = v9 & 0x3F | 0x80;
      v20 = std::string::append(&v31, (const std::string::value_type *)&__p, 1uLL);
      *(std::string *)a3 = *v20;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v24 < 0)
        operator delete(__p);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(*(void **)v25);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (v28 < 0)
        operator delete(*(void **)v27);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = ((v8 >> 12) - 32);
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = (v8 >> 6) & 0x3F | 0x80;
      v13 = std::string::append(&__s, (const std::string::value_type *)&v29, 1uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v28 = 1;
      v27[0] = v9 & 0x3F | 0x80;
      v27[1] = 0;
      v15 = std::string::append(&v31, v27, 1uLL);
      *(std::string *)a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v28 < 0)
        operator delete(*(void **)v27);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
  }
  else
  {
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = 1;
    LOWORD(v31.__r_.__value_.__l.__data_) = ((v8 >> 6) - 64);
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8 & 0x3F | 0x80;
    v11 = std::string::append(&v31, (const std::string::value_type *)&__s, 1uLL);
    *(std::string *)a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v12);
    }
  }
LABEL_37:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_22AF12AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (a38 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
      if (*(char *)(v47 - 49) < 0)
        operator delete(*(void **)(v47 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  int v6;
  char *v7;
  std::string::value_type v8;
  _QWORD *exception;
  int v10;
  std::string v11;
  std::string v12;
  uint64_t v13;
  int v14;
  _BYTE v15[280];

  v5 = YAML::Stream::get(this);
  v6 = YAML::Stream::get(this);
  if (v5 == 39 && v6 == 39)
  {
LABEL_3:
    v7 = "'";
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, v7);
    return;
  }
  if (v6 > 91)
  {
    switch(v6)
    {
      case '\\':
        v7 = "\\";
        goto LABEL_4;
      case '_':
        v7 = "\xA0";
        goto LABEL_4;
      case 'a':
        v7 = "\a";
        goto LABEL_4;
      case 'b':
        v7 = "\b";
        goto LABEL_4;
      case 'e':
        v7 = "\x1B";
        goto LABEL_4;
      case 'f':
        v7 = "\f";
        goto LABEL_4;
      case 'n':
        v7 = "\n";
        goto LABEL_4;
      case 'r':
        v7 = "\r";
        goto LABEL_4;
      case 't':
        goto LABEL_18;
      case 'u':
        YAML::Exp::Escape(this, (YAML::Stream *)4, a2);
        return;
      case 'v':
        v7 = "\v";
        goto LABEL_4;
      case 'x':
        YAML::Exp::Escape(this, (YAML::Stream *)2, a2);
        return;
      default:
        goto LABEL_38;
    }
  }
  if (v6 <= 46)
  {
    if (v6 > 33)
    {
      if (v6 == 34)
      {
        v7 = "\"";
        goto LABEL_4;
      }
      if (v6 == 39)
        goto LABEL_3;
    }
    else
    {
      if (v6 == 9)
      {
LABEL_18:
        v7 = "\t";
        goto LABEL_4;
      }
      if (v6 == 32)
      {
        v7 = " ";
        goto LABEL_4;
      }
    }
LABEL_38:
    v8 = v6;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    exception = __cxa_allocate_exception(0x38uLL);
    v10 = *((_DWORD *)this + 4);
    v13 = *((_QWORD *)this + 1);
    v14 = v10;
    std::string::basic_string[abi:ne180100]<0>(&v11, "unknown escape character: ");
    std::string::push_back(&v11, v8);
    v12 = v11;
    memset(&v11, 0, sizeof(v11));
    YAML::Exception::Exception((uint64_t)exception, &v13, (uint64_t)&v12);
    *exception = &unk_24F5439A0;
  }
  switch(v6)
  {
    case 'L':
      v7 = "\u2028";
      goto LABEL_4;
    case 'M':
    case 'O':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
      goto LABEL_38;
    case 'N':
      v7 = "\x85";
      goto LABEL_4;
    case 'P':
      v7 = "\u2029";
      goto LABEL_4;
    case 'U':
      YAML::Exp::Escape(this, (YAML::Stream *)8, a2);
      return;
    default:
      if (v6 == 47)
      {
        v7 = "/";
        goto LABEL_4;
      }
      if (v6 != 48)
        goto LABEL_38;
      *(_BYTE *)(a2 + 23) = 1;
      *(_WORD *)a2 = 0;
      return;
  }
}

void sub_22AF12EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  int v24;
  void *v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

double siri::intelligence::Interjection::Interjection(siri::intelligence::Interjection *this)
{
  double result;

  *(_DWORD *)this = 256;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 256;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

_BYTE *siri::intelligence::Interjection::SetUberMode(_BYTE *this, char a2)
{
  *this = a2;
  return this;
}

uint64_t siri::intelligence::Interjection::GetUberMode(siri::intelligence::Interjection *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t siri::intelligence::Interjection::SetReturnWhenDone(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1) = a2;
  return this;
}

uint64_t siri::intelligence::Interjection::GetReturnWhenDone(siri::intelligence::Interjection *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t siri::intelligence::Interjection::SetRepeatPrompt(uint64_t this, char a2)
{
  *(_BYTE *)(this + 2) = a2;
  return this;
}

uint64_t siri::intelligence::Interjection::GetRepeatPrompt(siri::intelligence::Interjection *this)
{
  return *((unsigned __int8 *)this + 2);
}

uint64_t siri::intelligence::Interjection::SetFollowFallback(uint64_t this, char a2)
{
  *(_BYTE *)(this + 3) = a2;
  return this;
}

uint64_t siri::intelligence::Interjection::GetFollowFallback(siri::intelligence::Interjection *this)
{
  return *((unsigned __int8 *)this + 3);
}

std::string *siri::intelligence::Interjection::SetSegueResponseId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void siri::intelligence::Interjection::GetSegueResponseId(siri::intelligence::Interjection *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

std::string *siri::intelligence::Interjection::SetReturnResponseId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::intelligence::Interjection::GetReturnResponseId(siri::intelligence::Interjection *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

void InitDefaultsscc_info_Intelligence_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence::Intelligence((protobuf::Intelligence *)&protobuf::_Intelligence_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_default_instance_, v4);
  qword_255B59188 = (uint64_t)&protobuf::_Intelligence_Start_default_instance_;
}

void InitDefaultsscc_info_Intelligence_Activity_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Activity::Intelligence_Activity((protobuf::Intelligence_Activity *)&protobuf::_Intelligence_Activity_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Activity_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_BehaviorResponse_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_BehaviorResponse::Intelligence_BehaviorResponse((protobuf::Intelligence_BehaviorResponse *)&protobuf::_Intelligence_BehaviorResponse_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_BehaviorResponse_default_instance_, v4);
  qword_255B58568 = (uint64_t)&protobuf::_Intelligence_Undo_default_instance_;
}

void InitDefaultsscc_info_Intelligence_Character_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Character::Intelligence_Character((protobuf::Intelligence_Character *)&protobuf::_Intelligence_Character_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Character_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Condition_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Condition::Intelligence_Condition((protobuf::Intelligence_Condition *)&protobuf::_Intelligence_Condition_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Condition_default_instance_, v4);
  qword_255B58F68 = (uint64_t)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
}

void InitDefaultsscc_info_Intelligence_Condition_ConditionEntry_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry((protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_, v4);
  qword_255B58F38 = (uint64_t)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
  unk_255B58F40 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
  qword_255B58F30 = (uint64_t)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
}

void InitDefaultsscc_info_Intelligence_Counter_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Counter::Intelligence_Counter((protobuf::Intelligence_Counter *)&protobuf::_Intelligence_Counter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Counter_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_DialogResponse_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse((protobuf::Intelligence_DialogResponse *)&protobuf::_Intelligence_DialogResponse_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_DialogResponse_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Event_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Event::Intelligence_Event((protobuf::Intelligence_Event *)&protobuf::_Intelligence_Event_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Event_default_instance_, v4);
  qword_255B58BB0 = (uint64_t)&protobuf::_Intelligence_NLParameters_default_instance_;
}

void InitDefaultsscc_info_Intelligence_Flag_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Flag::Intelligence_Flag((protobuf::Intelligence_Flag *)&protobuf::_Intelligence_Flag_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Flag_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_InputGroup_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup::Intelligence_InputGroup((protobuf::Intelligence_InputGroup *)&protobuf::_Intelligence_InputGroup_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_InputGroup_Event_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup_Event::Intelligence_InputGroup_Event((protobuf::Intelligence_InputGroup_Event *)&protobuf::_Intelligence_InputGroup_Event_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_Event_default_instance_, v4);
  qword_255B58768 = (uint64_t)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
}

void InitDefaultsscc_info_Intelligence_InputGroup_Fallback_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup_Fallback::Intelligence_InputGroup_Fallback((protobuf::Intelligence_InputGroup_Fallback *)&protobuf::_Intelligence_InputGroup_Fallback_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_Fallback_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_InputGroup_Intent_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup_Intent::Intelligence_InputGroup_Intent((protobuf::Intelligence_InputGroup_Intent *)&protobuf::_Intelligence_InputGroup_Intent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_Intent_default_instance_, v4);
  qword_255B58718 = (uint64_t)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
}

void InitDefaultsscc_info_Intelligence_InputGroup_Interjection_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection((protobuf::Intelligence_InputGroup_Interjection *)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_Interjection_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_InputGroup_LegacyEvent_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_InputGroup_LegacyEvent::Intelligence_InputGroup_LegacyEvent((protobuf::Intelligence_InputGroup_LegacyEvent *)&protobuf::_Intelligence_InputGroup_LegacyEvent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_InputGroup_LegacyEvent_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Intent_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Intent::Intelligence_Intent((protobuf::Intelligence_Intent *)&protobuf::_Intelligence_Intent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Intent_default_instance_, v4);
  qword_255B58BF8 = (uint64_t)&protobuf::_Intelligence_NLParameters_default_instance_;
}

void InitDefaultsscc_info_Intelligence_KeyValueParameter_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)&protobuf::_Intelligence_KeyValueParameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_KeyValueParameter_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Label_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Label::Intelligence_Label((protobuf::Intelligence_Label *)&protobuf::_Intelligence_Label_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Label_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_List_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_List::Intelligence_List((protobuf::Intelligence_List *)&protobuf::_Intelligence_List_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_List_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Meta_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Meta::Intelligence_Meta((protobuf::Intelligence_Meta *)&protobuf::_Intelligence_Meta_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Meta_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_NLParameters_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_NLParameters::Intelligence_NLParameters((protobuf::Intelligence_NLParameters *)&protobuf::_Intelligence_NLParameters_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_NLParameters_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_ReferenceResponse_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_ReferenceResponse::Intelligence_ReferenceResponse((protobuf::Intelligence_ReferenceResponse *)&protobuf::_Intelligence_ReferenceResponse_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_ReferenceResponse_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_ResponseGroup_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_ResponseGroup::Intelligence_ResponseGroup((protobuf::Intelligence_ResponseGroup *)&protobuf::_Intelligence_ResponseGroup_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_ResponseGroup_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Start_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Start::Intelligence_Start((protobuf::Intelligence_Start *)&protobuf::_Intelligence_Start_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Start_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State::Intelligence_State((protobuf::Intelligence_State *)&protobuf::_Intelligence_State_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_Event_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_Event::Intelligence_State_Event((protobuf::Intelligence_State_Event *)&protobuf::_Intelligence_State_Event_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_Event_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_ExecutionState_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_ExecutionState::Intelligence_State_ExecutionState((protobuf::Intelligence_State_ExecutionState *)&protobuf::_Intelligence_State_ExecutionState_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_ExecutionState_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_ExecutionState_Frame_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_ExecutionState_Frame::Intelligence_State_ExecutionState_Frame((protobuf::Intelligence_State_ExecutionState_Frame *)&protobuf::_Intelligence_State_ExecutionState_Frame_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_ExecutionState_Frame_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_ExecutionState_Frame_ResponseState_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Intelligence_State_ExecutionState_Frame_ResponseState((protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *)&protobuf::_Intelligence_State_ExecutionState_Frame_ResponseState_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_ExecutionState_Frame_ResponseState_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_InputGroup_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_InputGroup::Intelligence_State_InputGroup((protobuf::Intelligence_State_InputGroup *)&protobuf::_Intelligence_State_InputGroup_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_InputGroup_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_Memory_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_Memory::Intelligence_State_Memory((protobuf::Intelligence_State_Memory *)&protobuf::_Intelligence_State_Memory_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_Memory_default_instance_, v4);
  qword_255B58C58 = (uint64_t)&protobuf::_Intelligence_State_Memory_Value_default_instance_;
}

void InitDefaultsscc_info_Intelligence_State_Memory_Value_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value((protobuf::Intelligence_State_Memory_Value *)&protobuf::_Intelligence_State_Memory_Value_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_Memory_Value_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_Response_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_Response::Intelligence_State_Response((protobuf::Intelligence_State_Response *)&protobuf::_Intelligence_State_Response_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_Response_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_State_Timer_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_State_Timer::Intelligence_State_Timer((protobuf::Intelligence_State_Timer *)&protobuf::_Intelligence_State_Timer_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_State_Timer_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Undo_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Undo::Intelligence_Undo((protobuf::Intelligence_Undo *)&protobuf::_Intelligence_Undo_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Undo_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Utterance_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Utterance::Intelligence_Utterance((protobuf::Intelligence_Utterance *)&protobuf::_Intelligence_Utterance_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Utterance_default_instance_, v4);
}

void InitDefaultsscc_info_Intelligence_Variable_intelligence_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", a4);
  protobuf::Intelligence_Variable::Intelligence_Variable((protobuf::Intelligence_Variable *)&protobuf::_Intelligence_Variable_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_Intelligence_Variable_default_instance_, v4);
  qword_255B58A88 = (uint64_t)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
}

protobuf::Intelligence_Meta *protobuf::Intelligence_Meta::Intelligence_Meta(protobuf::Intelligence_Meta *this)
{
  *(_QWORD *)this = &off_24F540C58;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Meta_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Meta_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF13CE8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Meta *protobuf::Intelligence_Meta::Intelligence_Meta(protobuf::Intelligence_Meta *this, const protobuf::Intelligence_Meta *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_24F540C58;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  return this;
}

void sub_22AF13DA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Meta::~Intelligence_Meta(protobuf::Intelligence_Meta *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F540C58;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Meta::~Intelligence_Meta(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Meta::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Meta::default_instance(protobuf::Intelligence_Meta *this)
{
  if (atomic_load(scc_info_Intelligence_Meta_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Meta_intelligence_2eproto);
  return &protobuf::_Intelligence_Meta_default_instance_;
}

void protobuf::Intelligence_Meta::Clear(protobuf::Intelligence_Meta *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::Intelligence_Meta *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

google::protobuf::internal *protobuf::Intelligence_Meta::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  std::string::value_type *v7;
  const char *v8;
  std::string *v10;
  int v11;
  google::protobuf::internal *v12;

  v12 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
  result = v12;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v12 = result;
      if (!result)
        return result;
      v7 = (std::string::value_type *)result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v10 = *(std::string **)(a1 + 32);
          if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v10 = *(std::string **)(a1 + 32);
            goto LABEL_19;
          }
LABEL_20:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, v7, (uint64_t)this);
          goto LABEL_21;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *(std::string **)(a1 + 24);
LABEL_19:
          v7 = (std::string::value_type *)v12;
        }
        goto LABEL_20;
      }
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_21:
      v12 = result;
      if (result)
      {
        v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
        result = v12;
        if (!v11)
          continue;
      }
      return result;
    }
    v7 = (char *)result + 2;
LABEL_5:
    v12 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Meta::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Meta *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(google::protobuf::io::EpsCopyOutputStream *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*(_QWORD *)a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = (unsigned __int8 *)(a4 + 2);
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = (unsigned __int8 *)(a4 + 2);
    }
  }
  else
  {
    *a4 = v10;
    v11 = (unsigned __int8 *)(a4 + 1);
  }
  *v11 = v4;
  v15 = (char *)(v11 + 1);
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return (unsigned __int8 *)&v15[v4];
}

uint64_t protobuf::Intelligence_Meta::ByteSizeLong(protobuf::Intelligence_Meta *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Meta::CheckTypeAndMergeFrom(protobuf::Intelligence_Meta *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Meta::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Meta::MergeFrom(protobuf::Intelligence_Meta *this, const protobuf::Intelligence_Meta *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 973);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 4);
    v10 = (std::string **)((char *)this + 32);
    v9 = v11;
    *((_DWORD *)v10 - 4) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_22AF14518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Meta::CopyFrom(protobuf::Intelligence_Meta *this, const protobuf::Intelligence_Meta *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Meta::Clear(this);
    protobuf::Intelligence_Meta::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Meta::IsInitialized(protobuf::Intelligence_Meta *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Meta::InternalSwap(protobuf::Intelligence_Meta *this, protobuf::Intelligence_Meta *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v25;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

_QWORD *protobuf::Intelligence_Meta::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Meta");
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(protobuf::Intelligence_KeyValueParameter *this)
{
  *(_QWORD *)this = &off_24F540CE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (atomic_load(scc_info_Intelligence_KeyValueParameter_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_KeyValueParameter_intelligence_2eproto);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_WORD *)this + 92) = 0;
  return this;
}

void sub_22AF147CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2 + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2 + 9);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2 + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2 + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(protobuf::Intelligence_KeyValueParameter *this, const protobuf::Intelligence_KeyValueParameter *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;

  *(_QWORD *)this = &off_24F540CE8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 12, (uint64_t)a2 + 96);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v11);
  }
  v12 = *((_OWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 170) = *(_OWORD *)((char *)a2 + 170);
  *((_OWORD *)this + 10) = v12;
  return this;
}

void sub_22AF1499C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;
  google::protobuf::internal::ArenaImpl **v3;
  google::protobuf::internal::ArenaImpl **v4;
  google::protobuf::internal::ArenaImpl **v5;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_KeyValueParameter::~Intelligence_KeyValueParameter(protobuf::Intelligence_KeyValueParameter *this)
{
  *(_QWORD *)this = &off_24F540CE8;
  protobuf::Intelligence_KeyValueParameter::SharedDtor(this);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 9);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_KeyValueParameter::~Intelligence_KeyValueParameter(this);
  JUMPOUT(0x22E2E9CCCLL);
}

_QWORD *protobuf::Intelligence_KeyValueParameter::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v1 = this;
  v2 = this[15];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = v1[16];
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = v1[17];
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = v1[18];
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = v1[19];
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return this;
}

uint64_t protobuf::Intelligence_KeyValueParameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_KeyValueParameter::default_instance(protobuf::Intelligence_KeyValueParameter *this)
{
  if (atomic_load(scc_info_Intelligence_KeyValueParameter_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_KeyValueParameter_intelligence_2eproto);
  return &protobuf::_Intelligence_KeyValueParameter_default_instance_;
}

void protobuf::Intelligence_KeyValueParameter::Clear(protobuf::Intelligence_KeyValueParameter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArenaLite *v8;
  char v9;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((char *)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((char *)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((char *)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((char *)this + 96);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x1F) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_12:
      v4 = *((_QWORD *)this + 16);
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_16;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_16;
      }
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
LABEL_20:
      v6 = *((_QWORD *)this + 18);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v2 & 0x10) == 0)
          goto LABEL_27;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
        if ((v2 & 0x10) == 0)
          goto LABEL_27;
      }
      goto LABEL_24;
    }
    v3 = *((_QWORD *)this + 15);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_12;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_16:
    v5 = *((_QWORD *)this + 17);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_20;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_20;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
LABEL_24:
    v7 = *((_QWORD *)this + 19);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
LABEL_27:
  if ((v2 & 0xE0) != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
  }
  if ((v2 & 0x300) != 0)
    *((_WORD *)this + 92) = 0;
  v9 = *((_BYTE *)this + 8);
  v8 = (protobuf::Intelligence_KeyValueParameter *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
}

google::protobuf::internal *protobuf::Intelligence_KeyValueParameter::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  std::string *v9;
  std::string **v10;
  google::protobuf::internal *v11;
  uint64_t v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  google::protobuf::internal *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  google::protobuf::internal *v20;
  int *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  protobuf::Intelligence_KeyValueParameter *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  google::protobuf::internal *v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  protobuf::Intelligence_KeyValueParameter *v34;
  uint64_t v35;
  uint64_t v36;
  google::protobuf::internal *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  google::protobuf::internal *v41;
  int *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  protobuf::Intelligence_KeyValueParameter *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  google::protobuf::internal *v50;
  unint64_t v51;
  google::protobuf::internal *v52;
  int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  protobuf::Intelligence_KeyValueParameter *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  google::protobuf::internal *v61;
  uint64_t v62;
  google::protobuf::internal *v63;
  uint64_t v64;
  google::protobuf::internal *v65;
  uint64_t v66;
  std::string **v67;
  google::protobuf::internal *v68;

  v68 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v68, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v67 = (std::string **)(a1 + 152);
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v68 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v68;
      if (*(char *)v68 < 0)
      {
        v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v68, v8);
          v68 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_105;
              *(_DWORD *)(a1 + 16) |= 1u;
              v9 = *(std::string **)(a1 + 120);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_88;
              v10 = (std::string **)(a1 + 120);
              goto LABEL_62;
            case 2u:
              if (v8 != 17)
                goto LABEL_105;
              v12 = *(_QWORD *)TagFallback;
              v11 = (google::protobuf::internal *)((char *)TagFallback + 8);
              v5 |= 0x20u;
              *(_QWORD *)(a1 + 160) = v12;
              goto LABEL_83;
            case 3u:
              if (v8 != 24)
                goto LABEL_105;
              v5 |= 0x40u;
              v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v14 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_21;
              v15 = *(char *)v13;
              v14 = v14 + (v15 << 7) - 128;
              if (v15 < 0)
              {
                v61 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
                v68 = v61;
                *(_QWORD *)(a1 + 168) = v62;
                if (!v61)
                  goto LABEL_115;
              }
              else
              {
                v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_21:
                v68 = v13;
                *(_QWORD *)(a1 + 168) = v14;
              }
              goto LABEL_90;
            case 4u:
              if (v8 != 32)
                goto LABEL_105;
              v5 |= 0x200u;
              v16 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v17 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_26;
              v18 = *(char *)v16;
              v17 = v17 + (v18 << 7) - 128;
              if (v18 < 0)
              {
                v63 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v17);
                v68 = v63;
                *(_BYTE *)(a1 + 185) = v64 != 0;
                if (!v63)
                  goto LABEL_115;
              }
              else
              {
                v16 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
                v68 = v16;
                *(_BYTE *)(a1 + 185) = v17 != 0;
              }
              goto LABEL_90;
            case 5u:
              if (v8 != 42)
                goto LABEL_105;
              *(_DWORD *)(a1 + 16) |= 2u;
              v9 = *(std::string **)(a1 + 128);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_88;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 128), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 128);
              goto LABEL_87;
            case 6u:
              if (v8 != 50)
                goto LABEL_105;
              v19 = (unint64_t)TagFallback - 1;
              while (1)
              {
                v20 = (google::protobuf::internal *)(v19 + 1);
                v68 = (google::protobuf::internal *)(v19 + 1);
                v21 = *(int **)(a1 + 40);
                if (!v21)
                  break;
                v22 = *(int *)(a1 + 32);
                v23 = *v21;
                if ((int)v22 >= *v21)
                {
                  if (v23 == *(_DWORD *)(a1 + 36))
                  {
LABEL_37:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v23 + 1);
                    v21 = *(int **)(a1 + 40);
                    v23 = *v21;
                  }
                  *v21 = v23 + 1;
                  v25 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  LODWORD(v24) = (_DWORD)v25;
                  v26 = *(_QWORD *)(a1 + 40);
                  v27 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v27 + 1;
                  *(_QWORD *)(v26 + 8 * v27 + 8) = v25;
                  v20 = v68;
                  goto LABEL_39;
                }
                *(_DWORD *)(a1 + 32) = v22 + 1;
                v24 = *(_QWORD *)&v21[2 * v22 + 2];
LABEL_39:
                v19 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, v24, v20);
                v68 = (google::protobuf::internal *)v19;
                if (!v19)
                  goto LABEL_115;
                if (*(_QWORD *)this <= v19 || *(_BYTE *)v19 != 50)
                  goto LABEL_90;
              }
              v23 = *(_DWORD *)(a1 + 36);
              goto LABEL_37;
            case 7u:
              if (v8 != 58)
                goto LABEL_105;
              v28 = (unint64_t)TagFallback - 1;
              while (1)
              {
                v29 = (google::protobuf::internal *)(v28 + 1);
                v68 = (google::protobuf::internal *)(v28 + 1);
                v30 = *(int **)(a1 + 64);
                if (!v30)
                  break;
                v31 = *(int *)(a1 + 56);
                v32 = *v30;
                if ((int)v31 >= *v30)
                {
                  if (v32 == *(_DWORD *)(a1 + 60))
                  {
LABEL_50:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v32 + 1);
                    v30 = *(int **)(a1 + 64);
                    v32 = *v30;
                  }
                  *v30 = v32 + 1;
                  v34 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
                  LODWORD(v33) = (_DWORD)v34;
                  v35 = *(_QWORD *)(a1 + 64);
                  v36 = *(int *)(a1 + 56);
                  *(_DWORD *)(a1 + 56) = v36 + 1;
                  *(_QWORD *)(v35 + 8 * v36 + 8) = v34;
                  v29 = v68;
                  goto LABEL_52;
                }
                *(_DWORD *)(a1 + 56) = v31 + 1;
                v33 = *(_QWORD *)&v30[2 * v31 + 2];
LABEL_52:
                v28 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, v33, v29);
                v68 = (google::protobuf::internal *)v28;
                if (!v28)
                  goto LABEL_115;
                if (*(_QWORD *)this <= v28 || *(_BYTE *)v28 != 58)
                  goto LABEL_90;
              }
              v32 = *(_DWORD *)(a1 + 60);
              goto LABEL_50;
            case 8u:
              if (v8 != 66)
                goto LABEL_105;
              *(_DWORD *)(a1 + 16) |= 4u;
              v9 = *(std::string **)(a1 + 136);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_88;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 136), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 136);
              goto LABEL_87;
            case 9u:
              if (v8 != 74)
                goto LABEL_105;
              *(_DWORD *)(a1 + 16) |= 8u;
              v9 = *(std::string **)(a1 + 144);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_88;
              v10 = (std::string **)(a1 + 144);
LABEL_62:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *v10;
              goto LABEL_87;
            case 0xAu:
              if (v8 != 80)
                goto LABEL_105;
              v5 |= 0x100u;
              v37 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v38 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_67;
              v39 = *(char *)v37;
              v38 = v38 + (v39 << 7) - 128;
              if (v39 < 0)
              {
                v65 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v38);
                v68 = v65;
                *(_BYTE *)(a1 + 184) = v66 != 0;
                if (!v65)
                  goto LABEL_115;
              }
              else
              {
                v37 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_67:
                v68 = v37;
                *(_BYTE *)(a1 + 184) = v38 != 0;
              }
              goto LABEL_90;
            case 0xBu:
              if (v8 != 90)
                goto LABEL_105;
              v40 = (unint64_t)TagFallback - 1;
              while (1)
              {
                v41 = (google::protobuf::internal *)(v40 + 1);
                v68 = (google::protobuf::internal *)(v40 + 1);
                v42 = *(int **)(a1 + 88);
                if (!v42)
                  break;
                v43 = *(int *)(a1 + 80);
                v44 = *v42;
                if ((int)v43 >= *v42)
                {
                  if (v44 == *(_DWORD *)(a1 + 84))
                  {
LABEL_75:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v44 + 1);
                    v42 = *(int **)(a1 + 88);
                    v44 = *v42;
                  }
                  *v42 = v44 + 1;
                  v46 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 72));
                  LODWORD(v45) = (_DWORD)v46;
                  v47 = *(_QWORD *)(a1 + 88);
                  v48 = *(int *)(a1 + 80);
                  *(_DWORD *)(a1 + 80) = v48 + 1;
                  *(_QWORD *)(v47 + 8 * v48 + 8) = v46;
                  v41 = v68;
                  goto LABEL_77;
                }
                *(_DWORD *)(a1 + 80) = v43 + 1;
                v45 = *(_QWORD *)&v42[2 * v43 + 2];
LABEL_77:
                v40 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, v45, v41);
                v68 = (google::protobuf::internal *)v40;
                if (!v40)
                  goto LABEL_115;
                if (*(_QWORD *)this <= v40 || *(_BYTE *)v40 != 90)
                  goto LABEL_90;
              }
              v44 = *(_DWORD *)(a1 + 84);
              goto LABEL_75;
            case 0xCu:
              if (v8 != 97)
                goto LABEL_105;
              v49 = *(_QWORD *)TagFallback;
              v11 = (google::protobuf::internal *)((char *)TagFallback + 8);
              v5 |= 0x80u;
              *(_QWORD *)(a1 + 176) = v49;
LABEL_83:
              v68 = v11;
              goto LABEL_90;
            case 0xDu:
              if (v8 != 106)
                goto LABEL_105;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v9 = *(std::string **)(a1 + 152);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_88;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v67, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *v67;
LABEL_87:
              TagFallback = v68;
LABEL_88:
              v50 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_89;
            case 0xEu:
              if (v8 != 114)
                goto LABEL_105;
              v51 = (unint64_t)TagFallback - 1;
              break;
            default:
LABEL_105:
              if ((_DWORD)v8)
                v60 = (v8 & 7) == 4;
              else
                v60 = 1;
              if (v60)
              {
                *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
                goto LABEL_3;
              }
              v50 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_89:
              v68 = v50;
              if (!v50)
              {
LABEL_115:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_90:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v68, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v52 = (google::protobuf::internal *)(v51 + 1);
            v68 = (google::protobuf::internal *)(v51 + 1);
            v53 = *(int **)(a1 + 112);
            if (!v53)
              break;
            v54 = *(int *)(a1 + 104);
            v55 = *v53;
            if ((int)v54 >= *v53)
            {
              if (v55 == *(_DWORD *)(a1 + 108))
              {
LABEL_99:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v55 + 1);
                v53 = *(int **)(a1 + 112);
                v55 = *v53;
              }
              *v53 = v55 + 1;
              v57 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 96));
              LODWORD(v56) = (_DWORD)v57;
              v58 = *(_QWORD *)(a1 + 112);
              v59 = *(int *)(a1 + 104);
              *(_DWORD *)(a1 + 104) = v59 + 1;
              *(_QWORD *)(v58 + 8 * v59 + 8) = v57;
              v52 = v68;
              goto LABEL_101;
            }
            *(_DWORD *)(a1 + 104) = v54 + 1;
            v56 = *(_QWORD *)&v53[2 * v54 + 2];
LABEL_101:
            v51 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, v56, v52);
            v68 = (google::protobuf::internal *)v51;
            if (!v51)
              goto LABEL_115;
            if (*(_QWORD *)this <= v51 || *(_BYTE *)v51 != 114)
              goto LABEL_90;
          }
          v55 = *(_DWORD *)(a1 + 108);
          goto LABEL_99;
        }
        TagFallback = (google::protobuf::internal *)((char *)v68 + 2);
      }
      break;
    }
    v68 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v68;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)protobuf::Intelligence_KeyValueParameter::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_KeyValueParameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_KeyValueParameter *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  protobuf::Intelligence_KeyValueParameter *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  int k;
  protobuf::Intelligence_KeyValueParameter *v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int m;
  protobuf::Intelligence_KeyValueParameter *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 15), a2);
    if ((v6 & 0x20) == 0)
    {
LABEL_3:
      if ((v6 & 0x40) == 0)
        goto LABEL_4;
LABEL_39:
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v24 = *((_QWORD *)this + 21);
      *v4 = 24;
      if (v24 > 0x7F)
      {
        v4[1] = v24 | 0x80;
        v45 = v24 >> 7;
        if (v24 >> 14)
        {
          v4 += 3;
          do
          {
            *(v4 - 1) = v45 | 0x80;
            v46 = v45 >> 7;
            ++v4;
            v47 = v45 >> 14;
            v45 >>= 7;
          }
          while (v47);
          *(v4 - 1) = v46;
          if ((v6 & 0x200) != 0)
            goto LABEL_87;
        }
        else
        {
          v4[2] = v45;
          v4 += 3;
          if ((v6 & 0x200) != 0)
            goto LABEL_87;
        }
      }
      else
      {
        v4[1] = v24;
        v4 += 2;
        if ((v6 & 0x200) != 0)
          goto LABEL_87;
      }
LABEL_5:
      if ((v6 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v23 = *((_QWORD *)this + 20);
  *v4 = 17;
  *(_QWORD *)(v4 + 1) = v23;
  v4 += 9;
  if ((v6 & 0x40) != 0)
    goto LABEL_39;
LABEL_4:
  if ((v6 & 0x200) == 0)
    goto LABEL_5;
LABEL_87:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v48 = *((_BYTE *)this + 185);
  *v4 = 32;
  v4[1] = v48;
  v4 += 2;
  if ((v6 & 2) != 0)
LABEL_6:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 16), v4);
LABEL_7:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 50;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        v11 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v17 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 58;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          v19 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v18;
        v19 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  if ((v6 & 4) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 17), v4);
    if ((v6 & 8) == 0)
    {
LABEL_33:
      if ((v6 & 0x100) == 0)
        goto LABEL_49;
      goto LABEL_46;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_33;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 18), v4);
  if ((v6 & 0x100) == 0)
    goto LABEL_49;
LABEL_46:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v25 = *((_BYTE *)this + 184);
  *v4 = 80;
  v4[1] = v25;
  v4 += 2;
LABEL_49:
  v26 = *((_DWORD *)this + 20);
  if (v26)
  {
    for (k = 0; k != v26; ++k)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v28 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 72, k);
      *v4 = 90;
      v29 = *((_DWORD *)v28 + 5);
      if (v29 > 0x7F)
      {
        v4[1] = v29 | 0x80;
        v31 = v29 >> 7;
        if (v29 >> 14)
        {
          v30 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v30 - 1) = v31 | 0x80;
            v32 = v31 >> 7;
            ++v30;
            v33 = v31 >> 14;
            v31 >>= 7;
          }
          while (v33);
          *(v30 - 1) = v32;
        }
        else
        {
          v4[2] = v31;
          v30 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v29;
        v30 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v28, v30, a3);
    }
  }
  if ((v6 & 0x80) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v34 = *((_QWORD *)this + 22);
    *v4 = 97;
    *(_QWORD *)(v4 + 1) = v34;
    v4 += 9;
  }
  if ((v6 & 0x10) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 13, *((_QWORD *)this + 19), v4);
  v35 = *((_DWORD *)this + 26);
  if (v35)
  {
    for (m = 0; m != v35; ++m)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v37 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96, m);
      *v4 = 114;
      v38 = *((_DWORD *)v37 + 5);
      if (v38 > 0x7F)
      {
        v4[1] = v38 | 0x80;
        v40 = v38 >> 7;
        if (v38 >> 14)
        {
          v39 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v39 - 1) = v40 | 0x80;
            v41 = v40 >> 7;
            ++v39;
            v42 = v40 >> 14;
            v40 >>= 7;
          }
          while (v42);
          *(v39 - 1) = v41;
        }
        else
        {
          v4[2] = v40;
          v39 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v38;
        v39 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v37, v39, a3);
    }
  }
  v43 = *((_QWORD *)this + 1);
  if ((v43 & 1) == 0)
    return (unsigned __int8 *)v4;
  v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v49 + 23) < 0)
  {
    v51 = *(void **)v49;
    v50 = *(_QWORD *)(v49 + 8);
  }
  else
  {
    LODWORD(v50) = *(unsigned __int8 *)(v49 + 23);
    v51 = (void *)v49;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v50)
  {
    v52 = (int)v50;
    memcpy(v4, v51, (int)v50);
    v4 += v52;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v51, v50, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_KeyValueParameter::ByteSizeLong(protobuf::Intelligence_KeyValueParameter *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_KeyValueParameter **v11;
  uint64_t v12;
  protobuf::Intelligence_KeyValueParameter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  protobuf::Intelligence_KeyValueParameter **v18;
  uint64_t v19;
  protobuf::Intelligence_KeyValueParameter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  protobuf::Intelligence_KeyValueParameter **v25;
  uint64_t v26;
  protobuf::Intelligence_KeyValueParameter *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_KeyValueParameter **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (protobuf::Intelligence_KeyValueParameter **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (protobuf::Intelligence_KeyValueParameter **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((_DWORD *)this + 4);
  if ((_BYTE)v29)
  {
    if ((v29 & 1) != 0)
    {
      v37 = *((_QWORD *)this + 15);
      v38 = *(unsigned __int8 *)(v37 + 23);
      v39 = *(_QWORD *)(v37 + 8);
      if ((v38 & 0x80u) == 0)
        v39 = v38;
      v23 += v39 + ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v29 & 2) == 0)
      {
LABEL_30:
        if ((v29 & 4) == 0)
          goto LABEL_31;
        goto LABEL_58;
      }
    }
    else if ((v29 & 2) == 0)
    {
      goto LABEL_30;
    }
    v40 = *((_QWORD *)this + 16);
    v41 = *(unsigned __int8 *)(v40 + 23);
    v42 = *(_QWORD *)(v40 + 8);
    if ((v41 & 0x80u) == 0)
      v42 = v41;
    v23 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v29 & 4) == 0)
    {
LABEL_31:
      if ((v29 & 8) == 0)
        goto LABEL_32;
      goto LABEL_61;
    }
LABEL_58:
    v43 = *((_QWORD *)this + 17);
    v44 = *(unsigned __int8 *)(v43 + 23);
    v45 = *(_QWORD *)(v43 + 8);
    if ((v44 & 0x80u) == 0)
      v45 = v44;
    v23 += v45 + ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v29 & 8) == 0)
    {
LABEL_32:
      if ((v29 & 0x10) == 0)
      {
LABEL_36:
        v33 = v23 + 9;
        if ((v29 & 0x20) == 0)
          v33 = v23;
        if ((v29 & 0x40) != 0)
          v33 += ((9 * (__clz(*((_QWORD *)this + 21) | 1) ^ 0x3F) + 73) >> 6) + 1;
        if ((v29 & 0x80) != 0)
          v23 = v33 + 9;
        else
          v23 = v33;
        goto LABEL_43;
      }
LABEL_33:
      v30 = *((_QWORD *)this + 19);
      v31 = *(unsigned __int8 *)(v30 + 23);
      v32 = *(_QWORD *)(v30 + 8);
      if ((v31 & 0x80u) == 0)
        v32 = v31;
      v23 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
      goto LABEL_36;
    }
LABEL_61:
    v46 = *((_QWORD *)this + 18);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v48 = *(_QWORD *)(v46 + 8);
    if ((v47 & 0x80u) == 0)
      v48 = v47;
    v23 += v48 + ((9 * (__clz(v48 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v29 & 0x10) == 0)
      goto LABEL_36;
    goto LABEL_33;
  }
LABEL_43:
  v34 = v23 + 2;
  if ((v29 & 0x100) == 0)
    v34 = v23;
  if ((v29 & 0x200) != 0)
    v34 += 2;
  if ((v29 & 0x300) != 0)
    result = v34;
  else
    result = v23;
  v36 = *((_QWORD *)this + 1);
  if ((v36 & 1) != 0)
  {
    v49 = v36 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v49 + 23) < 0)
      v50 = *(_QWORD *)(v49 + 8);
    else
      v50 = *(unsigned __int8 *)(v49 + 23);
    result += v50;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void protobuf::Intelligence_KeyValueParameter::CheckTypeAndMergeFrom(protobuf::Intelligence_KeyValueParameter *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_KeyValueParameter::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_KeyValueParameter::MergeFrom(protobuf::Intelligence_KeyValueParameter *this, const protobuf::Intelligence_KeyValueParameter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 1550);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((protobuf::Intelligence_KeyValueParameter *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((protobuf::Intelligence_KeyValueParameter *)((char *)this + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((protobuf::Intelligence_KeyValueParameter *)((char *)this + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((protobuf::Intelligence_KeyValueParameter *)((char *)this + 96));
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 15);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 15);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 16);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 16);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 17);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 17);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 18);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 18);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 19);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 19);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                      {
LABEL_33:
                        if ((v6 & 0x40) == 0)
                          goto LABEL_34;
                        goto LABEL_46;
                      }
LABEL_45:
                      *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
                      if ((v6 & 0x40) == 0)
                      {
LABEL_34:
                        if ((v6 & 0x80) == 0)
                        {
LABEL_36:
                          *((_DWORD *)this + 4) |= v6;
                          goto LABEL_37;
                        }
LABEL_35:
                        *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
                        goto LABEL_36;
                      }
LABEL_46:
                      *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
                      if ((v6 & 0x80) == 0)
                        goto LABEL_36;
                      goto LABEL_35;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_33;
                goto LABEL_45;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_37:
  if ((v6 & 0x300) != 0)
  {
    if ((v6 & 0x100) != 0)
      *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
    if ((v6 & 0x200) != 0)
      *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_22AF16198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_KeyValueParameter::CopyFrom(protobuf::Intelligence_KeyValueParameter *this, const protobuf::Intelligence_KeyValueParameter *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_KeyValueParameter::Clear(this);
    protobuf::Intelligence_KeyValueParameter::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_KeyValueParameter::IsInitialized(protobuf::Intelligence_KeyValueParameter *this)
{
  return 1;
}

double protobuf::Intelligence_KeyValueParameter::InternalSwap(protobuf::Intelligence_KeyValueParameter *this, protobuf::Intelligence_KeyValueParameter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double result;
  unint64_t v46;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v46;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_KeyValueParameter *)((char *)this + 24), (protobuf::Intelligence_KeyValueParameter *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_KeyValueParameter *)((char *)this + 48), (protobuf::Intelligence_KeyValueParameter *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_KeyValueParameter *)((char *)this + 72), (protobuf::Intelligence_KeyValueParameter *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_KeyValueParameter *)((char *)this + 96), (protobuf::Intelligence_KeyValueParameter *)((char *)a2 + 96));
  v13 = (uint64_t *)*((_QWORD *)this + 15);
  v14 = (uint64_t **)((char *)a2 + 120);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  v20 = (uint64_t **)((char *)a2 + 128);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 17);
  v26 = (uint64_t **)((char *)a2 + 136);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 18);
  v32 = (uint64_t **)((char *)a2 + 144);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 19);
  v38 = (uint64_t **)((char *)a2 + 152);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v43;
  v44 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v44;
  result = *((double *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((double *)a2 + 22) = result;
  LOBYTE(v44) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v44;
  LOBYTE(v44) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v44;
  return result;
}

_QWORD *protobuf::Intelligence_KeyValueParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.KeyValueParameter");
}

protobuf::Intelligence_Undo *protobuf::Intelligence_Undo::Intelligence_Undo(protobuf::Intelligence_Undo *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F540D78;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_Undo_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Undo_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF16624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Undo *protobuf::Intelligence_Undo::Intelligence_Undo(protobuf::Intelligence_Undo *this, const protobuf::Intelligence_Undo *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F540D78;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v6);
  }
  return this;
}

void sub_22AF166E8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Undo::~Intelligence_Undo(protobuf::Intelligence_Undo *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F540D78;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Undo::~Intelligence_Undo(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Undo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Undo::default_instance(protobuf::Intelligence_Undo *this)
{
  if (atomic_load(scc_info_Intelligence_Undo_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Undo_intelligence_2eproto);
  return &protobuf::_Intelligence_Undo_default_instance_;
}

void protobuf::Intelligence_Undo::Clear(protobuf::Intelligence_Undo *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_Undo *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

std::string::value_type *protobuf::Intelligence_Undo::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  std::string::value_type *v7;
  const char *v8;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_KeyValueParameter *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v19;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = result + 1;
      LODWORD(v8) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
      v19 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v7 = result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 != 18)
          goto LABEL_11;
        result = v7 - 1;
        while (2)
        {
          v10 = (google::protobuf::internal *)(result + 1);
          v19 = (google::protobuf::internal *)(result + 1);
          v11 = *(int **)(a1 + 40);
          if (v11)
          {
            v12 = *(int *)(a1 + 32);
            v13 = *v11;
            if ((int)v12 < *v11)
            {
              *(_DWORD *)(a1 + 32) = v12 + 1;
              v14 = *(protobuf::Intelligence_KeyValueParameter **)&v11[2 * v12 + 2];
              goto LABEL_23;
            }
            if (v13 == *(_DWORD *)(a1 + 36))
            {
LABEL_21:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
              v11 = *(int **)(a1 + 40);
              v13 = *v11;
            }
            *v11 = v13 + 1;
            v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            v15 = *(_QWORD *)(a1 + 40);
            v16 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v16 + 1;
            *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
            v10 = v19;
LABEL_23:
            result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v14, v10);
            v19 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 18)
              goto LABEL_31;
            continue;
          }
          break;
        }
        v13 = *(_DWORD *)(a1 + 36);
        goto LABEL_21;
      }
      if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v17 = *(std::string **)(a1 + 48);
        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *(std::string **)(a1 + 48);
          v7 = (std::string::value_type *)v19;
        }
        result = google::protobuf::internal::InlineGreedyStringParser(v17, v7, (uint64_t)this);
        goto LABEL_30;
      }
LABEL_11:
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return v7;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_30:
      v19 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_31:
      v18 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v19;
      if (v18)
        return result;
    }
    v7 = result + 2;
LABEL_5:
    v19 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Undo::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Undo *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int i;
  protobuf::Intelligence_KeyValueParameter *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v4 = a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v8 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 18;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        v4[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = v4 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          v4[2] = v11;
          v10 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v9;
        v10 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)v4;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 23) < 0)
  {
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    LODWORD(v17) = *(unsigned __int8 *)(v16 + 23);
    v18 = (void *)v16;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v17)
  {
    v19 = (int)v17;
    memcpy(v4, v18, (int)v17);
    v4 += v19;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v18, v17, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Undo::ByteSizeLong(protobuf::Intelligence_Undo *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v8 = *((_QWORD *)this + 6);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v2 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = *(unsigned __int8 *)(v13 + 23);
    v2 += v14;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Undo::CheckTypeAndMergeFrom(protobuf::Intelligence_Undo *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Undo::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Undo::MergeFrom(protobuf::Intelligence_Undo *this, const protobuf::Intelligence_Undo *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 1828);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 6);
    v7 = (std::string **)((char *)this + 48);
    v6 = v8;
    *((_DWORD *)v7 - 8) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 6);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF16E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Undo::CopyFrom(protobuf::Intelligence_Undo *this, const protobuf::Intelligence_Undo *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Undo::Clear(this);
    protobuf::Intelligence_Undo::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Undo::IsInitialized(protobuf::Intelligence_Undo *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Undo::InternalSwap(protobuf::Intelligence_Undo *this, protobuf::Intelligence_Undo *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Undo *)((char *)this + 24), (protobuf::Intelligence_Undo *)((char *)a2 + 24));
  v16 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (std::string **)((char *)this + 48);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

_QWORD *protobuf::Intelligence_Undo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Undo");
}

protobuf::Intelligence_DialogResponse *protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse(protobuf::Intelligence_DialogResponse *this)
{
  *(_QWORD *)this = &off_24F540E08;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (atomic_load(scc_info_Intelligence_DialogResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_DialogResponse_intelligence_2eproto);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 21) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 22) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 23) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 25) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 26) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 27) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 28) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 58) = 0;
  *((_WORD *)this + 118) = 0;
  return this;
}

void sub_22AF17080(_Unwind_Exception *a1)
{
  google::protobuf::internal::ArenaImpl **v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v1 + 12);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 9);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v1 + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v1 + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_DialogResponse *protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse(protobuf::Intelligence_DialogResponse *this, const protobuf::Intelligence_DialogResponse *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;

  *(_QWORD *)this = &off_24F540E08;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 12, (uint64_t)a2 + 96);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 20);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v12);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 21) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x40) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 21);
    if (v13 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 21, (uint64_t)v13);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 22) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x80) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 22);
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 22, (uint64_t)v14);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 23) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x100) != 0)
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 23);
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 23, (uint64_t)v15);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 24) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x200) != 0)
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 24);
    if (v16 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 24, (uint64_t)v16);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 25) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x400) != 0)
  {
    v17 = (uint64_t *)*((_QWORD *)a2 + 25);
    if (v17 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 25, (uint64_t)v17);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 26) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x800) != 0)
  {
    v18 = (uint64_t *)*((_QWORD *)a2 + 26);
    if (v18 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 26, (uint64_t)v18);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 27) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x1000) != 0)
  {
    v19 = (uint64_t *)*((_QWORD *)a2 + 27);
    if (v19 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 27, (uint64_t)v19);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 28) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x2000) != 0)
  {
    v20 = (uint64_t *)*((_QWORD *)a2 + 28);
    if (v20 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 28, (uint64_t)v20);
  }
  v21 = *((_DWORD *)a2 + 58);
  *((_WORD *)this + 118) = *((_WORD *)a2 + 118);
  *((_DWORD *)this + 58) = v21;
  return this;
}

void sub_22AF17370(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;
  google::protobuf::internal::ArenaImpl **v3;
  uint64_t v4;
  google::protobuf::internal::ArenaImpl **v5;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_DialogResponse::~Intelligence_DialogResponse(protobuf::Intelligence_DialogResponse *this)
{
  *(_QWORD *)this = &off_24F540E08;
  protobuf::Intelligence_DialogResponse::SharedDtor(this);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 12);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 72);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_DialogResponse::~Intelligence_DialogResponse(this);
  JUMPOUT(0x22E2E9CCCLL);
}

_QWORD *protobuf::Intelligence_DialogResponse::SharedDtor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = this;
  v2 = this[15];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = v1[16];
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = v1[17];
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = v1[18];
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = v1[19];
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  v11 = v1[20];
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v11, 0x1012C40EC159624);
  }
  v12 = v1[21];
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v12, 0x1012C40EC159624);
  }
  v13 = v1[22];
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v13, 0x1012C40EC159624);
  }
  v14 = v1[23];
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v14, 0x1012C40EC159624);
  }
  v15 = v1[24];
  if ((uint64_t *)v15 != &google::protobuf::internal::fixed_address_empty_string && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v15, 0x1012C40EC159624);
  }
  v16 = v1[25];
  if ((uint64_t *)v16 != &google::protobuf::internal::fixed_address_empty_string && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v16, 0x1012C40EC159624);
  }
  v17 = v1[26];
  if ((uint64_t *)v17 != &google::protobuf::internal::fixed_address_empty_string && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v17, 0x1012C40EC159624);
  }
  v18 = v1[27];
  if ((uint64_t *)v18 != &google::protobuf::internal::fixed_address_empty_string && v18)
  {
    if (*(char *)(v18 + 23) < 0)
      operator delete(*(void **)v18);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v18, 0x1012C40EC159624);
  }
  v19 = v1[28];
  if ((uint64_t *)v19 != &google::protobuf::internal::fixed_address_empty_string && v19)
  {
    if (*(char *)(v19 + 23) < 0)
      operator delete(*(void **)v19);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return this;
}

uint64_t protobuf::Intelligence_DialogResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_DialogResponse::default_instance(protobuf::Intelligence_DialogResponse *this)
{
  if (atomic_load(scc_info_Intelligence_DialogResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_DialogResponse_intelligence_2eproto);
  return &protobuf::_Intelligence_DialogResponse_default_instance_;
}

void protobuf::Intelligence_DialogResponse::Clear(protobuf::Intelligence_DialogResponse *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96);
  v2 = *((_DWORD *)this + 4);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_15:
      v4 = *((_QWORD *)this + 16);
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
LABEL_23:
      v6 = *((_QWORD *)this + 18);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
LABEL_7:
      if ((v2 & 0x20) == 0)
        goto LABEL_8;
LABEL_31:
      v8 = *((_QWORD *)this + 20);
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
LABEL_9:
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
LABEL_39:
      v10 = *((_QWORD *)this + 22);
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
      }
      goto LABEL_42;
    }
    v3 = *((_QWORD *)this + 15);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_19:
    v5 = *((_QWORD *)this + 17);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_27:
    v7 = *((_QWORD *)this + 19);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
LABEL_35:
    v9 = *((_QWORD *)this + 21);
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    goto LABEL_39;
  }
LABEL_42:
  if ((v2 & 0x3F00) == 0)
    goto LABEL_73;
  if ((v2 & 0x100) == 0)
  {
    if ((v2 & 0x200) == 0)
      goto LABEL_45;
LABEL_54:
    v12 = *((_QWORD *)this + 24);
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      if ((v2 & 0x400) != 0)
        goto LABEL_58;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
      if ((v2 & 0x400) != 0)
        goto LABEL_58;
    }
LABEL_46:
    if ((v2 & 0x800) == 0)
      goto LABEL_47;
LABEL_62:
    v14 = *((_QWORD *)this + 26);
    if (*(char *)(v14 + 23) < 0)
    {
      **(_BYTE **)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      if ((v2 & 0x1000) != 0)
        goto LABEL_66;
    }
    else
    {
      *(_BYTE *)v14 = 0;
      *(_BYTE *)(v14 + 23) = 0;
      if ((v2 & 0x1000) != 0)
        goto LABEL_66;
    }
LABEL_48:
    if ((v2 & 0x2000) == 0)
      goto LABEL_73;
    goto LABEL_70;
  }
  v11 = *((_QWORD *)this + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    **(_BYTE **)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_54;
  }
  else
  {
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 23) = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_54;
  }
LABEL_45:
  if ((v2 & 0x400) == 0)
    goto LABEL_46;
LABEL_58:
  v13 = *((_QWORD *)this + 25);
  if (*(char *)(v13 + 23) < 0)
  {
    **(_BYTE **)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_62;
  }
  else
  {
    *(_BYTE *)v13 = 0;
    *(_BYTE *)(v13 + 23) = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_62;
  }
LABEL_47:
  if ((v2 & 0x1000) == 0)
    goto LABEL_48;
LABEL_66:
  v15 = *((_QWORD *)this + 27);
  if (*(char *)(v15 + 23) < 0)
  {
    **(_BYTE **)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    if ((v2 & 0x2000) == 0)
      goto LABEL_73;
  }
  else
  {
    *(_BYTE *)v15 = 0;
    *(_BYTE *)(v15 + 23) = 0;
    if ((v2 & 0x2000) == 0)
      goto LABEL_73;
  }
LABEL_70:
  v16 = *((_QWORD *)this + 28);
  if (*(char *)(v16 + 23) < 0)
  {
    **(_BYTE **)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v16 = 0;
    *(_BYTE *)(v16 + 23) = 0;
  }
LABEL_73:
  if ((v2 & 0xC000) != 0)
  {
    *((_BYTE *)this + 236) = 0;
    *((_DWORD *)this + 58) = 0;
  }
  v18 = *((_BYTE *)this + 8);
  v17 = (char *)this + 8;
  v17[229] = 0;
  *((_DWORD *)v17 + 2) = 0;
  if ((v18 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v17);
}

char *protobuf::Intelligence_DialogResponse::_InternalParse(uint64_t a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  uint64_t *v8;
  const char *v9;
  std::string *v10;
  std::string **v11;
  char *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  int v22;
  protobuf::Intelligence_KeyValueParameter *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  int v30;
  protobuf::Intelligence_KeyValueParameter *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  int v38;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  int v51;
  protobuf::Intelligence_KeyValueParameter *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v62 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v62, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v8 = (uint64_t *)(a1 + 72);
    while (2)
    {
      TagFallback = v62 + 1;
      LODWORD(v9) = *v62;
      if (*v62 < 0)
      {
        v9 = (const char *)(v9 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v62, v9);
          v62 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 120);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 120);
              goto LABEL_113;
            case 2u:
              if (v9 != 18)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 128);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 128);
              goto LABEL_113;
            case 3u:
              if (v9 != 26)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 136);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 136);
              goto LABEL_113;
            case 4u:
              if (v9 != 34)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 8u;
              v10 = *(std::string **)(a1 + 144);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 144);
              goto LABEL_113;
            case 5u:
              if (v9 != 42)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v10 = *(std::string **)(a1 + 152);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 152);
              goto LABEL_113;
            case 6u:
              if (v9 != 48)
                goto LABEL_131;
              v5 |= 0x8000u;
              v12 = TagFallback + 1;
              v13 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_31;
              v14 = *v12;
              v13 = v13 + (v14 << 7) - 128;
              if (v14 < 0)
              {
                v56 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v13);
                v62 = v56;
                *(_BYTE *)(a1 + 236) = v57 != 0;
                if (!v56)
                  goto LABEL_141;
              }
              else
              {
                v12 = TagFallback + 2;
LABEL_31:
                v62 = v12;
                *(_BYTE *)(a1 + 236) = v13 != 0;
              }
              goto LABEL_116;
            case 7u:
              if (v9 != 58)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v10 = *(std::string **)(a1 + 160);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 160);
              goto LABEL_113;
            case 8u:
              if (v9 != 66)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x40u;
              v10 = *(std::string **)(a1 + 168);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 168);
              goto LABEL_113;
            case 9u:
              if (v9 != 74)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x80u;
              v10 = *(std::string **)(a1 + 176);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 176);
              goto LABEL_113;
            case 0xAu:
              if (v9 != 80)
                goto LABEL_131;
              v5 |= 0x4000u;
              v16 = TagFallback + 1;
              LODWORD(v15) = *TagFallback;
              if ((v15 & 0x80) == 0)
                goto LABEL_45;
              v17 = *v16;
              v15 = v15 + (v17 << 7) - 128;
              if (v17 < 0)
              {
                v58 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v15);
                v62 = v58;
                *(_DWORD *)(a1 + 232) = v59;
                if (!v58)
                  goto LABEL_141;
              }
              else
              {
                v16 = TagFallback + 2;
LABEL_45:
                v62 = v16;
                *(_DWORD *)(a1 + 232) = v15;
              }
              goto LABEL_116;
            case 0xBu:
              if (v9 != 90)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x100u;
              v10 = *(std::string **)(a1 + 184);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 184);
              goto LABEL_113;
            case 0xCu:
              if (v9 != 98)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x200u;
              v10 = *(std::string **)(a1 + 192);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 192);
              goto LABEL_113;
            case 0xDu:
              if (v9 != 106)
                goto LABEL_131;
              v18 = TagFallback - 1;
              while (1)
              {
                v19 = v18 + 1;
                v62 = v18 + 1;
                v20 = *(int **)(a1 + 40);
                if (!v20)
                  break;
                v21 = *(int *)(a1 + 32);
                v22 = *v20;
                if ((int)v21 >= *v20)
                {
                  if (v22 == *(_DWORD *)(a1 + 36))
                  {
LABEL_59:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v22 + 1);
                    v20 = *(int **)(a1 + 40);
                    v22 = *v20;
                  }
                  *v20 = v22 + 1;
                  v23 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  v24 = *(_QWORD *)(a1 + 40);
                  v25 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v25 + 1;
                  *(_QWORD *)(v24 + 8 * v25 + 8) = v23;
                  v19 = v62;
                  goto LABEL_61;
                }
                *(_DWORD *)(a1 + 32) = v21 + 1;
                v23 = *(protobuf::Intelligence_KeyValueParameter **)&v20[2 * v21 + 2];
LABEL_61:
                v18 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v23, (google::protobuf::internal *)v19);
                v62 = v18;
                if (!v18)
                  goto LABEL_141;
                if (*(_QWORD *)this <= (unint64_t)v18 || *v18 != 106)
                  goto LABEL_116;
              }
              v22 = *(_DWORD *)(a1 + 36);
              goto LABEL_59;
            case 0xEu:
              if (v9 != 114)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x400u;
              v10 = *(std::string **)(a1 + 200);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 200);
              goto LABEL_113;
            case 0xFu:
              if (v9 != 122)
                goto LABEL_131;
              v26 = TagFallback - 1;
              while (1)
              {
                v27 = v26 + 1;
                v62 = v26 + 1;
                v28 = *(int **)(a1 + 64);
                if (!v28)
                  break;
                v29 = *(int *)(a1 + 56);
                v30 = *v28;
                if ((int)v29 >= *v28)
                {
                  if (v30 == *(_DWORD *)(a1 + 60))
                  {
LABEL_75:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v30 + 1);
                    v28 = *(int **)(a1 + 64);
                    v30 = *v28;
                  }
                  *v28 = v30 + 1;
                  v31 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
                  v32 = *(_QWORD *)(a1 + 64);
                  v33 = *(int *)(a1 + 56);
                  *(_DWORD *)(a1 + 56) = v33 + 1;
                  *(_QWORD *)(v32 + 8 * v33 + 8) = v31;
                  v27 = v62;
                  goto LABEL_77;
                }
                *(_DWORD *)(a1 + 56) = v29 + 1;
                v31 = *(protobuf::Intelligence_KeyValueParameter **)&v28[2 * v29 + 2];
LABEL_77:
                v26 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v31, (google::protobuf::internal *)v27);
                v62 = v26;
                if (!v26)
                  goto LABEL_141;
                if (*(_QWORD *)this <= (unint64_t)v26 || *v26 != 122)
                  goto LABEL_116;
              }
              v30 = *(_DWORD *)(a1 + 60);
              goto LABEL_75;
            case 0x10u:
              if (v9 != 130)
                goto LABEL_131;
              v34 = TagFallback - 2;
              while (1)
              {
                v35 = v34 + 2;
                v62 = v34 + 2;
                v36 = *(int **)(a1 + 88);
                if (!v36)
                  break;
                v37 = *(int *)(a1 + 80);
                v38 = *v36;
                if ((int)v37 >= *v36)
                {
                  if (v38 == *(_DWORD *)(a1 + 84))
                  {
LABEL_88:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v38 + 1);
                    v36 = *(int **)(a1 + 88);
                    v38 = *v36;
                  }
                  *v36 = v38 + 1;
                  v40 = (google::protobuf::internal::ArenaImpl *)*v8;
                  if (*v8)
                  {
                    if (*((_QWORD *)v40 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v40, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v41 = *(_QWORD *)(a1 + 88);
                  v42 = *(int *)(a1 + 80);
                  *(_DWORD *)(a1 + 80) = v42 + 1;
                  *(_QWORD *)(v41 + 8 * v42 + 8) = AlignedAndAddCleanup;
                  v35 = v62;
                  goto LABEL_95;
                }
                *(_DWORD *)(a1 + 80) = v37 + 1;
                AlignedAndAddCleanup = *(std::string **)&v36[2 * v37 + 2];
LABEL_95:
                v34 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v35, (uint64_t)this);
                v62 = v34;
                if (!v34)
                  goto LABEL_141;
                if (*(_QWORD *)this <= (unint64_t)v34 || *(_WORD *)v34 != 386)
                  goto LABEL_116;
              }
              v38 = *(_DWORD *)(a1 + 84);
              goto LABEL_88;
            case 0x11u:
              if (v9 != 138)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x800u;
              v10 = *(std::string **)(a1 + 208);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 208);
              goto LABEL_113;
            case 0x12u:
              if (v9 != 146)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x1000u;
              v10 = *(std::string **)(a1 + 216);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 216);
              goto LABEL_113;
            case 0x13u:
              if (v9 != 152)
                goto LABEL_131;
              v5 |= 0x10000u;
              v43 = TagFallback + 1;
              v44 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_109;
              v45 = *v43;
              v44 = v44 + (v45 << 7) - 128;
              if (v45 < 0)
              {
                v60 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v44);
                v62 = v60;
                *(_BYTE *)(a1 + 237) = v61 != 0;
                if (!v60)
                  goto LABEL_141;
              }
              else
              {
                v43 = TagFallback + 2;
LABEL_109:
                v62 = v43;
                *(_BYTE *)(a1 + 237) = v44 != 0;
              }
              goto LABEL_116;
            case 0x14u:
              if (v9 != 162)
                goto LABEL_131;
              *(_DWORD *)(a1 + 16) |= 0x2000u;
              v10 = *(std::string **)(a1 + 224);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_114;
              v11 = (std::string **)(a1 + 224);
LABEL_113:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v11;
              TagFallback = v62;
LABEL_114:
              v46 = google::protobuf::internal::InlineGreedyStringParser(v10, TagFallback, (uint64_t)this);
              goto LABEL_115;
            case 0x15u:
              if (v9 != 170)
                goto LABEL_131;
              v47 = TagFallback - 2;
              break;
            default:
LABEL_131:
              if ((_DWORD)v9)
                v55 = (v9 & 7) == 4;
              else
                v55 = 1;
              if (v55)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                goto LABEL_3;
              }
              v46 = (char *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_115:
              v62 = v46;
              if (!v46)
              {
LABEL_141:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_116:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v62, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v48 = v47 + 2;
            v62 = v47 + 2;
            v49 = *(int **)(a1 + 112);
            if (!v49)
              break;
            v50 = *(int *)(a1 + 104);
            v51 = *v49;
            if ((int)v50 >= *v49)
            {
              if (v51 == *(_DWORD *)(a1 + 108))
              {
LABEL_125:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v51 + 1);
                v49 = *(int **)(a1 + 112);
                v51 = *v49;
              }
              *v49 = v51 + 1;
              v52 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 96));
              v53 = *(_QWORD *)(a1 + 112);
              v54 = *(int *)(a1 + 104);
              *(_DWORD *)(a1 + 104) = v54 + 1;
              *(_QWORD *)(v53 + 8 * v54 + 8) = v52;
              v48 = v62;
              goto LABEL_127;
            }
            *(_DWORD *)(a1 + 104) = v50 + 1;
            v52 = *(protobuf::Intelligence_KeyValueParameter **)&v49[2 * v50 + 2];
LABEL_127:
            v47 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v52, (google::protobuf::internal *)v48);
            v62 = v47;
            if (!v47)
              goto LABEL_141;
            if (*(_QWORD *)this <= (unint64_t)v47 || *(_WORD *)v47 != 426)
              goto LABEL_116;
          }
          v51 = *(_DWORD *)(a1 + 108);
          goto LABEL_125;
        }
        TagFallback = v62 + 2;
      }
      break;
    }
    v62 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v62;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_DialogResponse::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_DialogResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_KeyValueParameter *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  protobuf::Intelligence_KeyValueParameter *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int k;
  uint64_t v25;
  int64_t v26;
  const void *v27;
  int v28;
  int m;
  protobuf::Intelligence_KeyValueParameter *v30;
  unsigned int v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 15), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_74;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 16), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_75;
  }
LABEL_74:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 17), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_76;
  }
LABEL_75:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 18), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_77;
  }
LABEL_76:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 19), v4);
  if ((v6 & 0x8000) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_80;
  }
LABEL_77:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v38 = *((_BYTE *)this + 236);
  *v4 = 48;
  v4[1] = v38;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_81;
  }
LABEL_80:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 20), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_82;
  }
LABEL_81:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 21), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_10:
    if ((v6 & 0x4000) == 0)
      goto LABEL_11;
LABEL_83:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v39 = *((int *)this + 58);
    *v4 = 80;
    if (v39 > 0x7F)
    {
      v4[1] = v39 | 0x80;
      v41 = v39 >> 7;
      if (v39 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v41 | 0x80;
          v42 = v41 >> 7;
          ++v4;
          v43 = v41 >> 14;
          v41 >>= 7;
        }
        while (v43);
        *(v4 - 1) = v42;
        if ((v6 & 0x100) != 0)
          goto LABEL_100;
      }
      else
      {
        v4[2] = v41;
        v4 += 3;
        if ((v6 & 0x100) != 0)
          goto LABEL_100;
      }
    }
    else
    {
      v4[1] = v39;
      v4 += 2;
      if ((v6 & 0x100) != 0)
        goto LABEL_100;
    }
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_82:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 22), v4);
  if ((v6 & 0x4000) != 0)
    goto LABEL_83;
LABEL_11:
  if ((v6 & 0x100) == 0)
    goto LABEL_12;
LABEL_100:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 23), v4);
  if ((v6 & 0x200) != 0)
LABEL_13:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 24), v4);
LABEL_14:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 106;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 0x400) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 14, *((_QWORD *)this + 25), v4);
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v17 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 122;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = v4 + 3;
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          v19 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v18;
        v19 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  v23 = *((_DWORD *)this + 20);
  if (v23 >= 1)
  {
    for (k = 0; v23 != k; ++k)
    {
      v25 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, k);
      if (*(char *)(v25 + 23) < 0)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 > 127)
          goto LABEL_52;
      }
      else
      {
        v26 = *(unsigned __int8 *)(v25 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 13 >= v26)
      {
        *(_WORD *)v4 = 386;
        v4[2] = v26;
        if (*(char *)(v25 + 23) >= 0)
          v27 = (const void *)v25;
        else
          v27 = *(const void **)v25;
        memcpy(v4 + 3, v27, v26);
        v4 += v26 + 3;
        continue;
      }
LABEL_52:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 16, v25, v4);
    }
  }
  if ((v6 & 0x800) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 17, *((_QWORD *)this + 26), v4);
    if ((v6 & 0x1000) == 0)
    {
LABEL_55:
      if ((v6 & 0x10000) == 0)
        goto LABEL_56;
      goto LABEL_90;
    }
  }
  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_55;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 18, *((_QWORD *)this + 27), v4);
  if ((v6 & 0x10000) == 0)
  {
LABEL_56:
    if ((v6 & 0x2000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_90:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v40 = *((_BYTE *)this + 237);
  *(_WORD *)v4 = 408;
  v4[2] = v40;
  v4 += 3;
  if ((v6 & 0x2000) != 0)
LABEL_57:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 20, *((_QWORD *)this + 28), v4);
LABEL_58:
  v28 = *((_DWORD *)this + 26);
  if (v28)
  {
    for (m = 0; m != v28; ++m)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v30 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96, m);
      *(_WORD *)v4 = 426;
      v31 = *((_DWORD *)v30 + 5);
      if (v31 > 0x7F)
      {
        v4[2] = v31 | 0x80;
        v33 = v31 >> 7;
        if (v31 >> 14)
        {
          v32 = v4 + 4;
          do
          {
            *(v32 - 1) = v33 | 0x80;
            v34 = v33 >> 7;
            ++v32;
            v35 = v33 >> 14;
            v33 >>= 7;
          }
          while (v35);
          *(v32 - 1) = v34;
        }
        else
        {
          v4[3] = v33;
          v32 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v31;
        v32 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v30, v32, a3);
    }
  }
  v36 = *((_QWORD *)this + 1);
  if ((v36 & 1) == 0)
    return (unsigned __int8 *)v4;
  v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v44 + 23) < 0)
  {
    v46 = *(void **)v44;
    v45 = *(_QWORD *)(v44 + 8);
  }
  else
  {
    LODWORD(v45) = *(unsigned __int8 *)(v44 + 23);
    v46 = (void *)v44;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v45)
  {
    v47 = (int)v45;
    memcpy(v4, v46, (int)v45);
    v4 += v47;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v46, v45, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_DialogResponse::ByteSizeLong(protobuf::Intelligence_DialogResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_KeyValueParameter **v11;
  uint64_t v12;
  protobuf::Intelligence_KeyValueParameter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  protobuf::Intelligence_KeyValueParameter **v23;
  uint64_t v24;
  protobuf::Intelligence_KeyValueParameter *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_KeyValueParameter **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((unsigned int *)this + 20);
  v16 = v9 + 2 * v15;
  if ((int)v15 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, v17);
      v19 = *(unsigned __int8 *)(v18 + 23);
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(v18 + 8);
      v16 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
      ++v17;
    }
    while ((_DWORD)v15 != v17);
  }
  v20 = *((int *)this + 26);
  v21 = v16 + 2 * v20;
  v22 = *((_QWORD *)this + 14);
  if (v22)
    v23 = (protobuf::Intelligence_KeyValueParameter **)(v22 + 8);
  else
    v23 = 0;
  if ((_DWORD)v20)
  {
    v24 = 8 * v20;
    do
    {
      v25 = *v23++;
      v26 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v25);
      v21 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6);
      v24 -= 8;
    }
    while (v24);
  }
  v27 = *((_DWORD *)this + 4);
  if (!(_BYTE)v27)
    goto LABEL_38;
  if ((v27 & 1) != 0)
  {
    v36 = *((_QWORD *)this + 15);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v38 = *(_QWORD *)(v36 + 8);
    if ((v37 & 0x80u) == 0)
      v38 = v37;
    v21 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v27 & 2) == 0)
    {
LABEL_29:
      if ((v27 & 4) == 0)
        goto LABEL_30;
      goto LABEL_63;
    }
  }
  else if ((v27 & 2) == 0)
  {
    goto LABEL_29;
  }
  v39 = *((_QWORD *)this + 16);
  v40 = *(unsigned __int8 *)(v39 + 23);
  v41 = *(_QWORD *)(v39 + 8);
  if ((v40 & 0x80u) == 0)
    v41 = v40;
  v21 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 4) == 0)
  {
LABEL_30:
    if ((v27 & 8) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_63:
  v42 = *((_QWORD *)this + 17);
  v43 = *(unsigned __int8 *)(v42 + 23);
  v44 = *(_QWORD *)(v42 + 8);
  if ((v43 & 0x80u) == 0)
    v44 = v43;
  v21 += v44 + ((9 * (__clz(v44 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 8) == 0)
  {
LABEL_31:
    if ((v27 & 0x10) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_66:
  v45 = *((_QWORD *)this + 18);
  v46 = *(unsigned __int8 *)(v45 + 23);
  v47 = *(_QWORD *)(v45 + 8);
  if ((v46 & 0x80u) == 0)
    v47 = v46;
  v21 += v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x10) == 0)
  {
LABEL_32:
    if ((v27 & 0x20) == 0)
      goto LABEL_33;
LABEL_72:
    v51 = *((_QWORD *)this + 20);
    v52 = *(unsigned __int8 *)(v51 + 23);
    v53 = *(_QWORD *)(v51 + 8);
    if ((v52 & 0x80u) == 0)
      v53 = v52;
    v21 += v53 + ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v27 & 0x40) == 0)
    {
LABEL_34:
      if ((v27 & 0x80) == 0)
        goto LABEL_38;
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_69:
  v48 = *((_QWORD *)this + 19);
  v49 = *(unsigned __int8 *)(v48 + 23);
  v50 = *(_QWORD *)(v48 + 8);
  if ((v49 & 0x80u) == 0)
    v50 = v49;
  v21 += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x20) != 0)
    goto LABEL_72;
LABEL_33:
  if ((v27 & 0x40) == 0)
    goto LABEL_34;
LABEL_75:
  v54 = *((_QWORD *)this + 21);
  v55 = *(unsigned __int8 *)(v54 + 23);
  v56 = *(_QWORD *)(v54 + 8);
  if ((v55 & 0x80u) == 0)
    v56 = v55;
  v21 += v56 + ((9 * (__clz(v56 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x80) != 0)
  {
LABEL_35:
    v28 = *((_QWORD *)this + 22);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v30 = *(_QWORD *)(v28 + 8);
    if ((v29 & 0x80u) == 0)
      v30 = v29;
    v21 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_38:
  if ((v27 & 0xFF00) == 0)
    goto LABEL_52;
  if ((v27 & 0x100) != 0)
  {
    v57 = *((_QWORD *)this + 23);
    v58 = *(unsigned __int8 *)(v57 + 23);
    v59 = *(_QWORD *)(v57 + 8);
    if ((v58 & 0x80u) == 0)
      v59 = v58;
    v21 += v59 + ((9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v27 & 0x200) == 0)
    {
LABEL_41:
      if ((v27 & 0x400) == 0)
        goto LABEL_42;
      goto LABEL_85;
    }
  }
  else if ((v27 & 0x200) == 0)
  {
    goto LABEL_41;
  }
  v60 = *((_QWORD *)this + 24);
  v61 = *(unsigned __int8 *)(v60 + 23);
  v62 = *(_QWORD *)(v60 + 8);
  if ((v61 & 0x80u) == 0)
    v62 = v61;
  v21 += v62 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x400) == 0)
  {
LABEL_42:
    if ((v27 & 0x800) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_85:
  v63 = *((_QWORD *)this + 25);
  v64 = *(unsigned __int8 *)(v63 + 23);
  v65 = *(_QWORD *)(v63 + 8);
  if ((v64 & 0x80u) == 0)
    v65 = v64;
  v21 += v65 + ((9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 0x800) == 0)
  {
LABEL_43:
    if ((v27 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_88:
  v66 = *((_QWORD *)this + 26);
  v67 = *(unsigned __int8 *)(v66 + 23);
  v68 = *(_QWORD *)(v66 + 8);
  if ((v67 & 0x80u) == 0)
    v68 = v67;
  v21 += v68 + ((9 * (__clz(v68 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x1000) == 0)
  {
LABEL_44:
    if ((v27 & 0x2000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_91:
  v69 = *((_QWORD *)this + 27);
  v70 = *(unsigned __int8 *)(v69 + 23);
  v71 = *(_QWORD *)(v69 + 8);
  if ((v70 & 0x80u) == 0)
    v71 = v70;
  v21 += v71 + ((9 * (__clz(v71 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x2000) == 0)
  {
LABEL_45:
    if ((v27 & 0x4000) == 0)
      goto LABEL_50;
    goto LABEL_46;
  }
LABEL_94:
  v72 = *((_QWORD *)this + 28);
  v73 = *(unsigned __int8 *)(v72 + 23);
  v74 = *(_QWORD *)(v72 + 8);
  if ((v73 & 0x80u) == 0)
    v74 = v73;
  v21 += v74 + ((9 * (__clz(v74 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x4000) == 0)
    goto LABEL_50;
LABEL_46:
  v31 = *((_DWORD *)this + 58);
  v32 = ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v31 >= 0)
    v33 = v32;
  else
    v33 = 11;
  v21 += v33;
LABEL_50:
  if ((v27 & 0x8000) != 0)
    v21 += 2;
LABEL_52:
  if ((v27 & 0x10000) != 0)
    result = v21 + 3;
  else
    result = v21;
  v35 = *((_QWORD *)this + 1);
  if ((v35 & 1) != 0)
  {
    v75 = v35 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v75 + 23) < 0)
      v76 = *(_QWORD *)(v75 + 8);
    else
      v76 = *(unsigned __int8 *)(v75 + 23);
    result += v76;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void protobuf::Intelligence_DialogResponse::CheckTypeAndMergeFrom(protobuf::Intelligence_DialogResponse *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_DialogResponse::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_DialogResponse::MergeFrom(protobuf::Intelligence_DialogResponse *this, const protobuf::Intelligence_DialogResponse *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  const std::string *v24;
  std::string *v25;
  const std::string *v26;
  std::string *v27;
  const std::string *v28;
  std::string *v29;
  const std::string *v30;
  std::string *v31;
  const std::string *v32;
  std::string *v33;
  const std::string *v34;
  char v35;
  char v36;
  std::string v37[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v37, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 2639);
    v4 = google::protobuf::internal::LogMessage::operator<<(v37, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v36, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v37[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 12, (uint64_t)a2 + 96);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 15);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 15);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 16);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 16);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 17);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 17);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 18);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 18);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 19);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 19);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 20);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 20);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 21);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 21);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 21, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      v21 = (std::string *)*((_QWORD *)this + 22);
                      *((_DWORD *)this + 4) |= 0x80u;
                      v22 = (const std::string *)*((_QWORD *)a2 + 22);
                      if (v21 != v22)
                      {
                        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 22, (uint64_t)v22);
                        else
                          std::string::operator=(v21, v22);
                      }
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0xFF00) == 0)
    goto LABEL_89;
  if ((v6 & 0x100) == 0
    || (v23 = (std::string *)*((_QWORD *)this + 23),
        *((_DWORD *)this + 4) |= 0x100u,
        v24 = (const std::string *)*((_QWORD *)a2 + 23),
        v23 == v24))
  {
LABEL_55:
    if ((v6 & 0x200) == 0)
      goto LABEL_62;
    goto LABEL_56;
  }
  if (v23 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v23, v24);
    goto LABEL_55;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 23, (uint64_t)v24);
  if ((v6 & 0x200) == 0)
    goto LABEL_62;
LABEL_56:
  v25 = (std::string *)*((_QWORD *)this + 24);
  *((_DWORD *)this + 4) |= 0x200u;
  v26 = (const std::string *)*((_QWORD *)a2 + 24);
  if (v25 != v26)
  {
    if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 24, (uint64_t)v26);
    else
      std::string::operator=(v25, v26);
  }
LABEL_62:
  if ((v6 & 0x400) == 0
    || (v27 = (std::string *)*((_QWORD *)this + 25),
        *((_DWORD *)this + 4) |= 0x400u,
        v28 = (const std::string *)*((_QWORD *)a2 + 25),
        v27 == v28))
  {
LABEL_66:
    if ((v6 & 0x800) == 0)
      goto LABEL_73;
    goto LABEL_67;
  }
  if (v27 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v27, v28);
    goto LABEL_66;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 25, (uint64_t)v28);
  if ((v6 & 0x800) == 0)
    goto LABEL_73;
LABEL_67:
  v29 = (std::string *)*((_QWORD *)this + 26);
  *((_DWORD *)this + 4) |= 0x800u;
  v30 = (const std::string *)*((_QWORD *)a2 + 26);
  if (v29 != v30)
  {
    if (v29 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 26, (uint64_t)v30);
    else
      std::string::operator=(v29, v30);
  }
LABEL_73:
  if ((v6 & 0x1000) == 0
    || (v31 = (std::string *)*((_QWORD *)this + 27),
        *((_DWORD *)this + 4) |= 0x1000u,
        v32 = (const std::string *)*((_QWORD *)a2 + 27),
        v31 == v32))
  {
LABEL_77:
    if ((v6 & 0x2000) != 0)
      goto LABEL_78;
    goto LABEL_84;
  }
  if (v31 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v31, v32);
    goto LABEL_77;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 27, (uint64_t)v32);
  if ((v6 & 0x2000) != 0)
  {
LABEL_78:
    v33 = (std::string *)*((_QWORD *)this + 28);
    *((_DWORD *)this + 4) |= 0x2000u;
    v34 = (const std::string *)*((_QWORD *)a2 + 28);
    if (v33 != v34)
    {
      if (v33 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 28, (uint64_t)v34);
      else
        std::string::operator=(v33, v34);
    }
  }
LABEL_84:
  if ((v6 & 0x4000) != 0)
    *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  if ((v6 & 0x8000) != 0)
    *((_BYTE *)this + 236) = *((_BYTE *)a2 + 236);
  *((_DWORD *)this + 4) |= v6;
LABEL_89:
  if ((v6 & 0x10000) != 0)
  {
    v35 = *((_BYTE *)a2 + 237);
    *((_DWORD *)this + 4) |= 0x10000u;
    *((_BYTE *)this + 237) = v35;
  }
}

void sub_22AF19554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_DialogResponse::CopyFrom(protobuf::Intelligence_DialogResponse *this, const protobuf::Intelligence_DialogResponse *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_DialogResponse::Clear(this);
    protobuf::Intelligence_DialogResponse::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_DialogResponse::IsInitialized(protobuf::Intelligence_DialogResponse *this)
{
  return 1;
}

void protobuf::Intelligence_DialogResponse::InternalSwap(protobuf::Intelligence_DialogResponse *this, protobuf::Intelligence_DialogResponse *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t **v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  unint64_t v98;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v98;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_94;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_94:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_DialogResponse *)((char *)this + 24), (protobuf::Intelligence_DialogResponse *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_DialogResponse *)((char *)this + 48), (protobuf::Intelligence_DialogResponse *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_DialogResponse *)((char *)this + 72), (protobuf::Intelligence_DialogResponse *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_DialogResponse *)((char *)this + 96), (protobuf::Intelligence_DialogResponse *)((char *)a2 + 96));
  v13 = (uint64_t *)*((_QWORD *)this + 15);
  v14 = (uint64_t **)((char *)a2 + 120);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  v20 = (uint64_t **)((char *)a2 + 128);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 17);
  v26 = (uint64_t **)((char *)a2 + 136);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 18);
  v32 = (uint64_t **)((char *)a2 + 144);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 19);
  v38 = (uint64_t **)((char *)a2 + 152);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 20);
  v44 = (uint64_t **)((char *)a2 + 160);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 20);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 21);
  v50 = (uint64_t **)((char *)a2 + 168);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 21);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = (uint64_t *)*((_QWORD *)this + 22);
  v56 = (uint64_t **)((char *)a2 + 176);
  if (v55 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_56;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v55 = (uint64_t *)*((_QWORD *)this + 22);
  }
  v57 = *v56;
  if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v57 = *v56;
  }
  v58 = v55[2];
  v59 = *(_OWORD *)v55;
  v60 = v57[2];
  *(_OWORD *)v55 = *(_OWORD *)v57;
  v55[2] = v60;
  *(_OWORD *)v57 = v59;
  v57[2] = v58;
LABEL_56:
  v61 = (uint64_t *)*((_QWORD *)this + 23);
  v62 = (uint64_t **)((char *)a2 + 184);
  if (v61 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_62;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v61 = (uint64_t *)*((_QWORD *)this + 23);
  }
  v63 = *v62;
  if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v63 = *v62;
  }
  v64 = v61[2];
  v65 = *(_OWORD *)v61;
  v66 = v63[2];
  *(_OWORD *)v61 = *(_OWORD *)v63;
  v61[2] = v66;
  *(_OWORD *)v63 = v65;
  v63[2] = v64;
LABEL_62:
  v67 = (uint64_t *)*((_QWORD *)this + 24);
  v68 = (uint64_t **)((char *)a2 + 192);
  if (v67 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_68;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 24, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v67 = (uint64_t *)*((_QWORD *)this + 24);
  }
  v69 = *v68;
  if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 24, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v69 = *v68;
  }
  v70 = v67[2];
  v71 = *(_OWORD *)v67;
  v72 = v69[2];
  *(_OWORD *)v67 = *(_OWORD *)v69;
  v67[2] = v72;
  *(_OWORD *)v69 = v71;
  v69[2] = v70;
LABEL_68:
  v73 = (uint64_t *)*((_QWORD *)this + 25);
  v74 = (uint64_t **)((char *)a2 + 200);
  if (v73 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_74;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 25, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v73 = (uint64_t *)*((_QWORD *)this + 25);
  }
  v75 = *v74;
  if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 25, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v75 = *v74;
  }
  v76 = v73[2];
  v77 = *(_OWORD *)v73;
  v78 = v75[2];
  *(_OWORD *)v73 = *(_OWORD *)v75;
  v73[2] = v78;
  *(_OWORD *)v75 = v77;
  v75[2] = v76;
LABEL_74:
  v79 = (uint64_t *)*((_QWORD *)this + 26);
  v80 = (uint64_t **)((char *)a2 + 208);
  if (v79 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v80 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_80;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v79 = (uint64_t *)*((_QWORD *)this + 26);
  }
  v81 = *v80;
  if (*v80 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v81 = *v80;
  }
  v82 = v79[2];
  v83 = *(_OWORD *)v79;
  v84 = v81[2];
  *(_OWORD *)v79 = *(_OWORD *)v81;
  v79[2] = v84;
  *(_OWORD *)v81 = v83;
  v81[2] = v82;
LABEL_80:
  v85 = (uint64_t *)*((_QWORD *)this + 27);
  v86 = (uint64_t **)((char *)a2 + 216);
  if (v85 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v86 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_86;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 27, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v85 = (uint64_t *)*((_QWORD *)this + 27);
  }
  v87 = *v86;
  if (*v86 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 27, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v87 = *v86;
  }
  v88 = v85[2];
  v89 = *(_OWORD *)v85;
  v90 = v87[2];
  *(_OWORD *)v85 = *(_OWORD *)v87;
  v85[2] = v90;
  *(_OWORD *)v87 = v89;
  v87[2] = v88;
LABEL_86:
  v91 = (uint64_t *)*((_QWORD *)this + 28);
  v92 = (uint64_t **)((char *)a2 + 224);
  if (v91 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v92 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_92;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 28, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v91 = (uint64_t *)*((_QWORD *)this + 28);
  }
  v93 = *v92;
  if (*v92 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 28, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v93 = *v92;
  }
  v94 = v91[2];
  v95 = *(_OWORD *)v91;
  v96 = v93[2];
  *(_OWORD *)v91 = *(_OWORD *)v93;
  v91[2] = v96;
  *(_OWORD *)v93 = v95;
  v93[2] = v94;
LABEL_92:
  v97 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v97;
  LOBYTE(v97) = *((_BYTE *)this + 236);
  *((_BYTE *)this + 236) = *((_BYTE *)a2 + 236);
  *((_BYTE *)a2 + 236) = v97;
  LOBYTE(v97) = *((_BYTE *)this + 237);
  *((_BYTE *)this + 237) = *((_BYTE *)a2 + 237);
  *((_BYTE *)a2 + 237) = v97;
}

_QWORD *protobuf::Intelligence_DialogResponse::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.DialogResponse");
}

void protobuf::Intelligence_BehaviorResponse::InitAsDefaultInstance(protobuf::Intelligence_BehaviorResponse *this)
{
  qword_255B58568 = (uint64_t)&protobuf::_Intelligence_Undo_default_instance_;
}

uint64_t protobuf::Intelligence_BehaviorResponse::_Internal::undo(protobuf::Intelligence_BehaviorResponse::_Internal *this, const protobuf::Intelligence_BehaviorResponse *a2)
{
  return *((_QWORD *)this + 19);
}

protobuf::Intelligence_BehaviorResponse *protobuf::Intelligence_BehaviorResponse::Intelligence_BehaviorResponse(protobuf::Intelligence_BehaviorResponse *this)
{
  *(_QWORD *)this = &off_24F540E98;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_Intelligence_BehaviorResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_BehaviorResponse_intelligence_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  return this;
}

void sub_22AF19E50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_BehaviorResponse *protobuf::Intelligence_BehaviorResponse::Intelligence_BehaviorResponse(protobuf::Intelligence_BehaviorResponse *this, const protobuf::Intelligence_BehaviorResponse *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  protobuf::Intelligence_Undo *v17;
  std::string *v18;
  char v20;
  std::string v21[2];

  *(_QWORD *)this = &off_24F540E98;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 13);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v12);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x40) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v13 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v13);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x80) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v14);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x100) != 0)
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v15);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x200) != 0)
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v16 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v16);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x400) != 0)
  {
    if (!*((_QWORD *)a2 + 19))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 12067);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: !value || undo_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v17 = (protobuf::Intelligence_Undo *)operator new();
    protobuf::Intelligence_Undo::Intelligence_Undo(v17, *((const protobuf::Intelligence_Undo **)a2 + 19));
  }
  else
  {
    v17 = 0;
  }
  *((_QWORD *)this + 19) = v17;
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  return this;
}

void sub_22AF1A0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::ArenaImpl **v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_BehaviorResponse::~Intelligence_BehaviorResponse(protobuf::Intelligence_BehaviorResponse *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24F540E98;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 11);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 12);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 13);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 14);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x22E2E9CCC](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 15);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x22E2E9CCC](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 16);
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x22E2E9CCC](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)this + 17);
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x22E2E9CCC](v14, 0x1012C40EC159624);
  }
  v15 = *((_QWORD *)this + 18);
  if ((uint64_t *)v15 != &google::protobuf::internal::fixed_address_empty_string && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x22E2E9CCC](v15, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_BehaviorResponse *)&protobuf::_Intelligence_BehaviorResponse_default_instance_)
  {
    v16 = *((_QWORD *)this + 19);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_BehaviorResponse::~Intelligence_BehaviorResponse(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_BehaviorResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_BehaviorResponse::default_instance(protobuf::Intelligence_BehaviorResponse *this)
{
  if (atomic_load(scc_info_Intelligence_BehaviorResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_BehaviorResponse_intelligence_2eproto);
  return &protobuf::_Intelligence_BehaviorResponse_default_instance_;
}

void protobuf::Intelligence_BehaviorResponse::Clear(protobuf::Intelligence_BehaviorResponse *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  protobuf::Intelligence_Undo *v13;
  std::string *v14;
  char *v15;
  char v16;
  char v17;
  std::string v18[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 4);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_15:
      v4 = *((_QWORD *)this + 10);
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
LABEL_23:
      v6 = *((_QWORD *)this + 12);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
LABEL_7:
      if ((v2 & 0x20) == 0)
        goto LABEL_8;
LABEL_31:
      v8 = *((_QWORD *)this + 14);
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
LABEL_9:
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
LABEL_39:
      v10 = *((_QWORD *)this + 16);
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
      }
      goto LABEL_42;
    }
    v3 = *((_QWORD *)this + 9);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_19:
    v5 = *((_QWORD *)this + 11);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_27:
    v7 = *((_QWORD *)this + 13);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
LABEL_35:
    v9 = *((_QWORD *)this + 15);
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    goto LABEL_39;
  }
LABEL_42:
  if ((v2 & 0x700) == 0)
    goto LABEL_58;
  if ((v2 & 0x100) != 0)
  {
    v11 = *((_QWORD *)this + 17);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if ((v2 & 0x200) != 0)
        goto LABEL_51;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
      if ((v2 & 0x200) != 0)
        goto LABEL_51;
    }
LABEL_45:
    if ((v2 & 0x400) == 0)
      goto LABEL_58;
    goto LABEL_55;
  }
  if ((v2 & 0x200) == 0)
    goto LABEL_45;
LABEL_51:
  v12 = *((_QWORD *)this + 18);
  if (*(char *)(v12 + 23) < 0)
  {
    **(_BYTE **)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    if ((v2 & 0x400) == 0)
      goto LABEL_58;
  }
  else
  {
    *(_BYTE *)v12 = 0;
    *(_BYTE *)(v12 + 23) = 0;
    if ((v2 & 0x400) == 0)
      goto LABEL_58;
  }
LABEL_55:
  v13 = (protobuf::Intelligence_Undo *)*((_QWORD *)this + 19);
  if (!v13)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 2979);
    v14 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: undo_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v14->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    v13 = (protobuf::Intelligence_Undo *)*((_QWORD *)this + 19);
  }
  protobuf::Intelligence_Undo::Clear(v13);
LABEL_58:
  v16 = *((_BYTE *)this + 8);
  v15 = (char *)this + 8;
  v15[152] = 0;
  *((_DWORD *)v15 + 2) = 0;
  if ((v16 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v15);
}

void sub_22AF1A708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *protobuf::Intelligence_BehaviorResponse::_InternalParse(uint64_t a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  uint64_t v3;
  uint64_t v6;
  char *TagFallback;
  uint64_t *v9;
  unsigned int *v10;
  uint64_t *v11;
  void (*v12)(uint64_t);
  const char *v13;
  std::string *v14;
  std::string **v15;
  char *v16;
  unint64_t v17;
  int v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  int v23;
  protobuf::Intelligence_KeyValueParameter *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  int v31;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  protobuf::Intelligence_Undo *v39;
  void (*v40)(uint64_t);
  unsigned int v41;
  uint64_t v42;
  char *v43;
  BOOL v44;
  char *SizeFallback;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  int v50;
  char *v51;
  int v52;
  char *v53;
  uint64_t v54;
  char *v55;

  v55 = a2;
  v6 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v55, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v9 = (uint64_t *)(a1 + 48);
    v10 = (unsigned int *)(a1 + 24);
    v11 = &google::protobuf::internal::fixed_address_empty_string;
    v12 = google::protobuf::internal::arena_destruct_object<std::string>;
    while (2)
    {
      TagFallback = v55 + 1;
      LODWORD(v13) = *v55;
      if (*v55 < 0)
      {
        v13 = (const char *)(v13 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v55, v13);
          v55 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v13 >> 3)
          {
            case 1u:
              if (v13 != 10)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 1u;
              v14 = *(std::string **)(a1 + 72);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 72);
              goto LABEL_78;
            case 2u:
              if (v13 != 18)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 2u;
              v14 = *(std::string **)(a1 + 80);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 80);
              goto LABEL_78;
            case 3u:
              if (v13 != 26)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 4u;
              v14 = *(std::string **)(a1 + 88);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 88);
              goto LABEL_78;
            case 4u:
              if (v13 != 34)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 8u;
              v14 = *(std::string **)(a1 + 96);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 96);
              goto LABEL_78;
            case 5u:
              if (v13 != 42)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v14 = *(std::string **)(a1 + 104);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 104);
              goto LABEL_78;
            case 6u:
              if (v13 != 48)
                goto LABEL_88;
              v6 = v6 | 0x800;
              v16 = TagFallback + 1;
              v17 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_31;
              v18 = *v16;
              v17 = v17 + (v18 << 7) - 128;
              if (v18 < 0)
              {
                v53 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v17);
                v55 = v53;
                *(_BYTE *)(a1 + 160) = v54 != 0;
                if (!v53)
                  goto LABEL_100;
              }
              else
              {
                v16 = TagFallback + 2;
LABEL_31:
                v55 = v16;
                *(_BYTE *)(a1 + 160) = v17 != 0;
              }
              goto LABEL_81;
            case 7u:
              if (v13 != 58)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v14 = *(std::string **)(a1 + 112);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 112);
              goto LABEL_78;
            case 8u:
              if (v13 != 66)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x40u;
              v14 = *(std::string **)(a1 + 120);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 120);
              goto LABEL_78;
            case 9u:
              if (v13 != 74)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x80u;
              v14 = *(std::string **)(a1 + 128);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 128);
              goto LABEL_78;
            case 0xAu:
              if (v13 != 82)
                goto LABEL_88;
              v19 = TagFallback - 1;
              while (1)
              {
                v20 = v19 + 1;
                v55 = v19 + 1;
                v21 = *(int **)(a1 + 40);
                if (!v21)
                  break;
                v22 = *(int *)(a1 + 32);
                v23 = *v21;
                if ((int)v22 >= *v21)
                {
                  if (v23 == *(_DWORD *)(a1 + 36))
                  {
LABEL_48:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v23 + 1);
                    v21 = *(int **)(a1 + 40);
                    v23 = *v21;
                  }
                  *v21 = v23 + 1;
                  v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  v25 = *(_QWORD *)(a1 + 40);
                  v26 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v26 + 1;
                  *(_QWORD *)(v25 + 8 * v26 + 8) = v24;
                  v20 = v55;
                  goto LABEL_50;
                }
                *(_DWORD *)(a1 + 32) = v22 + 1;
                v24 = *(protobuf::Intelligence_KeyValueParameter **)&v21[2 * v22 + 2];
LABEL_50:
                v19 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v24, (google::protobuf::internal *)v20);
                v55 = v19;
                if (!v19)
                  goto LABEL_100;
                if (*(_QWORD *)this <= (unint64_t)v19 || *v19 != 82)
                  goto LABEL_81;
              }
              v23 = *(_DWORD *)(a1 + 36);
              goto LABEL_48;
            case 0xBu:
              if (v13 != 90)
                goto LABEL_88;
              v27 = TagFallback - 1;
              break;
            case 0xCu:
              if (v13 != 98)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x100u;
              v14 = *(std::string **)(a1 + 136);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 136);
              goto LABEL_78;
            case 0xDu:
              if (v13 != 106)
                goto LABEL_88;
              *(_DWORD *)(a1 + 16) |= 0x200u;
              v14 = *(std::string **)(a1 + 144);
              if (v14 != (std::string *)v11)
                goto LABEL_79;
              v15 = (std::string **)(a1 + 144);
LABEL_78:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, (uint64_t)v11);
              v14 = *v15;
              TagFallback = v55;
LABEL_79:
              v36 = google::protobuf::internal::InlineGreedyStringParser(v14, TagFallback, (uint64_t)this);
              goto LABEL_80;
            case 0xEu:
              if (v13 != 114)
                goto LABEL_88;
              v37 = v3;
              v38 = v11;
              *(_DWORD *)(a1 + 16) |= 0x400u;
              v39 = *(protobuf::Intelligence_Undo **)(a1 + 152);
              if (!v39)
              {
                v39 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Undo>(0);
                *(_QWORD *)(a1 + 152) = v39;
                TagFallback = v55;
              }
              v40 = v12;
              v41 = *TagFallback;
              if (*TagFallback < 0)
              {
                SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)TagFallback, (const char *)*TagFallback);
                if (!SizeFallback)
                  goto LABEL_100;
                v43 = SizeFallback;
                v41 = v46;
                v42 = v6;
              }
              else
              {
                v42 = v6;
                v43 = TagFallback + 1;
              }
              v47 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v43, v41);
              v48 = *((_DWORD *)this + 22);
              v49 = __OFSUB__(v48--, 1);
              *((_DWORD *)this + 22) = v48;
              if (v48 < 0 != v49
                || (v50 = v47,
                    (v51 = protobuf::Intelligence_Undo::_InternalParse((uint64_t)v39, (google::protobuf::internal *)v43, this)) == 0)|| (++*((_DWORD *)this + 22), *((_DWORD *)this + 20)))
              {
                TagFallback = 0;
                LODWORD(v6) = v42;
                goto LABEL_3;
              }
              v52 = *((_DWORD *)this + 7) + v50;
              *((_DWORD *)this + 7) = v52;
              *(_QWORD *)this = *((_QWORD *)this + 1) + (v52 & (v52 >> 31));
              v55 = v51;
              v6 = v42;
              v12 = v40;
              v11 = v38;
              v3 = v37;
              v10 = (unsigned int *)(a1 + 24);
LABEL_81:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v55, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
            default:
LABEL_88:
              if ((_DWORD)v13)
                v44 = (v13 & 7) == 4;
              else
                v44 = 1;
              if (v44)
              {
                *((_DWORD *)this + 20) = (_DWORD)v13 - 1;
                goto LABEL_3;
              }
              v36 = (char *)google::protobuf::internal::UnknownFieldParse(v13, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_80:
              v55 = v36;
              if (v36)
                goto LABEL_81;
LABEL_100:
              TagFallback = 0;
              goto LABEL_3;
          }
          while (1)
          {
            v28 = v27 + 1;
            v55 = v27 + 1;
            v29 = *(int **)(a1 + 64);
            if (!v29)
              break;
            v30 = *(int *)(a1 + 56);
            v31 = *v29;
            if ((int)v30 >= *v29)
            {
              if (v31 == *(_DWORD *)(a1 + 60))
              {
LABEL_61:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v31 + 1);
                v29 = *(int **)(a1 + 64);
                v31 = *v29;
              }
              *v29 = v31 + 1;
              v33 = (google::protobuf::internal::ArenaImpl *)*v9;
              if (*v9)
              {
                if (*((_QWORD *)v33 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v33, 0x18uLL, (void (*)(void *))v12);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v34 = *(_QWORD *)(a1 + 64);
              v35 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v35 + 1;
              *(_QWORD *)(v34 + 8 * v35 + 8) = AlignedAndAddCleanup;
              v28 = v55;
              goto LABEL_68;
            }
            *(_DWORD *)(a1 + 56) = v30 + 1;
            AlignedAndAddCleanup = *(std::string **)&v29[2 * v30 + 2];
LABEL_68:
            v27 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v28, (uint64_t)this);
            v55 = v27;
            if (!v27)
              goto LABEL_100;
            if (*(_QWORD *)this <= (unint64_t)v27 || *v27 != 90)
              goto LABEL_81;
          }
          v31 = *(_DWORD *)(a1 + 60);
          goto LABEL_61;
        }
        TagFallback = v55 + 2;
      }
      break;
    }
    v55 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v55;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v6;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_BehaviorResponse::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_BehaviorResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_KeyValueParameter *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  uint64_t v17;
  int64_t v18;
  const void *v19;
  char v20;
  protobuf::Intelligence_Undo *v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 10), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 11), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 12), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 13), v4);
  if ((v6 & 0x800) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_48;
  }
LABEL_45:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v20 = *((_BYTE *)this + 160);
  *v4 = 48;
  v4[1] = v20;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_49;
  }
LABEL_48:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 14), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_49:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 15), v4);
  if ((v6 & 0x80) != 0)
LABEL_10:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 16), v4);
LABEL_11:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 82;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15 >= 1)
  {
    for (j = 0; v15 != j; ++j)
    {
      v17 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v17 + 23) < 0)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18 > 127)
          goto LABEL_35;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v18)
      {
        *v4 = 90;
        v4[1] = v18;
        if (*(char *)(v17 + 23) >= 0)
          v19 = (const void *)v17;
        else
          v19 = *(const void **)v17;
        memcpy(v4 + 2, v19, v18);
        v4 += v18 + 2;
        continue;
      }
LABEL_35:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 11, v17, v4);
    }
  }
  if ((v6 & 0x100) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 17), v4);
    if ((v6 & 0x200) == 0)
    {
LABEL_38:
      if ((v6 & 0x400) == 0)
        goto LABEL_63;
      goto LABEL_53;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_38;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 13, *((_QWORD *)this + 18), v4);
  if ((v6 & 0x400) == 0)
    goto LABEL_63;
LABEL_53:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v21 = (protobuf::Intelligence_Undo *)*((_QWORD *)this + 19);
  *v4 = 114;
  v22 = *((_DWORD *)v21 + 5);
  if (v22 > 0x7F)
  {
    v4[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = v4 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      v4[2] = v24;
      v23 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v22;
    v23 = v4 + 2;
  }
  v4 = (char *)protobuf::Intelligence_Undo::InternalSerializeWithCachedSizesToArray(v21, v23, a3);
LABEL_63:
  v27 = *((_QWORD *)this + 1);
  if ((v27 & 1) == 0)
    return (unsigned __int8 *)v4;
  v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) < 0)
  {
    v31 = *(void **)v29;
    v30 = *(_QWORD *)(v29 + 8);
  }
  else
  {
    LODWORD(v30) = *(unsigned __int8 *)(v29 + 23);
    v31 = (void *)v29;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v30)
  {
    v32 = (int)v30;
    memcpy(v4, v31, (int)v30);
    v4 += v32;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v31, v30, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_BehaviorResponse::ByteSizeLong(protobuf::Intelligence_BehaviorResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((unsigned int *)this + 14);
  v9 = v2 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *((_DWORD *)this + 4);
  if (!(_BYTE)v13)
    goto LABEL_26;
  if ((v13 & 1) != 0)
  {
    v20 = *((_QWORD *)this + 9);
    v21 = *(unsigned __int8 *)(v20 + 23);
    v22 = *(_QWORD *)(v20 + 8);
    if ((v21 & 0x80u) == 0)
      v22 = v21;
    v9 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v13 & 2) == 0)
    {
LABEL_17:
      if ((v13 & 4) == 0)
        goto LABEL_18;
      goto LABEL_41;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_17;
  }
  v23 = *((_QWORD *)this + 10);
  v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = *(_QWORD *)(v23 + 8);
  if ((v24 & 0x80u) == 0)
    v25 = v24;
  v9 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 4) == 0)
  {
LABEL_18:
    if ((v13 & 8) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_41:
  v26 = *((_QWORD *)this + 11);
  v27 = *(unsigned __int8 *)(v26 + 23);
  v28 = *(_QWORD *)(v26 + 8);
  if ((v27 & 0x80u) == 0)
    v28 = v27;
  v9 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 8) == 0)
  {
LABEL_19:
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_44:
  v29 = *((_QWORD *)this + 12);
  v30 = *(unsigned __int8 *)(v29 + 23);
  v31 = *(_QWORD *)(v29 + 8);
  if ((v30 & 0x80u) == 0)
    v31 = v30;
  v9 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x10) == 0)
  {
LABEL_20:
    if ((v13 & 0x20) == 0)
      goto LABEL_21;
LABEL_50:
    v35 = *((_QWORD *)this + 14);
    v36 = *(unsigned __int8 *)(v35 + 23);
    v37 = *(_QWORD *)(v35 + 8);
    if ((v36 & 0x80u) == 0)
      v37 = v36;
    v9 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v13 & 0x40) == 0)
    {
LABEL_22:
      if ((v13 & 0x80) == 0)
        goto LABEL_26;
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_47:
  v32 = *((_QWORD *)this + 13);
  v33 = *(unsigned __int8 *)(v32 + 23);
  v34 = *(_QWORD *)(v32 + 8);
  if ((v33 & 0x80u) == 0)
    v34 = v33;
  v9 += v34 + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x20) != 0)
    goto LABEL_50;
LABEL_21:
  if ((v13 & 0x40) == 0)
    goto LABEL_22;
LABEL_53:
  v38 = *((_QWORD *)this + 15);
  v39 = *(unsigned __int8 *)(v38 + 23);
  v40 = *(_QWORD *)(v38 + 8);
  if ((v39 & 0x80u) == 0)
    v40 = v39;
  v9 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x80) != 0)
  {
LABEL_23:
    v14 = *((_QWORD *)this + 16);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v9 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_26:
  if ((v13 & 0xF00) == 0)
    goto LABEL_33;
  if ((v13 & 0x100) != 0)
  {
    v41 = *((_QWORD *)this + 17);
    v42 = *(unsigned __int8 *)(v41 + 23);
    v43 = *(_QWORD *)(v41 + 8);
    if ((v42 & 0x80u) == 0)
      v43 = v42;
    v9 += v43 + ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v13 & 0x200) == 0)
    {
LABEL_29:
      if ((v13 & 0x400) == 0)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_29;
  }
  v44 = *((_QWORD *)this + 18);
  v45 = *(unsigned __int8 *)(v44 + 23);
  v46 = *(_QWORD *)(v44 + 8);
  if ((v45 & 0x80u) == 0)
    v46 = v45;
  v9 += v46 + ((9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x400) == 0)
    goto LABEL_31;
LABEL_30:
  v17 = protobuf::Intelligence_Undo::ByteSizeLong(*((protobuf::Intelligence_Undo **)this + 19));
  v9 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_31:
  if ((v13 & 0x800) != 0)
    v9 += 2;
LABEL_33:
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
  {
    v47 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v47 + 23) < 0)
      v48 = *(_QWORD *)(v47 + 8);
    else
      v48 = *(unsigned __int8 *)(v47 + 23);
    v9 += v48;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

void protobuf::Intelligence_BehaviorResponse::CheckTypeAndMergeFrom(protobuf::Intelligence_BehaviorResponse *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_BehaviorResponse::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_BehaviorResponse::MergeFrom(protobuf::Intelligence_BehaviorResponse *this, const protobuf::Intelligence_BehaviorResponse *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  const std::string *v24;
  std::string *v25;
  const std::string *v26;
  protobuf::Intelligence_Undo *v27;
  const protobuf::Intelligence_Undo *v28;
  char v29;
  std::string v30[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 3355);
    v4 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 10);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 10);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 11);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 11);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 12);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 12);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 13);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 13);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 14);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 14);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 15);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 15);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      v21 = (std::string *)*((_QWORD *)this + 16);
                      *((_DWORD *)this + 4) |= 0x80u;
                      v22 = (const std::string *)*((_QWORD *)a2 + 16);
                      if (v21 != v22)
                      {
                        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v22);
                        else
                          std::string::operator=(v21, v22);
                      }
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0xF00) == 0)
    return;
  if ((v6 & 0x100) == 0
    || (v23 = (std::string *)*((_QWORD *)this + 17),
        *((_DWORD *)this + 4) |= 0x100u,
        v24 = (const std::string *)*((_QWORD *)a2 + 17),
        v23 == v24))
  {
LABEL_55:
    if ((v6 & 0x200) != 0)
      goto LABEL_56;
    goto LABEL_62;
  }
  if (v23 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v23, v24);
    goto LABEL_55;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v24);
  if ((v6 & 0x200) != 0)
  {
LABEL_56:
    v25 = (std::string *)*((_QWORD *)this + 18);
    *((_DWORD *)this + 4) |= 0x200u;
    v26 = (const std::string *)*((_QWORD *)a2 + 18);
    if (v25 != v26)
    {
      if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v26);
      else
        std::string::operator=(v25, v26);
    }
  }
LABEL_62:
  if ((v6 & 0x400) != 0)
  {
    *((_DWORD *)this + 4) |= 0x400u;
    v27 = (protobuf::Intelligence_Undo *)*((_QWORD *)this + 19);
    if (!v27)
    {
      v27 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Undo>(0);
      *((_QWORD *)this + 19) = v27;
    }
    if (*((_QWORD *)a2 + 19))
      v28 = (const protobuf::Intelligence_Undo *)*((_QWORD *)a2 + 19);
    else
      v28 = (const protobuf::Intelligence_Undo *)&protobuf::_Intelligence_Undo_default_instance_;
    protobuf::Intelligence_Undo::MergeFrom(v27, v28);
  }
  if ((v6 & 0x800) != 0)
    *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_DWORD *)this + 4) |= v6;
}

void sub_22AF1BA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_BehaviorResponse::CopyFrom(protobuf::Intelligence_BehaviorResponse *this, const protobuf::Intelligence_BehaviorResponse *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_BehaviorResponse::Clear(this);
    protobuf::Intelligence_BehaviorResponse::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_BehaviorResponse::IsInitialized(protobuf::Intelligence_BehaviorResponse *this)
{
  return 1;
}

void protobuf::Intelligence_BehaviorResponse::InternalSwap(protobuf::Intelligence_BehaviorResponse *this, protobuf::Intelligence_BehaviorResponse *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v74;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_70;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_70:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_BehaviorResponse *)((char *)this + 24), (protobuf::Intelligence_BehaviorResponse *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_BehaviorResponse *)((char *)this + 48), (protobuf::Intelligence_BehaviorResponse *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 11);
  v26 = (uint64_t **)((char *)a2 + 88);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 12);
  v32 = (uint64_t **)((char *)a2 + 96);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 13);
  v38 = (uint64_t **)((char *)a2 + 104);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 14);
  v44 = (uint64_t **)((char *)a2 + 112);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 14);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 15);
  v50 = (uint64_t **)((char *)a2 + 120);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = (uint64_t *)*((_QWORD *)this + 16);
  v56 = (uint64_t **)((char *)a2 + 128);
  if (v55 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_56;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v55 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v57 = *v56;
  if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v57 = *v56;
  }
  v58 = v55[2];
  v59 = *(_OWORD *)v55;
  v60 = v57[2];
  *(_OWORD *)v55 = *(_OWORD *)v57;
  v55[2] = v60;
  *(_OWORD *)v57 = v59;
  v57[2] = v58;
LABEL_56:
  v61 = (uint64_t *)*((_QWORD *)this + 17);
  v62 = (uint64_t **)((char *)a2 + 136);
  if (v61 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_62;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v61 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v63 = *v62;
  if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v63 = *v62;
  }
  v64 = v61[2];
  v65 = *(_OWORD *)v61;
  v66 = v63[2];
  *(_OWORD *)v61 = *(_OWORD *)v63;
  v61[2] = v66;
  *(_OWORD *)v63 = v65;
  v63[2] = v64;
LABEL_62:
  v67 = (uint64_t *)*((_QWORD *)this + 18);
  v68 = (uint64_t **)((char *)a2 + 144);
  if (v67 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_68;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v67 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v69 = *v68;
  if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v69 = *v68;
  }
  v70 = v67[2];
  v71 = *(_OWORD *)v67;
  v72 = v69[2];
  *(_OWORD *)v67 = *(_OWORD *)v69;
  v67[2] = v72;
  *(_OWORD *)v69 = v71;
  v69[2] = v70;
LABEL_68:
  v73 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v73;
  LOBYTE(v73) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v73;
}

_QWORD *protobuf::Intelligence_BehaviorResponse::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.BehaviorResponse");
}

protobuf::Intelligence_ReferenceResponse *protobuf::Intelligence_ReferenceResponse::Intelligence_ReferenceResponse(protobuf::Intelligence_ReferenceResponse *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F540F28;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_ReferenceResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_ReferenceResponse_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 136) = 0;
  return this;
}

void sub_22AF1C118(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_ReferenceResponse *protobuf::Intelligence_ReferenceResponse::Intelligence_ReferenceResponse(protobuf::Intelligence_ReferenceResponse *this, const protobuf::Intelligence_ReferenceResponse *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  *(_QWORD *)this = &off_24F540F28;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x40) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v13 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v13);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x80) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 13);
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v14);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x100) != 0)
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v15);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x200) != 0)
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v16 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v16);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x400) != 0)
  {
    v17 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v17 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v17);
  }
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  return this;
}

void sub_22AF1C32C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_ReferenceResponse::~Intelligence_ReferenceResponse(protobuf::Intelligence_ReferenceResponse *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24F540F28;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 10);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 11);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x22E2E9CCC](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 12);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x22E2E9CCC](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 13);
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x22E2E9CCC](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)this + 14);
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x22E2E9CCC](v14, 0x1012C40EC159624);
  }
  v15 = *((_QWORD *)this + 15);
  if ((uint64_t *)v15 != &google::protobuf::internal::fixed_address_empty_string && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x22E2E9CCC](v15, 0x1012C40EC159624);
  }
  v16 = *((_QWORD *)this + 16);
  if ((uint64_t *)v16 != &google::protobuf::internal::fixed_address_empty_string && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    MEMORY[0x22E2E9CCC](v16, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_ReferenceResponse::~Intelligence_ReferenceResponse(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_ReferenceResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_ReferenceResponse::default_instance(protobuf::Intelligence_ReferenceResponse *this)
{
  if (atomic_load(scc_info_Intelligence_ReferenceResponse_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_ReferenceResponse_intelligence_2eproto);
  return &protobuf::_Intelligence_ReferenceResponse_default_instance_;
}

void protobuf::Intelligence_ReferenceResponse::Clear(protobuf::Intelligence_ReferenceResponse *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((_BYTE)v2)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_15:
      v4 = *((_QWORD *)this + 7);
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) != 0)
          goto LABEL_19;
      }
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
LABEL_23:
      v6 = *((_QWORD *)this + 9);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
        if ((v2 & 0x10) != 0)
          goto LABEL_27;
      }
LABEL_7:
      if ((v2 & 0x20) == 0)
        goto LABEL_8;
LABEL_31:
      v8 = *((_QWORD *)this + 11);
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
        if ((v2 & 0x40) != 0)
          goto LABEL_35;
      }
LABEL_9:
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
LABEL_39:
      v10 = *((_QWORD *)this + 13);
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
      }
      goto LABEL_42;
    }
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_19:
    v5 = *((_QWORD *)this + 8);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_27:
    v7 = *((_QWORD *)this + 10);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
LABEL_35:
    v9 = *((_QWORD *)this + 12);
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v2 & 0x80) == 0)
        goto LABEL_42;
    }
    goto LABEL_39;
  }
LABEL_42:
  if ((v2 & 0x700) == 0)
    goto LABEL_58;
  if ((v2 & 0x100) != 0)
  {
    v11 = *((_QWORD *)this + 14);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if ((v2 & 0x200) != 0)
        goto LABEL_51;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
      if ((v2 & 0x200) != 0)
        goto LABEL_51;
    }
LABEL_45:
    if ((v2 & 0x400) == 0)
      goto LABEL_58;
LABEL_55:
    v13 = *((_QWORD *)this + 16);
    if (*(char *)(v13 + 23) < 0)
    {
      **(_BYTE **)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v13 = 0;
      *(_BYTE *)(v13 + 23) = 0;
    }
    goto LABEL_58;
  }
  if ((v2 & 0x200) == 0)
    goto LABEL_45;
LABEL_51:
  v12 = *((_QWORD *)this + 15);
  if (*(char *)(v12 + 23) < 0)
  {
    **(_BYTE **)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    if ((v2 & 0x400) == 0)
      goto LABEL_58;
    goto LABEL_55;
  }
  *(_BYTE *)v12 = 0;
  *(_BYTE *)(v12 + 23) = 0;
  if ((v2 & 0x400) != 0)
    goto LABEL_55;
LABEL_58:
  v15 = *((_BYTE *)this + 8);
  v14 = (char *)this + 8;
  v14[128] = 0;
  *((_DWORD *)v14 + 2) = 0;
  if ((v15 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v14);
}

google::protobuf::internal *protobuf::Intelligence_ReferenceResponse::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  uint64_t *v8;
  const char *v9;
  std::string *v10;
  std::string **v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  char *v15;
  std::string::value_type *v16;
  int *v17;
  uint64_t v18;
  int v19;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal *v24;
  BOOL v25;
  google::protobuf::internal *v26;
  uint64_t v27;
  google::protobuf::internal *v28;

  v28 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v8 = (uint64_t *)(a1 + 24);
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v28 + 1);
      LODWORD(v9) = *(unsigned __int8 *)v28;
      if (*(char *)v28 < 0)
      {
        v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v28, v9);
          v28 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 48);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 48);
              goto LABEL_69;
            case 2u:
              if (v9 != 18)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 56);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 56);
              goto LABEL_68;
            case 3u:
              if (v9 != 26)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 64);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 64);
              goto LABEL_68;
            case 4u:
              if (v9 != 34)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 8u;
              v10 = *(std::string **)(a1 + 72);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 72);
              goto LABEL_68;
            case 5u:
              if (v9 != 42)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v10 = *(std::string **)(a1 + 80);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 80);
              goto LABEL_68;
            case 6u:
              if (v9 != 48)
                goto LABEL_74;
              v5 |= 0x800u;
              v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v13 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_31;
              v14 = *(char *)v12;
              v13 = v13 + (v14 << 7) - 128;
              if (v14 < 0)
              {
                v26 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
                v28 = v26;
                *(_BYTE *)(a1 + 136) = v27 != 0;
                if (!v26)
                  goto LABEL_80;
              }
              else
              {
                v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
                v28 = v12;
                *(_BYTE *)(a1 + 136) = v13 != 0;
              }
              goto LABEL_72;
            case 7u:
              if (v9 != 58)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v10 = *(std::string **)(a1 + 88);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 88);
              goto LABEL_68;
            case 8u:
              if (v9 != 66)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x40u;
              v10 = *(std::string **)(a1 + 96);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 96);
              goto LABEL_68;
            case 9u:
              if (v9 != 74)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x80u;
              v10 = *(std::string **)(a1 + 104);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 104);
              goto LABEL_68;
            case 0xAu:
              if (v9 != 82)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x100u;
              v10 = *(std::string **)(a1 + 112);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 112);
              goto LABEL_68;
            case 0xBu:
              if (v9 != 90)
                goto LABEL_74;
              v15 = (char *)TagFallback - 1;
              break;
            case 0xCu:
              if (v9 != 98)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x200u;
              v10 = *(std::string **)(a1 + 120);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 120);
              goto LABEL_68;
            case 0xDu:
              if (v9 != 106)
                goto LABEL_74;
              *(_DWORD *)(a1 + 16) |= 0x400u;
              v10 = *(std::string **)(a1 + 128);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_70;
              v11 = (std::string **)(a1 + 128);
LABEL_68:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v11;
LABEL_69:
              TagFallback = v28;
LABEL_70:
              v24 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_71;
            default:
LABEL_74:
              if ((_DWORD)v9)
                v25 = (v9 & 7) == 4;
              else
                v25 = 1;
              if (v25)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                goto LABEL_3;
              }
              v24 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_71:
              v28 = v24;
              if (!v24)
              {
LABEL_80:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_72:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v16 = v15 + 1;
            v28 = (google::protobuf::internal *)(v15 + 1);
            v17 = *(int **)(a1 + 40);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 32);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 36))
              {
LABEL_51:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v19 + 1);
                v17 = *(int **)(a1 + 40);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v21 = (google::protobuf::internal::ArenaImpl *)*v8;
              if (*v8)
              {
                if (*((_QWORD *)v21 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v21, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v22 = *(_QWORD *)(a1 + 40);
              v23 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v23 + 1;
              *(_QWORD *)(v22 + 8 * v23 + 8) = AlignedAndAddCleanup;
              v16 = (std::string::value_type *)v28;
              goto LABEL_58;
            }
            *(_DWORD *)(a1 + 32) = v18 + 1;
            AlignedAndAddCleanup = *(std::string **)&v17[2 * v18 + 2];
LABEL_58:
            v15 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v16, (uint64_t)this);
            v28 = (google::protobuf::internal *)v15;
            if (!v15)
              goto LABEL_80;
            if (*(_QWORD *)this <= (unint64_t)v15 || *v15 != 90)
              goto LABEL_72;
          }
          v19 = *(_DWORD *)(a1 + 36);
          goto LABEL_51;
        }
        TagFallback = (google::protobuf::internal *)((char *)v28 + 2);
      }
      break;
    }
    v28 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v28;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_ReferenceResponse::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_ReferenceResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  uint64_t v12;
  char v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 8), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 9), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 10), v4);
  if ((v6 & 0x800) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_36:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v14 = *((_BYTE *)this + 136);
  *v4 = 48;
  v4[1] = v14;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 11), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 12), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_10:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_41:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 13), v4);
  if ((v6 & 0x100) != 0)
LABEL_11:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 14), v4);
LABEL_12:
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 > 127)
          goto LABEL_24;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v10)
      {
        *v4 = 90;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0)
          v11 = (const void *)v9;
        else
          v11 = *(const void **)v9;
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_24:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 11, v9, v4);
    }
  }
  if ((v6 & 0x200) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 15), v4);
  if ((v6 & 0x400) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 13, *((_QWORD *)this + 16), v4);
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
    return (unsigned __int8 *)v4;
  v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 23) < 0)
  {
    v17 = *(void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    LODWORD(v16) = *(unsigned __int8 *)(v15 + 23);
    v17 = (void *)v15;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v16)
  {
    v18 = (int)v16;
    memcpy(v4, v17, (int)v16);
    v4 += v18;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v16, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_ReferenceResponse::ByteSizeLong(protobuf::Intelligence_ReferenceResponse *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if (!(_BYTE)v7)
    goto LABEL_20;
  if ((v7 & 1) != 0)
  {
    v16 = *((_QWORD *)this + 6);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v18 = v17;
    v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_37;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  v19 = *((_QWORD *)this + 7);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_37:
  v22 = *((_QWORD *)this + 8);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v4 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_40:
  v25 = *((_QWORD *)this + 9);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v4 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v7 & 0x20) == 0)
      goto LABEL_15;
LABEL_46:
    v31 = *((_QWORD *)this + 11);
    v32 = *(unsigned __int8 *)(v31 + 23);
    v33 = *(_QWORD *)(v31 + 8);
    if ((v32 & 0x80u) == 0)
      v33 = v32;
    v4 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 0x40) == 0)
    {
LABEL_16:
      if ((v7 & 0x80) == 0)
        goto LABEL_20;
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_43:
  v28 = *((_QWORD *)this + 10);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v30 = v29;
  v4 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x20) != 0)
    goto LABEL_46;
LABEL_15:
  if ((v7 & 0x40) == 0)
    goto LABEL_16;
LABEL_49:
  v34 = *((_QWORD *)this + 12);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v36 = v35;
  v4 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x80) != 0)
  {
LABEL_17:
    v8 = *((_QWORD *)this + 13);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  if ((v7 & 0xF00) == 0)
    goto LABEL_29;
  if ((v7 & 0x100) == 0)
  {
    if ((v7 & 0x200) == 0)
      goto LABEL_23;
LABEL_56:
    v40 = *((_QWORD *)this + 15);
    v41 = *(unsigned __int8 *)(v40 + 23);
    v42 = *(_QWORD *)(v40 + 8);
    if ((v41 & 0x80u) == 0)
      v42 = v41;
    v4 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_24;
  }
  v37 = *((_QWORD *)this + 14);
  v38 = *(unsigned __int8 *)(v37 + 23);
  v39 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x80u) == 0)
    v39 = v38;
  v4 += v39 + ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x200) != 0)
    goto LABEL_56;
LABEL_23:
  if ((v7 & 0x400) != 0)
  {
LABEL_24:
    v11 = *((_QWORD *)this + 16);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v13 = v12;
    v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_27:
  if ((v7 & 0x800) != 0)
    v4 += 2;
LABEL_29:
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v43 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v43 + 23) < 0)
      v44 = *(_QWORD *)(v43 + 8);
    else
      v44 = *(unsigned __int8 *)(v43 + 23);
    v4 += v44;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_ReferenceResponse::CheckTypeAndMergeFrom(protobuf::Intelligence_ReferenceResponse *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_ReferenceResponse::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_ReferenceResponse::MergeFrom(protobuf::Intelligence_ReferenceResponse *this, const protobuf::Intelligence_ReferenceResponse *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  const std::string *v24;
  std::string *v25;
  const std::string *v26;
  std::string *v27;
  const std::string *v28;
  char v29;
  std::string v30[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 3998);
    v4 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v29, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 9);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 9);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 10);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 10);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 11);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 11);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 12);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 12);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      v21 = (std::string *)*((_QWORD *)this + 13);
                      *((_DWORD *)this + 4) |= 0x80u;
                      v22 = (const std::string *)*((_QWORD *)a2 + 13);
                      if (v21 != v22)
                      {
                        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v22);
                        else
                          std::string::operator=(v21, v22);
                      }
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0xF00) == 0)
    return;
  if ((v6 & 0x100) == 0
    || (v23 = (std::string *)*((_QWORD *)this + 14),
        *((_DWORD *)this + 4) |= 0x100u,
        v24 = (const std::string *)*((_QWORD *)a2 + 14),
        v23 == v24))
  {
LABEL_55:
    if ((v6 & 0x200) == 0)
      goto LABEL_62;
    goto LABEL_56;
  }
  if (v23 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v23, v24);
    goto LABEL_55;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v24);
  if ((v6 & 0x200) == 0)
    goto LABEL_62;
LABEL_56:
  v25 = (std::string *)*((_QWORD *)this + 15);
  *((_DWORD *)this + 4) |= 0x200u;
  v26 = (const std::string *)*((_QWORD *)a2 + 15);
  if (v25 != v26)
  {
    if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v26);
    else
      std::string::operator=(v25, v26);
  }
LABEL_62:
  if ((v6 & 0x400) != 0)
  {
    v27 = (std::string *)*((_QWORD *)this + 16);
    *((_DWORD *)this + 4) |= 0x400u;
    v28 = (const std::string *)*((_QWORD *)a2 + 16);
    if (v27 != v28)
    {
      if (v27 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v28);
        if ((v6 & 0x800) == 0)
          goto LABEL_68;
        goto LABEL_67;
      }
      std::string::operator=(v27, v28);
    }
  }
  if ((v6 & 0x800) != 0)
LABEL_67:
    *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
LABEL_68:
  *((_DWORD *)this + 4) |= v6;
}

void sub_22AF1D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_ReferenceResponse::CopyFrom(protobuf::Intelligence_ReferenceResponse *this, const protobuf::Intelligence_ReferenceResponse *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_ReferenceResponse::Clear(this);
    protobuf::Intelligence_ReferenceResponse::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_ReferenceResponse::IsInitialized(protobuf::Intelligence_ReferenceResponse *this)
{
  return 1;
}

void protobuf::Intelligence_ReferenceResponse::InternalSwap(protobuf::Intelligence_ReferenceResponse *this, protobuf::Intelligence_ReferenceResponse *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  unint64_t v80;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v80;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_76;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_76:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_ReferenceResponse *)((char *)this + 24), (protobuf::Intelligence_ReferenceResponse *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 10);
  v38 = (uint64_t **)((char *)a2 + 80);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 11);
  v44 = (uint64_t **)((char *)a2 + 88);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 12);
  v50 = (uint64_t **)((char *)a2 + 96);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = (uint64_t *)*((_QWORD *)this + 13);
  v56 = (uint64_t **)((char *)a2 + 104);
  if (v55 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_56;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v55 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v57 = *v56;
  if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v57 = *v56;
  }
  v58 = v55[2];
  v59 = *(_OWORD *)v55;
  v60 = v57[2];
  *(_OWORD *)v55 = *(_OWORD *)v57;
  v55[2] = v60;
  *(_OWORD *)v57 = v59;
  v57[2] = v58;
LABEL_56:
  v61 = (uint64_t *)*((_QWORD *)this + 14);
  v62 = (uint64_t **)((char *)a2 + 112);
  if (v61 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_62;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v61 = (uint64_t *)*((_QWORD *)this + 14);
  }
  v63 = *v62;
  if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v63 = *v62;
  }
  v64 = v61[2];
  v65 = *(_OWORD *)v61;
  v66 = v63[2];
  *(_OWORD *)v61 = *(_OWORD *)v63;
  v61[2] = v66;
  *(_OWORD *)v63 = v65;
  v63[2] = v64;
LABEL_62:
  v67 = (uint64_t *)*((_QWORD *)this + 15);
  v68 = (uint64_t **)((char *)a2 + 120);
  if (v67 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_68;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v67 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v69 = *v68;
  if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v69 = *v68;
  }
  v70 = v67[2];
  v71 = *(_OWORD *)v67;
  v72 = v69[2];
  *(_OWORD *)v67 = *(_OWORD *)v69;
  v67[2] = v72;
  *(_OWORD *)v69 = v71;
  v69[2] = v70;
LABEL_68:
  v73 = (uint64_t *)*((_QWORD *)this + 16);
  v74 = (uint64_t **)((char *)a2 + 128);
  if (v73 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_74;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v73 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v75 = *v74;
  if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v75 = *v74;
  }
  v76 = v73[2];
  v77 = *(_OWORD *)v73;
  v78 = v75[2];
  *(_OWORD *)v73 = *(_OWORD *)v75;
  v73[2] = v78;
  *(_OWORD *)v75 = v77;
  v75[2] = v76;
LABEL_74:
  v79 = *((_BYTE *)this + 136);
  *((_BYTE *)this + 136) = *((_BYTE *)a2 + 136);
  *((_BYTE *)a2 + 136) = v79;
}

_QWORD *protobuf::Intelligence_ReferenceResponse::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.ReferenceResponse");
}

protobuf::Intelligence_ResponseGroup *protobuf::Intelligence_ResponseGroup::Intelligence_ResponseGroup(protobuf::Intelligence_ResponseGroup *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F540FB8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_ResponseGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_ResponseGroup_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 120) = 0;
  return this;
}

void sub_22AF1E018(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_ResponseGroup *protobuf::Intelligence_ResponseGroup::Intelligence_ResponseGroup(protobuf::Intelligence_ResponseGroup *this, const protobuf::Intelligence_ResponseGroup *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  *(_QWORD *)this = &off_24F540FB8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x40) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v13 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v13);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x80) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 13);
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v14);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x100) != 0)
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v15);
  }
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  return this;
}

void sub_22AF1E1EC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_ResponseGroup::~Intelligence_ResponseGroup(protobuf::Intelligence_ResponseGroup *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24F540FB8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 10);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 11);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x22E2E9CCC](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 12);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x22E2E9CCC](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 13);
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x22E2E9CCC](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)this + 14);
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x22E2E9CCC](v14, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_ResponseGroup::~Intelligence_ResponseGroup(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_ResponseGroup::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_ResponseGroup::default_instance(protobuf::Intelligence_ResponseGroup *this)
{
  if (atomic_load(scc_info_Intelligence_ResponseGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_ResponseGroup_intelligence_2eproto);
  return &protobuf::_Intelligence_ResponseGroup_default_instance_;
}

void protobuf::Intelligence_ResponseGroup::Clear(protobuf::Intelligence_ResponseGroup *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if (!(_BYTE)v2)
    goto LABEL_41;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_19:
    v5 = *((_QWORD *)this + 8);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_27:
    v7 = *((_QWORD *)this + 10);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_15:
  v4 = *((_QWORD *)this + 7);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_23:
  v6 = *((_QWORD *)this + 9);
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_27;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_27;
  }
LABEL_7:
  if ((v2 & 0x20) == 0)
    goto LABEL_8;
LABEL_31:
  v8 = *((_QWORD *)this + 11);
  if (*(char *)(v8 + 23) < 0)
  {
    **(_BYTE **)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if ((v2 & 0x40) != 0)
    {
LABEL_35:
      v9 = *((_QWORD *)this + 12);
      if (*(char *)(v9 + 23) < 0)
      {
        **(_BYTE **)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        if ((v2 & 0x80) == 0)
          goto LABEL_41;
        goto LABEL_39;
      }
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v2 & 0x80) != 0)
        goto LABEL_39;
LABEL_41:
      if ((v2 & 0x100) != 0)
        goto LABEL_42;
      goto LABEL_46;
    }
  }
  else
  {
    *(_BYTE *)v8 = 0;
    *(_BYTE *)(v8 + 23) = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_35;
  }
LABEL_9:
  if ((v2 & 0x80) == 0)
    goto LABEL_41;
LABEL_39:
  v10 = *((_QWORD *)this + 13);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 23) = 0;
    goto LABEL_41;
  }
  **(_BYTE **)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_42:
    v11 = *((_QWORD *)this + 14);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
LABEL_46:
  v13 = *((_BYTE *)this + 8);
  v12 = (char *)this + 8;
  v12[112] = 0;
  *((_DWORD *)v12 + 2) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v12);
}

google::protobuf::internal *protobuf::Intelligence_ResponseGroup::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  uint64_t *v8;
  const char *v9;
  std::string *v10;
  std::string **v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  char *v15;
  std::string::value_type *v16;
  int *v17;
  uint64_t v18;
  int v19;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal *v24;
  BOOL v25;
  google::protobuf::internal *v26;
  uint64_t v27;
  google::protobuf::internal *v28;

  v28 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v8 = (uint64_t *)(a1 + 24);
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v28 + 1);
      LODWORD(v9) = *(unsigned __int8 *)v28;
      if (*(char *)v28 < 0)
      {
        v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v28, v9);
          v28 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 48);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 48);
              goto LABEL_63;
            case 2u:
              if (v9 != 18)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 56);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 56);
              goto LABEL_62;
            case 3u:
              if (v9 != 26)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 64);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 64);
              goto LABEL_62;
            case 4u:
              if (v9 != 34)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 8u;
              v10 = *(std::string **)(a1 + 72);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 72);
              goto LABEL_62;
            case 5u:
              if (v9 != 42)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v10 = *(std::string **)(a1 + 80);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 80);
              goto LABEL_62;
            case 6u:
              if (v9 != 48)
                goto LABEL_68;
              v5 |= 0x200u;
              v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v13 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_31;
              v14 = *(char *)v12;
              v13 = v13 + (v14 << 7) - 128;
              if (v14 < 0)
              {
                v26 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
                v28 = v26;
                *(_BYTE *)(a1 + 120) = v27 != 0;
                if (!v26)
                  goto LABEL_74;
              }
              else
              {
                v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
                v28 = v12;
                *(_BYTE *)(a1 + 120) = v13 != 0;
              }
              goto LABEL_66;
            case 7u:
              if (v9 != 58)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v10 = *(std::string **)(a1 + 88);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 88);
              goto LABEL_62;
            case 8u:
              if (v9 != 66)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x40u;
              v10 = *(std::string **)(a1 + 96);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 96);
              goto LABEL_62;
            case 9u:
              if (v9 != 74)
                goto LABEL_68;
              v15 = (char *)TagFallback - 1;
              break;
            case 0xAu:
              if (v9 != 82)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x80u;
              v10 = *(std::string **)(a1 + 104);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 104);
              goto LABEL_62;
            case 0xBu:
              if (v9 != 90)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x100u;
              v10 = *(std::string **)(a1 + 112);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_64;
              v11 = (std::string **)(a1 + 112);
LABEL_62:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v11;
LABEL_63:
              TagFallback = v28;
LABEL_64:
              v24 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_65;
            default:
LABEL_68:
              if ((_DWORD)v9)
                v25 = (v9 & 7) == 4;
              else
                v25 = 1;
              if (v25)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                goto LABEL_3;
              }
              v24 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_65:
              v28 = v24;
              if (!v24)
              {
LABEL_74:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_66:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v16 = v15 + 1;
            v28 = (google::protobuf::internal *)(v15 + 1);
            v17 = *(int **)(a1 + 40);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 32);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 36))
              {
LABEL_45:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v19 + 1);
                v17 = *(int **)(a1 + 40);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v21 = (google::protobuf::internal::ArenaImpl *)*v8;
              if (*v8)
              {
                if (*((_QWORD *)v21 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v21, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v22 = *(_QWORD *)(a1 + 40);
              v23 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v23 + 1;
              *(_QWORD *)(v22 + 8 * v23 + 8) = AlignedAndAddCleanup;
              v16 = (std::string::value_type *)v28;
              goto LABEL_52;
            }
            *(_DWORD *)(a1 + 32) = v18 + 1;
            AlignedAndAddCleanup = *(std::string **)&v17[2 * v18 + 2];
LABEL_52:
            v15 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v16, (uint64_t)this);
            v28 = (google::protobuf::internal *)v15;
            if (!v15)
              goto LABEL_74;
            if (*(_QWORD *)this <= (unint64_t)v15 || *v15 != 74)
              goto LABEL_66;
          }
          v19 = *(_DWORD *)(a1 + 36);
          goto LABEL_45;
        }
        TagFallback = (google::protobuf::internal *)((char *)v28 + 2);
      }
      break;
    }
    v28 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v28;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_ResponseGroup::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_ResponseGroup *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  uint64_t v12;
  char v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 8), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 9), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 10), v4);
  if ((v6 & 0x200) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_34:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v14 = *((_BYTE *)this + 120);
  *v4 = 48;
  v4[1] = v14;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_37:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 11), v4);
  if ((v6 & 0x40) != 0)
LABEL_9:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 12), v4);
LABEL_10:
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 > 127)
          goto LABEL_22;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v10)
      {
        *v4 = 74;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0)
          v11 = (const void *)v9;
        else
          v11 = *(const void **)v9;
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_22:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 9, v9, v4);
    }
  }
  if ((v6 & 0x80) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 13), v4);
  if ((v6 & 0x100) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 14), v4);
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
    return (unsigned __int8 *)v4;
  v15 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 23) < 0)
  {
    v17 = *(void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    LODWORD(v16) = *(unsigned __int8 *)(v15 + 23);
    v17 = (void *)v15;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v16)
  {
    v18 = (int)v16;
    memcpy(v4, v17, (int)v16);
    v4 += v18;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v16, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_ResponseGroup::ByteSizeLong(protobuf::Intelligence_ResponseGroup *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if (!(_BYTE)v7)
    goto LABEL_20;
  if ((v7 & 1) != 0)
  {
    v16 = *((_QWORD *)this + 6);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v18 = v17;
    v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_35;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  v19 = *((_QWORD *)this + 7);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_35:
  v22 = *((_QWORD *)this + 8);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v4 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_38:
  v25 = *((_QWORD *)this + 9);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v4 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v7 & 0x20) == 0)
      goto LABEL_15;
LABEL_44:
    v31 = *((_QWORD *)this + 11);
    v32 = *(unsigned __int8 *)(v31 + 23);
    v33 = *(_QWORD *)(v31 + 8);
    if ((v32 & 0x80u) == 0)
      v33 = v32;
    v4 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 0x40) == 0)
    {
LABEL_16:
      if ((v7 & 0x80) == 0)
        goto LABEL_20;
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_41:
  v28 = *((_QWORD *)this + 10);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v30 = v29;
  v4 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x20) != 0)
    goto LABEL_44;
LABEL_15:
  if ((v7 & 0x40) == 0)
    goto LABEL_16;
LABEL_47:
  v34 = *((_QWORD *)this + 12);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v36 = v35;
  v4 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x80) != 0)
  {
LABEL_17:
    v8 = *((_QWORD *)this + 13);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  if ((v7 & 0x300) != 0)
  {
    if ((v7 & 0x100) != 0)
    {
      v11 = *((_QWORD *)this + 14);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v7 & 0x200) != 0)
      v4 += 2;
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v37 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v37 + 23) < 0)
      v38 = *(_QWORD *)(v37 + 8);
    else
      v38 = *(unsigned __int8 *)(v37 + 23);
    v4 += v38;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_ResponseGroup::CheckTypeAndMergeFrom(protobuf::Intelligence_ResponseGroup *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_ResponseGroup::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_ResponseGroup::MergeFrom(protobuf::Intelligence_ResponseGroup *this, const protobuf::Intelligence_ResponseGroup *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  const std::string *v24;
  char v25;
  std::string v26[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 4575);
    v4 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 9);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 9);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 10);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 10);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 11);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 11);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 12);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 12);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      v21 = (std::string *)*((_QWORD *)this + 13);
                      *((_DWORD *)this + 4) |= 0x80u;
                      v22 = (const std::string *)*((_QWORD *)a2 + 13);
                      if (v21 != v22)
                      {
                        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v22);
                        else
                          std::string::operator=(v21, v22);
                      }
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0x300) == 0)
    return;
  if ((v6 & 0x100) != 0)
  {
    v23 = (std::string *)*((_QWORD *)this + 14);
    *((_DWORD *)this + 4) |= 0x100u;
    v24 = (const std::string *)*((_QWORD *)a2 + 14);
    if (v23 != v24)
    {
      if (v23 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v24);
        if ((v6 & 0x200) == 0)
          goto LABEL_57;
        goto LABEL_56;
      }
      std::string::operator=(v23, v24);
    }
  }
  if ((v6 & 0x200) != 0)
LABEL_56:
    *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
LABEL_57:
  *((_DWORD *)this + 4) |= v6;
}

void sub_22AF1F520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_ResponseGroup::CopyFrom(protobuf::Intelligence_ResponseGroup *this, const protobuf::Intelligence_ResponseGroup *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_ResponseGroup::Clear(this);
    protobuf::Intelligence_ResponseGroup::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_ResponseGroup::IsInitialized(protobuf::Intelligence_ResponseGroup *this)
{
  return 1;
}

void protobuf::Intelligence_ResponseGroup::InternalSwap(protobuf::Intelligence_ResponseGroup *this, protobuf::Intelligence_ResponseGroup *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v68;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_64;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_64:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_ResponseGroup *)((char *)this + 24), (protobuf::Intelligence_ResponseGroup *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 10);
  v38 = (uint64_t **)((char *)a2 + 80);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 11);
  v44 = (uint64_t **)((char *)a2 + 88);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 12);
  v50 = (uint64_t **)((char *)a2 + 96);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = (uint64_t *)*((_QWORD *)this + 13);
  v56 = (uint64_t **)((char *)a2 + 104);
  if (v55 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_56;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v55 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v57 = *v56;
  if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v57 = *v56;
  }
  v58 = v55[2];
  v59 = *(_OWORD *)v55;
  v60 = v57[2];
  *(_OWORD *)v55 = *(_OWORD *)v57;
  v55[2] = v60;
  *(_OWORD *)v57 = v59;
  v57[2] = v58;
LABEL_56:
  v61 = (uint64_t *)*((_QWORD *)this + 14);
  v62 = (uint64_t **)((char *)a2 + 112);
  if (v61 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_62;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v61 = (uint64_t *)*((_QWORD *)this + 14);
  }
  v63 = *v62;
  if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v63 = *v62;
  }
  v64 = v61[2];
  v65 = *(_OWORD *)v61;
  v66 = v63[2];
  *(_OWORD *)v61 = *(_OWORD *)v63;
  v61[2] = v66;
  *(_OWORD *)v63 = v65;
  v63[2] = v64;
LABEL_62:
  v67 = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v67;
}

_QWORD *protobuf::Intelligence_ResponseGroup::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.ResponseGroup");
}

protobuf::Intelligence_InputGroup_Interjection *protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(protobuf::Intelligence_InputGroup_Interjection *this)
{
  *(_QWORD *)this = &off_24F541048;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_InputGroup_Interjection_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Interjection_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  return this;
}

void sub_22AF1FB30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Interjection *protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(protobuf::Intelligence_InputGroup_Interjection *this, const protobuf::Intelligence_InputGroup_Interjection *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;

  *(_QWORD *)this = &off_24F541048;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  v8 = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)this + 10) = v8;
  return this;
}

void sub_22AF1FBFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Interjection::~Intelligence_InputGroup_Interjection(protobuf::Intelligence_InputGroup_Interjection *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F541048;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup_Interjection::~Intelligence_InputGroup_Interjection(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup_Interjection::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup_Interjection::default_instance(protobuf::Intelligence_InputGroup_Interjection *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_Interjection_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Interjection_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
}

void protobuf::Intelligence_InputGroup_Interjection::Clear(protobuf::Intelligence_InputGroup_Interjection *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *((_QWORD *)this + 3);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  if ((v1 & 0x7C) != 0)
  {
    *((_BYTE *)this + 44) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::Intelligence_InputGroup_Interjection *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

google::protobuf::internal *protobuf::Intelligence_InputGroup_Interjection::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  google::protobuf::internal *v9;
  unint64_t v10;
  int v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  google::protobuf::internal *v18;
  unint64_t v19;
  int v20;
  std::string *v21;
  google::protobuf::internal *v22;
  unint64_t v23;
  int v24;
  google::protobuf::internal *v25;
  BOOL v26;
  google::protobuf::internal *v27;
  uint64_t v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v31;
  uint64_t v32;
  google::protobuf::internal *v33;
  uint64_t v34;
  google::protobuf::internal *v35;
  uint64_t v36;
  google::protobuf::internal *v37;

  v37 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v37 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v37;
      if (*(char *)v37 < 0)
      {
        v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v8);
          v37 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
          goto LABEL_8;
        }
        TagFallback = (google::protobuf::internal *)((char *)v37 + 2);
      }
      v37 = TagFallback;
LABEL_8:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 8)
            goto LABEL_44;
          v5 |= 4u;
          v9 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v10 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_13;
          v11 = *(char *)v9;
          v10 = v10 + (v11 << 7) - 128;
          if ((v11 & 0x80000000) == 0)
          {
            v9 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_13:
            v37 = v9;
            *(_BYTE *)(a1 + 40) = v10 != 0;
            goto LABEL_50;
          }
          v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v10);
          v37 = v27;
          *(_BYTE *)(a1 + 40) = v28 != 0;
          if (v27)
            goto LABEL_50;
          goto LABEL_61;
        case 2u:
          if (v8 != 16)
            goto LABEL_44;
          v5 |= 8u;
          v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v13 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_20;
          v14 = *(char *)v12;
          v13 = v13 + (v14 << 7) - 128;
          if (v14 < 0)
          {
            v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
            v37 = v29;
            *(_BYTE *)(a1 + 41) = v30 != 0;
            if (!v29)
              goto LABEL_61;
          }
          else
          {
            v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_20:
            v37 = v12;
            *(_BYTE *)(a1 + 41) = v13 != 0;
          }
          goto LABEL_50;
        case 3u:
          if (v8 != 24)
            goto LABEL_44;
          v5 |= 0x10u;
          v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v16 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_25;
          v17 = *(char *)v15;
          v16 = v16 + (v17 << 7) - 128;
          if (v17 < 0)
          {
            v31 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
            v37 = v31;
            *(_BYTE *)(a1 + 42) = v32 != 0;
            if (!v31)
              goto LABEL_61;
          }
          else
          {
            v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_25:
            v37 = v15;
            *(_BYTE *)(a1 + 42) = v16 != 0;
          }
          goto LABEL_50;
        case 4u:
          if (v8 != 32)
            goto LABEL_44;
          v5 |= 0x40u;
          v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v19 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_30;
          v20 = *(char *)v18;
          v19 = v19 + (v20 << 7) - 128;
          if (v20 < 0)
          {
            v33 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
            v37 = v33;
            *(_BYTE *)(a1 + 44) = v34 != 0;
            if (!v33)
              goto LABEL_61;
          }
          else
          {
            v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_30:
            v37 = v18;
            *(_BYTE *)(a1 + 44) = v19 != 0;
          }
          goto LABEL_50;
        case 5u:
          if (v8 != 42)
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) |= 1u;
          v21 = *(std::string **)(a1 + 24);
          if (v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_43;
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v21 = *(std::string **)(a1 + 24);
          goto LABEL_42;
        case 6u:
          if (v8 != 48)
            goto LABEL_44;
          v5 |= 0x20u;
          v22 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v23 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_38;
          v24 = *(char *)v22;
          v23 = v23 + (v24 << 7) - 128;
          if (v24 < 0)
          {
            v35 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v23);
            v37 = v35;
            *(_BYTE *)(a1 + 43) = v36 != 0;
            if (!v35)
              goto LABEL_61;
          }
          else
          {
            v22 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
            v37 = v22;
            *(_BYTE *)(a1 + 43) = v23 != 0;
          }
          goto LABEL_50;
        case 7u:
          if (v8 != 58)
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) |= 2u;
          v21 = *(std::string **)(a1 + 32);
          if (v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_43;
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v21 = *(std::string **)(a1 + 32);
LABEL_42:
          TagFallback = v37;
LABEL_43:
          v25 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)TagFallback, (uint64_t)this);
          goto LABEL_49;
        default:
LABEL_44:
          if ((_DWORD)v8)
            v26 = (v8 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v25 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_49:
          v37 = v25;
          if (!v25)
          {
LABEL_61:
            TagFallback = 0;
            goto LABEL_3;
          }
LABEL_50:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)))goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  TagFallback = v37;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_InputGroup_Interjection::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup_Interjection *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 4) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v9 = *((_BYTE *)this + 40);
    *v4 = 8;
    v4[1] = v9;
    v4 += 2;
    if ((v6 & 8) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v10 = *((_BYTE *)this + 41);
  *v4 = 16;
  v4[1] = v10;
  v4 += 2;
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_17:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v11 = *((_BYTE *)this + 42);
  *v4 = 24;
  v4[1] = v11;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_5:
    if ((v6 & 1) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_20:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v12 = *((_BYTE *)this + 44);
  *v4 = 32;
  v4[1] = v12;
  v4 += 2;
  if ((v6 & 1) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 3), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_24:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v13 = *((_BYTE *)this + 43);
  *v4 = 48;
  v4[1] = v13;
  v4 += 2;
  if ((v6 & 2) != 0)
LABEL_8:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 4), v4);
LABEL_9:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return (unsigned __int8 *)v4;
  v14 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 23) < 0)
  {
    v16 = *(void **)v14;
    v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
    v16 = (void *)v14;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v15)
  {
    v17 = (int)v15;
    memcpy(v4, v16, (int)v15);
    v4 += v17;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v15, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_InputGroup_Interjection::ByteSizeLong(protobuf::Intelligence_InputGroup_Interjection *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0)
  {
    v3 = 0;
    goto LABEL_23;
  }
  if ((v1 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 4);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if ((v1 & 0x10) != 0)
    v2 += 2;
  if ((v1 & 0x20) != 0)
    v2 += 2;
  if ((v1 & 0x40) != 0)
    v3 = v2 + 2;
  else
    v3 = v2;
LABEL_23:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = *(unsigned __int8 *)(v12 + 23);
    v3 += v13;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_InputGroup_Interjection::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup_Interjection *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup_Interjection::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup_Interjection::MergeFrom(protobuf::Intelligence_InputGroup_Interjection *this, const protobuf::Intelligence_InputGroup_Interjection *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 4982);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
LABEL_11:
    v9 = (std::string *)*((_QWORD *)this + 4);
    *((_DWORD *)this + 4) |= 2u;
    v10 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v9 != v10)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
      else
        std::string::operator=(v9, v10);
    }
LABEL_17:
    if ((v6 & 4) != 0)
    {
      *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
      if ((v6 & 8) == 0)
      {
LABEL_19:
        if ((v6 & 0x10) == 0)
          goto LABEL_20;
        goto LABEL_27;
      }
    }
    else if ((v6 & 8) == 0)
    {
      goto LABEL_19;
    }
    *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
    if ((v6 & 0x10) == 0)
    {
LABEL_20:
      if ((v6 & 0x20) == 0)
        goto LABEL_21;
      goto LABEL_28;
    }
LABEL_27:
    *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
    if ((v6 & 0x20) == 0)
    {
LABEL_21:
      if ((v6 & 0x40) == 0)
      {
LABEL_23:
        *((_DWORD *)this + 4) |= v6;
        return;
      }
LABEL_22:
      *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
      goto LABEL_23;
    }
LABEL_28:
    *((_BYTE *)this + 43) = *((_BYTE *)a2 + 43);
    if ((v6 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
}

void sub_22AF20684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Interjection::CopyFrom(protobuf::Intelligence_InputGroup_Interjection *this, const protobuf::Intelligence_InputGroup_Interjection *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup_Interjection::Clear(this);
    protobuf::Intelligence_InputGroup_Interjection::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup_Interjection::IsInitialized(protobuf::Intelligence_InputGroup_Interjection *this)
{
  return 1;
}

void protobuf::Intelligence_InputGroup_Interjection::InternalSwap(protobuf::Intelligence_InputGroup_Interjection *this, protobuf::Intelligence_InputGroup_Interjection *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  unint64_t v30;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v30;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v25;
  v26 = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v26;
  v27 = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v27;
  v28 = *((_BYTE *)this + 43);
  *((_BYTE *)this + 43) = *((_BYTE *)a2 + 43);
  *((_BYTE *)a2 + 43) = v28;
  v29 = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v29;
}

_QWORD *protobuf::Intelligence_InputGroup_Interjection::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup.Interjection");
}

void protobuf::Intelligence_InputGroup_Intent::InitAsDefaultInstance(protobuf::Intelligence_InputGroup_Intent *this)
{
  qword_255B58718 = (uint64_t)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
}

uint64_t protobuf::Intelligence_InputGroup_Intent::_Internal::interjection_settings(protobuf::Intelligence_InputGroup_Intent::_Internal *this, const protobuf::Intelligence_InputGroup_Intent *a2)
{
  return *((_QWORD *)this + 12);
}

protobuf::Intelligence_InputGroup_Intent *protobuf::Intelligence_InputGroup_Intent::Intelligence_InputGroup_Intent(protobuf::Intelligence_InputGroup_Intent *this)
{
  *(_QWORD *)this = &off_24F5410D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_Intelligence_InputGroup_Intent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Intent_intelligence_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_22AF20984(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Intent *protobuf::Intelligence_InputGroup_Intent::Intelligence_InputGroup_Intent(protobuf::Intelligence_InputGroup_Intent *this, const protobuf::Intelligence_InputGroup_Intent *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  protobuf::Intelligence_InputGroup_Interjection *v10;
  std::string *v11;
  char v13;
  std::string v14[2];

  *(_QWORD *)this = &off_24F5410D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 8) != 0)
  {
    if (!*((_QWORD *)a2 + 12))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 14620);
      v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: !value || interjection_settings_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    }
    v10 = (protobuf::Intelligence_InputGroup_Interjection *)operator new();
    protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(v10, *((const protobuf::Intelligence_InputGroup_Interjection **)a2 + 12));
  }
  else
  {
    v10 = 0;
  }
  *((_QWORD *)this + 12) = v10;
  return this;
}

void sub_22AF20B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Intent::~Intelligence_InputGroup_Intent(protobuf::Intelligence_InputGroup_Intent *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_24F5410D8;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 11);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_InputGroup_Intent *)&protobuf::_Intelligence_InputGroup_Intent_default_instance_)
  {
    v8 = *((_QWORD *)this + 12);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup_Intent::~Intelligence_InputGroup_Intent(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup_Intent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup_Intent::default_instance(protobuf::Intelligence_InputGroup_Intent *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_Intent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Intent_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_Intent_default_instance_;
}

void protobuf::Intelligence_InputGroup_Intent::Clear(protobuf::Intelligence_InputGroup_Intent *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  protobuf::Intelligence_InputGroup_Interjection *v6;
  std::string *v7;
  google::protobuf::internal::InternalMetadataWithArenaLite *v8;
  char v9;
  char v10;
  std::string v11[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) == 0)
    goto LABEL_22;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_11:
    v4 = *((_QWORD *)this + 10);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  v3 = *((_QWORD *)this + 9);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_15:
  v5 = *((_QWORD *)this + 11);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) == 0)
      goto LABEL_22;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) == 0)
      goto LABEL_22;
  }
LABEL_19:
  v6 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 12);
  if (!v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 5156);
    v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: interjection_settings_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v6 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 12);
  }
  protobuf::Intelligence_InputGroup_Interjection::Clear(v6);
LABEL_22:
  v9 = *((_BYTE *)this + 8);
  v8 = (protobuf::Intelligence_InputGroup_Intent *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
}

void sub_22AF20E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *protobuf::Intelligence_InputGroup_Intent::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  uint64_t *v8;
  std::string::value_type *v9;
  const char *v10;
  std::string *v11;
  std::string **v12;
  std::string::value_type *v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v18;
  uint64_t v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup_Interjection *v21;
  std::string::value_type *v22;
  int *v23;
  uint64_t v24;
  int v25;
  std::string *v26;
  google::protobuf::internal::ArenaImpl *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v32, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v32;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 48);
    v8 = (uint64_t *)(a1 + 24);
    while (2)
    {
      v9 = result + 1;
      LODWORD(v10) = *result;
      if (*result < 0)
      {
        v10 = (const char *)(v10 + (*v9 << 7) - 128);
        if (*v9 < 0)
        {
          result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v10);
          v32 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          v9 = result;
LABEL_8:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10)
                goto LABEL_61;
              *(_DWORD *)(a1 + 16) |= 1u;
              v11 = *(std::string **)(a1 + 72);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_38;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v11 = *(std::string **)(a1 + 72);
              goto LABEL_37;
            case 2u:
              if (v10 != 18)
                goto LABEL_61;
              *(_DWORD *)(a1 + 16) |= 2u;
              v11 = *(std::string **)(a1 + 80);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_38;
              v12 = (std::string **)(a1 + 80);
              goto LABEL_36;
            case 3u:
              if (v10 != 26)
                goto LABEL_61;
              result = v9 - 1;
              while (1)
              {
                v13 = result + 1;
                v32 = (google::protobuf::internal *)(result + 1);
                v14 = *(int **)(a1 + 40);
                if (!v14)
                  break;
                v15 = *(int *)(a1 + 32);
                v16 = *v14;
                if ((int)v15 >= *v14)
                {
                  if (v16 == *(_DWORD *)(a1 + 36))
                  {
LABEL_22:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v16 + 1);
                    v14 = *(int **)(a1 + 40);
                    v16 = *v14;
                  }
                  *v14 = v16 + 1;
                  v18 = (google::protobuf::internal::ArenaImpl *)*v8;
                  if (*v8)
                  {
                    if (*((_QWORD *)v18 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v19 = *(_QWORD *)(a1 + 40);
                  v20 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v20 + 1;
                  *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
                  v13 = (std::string::value_type *)v32;
                  goto LABEL_29;
                }
                *(_DWORD *)(a1 + 32) = v15 + 1;
                AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
LABEL_29:
                result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)this);
                v32 = (google::protobuf::internal *)result;
                if (!result)
                  return result;
                if (*(_QWORD *)this <= (unint64_t)result || *result != 26)
                  goto LABEL_67;
              }
              v16 = *(_DWORD *)(a1 + 36);
              goto LABEL_22;
            case 4u:
              if (v10 != 34)
                goto LABEL_61;
              *(_DWORD *)(a1 + 16) |= 4u;
              v11 = *(std::string **)(a1 + 88);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_38;
              v12 = (std::string **)(a1 + 88);
LABEL_36:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v11 = *v12;
LABEL_37:
              v9 = (std::string::value_type *)v32;
LABEL_38:
              result = google::protobuf::internal::InlineGreedyStringParser(v11, v9, (uint64_t)this);
              goto LABEL_66;
            case 5u:
              if (v10 != 42)
                goto LABEL_61;
              *(_DWORD *)(a1 + 16) |= 8u;
              v21 = *(protobuf::Intelligence_InputGroup_Interjection **)(a1 + 96);
              if (!v21)
              {
                v21 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
                *(_QWORD *)(a1 + 96) = v21;
                v9 = (std::string::value_type *)v32;
              }
              result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup_Interjection>(this, (uint64_t)v21, (google::protobuf::internal *)v9);
              goto LABEL_66;
            case 6u:
              if (v10 != 50)
                goto LABEL_61;
              result = v9 - 1;
              break;
            default:
LABEL_61:
              if ((_DWORD)v10)
                v30 = (v10 & 7) == 4;
              else
                v30 = 1;
              if (v30)
              {
                *((_DWORD *)this + 20) = (_DWORD)v10 - 1;
                return v9;
              }
              result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v10, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v9, this);
LABEL_66:
              v32 = (google::protobuf::internal *)result;
              if (!result)
                return result;
LABEL_67:
              v31 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v32, *((_DWORD *)this + 23));
              result = (std::string::value_type *)v32;
              if (v31)
                return result;
              continue;
          }
          while (1)
          {
            v22 = result + 1;
            v32 = (google::protobuf::internal *)(result + 1);
            v23 = *(int **)(a1 + 64);
            if (!v23)
              break;
            v24 = *(int *)(a1 + 56);
            v25 = *v23;
            if ((int)v24 >= *v23)
            {
              if (v25 == *(_DWORD *)(a1 + 60))
              {
LABEL_50:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v25 + 1);
                v23 = *(int **)(a1 + 64);
                v25 = *v23;
              }
              *v23 = v25 + 1;
              v27 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v27 + 14))
                v26 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v27, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                v26 = (std::string *)operator new();
              }
              v26->__r_.__value_.__r.__words[0] = 0;
              v26->__r_.__value_.__l.__size_ = 0;
              v26->__r_.__value_.__r.__words[2] = 0;
              v28 = *(_QWORD *)(a1 + 64);
              v29 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v29 + 1;
              *(_QWORD *)(v28 + 8 * v29 + 8) = v26;
              v22 = (std::string::value_type *)v32;
              goto LABEL_57;
            }
            *(_DWORD *)(a1 + 56) = v24 + 1;
            v26 = *(std::string **)&v23[2 * v24 + 2];
LABEL_57:
            result = google::protobuf::internal::InlineGreedyStringParser(v26, v22, (uint64_t)this);
            v32 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 50)
              goto LABEL_67;
          }
          v25 = *(_DWORD *)(a1 + 60);
          goto LABEL_50;
        }
        v9 = result + 2;
      }
      break;
    }
    v32 = (google::protobuf::internal *)v9;
    goto LABEL_8;
  }
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup_Interjection>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)protobuf::Intelligence_InputGroup_Interjection::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence_InputGroup_Intent::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup_Intent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  protobuf::Intelligence_InputGroup_Interjection *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int j;
  uint64_t v20;
  int64_t v21;
  const void *v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9), a2);
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 10), v4);
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 > 127)
          goto LABEL_17;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v10)
      {
        *v4 = 26;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0)
          v11 = (const void *)v9;
        else
          v11 = *(const void **)v9;
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_17:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 3, v9, v4);
    }
  }
  if ((v6 & 4) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 11), v4);
  if ((v6 & 8) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v12 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 12);
    *v4 = 42;
    v13 = *((_DWORD *)v12 + 5);
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      v15 = v13 >> 7;
      if (v13 >> 14)
      {
        v14 = v4 + 3;
        do
        {
          *(v14 - 1) = v15 | 0x80;
          v16 = v15 >> 7;
          ++v14;
          v17 = v15 >> 14;
          v15 >>= 7;
        }
        while (v17);
        *(v14 - 1) = v16;
      }
      else
      {
        v4[2] = v15;
        v14 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v13;
      v14 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_InputGroup_Interjection::InternalSerializeWithCachedSizesToArray(v12, v14, a3);
  }
  v18 = *((_DWORD *)this + 14);
  if (v18 >= 1)
  {
    for (j = 0; v18 != j; ++j)
    {
      v20 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v20 + 23) < 0)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (v21 > 127)
          goto LABEL_43;
      }
      else
      {
        v21 = *(unsigned __int8 *)(v20 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v21)
      {
        *v4 = 50;
        v4[1] = v21;
        if (*(char *)(v20 + 23) >= 0)
          v22 = (const void *)v20;
        else
          v22 = *(const void **)v20;
        memcpy(v4 + 2, v22, v21);
        v4 += v21 + 2;
        continue;
      }
LABEL_43:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 6, v20, v4);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) == 0)
    return (unsigned __int8 *)v4;
  v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v25 + 23) < 0)
  {
    v27 = *(void **)v25;
    v26 = *(_QWORD *)(v25 + 8);
  }
  else
  {
    LODWORD(v26) = *(unsigned __int8 *)(v25 + 23);
    v27 = (void *)v25;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v26)
  {
    v28 = (int)v26;
    memcpy(v4, v27, (int)v26);
    v4 += v28;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v27, v26, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_InputGroup_Intent::ByteSizeLong(protobuf::Intelligence_InputGroup_Intent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((unsigned int *)this + 14);
  v8 = v4 + v7;
  if ((int)v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v9);
      v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      v8 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while ((_DWORD)v7 != v9);
  }
  v12 = *((_DWORD *)this + 4);
  if ((v12 & 0xF) == 0)
    goto LABEL_19;
  if ((v12 & 1) == 0)
  {
    if ((v12 & 2) == 0)
      goto LABEL_16;
LABEL_24:
    v19 = *((_QWORD *)this + 10);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v21 = *(_QWORD *)(v19 + 8);
    if ((v20 & 0x80u) == 0)
      v21 = v20;
    v8 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v12 & 4) == 0)
    {
LABEL_17:
      if ((v12 & 8) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
    goto LABEL_27;
  }
  v16 = *((_QWORD *)this + 9);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v18 = v17;
  v8 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v12 & 2) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v12 & 4) == 0)
    goto LABEL_17;
LABEL_27:
  v22 = *((_QWORD *)this + 11);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v8 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v12 & 8) != 0)
  {
LABEL_18:
    v13 = protobuf::Intelligence_InputGroup_Interjection::ByteSizeLong(*((protobuf::Intelligence_InputGroup_Interjection **)this
                                                                       + 12));
    v8 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_19:
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v25 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v8 += v26;
  }
  *((_DWORD *)this + 5) = v8;
  return v8;
}

void protobuf::Intelligence_InputGroup_Intent::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup_Intent *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup_Intent::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup_Intent::MergeFrom(protobuf::Intelligence_InputGroup_Intent *this, const protobuf::Intelligence_InputGroup_Intent *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  protobuf::Intelligence_InputGroup_Interjection *v13;
  const protobuf::Intelligence_InputGroup_Interjection *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 5369);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 10);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 10);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 11);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 11);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  return;
LABEL_22:
                *((_DWORD *)this + 4) |= 8u;
                v13 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 12);
                if (!v13)
                {
                  v13 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
                  *((_QWORD *)this + 12) = v13;
                }
                if (*((_QWORD *)a2 + 12))
                  v14 = (const protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)a2 + 12);
                else
                  v14 = (const protobuf::Intelligence_InputGroup_Interjection *)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
                protobuf::Intelligence_InputGroup_Interjection::MergeFrom(v13, v14);
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            return;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF21B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Intent::CopyFrom(protobuf::Intelligence_InputGroup_Intent *this, const protobuf::Intelligence_InputGroup_Intent *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup_Intent::Clear(this);
    protobuf::Intelligence_InputGroup_Intent::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup_Intent::IsInitialized(protobuf::Intelligence_InputGroup_Intent *this)
{
  return 1;
}

void protobuf::Intelligence_InputGroup_Intent::InternalSwap(protobuf::Intelligence_InputGroup_Intent *this, protobuf::Intelligence_InputGroup_Intent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v32;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_Intent *)((char *)this + 24), (protobuf::Intelligence_InputGroup_Intent *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_Intent *)((char *)this + 48), (protobuf::Intelligence_InputGroup_Intent *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 11);
  v26 = (uint64_t **)((char *)a2 + 88);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v31;
}

_QWORD *protobuf::Intelligence_InputGroup_Intent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup.Intent");
}

void protobuf::Intelligence_InputGroup_Event::InitAsDefaultInstance(protobuf::Intelligence_InputGroup_Event *this)
{
  qword_255B58768 = (uint64_t)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
}

uint64_t protobuf::Intelligence_InputGroup_Event::_Internal::interjection_settings(protobuf::Intelligence_InputGroup_Event::_Internal *this, const protobuf::Intelligence_InputGroup_Event *a2)
{
  return *((_QWORD *)this + 9);
}

protobuf::Intelligence_InputGroup_Event *protobuf::Intelligence_InputGroup_Event::Intelligence_InputGroup_Event(protobuf::Intelligence_InputGroup_Event *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541168;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_InputGroup_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Event_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_22AF21E6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Event *protobuf::Intelligence_InputGroup_Event::Intelligence_InputGroup_Event(protobuf::Intelligence_InputGroup_Event *this, const protobuf::Intelligence_InputGroup_Event *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  protobuf::Intelligence_InputGroup_Interjection *v10;
  std::string *v11;
  char v13;
  std::string v14[2];

  *(_QWORD *)this = &off_24F541168;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 8) != 0)
  {
    if (!*((_QWORD *)a2 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 15045);
      v11 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: !value || interjection_settings_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    }
    v10 = (protobuf::Intelligence_InputGroup_Interjection *)operator new();
    protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(v10, *((const protobuf::Intelligence_InputGroup_Interjection **)a2 + 9));
  }
  else
  {
    v10 = 0;
  }
  *((_QWORD *)this + 9) = v10;
  return this;
}

void sub_22AF21FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Event::~Intelligence_InputGroup_Event(protobuf::Intelligence_InputGroup_Event *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_24F541168;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_InputGroup_Event *)&protobuf::_Intelligence_InputGroup_Event_default_instance_)
  {
    v8 = *((_QWORD *)this + 9);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup_Event::~Intelligence_InputGroup_Event(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup_Event::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup_Event::default_instance(protobuf::Intelligence_InputGroup_Event *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Event_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_Event_default_instance_;
}

void protobuf::Intelligence_InputGroup_Event::Clear(protobuf::Intelligence_InputGroup_Event *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  protobuf::Intelligence_InputGroup_Interjection *v6;
  std::string *v7;
  google::protobuf::internal::InternalMetadataWithArenaLite *v8;
  char v9;
  char v10;
  std::string v11[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) == 0)
    goto LABEL_22;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_11:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  v3 = *((_QWORD *)this + 6);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_15:
  v5 = *((_QWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) == 0)
      goto LABEL_22;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) == 0)
      goto LABEL_22;
  }
LABEL_19:
  v6 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 9);
  if (!v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 5534);
    v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: interjection_settings_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v6 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 9);
  }
  protobuf::Intelligence_InputGroup_Interjection::Clear(v6);
LABEL_22:
  v9 = *((_BYTE *)this + 8);
  v8 = (protobuf::Intelligence_InputGroup_Event *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
}

void sub_22AF22310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_InputGroup_Event::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  google::protobuf::internal *v8;
  const char *v9;
  std::string *v10;
  protobuf::Intelligence_InputGroup_Interjection *v11;
  std::string::value_type *v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  std::string **v22;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v23, *((_DWORD *)this + 23));
  result = v23;
  if ((v5 & 1) == 0)
  {
    v22 = (std::string **)(a1 + 64);
    v7 = (uint64_t *)(a1 + 24);
    while (2)
    {
      v8 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v9) = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v9 = (const char *)(v9 + (*(unsigned __int8 *)v8 << 7) - 128);
        if (*(char *)v8 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v9);
          v23 = result;
          if (!result)
            return result;
          v8 = result;
LABEL_8:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 48);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 48);
              goto LABEL_40;
            case 4u:
              if (v9 != 34)
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 56);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 56), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 56);
              goto LABEL_40;
            case 5u:
              if (v9 != 42)
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) |= 8u;
              v11 = *(protobuf::Intelligence_InputGroup_Interjection **)(a1 + 72);
              if (!v11)
              {
                v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
                *(_QWORD *)(a1 + 72) = v11;
                v8 = v23;
              }
              result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup_Interjection>(this, (uint64_t)v11, v8);
              goto LABEL_47;
            case 6u:
              if (v9 != 50)
                goto LABEL_42;
              result = (google::protobuf::internal *)((char *)v8 - 1);
              break;
            case 7u:
              if (v9 != 58)
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 64);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v22, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v22;
LABEL_40:
              v8 = v23;
LABEL_41:
              result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, (std::string::value_type *)v8, (uint64_t)this);
              goto LABEL_47;
            default:
LABEL_42:
              if ((_DWORD)v9)
                v20 = (v9 & 7) == 4;
              else
                v20 = 1;
              if (v20)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                return v8;
              }
              result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), v8, this);
LABEL_47:
              v23 = result;
              if (!result)
                return result;
LABEL_48:
              v21 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v23, *((_DWORD *)this + 23));
              result = v23;
              if (v21)
                return result;
              continue;
          }
          while (1)
          {
            v12 = (char *)result + 1;
            v23 = (google::protobuf::internal *)((char *)result + 1);
            v13 = *(int **)(a1 + 40);
            if (!v13)
              break;
            v14 = *(int *)(a1 + 32);
            v15 = *v13;
            if ((int)v14 >= *v13)
            {
              if (v15 == *(_DWORD *)(a1 + 36))
              {
LABEL_26:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v15 + 1);
                v13 = *(int **)(a1 + 40);
                v15 = *v13;
              }
              *v13 = v15 + 1;
              v17 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v17 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v18 = *(_QWORD *)(a1 + 40);
              v19 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = AlignedAndAddCleanup;
              v12 = (std::string::value_type *)v23;
              goto LABEL_33;
            }
            *(_DWORD *)(a1 + 32) = v14 + 1;
            AlignedAndAddCleanup = *(std::string **)&v13[2 * v14 + 2];
LABEL_33:
            result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v12, (uint64_t)this);
            v23 = result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 50)
              goto LABEL_48;
          }
          v15 = *(_DWORD *)(a1 + 36);
          goto LABEL_26;
        }
        v8 = (google::protobuf::internal *)((char *)result + 2);
      }
      break;
    }
    v23 = v8;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_InputGroup_Event::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup_Event *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  protobuf::Intelligence_InputGroup_Interjection *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  uint64_t v15;
  int64_t v16;
  const void *v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0)
        goto LABEL_17;
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 7), v4);
  if ((v6 & 8) == 0)
    goto LABEL_17;
LABEL_7:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 9);
  *v4 = 42;
  v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    v10 = v8 >> 7;
    if (v8 >> 14)
    {
      v9 = v4 + 3;
      do
      {
        *(v9 - 1) = v10 | 0x80;
        v11 = v10 >> 7;
        ++v9;
        v12 = v10 >> 14;
        v10 >>= 7;
      }
      while (v12);
      *(v9 - 1) = v11;
    }
    else
    {
      v4[2] = v10;
      v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    v9 = v4 + 2;
  }
  v4 = (char *)protobuf::Intelligence_InputGroup_Interjection::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
LABEL_17:
  v13 = *((_DWORD *)this + 8);
  if (v13 >= 1)
  {
    for (i = 0; v13 != i; ++i)
    {
      v15 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v15 + 23) < 0)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16 > 127)
          goto LABEL_29;
      }
      else
      {
        v16 = *(unsigned __int8 *)(v15 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v16)
      {
        *v4 = 50;
        v4[1] = v16;
        if (*(char *)(v15 + 23) >= 0)
          v17 = (const void *)v15;
        else
          v17 = *(const void **)v15;
        memcpy(v4 + 2, v17, v16);
        v4 += v16 + 2;
        continue;
      }
LABEL_29:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 6, v15, v4);
    }
  }
  if ((v6 & 4) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 8), v4);
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) == 0)
    return (unsigned __int8 *)v4;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 23) < 0)
  {
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
  }
  else
  {
    LODWORD(v21) = *(unsigned __int8 *)(v20 + 23);
    v22 = (void *)v20;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v21)
  {
    v23 = (int)v21;
    memcpy(v4, v22, (int)v21);
    v4 += v23;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v22, v21, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_InputGroup_Event::ByteSizeLong(protobuf::Intelligence_InputGroup_Event *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if ((v7 & 0xF) == 0)
    goto LABEL_14;
  if ((v7 & 1) == 0)
  {
    if ((v7 & 2) == 0)
      goto LABEL_11;
LABEL_19:
    v14 = *((_QWORD *)this + 7);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 4) == 0)
    {
LABEL_12:
      if ((v7 & 8) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    goto LABEL_22;
  }
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 2) != 0)
    goto LABEL_19;
LABEL_11:
  if ((v7 & 4) == 0)
    goto LABEL_12;
LABEL_22:
  v17 = *((_QWORD *)this + 8);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v4 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 8) != 0)
  {
LABEL_13:
    v8 = protobuf::Intelligence_InputGroup_Interjection::ByteSizeLong(*((protobuf::Intelligence_InputGroup_Interjection **)this
                                                                      + 9));
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_14:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v20 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v20 + 23) < 0)
      v21 = *(_QWORD *)(v20 + 8);
    else
      v21 = *(unsigned __int8 *)(v20 + 23);
    v4 += v21;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_InputGroup_Event::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup_Event *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup_Event::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup_Event::MergeFrom(protobuf::Intelligence_InputGroup_Event *this, const protobuf::Intelligence_InputGroup_Event *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  protobuf::Intelligence_InputGroup_Interjection *v13;
  const protobuf::Intelligence_InputGroup_Interjection *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 5721);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  return;
LABEL_22:
                *((_DWORD *)this + 4) |= 8u;
                v13 = (protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)this + 9);
                if (!v13)
                {
                  v13 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
                  *((_QWORD *)this + 9) = v13;
                }
                if (*((_QWORD *)a2 + 9))
                  v14 = (const protobuf::Intelligence_InputGroup_Interjection *)*((_QWORD *)a2 + 9);
                else
                  v14 = (const protobuf::Intelligence_InputGroup_Interjection *)&protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
                protobuf::Intelligence_InputGroup_Interjection::MergeFrom(v13, v14);
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            return;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF22CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Event::CopyFrom(protobuf::Intelligence_InputGroup_Event *this, const protobuf::Intelligence_InputGroup_Event *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup_Event::Clear(this);
    protobuf::Intelligence_InputGroup_Event::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup_Event::IsInitialized(protobuf::Intelligence_InputGroup_Event *this)
{
  return 1;
}

void protobuf::Intelligence_InputGroup_Event::InternalSwap(protobuf::Intelligence_InputGroup_Event *this, protobuf::Intelligence_InputGroup_Event *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v32;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_Event *)((char *)this + 24), (protobuf::Intelligence_InputGroup_Event *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v31;
}

_QWORD *protobuf::Intelligence_InputGroup_Event::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup.Event");
}

protobuf::Intelligence_InputGroup_Fallback *protobuf::Intelligence_InputGroup_Fallback::Intelligence_InputGroup_Fallback(protobuf::Intelligence_InputGroup_Fallback *this)
{
  *(_QWORD *)this = &off_24F5411F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_Intelligence_InputGroup_Fallback_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Fallback_intelligence_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF23000(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Fallback *protobuf::Intelligence_InputGroup_Fallback::Intelligence_InputGroup_Fallback(protobuf::Intelligence_InputGroup_Fallback *this, const protobuf::Intelligence_InputGroup_Fallback *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F5411F8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v6);
  }
  return this;
}

void sub_22AF230F0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Fallback::~Intelligence_InputGroup_Fallback(protobuf::Intelligence_InputGroup_Fallback *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F5411F8;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup_Fallback::~Intelligence_InputGroup_Fallback(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup_Fallback::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup_Fallback::default_instance(protobuf::Intelligence_InputGroup_Fallback *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_Fallback_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_Fallback_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_Fallback_default_instance_;
}

void protobuf::Intelligence_InputGroup_Fallback::Clear(protobuf::Intelligence_InputGroup_Fallback *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 9);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_InputGroup_Fallback *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

std::string::value_type *protobuf::Intelligence_InputGroup_Fallback::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  uint64_t *v8;
  std::string::value_type *v9;
  const char *v10;
  unsigned int v11;
  std::string::value_type *v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  int v22;
  std::string::value_type *v23;
  int *v24;
  uint64_t v25;
  int v26;
  std::string *v27;
  google::protobuf::internal::ArenaImpl *v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::internal *v31;

  v31 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v31, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v31;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 48);
    v8 = (uint64_t *)(a1 + 24);
    while (1)
    {
      v9 = result + 1;
      LODWORD(v10) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_7;
      v10 = (const char *)(v10 + (*v9 << 7) - 128);
      if ((*v9 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v10);
      v31 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v9 = result;
LABEL_8:
      v11 = v10 >> 3;
      if (v10 >> 3 == 5)
      {
        if (v10 != 42)
          goto LABEL_14;
        result = v9 - 1;
        while (2)
        {
          v13 = result + 1;
          v31 = (google::protobuf::internal *)(result + 1);
          v14 = *(int **)(a1 + 64);
          if (v14)
          {
            v15 = *(int *)(a1 + 56);
            v16 = *v14;
            if ((int)v15 < *v14)
            {
              *(_DWORD *)(a1 + 56) = v15 + 1;
              AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
              goto LABEL_31;
            }
            if (v16 == *(_DWORD *)(a1 + 60))
            {
LABEL_24:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v16 + 1);
              v14 = *(int **)(a1 + 64);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v18 = (google::protobuf::internal::ArenaImpl *)*v7;
            if (*v7)
            {
              if (*((_QWORD *)v18 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v19 = *(_QWORD *)(a1 + 64);
            v20 = *(int *)(a1 + 56);
            *(_DWORD *)(a1 + 56) = v20 + 1;
            *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
            v13 = (std::string::value_type *)v31;
LABEL_31:
            result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)this);
            v31 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 42)
              goto LABEL_40;
            continue;
          }
          break;
        }
        v16 = *(_DWORD *)(a1 + 60);
        goto LABEL_24;
      }
      if (v11 != 2)
      {
        if (v11 != 1 || v10 != 10)
          goto LABEL_14;
        result = v9 - 1;
        while (1)
        {
          v23 = result + 1;
          v31 = (google::protobuf::internal *)(result + 1);
          v24 = *(int **)(a1 + 40);
          if (!v24)
            break;
          v25 = *(int *)(a1 + 32);
          v26 = *v24;
          if ((int)v25 >= *v24)
          {
            if (v26 == *(_DWORD *)(a1 + 36))
            {
LABEL_48:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v26 + 1);
              v24 = *(int **)(a1 + 40);
              v26 = *v24;
            }
            *v24 = v26 + 1;
            v28 = (google::protobuf::internal::ArenaImpl *)*v8;
            if (*v8)
            {
              if (*((_QWORD *)v28 + 14))
              v27 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v28, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v27 = (std::string *)operator new();
            }
            v27->__r_.__value_.__r.__words[0] = 0;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v29 = *(_QWORD *)(a1 + 40);
            v30 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v30 + 1;
            *(_QWORD *)(v29 + 8 * v30 + 8) = v27;
            v23 = (std::string::value_type *)v31;
            goto LABEL_55;
          }
          *(_DWORD *)(a1 + 32) = v25 + 1;
          v27 = *(std::string **)&v24[2 * v25 + 2];
LABEL_55:
          result = google::protobuf::internal::InlineGreedyStringParser(v27, v23, (uint64_t)this);
          v31 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          if (*(_QWORD *)this <= (unint64_t)result || *result != 10)
            goto LABEL_40;
        }
        v26 = *(_DWORD *)(a1 + 36);
        goto LABEL_48;
      }
      if (v10 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v21 = *(std::string **)(a1 + 72);
        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v21 = *(std::string **)(a1 + 72);
          v9 = (std::string::value_type *)v31;
        }
        result = google::protobuf::internal::InlineGreedyStringParser(v21, v9, (uint64_t)this);
        goto LABEL_39;
      }
LABEL_14:
      if (!(_DWORD)v10 || (v10 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v10 - 1;
        return v9;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v10, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v9, this);
LABEL_39:
      v31 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_40:
      v22 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v31, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v31;
      if (v22)
        return result;
    }
    v9 = result + 2;
LABEL_7:
    v31 = (google::protobuf::internal *)v9;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_InputGroup_Fallback::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup_Fallback *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  int j;
  uint64_t v13;
  int64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, a2);
    }
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 9), a2);
  v11 = *((_DWORD *)this + 14);
  if (v11 >= 1)
  {
    for (j = 0; v11 != j; ++j)
    {
      v13 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v13 + 23) < 0)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14 > 127)
          goto LABEL_28;
      }
      else
      {
        v14 = *(unsigned __int8 *)(v13 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v14)
      {
        *a2 = 42;
        a2[1] = v14;
        if (*(char *)(v13 + 23) >= 0)
          v15 = (const void *)v13;
        else
          v15 = *(const void **)v13;
        memcpy(a2 + 2, v15, v14);
        a2 += v14 + 2;
        continue;
      }
LABEL_28:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 5, v13, a2);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return (unsigned __int8 *)a2;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(a2, v20, (int)v19);
    a2 += v21;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)a2);
}

uint64_t protobuf::Intelligence_InputGroup_Fallback::ByteSizeLong(protobuf::Intelligence_InputGroup_Fallback *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((unsigned int *)this + 14);
  v8 = v4 + v7;
  if ((int)v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v9);
      v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v10 + 8);
      v8 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while ((_DWORD)v7 != v9);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v12 = *((_QWORD *)this + 9);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    v8 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v8 += v18;
  }
  *((_DWORD *)this + 5) = v8;
  return v8;
}

void protobuf::Intelligence_InputGroup_Fallback::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup_Fallback *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup_Fallback::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup_Fallback::MergeFrom(protobuf::Intelligence_InputGroup_Fallback *this, const protobuf::Intelligence_InputGroup_Fallback *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 5988);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 9);
    v7 = (std::string **)((char *)this + 72);
    v6 = v8;
    *((_DWORD *)v7 - 14) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 9);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF23B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_Fallback::CopyFrom(protobuf::Intelligence_InputGroup_Fallback *this, const protobuf::Intelligence_InputGroup_Fallback *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup_Fallback::Clear(this);
    protobuf::Intelligence_InputGroup_Fallback::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup_Fallback::IsInitialized(protobuf::Intelligence_InputGroup_Fallback *this)
{
  return 1;
}

__n128 protobuf::Intelligence_InputGroup_Fallback::InternalSwap(protobuf::Intelligence_InputGroup_Fallback *this, protobuf::Intelligence_InputGroup_Fallback *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_Fallback *)((char *)this + 24), (protobuf::Intelligence_InputGroup_Fallback *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_Fallback *)((char *)this + 48), (protobuf::Intelligence_InputGroup_Fallback *)((char *)a2 + 48));
  v16 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (std::string **)((char *)this + 72);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 72);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

_QWORD *protobuf::Intelligence_InputGroup_Fallback::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup.Fallback");
}

protobuf::Intelligence_InputGroup_LegacyEvent *protobuf::Intelligence_InputGroup_LegacyEvent::Intelligence_InputGroup_LegacyEvent(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541288;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_InputGroup_LegacyEvent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_LegacyEvent_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF23D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_LegacyEvent *protobuf::Intelligence_InputGroup_LegacyEvent::Intelligence_InputGroup_LegacyEvent(protobuf::Intelligence_InputGroup_LegacyEvent *this, const protobuf::Intelligence_InputGroup_LegacyEvent *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  *(_QWORD *)this = &off_24F541288;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
  }
  return this;
}

void sub_22AF23E5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_LegacyEvent::~Intelligence_InputGroup_LegacyEvent(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_24F541288;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup_LegacyEvent::~Intelligence_InputGroup_LegacyEvent(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup_LegacyEvent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup_LegacyEvent::default_instance(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_LegacyEvent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_LegacyEvent_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_LegacyEvent_default_instance_;
}

void protobuf::Intelligence_InputGroup_LegacyEvent::Clear(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArenaLite *v6;
  char v7;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_17;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v5 = *((_QWORD *)this + 8);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v4 = *((_QWORD *)this + 7);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 23) = 0;
  if ((v2 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v7 = *((_BYTE *)this + 8);
  v6 = (protobuf::Intelligence_InputGroup_LegacyEvent *)((char *)this + 8);
  *((_DWORD *)v6 + 2) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
}

std::string::value_type *protobuf::Intelligence_InputGroup_LegacyEvent::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  std::string::value_type *v8;
  const char *v9;
  std::string *v10;
  std::string::value_type *v11;
  int *v12;
  uint64_t v13;
  int v14;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  std::string **v21;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v22, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v22;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 24);
    v21 = (std::string **)(a1 + 64);
    while (2)
    {
      v8 = result + 1;
      LODWORD(v9) = *result;
      if (*result < 0)
      {
        v9 = (const char *)(v9 + (*v8 << 7) - 128);
        if (*v8 < 0)
        {
          result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v9);
          v22 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          v8 = result;
LABEL_8:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_38;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 48);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 48);
              goto LABEL_18;
            case 2u:
              if (v9 != 18)
                goto LABEL_38;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 56);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 56), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 56);
              goto LABEL_18;
            case 3u:
              if (v9 != 26)
                goto LABEL_38;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 64);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v21, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v21;
LABEL_18:
              v8 = (std::string::value_type *)v22;
LABEL_19:
              result = google::protobuf::internal::InlineGreedyStringParser(v10, v8, (uint64_t)this);
              goto LABEL_43;
            case 4u:
              if (v9 != 34)
                goto LABEL_38;
              result = v8 - 1;
              break;
            default:
LABEL_38:
              if ((_DWORD)v9)
                v19 = (v9 & 7) == 4;
              else
                v19 = 1;
              if (v19)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                return v8;
              }
              result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v8, this);
LABEL_43:
              v22 = (google::protobuf::internal *)result;
              if (!result)
                return result;
LABEL_44:
              v20 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v22, *((_DWORD *)this + 23));
              result = (std::string::value_type *)v22;
              if (v20)
                return result;
              continue;
          }
          while (1)
          {
            v11 = result + 1;
            v22 = (google::protobuf::internal *)(result + 1);
            v12 = *(int **)(a1 + 40);
            if (!v12)
              break;
            v13 = *(int *)(a1 + 32);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 36))
              {
LABEL_27:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
                v12 = *(int **)(a1 + 40);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v16 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v16 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v16, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v17 = *(_QWORD *)(a1 + 40);
              v18 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v18 + 1;
              *(_QWORD *)(v17 + 8 * v18 + 8) = AlignedAndAddCleanup;
              v11 = (std::string::value_type *)v22;
              goto LABEL_34;
            }
            *(_DWORD *)(a1 + 32) = v13 + 1;
            AlignedAndAddCleanup = *(std::string **)&v12[2 * v13 + 2];
LABEL_34:
            result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v11, (uint64_t)this);
            v22 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 34)
              goto LABEL_44;
          }
          v14 = *(_DWORD *)(a1 + 36);
          goto LABEL_27;
        }
        v8 = result + 2;
      }
      break;
    }
    v22 = (google::protobuf::internal *)v8;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_InputGroup_LegacyEvent::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup_LegacyEvent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 8), v4);
LABEL_5:
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 > 127)
          goto LABEL_17;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v10)
      {
        *v4 = 34;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0)
          v11 = (const void *)v9;
        else
          v11 = *(const void **)v9;
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_17:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 4, v9, v4);
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
    return (unsigned __int8 *)v4;
  v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 23) < 0)
  {
    v16 = *(void **)v14;
    v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
    v16 = (void *)v14;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v15)
  {
    v17 = (int)v15;
    memcpy(v4, v16, (int)v15);
    v4 += v17;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v15, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_InputGroup_LegacyEvent::ByteSizeLong(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if ((v7 & 7) != 0)
  {
    if ((v7 & 1) != 0)
    {
      v13 = *((_QWORD *)this + 6);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = *(_QWORD *)(v13 + 8);
      if ((v14 & 0x80u) == 0)
        v15 = v14;
      v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v7 & 2) == 0)
      {
LABEL_11:
        if ((v7 & 4) == 0)
          goto LABEL_15;
        goto LABEL_12;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_11;
    }
    v16 = *((_QWORD *)this + 7);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v18 = v17;
    v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 4) != 0)
    {
LABEL_12:
      v8 = *((_QWORD *)this + 8);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v10 = v9;
      v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
LABEL_15:
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v19 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v19 + 23) < 0)
      v20 = *(_QWORD *)(v19 + 8);
    else
      v20 = *(unsigned __int8 *)(v19 + 23);
    v4 += v20;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_InputGroup_LegacyEvent::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup_LegacyEvent *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup_LegacyEvent::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup_LegacyEvent::MergeFrom(protobuf::Intelligence_InputGroup_LegacyEvent *this, const protobuf::Intelligence_InputGroup_LegacyEvent *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 6278);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 7);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 7);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v13 = (std::string *)*((_QWORD *)this + 8);
            v12 = (std::string **)((char *)this + 64);
            v11 = v13;
            *((_DWORD *)v12 - 12) |= 4u;
            v14 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v13 != v14)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)v14);
              else
                std::string::operator=(v11, v14);
            }
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF24920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup_LegacyEvent::CopyFrom(protobuf::Intelligence_InputGroup_LegacyEvent *this, const protobuf::Intelligence_InputGroup_LegacyEvent *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup_LegacyEvent::Clear(this);
    protobuf::Intelligence_InputGroup_LegacyEvent::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup_LegacyEvent::IsInitialized(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  return 1;
}

__n128 protobuf::Intelligence_InputGroup_LegacyEvent::InternalSwap(protobuf::Intelligence_InputGroup_LegacyEvent *this, protobuf::Intelligence_InputGroup_LegacyEvent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::string **v24;
  std::string *v25;
  uint64_t *v26;
  std::string **v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t v31;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v31;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup_LegacyEvent *)((char *)this + 24), (protobuf::Intelligence_InputGroup_LegacyEvent *)((char *)a2 + 24));
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  result = *(__n128 *)v19;
  v23 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v23;
  *(__n128 *)v21 = result;
  v21[2] = v22;
LABEL_20:
  v26 = (uint64_t *)*((_QWORD *)this + 8);
  v24 = (std::string **)((char *)this + 64);
  v25 = (std::string *)v26;
  v27 = (std::string **)((char *)a2 + 64);
  if (v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v27 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v24, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = *v24;
  }
  v28 = *v27;
  if (*v27 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v27, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v28 = *v27;
  }
  v29 = v25->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v25->__r_.__value_.__l.__data_;
  v30 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v25->__r_.__value_.__r.__words[2] = v30;
  *(__n128 *)&v28->__r_.__value_.__l.__data_ = result;
  v28->__r_.__value_.__r.__words[2] = v29;
  return result;
}

_QWORD *protobuf::Intelligence_InputGroup_LegacyEvent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup.LegacyEvent");
}

protobuf::Intelligence_InputGroup *protobuf::Intelligence_InputGroup::Intelligence_InputGroup(protobuf::Intelligence_InputGroup *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541318;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  if (atomic_load(scc_info_Intelligence_InputGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_intelligence_2eproto);
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 42) = 0;
  return this;
}

void sub_22AF24C5C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 15));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2 + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 9));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 6));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 3));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup *protobuf::Intelligence_InputGroup::Intelligence_InputGroup(protobuf::Intelligence_InputGroup *this, const protobuf::Intelligence_InputGroup *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  *(_QWORD *)this = &off_24F541318;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 12, (uint64_t)a2 + 96);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 20);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v9);
  }
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  return this;
}

void sub_22AF24E10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::RepeatedPtrFieldBase *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::ArenaImpl **v5;
  google::protobuf::internal::ArenaImpl **v6;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup::~Intelligence_InputGroup(protobuf::Intelligence_InputGroup *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_24F541318;
  v2 = *((_QWORD *)this + 18);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 19);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 20);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_InputGroup *)((char *)this + 120));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_InputGroup *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_InputGroup *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_InputGroup *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_InputGroup::~Intelligence_InputGroup(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_InputGroup::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_InputGroup::default_instance(protobuf::Intelligence_InputGroup *this)
{
  if (atomic_load(scc_info_Intelligence_InputGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_InputGroup_intelligence_2eproto);
  return &protobuf::_Intelligence_InputGroup_default_instance_;
}

void protobuf::Intelligence_InputGroup::Clear(protobuf::Intelligence_InputGroup *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArenaLite *v6;
  char v7;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>((uint64_t)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>((uint64_t)this + 120);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_17;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 18);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v5 = *((_QWORD *)this + 20);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v4 = *((_QWORD *)this + 19);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 23) = 0;
  if ((v2 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v7 = *((_BYTE *)this + 8);
  v6 = (protobuf::Intelligence_InputGroup *)((char *)this + 8);
  *((_DWORD *)v6 + 40) = 0;
  *((_DWORD *)v6 + 2) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
}

google::protobuf::internal *protobuf::Intelligence_InputGroup::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v7;
  std::string *v8;
  std::string **v9;
  std::string::value_type *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  protobuf::Intelligence_InputGroup_Intent *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  std::string::value_type *v28;
  google::protobuf::internal *v29;
  int *v30;
  uint64_t v31;
  int v32;
  protobuf::Intelligence_InputGroup_Fallback *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  char *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  std::string::value_type *v45;
  google::protobuf::internal *v46;
  int *v47;
  uint64_t v48;
  int v49;
  protobuf::Intelligence_InputGroup_LegacyEvent *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  char *v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  google::protobuf::internal *v62;
  unint64_t v63;
  int v64;
  google::protobuf::internal *v65;
  unint64_t v66;
  int v67;
  google::protobuf::internal *v68;
  unint64_t v69;
  int v70;
  google::protobuf::internal *v71;
  char *v72;
  google::protobuf::internal *v73;
  int *v74;
  uint64_t v75;
  int v76;
  protobuf::Intelligence_KeyValueParameter *v77;
  uint64_t v78;
  uint64_t v79;
  google::protobuf::internal *v80;
  google::protobuf::internal *v81;
  int *v82;
  uint64_t v83;
  int v84;
  protobuf::Intelligence_InputGroup_Event *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  char *v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  google::protobuf::internal *v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  google::protobuf::internal *v101;
  uint64_t v102;
  google::protobuf::internal *v103;
  uint64_t v104;
  google::protobuf::internal *v105;
  uint64_t v106;
  google::protobuf::internal *v107;
  uint64_t v108;
  google::protobuf::internal *v110;

  v110 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v110, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v110 + 1);
      LODWORD(v7) = *(unsigned __int8 *)v110;
      if (*(char *)v110 < 0)
      {
        v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v110, v7);
          v110 = TagFallback;
          if (!TagFallback)
            goto LABEL_146;
LABEL_7:
          switch(v7 >> 3)
          {
            case 1u:
              if (v7 != 10)
                goto LABEL_130;
              *(_DWORD *)(a1 + 16) |= 1u;
              v8 = *(std::string **)(a1 + 144);
              if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_92;
              v9 = (std::string **)(a1 + 144);
              goto LABEL_91;
            case 2u:
              if (v7 != 18)
                goto LABEL_130;
              v10 = (char *)TagFallback - 1;
              while (2)
              {
                v11 = (google::protobuf::internal *)(v10 + 1);
                v110 = v11;
                v12 = *(int **)(a1 + 40);
                if (!v12)
                {
                  v14 = *(_DWORD *)(a1 + 36);
LABEL_20:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
                  v12 = *(int **)(a1 + 40);
                  v14 = *v12;
                  goto LABEL_21;
                }
                v13 = *(int *)(a1 + 32);
                v14 = *v12;
                if ((int)v13 < *v12)
                {
                  *(_DWORD *)(a1 + 32) = v13 + 1;
                  v15 = *(protobuf::Intelligence_InputGroup_Intent **)&v12[2 * v13 + 2];
                  goto LABEL_22;
                }
                if (v14 == *(_DWORD *)(a1 + 36))
                  goto LABEL_20;
LABEL_21:
                *v12 = v14 + 1;
                v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                v16 = *(_QWORD *)(a1 + 40);
                v17 = *(int *)(a1 + 32);
                *(_DWORD *)(a1 + 32) = v17 + 1;
                *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
                v11 = v110;
LABEL_22:
                v18 = *(unsigned __int8 *)v11;
                if (*(char *)v11 < 0)
                {
                  SizeFallback = google::protobuf::internal::ReadSizeFallback(v11, (const char *)*(unsigned __int8 *)v11);
                  if (!SizeFallback)
                    goto LABEL_145;
                  v19 = SizeFallback;
                  v18 = v21;
                }
                else
                {
                  v19 = (char *)v11 + 1;
                }
                v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v19, v18);
                v23 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v23--, 1);
                *((_DWORD *)this + 22) = v23;
                if (v23 < 0 == v24)
                {
                  v25 = v22;
                  v10 = protobuf::Intelligence_InputGroup_Intent::_InternalParse((uint64_t)v15, (google::protobuf::internal *)v19, this);
                  if (v10)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v26 = *((_DWORD *)this + 7) + v25;
                      *((_DWORD *)this + 7) = v26;
                      v27 = *((_QWORD *)this + 1) + (v26 & (v26 >> 31));
                      *(_QWORD *)this = v27;
                      v110 = (google::protobuf::internal *)v10;
                      if (v27 <= (unint64_t)v10 || *v10 != 18)
                        goto LABEL_136;
                      continue;
                    }
                  }
                }
                goto LABEL_145;
              }
            case 3u:
              if (v7 != 26)
                goto LABEL_130;
              v28 = (char *)TagFallback - 1;
              while (2)
              {
                v29 = (google::protobuf::internal *)(v28 + 1);
                v110 = v29;
                v30 = *(int **)(a1 + 64);
                if (!v30)
                {
                  v32 = *(_DWORD *)(a1 + 60);
LABEL_39:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v32 + 1);
                  v30 = *(int **)(a1 + 64);
                  v32 = *v30;
                  goto LABEL_40;
                }
                v31 = *(int *)(a1 + 56);
                v32 = *v30;
                if ((int)v31 < *v30)
                {
                  *(_DWORD *)(a1 + 56) = v31 + 1;
                  v33 = *(protobuf::Intelligence_InputGroup_Fallback **)&v30[2 * v31 + 2];
                  goto LABEL_41;
                }
                if (v32 == *(_DWORD *)(a1 + 60))
                  goto LABEL_39;
LABEL_40:
                *v30 = v32 + 1;
                v33 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
                v34 = *(_QWORD *)(a1 + 64);
                v35 = *(int *)(a1 + 56);
                *(_DWORD *)(a1 + 56) = v35 + 1;
                *(_QWORD *)(v34 + 8 * v35 + 8) = v33;
                v29 = v110;
LABEL_41:
                v36 = *(unsigned __int8 *)v29;
                if (*(char *)v29 < 0)
                {
                  v38 = google::protobuf::internal::ReadSizeFallback(v29, (const char *)*(unsigned __int8 *)v29);
                  if (!v38)
                    goto LABEL_145;
                  v37 = v38;
                  v36 = v39;
                }
                else
                {
                  v37 = (char *)v29 + 1;
                }
                v40 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v37, v36);
                v41 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v41--, 1);
                *((_DWORD *)this + 22) = v41;
                if (v41 < 0 == v24)
                {
                  v42 = v40;
                  v28 = protobuf::Intelligence_InputGroup_Fallback::_InternalParse((uint64_t)v33, (google::protobuf::internal *)v37, this);
                  if (v28)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v43 = *((_DWORD *)this + 7) + v42;
                      *((_DWORD *)this + 7) = v43;
                      v44 = *((_QWORD *)this + 1) + (v43 & (v43 >> 31));
                      *(_QWORD *)this = v44;
                      v110 = (google::protobuf::internal *)v28;
                      if (v44 <= (unint64_t)v28 || *v28 != 26)
                        goto LABEL_136;
                      continue;
                    }
                  }
                }
                goto LABEL_145;
              }
            case 4u:
              if (v7 != 34)
                goto LABEL_130;
              v45 = (char *)TagFallback - 1;
              while (2)
              {
                v46 = (google::protobuf::internal *)(v45 + 1);
                v110 = v46;
                v47 = *(int **)(a1 + 88);
                if (!v47)
                {
                  v49 = *(_DWORD *)(a1 + 84);
LABEL_58:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v49 + 1);
                  v47 = *(int **)(a1 + 88);
                  v49 = *v47;
                  goto LABEL_59;
                }
                v48 = *(int *)(a1 + 80);
                v49 = *v47;
                if ((int)v48 < *v47)
                {
                  *(_DWORD *)(a1 + 80) = v48 + 1;
                  v50 = *(protobuf::Intelligence_InputGroup_LegacyEvent **)&v47[2 * v48 + 2];
                  goto LABEL_60;
                }
                if (v49 == *(_DWORD *)(a1 + 84))
                  goto LABEL_58;
LABEL_59:
                *v47 = v49 + 1;
                v50 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(*(google::protobuf::internal::ArenaImpl **)(a1 + 72));
                v51 = *(_QWORD *)(a1 + 88);
                v52 = *(int *)(a1 + 80);
                *(_DWORD *)(a1 + 80) = v52 + 1;
                *(_QWORD *)(v51 + 8 * v52 + 8) = v50;
                v46 = v110;
LABEL_60:
                v53 = *(unsigned __int8 *)v46;
                if (*(char *)v46 < 0)
                {
                  v55 = google::protobuf::internal::ReadSizeFallback(v46, (const char *)*(unsigned __int8 *)v46);
                  if (!v55)
                    goto LABEL_145;
                  v54 = v55;
                  v53 = v56;
                }
                else
                {
                  v54 = (char *)v46 + 1;
                }
                v57 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v54, v53);
                v58 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v58--, 1);
                *((_DWORD *)this + 22) = v58;
                if (v58 < 0 == v24)
                {
                  v59 = v57;
                  v45 = protobuf::Intelligence_InputGroup_LegacyEvent::_InternalParse((uint64_t)v50, (google::protobuf::internal *)v54, this);
                  if (v45)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v60 = *((_DWORD *)this + 7) + v59;
                      *((_DWORD *)this + 7) = v60;
                      v61 = *((_QWORD *)this + 1) + (v60 & (v60 >> 31));
                      *(_QWORD *)this = v61;
                      v110 = (google::protobuf::internal *)v45;
                      if (v61 <= (unint64_t)v45 || *v45 != 34)
                        goto LABEL_136;
                      continue;
                    }
                  }
                }
                goto LABEL_145;
              }
            case 5u:
              if (v7 != 40)
                goto LABEL_130;
              v5 |= 8u;
              v62 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v63 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_74;
              v64 = *(char *)v62;
              v63 = v63 + (v64 << 7) - 128;
              if (v64 < 0)
              {
                v101 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v63);
                v110 = v101;
                *(_BYTE *)(a1 + 168) = v102 != 0;
                if (!v101)
                  goto LABEL_145;
              }
              else
              {
                v62 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_74:
                v110 = v62;
                *(_BYTE *)(a1 + 168) = v63 != 0;
              }
              goto LABEL_136;
            case 6u:
              if (v7 != 50)
                goto LABEL_130;
              *(_DWORD *)(a1 + 16) |= 2u;
              v8 = *(std::string **)(a1 + 152);
              if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_92;
              v9 = (std::string **)(a1 + 152);
              goto LABEL_91;
            case 7u:
              if (v7 != 56)
                goto LABEL_130;
              v5 |= 0x10u;
              v65 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v66 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_82;
              v67 = *(char *)v65;
              v66 = v66 + (v67 << 7) - 128;
              if (v67 < 0)
              {
                v103 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v66);
                v110 = v103;
                *(_BYTE *)(a1 + 169) = v104 != 0;
                if (!v103)
                  goto LABEL_145;
              }
              else
              {
                v65 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_82:
                v110 = v65;
                *(_BYTE *)(a1 + 169) = v66 != 0;
              }
              goto LABEL_136;
            case 8u:
              if (v7 != 64)
                goto LABEL_130;
              v5 |= 0x40u;
              v68 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v69 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_87;
              v70 = *(char *)v68;
              v69 = v69 + (v70 << 7) - 128;
              if (v70 < 0)
              {
                v105 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v69);
                v110 = v105;
                *(_BYTE *)(a1 + 171) = v106 != 0;
                if (!v105)
                  goto LABEL_145;
              }
              else
              {
                v68 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_87:
                v110 = v68;
                *(_BYTE *)(a1 + 171) = v69 != 0;
              }
              goto LABEL_136;
            case 9u:
              if (v7 != 74)
                goto LABEL_130;
              *(_DWORD *)(a1 + 16) |= 4u;
              v8 = *(std::string **)(a1 + 160);
              if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_92;
              v9 = (std::string **)(a1 + 160);
LABEL_91:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v8 = *v9;
              TagFallback = v110;
LABEL_92:
              v71 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v8, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_135;
            case 0xAu:
              if (v7 != 82)
                goto LABEL_130;
              v72 = (char *)TagFallback - 1;
              break;
            case 0xBu:
              if (v7 != 90)
                goto LABEL_130;
              v80 = (google::protobuf::internal *)((char *)TagFallback - 1);
              while (2)
              {
                v81 = (google::protobuf::internal *)((char *)v80 + 1);
                v110 = v81;
                v82 = *(int **)(a1 + 136);
                if (v82)
                {
                  v83 = *(int *)(a1 + 128);
                  v84 = *v82;
                  if ((int)v83 < *v82)
                  {
                    *(_DWORD *)(a1 + 128) = v83 + 1;
                    v85 = *(protobuf::Intelligence_InputGroup_Event **)&v82[2 * v83 + 2];
                    goto LABEL_115;
                  }
                  if (v84 != *(_DWORD *)(a1 + 132))
                  {
LABEL_114:
                    *v82 = v84 + 1;
                    v85 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(*(google::protobuf::internal::ArenaImpl **)(a1 + 120));
                    v86 = *(_QWORD *)(a1 + 136);
                    v87 = *(int *)(a1 + 128);
                    *(_DWORD *)(a1 + 128) = v87 + 1;
                    *(_QWORD *)(v86 + 8 * v87 + 8) = v85;
                    v81 = v110;
LABEL_115:
                    v88 = *(unsigned __int8 *)v81;
                    if (*(char *)v81 < 0)
                    {
                      v90 = google::protobuf::internal::ReadSizeFallback(v81, (const char *)*(unsigned __int8 *)v81);
                      if (!v90)
                        goto LABEL_145;
                      v89 = v90;
                      v88 = v91;
                    }
                    else
                    {
                      v89 = (char *)v81 + 1;
                    }
                    v92 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v89, v88);
                    v93 = *((_DWORD *)this + 22);
                    v24 = __OFSUB__(v93--, 1);
                    *((_DWORD *)this + 22) = v93;
                    if (v93 < 0 == v24)
                    {
                      v94 = v92;
                      v80 = protobuf::Intelligence_InputGroup_Event::_InternalParse((uint64_t)v85, (google::protobuf::internal *)v89, this);
                      if (v80)
                      {
                        ++*((_DWORD *)this + 22);
                        if (!*((_DWORD *)this + 20))
                        {
                          v95 = *((_DWORD *)this + 7) + v94;
                          *((_DWORD *)this + 7) = v95;
                          v96 = *((_QWORD *)this + 1) + (v95 & (v95 >> 31));
                          *(_QWORD *)this = v96;
                          v110 = v80;
                          if (v96 <= (unint64_t)v80 || *(_BYTE *)v80 != 90)
                            goto LABEL_136;
                          continue;
                        }
                      }
                    }
LABEL_145:
                    TagFallback = 0;
                    goto LABEL_146;
                  }
                }
                else
                {
                  v84 = *(_DWORD *)(a1 + 132);
                }
                break;
              }
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 120), v84 + 1);
              v82 = *(int **)(a1 + 136);
              v84 = *v82;
              goto LABEL_114;
            case 0xCu:
              if (v7 != 96)
                goto LABEL_130;
              v5 |= 0x20u;
              v97 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v98 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_129;
              v99 = *(char *)v97;
              v98 = v98 + (v99 << 7) - 128;
              if (v99 < 0)
              {
                v107 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v98);
                v110 = v107;
                *(_BYTE *)(a1 + 170) = v108 != 0;
                if (!v107)
                  goto LABEL_145;
              }
              else
              {
                v97 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_129:
                v110 = v97;
                *(_BYTE *)(a1 + 170) = v98 != 0;
              }
              goto LABEL_136;
            default:
LABEL_130:
              if ((_DWORD)v7)
                v100 = (v7 & 7) == 4;
              else
                v100 = 1;
              if (v100)
              {
                *((_DWORD *)this + 20) = (_DWORD)v7 - 1;
                goto LABEL_146;
              }
              v71 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_135:
              v110 = v71;
              if (!v71)
                goto LABEL_145;
LABEL_136:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v110, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v73 = (google::protobuf::internal *)(v72 + 1);
            v110 = (google::protobuf::internal *)(v72 + 1);
            v74 = *(int **)(a1 + 112);
            if (!v74)
              break;
            v75 = *(int *)(a1 + 104);
            v76 = *v74;
            if ((int)v75 >= *v74)
            {
              if (v76 == *(_DWORD *)(a1 + 108))
              {
LABEL_100:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v76 + 1);
                v74 = *(int **)(a1 + 112);
                v76 = *v74;
              }
              *v74 = v76 + 1;
              v77 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 96));
              v78 = *(_QWORD *)(a1 + 112);
              v79 = *(int *)(a1 + 104);
              *(_DWORD *)(a1 + 104) = v79 + 1;
              *(_QWORD *)(v78 + 8 * v79 + 8) = v77;
              v73 = v110;
              goto LABEL_102;
            }
            *(_DWORD *)(a1 + 104) = v75 + 1;
            v77 = *(protobuf::Intelligence_KeyValueParameter **)&v74[2 * v75 + 2];
LABEL_102:
            v72 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v77, v73);
            v110 = (google::protobuf::internal *)v72;
            if (!v72)
              goto LABEL_145;
            if (*(_QWORD *)this <= (unint64_t)v72 || *v72 != 82)
              goto LABEL_136;
          }
          v76 = *(_DWORD *)(a1 + 108);
          goto LABEL_100;
        }
        TagFallback = (google::protobuf::internal *)((char *)v110 + 2);
      }
      break;
    }
    v110 = TagFallback;
    goto LABEL_7;
  }
LABEL_2:
  TagFallback = v110;
LABEL_146:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_InputGroup::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_InputGroup *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_InputGroup_Intent *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  protobuf::Intelligence_InputGroup_Fallback *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int k;
  protobuf::Intelligence_InputGroup_LegacyEvent *v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int m;
  protobuf::Intelligence_KeyValueParameter *v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int n;
  protobuf::Intelligence_InputGroup_Event *v41;
  unsigned int v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  char v50;
  char v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 18), a2);
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_InputGroup_Intent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 18;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup_Intent::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v17 = (protobuf::Intelligence_InputGroup_Fallback *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 26;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = v4 + 3;
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          v19 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v18;
        v19 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup_Fallback::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  v23 = *((_DWORD *)this + 20);
  if (v23)
  {
    for (k = 0; k != v23; ++k)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v25 = (protobuf::Intelligence_InputGroup_LegacyEvent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>((uint64_t)this + 72, k);
      *v4 = 34;
      v26 = *((_DWORD *)v25 + 5);
      if (v26 > 0x7F)
      {
        v4[1] = v26 | 0x80;
        v28 = v26 >> 7;
        if (v26 >> 14)
        {
          v27 = v4 + 3;
          do
          {
            *(v27 - 1) = v28 | 0x80;
            v29 = v28 >> 7;
            ++v27;
            v30 = v28 >> 14;
            v28 >>= 7;
          }
          while (v30);
          *(v27 - 1) = v29;
        }
        else
        {
          v4[2] = v28;
          v27 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v26;
        v27 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup_LegacyEvent::InternalSerializeWithCachedSizesToArray(v25, v27, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v50 = *((_BYTE *)this + 168);
    *v4 = 40;
    v4[1] = v50;
    v4 += 2;
    if ((v6 & 2) == 0)
    {
LABEL_41:
      if ((v6 & 0x10) == 0)
        goto LABEL_42;
      goto LABEL_79;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_41;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 19), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_42:
    if ((v6 & 0x40) == 0)
      goto LABEL_43;
    goto LABEL_82;
  }
LABEL_79:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v51 = *((_BYTE *)this + 169);
  *v4 = 56;
  v4[1] = v51;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_43:
    if ((v6 & 4) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
LABEL_82:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v52 = *((_BYTE *)this + 171);
  *v4 = 64;
  v4[1] = v52;
  v4 += 2;
  if ((v6 & 4) != 0)
LABEL_44:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 20), v4);
LABEL_45:
  v31 = *((_DWORD *)this + 26);
  if (v31)
  {
    for (m = 0; m != v31; ++m)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v33 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 96, m);
      *v4 = 82;
      v34 = *((_DWORD *)v33 + 5);
      if (v34 > 0x7F)
      {
        v4[1] = v34 | 0x80;
        v36 = v34 >> 7;
        if (v34 >> 14)
        {
          v35 = v4 + 3;
          do
          {
            *(v35 - 1) = v36 | 0x80;
            v37 = v36 >> 7;
            ++v35;
            v38 = v36 >> 14;
            v36 >>= 7;
          }
          while (v38);
          *(v35 - 1) = v37;
        }
        else
        {
          v4[2] = v36;
          v35 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v34;
        v35 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v33, v35, a3);
    }
  }
  v39 = *((_DWORD *)this + 32);
  if (v39)
  {
    for (n = 0; n != v39; ++n)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v41 = (protobuf::Intelligence_InputGroup_Event *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>((uint64_t)this + 120, n);
      *v4 = 90;
      v42 = *((_DWORD *)v41 + 5);
      if (v42 > 0x7F)
      {
        v4[1] = v42 | 0x80;
        v44 = v42 >> 7;
        if (v42 >> 14)
        {
          v43 = v4 + 3;
          do
          {
            *(v43 - 1) = v44 | 0x80;
            v45 = v44 >> 7;
            ++v43;
            v46 = v44 >> 14;
            v44 >>= 7;
          }
          while (v46);
          *(v43 - 1) = v45;
        }
        else
        {
          v4[2] = v44;
          v43 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v42;
        v43 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup_Event::InternalSerializeWithCachedSizesToArray(v41, v43, a3);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v47 = *((_BYTE *)this + 170);
    *v4 = 96;
    v4[1] = v47;
    v4 += 2;
  }
  v48 = *((_QWORD *)this + 1);
  if ((v48 & 1) == 0)
    return (unsigned __int8 *)v4;
  v53 = v48 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v53 + 23) < 0)
  {
    v55 = *(void **)v53;
    v54 = *(_QWORD *)(v53 + 8);
  }
  else
  {
    LODWORD(v54) = *(unsigned __int8 *)(v53 + 23);
    v55 = (void *)v53;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v54)
  {
    v56 = (int)v54;
    memcpy(v4, v55, (int)v54);
    v4 += v56;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v55, v54, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_InputGroup::ByteSizeLong(protobuf::Intelligence_InputGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_InputGroup_Intent **v4;
  uint64_t v5;
  protobuf::Intelligence_InputGroup_Intent *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_InputGroup_Fallback **v11;
  uint64_t v12;
  protobuf::Intelligence_InputGroup_Fallback *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  protobuf::Intelligence_InputGroup_LegacyEvent **v18;
  uint64_t v19;
  protobuf::Intelligence_InputGroup_LegacyEvent *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  protobuf::Intelligence_KeyValueParameter **v25;
  uint64_t v26;
  protobuf::Intelligence_KeyValueParameter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  protobuf::Intelligence_InputGroup_Event **v32;
  uint64_t v33;
  protobuf::Intelligence_InputGroup_Event *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_InputGroup_Intent **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_InputGroup_Intent::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_InputGroup_Fallback **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_InputGroup_Fallback::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (protobuf::Intelligence_InputGroup_LegacyEvent **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = protobuf::Intelligence_InputGroup_LegacyEvent::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (protobuf::Intelligence_KeyValueParameter **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((int *)this + 32);
  v30 = v23 + v29;
  v31 = *((_QWORD *)this + 17);
  if (v31)
    v32 = (protobuf::Intelligence_InputGroup_Event **)(v31 + 8);
  else
    v32 = 0;
  if ((_DWORD)v29)
  {
    v33 = 8 * v29;
    do
    {
      v34 = *v32++;
      v35 = protobuf::Intelligence_InputGroup_Event::ByteSizeLong(v34);
      v30 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6);
      v33 -= 8;
    }
    while (v33);
  }
  v36 = *((_DWORD *)this + 4);
  if ((v36 & 0x7F) != 0)
  {
    if ((v36 & 1) != 0)
    {
      v43 = *((_QWORD *)this + 18);
      v44 = *(unsigned __int8 *)(v43 + 23);
      v45 = *(_QWORD *)(v43 + 8);
      if ((v44 & 0x80u) == 0)
        v45 = v44;
      v30 += v45 + ((9 * (__clz(v45 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v36 & 2) == 0)
      {
LABEL_36:
        if ((v36 & 4) == 0)
        {
LABEL_40:
          v40 = v30 + 2;
          if ((v36 & 8) == 0)
            v40 = v30;
          if ((v36 & 0x10) != 0)
            v40 += 2;
          if ((v36 & 0x20) != 0)
            v40 += 2;
          if ((v36 & 0x40) != 0)
            v30 = v40 + 2;
          else
            v30 = v40;
          goto LABEL_49;
        }
LABEL_37:
        v37 = *((_QWORD *)this + 20);
        v38 = *(unsigned __int8 *)(v37 + 23);
        v39 = *(_QWORD *)(v37 + 8);
        if ((v38 & 0x80u) == 0)
          v39 = v38;
        v30 += v39 + ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
        goto LABEL_40;
      }
    }
    else if ((v36 & 2) == 0)
    {
      goto LABEL_36;
    }
    v46 = *((_QWORD *)this + 19);
    v47 = *(unsigned __int8 *)(v46 + 23);
    v48 = *(_QWORD *)(v46 + 8);
    if ((v47 & 0x80u) == 0)
      v48 = v47;
    v30 += v48 + ((9 * (__clz(v48 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v36 & 4) == 0)
      goto LABEL_40;
    goto LABEL_37;
  }
LABEL_49:
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) != 0)
  {
    v49 = v41 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v49 + 23) < 0)
      v50 = *(_QWORD *)(v49 + 8);
    else
      v50 = *(unsigned __int8 *)(v49 + 23);
    v30 += v50;
  }
  *((_DWORD *)this + 5) = v30;
  return v30;
}

void protobuf::Intelligence_InputGroup::CheckTypeAndMergeFrom(protobuf::Intelligence_InputGroup *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_InputGroup::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_InputGroup::MergeFrom(protobuf::Intelligence_InputGroup *this, const protobuf::Intelligence_InputGroup *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 6795);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 12, (uint64_t)a2 + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 18);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 18);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 19);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 19);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 20);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 20);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v12);
                if ((v6 & 8) == 0)
                {
LABEL_22:
                  if ((v6 & 0x10) == 0)
                    goto LABEL_23;
                  goto LABEL_30;
                }
LABEL_29:
                *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
                if ((v6 & 0x10) == 0)
                {
LABEL_23:
                  if ((v6 & 0x20) == 0)
                    goto LABEL_24;
                  goto LABEL_31;
                }
LABEL_30:
                *((_BYTE *)this + 169) = *((_BYTE *)a2 + 169);
                if ((v6 & 0x20) == 0)
                {
LABEL_24:
                  if ((v6 & 0x40) == 0)
                  {
LABEL_26:
                    *((_DWORD *)this + 4) |= v6;
                    return;
                  }
LABEL_25:
                  *((_BYTE *)this + 171) = *((_BYTE *)a2 + 171);
                  goto LABEL_26;
                }
LABEL_31:
                *((_BYTE *)this + 170) = *((_BYTE *)a2 + 170);
                if ((v6 & 0x40) == 0)
                  goto LABEL_26;
                goto LABEL_25;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_22;
          goto LABEL_29;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF265AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_InputGroup::CopyFrom(protobuf::Intelligence_InputGroup *this, const protobuf::Intelligence_InputGroup *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_InputGroup::Clear(this);
    protobuf::Intelligence_InputGroup::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_InputGroup::IsInitialized(protobuf::Intelligence_InputGroup *this)
{
  return 1;
}

void protobuf::Intelligence_InputGroup::InternalSwap(protobuf::Intelligence_InputGroup *this, protobuf::Intelligence_InputGroup *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v35;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup *)((char *)this + 24), (protobuf::Intelligence_InputGroup *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup *)((char *)this + 48), (protobuf::Intelligence_InputGroup *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup *)((char *)this + 72), (protobuf::Intelligence_InputGroup *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup *)((char *)this + 96), (protobuf::Intelligence_InputGroup *)((char *)a2 + 96));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_InputGroup *)((char *)this + 120), (protobuf::Intelligence_InputGroup *)((char *)a2 + 120));
  v13 = (uint64_t *)*((_QWORD *)this + 18);
  v14 = (uint64_t **)((char *)a2 + 144);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 19);
  v20 = (uint64_t **)((char *)a2 + 152);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 20);
  v26 = (uint64_t **)((char *)a2 + 160);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 20);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = *((_BYTE *)this + 168);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a2 + 168) = v31;
  v32 = *((_BYTE *)this + 169);
  *((_BYTE *)this + 169) = *((_BYTE *)a2 + 169);
  *((_BYTE *)a2 + 169) = v32;
  v33 = *((_BYTE *)this + 170);
  *((_BYTE *)this + 170) = *((_BYTE *)a2 + 170);
  *((_BYTE *)a2 + 170) = v33;
  v34 = *((_BYTE *)this + 171);
  *((_BYTE *)this + 171) = *((_BYTE *)a2 + 171);
  *((_BYTE *)a2 + 171) = v34;
}

_QWORD *protobuf::Intelligence_InputGroup::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.InputGroup");
}

protobuf::Intelligence_Activity *protobuf::Intelligence_Activity::Intelligence_Activity(protobuf::Intelligence_Activity *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F5413A8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_Activity_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Activity_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF2693C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Activity *protobuf::Intelligence_Activity::Intelligence_Activity(protobuf::Intelligence_Activity *this, const protobuf::Intelligence_Activity *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  *(_QWORD *)this = &off_24F5413A8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v11);
  }
  return this;
}

void sub_22AF26A88(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Activity::~Intelligence_Activity(protobuf::Intelligence_Activity *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = &off_24F5413A8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 10);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Activity::~Intelligence_Activity(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Activity::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Activity::default_instance(protobuf::Intelligence_Activity *this)
{
  if (atomic_load(scc_info_Intelligence_Activity_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Activity_intelligence_2eproto);
  return &protobuf::_Intelligence_Activity_default_instance_;
}

void protobuf::Intelligence_Activity::Clear(protobuf::Intelligence_Activity *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArenaLite *v8;
  char v9;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x1F) == 0)
    goto LABEL_27;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_12;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_16:
    v5 = *((_QWORD *)this + 8);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_20;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_20;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
LABEL_24:
    v7 = *((_QWORD *)this + 10);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
    goto LABEL_27;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_12:
  v4 = *((_QWORD *)this + 7);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_16;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_16;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_20:
  v6 = *((_QWORD *)this + 9);
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_24;
  }
  *(_BYTE *)v6 = 0;
  *(_BYTE *)(v6 + 23) = 0;
  if ((v2 & 0x10) != 0)
    goto LABEL_24;
LABEL_27:
  v9 = *((_BYTE *)this + 8);
  v8 = (protobuf::Intelligence_Activity *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
}

std::string::value_type *protobuf::Intelligence_Activity::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  std::string::value_type *v8;
  const char *v9;
  std::string *v10;
  std::string **v11;
  std::string::value_type *v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v22, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v22;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 24);
    while (2)
    {
      v8 = result + 1;
      LODWORD(v9) = *result;
      if (*result < 0)
      {
        v9 = (const char *)(v9 + (*v8 << 7) - 128);
        if (*v8 < 0)
        {
          result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v9);
          v22 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          v8 = result;
LABEL_8:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 10)
                goto LABEL_48;
              *(_DWORD *)(a1 + 16) |= 1u;
              v10 = *(std::string **)(a1 + 48);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_44;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 48);
              goto LABEL_43;
            case 2u:
              if (v9 != 18)
                goto LABEL_48;
              *(_DWORD *)(a1 + 16) |= 2u;
              v10 = *(std::string **)(a1 + 56);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_44;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 56), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *(std::string **)(a1 + 56);
              goto LABEL_43;
            case 3u:
              if (v9 != 26)
                goto LABEL_48;
              *(_DWORD *)(a1 + 16) |= 4u;
              v10 = *(std::string **)(a1 + 64);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_44;
              v11 = (std::string **)(a1 + 64);
              goto LABEL_42;
            case 4u:
              if (v9 != 34)
                goto LABEL_48;
              result = v8 - 1;
              break;
            case 5u:
              if (v9 != 42)
                goto LABEL_48;
              *(_DWORD *)(a1 + 16) |= 8u;
              v10 = *(std::string **)(a1 + 72);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_44;
              v11 = (std::string **)(a1 + 72);
              goto LABEL_42;
            case 6u:
              if (v9 != 50)
                goto LABEL_48;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v10 = *(std::string **)(a1 + 80);
              if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_44;
              v11 = (std::string **)(a1 + 80);
LABEL_42:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v10 = *v11;
LABEL_43:
              v8 = (std::string::value_type *)v22;
LABEL_44:
              result = google::protobuf::internal::InlineGreedyStringParser(v10, v8, (uint64_t)this);
              goto LABEL_45;
            default:
LABEL_48:
              if ((_DWORD)v9)
                v21 = (v9 & 7) == 4;
              else
                v21 = 1;
              if (v21)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                return v8;
              }
              result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v8, this);
LABEL_45:
              v22 = (google::protobuf::internal *)result;
              if (!result)
                return result;
LABEL_46:
              v20 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v22, *((_DWORD *)this + 23));
              result = (std::string::value_type *)v22;
              if (v20)
                return result;
              continue;
          }
          while (1)
          {
            v12 = result + 1;
            v22 = (google::protobuf::internal *)(result + 1);
            v13 = *(int **)(a1 + 40);
            if (!v13)
              break;
            v14 = *(int *)(a1 + 32);
            v15 = *v13;
            if ((int)v14 >= *v13)
            {
              if (v15 == *(_DWORD *)(a1 + 36))
              {
LABEL_25:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v15 + 1);
                v13 = *(int **)(a1 + 40);
                v15 = *v13;
              }
              *v13 = v15 + 1;
              v17 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v17 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v18 = *(_QWORD *)(a1 + 40);
              v19 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = AlignedAndAddCleanup;
              v12 = (std::string::value_type *)v22;
              goto LABEL_32;
            }
            *(_DWORD *)(a1 + 32) = v14 + 1;
            AlignedAndAddCleanup = *(std::string **)&v13[2 * v14 + 2];
LABEL_32:
            result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v12, (uint64_t)this);
            v22 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 34)
              goto LABEL_46;
          }
          v15 = *(_DWORD *)(a1 + 36);
          goto LABEL_25;
        }
        v8 = result + 2;
      }
      break;
    }
    v22 = (google::protobuf::internal *)v8;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Activity::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Activity *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  int64_t v10;
  const void *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 8), v4);
LABEL_5:
  v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (i = 0; v7 != i; ++i)
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10 > 127)
          goto LABEL_17;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v10)
      {
        *v4 = 34;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0)
          v11 = (const void *)v9;
        else
          v11 = *(const void **)v9;
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_17:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 4, v9, v4);
    }
  }
  if ((v6 & 8) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 9), v4);
  if ((v6 & 0x10) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 10), v4);
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
    return (unsigned __int8 *)v4;
  v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 23) < 0)
  {
    v16 = *(void **)v14;
    v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
    v16 = (void *)v14;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v15)
  {
    v17 = (int)v15;
    memcpy(v4, v16, (int)v15);
    v4 += v17;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v15, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Activity::ByteSizeLong(protobuf::Intelligence_Activity *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if ((v7 & 0x1F) == 0)
    goto LABEL_17;
  if ((v7 & 1) != 0)
  {
    v13 = *((_QWORD *)this + 6);
    v14 = *(unsigned __int8 *)(v13 + 23);
    v15 = *(_QWORD *)(v13 + 8);
    if ((v14 & 0x80u) == 0)
      v15 = v14;
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
LABEL_25:
      v19 = *((_QWORD *)this + 8);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v21 = *(_QWORD *)(v19 + 8);
      if ((v20 & 0x80u) == 0)
        v21 = v20;
      v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v7 & 8) == 0)
      {
LABEL_13:
        if ((v7 & 0x10) == 0)
          goto LABEL_17;
        goto LABEL_14;
      }
      goto LABEL_28;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  v16 = *((_QWORD *)this + 7);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v18 = v17;
  v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 4) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v7 & 8) == 0)
    goto LABEL_13;
LABEL_28:
  v22 = *((_QWORD *)this + 9);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v4 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x10) != 0)
  {
LABEL_14:
    v8 = *((_QWORD *)this + 10);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v25 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v4 += v26;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_Activity::CheckTypeAndMergeFrom(protobuf::Intelligence_Activity *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Activity::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Activity::MergeFrom(protobuf::Intelligence_Activity *this, const protobuf::Intelligence_Activity *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  std::string **v16;
  std::string *v17;
  const std::string *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 7187);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) != 0)
                {
LABEL_22:
                  v13 = (std::string *)*((_QWORD *)this + 9);
                  *((_DWORD *)this + 4) |= 8u;
                  v14 = (const std::string *)*((_QWORD *)a2 + 9);
                  if (v13 != v14)
                  {
                    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                    else
                      std::string::operator=(v13, v14);
                  }
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v17 = (std::string *)*((_QWORD *)this + 10);
                  v16 = (std::string **)((char *)this + 80);
                  v15 = v17;
                  *((_DWORD *)v16 - 16) |= 0x10u;
                  v18 = (const std::string *)*((_QWORD *)a2 + 10);
                  if (v17 != v18)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v18);
                    else
                      std::string::operator=(v15, v18);
                  }
                }
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
            goto LABEL_22;
          goto LABEL_28;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF277CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Activity::CopyFrom(protobuf::Intelligence_Activity *this, const protobuf::Intelligence_Activity *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Activity::Clear(this);
    protobuf::Intelligence_Activity::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Activity::IsInitialized(protobuf::Intelligence_Activity *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Activity::InternalSwap(protobuf::Intelligence_Activity *this, protobuf::Intelligence_Activity *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  std::string **v34;
  std::string *v35;
  uint64_t *v36;
  std::string **v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  unint64_t v41;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v41;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Activity *)((char *)this + 24), (protobuf::Intelligence_Activity *)((char *)a2 + 24));
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  result = *(__n128 *)v19;
  v23 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v23;
  *(__n128 *)v21 = result;
  v21[2] = v22;
LABEL_20:
  v24 = (uint64_t *)*((_QWORD *)this + 8);
  v25 = (uint64_t **)((char *)a2 + 64);
  if (v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v25 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v24 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v26 = *v25;
  if (*v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v26 = *v25;
  }
  v27 = v24[2];
  result = *(__n128 *)v24;
  v28 = v26[2];
  *(_OWORD *)v24 = *(_OWORD *)v26;
  v24[2] = v28;
  *(__n128 *)v26 = result;
  v26[2] = v27;
LABEL_26:
  v29 = (uint64_t *)*((_QWORD *)this + 9);
  v30 = (uint64_t **)((char *)a2 + 72);
  if (v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v30 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v29 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v31 = *v30;
  if (*v30 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = *v30;
  }
  v32 = v29[2];
  result = *(__n128 *)v29;
  v33 = v31[2];
  *(_OWORD *)v29 = *(_OWORD *)v31;
  v29[2] = v33;
  *(__n128 *)v31 = result;
  v31[2] = v32;
LABEL_32:
  v36 = (uint64_t *)*((_QWORD *)this + 10);
  v34 = (std::string **)((char *)this + 80);
  v35 = (std::string *)v36;
  v37 = (std::string **)((char *)a2 + 80);
  if (v36 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v34, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v35 = *v34;
  }
  v38 = *v37;
  if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v37, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v38 = *v37;
  }
  v39 = v35->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v35->__r_.__value_.__l.__data_;
  v40 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v35->__r_.__value_.__r.__words[2] = v40;
  *(__n128 *)&v38->__r_.__value_.__l.__data_ = result;
  v38->__r_.__value_.__r.__words[2] = v39;
  return result;
}

_QWORD *protobuf::Intelligence_Activity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Activity");
}

protobuf::Intelligence_Utterance *protobuf::Intelligence_Utterance::Intelligence_Utterance(protobuf::Intelligence_Utterance *this)
{
  *(_QWORD *)this = &off_24F541438;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Utterance_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Utterance_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_22AF27BD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Utterance *protobuf::Intelligence_Utterance::Intelligence_Utterance(protobuf::Intelligence_Utterance *this, const protobuf::Intelligence_Utterance *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_24F541438;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  return this;
}

void sub_22AF27C98(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Utterance::~Intelligence_Utterance(protobuf::Intelligence_Utterance *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F541438;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Utterance::~Intelligence_Utterance(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Utterance::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Utterance::default_instance(protobuf::Intelligence_Utterance *this)
{
  if (atomic_load(scc_info_Intelligence_Utterance_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Utterance_intelligence_2eproto);
  return &protobuf::_Intelligence_Utterance_default_instance_;
}

void protobuf::Intelligence_Utterance::Clear(protobuf::Intelligence_Utterance *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::Intelligence_Utterance *)((char *)this + 8);
  *((_DWORD *)v4 + 8) = 0;
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

google::protobuf::internal *protobuf::Intelligence_Utterance::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  unsigned int v9;
  BOOL v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  google::protobuf::internal *v14;
  int v15;
  std::string *v16;
  google::protobuf::internal *v17;
  int v18;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v19;
      if ((*(char *)v19 & 0x80000000) == 0)
        goto LABEL_7;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v8);
      v19 = TagFallback;
      if (!TagFallback)
        goto LABEL_3;
LABEL_8:
      v9 = v8 >> 3;
      if (v8 >> 3 != 3)
      {
        if (v9 == 2)
        {
          if (v8 != 18)
            goto LABEL_14;
          *(_DWORD *)(a1 + 16) |= 2u;
          v16 = *(std::string **)(a1 + 32);
          if (v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v16 = *(std::string **)(a1 + 32);
            goto LABEL_29;
          }
        }
        else
        {
          if (v9 != 1 || v8 != 10)
          {
LABEL_14:
            if ((_DWORD)v8)
              v11 = (v8 & 7) == 4;
            else
              v11 = 1;
            if (v11)
            {
              *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
              goto LABEL_3;
            }
            v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
            goto LABEL_31;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          v16 = *(std::string **)(a1 + 24);
          if (v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v16 = *(std::string **)(a1 + 24);
LABEL_29:
            TagFallback = v19;
          }
        }
        v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v16, (std::string::value_type *)TagFallback, (uint64_t)this);
LABEL_31:
        v19 = v12;
        if (!v12)
          goto LABEL_37;
        goto LABEL_32;
      }
      if (v8 != 24)
        goto LABEL_14;
      v5 |= 4u;
      v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v13) = *(unsigned __int8 *)TagFallback;
      if ((v13 & 0x80) == 0)
        goto LABEL_23;
      v15 = *(char *)v14;
      v13 = v13 + (v15 << 7) - 128;
      if ((v15 & 0x80000000) == 0)
      {
        v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
        v19 = v14;
        *(_DWORD *)(a1 + 40) = v13;
        goto LABEL_32;
      }
      v17 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
      v19 = v17;
      *(_DWORD *)(a1 + 40) = v18;
      if (!v17)
      {
LABEL_37:
        TagFallback = 0;
        goto LABEL_3;
      }
LABEL_32:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23)))goto LABEL_2;
    }
    TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_7:
    v19 = TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = v19;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_Utterance::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Utterance *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_16;
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
    goto LABEL_16;
LABEL_7:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((int *)this + 10);
  *v4 = 24;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v8 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v8 | 0x80;
        v9 = v8 >> 7;
        ++v4;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
      *(v4 - 1) = v9;
    }
    else
    {
      v4[2] = v8;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_16:
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
    return (unsigned __int8 *)v4;
  v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 23);
    v15 = (void *)v13;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v14)
  {
    v16 = (int)v14;
    memcpy(v4, v15, (int)v14);
    v4 += v16;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v15, v14, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Utterance::ByteSizeLong(protobuf::Intelligence_Utterance *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
  {
    v2 = 0;
    goto LABEL_17;
  }
  if ((v1 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v9 = *((_DWORD *)this + 10);
    if (v9 < 0)
      v10 = 11;
    else
      v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v2 += v10;
  }
LABEL_17:
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = *(unsigned __int8 *)(v13 + 23);
    v2 += v14;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Utterance::CheckTypeAndMergeFrom(protobuf::Intelligence_Utterance *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Utterance::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Utterance::MergeFrom(protobuf::Intelligence_Utterance *this, const protobuf::Intelligence_Utterance *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 7469);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
            *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
          *((_DWORD *)this + 4) |= v6;
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF28454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Utterance::CopyFrom(protobuf::Intelligence_Utterance *this, const protobuf::Intelligence_Utterance *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Utterance::Clear(this);
    protobuf::Intelligence_Utterance::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Utterance::IsInitialized(protobuf::Intelligence_Utterance *this)
{
  return 1;
}

void protobuf::Intelligence_Utterance::InternalSwap(protobuf::Intelligence_Utterance *this, protobuf::Intelligence_Utterance *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v25;
}

_QWORD *protobuf::Intelligence_Utterance::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Utterance");
}

protobuf::Intelligence_Character *protobuf::Intelligence_Character::Intelligence_Character(protobuf::Intelligence_Character *this)
{
  *(_QWORD *)this = &off_24F5414C8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Character_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Character_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF286E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Character *protobuf::Intelligence_Character::Intelligence_Character(protobuf::Intelligence_Character *this, const protobuf::Intelligence_Character *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_24F5414C8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
  }
  return this;
}

void sub_22AF287C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Character::~Intelligence_Character(protobuf::Intelligence_Character *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_24F5414C8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Character::~Intelligence_Character(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Character::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Character::default_instance(protobuf::Intelligence_Character *this)
{
  if (atomic_load(scc_info_Intelligence_Character_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Character_intelligence_2eproto);
  return &protobuf::_Intelligence_Character_default_instance_;
}

void protobuf::Intelligence_Character::Clear(protobuf::Intelligence_Character *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
    goto LABEL_17;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 23) = 0;
  if ((v1 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v6 = *((_BYTE *)this + 8);
  v5 = (protobuf::Intelligence_Character *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

google::protobuf::internal *protobuf::Intelligence_Character::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  std::string::value_type *v7;
  const char *v8;
  unsigned int v9;
  std::string *v11;
  int v12;
  google::protobuf::internal *v13;

  v13 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23));
  result = v13;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v13 = result;
      if (!result)
        return result;
      v7 = (std::string::value_type *)result;
LABEL_7:
      v9 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 == 26)
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          v11 = *(std::string **)(a1 + 40);
          if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 40), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v11 = *(std::string **)(a1 + 40);
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
      else if (v9 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v11 = *(std::string **)(a1 + 32);
          if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v11 = *(std::string **)(a1 + 32);
            goto LABEL_24;
          }
LABEL_25:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, v7, (uint64_t)this);
          goto LABEL_26;
        }
      }
      else if (v9 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v11 = *(std::string **)(a1 + 24);
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *(std::string **)(a1 + 24);
LABEL_24:
          v7 = (std::string::value_type *)v13;
        }
        goto LABEL_25;
      }
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_26:
      v13 = result;
      if (result)
      {
        v12 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23));
        result = v13;
        if (!v12)
          continue;
      }
      return result;
    }
    v7 = (char *)result + 2;
LABEL_6:
    v13 = (google::protobuf::internal *)v7;
    goto LABEL_7;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Character::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Character *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)v4);
LABEL_5:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

uint64_t protobuf::Intelligence_Character::ByteSizeLong(protobuf::Intelligence_Character *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
  {
    v2 = 0;
    goto LABEL_16;
  }
  if ((v1 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = *(unsigned __int8 *)(v14 + 23);
    v2 += v15;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Character::CheckTypeAndMergeFrom(protobuf::Intelligence_Character *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Character::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Character::MergeFrom(protobuf::Intelligence_Character *this, const protobuf::Intelligence_Character *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 7741);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v13 = (std::string *)*((_QWORD *)this + 5);
            v12 = (std::string **)((char *)this + 40);
            v11 = v13;
            *((_DWORD *)v12 - 6) |= 4u;
            v14 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v13 != v14)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)v14);
              else
                std::string::operator=(v11, v14);
            }
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF28F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Character::CopyFrom(protobuf::Intelligence_Character *this, const protobuf::Intelligence_Character *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Character::Clear(this);
    protobuf::Intelligence_Character::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Character::IsInitialized(protobuf::Intelligence_Character *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Character::InternalSwap(protobuf::Intelligence_Character *this, protobuf::Intelligence_Character *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::string **v23;
  std::string *v24;
  uint64_t *v25;
  std::string **v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  unint64_t v30;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v30;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v21 = v18[2];
  result = *(__n128 *)v18;
  v22 = v20[2];
  *(_OWORD *)v18 = *(_OWORD *)v20;
  v18[2] = v22;
  *(__n128 *)v20 = result;
  v20[2] = v21;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v23 = (std::string **)((char *)this + 40);
  v24 = (std::string *)v25;
  v26 = (std::string **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v24 = *v23;
  }
  v27 = *v26;
  if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v24->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v24->__r_.__value_.__l.__data_;
  v29 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v24->__r_.__value_.__r.__words[2] = v29;
  *(__n128 *)&v27->__r_.__value_.__l.__data_ = result;
  v27->__r_.__value_.__r.__words[2] = v28;
  return result;
}

_QWORD *protobuf::Intelligence_Character::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Character");
}

protobuf::Intelligence_Counter *protobuf::Intelligence_Counter::Intelligence_Counter(protobuf::Intelligence_Counter *this)
{
  *(_QWORD *)this = &off_24F541558;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Counter_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Counter_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_22AF29284(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Counter *protobuf::Intelligence_Counter::Intelligence_Counter(protobuf::Intelligence_Counter *this, const protobuf::Intelligence_Counter *a2)
{
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)this = &off_24F541558;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v5);
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void sub_22AF29328(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Counter::~Intelligence_Counter(protobuf::Intelligence_Counter *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541558;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Counter::~Intelligence_Counter(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Counter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Counter::default_instance(protobuf::Intelligence_Counter *this)
{
  if (atomic_load(scc_info_Intelligence_Counter_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Counter_intelligence_2eproto);
  return &protobuf::_Intelligence_Counter_default_instance_;
}

void protobuf::Intelligence_Counter::Clear(protobuf::Intelligence_Counter *this)
{
  uint64_t v1;
  char *v2;
  char v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 3);
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (char *)this + 8;
  *((_QWORD *)v2 + 3) = 0;
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v2);
}

char *protobuf::Intelligence_Counter::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  const char *v8;
  BOOL v10;
  google::protobuf::internal *v11;
  std::string *v12;
  google::protobuf::internal *v13;

  v13 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (char *)v13 + 1;
      LODWORD(v8) = *(unsigned __int8 *)v13;
      if ((*(char *)v13 & 0x80000000) == 0)
        goto LABEL_7;
      v8 = (const char *)(v8 + (*TagFallback << 7) - 128);
      if ((*TagFallback & 0x80000000) == 0)
        break;
      TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v13, v8);
      v13 = (google::protobuf::internal *)TagFallback;
      if (!TagFallback)
        goto LABEL_3;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 17)
        {
          v5 |= 2u;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)TagFallback;
          v13 = (google::protobuf::internal *)(TagFallback + 8);
          goto LABEL_24;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v12 = *(std::string **)(a1 + 24);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *(std::string **)(a1 + 24);
          TagFallback = (char *)v13;
        }
        v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, TagFallback, (uint64_t)this);
        goto LABEL_23;
      }
      if ((_DWORD)v8)
        v10 = (v8 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        goto LABEL_3;
      }
      v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_23:
      v13 = v11;
      if (!v11)
      {
        TagFallback = 0;
        goto LABEL_3;
      }
LABEL_24:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23)))goto LABEL_2;
    }
    TagFallback = (char *)v13 + 2;
LABEL_7:
    v13 = (google::protobuf::internal *)TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = (char *)v13;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_Counter::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Counter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v7 = *((_QWORD *)this + 4);
    *v4 = 17;
    *(_QWORD *)(v4 + 1) = v7;
    v4 += 9;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) == 0)
    return (unsigned __int8 *)v4;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(v10 + 23);
    v12 = (void *)v10;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Counter::ByteSizeLong(protobuf::Intelligence_Counter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 3);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v3 = v2 + 9;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = *(unsigned __int8 *)(v9 + 23);
    v3 += v10;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_Counter::CheckTypeAndMergeFrom(protobuf::Intelligence_Counter *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Counter::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Counter::MergeFrom(protobuf::Intelligence_Counter *this, const protobuf::Intelligence_Counter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 7973);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
    {
LABEL_12:
      *((_DWORD *)this + 4) |= v6;
      return;
    }
LABEL_11:
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    goto LABEL_12;
  }
}

void sub_22AF298C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Counter::CopyFrom(protobuf::Intelligence_Counter *this, const protobuf::Intelligence_Counter *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Counter::Clear(this);
    protobuf::Intelligence_Counter::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Counter::IsInitialized(protobuf::Intelligence_Counter *this)
{
  return 1;
}

double protobuf::Intelligence_Counter::InternalSwap(protobuf::Intelligence_Counter *this, protobuf::Intelligence_Counter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  double result;
  unint64_t v20;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v20;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

_QWORD *protobuf::Intelligence_Counter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Counter");
}

protobuf::Intelligence_Flag *protobuf::Intelligence_Flag::Intelligence_Flag(protobuf::Intelligence_Flag *this)
{
  *(_QWORD *)this = &off_24F5415E8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Flag_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Flag_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 32) = 0;
  return this;
}

void sub_22AF29AE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Flag *protobuf::Intelligence_Flag::Intelligence_Flag(protobuf::Intelligence_Flag *this, const protobuf::Intelligence_Flag *a2)
{
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)this = &off_24F5415E8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v5);
  }
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  return this;
}

void sub_22AF29B84(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Flag::~Intelligence_Flag(protobuf::Intelligence_Flag *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F5415E8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Flag::~Intelligence_Flag(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Flag::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Flag::default_instance(protobuf::Intelligence_Flag *this)
{
  if (atomic_load(scc_info_Intelligence_Flag_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Flag_intelligence_2eproto);
  return &protobuf::_Intelligence_Flag_default_instance_;
}

void protobuf::Intelligence_Flag::Clear(protobuf::Intelligence_Flag *this)
{
  uint64_t v1;
  char *v2;
  char v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 3);
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (char *)this + 8;
  v2[24] = 0;
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v2);
}

google::protobuf::internal *protobuf::Intelligence_Flag::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  BOOL v10;
  google::protobuf::internal *v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  int v14;
  std::string *v15;
  google::protobuf::internal *v16;
  uint64_t v17;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v18, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v18;
      if ((*(char *)v18 & 0x80000000) == 0)
        goto LABEL_7;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v8);
      v18 = TagFallback;
      if (!TagFallback)
        goto LABEL_3;
LABEL_8:
      if (v8 >> 3 != 2)
      {
        if (v8 >> 3 == 1 && v8 == 10)
        {
          *(_DWORD *)(a1 + 16) |= 1u;
          v15 = *(std::string **)(a1 + 24);
          if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v15 = *(std::string **)(a1 + 24);
            TagFallback = v18;
          }
          v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v15, (std::string::value_type *)TagFallback, (uint64_t)this);
        }
        else
        {
LABEL_13:
          if ((_DWORD)v8)
            v10 = (v8 & 7) == 4;
          else
            v10 = 1;
          if (v10)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
        }
        v18 = v11;
        if (!v11)
          goto LABEL_32;
        goto LABEL_27;
      }
      if (v8 != 16)
        goto LABEL_13;
      v5 |= 2u;
      v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
      v13 = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_22;
      v14 = *(char *)v12;
      v13 = v13 + (v14 << 7) - 128;
      if ((v14 & 0x80000000) == 0)
      {
        v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
        v18 = v12;
        *(_BYTE *)(a1 + 32) = v13 != 0;
        goto LABEL_27;
      }
      v16 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
      v18 = v16;
      *(_BYTE *)(a1 + 32) = v17 != 0;
      if (!v16)
      {
LABEL_32:
        TagFallback = 0;
        goto LABEL_3;
      }
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v18, *((_DWORD *)this + 23)))goto LABEL_2;
    }
    TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_7:
    v18 = TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = v18;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_Flag::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Flag *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v7 = *((_BYTE *)this + 32);
    *v4 = 16;
    v4[1] = v7;
    v4 += 2;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) == 0)
    return (unsigned __int8 *)v4;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(v10 + 23);
    v12 = (void *)v10;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Flag::ByteSizeLong(protobuf::Intelligence_Flag *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 3);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v3 = v2 + 2;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = *(unsigned __int8 *)(v9 + 23);
    v3 += v10;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_Flag::CheckTypeAndMergeFrom(protobuf::Intelligence_Flag *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Flag::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Flag::MergeFrom(protobuf::Intelligence_Flag *this, const protobuf::Intelligence_Flag *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 8198);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
    {
LABEL_12:
      *((_DWORD *)this + 4) |= v6;
      return;
    }
LABEL_11:
    *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
    goto LABEL_12;
  }
}

void sub_22AF2A16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Flag::CopyFrom(protobuf::Intelligence_Flag *this, const protobuf::Intelligence_Flag *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Flag::Clear(this);
    protobuf::Intelligence_Flag::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Flag::IsInitialized(protobuf::Intelligence_Flag *this)
{
  return 1;
}

void protobuf::Intelligence_Flag::InternalSwap(protobuf::Intelligence_Flag *this, protobuf::Intelligence_Flag *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v20;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = *((_BYTE *)this + 32);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v19;
}

_QWORD *protobuf::Intelligence_Flag::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Flag");
}

protobuf::Intelligence_Label *protobuf::Intelligence_Label::Intelligence_Label(protobuf::Intelligence_Label *this)
{
  *(_QWORD *)this = &off_24F541678;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Label_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Label_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF2A380(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Label *protobuf::Intelligence_Label::Intelligence_Label(protobuf::Intelligence_Label *this, const protobuf::Intelligence_Label *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_24F541678;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  return this;
}

void sub_22AF2A43C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Label::~Intelligence_Label(protobuf::Intelligence_Label *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F541678;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Label::~Intelligence_Label(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Label::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Label::default_instance(protobuf::Intelligence_Label *this)
{
  if (atomic_load(scc_info_Intelligence_Label_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Label_intelligence_2eproto);
  return &protobuf::_Intelligence_Label_default_instance_;
}

void protobuf::Intelligence_Label::Clear(protobuf::Intelligence_Label *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::Intelligence_Label *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

google::protobuf::internal *protobuf::Intelligence_Label::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  std::string::value_type *v7;
  const char *v8;
  std::string *v10;
  int v11;
  google::protobuf::internal *v12;

  v12 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
  result = v12;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v12 = result;
      if (!result)
        return result;
      v7 = (std::string::value_type *)result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v10 = *(std::string **)(a1 + 32);
          if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v10 = *(std::string **)(a1 + 32);
            goto LABEL_19;
          }
LABEL_20:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, v7, (uint64_t)this);
          goto LABEL_21;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *(std::string **)(a1 + 24);
LABEL_19:
          v7 = (std::string::value_type *)v12;
        }
        goto LABEL_20;
      }
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_21:
      v12 = result;
      if (result)
      {
        v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
        result = v12;
        if (!v11)
          continue;
      }
      return result;
    }
    v7 = (char *)result + 2;
LABEL_5:
    v12 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Label::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Label *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

uint64_t protobuf::Intelligence_Label::ByteSizeLong(protobuf::Intelligence_Label *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Label::CheckTypeAndMergeFrom(protobuf::Intelligence_Label *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Label::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Label::MergeFrom(protobuf::Intelligence_Label *this, const protobuf::Intelligence_Label *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 8432);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 4);
    v10 = (std::string **)((char *)this + 32);
    v9 = v11;
    *((_DWORD *)v10 - 4) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_22AF2AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Label::CopyFrom(protobuf::Intelligence_Label *this, const protobuf::Intelligence_Label *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Label::Clear(this);
    protobuf::Intelligence_Label::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Label::IsInitialized(protobuf::Intelligence_Label *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Label::InternalSwap(protobuf::Intelligence_Label *this, protobuf::Intelligence_Label *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v25;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

_QWORD *protobuf::Intelligence_Label::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Label");
}

protobuf::Intelligence_List *protobuf::Intelligence_List::Intelligence_List(protobuf::Intelligence_List *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541708;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_List_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_List_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF2AD24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_List *protobuf::Intelligence_List::Intelligence_List(protobuf::Intelligence_List *this, const protobuf::Intelligence_List *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F541708;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v6);
  }
  return this;
}

void sub_22AF2ADE8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_List::~Intelligence_List(protobuf::Intelligence_List *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541708;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_List::~Intelligence_List(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_List::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_List::default_instance(protobuf::Intelligence_List *this)
{
  if (atomic_load(scc_info_Intelligence_List_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_List_intelligence_2eproto);
  return &protobuf::_Intelligence_List_default_instance_;
}

void protobuf::Intelligence_List::Clear(protobuf::Intelligence_List *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_List *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

std::string::value_type *protobuf::Intelligence_List::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  std::string::value_type *v8;
  const char *v9;
  std::string::value_type *v11;
  int *v12;
  uint64_t v13;
  int v14;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  int v20;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v21, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v21;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 24);
    while (1)
    {
      v8 = result + 1;
      LODWORD(v9) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_7;
      v9 = (const char *)(v9 + (*v8 << 7) - 128);
      if ((*v8 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v9);
      v21 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v8 = result;
LABEL_8:
      if (v9 >> 3 == 2)
      {
        if (v9 != 18)
          goto LABEL_13;
        result = v8 - 1;
        while (2)
        {
          v11 = result + 1;
          v21 = (google::protobuf::internal *)(result + 1);
          v12 = *(int **)(a1 + 40);
          if (v12)
          {
            v13 = *(int *)(a1 + 32);
            v14 = *v12;
            if ((int)v13 < *v12)
            {
              *(_DWORD *)(a1 + 32) = v13 + 1;
              AlignedAndAddCleanup = *(std::string **)&v12[2 * v13 + 2];
              goto LABEL_30;
            }
            if (v14 == *(_DWORD *)(a1 + 36))
            {
LABEL_23:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
              v12 = *(int **)(a1 + 40);
              v14 = *v12;
            }
            *v12 = v14 + 1;
            v16 = (google::protobuf::internal::ArenaImpl *)*v7;
            if (*v7)
            {
              if (*((_QWORD *)v16 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v16, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v17 = *(_QWORD *)(a1 + 40);
            v18 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = AlignedAndAddCleanup;
            v11 = (std::string::value_type *)v21;
LABEL_30:
            result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v11, (uint64_t)this);
            v21 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 18)
              goto LABEL_38;
            continue;
          }
          break;
        }
        v14 = *(_DWORD *)(a1 + 36);
        goto LABEL_23;
      }
      if (v9 >> 3 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v19 = *(std::string **)(a1 + 48);
        if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v19 = *(std::string **)(a1 + 48);
          v8 = (std::string::value_type *)v21;
        }
        result = google::protobuf::internal::InlineGreedyStringParser(v19, v8, (uint64_t)this);
        goto LABEL_37;
      }
LABEL_13:
      if (!(_DWORD)v9 || (v9 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
        return v8;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v8, this);
LABEL_37:
      v21 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_38:
      v20 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v21, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v21;
      if (v20)
        return result;
    }
    v8 = result + 2;
LABEL_7:
    v21 = (google::protobuf::internal *)v8;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_List::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_List *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_15;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v9)
      {
        *v4 = 18;
        v4[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(v4 + 2, v10, v9);
        v4 += v9 + 2;
        continue;
      }
LABEL_15:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v8, v4);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
    return (unsigned __int8 *)v4;
  v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 23);
    v15 = (void *)v13;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v14)
  {
    v16 = (int)v14;
    memcpy(v4, v15, (int)v14);
    v4 += v16;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v15, v14, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_List::ByteSizeLong(protobuf::Intelligence_List *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = *(unsigned __int8 *)(v12 + 23);
    v4 += v13;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_List::CheckTypeAndMergeFrom(protobuf::Intelligence_List *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_List::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_List::MergeFrom(protobuf::Intelligence_List *this, const protobuf::Intelligence_List *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 8659);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 6);
    v7 = (std::string **)((char *)this + 48);
    v6 = v8;
    *((_DWORD *)v7 - 8) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 6);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF2B5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_List::CopyFrom(protobuf::Intelligence_List *this, const protobuf::Intelligence_List *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_List::Clear(this);
    protobuf::Intelligence_List::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_List::IsInitialized(protobuf::Intelligence_List *this)
{
  return 1;
}

__n128 protobuf::Intelligence_List::InternalSwap(protobuf::Intelligence_List *this, protobuf::Intelligence_List *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_List *)((char *)this + 24), (protobuf::Intelligence_List *)((char *)a2 + 24));
  v16 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (std::string **)((char *)this + 48);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

_QWORD *protobuf::Intelligence_List::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.List");
}

void protobuf::Intelligence_Variable::InitAsDefaultInstance(protobuf::Intelligence_Variable *this)
{
  qword_255B58A88 = (uint64_t)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
}

uint64_t protobuf::Intelligence_Variable::_Internal::default_value(protobuf::Intelligence_Variable::_Internal *this, const protobuf::Intelligence_Variable *a2)
{
  return *((_QWORD *)this + 13);
}

protobuf::Intelligence_Variable *protobuf::Intelligence_Variable::Intelligence_Variable(protobuf::Intelligence_Variable *this)
{
  *(_QWORD *)this = &off_24F541798;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_Intelligence_Variable_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Variable_intelligence_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_WORD *)this + 60) = 0;
  return this;
}

void sub_22AF2B7FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Variable *protobuf::Intelligence_Variable::Intelligence_Variable(protobuf::Intelligence_Variable *this, const protobuf::Intelligence_Variable *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  protobuf::Intelligence_KeyValueParameter *v11;
  std::string *v12;
  uint64_t v13;
  char v15;
  std::string v16[2];

  *(_QWORD *)this = &off_24F541798;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (!*((_QWORD *)a2 + 13))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17713);
      v12 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || default_value_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    v11 = (protobuf::Intelligence_KeyValueParameter *)operator new();
    protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v11, *((const protobuf::Intelligence_KeyValueParameter **)a2 + 13));
  }
  else
  {
    v11 = 0;
  }
  *((_QWORD *)this + 13) = v11;
  v13 = *((_QWORD *)a2 + 14);
  *((_WORD *)this + 60) = *((_WORD *)a2 + 60);
  *((_QWORD *)this + 14) = v13;
  return this;
}

void sub_22AF2B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::ArenaImpl **v4;
  google::protobuf::internal::ArenaImpl **v5;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Variable::~Intelligence_Variable(protobuf::Intelligence_Variable *this)
{
  *(_QWORD *)this = &off_24F541798;
  protobuf::Intelligence_Variable::SharedDtor(this);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Variable::~Intelligence_Variable(this);
  JUMPOUT(0x22E2E9CCCLL);
}

_QWORD *protobuf::Intelligence_Variable::SharedDtor(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v1 = (uint64_t)this;
  v2 = this[9];
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 80);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *(_QWORD *)(v1 + 88);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *(_QWORD *)(v1 + 96);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  if ((_UNKNOWN *)v1 != &protobuf::_Intelligence_Variable_default_instance_)
  {
    this = *(_QWORD **)(v1 + 104);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t protobuf::Intelligence_Variable::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Variable::default_instance(protobuf::Intelligence_Variable *this)
{
  if (atomic_load(scc_info_Intelligence_Variable_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Variable_intelligence_2eproto);
  return &protobuf::_Intelligence_Variable_default_instance_;
}

void protobuf::Intelligence_Variable::Clear(protobuf::Intelligence_Variable *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  protobuf::Intelligence_KeyValueParameter *v7;
  std::string *v8;
  google::protobuf::internal::InternalMetadataWithArenaLite *v9;
  char v10;
  char v11;
  std::string v12[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x1F) == 0)
    goto LABEL_27;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_12:
    v4 = *((_QWORD *)this + 10);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_16;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_6;
LABEL_20:
    v6 = *((_QWORD *)this + 12);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v2 & 0x10) == 0)
        goto LABEL_27;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v2 & 0x10) == 0)
        goto LABEL_27;
    }
    goto LABEL_24;
  }
  v3 = *((_QWORD *)this + 9);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_12;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_12;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_16:
  v5 = *((_QWORD *)this + 11);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_20;
  }
LABEL_6:
  if ((v2 & 0x10) == 0)
    goto LABEL_27;
LABEL_24:
  v7 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
  if (!v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 8831);
    v8 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: default_value_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
    v7 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
  }
  protobuf::Intelligence_KeyValueParameter::Clear(v7);
LABEL_27:
  if ((v2 & 0xE0) != 0)
  {
    *((_WORD *)this + 60) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  v10 = *((_BYTE *)this + 8);
  v9 = (protobuf::Intelligence_Variable *)((char *)this + 8);
  *((_DWORD *)v9 + 2) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v9);
}

void sub_22AF2BDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *protobuf::Intelligence_Variable::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  std::string **v8;
  std::string **v9;
  std::string **v10;
  const char *v11;
  std::string *v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  char *v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  protobuf::Intelligence_KeyValueParameter *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  google::protobuf::internal *v26;
  int *v27;
  uint64_t v28;
  int v29;
  protobuf::Intelligence_KeyValueParameter *v30;
  uint64_t v31;
  uint64_t v32;
  protobuf::Intelligence_KeyValueParameter *v33;
  google::protobuf::internal *v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  google::protobuf::internal *v38;
  uint64_t v39;
  google::protobuf::internal *v40;
  uint64_t v41;
  std::string **v42;
  google::protobuf::internal *v43;

  v43 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v43, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v42 = (std::string **)(a1 + 96);
    v8 = (std::string **)(a1 + 88);
    v9 = (std::string **)(a1 + 80);
    v10 = (std::string **)(a1 + 72);
    while (2)
    {
      TagFallback = (char *)v43 + 1;
      LODWORD(v11) = *(unsigned __int8 *)v43;
      if (*(char *)v43 < 0)
      {
        v11 = (const char *)(v11 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v43, v11);
          v43 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 1u;
              v12 = *(std::string **)(a1 + 72);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_25;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v10;
              goto LABEL_24;
            case 2u:
              if (v11 != 18)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 2u;
              v12 = *(std::string **)(a1 + 80);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_25;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v9;
              goto LABEL_24;
            case 3u:
              if (v11 != 26)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 4u;
              v12 = *(std::string **)(a1 + 88);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_25;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v8;
              goto LABEL_24;
            case 4u:
              if (v11 != 34)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 8u;
              v12 = *(std::string **)(a1 + 96);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_25;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v42, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v42;
LABEL_24:
              TagFallback = (char *)v43;
LABEL_25:
              v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, TagFallback, (uint64_t)this);
              goto LABEL_73;
            case 5u:
              if (v11 != 41)
                goto LABEL_68;
              v5 |= 0x20u;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)TagFallback;
              v43 = (google::protobuf::internal *)(TagFallback + 8);
              goto LABEL_74;
            case 6u:
              if (v11 != 48)
                goto LABEL_68;
              v5 |= 0x80u;
              v14 = (google::protobuf::internal *)(TagFallback + 1);
              v15 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_32;
              v16 = *(char *)v14;
              v15 = v15 + (v16 << 7) - 128;
              if (v16 < 0)
              {
                v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v15);
                v43 = v38;
                *(_BYTE *)(a1 + 121) = v39 != 0;
                if (!v38)
                  goto LABEL_79;
              }
              else
              {
                v14 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_32:
                v43 = v14;
                *(_BYTE *)(a1 + 121) = v15 != 0;
              }
              goto LABEL_74;
            case 7u:
              if (v11 != 58)
                goto LABEL_68;
              v17 = TagFallback - 1;
              while (1)
              {
                v18 = (google::protobuf::internal *)(v17 + 1);
                v43 = (google::protobuf::internal *)(v17 + 1);
                v19 = *(int **)(a1 + 40);
                if (!v19)
                  break;
                v20 = *(int *)(a1 + 32);
                v21 = *v19;
                if ((int)v20 >= *v19)
                {
                  if (v21 == *(_DWORD *)(a1 + 36))
                  {
LABEL_40:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v21 + 1);
                    v19 = *(int **)(a1 + 40);
                    v21 = *v19;
                  }
                  *v19 = v21 + 1;
                  v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  v23 = *(_QWORD *)(a1 + 40);
                  v24 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v24 + 1;
                  *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
                  v18 = v43;
                  goto LABEL_42;
                }
                *(_DWORD *)(a1 + 32) = v20 + 1;
                v22 = *(protobuf::Intelligence_KeyValueParameter **)&v19[2 * v20 + 2];
LABEL_42:
                v17 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v22, v18);
                v43 = (google::protobuf::internal *)v17;
                if (!v17)
                  goto LABEL_79;
                if (*(_QWORD *)this <= (unint64_t)v17 || *v17 != 58)
                  goto LABEL_74;
              }
              v21 = *(_DWORD *)(a1 + 36);
              goto LABEL_40;
            case 8u:
              if (v11 != 66)
                goto LABEL_68;
              v25 = TagFallback - 1;
              break;
            case 9u:
              if (v11 != 74)
                goto LABEL_68;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v33 = *(protobuf::Intelligence_KeyValueParameter **)(a1 + 104);
              if (!v33)
              {
                v33 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
                *(_QWORD *)(a1 + 104) = v33;
                TagFallback = (char *)v43;
              }
              v13 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v33, (google::protobuf::internal *)TagFallback);
              goto LABEL_73;
            case 0xAu:
              if (v11 != 80)
                goto LABEL_68;
              v5 |= 0x40u;
              v34 = (google::protobuf::internal *)(TagFallback + 1);
              v35 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_67;
              v36 = *(char *)v34;
              v35 = v35 + (v36 << 7) - 128;
              if (v36 < 0)
              {
                v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v35);
                v43 = v40;
                *(_BYTE *)(a1 + 120) = v41 != 0;
                if (!v40)
                  goto LABEL_79;
              }
              else
              {
                v34 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_67:
                v43 = v34;
                *(_BYTE *)(a1 + 120) = v35 != 0;
              }
              goto LABEL_74;
            default:
LABEL_68:
              if ((_DWORD)v11)
                v37 = (v11 & 7) == 4;
              else
                v37 = 1;
              if (v37)
              {
                *((_DWORD *)this + 20) = (_DWORD)v11 - 1;
                goto LABEL_3;
              }
              v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_73:
              v43 = v13;
              if (!v13)
              {
LABEL_79:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_74:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v43, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v26 = (google::protobuf::internal *)(v25 + 1);
            v43 = (google::protobuf::internal *)(v25 + 1);
            v27 = *(int **)(a1 + 64);
            if (!v27)
              break;
            v28 = *(int *)(a1 + 56);
            v29 = *v27;
            if ((int)v28 >= *v27)
            {
              if (v29 == *(_DWORD *)(a1 + 60))
              {
LABEL_53:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v29 + 1);
                v27 = *(int **)(a1 + 64);
                v29 = *v27;
              }
              *v27 = v29 + 1;
              v30 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
              v31 = *(_QWORD *)(a1 + 64);
              v32 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v32 + 1;
              *(_QWORD *)(v31 + 8 * v32 + 8) = v30;
              v26 = v43;
              goto LABEL_55;
            }
            *(_DWORD *)(a1 + 56) = v28 + 1;
            v30 = *(protobuf::Intelligence_KeyValueParameter **)&v27[2 * v28 + 2];
LABEL_55:
            v25 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v30, v26);
            v43 = (google::protobuf::internal *)v25;
            if (!v25)
              goto LABEL_79;
            if (*(_QWORD *)this <= (unint64_t)v25 || *v25 != 66)
              goto LABEL_74;
          }
          v29 = *(_DWORD *)(a1 + 60);
          goto LABEL_53;
        }
        TagFallback = (char *)v43 + 2;
      }
      break;
    }
    v43 = (google::protobuf::internal *)TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = (char *)v43;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_Variable::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Variable *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int i;
  protobuf::Intelligence_KeyValueParameter *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int j;
  protobuf::Intelligence_KeyValueParameter *v19;
  unsigned int v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  protobuf::Intelligence_KeyValueParameter *v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 10), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 11), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 12), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_6:
    if ((v6 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_15;
  }
LABEL_12:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_QWORD *)this + 14);
  *v4 = 41;
  *(_QWORD *)(v4 + 1) = v7;
  v4 += 9;
  if ((v6 & 0x80) != 0)
  {
LABEL_15:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((_BYTE *)this + 121);
    *v4 = 48;
    v4[1] = v8;
    v4 += 2;
  }
LABEL_18:
  v9 = *((_DWORD *)this + 8);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v11 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 58;
      v12 = *((_DWORD *)v11 + 5);
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v13 = v4 + 3;
          do
          {
            *(v13 - 1) = v14 | 0x80;
            v15 = v14 >> 7;
            ++v13;
            v16 = v14 >> 14;
            v14 >>= 7;
          }
          while (v16);
          *(v13 - 1) = v15;
        }
        else
        {
          v4[2] = v14;
          v13 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v12;
        v13 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v11, v13, a3);
    }
  }
  v17 = *((_DWORD *)this + 14);
  if (v17)
  {
    for (j = 0; j != v17; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v19 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 66;
      v20 = *((_DWORD *)v19 + 5);
      if (v20 > 0x7F)
      {
        v4[1] = v20 | 0x80;
        v22 = v20 >> 7;
        if (v20 >> 14)
        {
          v21 = v4 + 3;
          do
          {
            *(v21 - 1) = v22 | 0x80;
            v23 = v22 >> 7;
            ++v21;
            v24 = v22 >> 14;
            v22 >>= 7;
          }
          while (v24);
          *(v21 - 1) = v23;
        }
        else
        {
          v4[2] = v22;
          v21 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v20;
        v21 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v19, v21, a3);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v25 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
    *v4 = 74;
    v26 = *((_DWORD *)v25 + 5);
    if (v26 > 0x7F)
    {
      v4[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v27 = v4 + 3;
        do
        {
          *(v27 - 1) = v28 | 0x80;
          v29 = v28 >> 7;
          ++v27;
          v30 = v28 >> 14;
          v28 >>= 7;
        }
        while (v30);
        *(v27 - 1) = v29;
      }
      else
      {
        v4[2] = v28;
        v27 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v26;
      v27 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v25, v27, a3);
  }
  if ((v6 & 0x40) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v31 = *((_BYTE *)this + 120);
    *v4 = 80;
    v4[1] = v31;
    v4 += 2;
  }
  v32 = *((_QWORD *)this + 1);
  if ((v32 & 1) == 0)
    return (unsigned __int8 *)v4;
  v34 = v32 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v34 + 23) < 0)
  {
    v36 = *(void **)v34;
    v35 = *(_QWORD *)(v34 + 8);
  }
  else
  {
    LODWORD(v35) = *(unsigned __int8 *)(v34 + 23);
    v36 = (void *)v34;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v35)
  {
    v37 = (int)v35;
    memcpy(v4, v36, (int)v35);
    v4 += v37;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v36, v35, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Variable::ByteSizeLong(protobuf::Intelligence_Variable *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_KeyValueParameter **v11;
  uint64_t v12;
  protobuf::Intelligence_KeyValueParameter *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_KeyValueParameter **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((_BYTE *)this + 16);
  if (v15)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
    {
      v20 = *((_QWORD *)this + 9);
      v21 = *(unsigned __int8 *)(v20 + 23);
      v22 = *(_QWORD *)(v20 + 8);
      if ((v21 & 0x80u) == 0)
        v22 = v21;
      v9 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((*((_BYTE *)this + 16) & 2) == 0)
      {
LABEL_18:
        if ((*((_BYTE *)this + 16) & 4) == 0)
          goto LABEL_19;
        goto LABEL_37;
      }
    }
    else if ((*((_BYTE *)this + 16) & 2) == 0)
    {
      goto LABEL_18;
    }
    v23 = *((_QWORD *)this + 10);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v25 = *(_QWORD *)(v23 + 8);
    if ((v24 & 0x80u) == 0)
      v25 = v24;
    v9 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((_BYTE *)this + 16) & 4) == 0)
    {
LABEL_19:
      if ((*((_BYTE *)this + 16) & 8) == 0)
        goto LABEL_20;
      goto LABEL_40;
    }
LABEL_37:
    v26 = *((_QWORD *)this + 11);
    v27 = *(unsigned __int8 *)(v26 + 23);
    v28 = *(_QWORD *)(v26 + 8);
    if ((v27 & 0x80u) == 0)
      v28 = v27;
    v9 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((_BYTE *)this + 16) & 8) == 0)
    {
LABEL_20:
      if ((*((_BYTE *)this + 16) & 0x10) == 0)
      {
LABEL_22:
        v17 = v9 + 9;
        if ((v15 & 0x20) == 0)
          v17 = v9;
        if ((v15 & 0x40) != 0)
          v17 += 2;
        if (v15 < 0)
          v9 = v17 + 2;
        else
          v9 = v17;
        goto LABEL_29;
      }
LABEL_21:
      v16 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(*((protobuf::Intelligence_KeyValueParameter **)this
                                                                   + 13));
      v9 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      goto LABEL_22;
    }
LABEL_40:
    v29 = *((_QWORD *)this + 12);
    v30 = *(unsigned __int8 *)(v29 + 23);
    v31 = *(_QWORD *)(v29 + 8);
    if ((v30 & 0x80u) == 0)
      v31 = v30;
    v9 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*((_BYTE *)this + 16) & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_29:
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) != 0)
  {
    v32 = v18 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v32 + 23) < 0)
      v33 = *(_QWORD *)(v32 + 8);
    else
      v33 = *(unsigned __int8 *)(v32 + 23);
    v9 += v33;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

void protobuf::Intelligence_Variable::CheckTypeAndMergeFrom(protobuf::Intelligence_Variable *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Variable::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Variable::MergeFrom(protobuf::Intelligence_Variable *this, const protobuf::Intelligence_Variable *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  protobuf::Intelligence_KeyValueParameter *v15;
  const protobuf::Intelligence_KeyValueParameter *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 9128);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 6, (uint64_t)a2 + 48);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 10);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 10);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 11);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 11);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
                goto LABEL_22;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
LABEL_22:
          v13 = (std::string *)*((_QWORD *)this + 12);
          *((_DWORD *)this + 4) |= 8u;
          v14 = (const std::string *)*((_QWORD *)a2 + 12);
          if (v13 != v14)
          {
            if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v14);
            else
              std::string::operator=(v13, v14);
          }
LABEL_28:
          if ((v6 & 0x10) != 0)
          {
            *((_DWORD *)this + 4) |= 0x10u;
            v15 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
            if (!v15)
            {
              v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
              *((_QWORD *)this + 13) = v15;
            }
            if (*((_QWORD *)a2 + 13))
              v16 = (const protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)a2 + 13);
            else
              v16 = (const protobuf::Intelligence_KeyValueParameter *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
            protobuf::Intelligence_KeyValueParameter::MergeFrom(v15, v16);
            if ((v6 & 0x20) == 0)
            {
LABEL_30:
              if ((v6 & 0x40) == 0)
                goto LABEL_31;
              goto LABEL_42;
            }
          }
          else if ((v6 & 0x20) == 0)
          {
            goto LABEL_30;
          }
          *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
          if ((v6 & 0x40) == 0)
          {
LABEL_31:
            if ((v6 & 0x80) == 0)
            {
LABEL_33:
              *((_DWORD *)this + 4) |= v6;
              return;
            }
LABEL_32:
            *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
            goto LABEL_33;
          }
LABEL_42:
          *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
          if ((v6 & 0x80) == 0)
            goto LABEL_33;
          goto LABEL_32;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF2CC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Variable::CopyFrom(protobuf::Intelligence_Variable *this, const protobuf::Intelligence_Variable *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Variable::Clear(this);
    protobuf::Intelligence_Variable::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Variable::IsInitialized(protobuf::Intelligence_Variable *this)
{
  return 1;
}

double protobuf::Intelligence_Variable::InternalSwap(protobuf::Intelligence_Variable *this, protobuf::Intelligence_Variable *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  unint64_t v39;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v39;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_34;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_34:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Variable *)((char *)this + 24), (protobuf::Intelligence_Variable *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Variable *)((char *)this + 48), (protobuf::Intelligence_Variable *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 11);
  v26 = (uint64_t **)((char *)a2 + 88);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 12);
  v32 = (uint64_t **)((char *)a2 + 96);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v37;
  result = *((double *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((double *)a2 + 14) = result;
  LOBYTE(v37) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v37;
  LOBYTE(v37) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v37;
  return result;
}

_QWORD *protobuf::Intelligence_Variable::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Variable");
}

protobuf::Intelligence_Start *protobuf::Intelligence_Start::Intelligence_Start(protobuf::Intelligence_Start *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541828;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_Start_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Start_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF2D008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Start *protobuf::Intelligence_Start::Intelligence_Start(protobuf::Intelligence_Start *this, const protobuf::Intelligence_Start *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F541828;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v6);
  }
  return this;
}

void sub_22AF2D0CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Start::~Intelligence_Start(protobuf::Intelligence_Start *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541828;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Start::~Intelligence_Start(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Start::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Start::default_instance(protobuf::Intelligence_Start *this)
{
  if (atomic_load(scc_info_Intelligence_Start_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Start_intelligence_2eproto);
  return &protobuf::_Intelligence_Start_default_instance_;
}

void protobuf::Intelligence_Start::Clear(protobuf::Intelligence_Start *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_Start *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

std::string::value_type *protobuf::Intelligence_Start::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  uint64_t *v7;
  std::string::value_type *v8;
  const char *v9;
  std::string *v11;
  int v12;
  std::string::value_type *v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v21, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v21;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 24);
    while (1)
    {
      v8 = result + 1;
      LODWORD(v9) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_7;
      v9 = (const char *)(v9 + (*v8 << 7) - 128);
      if ((*v8 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v9);
      v21 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v8 = result;
LABEL_8:
      if (v9 >> 3 != 2)
      {
        if (v9 >> 3 != 1 || v9 != 10)
          goto LABEL_13;
        result = v8 - 1;
        while (2)
        {
          v13 = result + 1;
          v21 = (google::protobuf::internal *)(result + 1);
          v14 = *(int **)(a1 + 40);
          if (v14)
          {
            v15 = *(int *)(a1 + 32);
            v16 = *v14;
            if ((int)v15 < *v14)
            {
              *(_DWORD *)(a1 + 32) = v15 + 1;
              AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
              goto LABEL_36;
            }
            if (v16 == *(_DWORD *)(a1 + 36))
            {
LABEL_29:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v16 + 1);
              v14 = *(int **)(a1 + 40);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v18 = (google::protobuf::internal::ArenaImpl *)*v7;
            if (*v7)
            {
              if (*((_QWORD *)v18 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v19 = *(_QWORD *)(a1 + 40);
            v20 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v20 + 1;
            *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
            v13 = (std::string::value_type *)v21;
LABEL_36:
            result = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)this);
            v21 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 10)
              goto LABEL_21;
            continue;
          }
          break;
        }
        v16 = *(_DWORD *)(a1 + 36);
        goto LABEL_29;
      }
      if (v9 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v11 = *(std::string **)(a1 + 48);
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *(std::string **)(a1 + 48);
          v8 = (std::string::value_type *)v21;
        }
        result = google::protobuf::internal::InlineGreedyStringParser(v11, v8, (uint64_t)this);
        goto LABEL_20;
      }
LABEL_13:
      if (!(_DWORD)v9 || (v9 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
        return v8;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v8, this);
LABEL_20:
      v21 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_21:
      v12 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v21, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v21;
      if (v12)
        return result;
    }
    v8 = result + 2;
LABEL_7:
    v21 = (google::protobuf::internal *)v8;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Start::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Start *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, a2);
    }
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6), a2);
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
    return (unsigned __int8 *)a2;
  v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 23);
    v15 = (void *)v13;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v14)
  {
    v16 = (int)v14;
    memcpy(a2, v15, (int)v14);
    a2 += v16;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v15, v14, (unsigned __int8 *)a2);
}

uint64_t protobuf::Intelligence_Start::ByteSizeLong(protobuf::Intelligence_Start *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = *(unsigned __int8 *)(v12 + 23);
    v4 += v13;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_Start::CheckTypeAndMergeFrom(protobuf::Intelligence_Start *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Start::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Start::MergeFrom(protobuf::Intelligence_Start *this, const protobuf::Intelligence_Start *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 9388);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 6);
    v7 = (std::string **)((char *)this + 48);
    v6 = v8;
    *((_DWORD *)v7 - 8) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 6);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF2D8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Start::CopyFrom(protobuf::Intelligence_Start *this, const protobuf::Intelligence_Start *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Start::Clear(this);
    protobuf::Intelligence_Start::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Start::IsInitialized(protobuf::Intelligence_Start *this)
{
  return 1;
}

__n128 protobuf::Intelligence_Start::InternalSwap(protobuf::Intelligence_Start *this, protobuf::Intelligence_Start *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Start *)((char *)this + 24), (protobuf::Intelligence_Start *)((char *)a2 + 24));
  v16 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (std::string **)((char *)this + 48);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

_QWORD *protobuf::Intelligence_Start::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Start");
}

protobuf::Intelligence_NLParameters *protobuf::Intelligence_NLParameters::Intelligence_NLParameters(protobuf::Intelligence_NLParameters *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F5418B8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_NLParameters_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_NLParameters_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF2DAB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_NLParameters *protobuf::Intelligence_NLParameters::Intelligence_NLParameters(protobuf::Intelligence_NLParameters *this, const protobuf::Intelligence_NLParameters *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F5418B8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v6);
  }
  return this;
}

void sub_22AF2DB7C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_NLParameters::~Intelligence_NLParameters(protobuf::Intelligence_NLParameters *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F5418B8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_NLParameters::~Intelligence_NLParameters(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_NLParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_NLParameters::default_instance(protobuf::Intelligence_NLParameters *this)
{
  if (atomic_load(scc_info_Intelligence_NLParameters_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_NLParameters_intelligence_2eproto);
  return &protobuf::_Intelligence_NLParameters_default_instance_;
}

void protobuf::Intelligence_NLParameters::Clear(protobuf::Intelligence_NLParameters *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_NLParameters *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

std::string::value_type *protobuf::Intelligence_NLParameters::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  std::string::value_type *v7;
  const char *v8;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_KeyValueParameter *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v19;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = result + 1;
      LODWORD(v8) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
      v19 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v7 = result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 != 18)
          goto LABEL_11;
        result = v7 - 1;
        while (2)
        {
          v10 = (google::protobuf::internal *)(result + 1);
          v19 = (google::protobuf::internal *)(result + 1);
          v11 = *(int **)(a1 + 40);
          if (v11)
          {
            v12 = *(int *)(a1 + 32);
            v13 = *v11;
            if ((int)v12 < *v11)
            {
              *(_DWORD *)(a1 + 32) = v12 + 1;
              v14 = *(protobuf::Intelligence_KeyValueParameter **)&v11[2 * v12 + 2];
              goto LABEL_23;
            }
            if (v13 == *(_DWORD *)(a1 + 36))
            {
LABEL_21:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
              v11 = *(int **)(a1 + 40);
              v13 = *v11;
            }
            *v11 = v13 + 1;
            v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            v15 = *(_QWORD *)(a1 + 40);
            v16 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v16 + 1;
            *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
            v10 = v19;
LABEL_23:
            result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v14, v10);
            v19 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 18)
              goto LABEL_31;
            continue;
          }
          break;
        }
        v13 = *(_DWORD *)(a1 + 36);
        goto LABEL_21;
      }
      if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v17 = *(std::string **)(a1 + 48);
        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *(std::string **)(a1 + 48);
          v7 = (std::string::value_type *)v19;
        }
        result = google::protobuf::internal::InlineGreedyStringParser(v17, v7, (uint64_t)this);
        goto LABEL_30;
      }
LABEL_11:
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return v7;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_30:
      v19 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_31:
      v18 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v19;
      if (v18)
        return result;
    }
    v7 = result + 2;
LABEL_5:
    v19 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_NLParameters::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_NLParameters *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int i;
  protobuf::Intelligence_KeyValueParameter *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v4 = a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v8 = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 18;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        v4[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = v4 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          v4[2] = v11;
          v10 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v9;
        v10 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)v4;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 23) < 0)
  {
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    LODWORD(v17) = *(unsigned __int8 *)(v16 + 23);
    v18 = (void *)v16;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v17)
  {
    v19 = (int)v17;
    memcpy(v4, v18, (int)v17);
    v4 += v19;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v18, v17, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_NLParameters::ByteSizeLong(protobuf::Intelligence_NLParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::Intelligence_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v8 = *((_QWORD *)this + 6);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v2 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = *(unsigned __int8 *)(v13 + 23);
    v2 += v14;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_NLParameters::CheckTypeAndMergeFrom(protobuf::Intelligence_NLParameters *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_NLParameters::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_NLParameters::MergeFrom(protobuf::Intelligence_NLParameters *this, const protobuf::Intelligence_NLParameters *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 9609);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)this + 3, (uint64_t)a2 + 24);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 6);
    v7 = (std::string **)((char *)this + 48);
    v6 = v8;
    *((_DWORD *)v7 - 8) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 6);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF2E2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_NLParameters::CopyFrom(protobuf::Intelligence_NLParameters *this, const protobuf::Intelligence_NLParameters *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_NLParameters::Clear(this);
    protobuf::Intelligence_NLParameters::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_NLParameters::IsInitialized(protobuf::Intelligence_NLParameters *this)
{
  return 1;
}

__n128 protobuf::Intelligence_NLParameters::InternalSwap(protobuf::Intelligence_NLParameters *this, protobuf::Intelligence_NLParameters *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_NLParameters *)((char *)this + 24), (protobuf::Intelligence_NLParameters *)((char *)a2 + 24));
  v16 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (std::string **)((char *)this + 48);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

_QWORD *protobuf::Intelligence_NLParameters::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.NLParameters");
}

void protobuf::Intelligence_Event::InitAsDefaultInstance(protobuf::Intelligence_Event *this)
{
  qword_255B58BB0 = (uint64_t)&protobuf::_Intelligence_NLParameters_default_instance_;
}

uint64_t protobuf::Intelligence_Event::_Internal::nl_producer(protobuf::Intelligence_Event::_Internal *this, const protobuf::Intelligence_Event *a2)
{
  return *((_QWORD *)this + 20);
}

protobuf::Intelligence_Event *protobuf::Intelligence_Event::Intelligence_Event(protobuf::Intelligence_Event *this)
{
  *(_QWORD *)this = &off_24F541948;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (atomic_load(scc_info_Intelligence_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Event_intelligence_2eproto);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = 0;
  return this;
}

void sub_22AF2E514(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 96);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 72);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Event *protobuf::Intelligence_Event::Intelligence_Event(protobuf::Intelligence_Event *this, const protobuf::Intelligence_Event *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  protobuf::Intelligence_NLParameters *v12;
  std::string *v13;
  char v15;
  std::string v16[2];

  *(_QWORD *)this = &off_24F541948;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 96, (uint64_t)a2 + 96);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (!*((_QWORD *)a2 + 20))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18861);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || nl_producer_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    v12 = (protobuf::Intelligence_NLParameters *)operator new();
    protobuf::Intelligence_NLParameters::Intelligence_NLParameters(v12, *((const protobuf::Intelligence_NLParameters **)a2 + 20));
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)this + 20) = v12;
  return this;
}

void sub_22AF2E758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v7);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Event::~Intelligence_Event(protobuf::Intelligence_Event *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24F541948;
  v2 = *((_QWORD *)this + 15);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 16);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 17);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 18);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 19);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_Event *)&protobuf::_Intelligence_Event_default_instance_)
  {
    v11 = *((_QWORD *)this + 20);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 96);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 72);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_Event *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Event::~Intelligence_Event(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Event::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Event::default_instance(protobuf::Intelligence_Event *this)
{
  if (atomic_load(scc_info_Intelligence_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Event_intelligence_2eproto);
  return &protobuf::_Intelligence_Event_default_instance_;
}

void protobuf::Intelligence_Event::Clear(protobuf::Intelligence_Event *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  protobuf::Intelligence_NLParameters *v8;
  std::string *v9;
  google::protobuf::internal::InternalMetadataWithArenaLite *v10;
  char v11;
  char v12;
  std::string v13[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 96);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x3F) == 0)
    goto LABEL_32;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v4 = *((_QWORD *)this + 16);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_17;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_17;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_6;
LABEL_21:
    v6 = *((_QWORD *)this + 18);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_25;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_25;
    }
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
  v3 = *((_QWORD *)this + 15);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_17:
  v5 = *((_QWORD *)this + 17);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_21;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_21;
  }
LABEL_6:
  if ((v2 & 0x10) == 0)
    goto LABEL_7;
LABEL_25:
  v7 = *((_QWORD *)this + 19);
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    if ((v2 & 0x20) == 0)
      goto LABEL_32;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
    if ((v2 & 0x20) == 0)
      goto LABEL_32;
  }
LABEL_29:
  v8 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 20);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 9783);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: nl_producer_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 20);
  }
  protobuf::Intelligence_NLParameters::Clear(v8);
LABEL_32:
  v11 = *((_BYTE *)this + 8);
  v10 = (protobuf::Intelligence_Event *)((char *)this + 8);
  *((_DWORD *)v10 + 2) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v10);
}

void sub_22AF2EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_Event::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  google::protobuf::internal *v10;
  const char *v11;
  std::string *v12;
  std::string **v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  protobuf::Intelligence_NLParameters *v18;
  uint64_t v19;
  uint64_t v20;
  protobuf::Intelligence_NLParameters *v21;
  std::string::value_type *v22;
  int *v23;
  uint64_t v24;
  int v25;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::value_type *v30;
  int *v31;
  uint64_t v32;
  int v33;
  std::string *v34;
  google::protobuf::internal::ArenaImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  std::string::value_type *v39;
  int *v40;
  uint64_t v41;
  int v42;
  std::string *v43;
  google::protobuf::internal::ArenaImpl *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  google::protobuf::internal *v48;

  v48 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v48, *((_DWORD *)this + 23));
  result = v48;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 96);
    v8 = (uint64_t *)(a1 + 72);
    v9 = (uint64_t *)(a1 + 48);
    while (2)
    {
      v10 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v11) = *(unsigned __int8 *)result;
      if (*(char *)result < 0)
      {
        v11 = (const char *)(v11 + (*(unsigned __int8 *)v10 << 7) - 128);
        if (*(char *)v10 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v11);
          v48 = result;
          if (!result)
            return result;
          v10 = result;
LABEL_8:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 1u;
              v12 = *(std::string **)(a1 + 120);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_80;
              v13 = (std::string **)(a1 + 120);
              goto LABEL_79;
            case 3u:
              if (v11 != 26)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 2u;
              v12 = *(std::string **)(a1 + 128);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_80;
              v13 = (std::string **)(a1 + 128);
              goto LABEL_79;
            case 6u:
              if (v11 != 50)
                goto LABEL_102;
              result = (google::protobuf::internal *)((char *)v10 - 1);
              while (1)
              {
                v14 = (google::protobuf::internal *)((char *)result + 1);
                v48 = (google::protobuf::internal *)((char *)result + 1);
                v15 = *(int **)(a1 + 40);
                if (!v15)
                  break;
                v16 = *(int *)(a1 + 32);
                v17 = *v15;
                if ((int)v16 >= *v15)
                {
                  if (v17 == *(_DWORD *)(a1 + 36))
                  {
LABEL_24:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v17 + 1);
                    v15 = *(int **)(a1 + 40);
                    v17 = *v15;
                  }
                  *v15 = v17 + 1;
                  v18 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  v19 = *(_QWORD *)(a1 + 40);
                  v20 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v20 + 1;
                  *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
                  v14 = v48;
                  goto LABEL_26;
                }
                *(_DWORD *)(a1 + 32) = v16 + 1;
                v18 = *(protobuf::Intelligence_NLParameters **)&v15[2 * v16 + 2];
LABEL_26:
                result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_NLParameters>(this, (uint64_t)v18, v14);
                v48 = result;
                if (!result)
                  return result;
                if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 50)
                  goto LABEL_82;
              }
              v17 = *(_DWORD *)(a1 + 36);
              goto LABEL_24;
            case 7u:
              if (v11 != 58)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v21 = *(protobuf::Intelligence_NLParameters **)(a1 + 160);
              if (!v21)
              {
                v21 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
                *(_QWORD *)(a1 + 160) = v21;
                v10 = v48;
              }
              result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_NLParameters>(this, (uint64_t)v21, v10);
              goto LABEL_81;
            case 8u:
              if (v11 != 66)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 4u;
              v12 = *(std::string **)(a1 + 136);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_80;
              v13 = (std::string **)(a1 + 136);
              goto LABEL_79;
            case 9u:
              if (v11 != 74)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 8u;
              v12 = *(std::string **)(a1 + 144);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_80;
              v13 = (std::string **)(a1 + 144);
              goto LABEL_79;
            case 0xAu:
              if (v11 != 82)
                goto LABEL_102;
              result = (google::protobuf::internal *)((char *)v10 - 1);
              while (1)
              {
                v22 = (char *)result + 1;
                v48 = (google::protobuf::internal *)((char *)result + 1);
                v23 = *(int **)(a1 + 64);
                if (!v23)
                  break;
                v24 = *(int *)(a1 + 56);
                v25 = *v23;
                if ((int)v24 >= *v23)
                {
                  if (v25 == *(_DWORD *)(a1 + 60))
                  {
LABEL_47:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v25 + 1);
                    v23 = *(int **)(a1 + 64);
                    v25 = *v23;
                  }
                  *v23 = v25 + 1;
                  v27 = (google::protobuf::internal::ArenaImpl *)*v9;
                  if (*v9)
                  {
                    if (*((_QWORD *)v27 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v27, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v28 = *(_QWORD *)(a1 + 64);
                  v29 = *(int *)(a1 + 56);
                  *(_DWORD *)(a1 + 56) = v29 + 1;
                  *(_QWORD *)(v28 + 8 * v29 + 8) = AlignedAndAddCleanup;
                  v22 = (std::string::value_type *)v48;
                  goto LABEL_54;
                }
                *(_DWORD *)(a1 + 56) = v24 + 1;
                AlignedAndAddCleanup = *(std::string **)&v23[2 * v24 + 2];
LABEL_54:
                result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v22, (uint64_t)this);
                v48 = result;
                if (!result)
                  return result;
                if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 82)
                  goto LABEL_82;
              }
              v25 = *(_DWORD *)(a1 + 60);
              goto LABEL_47;
            case 0xBu:
              if (v11 != 90)
                goto LABEL_102;
              result = (google::protobuf::internal *)((char *)v10 - 1);
              while (1)
              {
                v30 = (char *)result + 1;
                v48 = (google::protobuf::internal *)((char *)result + 1);
                v31 = *(int **)(a1 + 88);
                if (!v31)
                  break;
                v32 = *(int *)(a1 + 80);
                v33 = *v31;
                if ((int)v32 >= *v31)
                {
                  if (v33 == *(_DWORD *)(a1 + 84))
                  {
LABEL_65:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v33 + 1);
                    v31 = *(int **)(a1 + 88);
                    v33 = *v31;
                  }
                  *v31 = v33 + 1;
                  v35 = (google::protobuf::internal::ArenaImpl *)*v8;
                  if (*v8)
                  {
                    if (*((_QWORD *)v35 + 14))
                    v34 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v35, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    v34 = (std::string *)operator new();
                  }
                  v34->__r_.__value_.__r.__words[0] = 0;
                  v34->__r_.__value_.__l.__size_ = 0;
                  v34->__r_.__value_.__r.__words[2] = 0;
                  v36 = *(_QWORD *)(a1 + 88);
                  v37 = *(int *)(a1 + 80);
                  *(_DWORD *)(a1 + 80) = v37 + 1;
                  *(_QWORD *)(v36 + 8 * v37 + 8) = v34;
                  v30 = (std::string::value_type *)v48;
                  goto LABEL_72;
                }
                *(_DWORD *)(a1 + 80) = v32 + 1;
                v34 = *(std::string **)&v31[2 * v32 + 2];
LABEL_72:
                result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v34, v30, (uint64_t)this);
                v48 = result;
                if (!result)
                  return result;
                if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 90)
                  goto LABEL_82;
              }
              v33 = *(_DWORD *)(a1 + 84);
              goto LABEL_65;
            case 0xCu:
              if (v11 != 98)
                goto LABEL_102;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v12 = *(std::string **)(a1 + 152);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_80;
              v13 = (std::string **)(a1 + 152);
LABEL_79:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v13;
              v10 = v48;
LABEL_80:
              result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)v10, (uint64_t)this);
              goto LABEL_81;
            case 0xDu:
              if (v11 != 106)
                goto LABEL_102;
              result = (google::protobuf::internal *)((char *)v10 - 1);
              break;
            default:
LABEL_102:
              if ((_DWORD)v11)
                v47 = (v11 & 7) == 4;
              else
                v47 = 1;
              if (v47)
              {
                *((_DWORD *)this + 20) = (_DWORD)v11 - 1;
                return v10;
              }
              result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, (uint64_t *)(a1 + 8), v10, this);
LABEL_81:
              v48 = result;
              if (!result)
                return result;
LABEL_82:
              v38 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v48, *((_DWORD *)this + 23));
              result = v48;
              if (v38)
                return result;
              continue;
          }
          while (1)
          {
            v39 = (char *)result + 1;
            v48 = (google::protobuf::internal *)((char *)result + 1);
            v40 = *(int **)(a1 + 112);
            if (!v40)
              break;
            v41 = *(int *)(a1 + 104);
            v42 = *v40;
            if ((int)v41 >= *v40)
            {
              if (v42 == *(_DWORD *)(a1 + 108))
              {
LABEL_91:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v42 + 1);
                v40 = *(int **)(a1 + 112);
                v42 = *v40;
              }
              *v40 = v42 + 1;
              v44 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v44 + 14))
                v43 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v44, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                v43 = (std::string *)operator new();
              }
              v43->__r_.__value_.__r.__words[0] = 0;
              v43->__r_.__value_.__l.__size_ = 0;
              v43->__r_.__value_.__r.__words[2] = 0;
              v45 = *(_QWORD *)(a1 + 112);
              v46 = *(int *)(a1 + 104);
              *(_DWORD *)(a1 + 104) = v46 + 1;
              *(_QWORD *)(v45 + 8 * v46 + 8) = v43;
              v39 = (std::string::value_type *)v48;
              goto LABEL_98;
            }
            *(_DWORD *)(a1 + 104) = v41 + 1;
            v43 = *(std::string **)&v40[2 * v41 + 2];
LABEL_98:
            result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v43, v39, (uint64_t)this);
            v48 = result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 106)
              goto LABEL_82;
          }
          v42 = *(_DWORD *)(a1 + 108);
          goto LABEL_91;
        }
        v10 = (google::protobuf::internal *)((char *)result + 2);
      }
      break;
    }
    v48 = v10;
    goto LABEL_8;
  }
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_NLParameters>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = protobuf::Intelligence_NLParameters::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence_Event::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Event *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_NLParameters *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  uint64_t v17;
  int64_t v18;
  const void *v19;
  int v20;
  int k;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  int v25;
  int m;
  uint64_t v27;
  int64_t v28;
  const void *v29;
  uint64_t v30;
  protobuf::Intelligence_NLParameters *v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 15), a2);
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 16), v4);
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_NLParameters *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 50;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_NLParameters::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v32 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 20);
    *v4 = 58;
    v33 = *((_DWORD *)v32 + 5);
    if (v33 > 0x7F)
    {
      v4[1] = v33 | 0x80;
      v35 = v33 >> 7;
      if (v33 >> 14)
      {
        v34 = v4 + 3;
        do
        {
          *(v34 - 1) = v35 | 0x80;
          v36 = v35 >> 7;
          ++v34;
          v37 = v35 >> 14;
          v35 >>= 7;
        }
        while (v37);
        *(v34 - 1) = v36;
      }
      else
      {
        v4[2] = v35;
        v34 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v33;
      v34 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_NLParameters::InternalSerializeWithCachedSizesToArray(v32, v34, a3);
    if ((v6 & 4) == 0)
    {
LABEL_19:
      if ((v6 & 8) == 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_19;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 17), v4);
  if ((v6 & 8) != 0)
LABEL_20:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 18), v4);
LABEL_21:
  v15 = *((_DWORD *)this + 14);
  if (v15 >= 1)
  {
    for (j = 0; v15 != j; ++j)
    {
      v17 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v17 + 23) < 0)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18 > 127)
          goto LABEL_33;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v18)
      {
        *v4 = 82;
        v4[1] = v18;
        if (*(char *)(v17 + 23) >= 0)
          v19 = (const void *)v17;
        else
          v19 = *(const void **)v17;
        memcpy(v4 + 2, v19, v18);
        v4 += v18 + 2;
        continue;
      }
LABEL_33:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 10, v17, v4);
    }
  }
  v20 = *((_DWORD *)this + 20);
  if (v20 >= 1)
  {
    for (k = 0; v20 != k; ++k)
    {
      v22 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, k);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_46;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v23)
      {
        *v4 = 90;
        v4[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(v4 + 2, v24, v23);
        v4 += v23 + 2;
        continue;
      }
LABEL_46:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 11, v22, v4);
    }
  }
  if ((v6 & 0x10) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 19), v4);
  v25 = *((_DWORD *)this + 26);
  if (v25 >= 1)
  {
    for (m = 0; v25 != m; ++m)
    {
      v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 96, m);
      if (*(char *)(v27 + 23) < 0)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28 > 127)
          goto LABEL_61;
      }
      else
      {
        v28 = *(unsigned __int8 *)(v27 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v28)
      {
        *v4 = 106;
        v4[1] = v28;
        if (*(char *)(v27 + 23) >= 0)
          v29 = (const void *)v27;
        else
          v29 = *(const void **)v27;
        memcpy(v4 + 2, v29, v28);
        v4 += v28 + 2;
        continue;
      }
LABEL_61:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 13, v27, v4);
    }
  }
  v30 = *((_QWORD *)this + 1);
  if ((v30 & 1) == 0)
    return (unsigned __int8 *)v4;
  v38 = v30 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v38 + 23) < 0)
  {
    v40 = *(void **)v38;
    v39 = *(_QWORD *)(v38 + 8);
  }
  else
  {
    LODWORD(v39) = *(unsigned __int8 *)(v38 + 23);
    v40 = (void *)v38;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v39)
  {
    v41 = (int)v39;
    memcpy(v4, v40, (int)v39);
    v4 += v41;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v40, v39, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Event::ByteSizeLong(protobuf::Intelligence_Event *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_NLParameters **v4;
  uint64_t v5;
  protobuf::Intelligence_NLParameters *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_NLParameters **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_NLParameters::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((unsigned int *)this + 14);
  v9 = v2 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *((unsigned int *)this + 20);
  v14 = v9 + v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *((unsigned int *)this + 26);
  v19 = v14 + v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 96, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *((_DWORD *)this + 4);
  if ((v23 & 0x3F) == 0)
    goto LABEL_32;
  if ((v23 & 1) != 0)
  {
    v27 = *((_QWORD *)this + 15);
    v28 = *(unsigned __int8 *)(v27 + 23);
    v29 = *(_QWORD *)(v27 + 8);
    if ((v28 & 0x80u) == 0)
      v29 = v28;
    v19 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_27:
      if ((v23 & 4) == 0)
        goto LABEL_28;
      goto LABEL_40;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_27;
  }
  v30 = *((_QWORD *)this + 16);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v32 = v31;
  v19 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_28:
    if ((v23 & 8) == 0)
      goto LABEL_29;
LABEL_43:
    v36 = *((_QWORD *)this + 18);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v38 = *(_QWORD *)(v36 + 8);
    if ((v37 & 0x80u) == 0)
      v38 = v37;
    v19 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 0x10) == 0)
    {
LABEL_30:
      if ((v23 & 0x20) == 0)
        goto LABEL_32;
      goto LABEL_31;
    }
    goto LABEL_46;
  }
LABEL_40:
  v33 = *((_QWORD *)this + 17);
  v34 = *(unsigned __int8 *)(v33 + 23);
  v35 = *(_QWORD *)(v33 + 8);
  if ((v34 & 0x80u) == 0)
    v35 = v34;
  v19 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 8) != 0)
    goto LABEL_43;
LABEL_29:
  if ((v23 & 0x10) == 0)
    goto LABEL_30;
LABEL_46:
  v39 = *((_QWORD *)this + 19);
  v40 = *(unsigned __int8 *)(v39 + 23);
  v41 = *(_QWORD *)(v39 + 8);
  if ((v40 & 0x80u) == 0)
    v41 = v40;
  v19 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 0x20) != 0)
  {
LABEL_31:
    v24 = protobuf::Intelligence_NLParameters::ByteSizeLong(*((protobuf::Intelligence_NLParameters **)this + 20));
    v19 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_32:
  v25 = *((_QWORD *)this + 1);
  if ((v25 & 1) != 0)
  {
    v42 = v25 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v42 + 23) < 0)
      v43 = *(_QWORD *)(v42 + 8);
    else
      v43 = *(unsigned __int8 *)(v42 + 23);
    v19 += v43;
  }
  *((_DWORD *)this + 5) = v19;
  return v19;
}

void protobuf::Intelligence_Event::CheckTypeAndMergeFrom(protobuf::Intelligence_Event *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Event::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Event::MergeFrom(protobuf::Intelligence_Event *this, const protobuf::Intelligence_Event *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  protobuf::Intelligence_NLParameters *v17;
  const protobuf::Intelligence_NLParameters *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10089);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 72, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 96, (uint64_t)a2 + 96);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x3F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 15);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 15);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 16);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 16);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 17);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 17);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 18);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 18);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 19);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 19);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        return;
LABEL_33:
                      *((_DWORD *)this + 4) |= 0x20u;
                      v17 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 20);
                      if (!v17)
                      {
                        v17 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
                        *((_QWORD *)this + 20) = v17;
                      }
                      if (*((_QWORD *)a2 + 20))
                        v18 = (const protobuf::Intelligence_NLParameters *)*((_QWORD *)a2 + 20);
                      else
                        v18 = (const protobuf::Intelligence_NLParameters *)&protobuf::_Intelligence_NLParameters_default_instance_;
                      protobuf::Intelligence_NLParameters::MergeFrom(v17, v18);
                      return;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  return;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF2FE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Event::CopyFrom(protobuf::Intelligence_Event *this, const protobuf::Intelligence_Event *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Event::Clear(this);
    protobuf::Intelligence_Event::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Event::IsInitialized(protobuf::Intelligence_Event *this)
{
  return 1;
}

void protobuf::Intelligence_Event::InternalSwap(protobuf::Intelligence_Event *this, protobuf::Intelligence_Event *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v44;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Event *)((char *)this + 24), (protobuf::Intelligence_Event *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Event *)((char *)this + 48), (protobuf::Intelligence_Event *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Event *)((char *)this + 72), (protobuf::Intelligence_Event *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Event *)((char *)this + 96), (protobuf::Intelligence_Event *)((char *)a2 + 96));
  v13 = (uint64_t *)*((_QWORD *)this + 15);
  v14 = (uint64_t **)((char *)a2 + 120);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  v20 = (uint64_t **)((char *)a2 + 128);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 17);
  v26 = (uint64_t **)((char *)a2 + 136);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 18);
  v32 = (uint64_t **)((char *)a2 + 144);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 19);
  v38 = (uint64_t **)((char *)a2 + 152);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v43;
}

_QWORD *protobuf::Intelligence_Event::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Event");
}

void protobuf::Intelligence_Intent::InitAsDefaultInstance(protobuf::Intelligence_Intent *this)
{
  qword_255B58BF8 = (uint64_t)&protobuf::_Intelligence_NLParameters_default_instance_;
}

uint64_t protobuf::Intelligence_Intent::_Internal::nl_producer(protobuf::Intelligence_Intent::_Internal *this, const protobuf::Intelligence_Intent *a2)
{
  return *((_QWORD *)this + 8);
}

protobuf::Intelligence_Intent *protobuf::Intelligence_Intent::Intelligence_Intent(protobuf::Intelligence_Intent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F5419D8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_Intent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Intent_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_22AF30294(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Intent *protobuf::Intelligence_Intent::Intelligence_Intent(protobuf::Intelligence_Intent *this, const protobuf::Intelligence_Intent *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  protobuf::Intelligence_NLParameters *v9;
  std::string *v10;
  char v12;
  std::string v13[2];

  *(_QWORD *)this = &off_24F5419D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 4) != 0)
  {
    if (!*((_QWORD *)a2 + 8))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 19106);
      v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || nl_producer_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    v9 = (protobuf::Intelligence_NLParameters *)operator new();
    protobuf::Intelligence_NLParameters::Intelligence_NLParameters(v9, *((const protobuf::Intelligence_NLParameters **)a2 + 8));
  }
  else
  {
    v9 = 0;
  }
  *((_QWORD *)this + 8) = v9;
  return this;
}

void sub_22AF30404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Intent::~Intelligence_Intent(protobuf::Intelligence_Intent *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_24F5419D8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_Intent *)&protobuf::_Intelligence_Intent_default_instance_)
  {
    v6 = *((_QWORD *)this + 8);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_Intent *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Intent::~Intelligence_Intent(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Intent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Intent::default_instance(protobuf::Intelligence_Intent *this)
{
  if (atomic_load(scc_info_Intelligence_Intent_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Intent_intelligence_2eproto);
  return &protobuf::_Intelligence_Intent_default_instance_;
}

void protobuf::Intelligence_Intent::Clear(protobuf::Intelligence_Intent *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  protobuf::Intelligence_NLParameters *v5;
  std::string *v6;
  google::protobuf::internal::InternalMetadataWithArenaLite *v7;
  char v8;
  char v9;
  std::string v10[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_17;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v4 = *((_QWORD *)this + 7);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
  }
LABEL_14:
  v5 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 8);
  if (!v5)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10258);
    v6 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: nl_producer_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v5 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 8);
  }
  protobuf::Intelligence_NLParameters::Clear(v5);
LABEL_17:
  v8 = *((_BYTE *)this + 8);
  v7 = (protobuf::Intelligence_Intent *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
}

void sub_22AF306B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *protobuf::Intelligence_Intent::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  std::string::value_type *v7;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_NLParameters *v14;
  uint64_t v15;
  uint64_t v16;
  protobuf::Intelligence_NLParameters *v17;
  BOOL v18;
  int v19;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v20;
  if ((v5 & 1) == 0)
  {
    while (2)
    {
      v7 = result + 1;
      LODWORD(v8) = *result;
      if (*result < 0)
      {
        v8 = (const char *)(v8 + (*v7 << 7) - 128);
        if (*v7 < 0)
        {
          result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
          v20 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          v7 = result;
LABEL_7:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_33;
              *(_DWORD *)(a1 + 16) |= 1u;
              v9 = *(std::string **)(a1 + 48);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_15;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 48);
              goto LABEL_14;
            case 3u:
              if (v8 != 26)
                goto LABEL_33;
              *(_DWORD *)(a1 + 16) |= 2u;
              v9 = *(std::string **)(a1 + 56);
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 56), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v9 = *(std::string **)(a1 + 56);
LABEL_14:
                v7 = (std::string::value_type *)v20;
              }
LABEL_15:
              result = google::protobuf::internal::InlineGreedyStringParser(v9, v7, (uint64_t)this);
              goto LABEL_38;
            case 6u:
              if (v8 != 50)
                goto LABEL_33;
              result = v7 - 1;
              break;
            case 7u:
              if (v8 != 58)
                goto LABEL_33;
              *(_DWORD *)(a1 + 16) |= 4u;
              v17 = *(protobuf::Intelligence_NLParameters **)(a1 + 64);
              if (!v17)
              {
                v17 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
                *(_QWORD *)(a1 + 64) = v17;
                v7 = (std::string::value_type *)v20;
              }
              result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_NLParameters>(this, (uint64_t)v17, (google::protobuf::internal *)v7);
              goto LABEL_38;
            default:
LABEL_33:
              if ((_DWORD)v8)
                v18 = (v8 & 7) == 4;
              else
                v18 = 1;
              if (v18)
              {
                *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
                return v7;
              }
              result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_38:
              v20 = (google::protobuf::internal *)result;
              if (!result)
                return result;
LABEL_39:
              v19 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
              result = (std::string::value_type *)v20;
              if (v19)
                return result;
              continue;
          }
          while (1)
          {
            v10 = (google::protobuf::internal *)(result + 1);
            v20 = (google::protobuf::internal *)(result + 1);
            v11 = *(int **)(a1 + 40);
            if (!v11)
              break;
            v12 = *(int *)(a1 + 32);
            v13 = *v11;
            if ((int)v12 >= *v11)
            {
              if (v13 == *(_DWORD *)(a1 + 36))
              {
LABEL_23:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
                v11 = *(int **)(a1 + 40);
                v13 = *v11;
              }
              *v11 = v13 + 1;
              v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
              v15 = *(_QWORD *)(a1 + 40);
              v16 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v16 + 1;
              *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
              v10 = v20;
              goto LABEL_25;
            }
            *(_DWORD *)(a1 + 32) = v12 + 1;
            v14 = *(protobuf::Intelligence_NLParameters **)&v11[2 * v12 + 2];
LABEL_25:
            result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_NLParameters>(this, (uint64_t)v14, v10);
            v20 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 50)
              goto LABEL_39;
          }
          v13 = *(_DWORD *)(a1 + 36);
          goto LABEL_23;
        }
        v7 = result + 2;
      }
      break;
    }
    v20 = (google::protobuf::internal *)v7;
    goto LABEL_7;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Intent::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Intent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_NLParameters *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  protobuf::Intelligence_NLParameters *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7), v4);
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_NLParameters *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 50;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_NLParameters::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 4) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 8);
    *v4 = 58;
    v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = v4 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        v4[2] = v18;
        v17 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v16;
      v17 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_NLParameters::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
  }
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) == 0)
    return (unsigned __int8 *)v4;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 23) < 0)
  {
    v25 = *(void **)v23;
    v24 = *(_QWORD *)(v23 + 8);
  }
  else
  {
    LODWORD(v24) = *(unsigned __int8 *)(v23 + 23);
    v25 = (void *)v23;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v24)
  {
    v26 = (int)v24;
    memcpy(v4, v25, (int)v24);
    v4 += v26;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v25, v24, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Intent::ByteSizeLong(protobuf::Intelligence_Intent *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_NLParameters **v4;
  uint64_t v5;
  protobuf::Intelligence_NLParameters *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_NLParameters **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_NLParameters::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 7) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v12 = *((_QWORD *)this + 6);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 2) == 0)
      {
LABEL_12:
        if ((v8 & 4) == 0)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else if ((v8 & 2) == 0)
    {
      goto LABEL_12;
    }
    v15 = *((_QWORD *)this + 7);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = *(_QWORD *)(v15 + 8);
    if ((v16 & 0x80u) == 0)
      v17 = v16;
    v2 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 4) != 0)
    {
LABEL_13:
      v9 = protobuf::Intelligence_NLParameters::ByteSizeLong(*((protobuf::Intelligence_NLParameters **)this + 8));
      v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
LABEL_14:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v18 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v18 + 23) < 0)
      v19 = *(_QWORD *)(v18 + 8);
    else
      v19 = *(unsigned __int8 *)(v18 + 23);
    v2 += v19;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_Intent::CheckTypeAndMergeFrom(protobuf::Intelligence_Intent *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Intent::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Intent::MergeFrom(protobuf::Intelligence_Intent *this, const protobuf::Intelligence_Intent *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  protobuf::Intelligence_NLParameters *v11;
  const protobuf::Intelligence_NLParameters *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10426);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 7);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 7);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            *((_DWORD *)this + 4) |= 4u;
            v11 = (protobuf::Intelligence_NLParameters *)*((_QWORD *)this + 8);
            if (!v11)
            {
              v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
              *((_QWORD *)this + 8) = v11;
            }
            if (*((_QWORD *)a2 + 8))
              v12 = (const protobuf::Intelligence_NLParameters *)*((_QWORD *)a2 + 8);
            else
              v12 = (const protobuf::Intelligence_NLParameters *)&protobuf::_Intelligence_NLParameters_default_instance_;
            protobuf::Intelligence_NLParameters::MergeFrom(v11, v12);
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF30F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Intent::CopyFrom(protobuf::Intelligence_Intent *this, const protobuf::Intelligence_Intent *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Intent::Clear(this);
    protobuf::Intelligence_Intent::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Intent::IsInitialized(protobuf::Intelligence_Intent *this)
{
  return 1;
}

void protobuf::Intelligence_Intent::InternalSwap(protobuf::Intelligence_Intent *this, protobuf::Intelligence_Intent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Intent *)((char *)this + 24), (protobuf::Intelligence_Intent *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v25;
}

_QWORD *protobuf::Intelligence_Intent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Intent");
}

protobuf::Intelligence_State_Memory_Value *protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value(protobuf::Intelligence_State_Memory_Value *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541A68;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_State_Memory_Value_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Memory_Value_intelligence_2eproto);
  return this;
}

void sub_22AF311A0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Memory_Value *protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value(protobuf::Intelligence_State_Memory_Value *this, const protobuf::Intelligence_State_Memory_Value *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F541A68;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_22AF3123C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Memory_Value::~Intelligence_State_Memory_Value(protobuf::Intelligence_State_Memory_Value *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541A68;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541A68;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541A68;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_Memory_Value::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_Memory_Value::default_instance(protobuf::Intelligence_State_Memory_Value *this)
{
  if (atomic_load(scc_info_Intelligence_State_Memory_Value_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Memory_Value_intelligence_2eproto);
  return &protobuf::_Intelligence_State_Memory_Value_default_instance_;
}

void protobuf::Intelligence_State_Memory_Value::Clear(protobuf::Intelligence_State_Memory_Value *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v3 = *((_BYTE *)this + 8);
  v2 = (protobuf::Intelligence_State_Memory_Value *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

google::protobuf::internal *protobuf::Intelligence_State_Memory_Value::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  google::protobuf::internal *v8;
  const char *v9;
  BOOL v10;
  int v11;
  std::string::value_type *v12;
  int *v13;
  uint64_t v14;
  int v15;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  result = v20;
  if ((v5 & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 24);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v9) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_6;
      v9 = (const char *)(v9 + (*(unsigned __int8 *)v8 << 7) - 128);
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v9);
      v20 = result;
      if (!result)
        return result;
      v8 = result;
LABEL_7:
      if ((_DWORD)v9 == 10)
      {
        result = (google::protobuf::internal *)((char *)v8 - 1);
        while (1)
        {
          v12 = (char *)result + 1;
          v20 = (google::protobuf::internal *)((char *)result + 1);
          v13 = *(int **)(a1 + 40);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 32);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 36))
            {
LABEL_21:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v15 + 1);
              v13 = *(int **)(a1 + 40);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v17 = (google::protobuf::internal::ArenaImpl *)*v7;
            if (*v7)
            {
              if (*((_QWORD *)v17 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v17, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v18 = *(_QWORD *)(a1 + 40);
            v19 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = AlignedAndAddCleanup;
            v12 = (std::string::value_type *)v20;
            goto LABEL_28;
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          AlignedAndAddCleanup = *(std::string **)&v13[2 * v14 + 2];
LABEL_28:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v12, (uint64_t)this);
          v20 = result;
          if (!result)
            return result;
          if (*(_QWORD *)this <= (unint64_t)result || *(_BYTE *)result != 10)
            goto LABEL_13;
        }
        v15 = *(_DWORD *)(a1 + 36);
        goto LABEL_21;
      }
      if ((_DWORD)v9)
        v10 = (v9 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
        *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
        return v8;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), v8, this);
      v20 = result;
      if (!result)
        return result;
LABEL_13:
      v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
      result = v20;
      if (v11)
        return result;
    }
    v8 = (google::protobuf::internal *)((char *)result + 2);
LABEL_6:
    v20 = v8;
    goto LABEL_7;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_State_Memory_Value::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_Memory_Value *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v6 = *((_DWORD *)this + 8);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, a2);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
    return (unsigned __int8 *)a2;
  v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v13 + 23) < 0)
  {
    v15 = *(void **)v13;
    v14 = *(_QWORD *)(v13 + 8);
  }
  else
  {
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 23);
    v15 = (void *)v13;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v14)
  {
    v16 = (int)v14;
    memcpy(a2, v15, (int)v14);
    a2 += v16;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v15, v14, (unsigned __int8 *)a2);
}

uint64_t protobuf::Intelligence_State_Memory_Value::ByteSizeLong(protobuf::Intelligence_State_Memory_Value *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = *(unsigned __int8 *)(v9 + 23);
    v4 += v10;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void protobuf::Intelligence_State_Memory_Value::CheckTypeAndMergeFrom(protobuf::Intelligence_State_Memory_Value *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_Memory_Value::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_Memory_Value::MergeFrom(protobuf::Intelligence_State_Memory_Value *this, const protobuf::Intelligence_State_Memory_Value *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10622);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
}

void sub_22AF318F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Memory_Value::CopyFrom(protobuf::Intelligence_State_Memory_Value *this, const protobuf::Intelligence_State_Memory_Value *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_Memory_Value::Clear(this);
    protobuf::Intelligence_State_Memory_Value::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_Memory_Value::IsInitialized(protobuf::Intelligence_State_Memory_Value *this)
{
  return 1;
}

void protobuf::Intelligence_State_Memory_Value::InternalSwap(protobuf::Intelligence_State_Memory_Value *this, protobuf::Intelligence_State_Memory_Value *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v13;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State_Memory_Value *)((char *)this + 24), (protobuf::Intelligence_State_Memory_Value *)((char *)a2 + 24));
}

_QWORD *protobuf::Intelligence_State_Memory_Value::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.Memory.Value");
}

void protobuf::Intelligence_State_Memory::InitAsDefaultInstance(protobuf::Intelligence_State_Memory *this)
{
  qword_255B58C58 = (uint64_t)&protobuf::_Intelligence_State_Memory_Value_default_instance_;
}

uint64_t protobuf::Intelligence_State_Memory::_Internal::values(protobuf::Intelligence_State_Memory::_Internal *this, const protobuf::Intelligence_State_Memory *a2)
{
  return *((_QWORD *)this + 5);
}

protobuf::Intelligence_State_Memory *protobuf::Intelligence_State_Memory::Intelligence_State_Memory(protobuf::Intelligence_State_Memory *this)
{
  *(_QWORD *)this = &off_24F541AF8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_Memory_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Memory_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  return this;
}

void sub_22AF31A98(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Memory *protobuf::Intelligence_State_Memory::Intelligence_State_Memory(protobuf::Intelligence_State_Memory *this, const protobuf::Intelligence_State_Memory *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  protobuf::Intelligence_State_Memory_Value *v8;
  std::string *v9;
  char v11;
  std::string v12[2];

  *(_QWORD *)this = &off_24F541AF8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v5 & 4) != 0)
  {
    if (!*((_QWORD *)a2 + 5))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 19390);
      v9 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: !value || values_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
    }
    v8 = (protobuf::Intelligence_State_Memory_Value *)operator new();
    protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value(v8, *((const protobuf::Intelligence_State_Memory_Value **)a2 + 5));
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 5) = v8;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return this;
}

void sub_22AF31BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Memory::~Intelligence_State_Memory(protobuf::Intelligence_State_Memory *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_24F541AF8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_State_Memory *)&protobuf::_Intelligence_State_Memory_default_instance_)
  {
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_Memory::~Intelligence_State_Memory(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_Memory::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_Memory::default_instance(protobuf::Intelligence_State_Memory *this)
{
  if (atomic_load(scc_info_Intelligence_State_Memory_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Memory_intelligence_2eproto);
  return &protobuf::_Intelligence_State_Memory_default_instance_;
}

void protobuf::Intelligence_State_Memory::Clear(protobuf::Intelligence_State_Memory *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  protobuf::Intelligence_State_Memory_Value *v5;
  std::string *v6;
  char *v7;
  char v8;
  char v9;
  std::string v10[2];

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) == 0)
    goto LABEL_17;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v4 = *((_QWORD *)this + 4);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) == 0)
      goto LABEL_17;
  }
LABEL_14:
  v5 = (protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)this + 5);
  if (!v5)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10752);
    v6 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: values_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v5 = (protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)this + 5);
  }
  protobuf::Intelligence_State_Memory_Value::Clear(v5);
LABEL_17:
  v8 = *((_BYTE *)this + 8);
  v7 = (char *)this + 8;
  v7[40] = 0;
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v7);
}

void sub_22AF31E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_State_Memory::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  protobuf::Intelligence_State_Memory_Value *v11;
  unsigned int v12;
  char *v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  char *SizeFallback;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  google::protobuf::internal *v24;
  int v25;
  google::protobuf::internal *v26;
  uint64_t v27;
  std::string **v28;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v29, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v28 = (std::string **)(a1 + 32);
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v29;
      if (*(char *)v29 < 0)
      {
        v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v8);
          v29 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
          goto LABEL_9;
        }
        TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
      }
      v29 = TagFallback;
LABEL_9:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 10)
            goto LABEL_28;
          *(_DWORD *)(a1 + 16) |= 1u;
          v9 = *(std::string **)(a1 + 24);
          if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_17;
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v9 = *(std::string **)(a1 + 24);
          goto LABEL_16;
        case 2u:
          if (v8 != 18)
            goto LABEL_28;
          *(_DWORD *)(a1 + 16) |= 2u;
          v9 = *(std::string **)(a1 + 32);
          if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v28, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v9 = *v28;
LABEL_16:
            TagFallback = v29;
          }
LABEL_17:
          v10 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, (std::string::value_type *)TagFallback, (uint64_t)this);
          goto LABEL_33;
        case 3u:
          if (v8 != 26)
            goto LABEL_28;
          *(_DWORD *)(a1 + 16) |= 4u;
          v11 = *(protobuf::Intelligence_State_Memory_Value **)(a1 + 40);
          if (!v11)
          {
            v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(0);
            *(_QWORD *)(a1 + 40) = v11;
            TagFallback = v29;
          }
          v12 = *(unsigned __int8 *)TagFallback;
          if (*(char *)TagFallback < 0)
          {
            SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
            if (!SizeFallback)
              goto LABEL_46;
            v13 = SizeFallback;
            v12 = v19;
          }
          else
          {
            v13 = (char *)TagFallback + 1;
          }
          v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v13, v12);
          v21 = *((_DWORD *)this + 22);
          v22 = __OFSUB__(v21--, 1);
          *((_DWORD *)this + 22) = v21;
          if (v21 < 0 != v22)
            goto LABEL_46;
          v23 = v20;
          v24 = protobuf::Intelligence_State_Memory_Value::_InternalParse((uint64_t)v11, (google::protobuf::internal *)v13, this);
          if (!v24)
            goto LABEL_46;
          ++*((_DWORD *)this + 22);
          if (*((_DWORD *)this + 20))
            goto LABEL_46;
          v25 = *((_DWORD *)this + 7) + v23;
          *((_DWORD *)this + 7) = v25;
          *(_QWORD *)this = *((_QWORD *)this + 1) + (v25 & (v25 >> 31));
          v29 = v24;
          goto LABEL_43;
        case 4u:
          if (v8 != 32)
            goto LABEL_28;
          v5 |= 8u;
          v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v15 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_27;
          v16 = *(char *)v14;
          v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            v26 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v15);
            v29 = v26;
            *(_BYTE *)(a1 + 48) = v27 != 0;
            if (!v26)
              goto LABEL_46;
          }
          else
          {
            v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_27:
            v29 = v14;
            *(_BYTE *)(a1 + 48) = v15 != 0;
          }
          goto LABEL_43;
        default:
LABEL_28:
          if ((_DWORD)v8)
            v17 = (v8 & 7) == 4;
          else
            v17 = 1;
          if (v17)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_33:
          v29 = v10;
          if (!v10)
          {
LABEL_46:
            TagFallback = 0;
            goto LABEL_3;
          }
LABEL_43:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v29, *((_DWORD *)this + 23)))goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  TagFallback = v29;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_State_Memory::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_Memory *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  protobuf::Intelligence_State_Memory_Value *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_21;
    goto LABEL_18;
  }
LABEL_8:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = (protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)this + 5);
  *v4 = 26;
  v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    v10 = v8 >> 7;
    if (v8 >> 14)
    {
      v9 = v4 + 3;
      do
      {
        *(v9 - 1) = v10 | 0x80;
        v11 = v10 >> 7;
        ++v9;
        v12 = v10 >> 14;
        v10 >>= 7;
      }
      while (v12);
      *(v9 - 1) = v11;
    }
    else
    {
      v4[2] = v10;
      v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    v9 = v4 + 2;
  }
  v4 = (char *)protobuf::Intelligence_State_Memory_Value::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  if ((v6 & 8) != 0)
  {
LABEL_18:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v13 = *((_BYTE *)this + 48);
    *v4 = 32;
    v4[1] = v13;
    v4 += 2;
  }
LABEL_21:
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)v4;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 23) < 0)
  {
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    LODWORD(v17) = *(unsigned __int8 *)(v16 + 23);
    v18 = (void *)v16;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v17)
  {
    v19 = (int)v17;
    memcpy(v4, v18, (int)v17);
    v4 += v19;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v18, v17, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_Memory::ByteSizeLong(protobuf::Intelligence_State_Memory *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) == 0)
  {
    result = 0;
    goto LABEL_17;
  }
  if ((v2 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 3);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    v8 = *((_QWORD *)this + 4);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v10 = *(_QWORD *)(v8 + 8);
    if ((v9 & 0x80u) == 0)
      v10 = v9;
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    v11 = protobuf::Intelligence_State_Memory_Value::ByteSizeLong(*((protobuf::Intelligence_State_Memory_Value **)this
                                                                  + 5));
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if ((v2 & 8) != 0)
    result = v3 + 2;
  else
    result = v3;
LABEL_17:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = *(unsigned __int8 *)(v13 + 23);
    result += v14;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

void protobuf::Intelligence_State_Memory::CheckTypeAndMergeFrom(protobuf::Intelligence_State_Memory *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_Memory::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_Memory::MergeFrom(protobuf::Intelligence_State_Memory *this, const protobuf::Intelligence_State_Memory *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  protobuf::Intelligence_State_Memory_Value *v11;
  const protobuf::Intelligence_State_Memory_Value *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 10913);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            *((_DWORD *)this + 4) |= 4u;
            v11 = (protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)this + 5);
            if (!v11)
            {
              v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(0);
              *((_QWORD *)this + 5) = v11;
            }
            if (*((_QWORD *)a2 + 5))
              v12 = (const protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)a2 + 5);
            else
              v12 = (const protobuf::Intelligence_State_Memory_Value *)&protobuf::_Intelligence_State_Memory_Value_default_instance_;
            protobuf::Intelligence_State_Memory_Value::MergeFrom(v11, v12);
          }
          if ((v6 & 8) != 0)
            *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
          *((_DWORD *)this + 4) |= v6;
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF3263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Memory::CopyFrom(protobuf::Intelligence_State_Memory *this, const protobuf::Intelligence_State_Memory *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_Memory::Clear(this);
    protobuf::Intelligence_State_Memory::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_Memory::IsInitialized(protobuf::Intelligence_State_Memory *this)
{
  return 1;
}

void protobuf::Intelligence_State_Memory::InternalSwap(protobuf::Intelligence_State_Memory *this, protobuf::Intelligence_State_Memory *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  LOBYTE(v25) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v25;
}

_QWORD *protobuf::Intelligence_State_Memory::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.Memory");
}

protobuf::Intelligence_State_InputGroup *protobuf::Intelligence_State_InputGroup::Intelligence_State_InputGroup(protobuf::Intelligence_State_InputGroup *this)
{
  *(_QWORD *)this = &off_24F541B88;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_InputGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_InputGroup_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF328DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_InputGroup *protobuf::Intelligence_State_InputGroup::Intelligence_State_InputGroup(protobuf::Intelligence_State_InputGroup *this, const protobuf::Intelligence_State_InputGroup *a2)
{
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)this = &off_24F541B88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v5);
  }
  return this;
}

void sub_22AF32978(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_InputGroup::~Intelligence_State_InputGroup(protobuf::Intelligence_State_InputGroup *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541B88;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_InputGroup::~Intelligence_State_InputGroup(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_InputGroup::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_InputGroup::default_instance(protobuf::Intelligence_State_InputGroup *this)
{
  if (atomic_load(scc_info_Intelligence_State_InputGroup_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_InputGroup_intelligence_2eproto);
  return &protobuf::_Intelligence_State_InputGroup_default_instance_;
}

void protobuf::Intelligence_State_InputGroup::Clear(protobuf::Intelligence_State_InputGroup *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 3);
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (protobuf::Intelligence_State_InputGroup *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

google::protobuf::internal *protobuf::Intelligence_State_InputGroup::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  std::string::value_type *v7;
  const char *v8;
  BOOL v9;
  std::string *v10;
  int v11;
  google::protobuf::internal *v12;

  v12 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
  result = v12;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v12 = result;
      if (!result)
        return result;
      v7 = (std::string::value_type *)result;
LABEL_6:
      if ((_DWORD)v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *(std::string **)(a1 + 24);
          v7 = (std::string::value_type *)v12;
        }
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, v7, (uint64_t)this);
      }
      else
      {
        if ((_DWORD)v8)
          v9 = (v8 & 7) == 4;
        else
          v9 = 1;
        if (v9)
        {
          *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
          return (google::protobuf::internal *)v7;
        }
        result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
      }
      v12 = result;
      if (result)
      {
        v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
        result = v12;
        if (!v11)
          continue;
      }
      return result;
    }
    v7 = (char *)result + 2;
LABEL_5:
    v12 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_State_InputGroup::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_InputGroup *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v4 = (unsigned __int8 *)a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) == 0)
    return v4;
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v8 + 23) < 0)
  {
    v10 = *(void **)v8;
    v9 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    LODWORD(v9) = *(unsigned __int8 *)(v8 + 23);
    v10 = (void *)v8;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v9)
  {
    v11 = (int)v9;
    memcpy(v4, v10, (int)v9);
    v4 += v11;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v10, v9, v4);
}

uint64_t protobuf::Intelligence_State_InputGroup::ByteSizeLong(protobuf::Intelligence_State_InputGroup *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    v3 = *(unsigned __int8 *)(v2 + 23);
    v4 = *(_QWORD *)(v2 + 8);
    if ((v3 & 0x80u) == 0)
      v4 = v3;
    v1 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v1 = 0;
  }
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) != 0)
  {
    v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = *(unsigned __int8 *)(v7 + 23);
    v1 += v8;
  }
  *((_DWORD *)this + 5) = v1;
  return v1;
}

void protobuf::Intelligence_State_InputGroup::CheckTypeAndMergeFrom(protobuf::Intelligence_State_InputGroup *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_InputGroup::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_InputGroup::MergeFrom(protobuf::Intelligence_State_InputGroup *this, const protobuf::Intelligence_State_InputGroup *a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;
  const std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 11121);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v8 = (std::string *)*((_QWORD *)this + 3);
    v7 = (std::string **)((char *)this + 24);
    v6 = v8;
    *((_DWORD *)v7 - 2) |= 1u;
    v9 = (const std::string *)*((_QWORD *)a2 + 3);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)v9);
      else
        std::string::operator=(v6, v9);
    }
  }
}

void sub_22AF32E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_InputGroup::CopyFrom(protobuf::Intelligence_State_InputGroup *this, const protobuf::Intelligence_State_InputGroup *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_InputGroup::Clear(this);
    protobuf::Intelligence_State_InputGroup::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_InputGroup::IsInitialized(protobuf::Intelligence_State_InputGroup *this)
{
  return 1;
}

__n128 protobuf::Intelligence_State_InputGroup::InternalSwap(protobuf::Intelligence_State_InputGroup *this, protobuf::Intelligence_State_InputGroup *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  std::string **v12;
  std::string *v13;
  uint64_t *v14;
  int v15;
  std::string **v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unint64_t v20;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v20;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v14 = (uint64_t *)*((_QWORD *)this + 3);
  v12 = (std::string **)((char *)this + 24);
  v13 = (std::string *)v14;
  v15 = *((_DWORD *)v12 - 2);
  *((_DWORD *)v12 - 2) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  v16 = (std::string **)((char *)a2 + 24);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = *v12;
  }
  v17 = *v16;
  if (*v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v17 = *v16;
  }
  v18 = v13->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v13->__r_.__value_.__l.__data_;
  v19 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v13->__r_.__value_.__r.__words[2] = v19;
  *(__n128 *)&v17->__r_.__value_.__l.__data_ = result;
  v17->__r_.__value_.__r.__words[2] = v18;
  return result;
}

_QWORD *protobuf::Intelligence_State_InputGroup::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.InputGroup");
}

protobuf::Intelligence_State_Event *protobuf::Intelligence_State_Event::Intelligence_State_Event(protobuf::Intelligence_State_Event *this)
{
  *(_QWORD *)this = &off_24F541C18;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Event_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_22AF33040(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Event *protobuf::Intelligence_State_Event::Intelligence_State_Event(protobuf::Intelligence_State_Event *this, const protobuf::Intelligence_State_Event *a2)
{
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)this = &off_24F541C18;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v5);
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void sub_22AF330E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Event::~Intelligence_State_Event(protobuf::Intelligence_State_Event *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541C18;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_Event::~Intelligence_State_Event(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_Event::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_Event::default_instance(protobuf::Intelligence_State_Event *this)
{
  if (atomic_load(scc_info_Intelligence_State_Event_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Event_intelligence_2eproto);
  return &protobuf::_Intelligence_State_Event_default_instance_;
}

void protobuf::Intelligence_State_Event::Clear(protobuf::Intelligence_State_Event *this)
{
  uint64_t v1;
  char *v2;
  char v3;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 3);
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (char *)this + 8;
  *((_QWORD *)v2 + 3) = 0;
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v2);
}

char *protobuf::Intelligence_State_Event::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  const char *v8;
  BOOL v10;
  google::protobuf::internal *v11;
  std::string *v12;
  google::protobuf::internal *v13;

  v13 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (char *)v13 + 1;
      LODWORD(v8) = *(unsigned __int8 *)v13;
      if ((*(char *)v13 & 0x80000000) == 0)
        goto LABEL_7;
      v8 = (const char *)(v8 + (*TagFallback << 7) - 128);
      if ((*TagFallback & 0x80000000) == 0)
        break;
      TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v13, v8);
      v13 = (google::protobuf::internal *)TagFallback;
      if (!TagFallback)
        goto LABEL_3;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 17)
        {
          v5 |= 2u;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)TagFallback;
          v13 = (google::protobuf::internal *)(TagFallback + 8);
          goto LABEL_24;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v12 = *(std::string **)(a1 + 24);
        if (v12 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v12 = *(std::string **)(a1 + 24);
          TagFallback = (char *)v13;
        }
        v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, TagFallback, (uint64_t)this);
        goto LABEL_23;
      }
      if ((_DWORD)v8)
        v10 = (v8 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        goto LABEL_3;
      }
      v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_23:
      v13 = v11;
      if (!v11)
      {
        TagFallback = 0;
        goto LABEL_3;
      }
LABEL_24:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23)))goto LABEL_2;
    }
    TagFallback = (char *)v13 + 2;
LABEL_7:
    v13 = (google::protobuf::internal *)TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = (char *)v13;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_State_Event::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_Event *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v7 = *((_QWORD *)this + 4);
    *v4 = 17;
    *(_QWORD *)(v4 + 1) = v7;
    v4 += 9;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) == 0)
    return (unsigned __int8 *)v4;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(v10 + 23);
    v12 = (void *)v10;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_Event::ByteSizeLong(protobuf::Intelligence_State_Event *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 3);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v3 = v2 + 9;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
      v10 = *(_QWORD *)(v9 + 8);
    else
      v10 = *(unsigned __int8 *)(v9 + 23);
    v3 += v10;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_State_Event::CheckTypeAndMergeFrom(protobuf::Intelligence_State_Event *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_Event::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_Event::MergeFrom(protobuf::Intelligence_State_Event *this, const protobuf::Intelligence_State_Event *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 11338);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
    {
LABEL_12:
      *((_DWORD *)this + 4) |= v6;
      return;
    }
LABEL_11:
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    goto LABEL_12;
  }
}

void sub_22AF33684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Event::CopyFrom(protobuf::Intelligence_State_Event *this, const protobuf::Intelligence_State_Event *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_Event::Clear(this);
    protobuf::Intelligence_State_Event::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_Event::IsInitialized(protobuf::Intelligence_State_Event *this)
{
  return 1;
}

double protobuf::Intelligence_State_Event::InternalSwap(protobuf::Intelligence_State_Event *this, protobuf::Intelligence_State_Event *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  double result;
  unint64_t v20;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v20;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

_QWORD *protobuf::Intelligence_State_Event::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.Event");
}

protobuf::Intelligence_State_Response *protobuf::Intelligence_State_Response::Intelligence_State_Response(protobuf::Intelligence_State_Response *this)
{
  *(_QWORD *)this = &off_24F541CA8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_Response_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Response_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_22AF3389C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Response *protobuf::Intelligence_State_Response::Intelligence_State_Response(protobuf::Intelligence_State_Response *this, const protobuf::Intelligence_State_Response *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24F541CA8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v5);
  }
  v6 = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 4) = v6;
  return this;
}

void sub_22AF33948(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Response::~Intelligence_State_Response(protobuf::Intelligence_State_Response *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541CA8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_Response::~Intelligence_State_Response(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_Response::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_Response::default_instance(protobuf::Intelligence_State_Response *this)
{
  if (atomic_load(scc_info_Intelligence_State_Response_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Response_intelligence_2eproto);
  return &protobuf::_Intelligence_State_Response_default_instance_;
}

void protobuf::Intelligence_State_Response::Clear(protobuf::Intelligence_State_Response *this)
{
  int v1;
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  if ((v1 & 6) != 0)
  {
    *((_DWORD *)this + 10) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::Intelligence_State_Response *)((char *)this + 8);
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

google::protobuf::internal *protobuf::Intelligence_State_Response::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  unsigned int v9;
  BOOL v11;
  google::protobuf::internal *v12;
  unint64_t v13;
  google::protobuf::internal *v14;
  int v15;
  std::string *v16;
  google::protobuf::internal *v17;
  int v18;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v19;
      if ((*(char *)v19 & 0x80000000) == 0)
        goto LABEL_7;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v8);
      v19 = TagFallback;
      if (!TagFallback)
        goto LABEL_3;
LABEL_8:
      v9 = v8 >> 3;
      if (v8 >> 3 != 3)
      {
        if (v9 == 2)
        {
          if (v8 == 17)
          {
            v5 |= 2u;
            *(_QWORD *)(a1 + 32) = *(_QWORD *)TagFallback;
            v19 = (google::protobuf::internal *)((char *)TagFallback + 8);
            goto LABEL_30;
          }
LABEL_14:
          if ((_DWORD)v8)
            v11 = (v8 & 7) == 4;
          else
            v11 = 1;
          if (v11)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
        }
        else
        {
          if (v9 != 1 || v8 != 10)
            goto LABEL_14;
          *(_DWORD *)(a1 + 16) |= 1u;
          v16 = *(std::string **)(a1 + 24);
          if (v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v16 = *(std::string **)(a1 + 24);
            TagFallback = v19;
          }
          v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v16, (std::string::value_type *)TagFallback, (uint64_t)this);
        }
        v19 = v12;
        if (!v12)
          goto LABEL_35;
        goto LABEL_30;
      }
      if (v8 != 24)
        goto LABEL_14;
      v5 |= 4u;
      v14 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v13) = *(unsigned __int8 *)TagFallback;
      if ((v13 & 0x80) == 0)
        goto LABEL_23;
      v15 = *(char *)v14;
      v13 = v13 + (v15 << 7) - 128;
      if ((v15 & 0x80000000) == 0)
      {
        v14 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_23:
        v19 = v14;
        *(_DWORD *)(a1 + 40) = v13;
        goto LABEL_30;
      }
      v17 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
      v19 = v17;
      *(_DWORD *)(a1 + 40) = v18;
      if (!v17)
      {
LABEL_35:
        TagFallback = 0;
        goto LABEL_3;
      }
LABEL_30:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v19, *((_DWORD *)this + 23)))goto LABEL_2;
    }
    TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_7:
    v19 = TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = v19;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_State_Response::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_Response *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_QWORD *)this + 4);
  *v4 = 17;
  *(_QWORD *)(v4 + 1) = v7;
  v4 += 9;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((int *)this + 10);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) == 0)
    return (unsigned __int8 *)v4;
  v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 23) < 0)
  {
    v16 = *(void **)v14;
    v15 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
    v16 = (void *)v14;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v15)
  {
    v17 = (int)v15;
    memcpy(v4, v16, (int)v15);
    v4 += v17;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v15, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_Response::ByteSizeLong(protobuf::Intelligence_State_Response *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 3);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v5 = *(_QWORD *)(v3 + 8);
      if ((v4 & 0x80u) == 0)
        v5 = v4;
      v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v2 = 0;
    }
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
    {
      v6 = *((_DWORD *)this + 10);
      v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v6 >= 0)
        v8 = v7;
      else
        v8 = 11;
      v2 += v8;
    }
  }
  else
  {
    v2 = 0;
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_State_Response::CheckTypeAndMergeFrom(protobuf::Intelligence_State_Response *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_Response::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_Response::MergeFrom(protobuf::Intelligence_State_Response *this, const protobuf::Intelligence_State_Response *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 11595);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
    {
LABEL_12:
      if ((v6 & 4) != 0)
        *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
      *((_DWORD *)this + 4) |= v6;
      return;
    }
LABEL_11:
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    goto LABEL_12;
  }
}

void sub_22AF34024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Response::CopyFrom(protobuf::Intelligence_State_Response *this, const protobuf::Intelligence_State_Response *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_Response::Clear(this);
    protobuf::Intelligence_State_Response::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_Response::IsInitialized(protobuf::Intelligence_State_Response *this)
{
  return 1;
}

double protobuf::Intelligence_State_Response::InternalSwap(protobuf::Intelligence_State_Response *this, protobuf::Intelligence_State_Response *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  double result;
  int v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v20 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v20;
  return result;
}

_QWORD *protobuf::Intelligence_State_Response::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.Response");
}

protobuf::Intelligence_State_Timer *protobuf::Intelligence_State_Timer::Intelligence_State_Timer(protobuf::Intelligence_State_Timer *this)
{
  *(_QWORD *)this = &off_24F541D38;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_Timer_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Timer_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  return this;
}

void sub_22AF34250(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Timer *protobuf::Intelligence_State_Timer::Intelligence_State_Timer(protobuf::Intelligence_State_Timer *this, const protobuf::Intelligence_State_Timer *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24F541D38;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  v8 = *((_QWORD *)a2 + 5);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_QWORD *)this + 5) = v8;
  return this;
}

void sub_22AF3431C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Timer::~Intelligence_State_Timer(protobuf::Intelligence_State_Timer *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F541D38;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_Timer::~Intelligence_State_Timer(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_Timer::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_Timer::default_instance(protobuf::Intelligence_State_Timer *this)
{
  if (atomic_load(scc_info_Intelligence_State_Timer_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_Timer_intelligence_2eproto);
  return &protobuf::_Intelligence_State_Timer_default_instance_;
}

void protobuf::Intelligence_State_Timer::Clear(protobuf::Intelligence_State_Timer *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *((_QWORD *)this + 3);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  if ((v1 & 0xC) != 0)
  {
    *((_BYTE *)this + 48) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::Intelligence_State_Timer *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

char *protobuf::Intelligence_State_Timer::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  google::protobuf::internal *v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  google::protobuf::internal *v15;
  uint64_t v16;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (char *)v17 + 1;
      LODWORD(v8) = *(unsigned __int8 *)v17;
      if (*(char *)v17 < 0)
      {
        v8 = (const char *)(v8 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v17, v8);
          v17 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback)
            goto LABEL_3;
          goto LABEL_8;
        }
        TagFallback = (char *)v17 + 2;
      }
      v17 = (google::protobuf::internal *)TagFallback;
LABEL_8:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 10)
            goto LABEL_24;
          *(_DWORD *)(a1 + 16) |= 1u;
          v9 = *(std::string **)(a1 + 24);
          if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_16;
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v9 = *(std::string **)(a1 + 24);
          goto LABEL_15;
        case 2u:
          if (v8 != 18)
            goto LABEL_24;
          *(_DWORD *)(a1 + 16) |= 2u;
          v9 = *(std::string **)(a1 + 32);
          if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v9 = *(std::string **)(a1 + 32);
LABEL_15:
            TagFallback = (char *)v17;
          }
LABEL_16:
          v10 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, TagFallback, (uint64_t)this);
          goto LABEL_29;
        case 3u:
          if (v8 != 25)
            goto LABEL_24;
          v5 |= 4u;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)TagFallback;
          v17 = (google::protobuf::internal *)(TagFallback + 8);
          goto LABEL_30;
        case 4u:
          if (v8 != 32)
            goto LABEL_24;
          v5 |= 8u;
          v11 = (google::protobuf::internal *)(TagFallback + 1);
          v12 = *TagFallback;
          if ((*TagFallback & 0x80000000) == 0)
            goto LABEL_23;
          v13 = *(char *)v11;
          v12 = v12 + (v13 << 7) - 128;
          if (v13 < 0)
          {
            v15 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v12);
            v17 = v15;
            *(_BYTE *)(a1 + 48) = v16 != 0;
            if (!v15)
              goto LABEL_35;
          }
          else
          {
            v11 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_23:
            v17 = v11;
            *(_BYTE *)(a1 + 48) = v12 != 0;
          }
          goto LABEL_30;
        default:
LABEL_24:
          if ((_DWORD)v8)
            v14 = (v8 & 7) == 4;
          else
            v14 = 1;
          if (v14)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v10 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_29:
          v17 = v10;
          if (!v10)
          {
LABEL_35:
            TagFallback = 0;
            goto LABEL_3;
          }
LABEL_30:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)))goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  TagFallback = (char *)v17;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_State_Timer::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_Timer *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_14;
    goto LABEL_11;
  }
LABEL_8:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_QWORD *)this + 5);
  *v4 = 25;
  *(_QWORD *)(v4 + 1) = v7;
  v4 += 9;
  if ((v6 & 8) != 0)
  {
LABEL_11:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((_BYTE *)this + 48);
    *v4 = 32;
    v4[1] = v8;
    v4 += 2;
  }
LABEL_14:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) == 0)
    return (unsigned __int8 *)v4;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v11 + 23) < 0)
  {
    v13 = *(void **)v11;
    v12 = *(_QWORD *)(v11 + 8);
  }
  else
  {
    LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
    v13 = (void *)v11;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v12)
  {
    v14 = (int)v12;
    memcpy(v4, v13, (int)v12);
    v4 += v14;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v13, v12, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_Timer::ByteSizeLong(protobuf::Intelligence_State_Timer *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0xF) == 0)
  {
    v3 = 0;
    goto LABEL_17;
  }
  if ((v1 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 4);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
    v2 += 9;
  if ((v1 & 8) != 0)
    v3 = v2 + 2;
  else
    v3 = v2;
LABEL_17:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = *(unsigned __int8 *)(v12 + 23);
    v3 += v13;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_State_Timer::CheckTypeAndMergeFrom(protobuf::Intelligence_State_Timer *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_Timer::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_Timer::MergeFrom(protobuf::Intelligence_State_Timer *this, const protobuf::Intelligence_State_Timer *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 11888);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
            *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
          if ((v6 & 8) != 0)
            *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
          *((_DWORD *)this + 4) |= v6;
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF34B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_Timer::CopyFrom(protobuf::Intelligence_State_Timer *this, const protobuf::Intelligence_State_Timer *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_Timer::Clear(this);
    protobuf::Intelligence_State_Timer::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_Timer::IsInitialized(protobuf::Intelligence_State_Timer *this)
{
  return 1;
}

double protobuf::Intelligence_State_Timer::InternalSwap(protobuf::Intelligence_State_Timer *this, protobuf::Intelligence_State_Timer *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  double result;
  char v26;
  unint64_t v27;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v27;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  v26 = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v26;
  return result;
}

_QWORD *protobuf::Intelligence_State_Timer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.Timer");
}

protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Intelligence_State_ExecutionState_Frame_ResponseState(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  *(_QWORD *)this = &off_24F541DC8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_Frame_ResponseState_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_Frame_ResponseState_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_WORD *)this + 20) = 0;
  *((_BYTE *)this + 42) = 0;
  return this;
}

void sub_22AF34DAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Intelligence_State_ExecutionState_Frame_ResponseState(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, const protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  __int16 v8;

  *(_QWORD *)this = &off_24F541DC8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  v8 = *((_WORD *)a2 + 20);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_WORD *)this + 20) = v8;
  return this;
}

void sub_22AF34E78(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::~Intelligence_State_ExecutionState_Frame_ResponseState(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F541DC8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::~Intelligence_State_ExecutionState_Frame_ResponseState(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::default_instance(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_Frame_ResponseState_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_Frame_ResponseState_intelligence_2eproto);
  return &protobuf::_Intelligence_State_ExecutionState_Frame_ResponseState_default_instance_;
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Clear(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (char *)this + 8;
  v4[34] = 0;
  *((_WORD *)v4 + 16) = 0;
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v4);
}

google::protobuf::internal *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  google::protobuf::internal *v16;
  google::protobuf::internal *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  google::protobuf::internal *v21;
  uint64_t v22;
  google::protobuf::internal *v23;
  uint64_t v24;
  google::protobuf::internal *v25;
  uint64_t v26;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v27, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v27;
      if (*(char *)v27 < 0)
      {
        v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v8);
          v27 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
          goto LABEL_8;
        }
        TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
      }
      v27 = TagFallback;
LABEL_8:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 10)
            goto LABEL_32;
          *(_DWORD *)(a1 + 16) |= 1u;
          v9 = *(std::string **)(a1 + 24);
          if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_26;
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v9 = *(std::string **)(a1 + 24);
          goto LABEL_25;
        case 2u:
          if (v8 != 16)
            goto LABEL_32;
          v5 |= 4u;
          v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v11 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_16;
          v12 = *(char *)v10;
          v11 = v11 + (v12 << 7) - 128;
          if (v12 < 0)
          {
            v21 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
            v27 = v21;
            *(_BYTE *)(a1 + 40) = v22 != 0;
            if (!v21)
              goto LABEL_47;
          }
          else
          {
            v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_16:
            v27 = v10;
            *(_BYTE *)(a1 + 40) = v11 != 0;
          }
          goto LABEL_38;
        case 3u:
          if (v8 != 24)
            goto LABEL_32;
          v5 |= 8u;
          v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v14 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_21;
          v15 = *(char *)v13;
          v14 = v14 + (v15 << 7) - 128;
          if (v15 < 0)
          {
            v23 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
            v27 = v23;
            *(_BYTE *)(a1 + 41) = v24 != 0;
            if (!v23)
              goto LABEL_47;
          }
          else
          {
            v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_21:
            v27 = v13;
            *(_BYTE *)(a1 + 41) = v14 != 0;
          }
          goto LABEL_38;
        case 4u:
          if (v8 != 34)
            goto LABEL_32;
          *(_DWORD *)(a1 + 16) |= 2u;
          v9 = *(std::string **)(a1 + 32);
          if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v9 = *(std::string **)(a1 + 32);
LABEL_25:
            TagFallback = v27;
          }
LABEL_26:
          v16 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, (std::string::value_type *)TagFallback, (uint64_t)this);
          goto LABEL_37;
        case 5u:
          if (v8 != 40)
            goto LABEL_32;
          v5 |= 0x10u;
          v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
          v18 = *(unsigned __int8 *)TagFallback;
          if ((*(char *)TagFallback & 0x80000000) == 0)
            goto LABEL_31;
          v19 = *(char *)v17;
          v18 = v18 + (v19 << 7) - 128;
          if (v19 < 0)
          {
            v25 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
            v27 = v25;
            *(_BYTE *)(a1 + 42) = v26 != 0;
            if (!v25)
              goto LABEL_47;
          }
          else
          {
            v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_31:
            v27 = v17;
            *(_BYTE *)(a1 + 42) = v18 != 0;
          }
          goto LABEL_38;
        default:
LABEL_32:
          if ((_DWORD)v8)
            v20 = (v8 & 7) == 4;
          else
            v20 = 1;
          if (v20)
          {
            *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
            goto LABEL_3;
          }
          v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_37:
          v27 = v16;
          if (!v16)
          {
LABEL_47:
            TagFallback = 0;
            goto LABEL_3;
          }
LABEL_38:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v27, *((_DWORD *)this + 23)))goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  TagFallback = v27;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_BYTE *)this + 40);
  *v4 = 16;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v8 = *((_BYTE *)this + 41);
  *v4 = 24;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 2) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_15;
  }
LABEL_14:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 4), v4);
  if ((v6 & 0x10) == 0)
    goto LABEL_18;
LABEL_15:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 42);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
LABEL_18:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) == 0)
    return (unsigned __int8 *)v4;
  v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v12 + 23) < 0)
  {
    v14 = *(void **)v12;
    v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    LODWORD(v13) = *(unsigned __int8 *)(v12 + 23);
    v14 = (void *)v12;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v13)
  {
    v15 = (int)v13;
    memcpy(v4, v14, (int)v13);
    v4 += v15;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v14, v13, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::ByteSizeLong(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
  {
    v3 = 0;
    goto LABEL_19;
  }
  if ((v1 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 4);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
    v2 += 2;
  if ((v1 & 8) != 0)
    v2 += 2;
  if ((v1 & 0x10) != 0)
    v3 = v2 + 2;
  else
    v3 = v2;
LABEL_19:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
      v13 = *(_QWORD *)(v12 + 8);
    else
      v13 = *(unsigned __int8 *)(v12 + 23);
    v3 += v13;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::CheckTypeAndMergeFrom(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::MergeFrom(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, const protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 12207);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
LABEL_11:
    v9 = (std::string *)*((_QWORD *)this + 4);
    *((_DWORD *)this + 4) |= 2u;
    v10 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v9 != v10)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
      else
        std::string::operator=(v9, v10);
    }
LABEL_17:
    if ((v6 & 4) != 0)
    {
      *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
      if ((v6 & 8) == 0)
      {
LABEL_19:
        if ((v6 & 0x10) == 0)
        {
LABEL_21:
          *((_DWORD *)this + 4) |= v6;
          return;
        }
LABEL_20:
        *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
        goto LABEL_21;
      }
    }
    else if ((v6 & 8) == 0)
    {
      goto LABEL_19;
    }
    *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
    if ((v6 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_22AF35770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::CopyFrom(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, const protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Clear(this);
    protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::IsInitialized(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  return 1;
}

void protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::InternalSwap(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  unint64_t v28;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v28;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v25;
  v26 = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v26;
  v27 = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v27;
}

_QWORD *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.ExecutionState.Frame.ResponseState");
}

protobuf::Intelligence_State_ExecutionState_Frame *protobuf::Intelligence_State_ExecutionState_Frame::Intelligence_State_ExecutionState_Frame(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541E58;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_Frame_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_Frame_intelligence_2eproto);
  return this;
}

void sub_22AF35A24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState_Frame *protobuf::Intelligence_State_ExecutionState_Frame::Intelligence_State_ExecutionState_Frame(protobuf::Intelligence_State_ExecutionState_Frame *this, const protobuf::Intelligence_State_ExecutionState_Frame *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24F541E58;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_22AF35AC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState_Frame::~Intelligence_State_ExecutionState_Frame(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541E58;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State_ExecutionState_Frame *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541E58;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State_ExecutionState_Frame *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24F541E58;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State_ExecutionState_Frame *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_ExecutionState_Frame::default_instance(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_Frame_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_Frame_intelligence_2eproto);
  return &protobuf::_Intelligence_State_ExecutionState_Frame_default_instance_;
}

void protobuf::Intelligence_State_ExecutionState_Frame::Clear(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  uint64_t v2;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v3;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v4;
  std::string *v5;
  google::protobuf::internal::InternalMetadataWithArenaLite *v6;
  char v7;
  char v8;
  std::string v9[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  v7 = *((_BYTE *)this + 8);
  v6 = (protobuf::Intelligence_State_ExecutionState_Frame *)((char *)this + 8);
  *((_DWORD *)v6 + 2) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
}

void sub_22AF35CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_State_ExecutionState_Frame::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  google::protobuf::internal *v7;
  const char *v8;
  BOOL v9;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v27, *((_DWORD *)this + 23));
  result = v27;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)v7 << 7) - 128);
      if ((*(char *)v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v27 = result;
      if (!result)
        return result;
      v7 = result;
LABEL_6:
      if ((_DWORD)v8 == 10)
      {
        result = (google::protobuf::internal *)((char *)v7 - 1);
        while (1)
        {
          v10 = (google::protobuf::internal *)((char *)result + 1);
          v27 = v10;
          v11 = *(int **)(a1 + 40);
          if (!v11)
            break;
          v12 = *(int *)(a1 + 32);
          v13 = *v11;
          if ((int)v12 >= *v11)
          {
            if (v13 == *(_DWORD *)(a1 + 36))
            {
LABEL_19:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
              v11 = *(int **)(a1 + 40);
              v13 = *v11;
            }
            *v11 = v13 + 1;
            v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            v15 = *(_QWORD *)(a1 + 40);
            v16 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v16 + 1;
            *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
            v10 = v27;
            goto LABEL_21;
          }
          *(_DWORD *)(a1 + 32) = v12 + 1;
          v14 = *(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)&v11[2 * v12 + 2];
LABEL_21:
          v17 = *(unsigned __int8 *)v10;
          if (*(char *)v10 < 0)
          {
            result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v10, (const char *)*(unsigned __int8 *)v10);
            if (!result)
              return result;
            v18 = (char *)result;
            v17 = v19;
          }
          else
          {
            v18 = (char *)v10 + 1;
          }
          v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v18, v17);
          v21 = *((_DWORD *)this + 22);
          v22 = __OFSUB__(v21--, 1);
          *((_DWORD *)this + 22) = v21;
          if (v21 < 0 != v22)
            return 0;
          v23 = v20;
          result = protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::_InternalParse((uint64_t)v14, (google::protobuf::internal *)v18, this);
          if (!result)
            return result;
          ++*((_DWORD *)this + 22);
          if (*((_DWORD *)this + 20))
            return 0;
          v24 = *((_DWORD *)this + 7) + v23;
          *((_DWORD *)this + 7) = v24;
          v25 = *((_QWORD *)this + 1) + (v24 & (v24 >> 31));
          *(_QWORD *)this = v25;
          v27 = result;
          if (v25 <= (unint64_t)result || *(_BYTE *)result != 10)
            goto LABEL_30;
        }
        v13 = *(_DWORD *)(a1 + 36);
        goto LABEL_19;
      }
      if ((_DWORD)v8)
        v9 = (v8 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), v7, this);
      v27 = result;
      if (!result)
        return result;
LABEL_30:
      v26 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v27, *((_DWORD *)this + 23));
      result = v27;
      if (v26)
        return result;
    }
    v7 = (google::protobuf::internal *)((char *)result + 2);
LABEL_5:
    v27 = v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_State_ExecutionState_Frame::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_ExecutionState_Frame *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)a2;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 23) < 0)
  {
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    LODWORD(v17) = *(unsigned __int8 *)(v16 + 23);
    v18 = (void *)v16;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v17)
  {
    v19 = (int)v17;
    memcpy(a2, v18, (int)v17);
    a2 += v19;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v18, v17, (unsigned __int8 *)a2);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame::ByteSizeLong(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v4;
  uint64_t v5;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    v2 += v11;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_State_ExecutionState_Frame::CheckTypeAndMergeFrom(protobuf::Intelligence_State_ExecutionState_Frame *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_ExecutionState_Frame::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_ExecutionState_Frame::MergeFrom(protobuf::Intelligence_State_ExecutionState_Frame *this, const protobuf::Intelligence_State_ExecutionState_Frame *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 12411);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
}

void sub_22AF36218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState_Frame::CopyFrom(protobuf::Intelligence_State_ExecutionState_Frame *this, const protobuf::Intelligence_State_ExecutionState_Frame *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_ExecutionState_Frame::Clear(this);
    protobuf::Intelligence_State_ExecutionState_Frame::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame::IsInitialized(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  return 1;
}

void protobuf::Intelligence_State_ExecutionState_Frame::InternalSwap(protobuf::Intelligence_State_ExecutionState_Frame *this, protobuf::Intelligence_State_ExecutionState_Frame *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v13;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State_ExecutionState_Frame *)((char *)this + 24), (protobuf::Intelligence_State_ExecutionState_Frame *)((char *)a2 + 24));
}

_QWORD *protobuf::Intelligence_State_ExecutionState_Frame::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.ExecutionState.Frame");
}

protobuf::Intelligence_State_ExecutionState *protobuf::Intelligence_State_ExecutionState::Intelligence_State_ExecutionState(protobuf::Intelligence_State_ExecutionState *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F541EE8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_intelligence_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  return this;
}

void sub_22AF363B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState *protobuf::Intelligence_State_ExecutionState::Intelligence_State_ExecutionState(protobuf::Intelligence_State_ExecutionState *this, const protobuf::Intelligence_State_ExecutionState *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24F541EE8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v11);
  }
  v12 = *((_QWORD *)a2 + 11);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_QWORD *)this + 11) = v12;
  return this;
}

void sub_22AF36510(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState::~Intelligence_State_ExecutionState(protobuf::Intelligence_State_ExecutionState *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = &off_24F541EE8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x22E2E9CCC](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 10);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x22E2E9CCC](v10, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State_ExecutionState *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State_ExecutionState::~Intelligence_State_ExecutionState(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State_ExecutionState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State_ExecutionState::default_instance(protobuf::Intelligence_State_ExecutionState *this)
{
  if (atomic_load(scc_info_Intelligence_State_ExecutionState_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_ExecutionState_intelligence_2eproto);
  return &protobuf::_Intelligence_State_ExecutionState_default_instance_;
}

void protobuf::Intelligence_State_ExecutionState::Clear(protobuf::Intelligence_State_ExecutionState *this)
{
  uint64_t v2;
  protobuf::Intelligence_State_ExecutionState_Frame **v3;
  protobuf::Intelligence_State_ExecutionState_Frame *v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::internal::InternalMetadataWithArenaLite *v12;
  char v13;
  char v14;
  std::string v15[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (protobuf::Intelligence_State_ExecutionState_Frame **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_State_ExecutionState_Frame::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 2) == 0)
        goto LABEL_10;
LABEL_18:
      v8 = *((_QWORD *)this + 7);
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        if ((v6 & 4) != 0)
          goto LABEL_22;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
        if ((v6 & 4) != 0)
          goto LABEL_22;
      }
LABEL_11:
      if ((v6 & 8) == 0)
        goto LABEL_12;
LABEL_26:
      v10 = *((_QWORD *)this + 9);
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        if ((v6 & 0x10) == 0)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
        if ((v6 & 0x10) == 0)
          goto LABEL_33;
      }
      goto LABEL_30;
    }
    v7 = *((_QWORD *)this + 6);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v6 & 2) != 0)
        goto LABEL_18;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v6 & 2) != 0)
        goto LABEL_18;
    }
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
LABEL_22:
    v9 = *((_QWORD *)this + 8);
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      if ((v6 & 8) != 0)
        goto LABEL_26;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v6 & 8) != 0)
        goto LABEL_26;
    }
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_33;
LABEL_30:
    v11 = *((_QWORD *)this + 10);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
LABEL_33:
  if ((v6 & 0x60) != 0)
  {
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v13 = *((_BYTE *)this + 8);
  v12 = (protobuf::Intelligence_State_ExecutionState *)((char *)this + 8);
  *((_DWORD *)v12 + 2) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v12);
}

void sub_22AF368CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *protobuf::Intelligence_State_ExecutionState::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  const char *v7;
  std::string *v8;
  std::string **v9;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  protobuf::Intelligence_State_ExecutionState_Frame *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  char *SizeFallback;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v30;
  google::protobuf::internal *v31;
  BOOL v32;
  google::protobuf::internal *v33;
  uint64_t v34;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v36, *((_DWORD *)this + 23)) & 1) != 0)
  {
LABEL_2:
    TagFallback = (char *)v36;
    goto LABEL_63;
  }
  while (2)
  {
    TagFallback = (char *)v36 + 1;
    LODWORD(v7) = *(unsigned __int8 *)v36;
    if (*(char *)v36 < 0)
    {
      v7 = (const char *)(v7 + (*TagFallback << 7) - 128);
      if (*TagFallback < 0)
      {
        TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v36, v7);
        v36 = (google::protobuf::internal *)TagFallback;
        if (!TagFallback)
          goto LABEL_63;
        goto LABEL_7;
      }
      TagFallback = (char *)v36 + 2;
    }
    v36 = (google::protobuf::internal *)TagFallback;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_56;
        *(_DWORD *)(a1 + 16) |= 1u;
        v8 = *(std::string **)(a1 + 48);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_52;
        v9 = (std::string **)(a1 + 48);
        goto LABEL_51;
      case 2u:
        if (v7 != 18)
          goto LABEL_56;
        *(_DWORD *)(a1 + 16) |= 2u;
        v8 = *(std::string **)(a1 + 56);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_52;
        v9 = (std::string **)(a1 + 56);
        goto LABEL_51;
      case 3u:
        if (v7 != 24)
          goto LABEL_56;
        v5 |= 0x40u;
        v10 = (google::protobuf::internal *)(TagFallback + 1);
        v11 = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0)
          goto LABEL_20;
        v12 = *(char *)v10;
        v11 = v11 + (v12 << 7) - 128;
        if (v12 < 0)
        {
          v33 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v11);
          v36 = v33;
          *(_BYTE *)(a1 + 96) = v34 != 0;
          if (!v33)
            goto LABEL_62;
        }
        else
        {
          v10 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_20:
          v36 = v10;
          *(_BYTE *)(a1 + 96) = v11 != 0;
        }
        goto LABEL_54;
      case 4u:
        if (v7 != 34)
          goto LABEL_56;
        *(_DWORD *)(a1 + 16) |= 4u;
        v8 = *(std::string **)(a1 + 64);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_52;
        v9 = (std::string **)(a1 + 64);
        goto LABEL_51;
      case 5u:
        if (v7 != 42)
          goto LABEL_56;
        v13 = (google::protobuf::internal *)(TagFallback - 1);
        while (2)
        {
          v14 = (google::protobuf::internal *)((char *)v13 + 1);
          v36 = v14;
          v15 = *(int **)(a1 + 40);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 36);
LABEL_31:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v17 + 1);
            v15 = *(int **)(a1 + 40);
            v17 = *v15;
            goto LABEL_32;
          }
          v16 = *(int *)(a1 + 32);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 32) = v16 + 1;
            v18 = *(protobuf::Intelligence_State_ExecutionState_Frame **)&v15[2 * v16 + 2];
            goto LABEL_33;
          }
          if (v17 == *(_DWORD *)(a1 + 36))
            goto LABEL_31;
LABEL_32:
          *v15 = v17 + 1;
          v18 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
          v19 = *(_QWORD *)(a1 + 40);
          v20 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          v14 = v36;
LABEL_33:
          v21 = *(unsigned __int8 *)v14;
          if (*(char *)v14 < 0)
          {
            SizeFallback = google::protobuf::internal::ReadSizeFallback(v14, (const char *)*(unsigned __int8 *)v14);
            if (!SizeFallback)
              break;
            v22 = SizeFallback;
            v21 = v24;
          }
          else
          {
            v22 = (char *)v14 + 1;
          }
          v25 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v22, v21);
          v26 = *((_DWORD *)this + 22);
          v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)this + 22) = v26;
          if (v26 < 0 == v27)
          {
            v28 = v25;
            v13 = protobuf::Intelligence_State_ExecutionState_Frame::_InternalParse((uint64_t)v18, (google::protobuf::internal *)v22, this);
            if (v13)
            {
              ++*((_DWORD *)this + 22);
              if (!*((_DWORD *)this + 20))
              {
                v29 = *((_DWORD *)this + 7) + v28;
                *((_DWORD *)this + 7) = v29;
                v30 = *((_QWORD *)this + 1) + (v29 & (v29 >> 31));
                *(_QWORD *)this = v30;
                v36 = v13;
                if (v30 <= (unint64_t)v13 || *(_BYTE *)v13 != 42)
                  goto LABEL_54;
                continue;
              }
            }
          }
          break;
        }
LABEL_62:
        TagFallback = 0;
LABEL_63:
        *(_DWORD *)(a1 + 16) |= v5;
        return TagFallback;
      case 6u:
        if (v7 != 50)
          goto LABEL_56;
        *(_DWORD *)(a1 + 16) |= 8u;
        v8 = *(std::string **)(a1 + 72);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_52;
        v9 = (std::string **)(a1 + 72);
        goto LABEL_51;
      case 7u:
        if (v7 != 57)
          goto LABEL_56;
        v5 |= 0x20u;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)TagFallback;
        v36 = (google::protobuf::internal *)(TagFallback + 8);
        goto LABEL_54;
      case 8u:
        if (v7 != 66)
          goto LABEL_56;
        *(_DWORD *)(a1 + 16) |= 0x10u;
        v8 = *(std::string **)(a1 + 80);
        if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_52;
        v9 = (std::string **)(a1 + 80);
LABEL_51:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v8 = *v9;
        TagFallback = (char *)v36;
LABEL_52:
        v31 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v8, TagFallback, (uint64_t)this);
        goto LABEL_53;
      default:
LABEL_56:
        if ((_DWORD)v7)
          v32 = (v7 & 7) == 4;
        else
          v32 = 1;
        if (v32)
        {
          *((_DWORD *)this + 20) = (_DWORD)v7 - 1;
          goto LABEL_63;
        }
        v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_53:
        v36 = v31;
        if (!v31)
          goto LABEL_62;
LABEL_54:
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v36, *((_DWORD *)this + 23)))goto LABEL_2;
        continue;
    }
  }
}

unsigned __int8 *protobuf::Intelligence_State_ExecutionState::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State_ExecutionState *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_State_ExecutionState_Frame *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_26:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v17 = *((_BYTE *)this + 96);
  *v4 = 24;
  v4[1] = v17;
  v4 += 2;
  if ((v6 & 4) != 0)
LABEL_5:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 8), v4);
LABEL_6:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_State_ExecutionState_Frame *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 42;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_State_ExecutionState_Frame::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 9), v4);
    if ((v6 & 0x20) == 0)
    {
LABEL_20:
      if ((v6 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_20;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v18 = *((_QWORD *)this + 11);
  *v4 = 57;
  *(_QWORD *)(v4 + 1) = v18;
  v4 += 9;
  if ((v6 & 0x10) != 0)
LABEL_21:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 10), v4);
LABEL_22:
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) == 0)
    return (unsigned __int8 *)v4;
  v19 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v19 + 23) < 0)
  {
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
  }
  else
  {
    LODWORD(v20) = *(unsigned __int8 *)(v19 + 23);
    v21 = (void *)v19;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v20)
  {
    v22 = (int)v20;
    memcpy(v4, v21, (int)v20);
    v4 += v22;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v20, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_State_ExecutionState::ByteSizeLong(protobuf::Intelligence_State_ExecutionState *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_State_ExecutionState_Frame **v4;
  uint64_t v5;
  protobuf::Intelligence_State_ExecutionState_Frame *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_State_ExecutionState_Frame **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_State_ExecutionState_Frame::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x7F) == 0)
    goto LABEL_23;
  if ((v8 & 1) != 0)
  {
    v15 = *((_QWORD *)this + 6);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = *(_QWORD *)(v15 + 8);
    if ((v16 & 0x80u) == 0)
      v17 = v16;
    v2 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0)
        goto LABEL_13;
      goto LABEL_31;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  v18 = *((_QWORD *)this + 7);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v2 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
LABEL_34:
    v24 = *((_QWORD *)this + 9);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v2 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_15;
  }
LABEL_31:
  v21 = *((_QWORD *)this + 8);
  v22 = *(unsigned __int8 *)(v21 + 23);
  v23 = *(_QWORD *)(v21 + 8);
  if ((v22 & 0x80u) == 0)
    v23 = v22;
  v2 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 8) != 0)
    goto LABEL_34;
LABEL_14:
  if ((v8 & 0x10) != 0)
  {
LABEL_15:
    v9 = *((_QWORD *)this + 10);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_18:
  v12 = v2 + 9;
  if ((v8 & 0x20) == 0)
    v12 = v2;
  if ((v8 & 0x40) != 0)
    v2 = v12 + 2;
  else
    v2 = v12;
LABEL_23:
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) != 0)
  {
    v27 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v27 + 23) < 0)
      v28 = *(_QWORD *)(v27 + 8);
    else
      v28 = *(unsigned __int8 *)(v27 + 23);
    v2 += v28;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::Intelligence_State_ExecutionState::CheckTypeAndMergeFrom(protobuf::Intelligence_State_ExecutionState *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State_ExecutionState::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State_ExecutionState::MergeFrom(protobuf::Intelligence_State_ExecutionState *this, const protobuf::Intelligence_State_ExecutionState *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 12813);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 9);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 9);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 10);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 10);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_34;
                      goto LABEL_33;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                {
LABEL_34:
                  if ((v6 & 0x40) != 0)
                    *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
                  *((_DWORD *)this + 4) |= v6;
                  return;
                }
LABEL_33:
                *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
                goto LABEL_34;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF37444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State_ExecutionState::CopyFrom(protobuf::Intelligence_State_ExecutionState *this, const protobuf::Intelligence_State_ExecutionState *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State_ExecutionState::Clear(this);
    protobuf::Intelligence_State_ExecutionState::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State_ExecutionState::IsInitialized(protobuf::Intelligence_State_ExecutionState *this)
{
  return 1;
}

double protobuf::Intelligence_State_ExecutionState::InternalSwap(protobuf::Intelligence_State_ExecutionState *this, protobuf::Intelligence_State_ExecutionState *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  double result;
  char v44;
  unint64_t v45;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v45;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State_ExecutionState *)((char *)this + 24), (protobuf::Intelligence_State_ExecutionState *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 10);
  v38 = (uint64_t **)((char *)a2 + 80);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  result = *((double *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((double *)a2 + 11) = result;
  v44 = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v44;
  return result;
}

_QWORD *protobuf::Intelligence_State_ExecutionState::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State.ExecutionState");
}

protobuf::Intelligence_State *protobuf::Intelligence_State::Intelligence_State(protobuf::Intelligence_State *this)
{
  *(_QWORD *)this = &off_24F541F78;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  if (atomic_load(scc_info_Intelligence_State_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_intelligence_2eproto);
  *((_QWORD *)this + 26) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  return this;
}

void sub_22AF378C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 184));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 160));
  google::protobuf::RepeatedField<int>::~RepeatedField(v2 + 144);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 120));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 96));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 72));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State *protobuf::Intelligence_State::Intelligence_State(protobuf::Intelligence_State *this, const protobuf::Intelligence_State *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;

  *(_QWORD *)this = &off_24F541F78;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 144, (int *)a2 + 36);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Timer>::TypeHandler>((int **)this + 20, (uint64_t)a2 + 160);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>((int **)this + 23, (uint64_t)a2 + 184);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 26) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 26);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 26, (uint64_t)v6);
  }
  v7 = *(_OWORD *)((char *)a2 + 216);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *(_OWORD *)((char *)this + 216) = v7;
  return this;
}

void sub_22AF37AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, google::protobuf::internal::RepeatedPtrFieldBase *a10)
{
  uint64_t *v10;
  google::protobuf::internal::RepeatedPtrFieldBase *v11;
  google::protobuf::internal::RepeatedPtrFieldBase *v12;
  google::protobuf::internal::RepeatedPtrFieldBase *v13;
  google::protobuf::internal::RepeatedPtrFieldBase *v14;
  google::protobuf::internal::RepeatedPtrFieldBase *v15;
  uint64_t v16;
  google::protobuf::internal::RepeatedPtrFieldBase *v17;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v11);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v17);
  google::protobuf::RepeatedField<int>::~RepeatedField(v16);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v15);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v14);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v13);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(a10);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v10);
  _Unwind_Resume(a1);
}

void sub_22AF37B38()
{
  google::protobuf::internal::ArenaImpl **v0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v0);
  JUMPOUT(0x22AF37B10);
}

void sub_22AF37B48()
{
  google::protobuf::internal::ArenaImpl **v0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v0);
  JUMPOUT(0x22AF37B18);
}

void sub_22AF37B58()
{
  google::protobuf::internal::ArenaImpl **v0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v0);
  JUMPOUT(0x22AF37B20);
}

void sub_22AF37B68()
{
  google::protobuf::internal::ArenaImpl **v0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v0);
  JUMPOUT(0x22AF37B28);
}

void protobuf::Intelligence_State::~Intelligence_State(protobuf::Intelligence_State *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F541F78;
  v2 = *((_QWORD *)this + 26);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 184));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 160));
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 144);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 120));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 96));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_State *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_State::~Intelligence_State(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_State::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_State::default_instance(protobuf::Intelligence_State *this)
{
  if (atomic_load(scc_info_Intelligence_State_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_State_intelligence_2eproto);
  return &protobuf::_Intelligence_State_default_instance_;
}

void protobuf::Intelligence_State::Clear(protobuf::Intelligence_State *this)
{
  uint64_t v2;
  protobuf::Intelligence_State_Response **v3;
  protobuf::Intelligence_State_Response *v4;
  std::string *v5;
  uint64_t v6;
  protobuf::Intelligence_State_ExecutionState **v7;
  protobuf::Intelligence_State_ExecutionState *v8;
  std::string *v9;
  uint64_t v10;
  protobuf::Intelligence_State_InputGroup **v11;
  protobuf::Intelligence_State_InputGroup *v12;
  std::string *v13;
  uint64_t v14;
  protobuf::Intelligence_State_Timer **v15;
  protobuf::Intelligence_State_Timer *v16;
  std::string *v17;
  uint64_t v18;
  protobuf::Intelligence_State_Event **v19;
  protobuf::Intelligence_State_Event *v20;
  std::string *v21;
  int v22;
  uint64_t v23;
  google::protobuf::internal::InternalMetadataWithArenaLite *v24;
  char v25;
  char v26;
  std::string v27[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)this + 48);
  v2 = *((unsigned int *)this + 20);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (protobuf::Intelligence_State_Response **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_State_Response::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 20) = 0;
  }
  v6 = *((unsigned int *)this + 26);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (protobuf::Intelligence_State_ExecutionState **)(*((_QWORD *)this + 14) + 8);
    do
    {
      v8 = *v7++;
      protobuf::Intelligence_State_ExecutionState::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 26) = 0;
  }
  v10 = *((unsigned int *)this + 32);
  if ((v10 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v13 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v10)
  {
    v11 = (protobuf::Intelligence_State_InputGroup **)(*((_QWORD *)this + 17) + 8);
    do
    {
      v12 = *v11++;
      protobuf::Intelligence_State_InputGroup::Clear(v12);
      --v10;
    }
    while (v10);
    *((_DWORD *)this + 32) = 0;
  }
  *((_DWORD *)this + 36) = 0;
  v14 = *((unsigned int *)this + 42);
  if ((v14 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v17 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v14)
  {
    v15 = (protobuf::Intelligence_State_Timer **)(*((_QWORD *)this + 22) + 8);
    do
    {
      v16 = *v15++;
      protobuf::Intelligence_State_Timer::Clear(v16);
      --v14;
    }
    while (v14);
    *((_DWORD *)this + 42) = 0;
  }
  v18 = *((unsigned int *)this + 48);
  if ((v18 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v21 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v21->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v18)
  {
    v19 = (protobuf::Intelligence_State_Event **)(*((_QWORD *)this + 25) + 8);
    do
    {
      v20 = *v19++;
      protobuf::Intelligence_State_Event::Clear(v20);
      --v18;
    }
    while (v18);
    *((_DWORD *)this + 48) = 0;
  }
  v22 = *((_DWORD *)this + 4);
  if ((v22 & 1) != 0)
  {
    v23 = *((_QWORD *)this + 26);
    if (*(char *)(v23 + 23) < 0)
    {
      **(_BYTE **)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v23 = 0;
      *(_BYTE *)(v23 + 23) = 0;
    }
  }
  if ((v22 & 0xE) != 0)
  {
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
  }
  v25 = *((_BYTE *)this + 8);
  v24 = (protobuf::Intelligence_State *)((char *)this + 8);
  *((_DWORD *)v24 + 2) = 0;
  if ((v25 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v24);
}

void sub_22AF37F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_State::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  int *v7;
  const char *v8;
  char *v9;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  protobuf::Intelligence_State_Memory *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  protobuf::Intelligence_State_Memory *v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::internal *v25;
  google::protobuf::internal *v26;
  int *v27;
  uint64_t v28;
  int v29;
  protobuf::Intelligence_State_Response *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  char *SizeFallback;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  unint64_t v42;
  char *v43;
  google::protobuf::internal *v44;
  int *v45;
  uint64_t v46;
  int v47;
  protobuf::Intelligence_State_ExecutionState *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char *v52;
  char *v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  std::string *v60;
  google::protobuf::internal *v61;
  google::protobuf::internal *v62;
  google::protobuf::internal *v63;
  int *v64;
  uint64_t v65;
  int v66;
  protobuf::Intelligence_State_InputGroup *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  char *v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  google::protobuf::internal *v79;
  int v80;
  google::protobuf::internal *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  google::protobuf::internal *v87;
  uint64_t v88;
  char *v89;
  google::protobuf::internal *v90;
  int *v91;
  uint64_t v92;
  int v93;
  protobuf::Intelligence_State_Timer *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  char *v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  google::protobuf::internal *v109;
  int *v110;
  uint64_t v111;
  int v112;
  protobuf::Intelligence_State_Event *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  char *v117;
  char *v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  BOOL v125;
  std::string **v127;
  google::protobuf::internal *v128;

  v128 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v128, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v7 = (int *)(a1 + 144);
    v127 = (std::string **)(a1 + 208);
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v128 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v128;
      if (*(char *)v128 < 0)
      {
        v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v128, v8);
          v128 = TagFallback;
          if (!TagFallback)
            goto LABEL_166;
          goto LABEL_8;
        }
        TagFallback = (google::protobuf::internal *)((char *)v128 + 2);
      }
      v128 = TagFallback;
LABEL_8:
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 10)
            goto LABEL_157;
          v9 = (char *)TagFallback - 1;
          while (1)
          {
            v10 = (google::protobuf::internal *)(v9 + 1);
            v128 = (google::protobuf::internal *)(v9 + 1);
            v11 = *(int **)(a1 + 40);
            if (!v11)
              break;
            v12 = *(int *)(a1 + 32);
            v13 = *v11;
            if ((int)v12 >= *v11)
            {
              if (v13 == *(_DWORD *)(a1 + 36))
              {
LABEL_16:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
                v11 = *(int **)(a1 + 40);
                v13 = *v11;
              }
              *v11 = v13 + 1;
              v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
              v15 = *(_QWORD *)(a1 + 40);
              v16 = *(int *)(a1 + 32);
              *(_DWORD *)(a1 + 32) = v16 + 1;
              *(_QWORD *)(v15 + 8 * v16 + 8) = v14;
              v10 = v128;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 32) = v12 + 1;
            v14 = *(protobuf::Intelligence_State_Memory **)&v11[2 * v12 + 2];
LABEL_18:
            v9 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_State_Memory>(this, (uint64_t)v14, v10);
            v128 = (google::protobuf::internal *)v9;
            if (!v9)
              goto LABEL_165;
            if (*(_QWORD *)this <= (unint64_t)v9 || *v9 != 10)
              goto LABEL_163;
          }
          v13 = *(_DWORD *)(a1 + 36);
          goto LABEL_16;
        case 2u:
          if (v8 != 18)
            goto LABEL_157;
          v17 = (char *)TagFallback - 1;
          while (1)
          {
            v18 = (google::protobuf::internal *)(v17 + 1);
            v128 = (google::protobuf::internal *)(v17 + 1);
            v19 = *(int **)(a1 + 64);
            if (!v19)
              break;
            v20 = *(int *)(a1 + 56);
            v21 = *v19;
            if ((int)v20 >= *v19)
            {
              if (v21 == *(_DWORD *)(a1 + 60))
              {
LABEL_31:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v21 + 1);
                v19 = *(int **)(a1 + 64);
                v21 = *v19;
              }
              *v19 = v21 + 1;
              v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
              v23 = *(_QWORD *)(a1 + 64);
              v24 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v24 + 1;
              *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
              v18 = v128;
              goto LABEL_33;
            }
            *(_DWORD *)(a1 + 56) = v20 + 1;
            v22 = *(protobuf::Intelligence_State_Memory **)&v19[2 * v20 + 2];
LABEL_33:
            v17 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_State_Memory>(this, (uint64_t)v22, v18);
            v128 = (google::protobuf::internal *)v17;
            if (!v17)
              goto LABEL_165;
            if (*(_QWORD *)this <= (unint64_t)v17 || *v17 != 18)
              goto LABEL_163;
          }
          v21 = *(_DWORD *)(a1 + 60);
          goto LABEL_31;
        case 3u:
          if (v8 != 26)
            goto LABEL_157;
          v25 = (google::protobuf::internal *)((char *)TagFallback - 1);
          while (2)
          {
            v26 = (google::protobuf::internal *)((char *)v25 + 1);
            v128 = v26;
            v27 = *(int **)(a1 + 88);
            if (v27)
            {
              v28 = *(int *)(a1 + 80);
              v29 = *v27;
              if ((int)v28 < *v27)
              {
                *(_DWORD *)(a1 + 80) = v28 + 1;
                v30 = *(protobuf::Intelligence_State_Response **)&v27[2 * v28 + 2];
                goto LABEL_46;
              }
              if (v29 != *(_DWORD *)(a1 + 84))
              {
LABEL_45:
                *v27 = v29 + 1;
                v30 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(*(google::protobuf::internal::ArenaImpl **)(a1 + 72));
                v31 = *(_QWORD *)(a1 + 88);
                v32 = *(int *)(a1 + 80);
                *(_DWORD *)(a1 + 80) = v32 + 1;
                *(_QWORD *)(v31 + 8 * v32 + 8) = v30;
                v26 = v128;
LABEL_46:
                v33 = *(unsigned __int8 *)v26;
                if (*(char *)v26 < 0)
                {
                  SizeFallback = google::protobuf::internal::ReadSizeFallback(v26, (const char *)*(unsigned __int8 *)v26);
                  if (!SizeFallback)
                    goto LABEL_165;
                  v34 = SizeFallback;
                  v33 = v36;
                }
                else
                {
                  v34 = (char *)v26 + 1;
                }
                v37 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v34, v33);
                v38 = *((_DWORD *)this + 22);
                v39 = __OFSUB__(v38--, 1);
                *((_DWORD *)this + 22) = v38;
                if (v38 < 0 == v39)
                {
                  v40 = v37;
                  v25 = protobuf::Intelligence_State_Response::_InternalParse((uint64_t)v30, (google::protobuf::internal *)v34, this);
                  if (v25)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v41 = *((_DWORD *)this + 7) + v40;
                      *((_DWORD *)this + 7) = v41;
                      v42 = *((_QWORD *)this + 1) + (v41 & (v41 >> 31));
                      *(_QWORD *)this = v42;
                      v128 = v25;
                      if (v42 <= (unint64_t)v25 || *(_BYTE *)v25 != 26)
                        goto LABEL_163;
                      continue;
                    }
                  }
                }
                goto LABEL_165;
              }
            }
            else
            {
              v29 = *(_DWORD *)(a1 + 84);
            }
            break;
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v29 + 1);
          v27 = *(int **)(a1 + 88);
          v29 = *v27;
          goto LABEL_45;
        case 4u:
          if (v8 != 34)
            goto LABEL_157;
          v43 = (char *)TagFallback - 1;
          while (2)
          {
            v44 = (google::protobuf::internal *)(v43 + 1);
            v128 = v44;
            v45 = *(int **)(a1 + 112);
            if (v45)
            {
              v46 = *(int *)(a1 + 104);
              v47 = *v45;
              if ((int)v46 < *v45)
              {
                *(_DWORD *)(a1 + 104) = v46 + 1;
                v48 = *(protobuf::Intelligence_State_ExecutionState **)&v45[2 * v46 + 2];
                goto LABEL_65;
              }
              if (v47 != *(_DWORD *)(a1 + 108))
              {
LABEL_64:
                *v45 = v47 + 1;
                v48 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(*(google::protobuf::internal::ArenaImpl **)(a1 + 96));
                v49 = *(_QWORD *)(a1 + 112);
                v50 = *(int *)(a1 + 104);
                *(_DWORD *)(a1 + 104) = v50 + 1;
                *(_QWORD *)(v49 + 8 * v50 + 8) = v48;
                v44 = v128;
LABEL_65:
                v51 = *(unsigned __int8 *)v44;
                if (*(char *)v44 < 0)
                {
                  v53 = google::protobuf::internal::ReadSizeFallback(v44, (const char *)*(unsigned __int8 *)v44);
                  if (!v53)
                    goto LABEL_165;
                  v52 = v53;
                  v51 = v54;
                }
                else
                {
                  v52 = (char *)v44 + 1;
                }
                v55 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v52, v51);
                v56 = *((_DWORD *)this + 22);
                v39 = __OFSUB__(v56--, 1);
                *((_DWORD *)this + 22) = v56;
                if (v56 < 0 == v39)
                {
                  v57 = v55;
                  v43 = protobuf::Intelligence_State_ExecutionState::_InternalParse((uint64_t)v48, (google::protobuf::internal *)v52, this);
                  if (v43)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v58 = *((_DWORD *)this + 7) + v57;
                      *((_DWORD *)this + 7) = v58;
                      v59 = *((_QWORD *)this + 1) + (v58 & (v58 >> 31));
                      *(_QWORD *)this = v59;
                      v128 = (google::protobuf::internal *)v43;
                      if (v59 <= (unint64_t)v43 || *v43 != 34)
                        goto LABEL_163;
                      continue;
                    }
                  }
                }
                goto LABEL_165;
              }
            }
            else
            {
              v47 = *(_DWORD *)(a1 + 108);
            }
            break;
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v47 + 1);
          v45 = *(int **)(a1 + 112);
          v47 = *v45;
          goto LABEL_64;
        case 5u:
          if (v8 != 42)
            goto LABEL_157;
          *(_DWORD *)(a1 + 16) |= 1u;
          v60 = *(std::string **)(a1 + 208);
          if (v60 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v127, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v60 = *v127;
            TagFallback = v128;
          }
          v61 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v60, (std::string::value_type *)TagFallback, (uint64_t)this);
          goto LABEL_162;
        case 6u:
          if (v8 != 50)
            goto LABEL_157;
          v62 = (google::protobuf::internal *)((char *)TagFallback - 1);
          while (2)
          {
            v63 = (google::protobuf::internal *)((char *)v62 + 1);
            v128 = v63;
            v64 = *(int **)(a1 + 136);
            if (v64)
            {
              v65 = *(int *)(a1 + 128);
              v66 = *v64;
              if ((int)v65 < *v64)
              {
                *(_DWORD *)(a1 + 128) = v65 + 1;
                v67 = *(protobuf::Intelligence_State_InputGroup **)&v64[2 * v65 + 2];
                goto LABEL_88;
              }
              if (v66 != *(_DWORD *)(a1 + 132))
              {
LABEL_87:
                *v64 = v66 + 1;
                v67 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(*(google::protobuf::internal::ArenaImpl **)(a1 + 120));
                v68 = *(_QWORD *)(a1 + 136);
                v69 = *(int *)(a1 + 128);
                *(_DWORD *)(a1 + 128) = v69 + 1;
                *(_QWORD *)(v68 + 8 * v69 + 8) = v67;
                v63 = v128;
LABEL_88:
                v70 = *(unsigned __int8 *)v63;
                if (*(char *)v63 < 0)
                {
                  v72 = google::protobuf::internal::ReadSizeFallback(v63, (const char *)*(unsigned __int8 *)v63);
                  if (!v72)
                    goto LABEL_165;
                  v71 = v72;
                  v70 = v73;
                }
                else
                {
                  v71 = (char *)v63 + 1;
                }
                v74 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v71, v70);
                v75 = *((_DWORD *)this + 22);
                v39 = __OFSUB__(v75--, 1);
                *((_DWORD *)this + 22) = v75;
                if (v75 < 0 == v39)
                {
                  v76 = v74;
                  v62 = protobuf::Intelligence_State_InputGroup::_InternalParse((uint64_t)v67, (google::protobuf::internal *)v71, this);
                  if (v62)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v77 = *((_DWORD *)this + 7) + v76;
                      *((_DWORD *)this + 7) = v77;
                      v78 = *((_QWORD *)this + 1) + (v77 & (v77 >> 31));
                      *(_QWORD *)this = v78;
                      v128 = v62;
                      if (v78 <= (unint64_t)v62 || *(_BYTE *)v62 != 50)
                        goto LABEL_163;
                      continue;
                    }
                  }
                }
                goto LABEL_165;
              }
            }
            else
            {
              v66 = *(_DWORD *)(a1 + 132);
            }
            break;
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 120), v66 + 1);
          v64 = *(int **)(a1 + 136);
          v66 = *v64;
          goto LABEL_87;
        case 7u:
          if (v8 == 56)
          {
            v79 = (google::protobuf::internal *)((char *)TagFallback - 1);
            while (1)
            {
              v128 = (google::protobuf::internal *)((char *)v79 + 1);
              v80 = *((unsigned __int8 *)v79 + 1);
              v81 = (google::protobuf::internal *)((char *)v79 + 2);
              if (*((char *)v79 + 1) < 0)
              {
                v82 = v80 + (*(unsigned __int8 *)v81 << 7);
                v80 = v82 - 128;
                if (*(char *)v81 < 0)
                {
                  v81 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)((char *)v79 + 1), (v82 - 128));
                  v80 = v83;
                }
                else
                {
                  v81 = (google::protobuf::internal *)((char *)v79 + 3);
                }
              }
              v128 = v81;
              v84 = *(_DWORD *)(a1 + 144);
              if (v84 == *(_DWORD *)(a1 + 148))
                google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 144), v84 + 1);
              v85 = google::protobuf::RepeatedField<int>::elements(a1 + 144);
              v86 = *v7;
              *v7 = v86 + 1;
              *(_DWORD *)(v85 + 4 * v86) = v80;
              v79 = v128;
              if (!v128)
                goto LABEL_165;
              if (*(_QWORD *)this <= (unint64_t)v128 || *(_BYTE *)v128 != 56)
                goto LABEL_163;
            }
          }
          if (v8 == 58)
          {
            v61 = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser((int *)(a1 + 144), TagFallback, this);
          }
          else
          {
LABEL_157:
            if ((_DWORD)v8)
              v125 = (v8 & 7) == 4;
            else
              v125 = 1;
            if (v125)
            {
              *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
              goto LABEL_166;
            }
            v61 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), TagFallback, this);
          }
LABEL_162:
          v128 = v61;
          if (!v61)
            goto LABEL_165;
LABEL_163:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v128, *((_DWORD *)this + 23)))break;
          continue;
        case 9u:
          if (v8 != 73)
            goto LABEL_157;
          v88 = *(_QWORD *)TagFallback;
          v87 = (google::protobuf::internal *)((char *)TagFallback + 8);
          v5 |= 2u;
          *(_QWORD *)(a1 + 216) = v88;
          goto LABEL_135;
        case 0xAu:
          if (v8 != 82)
            goto LABEL_157;
          v89 = (char *)TagFallback - 1;
          while (2)
          {
            v90 = (google::protobuf::internal *)(v89 + 1);
            v128 = v90;
            v91 = *(int **)(a1 + 176);
            if (!v91)
            {
              v93 = *(_DWORD *)(a1 + 172);
LABEL_119:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 160), v93 + 1);
              v91 = *(int **)(a1 + 176);
              v93 = *v91;
              goto LABEL_120;
            }
            v92 = *(int *)(a1 + 168);
            v93 = *v91;
            if ((int)v92 < *v91)
            {
              *(_DWORD *)(a1 + 168) = v92 + 1;
              v94 = *(protobuf::Intelligence_State_Timer **)&v91[2 * v92 + 2];
              goto LABEL_121;
            }
            if (v93 == *(_DWORD *)(a1 + 172))
              goto LABEL_119;
LABEL_120:
            *v91 = v93 + 1;
            v94 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(*(google::protobuf::internal::ArenaImpl **)(a1 + 160));
            v95 = *(_QWORD *)(a1 + 176);
            v96 = *(int *)(a1 + 168);
            *(_DWORD *)(a1 + 168) = v96 + 1;
            *(_QWORD *)(v95 + 8 * v96 + 8) = v94;
            v90 = v128;
LABEL_121:
            v97 = *(unsigned __int8 *)v90;
            if (*(char *)v90 < 0)
            {
              v99 = google::protobuf::internal::ReadSizeFallback(v90, (const char *)*(unsigned __int8 *)v90);
              if (!v99)
                goto LABEL_165;
              v98 = v99;
              v97 = v100;
            }
            else
            {
              v98 = (char *)v90 + 1;
            }
            v101 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v98, v97);
            v102 = *((_DWORD *)this + 22);
            v39 = __OFSUB__(v102--, 1);
            *((_DWORD *)this + 22) = v102;
            if (v102 < 0 == v39)
            {
              v103 = v101;
              v89 = protobuf::Intelligence_State_Timer::_InternalParse((uint64_t)v94, (google::protobuf::internal *)v98, this);
              if (v89)
              {
                ++*((_DWORD *)this + 22);
                if (!*((_DWORD *)this + 20))
                {
                  v104 = *((_DWORD *)this + 7) + v103;
                  *((_DWORD *)this + 7) = v104;
                  v105 = *((_QWORD *)this + 1) + (v104 & (v104 >> 31));
                  *(_QWORD *)this = v105;
                  v128 = (google::protobuf::internal *)v89;
                  if (v105 <= (unint64_t)v89 || *v89 != 82)
                    goto LABEL_163;
                  continue;
                }
              }
            }
            goto LABEL_165;
          }
        case 0xCu:
          if (v8 != 97)
            goto LABEL_157;
          v106 = *(_QWORD *)TagFallback;
          v87 = (google::protobuf::internal *)((char *)TagFallback + 8);
          v5 |= 4u;
          *(_QWORD *)(a1 + 224) = v106;
          goto LABEL_135;
        case 0xDu:
          if (v8 != 105)
            goto LABEL_157;
          v107 = *(_QWORD *)TagFallback;
          v87 = (google::protobuf::internal *)((char *)TagFallback + 8);
          v5 |= 8u;
          *(_QWORD *)(a1 + 232) = v107;
LABEL_135:
          v128 = v87;
          goto LABEL_163;
        case 0xEu:
          if (v8 != 114)
            goto LABEL_157;
          v108 = (char *)TagFallback - 1;
          while (2)
          {
            v109 = (google::protobuf::internal *)(v108 + 1);
            v128 = v109;
            v110 = *(int **)(a1 + 200);
            if (v110)
            {
              v111 = *(int *)(a1 + 192);
              v112 = *v110;
              if ((int)v111 < *v110)
              {
                *(_DWORD *)(a1 + 192) = v111 + 1;
                v113 = *(protobuf::Intelligence_State_Event **)&v110[2 * v111 + 2];
                goto LABEL_145;
              }
              if (v112 != *(_DWORD *)(a1 + 196))
              {
LABEL_144:
                *v110 = v112 + 1;
                v113 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(*(google::protobuf::internal::ArenaImpl **)(a1 + 184));
                v114 = *(_QWORD *)(a1 + 200);
                v115 = *(int *)(a1 + 192);
                *(_DWORD *)(a1 + 192) = v115 + 1;
                *(_QWORD *)(v114 + 8 * v115 + 8) = v113;
                v109 = v128;
LABEL_145:
                v116 = *(unsigned __int8 *)v109;
                if (*(char *)v109 < 0)
                {
                  v118 = google::protobuf::internal::ReadSizeFallback(v109, (const char *)*(unsigned __int8 *)v109);
                  if (!v118)
                    goto LABEL_165;
                  v117 = v118;
                  v116 = v119;
                }
                else
                {
                  v117 = (char *)v109 + 1;
                }
                v120 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v117, v116);
                v121 = *((_DWORD *)this + 22);
                v39 = __OFSUB__(v121--, 1);
                *((_DWORD *)this + 22) = v121;
                if (v121 < 0 == v39)
                {
                  v122 = v120;
                  v108 = protobuf::Intelligence_State_Event::_InternalParse((uint64_t)v113, (google::protobuf::internal *)v117, this);
                  if (v108)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v123 = *((_DWORD *)this + 7) + v122;
                      *((_DWORD *)this + 7) = v123;
                      v124 = *((_QWORD *)this + 1) + (v123 & (v123 >> 31));
                      *(_QWORD *)this = v124;
                      v128 = (google::protobuf::internal *)v108;
                      if (v124 <= (unint64_t)v108 || *v108 != 114)
                        goto LABEL_163;
                      continue;
                    }
                  }
                }
LABEL_165:
                TagFallback = 0;
                goto LABEL_166;
              }
            }
            else
            {
              v112 = *(_DWORD *)(a1 + 196);
            }
            break;
          }
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 184), v112 + 1);
          v110 = *(int **)(a1 + 200);
          v112 = *v110;
          goto LABEL_144;
        default:
          goto LABEL_157;
      }
      break;
    }
  }
  TagFallback = v128;
LABEL_166:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_State_Memory>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)protobuf::Intelligence_State_Memory::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence_State::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_State *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  protobuf::Intelligence_State_Memory *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int j;
  protobuf::Intelligence_State_Memory *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int k;
  protobuf::Intelligence_State_Response *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  std::string *v32;
  std::string *v33;
  protobuf::Intelligence_State_ExecutionState *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int m;
  protobuf::Intelligence_State_InputGroup *v43;
  unsigned int v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int n;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  std::string *v58;
  std::string *v59;
  protobuf::Intelligence_State_Timer *v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int ii;
  protobuf::Intelligence_State_Event *v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char v82;
  std::string v83[2];

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v8 = (protobuf::Intelligence_State_Memory *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_Memory::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  v14 = *((_DWORD *)this + 14);
  if (v14)
  {
    for (j = 0; j != v14; ++j)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v16 = (protobuf::Intelligence_State_Memory *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)this + 48, j);
      *a2 = 18;
      v17 = *((_DWORD *)v16 + 5);
      if (v17 > 0x7F)
      {
        a2[1] = v17 | 0x80;
        v19 = v17 >> 7;
        if (v17 >> 14)
        {
          v18 = a2 + 3;
          do
          {
            *(v18 - 1) = v19 | 0x80;
            v20 = v19 >> 7;
            ++v18;
            v21 = v19 >> 14;
            v19 >>= 7;
          }
          while (v21);
          *(v18 - 1) = v20;
        }
        else
        {
          a2[2] = v19;
          v18 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v17;
        v18 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_Memory::InternalSerializeWithCachedSizesToArray(v16, (char *)v18, a3);
    }
  }
  v22 = *((_DWORD *)this + 20);
  if (v22)
  {
    for (k = 0; k != v22; ++k)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v24 = (protobuf::Intelligence_State_Response *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>((uint64_t)this + 72, k);
      *a2 = 26;
      v25 = *((_DWORD *)v24 + 5);
      if (v25 > 0x7F)
      {
        a2[1] = v25 | 0x80;
        v27 = v25 >> 7;
        if (v25 >> 14)
        {
          v26 = a2 + 3;
          do
          {
            *(v26 - 1) = v27 | 0x80;
            v28 = v27 >> 7;
            ++v26;
            v29 = v27 >> 14;
            v27 >>= 7;
          }
          while (v29);
          *(v26 - 1) = v28;
        }
        else
        {
          a2[2] = v27;
          v26 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v25;
        v26 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_Response::InternalSerializeWithCachedSizesToArray(v24, (char *)v26, a3);
    }
  }
  v30 = *((_DWORD *)this + 26);
  if (v30)
  {
    v31 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v31 < 0)
        goto LABEL_41;
LABEL_42:
      if (*((_DWORD *)this + 26) <= v31)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v83, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v33 = google::protobuf::internal::LogMessage::operator<<(v83, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v82, (const char **)&v33->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v83[0].__r_.__value_.__l.__data_);
      }
      v34 = *(protobuf::Intelligence_State_ExecutionState **)(*((_QWORD *)this + 14) + 8 * v31 + 8);
      *a2 = 34;
      v35 = *((_DWORD *)v34 + 5);
      if (v35 > 0x7F)
      {
        a2[1] = v35 | 0x80;
        v37 = v35 >> 7;
        if (v35 >> 14)
        {
          v36 = a2 + 3;
          do
          {
            *(v36 - 1) = v37 | 0x80;
            v38 = v37 >> 7;
            ++v36;
            v39 = v37 >> 14;
            v37 >>= 7;
          }
          while (v39);
          *(v36 - 1) = v38;
        }
        else
        {
          a2[2] = v37;
          v36 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v35;
        v36 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_ExecutionState::InternalSerializeWithCachedSizesToArray(v34, (char *)v36, a3);
      if (++v31 == v30)
        goto LABEL_55;
    }
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v31 & 0x80000000) == 0)
      goto LABEL_42;
LABEL_41:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v83, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v32 = google::protobuf::internal::LogMessage::operator<<(v83, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v82, (const char **)&v32->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v83[0].__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
LABEL_55:
  v40 = *((_DWORD *)this + 4);
  if ((v40 & 1) != 0)
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 26), (char *)a2);
  v41 = *((_DWORD *)this + 32);
  if (v41)
  {
    for (m = 0; m != v41; ++m)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v43 = (protobuf::Intelligence_State_InputGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>((uint64_t)this + 120, m);
      *a2 = 50;
      v44 = *((_DWORD *)v43 + 5);
      if (v44 > 0x7F)
      {
        a2[1] = v44 | 0x80;
        v46 = v44 >> 7;
        if (v44 >> 14)
        {
          v45 = a2 + 3;
          do
          {
            *(v45 - 1) = v46 | 0x80;
            v47 = v46 >> 7;
            ++v45;
            v48 = v46 >> 14;
            v46 >>= 7;
          }
          while (v48);
          *(v45 - 1) = v47;
        }
        else
        {
          a2[2] = v46;
          v45 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v44;
        v45 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_InputGroup::InternalSerializeWithCachedSizesToArray(v43, (char *)v45, a3);
    }
  }
  v49 = *((_DWORD *)this + 36);
  if (v49 >= 1)
  {
    for (n = 0; n != v49; ++n)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v51 = *(int *)google::protobuf::RepeatedField<int>::Get((_DWORD *)this + 36, n);
      *a2 = 56;
      if (v51 > 0x7F)
      {
        a2[1] = v51 | 0x80;
        v52 = v51 >> 7;
        if (v51 >> 14)
        {
          a2 += 3;
          do
          {
            *(a2 - 1) = v52 | 0x80;
            v53 = v52 >> 7;
            ++a2;
            v54 = v52 >> 14;
            v52 >>= 7;
          }
          while (v54);
          *(a2 - 1) = v53;
        }
        else
        {
          a2[2] = v52;
          a2 += 3;
        }
      }
      else
      {
        a2[1] = v51;
        a2 += 2;
      }
    }
  }
  if ((v40 & 2) != 0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v55 = *((_QWORD *)this + 27);
    *a2 = 73;
    *(_QWORD *)(a2 + 1) = v55;
    a2 += 9;
  }
  v56 = *((_DWORD *)this + 42);
  if (v56)
  {
    v57 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v57 < 0)
        goto LABEL_89;
LABEL_90:
      if (*((_DWORD *)this + 42) <= v57)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v83, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v59 = google::protobuf::internal::LogMessage::operator<<(v83, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v82, (const char **)&v59->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v83[0].__r_.__value_.__l.__data_);
      }
      v60 = *(protobuf::Intelligence_State_Timer **)(*((_QWORD *)this + 22) + 8 * v57 + 8);
      *a2 = 82;
      v61 = *((_DWORD *)v60 + 5);
      if (v61 > 0x7F)
      {
        a2[1] = v61 | 0x80;
        v63 = v61 >> 7;
        if (v61 >> 14)
        {
          v62 = a2 + 3;
          do
          {
            *(v62 - 1) = v63 | 0x80;
            v64 = v63 >> 7;
            ++v62;
            v65 = v63 >> 14;
            v63 >>= 7;
          }
          while (v65);
          *(v62 - 1) = v64;
        }
        else
        {
          a2[2] = v63;
          v62 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v61;
        v62 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_Timer::InternalSerializeWithCachedSizesToArray(v60, (char *)v62, a3);
      if (++v57 == v56)
        goto LABEL_103;
    }
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v57 & 0x80000000) == 0)
      goto LABEL_90;
LABEL_89:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v83, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v58 = google::protobuf::internal::LogMessage::operator<<(v83, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v82, (const char **)&v58->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v83[0].__r_.__value_.__l.__data_);
    goto LABEL_90;
  }
LABEL_103:
  if ((v40 & 4) != 0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v66 = *((_QWORD *)this + 28);
    *a2 = 97;
    *(_QWORD *)(a2 + 1) = v66;
    a2 += 9;
  }
  if ((v40 & 8) != 0)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v67 = *((_QWORD *)this + 29);
    *a2 = 105;
    *(_QWORD *)(a2 + 1) = v67;
    a2 += 9;
  }
  v68 = *((_DWORD *)this + 48);
  if (v68)
  {
    for (ii = 0; ii != v68; ++ii)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v70 = (protobuf::Intelligence_State_Event *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>((uint64_t)this + 184, ii);
      *a2 = 114;
      v71 = *((_DWORD *)v70 + 5);
      if (v71 > 0x7F)
      {
        a2[1] = v71 | 0x80;
        v73 = v71 >> 7;
        if (v71 >> 14)
        {
          v72 = a2 + 3;
          do
          {
            *(v72 - 1) = v73 | 0x80;
            v74 = v73 >> 7;
            ++v72;
            v75 = v73 >> 14;
            v73 >>= 7;
          }
          while (v75);
          *(v72 - 1) = v74;
        }
        else
        {
          a2[2] = v73;
          v72 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v71;
        v72 = a2 + 2;
      }
      a2 = protobuf::Intelligence_State_Event::InternalSerializeWithCachedSizesToArray(v70, (char *)v72, a3);
    }
  }
  v76 = *((_QWORD *)this + 1);
  if ((v76 & 1) == 0)
    return a2;
  v78 = v76 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v78 + 23) < 0)
  {
    v80 = *(void **)v78;
    v79 = *(_QWORD *)(v78 + 8);
  }
  else
  {
    LODWORD(v79) = *(unsigned __int8 *)(v78 + 23);
    v80 = (void *)v78;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v79)
  {
    v81 = (int)v79;
    memcpy(a2, v80, (int)v79);
    a2 += v81;
    return a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v80, v79, a2);
}

void sub_22AF39388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t protobuf::Intelligence_State::ByteSizeLong(protobuf::Intelligence_State *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_State_Memory **v4;
  uint64_t v5;
  protobuf::Intelligence_State_Memory *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_State_Memory **v11;
  uint64_t v12;
  protobuf::Intelligence_State_Memory *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  protobuf::Intelligence_State_Response **v18;
  uint64_t v19;
  protobuf::Intelligence_State_Response *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  protobuf::Intelligence_State_ExecutionState **v25;
  uint64_t v26;
  protobuf::Intelligence_State_ExecutionState *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  protobuf::Intelligence_State_InputGroup **v32;
  uint64_t v33;
  protobuf::Intelligence_State_InputGroup *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  protobuf::Intelligence_State_Timer **v40;
  uint64_t v41;
  protobuf::Intelligence_State_Timer *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  protobuf::Intelligence_State_Event **v47;
  uint64_t v48;
  protobuf::Intelligence_State_Event *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_State_Memory **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_State_Memory::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_State_Memory **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_State_Memory::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (protobuf::Intelligence_State_Response **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = protobuf::Intelligence_State_Response::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (protobuf::Intelligence_State_ExecutionState **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = protobuf::Intelligence_State_ExecutionState::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((int *)this + 32);
  v30 = v23 + v29;
  v31 = *((_QWORD *)this + 17);
  if (v31)
    v32 = (protobuf::Intelligence_State_InputGroup **)(v31 + 8);
  else
    v32 = 0;
  if ((_DWORD)v29)
  {
    v33 = 8 * v29;
    do
    {
      v34 = *v32++;
      v35 = protobuf::Intelligence_State_InputGroup::ByteSizeLong(v34);
      v30 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6);
      v33 -= 8;
    }
    while (v33);
  }
  v36 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 36);
  v37 = *((int *)this + 42);
  v38 = v36 + v37 + v30 + *((unsigned int *)this + 36);
  v39 = *((_QWORD *)this + 22);
  if (v39)
    v40 = (protobuf::Intelligence_State_Timer **)(v39 + 8);
  else
    v40 = 0;
  if ((_DWORD)v37)
  {
    v41 = 8 * v37;
    do
    {
      v42 = *v40++;
      v43 = protobuf::Intelligence_State_Timer::ByteSizeLong(v42);
      v38 += v43 + ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6);
      v41 -= 8;
    }
    while (v41);
  }
  v44 = *((int *)this + 48);
  v45 = v38 + v44;
  v46 = *((_QWORD *)this + 25);
  if (v46)
    v47 = (protobuf::Intelligence_State_Event **)(v46 + 8);
  else
    v47 = 0;
  if ((_DWORD)v44)
  {
    v48 = 8 * v44;
    do
    {
      v49 = *v47++;
      v50 = protobuf::Intelligence_State_Event::ByteSizeLong(v49);
      v45 += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6);
      v48 -= 8;
    }
    while (v48);
  }
  v51 = *((_DWORD *)this + 4);
  if ((v51 & 0xF) != 0)
  {
    if ((v51 & 1) != 0)
    {
      v52 = *((_QWORD *)this + 26);
      v53 = *(unsigned __int8 *)(v52 + 23);
      v54 = *(_QWORD *)(v52 + 8);
      if ((v53 & 0x80u) == 0)
        v54 = v53;
      v45 += v54 + ((9 * (__clz(v54 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v55 = v45 + 9;
    if ((v51 & 2) == 0)
      v55 = v45;
    if ((v51 & 4) != 0)
      v55 += 9;
    if ((v51 & 8) != 0)
      v45 = v55 + 9;
    else
      v45 = v55;
  }
  v56 = *((_QWORD *)this + 1);
  if ((v56 & 1) != 0)
  {
    v58 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v58 + 23) < 0)
      v59 = *(_QWORD *)(v58 + 8);
    else
      v59 = *(unsigned __int8 *)(v58 + 23);
    v45 += v59;
  }
  *((_DWORD *)this + 5) = v45;
  return v45;
}

void protobuf::Intelligence_State::CheckTypeAndMergeFrom(protobuf::Intelligence_State *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_State::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_State::MergeFrom(protobuf::Intelligence_State *this, const protobuf::Intelligence_State *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13355);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 36, (int *)a2 + 36);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Timer>::TypeHandler>((int **)this + 20, (uint64_t)a2 + 160);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>((int **)this + 23, (uint64_t)a2 + 184);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 26);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 26);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 26, (uint64_t)v8);
          if ((v6 & 2) == 0)
          {
LABEL_11:
            if ((v6 & 4) == 0)
              goto LABEL_12;
            goto LABEL_18;
          }
LABEL_17:
          *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
          if ((v6 & 4) == 0)
          {
LABEL_12:
            if ((v6 & 8) == 0)
            {
LABEL_14:
              *((_DWORD *)this + 4) |= v6;
              return;
            }
LABEL_13:
            *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
            goto LABEL_14;
          }
LABEL_18:
          *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
          if ((v6 & 8) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF398A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_State::CopyFrom(protobuf::Intelligence_State *this, const protobuf::Intelligence_State *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_State::Clear(this);
    protobuf::Intelligence_State::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_State::IsInitialized(protobuf::Intelligence_State *this)
{
  return 1;
}

double protobuf::Intelligence_State::InternalSwap(protobuf::Intelligence_State *this, protobuf::Intelligence_State *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  unint64_t v22;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v22;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 24), (protobuf::Intelligence_State *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 48), (protobuf::Intelligence_State *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 72), (protobuf::Intelligence_State *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 96), (protobuf::Intelligence_State *)((char *)a2 + 96));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 120), (protobuf::Intelligence_State *)((char *)a2 + 120));
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 144, (uint64_t)a2 + 144);
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 160), (protobuf::Intelligence_State *)((char *)a2 + 160));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_State *)((char *)this + 184), (protobuf::Intelligence_State *)((char *)a2 + 184));
  v13 = (uint64_t *)*((_QWORD *)this + 26);
  v14 = (uint64_t **)((char *)a2 + 208);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 26);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v19;
  v20 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v20;
  result = *((double *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((double *)a2 + 29) = result;
  return result;
}

_QWORD *protobuf::Intelligence_State::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.State");
}

void protobuf::Intelligence_Condition_ConditionEntry::InitAsDefaultInstance(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  qword_255B58F38 = (uint64_t)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
  unk_255B58F40 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
  qword_255B58F30 = (uint64_t)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::_Internal::left(protobuf::Intelligence_Condition_ConditionEntry::_Internal *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::_Internal::right(protobuf::Intelligence_Condition_ConditionEntry::_Internal *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  return *((_QWORD *)this + 14);
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::_Internal::not_child(protobuf::Intelligence_Condition_ConditionEntry::_Internal *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  return *((_QWORD *)this + 12);
}

protobuf::Intelligence_Condition_ConditionEntry *protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  *(_QWORD *)this = &off_24F542008;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_Intelligence_Condition_ConditionEntry_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Condition_ConditionEntry_intelligence_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_22AF39B80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Condition_ConditionEntry *protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(protobuf::Intelligence_Condition_ConditionEntry *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  protobuf::Intelligence_KeyValueParameter *v10;
  std::string *v11;
  protobuf::Intelligence_Condition_ConditionEntry *v12;
  std::string *v13;
  protobuf::Intelligence_KeyValueParameter *v14;
  std::string *v15;
  char v17;
  std::string v18[2];

  *(_QWORD *)this = &off_24F542008;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 8) == 0)
  {
    *((_QWORD *)this + 12) = 0;
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
LABEL_19:
    if (!*((_QWORD *)a2 + 13))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = (protobuf::Intelligence_KeyValueParameter *)operator new();
    protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v14, *((const protobuf::Intelligence_KeyValueParameter **)a2 + 13));
    *((_QWORD *)this + 13) = v14;
    if ((*((_DWORD *)a2 + 4) & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
  if (!*((_QWORD *)a2 + 12))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
    v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || not_child_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v12 = (protobuf::Intelligence_Condition_ConditionEntry *)operator new();
  protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(v12, *((const protobuf::Intelligence_Condition_ConditionEntry **)a2 + 12));
  *((_QWORD *)this + 12) = v12;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x10) != 0)
    goto LABEL_19;
LABEL_14:
  *((_QWORD *)this + 13) = 0;
  if ((v6 & 0x20) == 0)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_25;
  }
LABEL_22:
  if (!*((_QWORD *)a2 + 14))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
    v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || right_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v10 = (protobuf::Intelligence_KeyValueParameter *)operator new();
  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v10, *((const protobuf::Intelligence_KeyValueParameter **)a2 + 14));
LABEL_25:
  *((_QWORD *)this + 14) = v10;
  return this;
}

void sub_22AF39E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Condition_ConditionEntry::~Intelligence_Condition_ConditionEntry(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_24F542008;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 11);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x22E2E9CCC](v6, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_)
  {
    v8 = *((_QWORD *)this + 12);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 13);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 14);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_Condition_ConditionEntry *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField((protobuf::Intelligence_Condition_ConditionEntry *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Condition_ConditionEntry::~Intelligence_Condition_ConditionEntry(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Condition_ConditionEntry::default_instance(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  if (atomic_load(scc_info_Intelligence_Condition_ConditionEntry_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Condition_ConditionEntry_intelligence_2eproto);
  return &protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
}

void protobuf::Intelligence_Condition_ConditionEntry::Clear(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  protobuf::Intelligence_Condition_ConditionEntry *v6;
  std::string *v7;
  protobuf::Intelligence_KeyValueParameter *v8;
  std::string *v9;
  protobuf::Intelligence_KeyValueParameter *v10;
  std::string *v11;
  google::protobuf::internal::InternalMetadataWithArenaLite *v12;
  char v13;
  char v14;
  std::string v15[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x3F) == 0)
    goto LABEL_30;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 9);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_13;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_13;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_17:
    v5 = *((_QWORD *)this + 11);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_21;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_21;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_13:
  v4 = *((_QWORD *)this + 10);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_17;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_21:
  v6 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 12);
  if (!v6)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13565);
    v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: not_child_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v6 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 12);
  }
  protobuf::Intelligence_Condition_ConditionEntry::Clear(v6);
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_24:
  v8 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13569);
    v9 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: left_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v8 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
  }
  protobuf::Intelligence_KeyValueParameter::Clear(v8);
  if ((v2 & 0x20) != 0)
  {
LABEL_27:
    v10 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 14);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13573);
      v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      v10 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 14);
    }
    protobuf::Intelligence_KeyValueParameter::Clear(v10);
  }
LABEL_30:
  v13 = *((_BYTE *)this + 8);
  v12 = (protobuf::Intelligence_Condition_ConditionEntry *)((char *)this + 8);
  *((_DWORD *)v12 + 2) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v12);
}

void sub_22AF3A260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *protobuf::Intelligence_Condition_ConditionEntry::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  std::string::value_type *v7;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  protobuf::Intelligence_Condition_ConditionEntry *v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  protobuf::Intelligence_Condition_ConditionEntry *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  protobuf::Intelligence_Condition_ConditionEntry *v27;
  protobuf::Intelligence_KeyValueParameter *v28;
  BOOL v29;
  int v30;
  google::protobuf::internal *v31;

  v31 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v31, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v31;
  if ((v5 & 1) == 0)
  {
    while (2)
    {
      v7 = result + 1;
      LODWORD(v8) = *result;
      if (*result < 0)
      {
        v8 = (const char *)(v8 + (*v7 << 7) - 128);
        if (*v7 < 0)
        {
          result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
          v31 = (google::protobuf::internal *)result;
          if (!result)
            return result;
          v7 = result;
LABEL_6:
          switch(v8 >> 3)
          {
            case 2u:
              if (v8 != 18)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 1u;
              v9 = *(std::string **)(a1 + 72);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 72);
              goto LABEL_18;
            case 3u:
              if (v8 != 26)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 2u;
              v9 = *(std::string **)(a1 + 80);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 80), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 80);
              goto LABEL_18;
            case 4u:
              if (v8 != 34)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 4u;
              v9 = *(std::string **)(a1 + 88);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_19;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 88), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 88);
LABEL_18:
              v7 = (std::string::value_type *)v31;
LABEL_19:
              result = google::protobuf::internal::InlineGreedyStringParser(v9, v7, (uint64_t)this);
              goto LABEL_63;
            case 5u:
              if (v8 != 42)
                goto LABEL_58;
              result = v7 - 1;
              while (1)
              {
                v10 = (google::protobuf::internal *)(result + 1);
                v31 = (google::protobuf::internal *)(result + 1);
                v11 = *(int **)(a1 + 40);
                if (!v11)
                  break;
                v12 = *(int *)(a1 + 32);
                v13 = *v11;
                if ((int)v12 >= *v11)
                {
                  if (v13 == *(_DWORD *)(a1 + 36))
                  {
LABEL_27:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
                    v11 = *(int **)(a1 + 40);
                    v13 = *v11;
                  }
                  *v11 = v13 + 1;
                  v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  LODWORD(v14) = (_DWORD)v15;
                  v16 = *(_QWORD *)(a1 + 40);
                  v17 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v17 + 1;
                  *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
                  v10 = v31;
                  goto LABEL_29;
                }
                *(_DWORD *)(a1 + 32) = v12 + 1;
                v14 = *(_QWORD *)&v11[2 * v12 + 2];
LABEL_29:
                result = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_Condition_ConditionEntry>(this, v14, v10);
                v31 = (google::protobuf::internal *)result;
                if (!result)
                  return result;
                if (*(_QWORD *)this <= (unint64_t)result || *result != 42)
                  goto LABEL_64;
              }
              v13 = *(_DWORD *)(a1 + 36);
              goto LABEL_27;
            case 6u:
              if (v8 != 50)
                goto LABEL_58;
              result = v7 - 1;
              break;
            case 7u:
              if (v8 != 58)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 8u;
              v26 = *(_QWORD *)(a1 + 96);
              if (!v26)
              {
                v27 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
                LODWORD(v26) = (_DWORD)v27;
                *(_QWORD *)(a1 + 96) = v27;
                v7 = (std::string::value_type *)v31;
              }
              result = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_Condition_ConditionEntry>(this, v26, (google::protobuf::internal *)v7);
              goto LABEL_63;
            case 8u:
              if (v8 != 66)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 0x10u;
              v28 = *(protobuf::Intelligence_KeyValueParameter **)(a1 + 104);
              if (v28)
                goto LABEL_57;
              v28 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
              *(_QWORD *)(a1 + 104) = v28;
              goto LABEL_56;
            case 9u:
              if (v8 != 74)
                goto LABEL_58;
              *(_DWORD *)(a1 + 16) |= 0x20u;
              v28 = *(protobuf::Intelligence_KeyValueParameter **)(a1 + 112);
              if (v28)
                goto LABEL_57;
              v28 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
              *(_QWORD *)(a1 + 112) = v28;
LABEL_56:
              v7 = (std::string::value_type *)v31;
LABEL_57:
              result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_KeyValueParameter>(this, (uint64_t)v28, (google::protobuf::internal *)v7);
              goto LABEL_63;
            default:
LABEL_58:
              if ((_DWORD)v8)
                v29 = (v8 & 7) == 4;
              else
                v29 = 1;
              if (v29)
              {
                *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
                return v7;
              }
              result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_63:
              v31 = (google::protobuf::internal *)result;
              if (!result)
                return result;
LABEL_64:
              v30 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v31, *((_DWORD *)this + 23));
              result = (std::string::value_type *)v31;
              if (v30)
                return result;
              continue;
          }
          while (1)
          {
            v18 = (google::protobuf::internal *)(result + 1);
            v31 = (google::protobuf::internal *)(result + 1);
            v19 = *(int **)(a1 + 64);
            if (!v19)
              break;
            v20 = *(int *)(a1 + 56);
            v21 = *v19;
            if ((int)v20 >= *v19)
            {
              if (v21 == *(_DWORD *)(a1 + 60))
              {
LABEL_40:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v21 + 1);
                v19 = *(int **)(a1 + 64);
                v21 = *v19;
              }
              *v19 = v21 + 1;
              v23 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
              LODWORD(v22) = (_DWORD)v23;
              v24 = *(_QWORD *)(a1 + 64);
              v25 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v25 + 1;
              *(_QWORD *)(v24 + 8 * v25 + 8) = v23;
              v18 = v31;
              goto LABEL_42;
            }
            *(_DWORD *)(a1 + 56) = v20 + 1;
            v22 = *(_QWORD *)&v19[2 * v20 + 2];
LABEL_42:
            result = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_Condition_ConditionEntry>(this, v22, v18);
            v31 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 50)
              goto LABEL_64;
          }
          v21 = *(_DWORD *)(a1 + 60);
          goto LABEL_40;
        }
        v7 = result + 2;
      }
      break;
    }
    v31 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_Condition_ConditionEntry>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = protobuf::Intelligence_Condition_ConditionEntry::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence_Condition_ConditionEntry::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Condition_ConditionEntry *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::Intelligence_Condition_ConditionEntry *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  protobuf::Intelligence_Condition_ConditionEntry *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  protobuf::Intelligence_Condition_ConditionEntry *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  protobuf::Intelligence_KeyValueParameter *v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  protobuf::Intelligence_KeyValueParameter *v35;
  unsigned int v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 9), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 10), v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 11), v4);
LABEL_5:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 42;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        v11 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_Condition_ConditionEntry::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v17 = (protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 50;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          v19 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v18;
        v19 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::Intelligence_Condition_ConditionEntry::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v23 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 12);
    *v4 = 58;
    v24 = *((_DWORD *)v23 + 5);
    if (v24 > 0x7F)
    {
      v4[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v25 = (unsigned __int8 *)(v4 + 3);
        do
        {
          *(v25 - 1) = v26 | 0x80;
          v27 = v26 >> 7;
          ++v25;
          v28 = v26 >> 14;
          v26 >>= 7;
        }
        while (v28);
        *(v25 - 1) = v27;
      }
      else
      {
        v4[2] = v26;
        v25 = (unsigned __int8 *)(v4 + 3);
      }
    }
    else
    {
      v4[1] = v24;
      v25 = (unsigned __int8 *)(v4 + 2);
    }
    v4 = (char *)protobuf::Intelligence_Condition_ConditionEntry::InternalSerializeWithCachedSizesToArray(v23, v25, a3);
    if ((v6 & 0x10) == 0)
    {
LABEL_31:
      if ((v6 & 0x20) == 0)
        goto LABEL_66;
      goto LABEL_56;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_31;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v29 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
  *v4 = 66;
  v30 = *((_DWORD *)v29 + 5);
  if (v30 > 0x7F)
  {
    v4[1] = v30 | 0x80;
    v32 = v30 >> 7;
    if (v30 >> 14)
    {
      v31 = v4 + 3;
      do
      {
        *(v31 - 1) = v32 | 0x80;
        v33 = v32 >> 7;
        ++v31;
        v34 = v32 >> 14;
        v32 >>= 7;
      }
      while (v34);
      *(v31 - 1) = v33;
    }
    else
    {
      v4[2] = v32;
      v31 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v30;
    v31 = v4 + 2;
  }
  v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v29, v31, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_56:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v35 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 14);
    *v4 = 74;
    v36 = *((_DWORD *)v35 + 5);
    if (v36 > 0x7F)
    {
      v4[1] = v36 | 0x80;
      v38 = v36 >> 7;
      if (v36 >> 14)
      {
        v37 = v4 + 3;
        do
        {
          *(v37 - 1) = v38 | 0x80;
          v39 = v38 >> 7;
          ++v37;
          v40 = v38 >> 14;
          v38 >>= 7;
        }
        while (v40);
        *(v37 - 1) = v39;
      }
      else
      {
        v4[2] = v38;
        v37 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v36;
      v37 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v35, v37, a3);
  }
LABEL_66:
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) == 0)
    return (unsigned __int8 *)v4;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 23) < 0)
  {
    v45 = *(void **)v43;
    v44 = *(_QWORD *)(v43 + 8);
  }
  else
  {
    LODWORD(v44) = *(unsigned __int8 *)(v43 + 23);
    v45 = (void *)v43;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v44)
  {
    v46 = (int)v44;
    memcpy(v4, v45, (int)v44);
    v4 += v46;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v45, v44, (unsigned __int8 *)v4);
}

