uint64_t protobuf::Intelligence_Condition_ConditionEntry::ByteSizeLong(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_Condition_ConditionEntry **v4;
  uint64_t v5;
  protobuf::Intelligence_Condition_ConditionEntry *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_Condition_ConditionEntry **v11;
  uint64_t v12;
  protobuf::Intelligence_Condition_ConditionEntry *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_Condition_ConditionEntry **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_Condition_ConditionEntry::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_Condition_ConditionEntry **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_Condition_ConditionEntry::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((_DWORD *)this + 4);
  if ((v15 & 0x3F) == 0)
    goto LABEL_23;
  if ((v15 & 1) != 0)
  {
    v19 = *((_QWORD *)this + 9);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v21 = *(_QWORD *)(v19 + 8);
    if ((v20 & 0x80u) == 0)
      v21 = v20;
    v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 2) == 0)
    {
LABEL_18:
      if ((v15 & 4) == 0)
        goto LABEL_19;
      goto LABEL_31;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_18;
  }
  v22 = *((_QWORD *)this + 10);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 4) == 0)
  {
LABEL_19:
    if ((v15 & 8) == 0)
      goto LABEL_20;
LABEL_34:
    v28 = protobuf::Intelligence_Condition_ConditionEntry::ByteSizeLong(*((protobuf::Intelligence_Condition_ConditionEntry **)this
                                                                        + 12));
    v9 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 0x10) == 0)
    {
LABEL_21:
      if ((v15 & 0x20) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
    goto LABEL_35;
  }
LABEL_31:
  v25 = *((_QWORD *)this + 11);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v27 = v26;
  v9 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 8) != 0)
    goto LABEL_34;
LABEL_20:
  if ((v15 & 0x10) == 0)
    goto LABEL_21;
LABEL_35:
  v29 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(*((protobuf::Intelligence_KeyValueParameter **)this + 13));
  v9 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 0x20) != 0)
  {
LABEL_22:
    v16 = protobuf::Intelligence_KeyValueParameter::ByteSizeLong(*((protobuf::Intelligence_KeyValueParameter **)this + 14));
    v9 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_23:
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) != 0)
  {
    v30 = v17 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v30 + 23) < 0)
      v31 = *(_QWORD *)(v30 + 8);
    else
      v31 = *(unsigned __int8 *)(v30 + 23);
    v9 += v31;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

void protobuf::Intelligence_Condition_ConditionEntry::CheckTypeAndMergeFrom(protobuf::Intelligence_Condition_ConditionEntry *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(protobuf::Intelligence_Condition_ConditionEntry *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  protobuf::Intelligence_Condition_ConditionEntry *v13;
  const protobuf::Intelligence_Condition_ConditionEntry *v14;
  protobuf::Intelligence_KeyValueParameter *v15;
  const protobuf::Intelligence_KeyValueParameter *v16;
  protobuf::Intelligence_KeyValueParameter *v17;
  const protobuf::Intelligence_KeyValueParameter *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13832);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x3F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 10);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 10);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 11);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 11);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
                if ((v6 & 8) != 0)
                  goto LABEL_22;
                goto LABEL_28;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
          {
LABEL_22:
            *((_DWORD *)this + 4) |= 8u;
            v13 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 12);
            if (!v13)
            {
              v13 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
              *((_QWORD *)this + 12) = v13;
            }
            if (*((_QWORD *)a2 + 12))
              v14 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)a2 + 12);
            else
              v14 = (const protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
            protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(v13, v14);
          }
LABEL_28:
          if ((v6 & 0x10) != 0)
          {
            *((_DWORD *)this + 4) |= 0x10u;
            v15 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 13);
            if (!v15)
            {
              v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
              *((_QWORD *)this + 13) = v15;
            }
            if (*((_QWORD *)a2 + 13))
              v16 = (const protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)a2 + 13);
            else
              v16 = (const protobuf::Intelligence_KeyValueParameter *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
            protobuf::Intelligence_KeyValueParameter::MergeFrom(v15, v16);
          }
          if ((v6 & 0x20) != 0)
          {
            *((_DWORD *)this + 4) |= 0x20u;
            v17 = (protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)this + 14);
            if (!v17)
            {
              v17 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
              *((_QWORD *)this + 14) = v17;
            }
            if (*((_QWORD *)a2 + 14))
              v18 = (const protobuf::Intelligence_KeyValueParameter *)*((_QWORD *)a2 + 14);
            else
              v18 = (const protobuf::Intelligence_KeyValueParameter *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
            protobuf::Intelligence_KeyValueParameter::MergeFrom(v17, v18);
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_22AF3B0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Condition_ConditionEntry::CopyFrom(protobuf::Intelligence_Condition_ConditionEntry *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Condition_ConditionEntry::Clear(this);
    protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::IsInitialized(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  return 1;
}

void protobuf::Intelligence_Condition_ConditionEntry::InternalSwap(protobuf::Intelligence_Condition_ConditionEntry *this, protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v34;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Condition_ConditionEntry *)((char *)this + 24), (protobuf::Intelligence_Condition_ConditionEntry *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence_Condition_ConditionEntry *)((char *)this + 48), (protobuf::Intelligence_Condition_ConditionEntry *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 11);
  v26 = (uint64_t **)((char *)a2 + 88);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v31;
  v32 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v32;
  v33 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v33;
}

_QWORD *protobuf::Intelligence_Condition_ConditionEntry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Condition.ConditionEntry");
}

void protobuf::Intelligence_Condition::InitAsDefaultInstance(protobuf::Intelligence_Condition *this)
{
  qword_255B58F68 = (uint64_t)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
}

uint64_t protobuf::Intelligence_Condition::_Internal::condition(protobuf::Intelligence_Condition::_Internal *this, const protobuf::Intelligence_Condition *a2)
{
  return *((_QWORD *)this + 4);
}

protobuf::Intelligence_Condition *protobuf::Intelligence_Condition::Intelligence_Condition(protobuf::Intelligence_Condition *this)
{
  *(_QWORD *)this = &off_24F542098;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Intelligence_Condition_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Condition_intelligence_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_22AF3B438(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Condition *protobuf::Intelligence_Condition::Intelligence_Condition(protobuf::Intelligence_Condition *this, const protobuf::Intelligence_Condition *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  protobuf::Intelligence_Condition_ConditionEntry *v7;
  std::string *v8;
  char v10;
  std::string v11[2];

  *(_QWORD *)this = &off_24F542098;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v5 & 2) != 0)
  {
    if (!*((_QWORD *)a2 + 4))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21745);
      v8 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: !value || condition_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v7 = (protobuf::Intelligence_Condition_ConditionEntry *)operator new();
    protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(v7, *((const protobuf::Intelligence_Condition_ConditionEntry **)a2 + 4));
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)this + 4) = v7;
  return this;
}

void sub_22AF3B558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Condition::~Intelligence_Condition(protobuf::Intelligence_Condition *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F542098;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence_Condition *)&protobuf::_Intelligence_Condition_default_instance_)
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence_Condition::~Intelligence_Condition(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence_Condition::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence_Condition::default_instance(protobuf::Intelligence_Condition *this)
{
  if (atomic_load(scc_info_Intelligence_Condition_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_Condition_intelligence_2eproto);
  return &protobuf::_Intelligence_Condition_default_instance_;
}

void protobuf::Intelligence_Condition::Clear(protobuf::Intelligence_Condition *this)
{
  int v2;
  uint64_t v3;
  protobuf::Intelligence_Condition_ConditionEntry *v4;
  std::string *v5;
  google::protobuf::internal::InternalMetadataWithArenaLite *v6;
  char v7;
  char v8;
  std::string v9[2];

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_9;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_6;
    }
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
  }
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_6:
  v4 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 4);
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 13979);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: condition_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    v4 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 4);
  }
  protobuf::Intelligence_Condition_ConditionEntry::Clear(v4);
LABEL_9:
  v7 = *((_BYTE *)this + 8);
  v6 = (protobuf::Intelligence_Condition *)((char *)this + 8);
  *((_DWORD *)v6 + 2) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
}

void sub_22AF3B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::Intelligence_Condition::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  google::protobuf::internal *v7;
  const char *v8;
  protobuf::Intelligence_Condition_ConditionEntry *v10;
  std::string *v11;
  int v12;
  google::protobuf::internal *v13;

  v13 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23));
  result = v13;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)v7 << 7) - 128);
      if ((*(char *)v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v13 = result;
      if (!result)
        return result;
      v7 = result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v10 = *(protobuf::Intelligence_Condition_ConditionEntry **)(a1 + 32);
          if (!v10)
          {
            v10 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
            *(_QWORD *)(a1 + 32) = v10;
            v7 = v13;
          }
          result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_Condition_ConditionEntry>(this, (uint64_t)v10, v7);
          goto LABEL_21;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v11 = *(std::string **)(a1 + 24);
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v11 = *(std::string **)(a1 + 24);
          v7 = v13;
        }
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)v7, (uint64_t)this);
        goto LABEL_21;
      }
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), v7, this);
LABEL_21:
      v13 = result;
      if (result)
      {
        v12 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v13, *((_DWORD *)this + 23));
        result = v13;
        if (!v12)
          continue;
      }
      return result;
    }
    v7 = (google::protobuf::internal *)((char *)result + 2);
LABEL_5:
    v13 = v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::Intelligence_Condition::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence_Condition *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  protobuf::Intelligence_Condition_ConditionEntry *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v7 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 4);
    *v4 = 18;
    v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v9 = v4 + 3;
        do
        {
          *(v9 - 1) = v10 | 0x80;
          v11 = v10 >> 7;
          ++v9;
          v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
        *(v9 - 1) = v11;
      }
      else
      {
        v4[2] = v10;
        v9 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v8;
      v9 = v4 + 2;
    }
    v4 = (char *)protobuf::Intelligence_Condition_ConditionEntry::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) == 0)
    return (unsigned __int8 *)v4;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 23) < 0)
  {
    v17 = *(void **)v15;
    v16 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    LODWORD(v16) = *(unsigned __int8 *)(v15 + 23);
    v17 = (void *)v15;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v16)
  {
    v18 = (int)v16;
    memcpy(v4, v17, (int)v16);
    v4 += v18;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v16, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence_Condition::ByteSizeLong(protobuf::Intelligence_Condition *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
  {
    v3 = 0;
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_10;
LABEL_9:
    v7 = protobuf::Intelligence_Condition_ConditionEntry::ByteSizeLong(*((protobuf::Intelligence_Condition_ConditionEntry **)this
                                                                       + 4));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v6 = v5;
  v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
    goto LABEL_9;
LABEL_10:
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    v3 += v11;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::Intelligence_Condition::CheckTypeAndMergeFrom(protobuf::Intelligence_Condition *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence_Condition::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence_Condition::MergeFrom(protobuf::Intelligence_Condition *this, const protobuf::Intelligence_Condition *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  protobuf::Intelligence_Condition_ConditionEntry *v9;
  const protobuf::Intelligence_Condition_ConditionEntry *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 14100);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
LABEL_11:
          *((_DWORD *)this + 4) |= 2u;
          v9 = (protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)this + 4);
          if (!v9)
          {
            v9 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
            *((_QWORD *)this + 4) = v9;
          }
          if (*((_QWORD *)a2 + 4))
            v10 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)a2 + 4);
          else
            v10 = (const protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
          protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(v9, v10);
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
    goto LABEL_11;
  }
}

void sub_22AF3BCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence_Condition::CopyFrom(protobuf::Intelligence_Condition *this, const protobuf::Intelligence_Condition *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence_Condition::Clear(this);
    protobuf::Intelligence_Condition::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence_Condition::IsInitialized(protobuf::Intelligence_Condition *this)
{
  return 1;
}

void protobuf::Intelligence_Condition::InternalSwap(protobuf::Intelligence_Condition *this, protobuf::Intelligence_Condition *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v20;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
}

_QWORD *protobuf::Intelligence_Condition::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence.Condition");
}

void protobuf::Intelligence::InitAsDefaultInstance(protobuf::Intelligence *this)
{
  qword_255B59188 = (uint64_t)&protobuf::_Intelligence_Start_default_instance_;
}

uint64_t protobuf::Intelligence::_Internal::start(protobuf::Intelligence::_Internal *this, const protobuf::Intelligence *a2)
{
  return *((_QWORD *)this + 67);
}

protobuf::Intelligence *protobuf::Intelligence::Intelligence(protobuf::Intelligence *this)
{
  *(_QWORD *)this = &off_24F542128;
  bzero((char *)this + 8, 0x208uLL);
  if (atomic_load(scc_info_Intelligence_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_intelligence_2eproto);
  *((_QWORD *)this + 66) = &google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 552) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  return this;
}

void sub_22AF3BF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _Unwind_Exception *exception_object)
{
  uint64_t *v20;
  google::protobuf::internal::ArenaImpl **v21;

  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::~RepeatedPtrField(v21 + 63);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v21 + 60);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v21 + 57);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(v21 + 54);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(v21 + 51);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::~RepeatedPtrField(v21 + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::~RepeatedPtrField(v21 + 45);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::~RepeatedPtrField(v21 + 42);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::~RepeatedPtrField(v21 + 39);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::~RepeatedPtrField(v21 + 36);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::~RepeatedPtrField(v21 + 33);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::~RepeatedPtrField(v21 + 30);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::~RepeatedPtrField(v21 + 27);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::~RepeatedPtrField(v21 + 24);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::~RepeatedPtrField(v21 + 21);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(v21 + 18);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(v21 + 15);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::~RepeatedPtrField(v21 + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::~RepeatedPtrField(v21 + 9);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::~RepeatedPtrField(v21 + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::~RepeatedPtrField(v21 + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v20);
  _Unwind_Resume(a1);
}

protobuf::Intelligence *protobuf::Intelligence::Intelligence(protobuf::Intelligence *this, const protobuf::Intelligence *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  protobuf::Intelligence_Start *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t *v11;
  char v12;
  std::string v13[2];

  *(_QWORD *)this = &off_24F542128;
  *((_QWORD *)this + 1) = 0;
  v11 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((int **)this + 18, (uint64_t)a2 + 144);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((int **)this + 21, (uint64_t)a2 + 168);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>((int **)this + 24, (uint64_t)a2 + 192);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>((int **)this + 27, (uint64_t)a2 + 216);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>((int **)this + 30, (uint64_t)a2 + 240);
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((int **)this + 33, (uint64_t)a2 + 264);
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((int **)this + 36, (uint64_t)a2 + 288);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((int **)this + 39, (uint64_t)a2 + 312);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((int **)this + 42, (uint64_t)a2 + 336);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((int **)this + 45, (uint64_t)a2 + 360);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((int **)this + 48, (uint64_t)a2 + 384);
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((int **)this + 51, (uint64_t)a2 + 408);
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((int **)this + 54, (uint64_t)a2 + 432);
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 456, (uint64_t)a2 + 456);
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 480, (uint64_t)a2 + 480);
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((int **)this + 63, (uint64_t)a2 + 504);
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v11, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 66) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 66);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 66, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v5 & 2) != 0)
  {
    if (!*((_QWORD *)a2 + 67))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22067);
      v8 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    v7 = (protobuf::Intelligence_Start *)operator new();
    protobuf::Intelligence_Start::Intelligence_Start(v7, *((const protobuf::Intelligence_Start **)a2 + 67));
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)this + 67) = v7;
  v9 = *((_QWORD *)a2 + 68);
  *((_BYTE *)this + 552) = *((_BYTE *)a2 + 552);
  *((_QWORD *)this + 68) = v9;
  return this;
}

void sub_22AF3C388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, google::protobuf::internal::RepeatedPtrFieldBase *a10, google::protobuf::internal::ArenaImpl **a11, google::protobuf::internal::ArenaImpl **a12, google::protobuf::internal::ArenaImpl **a13, google::protobuf::internal::ArenaImpl **a14, google::protobuf::internal::ArenaImpl **a15, google::protobuf::internal::ArenaImpl **a16, google::protobuf::internal::ArenaImpl **a17, google::protobuf::internal::ArenaImpl **a18, google::protobuf::internal::ArenaImpl **a19, google::protobuf::internal::ArenaImpl **a20,google::protobuf::internal::ArenaImpl **a21,google::protobuf::internal::ArenaImpl **a22,google::protobuf::internal::ArenaImpl **a23,uint64_t *a24,uint64_t a25,void *a26)
{
  google::protobuf::internal::ArenaImpl **v26;
  uint64_t v27;
  google::protobuf::internal::ArenaImpl **v28;
  google::protobuf::internal::ArenaImpl **v29;
  google::protobuf::internal::ArenaImpl **v30;
  google::protobuf::internal::ArenaImpl **v31;
  google::protobuf::internal::ArenaImpl **v32;

  google::protobuf::internal::LogMessage::~LogMessage(&a26);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::~RepeatedPtrField(v28);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v27);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(a10);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(a11);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(a12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::~RepeatedPtrField(a13);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::~RepeatedPtrField(a14);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::~RepeatedPtrField(a15);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::~RepeatedPtrField(a16);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::~RepeatedPtrField(a17);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::~RepeatedPtrField(a18);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::~RepeatedPtrField(v26);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::~RepeatedPtrField(v32);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::~RepeatedPtrField(v31);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::~RepeatedPtrField(v30);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(v29);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(a19);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::~RepeatedPtrField(a20);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::~RepeatedPtrField(a21);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::~RepeatedPtrField(a22);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::~RepeatedPtrField(a23);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(a24);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence::~Intelligence(protobuf::Intelligence *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F542128;
  v2 = *((_QWORD *)this + 66);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  if (this != (protobuf::Intelligence *)&protobuf::_Intelligence_default_instance_)
  {
    v4 = *((_QWORD *)this + 67);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 63);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 480);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 456);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 54);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 51);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 48);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 45);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 42);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 39);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 36);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 33);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 30);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 27);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 24);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 21);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 18);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 15);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 12);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 9);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::Intelligence::~Intelligence(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::Intelligence::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::Intelligence::default_instance(protobuf::Intelligence *this)
{
  if (atomic_load(scc_info_Intelligence_intelligence_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Intelligence_intelligence_2eproto);
  return &protobuf::_Intelligence_default_instance_;
}

void protobuf::Intelligence::Clear(protobuf::Intelligence *this)
{
  uint64_t v2;
  protobuf::Intelligence_Meta **v3;
  protobuf::Intelligence_Meta *v4;
  std::string *v5;
  uint64_t v6;
  protobuf::Intelligence_DialogResponse **v7;
  protobuf::Intelligence_DialogResponse *v8;
  std::string *v9;
  uint64_t v10;
  protobuf::Intelligence_BehaviorResponse **v11;
  protobuf::Intelligence_BehaviorResponse *v12;
  std::string *v13;
  uint64_t v14;
  protobuf::Intelligence_ReferenceResponse **v15;
  protobuf::Intelligence_ReferenceResponse *v16;
  std::string *v17;
  uint64_t v18;
  protobuf::Intelligence_Activity **v19;
  protobuf::Intelligence_Activity *v20;
  std::string *v21;
  uint64_t v22;
  protobuf::Intelligence_Utterance **v23;
  protobuf::Intelligence_Utterance *v24;
  std::string *v25;
  uint64_t v26;
  protobuf::Intelligence_Character **v27;
  protobuf::Intelligence_Character *v28;
  std::string *v29;
  uint64_t v30;
  protobuf::Intelligence_Condition **v31;
  protobuf::Intelligence_Condition *v32;
  std::string *v33;
  uint64_t v34;
  protobuf::Intelligence_Variable **v35;
  protobuf::Intelligence_Variable *v36;
  std::string *v37;
  uint64_t v38;
  protobuf::Intelligence_Event **v39;
  protobuf::Intelligence_Event *v40;
  std::string *v41;
  int v42;
  uint64_t v43;
  protobuf::Intelligence_Start *v44;
  std::string *v45;
  google::protobuf::internal::InternalMetadataWithArenaLite *v46;
  char v47;
  char v48;
  std::string v49[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (protobuf::Intelligence_Meta **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Meta::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  v6 = *((unsigned int *)this + 14);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (protobuf::Intelligence_DialogResponse **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v8 = *v7++;
      protobuf::Intelligence_DialogResponse::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 14) = 0;
  }
  v10 = *((unsigned int *)this + 20);
  if ((v10 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v13 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v10)
  {
    v11 = (protobuf::Intelligence_BehaviorResponse **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v12 = *v11++;
      protobuf::Intelligence_BehaviorResponse::Clear(v12);
      --v10;
    }
    while (v10);
    *((_DWORD *)this + 20) = 0;
  }
  v14 = *((unsigned int *)this + 26);
  if ((v14 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v17 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v14)
  {
    v15 = (protobuf::Intelligence_ReferenceResponse **)(*((_QWORD *)this + 14) + 8);
    do
    {
      v16 = *v15++;
      protobuf::Intelligence_ReferenceResponse::Clear(v16);
      --v14;
    }
    while (v14);
    *((_DWORD *)this + 26) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 120);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 144);
  v18 = *((unsigned int *)this + 44);
  if ((v18 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v21 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v21->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v18)
  {
    v19 = (protobuf::Intelligence_Activity **)(*((_QWORD *)this + 23) + 8);
    do
    {
      v20 = *v19++;
      protobuf::Intelligence_Activity::Clear(v20);
      --v18;
    }
    while (v18);
    *((_DWORD *)this + 44) = 0;
  }
  v22 = *((unsigned int *)this + 50);
  if ((v22 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v25 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v25->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v22)
  {
    v23 = (protobuf::Intelligence_Utterance **)(*((_QWORD *)this + 26) + 8);
    do
    {
      v24 = *v23++;
      protobuf::Intelligence_Utterance::Clear(v24);
      --v22;
    }
    while (v22);
    *((_DWORD *)this + 50) = 0;
  }
  v26 = *((unsigned int *)this + 56);
  if ((v26 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v29 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v29->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v26)
  {
    v27 = (protobuf::Intelligence_Character **)(*((_QWORD *)this + 29) + 8);
    do
    {
      v28 = *v27++;
      protobuf::Intelligence_Character::Clear(v28);
      --v26;
    }
    while (v26);
    *((_DWORD *)this + 56) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>((uint64_t)this + 240);
  v30 = *((unsigned int *)this + 68);
  if ((v30 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v33 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v33->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v30)
  {
    v31 = (protobuf::Intelligence_Condition **)(*((_QWORD *)this + 35) + 8);
    do
    {
      v32 = *v31++;
      protobuf::Intelligence_Condition::Clear(v32);
      --v30;
    }
    while (v30);
    *((_DWORD *)this + 68) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((uint64_t)this + 288);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((uint64_t)this + 312);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((uint64_t)this + 336);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((uint64_t)this + 360);
  v34 = *((unsigned int *)this + 98);
  if ((v34 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v37 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v37->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v34)
  {
    v35 = (protobuf::Intelligence_Variable **)(*((_QWORD *)this + 50) + 8);
    do
    {
      v36 = *v35++;
      protobuf::Intelligence_Variable::Clear(v36);
      --v34;
    }
    while (v34);
    *((_DWORD *)this + 98) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 432);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 456);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 480);
  v38 = *((unsigned int *)this + 128);
  if ((v38 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v41 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v41->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v38)
  {
    v39 = (protobuf::Intelligence_Event **)(*((_QWORD *)this + 65) + 8);
    do
    {
      v40 = *v39++;
      protobuf::Intelligence_Event::Clear(v40);
      --v38;
    }
    while (v38);
    *((_DWORD *)this + 128) = 0;
  }
  v42 = *((_DWORD *)this + 4);
  if ((v42 & 3) != 0)
  {
    if ((v42 & 1) != 0)
    {
      v43 = *((_QWORD *)this + 66);
      if (*(char *)(v43 + 23) < 0)
      {
        **(_BYTE **)v43 = 0;
        *(_QWORD *)(v43 + 8) = 0;
        if ((v42 & 2) == 0)
          goto LABEL_69;
        goto LABEL_66;
      }
      *(_BYTE *)v43 = 0;
      *(_BYTE *)(v43 + 23) = 0;
    }
    if ((v42 & 2) == 0)
      goto LABEL_69;
LABEL_66:
    v44 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
    if (!v44)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v49, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 14276);
      v45 = google::protobuf::internal::LogMessage::operator<<(v49, "CHECK failed: start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v45->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v49[0].__r_.__value_.__l.__data_);
      v44 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
    }
    protobuf::Intelligence_Start::Clear(v44);
  }
LABEL_69:
  if ((v42 & 0xC) != 0)
  {
    *((_BYTE *)this + 552) = 0;
    *((_QWORD *)this + 68) = 0;
  }
  v47 = *((_BYTE *)this + 8);
  v46 = (protobuf::Intelligence *)((char *)this + 8);
  *((_DWORD *)v46 + 2) = 0;
  if ((v47 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v46);
}

void sub_22AF3CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *protobuf::Intelligence::_InternalParse(uint64_t a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  int v14;
  protobuf::Intelligence_Meta *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  int v32;
  protobuf::Intelligence_DialogResponse *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  char *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  int v49;
  protobuf::Intelligence_BehaviorResponse *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  char *v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  int v66;
  protobuf::Intelligence_ReferenceResponse *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  char *v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  char *v79;
  google::protobuf::internal *v80;
  int *v81;
  uint64_t v82;
  int v83;
  protobuf::Intelligence_ResponseGroup *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  google::protobuf::internal *v88;
  int *v89;
  uint64_t v90;
  int v91;
  protobuf::Intelligence_InputGroup *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int *v97;
  uint64_t v98;
  int v99;
  protobuf::Intelligence_Activity *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  char *v104;
  char *v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  char *v112;
  char *v113;
  int *v114;
  uint64_t v115;
  int v116;
  protobuf::Intelligence_Utterance *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  char *v121;
  char *v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unint64_t v128;
  char *v129;
  char *v130;
  int *v131;
  uint64_t v132;
  int v133;
  protobuf::Intelligence_Character *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  char *v139;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unint64_t v145;
  char *v146;
  char *v147;
  int *v148;
  uint64_t v149;
  int v150;
  protobuf::Intelligence_Intent *v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  char *v155;
  char *v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unint64_t v162;
  char *v163;
  char *v164;
  int *v165;
  uint64_t v166;
  int v167;
  protobuf::Intelligence_Condition *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  char *v172;
  char *v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unint64_t v179;
  char *v180;
  char *v181;
  int *v182;
  uint64_t v183;
  int v184;
  protobuf::Intelligence_Counter *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  char *v189;
  char *v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unint64_t v196;
  char *v197;
  char *v198;
  int *v199;
  uint64_t v200;
  int v201;
  protobuf::Intelligence_Flag *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  char *v206;
  char *v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  unint64_t v213;
  char *v214;
  char *v215;
  int *v216;
  uint64_t v217;
  int v218;
  protobuf::Intelligence_Label *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  char *v223;
  char *v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unint64_t v230;
  char *v231;
  char *v232;
  int *v233;
  uint64_t v234;
  int v235;
  protobuf::Intelligence_List *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  char *v240;
  char *v241;
  unsigned int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  unint64_t v247;
  char *v248;
  unint64_t v249;
  int v250;
  std::string *v251;
  char *v252;
  char *v253;
  char *v254;
  int *v255;
  uint64_t v256;
  int v257;
  protobuf::Intelligence_Variable *v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  char *v262;
  char *v263;
  unsigned int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unint64_t v269;
  char *v270;
  google::protobuf::internal *v271;
  int *v272;
  uint64_t v273;
  int v274;
  protobuf::Intelligence_ResponseGroup *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  google::protobuf::internal *v279;
  int *v280;
  uint64_t v281;
  int v282;
  protobuf::Intelligence_InputGroup *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  std::string::value_type *v287;
  int *v288;
  uint64_t v289;
  int v290;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  std::string::value_type *v296;
  int *v297;
  uint64_t v298;
  int v299;
  std::string *v300;
  google::protobuf::internal::ArenaImpl *v301;
  uint64_t v302;
  uint64_t v303;
  protobuf::Intelligence_Start *v304;
  unsigned int v305;
  char *v306;
  char *v307;
  char *v308;
  int *v309;
  uint64_t v310;
  int v311;
  protobuf::Intelligence_Event *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  char *v316;
  char *v317;
  unsigned int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  unint64_t v323;
  BOOL v324;
  char *v325;
  unsigned int v326;
  int v327;
  int v328;
  int v329;
  char *v330;
  int v331;
  char *v332;
  uint64_t v333;
  std::string **v335;
  char *v336[2];

  v336[0] = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)v336, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v7 = (uint64_t *)(a1 + 480);
    v8 = (uint64_t *)(a1 + 456);
    v335 = (std::string **)(a1 + 528);
    while (2)
    {
      TagFallback = v336[0] + 1;
      LODWORD(v9) = *v336[0];
      if (*v336[0] < 0)
      {
        v9 = (const char *)(v9 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v336[0], v9);
          v336[0] = TagFallback;
          if (!TagFallback)
            goto LABEL_417;
LABEL_8:
          switch(v9 >> 3)
          {
            case 1u:
              if (v9 != 9)
                goto LABEL_400;
              v5 |= 4u;
              *(_QWORD *)(a1 + 544) = *(_QWORD *)TagFallback;
              v336[0] = TagFallback + 8;
              goto LABEL_413;
            case 2u:
              if (v9 != 18)
                goto LABEL_400;
              v10 = TagFallback - 1;
              while (2)
              {
                v11 = v10 + 1;
                v336[0] = v11;
                v12 = *(int **)(a1 + 40);
                if (!v12)
                {
                  v14 = *(_DWORD *)(a1 + 36);
LABEL_20:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
                  v12 = *(int **)(a1 + 40);
                  v14 = *v12;
                  goto LABEL_21;
                }
                v13 = *(int *)(a1 + 32);
                v14 = *v12;
                if ((int)v13 < *v12)
                {
                  *(_DWORD *)(a1 + 32) = v13 + 1;
                  v15 = *(protobuf::Intelligence_Meta **)&v12[2 * v13 + 2];
                  goto LABEL_22;
                }
                if (v14 == *(_DWORD *)(a1 + 36))
                  goto LABEL_20;
LABEL_21:
                *v12 = v14 + 1;
                v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                v16 = *(_QWORD *)(a1 + 40);
                v17 = *(int *)(a1 + 32);
                *(_DWORD *)(a1 + 32) = v17 + 1;
                *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
                v11 = v336[0];
LABEL_22:
                v18 = *v11;
                if (*v11 < 0)
                {
                  SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v11, (const char *)*v11);
                  if (!SizeFallback)
                    goto LABEL_416;
                  v19 = SizeFallback;
                  v18 = v21;
                }
                else
                {
                  v19 = v11 + 1;
                }
                v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v19, v18);
                v23 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v23--, 1);
                *((_DWORD *)this + 22) = v23;
                if (v23 < 0 == v24)
                {
                  v25 = v22;
                  v10 = (char *)protobuf::Intelligence_Meta::_InternalParse((uint64_t)v15, (google::protobuf::internal *)v19, this);
                  if (v10)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v26 = *((_DWORD *)this + 7) + v25;
                      *((_DWORD *)this + 7) = v26;
                      v27 = *((_QWORD *)this + 1) + (v26 & (v26 >> 31));
                      *(_QWORD *)this = v27;
                      v336[0] = v10;
                      if (v27 <= (unint64_t)v10 || *v10 != 18)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 4u:
              if (v9 != 34)
                goto LABEL_400;
              v28 = TagFallback - 1;
              while (2)
              {
                v29 = v28 + 1;
                v336[0] = v29;
                v30 = *(int **)(a1 + 64);
                if (!v30)
                {
                  v32 = *(_DWORD *)(a1 + 60);
LABEL_39:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v32 + 1);
                  v30 = *(int **)(a1 + 64);
                  v32 = *v30;
                  goto LABEL_40;
                }
                v31 = *(int *)(a1 + 56);
                v32 = *v30;
                if ((int)v31 < *v30)
                {
                  *(_DWORD *)(a1 + 56) = v31 + 1;
                  v33 = *(protobuf::Intelligence_DialogResponse **)&v30[2 * v31 + 2];
                  goto LABEL_41;
                }
                if (v32 == *(_DWORD *)(a1 + 60))
                  goto LABEL_39;
LABEL_40:
                *v30 = v32 + 1;
                v33 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
                v34 = *(_QWORD *)(a1 + 64);
                v35 = *(int *)(a1 + 56);
                *(_DWORD *)(a1 + 56) = v35 + 1;
                *(_QWORD *)(v34 + 8 * v35 + 8) = v33;
                v29 = v336[0];
LABEL_41:
                v36 = *v29;
                if (*v29 < 0)
                {
                  v38 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v29, (const char *)*v29);
                  if (!v38)
                    goto LABEL_416;
                  v37 = v38;
                  v36 = v39;
                }
                else
                {
                  v37 = v29 + 1;
                }
                v40 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v37, v36);
                v41 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v41--, 1);
                *((_DWORD *)this + 22) = v41;
                if (v41 < 0 == v24)
                {
                  v42 = v40;
                  v28 = protobuf::Intelligence_DialogResponse::_InternalParse((uint64_t)v33, v37, this);
                  if (v28)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v43 = *((_DWORD *)this + 7) + v42;
                      *((_DWORD *)this + 7) = v43;
                      v44 = *((_QWORD *)this + 1) + (v43 & (v43 >> 31));
                      *(_QWORD *)this = v44;
                      v336[0] = v28;
                      if (v44 <= (unint64_t)v28 || *v28 != 34)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 5u:
              if (v9 != 42)
                goto LABEL_400;
              v45 = TagFallback - 1;
              while (2)
              {
                v46 = v45 + 1;
                v336[0] = v46;
                v47 = *(int **)(a1 + 88);
                if (!v47)
                {
                  v49 = *(_DWORD *)(a1 + 84);
LABEL_58:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v49 + 1);
                  v47 = *(int **)(a1 + 88);
                  v49 = *v47;
                  goto LABEL_59;
                }
                v48 = *(int *)(a1 + 80);
                v49 = *v47;
                if ((int)v48 < *v47)
                {
                  *(_DWORD *)(a1 + 80) = v48 + 1;
                  v50 = *(protobuf::Intelligence_BehaviorResponse **)&v47[2 * v48 + 2];
                  goto LABEL_60;
                }
                if (v49 == *(_DWORD *)(a1 + 84))
                  goto LABEL_58;
LABEL_59:
                *v47 = v49 + 1;
                v50 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(*(google::protobuf::internal::ArenaImpl **)(a1 + 72));
                v51 = *(_QWORD *)(a1 + 88);
                v52 = *(int *)(a1 + 80);
                *(_DWORD *)(a1 + 80) = v52 + 1;
                *(_QWORD *)(v51 + 8 * v52 + 8) = v50;
                v46 = v336[0];
LABEL_60:
                v53 = *v46;
                if (*v46 < 0)
                {
                  v55 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v46, (const char *)*v46);
                  if (!v55)
                    goto LABEL_416;
                  v54 = v55;
                  v53 = v56;
                }
                else
                {
                  v54 = v46 + 1;
                }
                v57 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v54, v53);
                v58 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v58--, 1);
                *((_DWORD *)this + 22) = v58;
                if (v58 < 0 == v24)
                {
                  v59 = v57;
                  v45 = protobuf::Intelligence_BehaviorResponse::_InternalParse((uint64_t)v50, v54, this);
                  if (v45)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v60 = *((_DWORD *)this + 7) + v59;
                      *((_DWORD *)this + 7) = v60;
                      v61 = *((_QWORD *)this + 1) + (v60 & (v60 >> 31));
                      *(_QWORD *)this = v61;
                      v336[0] = v45;
                      if (v61 <= (unint64_t)v45 || *v45 != 42)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 6u:
              if (v9 != 50)
                goto LABEL_400;
              v62 = TagFallback - 1;
              while (2)
              {
                v63 = v62 + 1;
                v336[0] = v63;
                v64 = *(int **)(a1 + 112);
                if (!v64)
                {
                  v66 = *(_DWORD *)(a1 + 108);
LABEL_77:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 96), v66 + 1);
                  v64 = *(int **)(a1 + 112);
                  v66 = *v64;
                  goto LABEL_78;
                }
                v65 = *(int *)(a1 + 104);
                v66 = *v64;
                if ((int)v65 < *v64)
                {
                  *(_DWORD *)(a1 + 104) = v65 + 1;
                  v67 = *(protobuf::Intelligence_ReferenceResponse **)&v64[2 * v65 + 2];
                  goto LABEL_79;
                }
                if (v66 == *(_DWORD *)(a1 + 108))
                  goto LABEL_77;
LABEL_78:
                *v64 = v66 + 1;
                v67 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(*(google::protobuf::internal::ArenaImpl **)(a1 + 96));
                v68 = *(_QWORD *)(a1 + 112);
                v69 = *(int *)(a1 + 104);
                *(_DWORD *)(a1 + 104) = v69 + 1;
                *(_QWORD *)(v68 + 8 * v69 + 8) = v67;
                v63 = v336[0];
LABEL_79:
                v70 = *v63;
                if (*v63 < 0)
                {
                  v72 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v63, (const char *)*v63);
                  if (!v72)
                    goto LABEL_416;
                  v71 = v72;
                  v70 = v73;
                }
                else
                {
                  v71 = v63 + 1;
                }
                v74 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v71, v70);
                v75 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v75--, 1);
                *((_DWORD *)this + 22) = v75;
                if (v75 < 0 == v24)
                {
                  v76 = v74;
                  v62 = (char *)protobuf::Intelligence_ReferenceResponse::_InternalParse((uint64_t)v67, (google::protobuf::internal *)v71, this);
                  if (v62)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v77 = *((_DWORD *)this + 7) + v76;
                      *((_DWORD *)this + 7) = v77;
                      v78 = *((_QWORD *)this + 1) + (v77 & (v77 >> 31));
                      *(_QWORD *)this = v78;
                      v336[0] = v62;
                      if (v78 <= (unint64_t)v62 || *v62 != 50)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 7u:
              if (v9 != 58)
                goto LABEL_400;
              v79 = TagFallback - 1;
              while (1)
              {
                v80 = (google::protobuf::internal *)(v79 + 1);
                v336[0] = v79 + 1;
                v81 = *(int **)(a1 + 136);
                if (!v81)
                  break;
                v82 = *(int *)(a1 + 128);
                v83 = *v81;
                if ((int)v82 >= *v81)
                {
                  if (v83 == *(_DWORD *)(a1 + 132))
                  {
LABEL_96:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 120), v83 + 1);
                    v81 = *(int **)(a1 + 136);
                    v83 = *v81;
                  }
                  *v81 = v83 + 1;
                  v84 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(*(google::protobuf::internal::ArenaImpl **)(a1 + 120));
                  v85 = *(_QWORD *)(a1 + 136);
                  v86 = *(int *)(a1 + 128);
                  *(_DWORD *)(a1 + 128) = v86 + 1;
                  *(_QWORD *)(v85 + 8 * v86 + 8) = v84;
                  v80 = (google::protobuf::internal *)v336[0];
                  goto LABEL_98;
                }
                *(_DWORD *)(a1 + 128) = v82 + 1;
                v84 = *(protobuf::Intelligence_ResponseGroup **)&v81[2 * v82 + 2];
LABEL_98:
                v79 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_ResponseGroup>(this, (uint64_t)v84, v80);
                v336[0] = v79;
                if (!v79)
                  goto LABEL_416;
                if (*(_QWORD *)this <= (unint64_t)v79 || *v79 != 58)
                  goto LABEL_413;
              }
              v83 = *(_DWORD *)(a1 + 132);
              goto LABEL_96;
            case 8u:
              if (v9 != 66)
                goto LABEL_400;
              v87 = TagFallback - 1;
              while (1)
              {
                v88 = (google::protobuf::internal *)(v87 + 1);
                v336[0] = v87 + 1;
                v89 = *(int **)(a1 + 160);
                if (!v89)
                  break;
                v90 = *(int *)(a1 + 152);
                v91 = *v89;
                if ((int)v90 >= *v89)
                {
                  if (v91 == *(_DWORD *)(a1 + 156))
                  {
LABEL_109:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 144), v91 + 1);
                    v89 = *(int **)(a1 + 160);
                    v91 = *v89;
                  }
                  *v89 = v91 + 1;
                  v92 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(*(google::protobuf::internal::ArenaImpl **)(a1 + 144));
                  v93 = *(_QWORD *)(a1 + 160);
                  v94 = *(int *)(a1 + 152);
                  *(_DWORD *)(a1 + 152) = v94 + 1;
                  *(_QWORD *)(v93 + 8 * v94 + 8) = v92;
                  v88 = (google::protobuf::internal *)v336[0];
                  goto LABEL_111;
                }
                *(_DWORD *)(a1 + 152) = v90 + 1;
                v92 = *(protobuf::Intelligence_InputGroup **)&v89[2 * v90 + 2];
LABEL_111:
                v87 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup>(this, (uint64_t)v92, v88);
                v336[0] = v87;
                if (!v87)
                  goto LABEL_416;
                if (*(_QWORD *)this <= (unint64_t)v87 || *v87 != 66)
                  goto LABEL_413;
              }
              v91 = *(_DWORD *)(a1 + 156);
              goto LABEL_109;
            case 9u:
              if (v9 != 74)
                goto LABEL_400;
              v95 = TagFallback - 1;
              while (2)
              {
                v96 = v95 + 1;
                v336[0] = v96;
                v97 = *(int **)(a1 + 184);
                if (!v97)
                {
                  v99 = *(_DWORD *)(a1 + 180);
LABEL_122:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 168), v99 + 1);
                  v97 = *(int **)(a1 + 184);
                  v99 = *v97;
                  goto LABEL_123;
                }
                v98 = *(int *)(a1 + 176);
                v99 = *v97;
                if ((int)v98 < *v97)
                {
                  *(_DWORD *)(a1 + 176) = v98 + 1;
                  v100 = *(protobuf::Intelligence_Activity **)&v97[2 * v98 + 2];
                  goto LABEL_124;
                }
                if (v99 == *(_DWORD *)(a1 + 180))
                  goto LABEL_122;
LABEL_123:
                *v97 = v99 + 1;
                v100 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(*(google::protobuf::internal::ArenaImpl **)(a1 + 168));
                v101 = *(_QWORD *)(a1 + 184);
                v102 = *(int *)(a1 + 176);
                *(_DWORD *)(a1 + 176) = v102 + 1;
                *(_QWORD *)(v101 + 8 * v102 + 8) = v100;
                v96 = v336[0];
LABEL_124:
                v103 = *v96;
                if (*v96 < 0)
                {
                  v105 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v96, (const char *)*v96);
                  if (!v105)
                    goto LABEL_416;
                  v104 = v105;
                  v103 = v106;
                }
                else
                {
                  v104 = v96 + 1;
                }
                v107 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v104, v103);
                v108 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v108--, 1);
                *((_DWORD *)this + 22) = v108;
                if (v108 < 0 == v24)
                {
                  v109 = v107;
                  v95 = protobuf::Intelligence_Activity::_InternalParse((uint64_t)v100, (google::protobuf::internal *)v104, this);
                  if (v95)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v110 = *((_DWORD *)this + 7) + v109;
                      *((_DWORD *)this + 7) = v110;
                      v111 = *((_QWORD *)this + 1) + (v110 & (v110 >> 31));
                      *(_QWORD *)this = v111;
                      v336[0] = v95;
                      if (v111 <= (unint64_t)v95 || *v95 != 74)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0xAu:
              if (v9 != 82)
                goto LABEL_400;
              v112 = TagFallback - 1;
              while (2)
              {
                v113 = v112 + 1;
                v336[0] = v113;
                v114 = *(int **)(a1 + 208);
                if (!v114)
                {
                  v116 = *(_DWORD *)(a1 + 204);
LABEL_141:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 192), v116 + 1);
                  v114 = *(int **)(a1 + 208);
                  v116 = *v114;
                  goto LABEL_142;
                }
                v115 = *(int *)(a1 + 200);
                v116 = *v114;
                if ((int)v115 < *v114)
                {
                  *(_DWORD *)(a1 + 200) = v115 + 1;
                  v117 = *(protobuf::Intelligence_Utterance **)&v114[2 * v115 + 2];
                  goto LABEL_143;
                }
                if (v116 == *(_DWORD *)(a1 + 204))
                  goto LABEL_141;
LABEL_142:
                *v114 = v116 + 1;
                v117 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(*(google::protobuf::internal::ArenaImpl **)(a1 + 192));
                v118 = *(_QWORD *)(a1 + 208);
                v119 = *(int *)(a1 + 200);
                *(_DWORD *)(a1 + 200) = v119 + 1;
                *(_QWORD *)(v118 + 8 * v119 + 8) = v117;
                v113 = v336[0];
LABEL_143:
                v120 = *v113;
                if (*v113 < 0)
                {
                  v122 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v113, (const char *)*v113);
                  if (!v122)
                    goto LABEL_416;
                  v121 = v122;
                  v120 = v123;
                }
                else
                {
                  v121 = v113 + 1;
                }
                v124 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v121, v120);
                v125 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v125--, 1);
                *((_DWORD *)this + 22) = v125;
                if (v125 < 0 == v24)
                {
                  v126 = v124;
                  v112 = (char *)protobuf::Intelligence_Utterance::_InternalParse((uint64_t)v117, (google::protobuf::internal *)v121, this);
                  if (v112)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v127 = *((_DWORD *)this + 7) + v126;
                      *((_DWORD *)this + 7) = v127;
                      v128 = *((_QWORD *)this + 1) + (v127 & (v127 >> 31));
                      *(_QWORD *)this = v128;
                      v336[0] = v112;
                      if (v128 <= (unint64_t)v112 || *v112 != 82)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0xBu:
              if (v9 != 90)
                goto LABEL_400;
              v129 = TagFallback - 1;
              while (2)
              {
                v130 = v129 + 1;
                v336[0] = v130;
                v131 = *(int **)(a1 + 232);
                if (!v131)
                {
                  v133 = *(_DWORD *)(a1 + 228);
LABEL_160:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 216), v133 + 1);
                  v131 = *(int **)(a1 + 232);
                  v133 = *v131;
                  goto LABEL_161;
                }
                v132 = *(int *)(a1 + 224);
                v133 = *v131;
                if ((int)v132 < *v131)
                {
                  *(_DWORD *)(a1 + 224) = v132 + 1;
                  v134 = *(protobuf::Intelligence_Character **)&v131[2 * v132 + 2];
                  goto LABEL_162;
                }
                if (v133 == *(_DWORD *)(a1 + 228))
                  goto LABEL_160;
LABEL_161:
                *v131 = v133 + 1;
                v134 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(*(google::protobuf::internal::ArenaImpl **)(a1 + 216));
                v135 = *(_QWORD *)(a1 + 232);
                v136 = *(int *)(a1 + 224);
                *(_DWORD *)(a1 + 224) = v136 + 1;
                *(_QWORD *)(v135 + 8 * v136 + 8) = v134;
                v130 = v336[0];
LABEL_162:
                v137 = *v130;
                if (*v130 < 0)
                {
                  v139 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v130, (const char *)*v130);
                  if (!v139)
                    goto LABEL_416;
                  v138 = v139;
                  v137 = v140;
                }
                else
                {
                  v138 = v130 + 1;
                }
                v141 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v138, v137);
                v142 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v142--, 1);
                *((_DWORD *)this + 22) = v142;
                if (v142 < 0 == v24)
                {
                  v143 = v141;
                  v129 = (char *)protobuf::Intelligence_Character::_InternalParse((uint64_t)v134, (google::protobuf::internal *)v138, this);
                  if (v129)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v144 = *((_DWORD *)this + 7) + v143;
                      *((_DWORD *)this + 7) = v144;
                      v145 = *((_QWORD *)this + 1) + (v144 & (v144 >> 31));
                      *(_QWORD *)this = v145;
                      v336[0] = v129;
                      if (v145 <= (unint64_t)v129 || *v129 != 90)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0xDu:
              if (v9 != 106)
                goto LABEL_400;
              v146 = TagFallback - 1;
              while (2)
              {
                v147 = v146 + 1;
                v336[0] = v147;
                v148 = *(int **)(a1 + 256);
                if (!v148)
                {
                  v150 = *(_DWORD *)(a1 + 252);
LABEL_179:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 240), v150 + 1);
                  v148 = *(int **)(a1 + 256);
                  v150 = *v148;
                  goto LABEL_180;
                }
                v149 = *(int *)(a1 + 248);
                v150 = *v148;
                if ((int)v149 < *v148)
                {
                  *(_DWORD *)(a1 + 248) = v149 + 1;
                  v151 = *(protobuf::Intelligence_Intent **)&v148[2 * v149 + 2];
                  goto LABEL_181;
                }
                if (v150 == *(_DWORD *)(a1 + 252))
                  goto LABEL_179;
LABEL_180:
                *v148 = v150 + 1;
                v151 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(*(google::protobuf::internal::ArenaImpl **)(a1 + 240));
                v152 = *(_QWORD *)(a1 + 256);
                v153 = *(int *)(a1 + 248);
                *(_DWORD *)(a1 + 248) = v153 + 1;
                *(_QWORD *)(v152 + 8 * v153 + 8) = v151;
                v147 = v336[0];
LABEL_181:
                v154 = *v147;
                if (*v147 < 0)
                {
                  v156 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v147, (const char *)*v147);
                  if (!v156)
                    goto LABEL_416;
                  v155 = v156;
                  v154 = v157;
                }
                else
                {
                  v155 = v147 + 1;
                }
                v158 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v155, v154);
                v159 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v159--, 1);
                *((_DWORD *)this + 22) = v159;
                if (v159 < 0 == v24)
                {
                  v160 = v158;
                  v146 = protobuf::Intelligence_Intent::_InternalParse((uint64_t)v151, (google::protobuf::internal *)v155, this);
                  if (v146)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v161 = *((_DWORD *)this + 7) + v160;
                      *((_DWORD *)this + 7) = v161;
                      v162 = *((_QWORD *)this + 1) + (v161 & (v161 >> 31));
                      *(_QWORD *)this = v162;
                      v336[0] = v146;
                      if (v162 <= (unint64_t)v146 || *v146 != 106)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x10u:
              if (v9 != 130)
                goto LABEL_400;
              v163 = TagFallback - 2;
              while (2)
              {
                v164 = v163 + 2;
                v336[0] = v164;
                v165 = *(int **)(a1 + 280);
                if (!v165)
                {
                  v167 = *(_DWORD *)(a1 + 276);
LABEL_198:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 264), v167 + 1);
                  v165 = *(int **)(a1 + 280);
                  v167 = *v165;
                  goto LABEL_199;
                }
                v166 = *(int *)(a1 + 272);
                v167 = *v165;
                if ((int)v166 < *v165)
                {
                  *(_DWORD *)(a1 + 272) = v166 + 1;
                  v168 = *(protobuf::Intelligence_Condition **)&v165[2 * v166 + 2];
                  goto LABEL_200;
                }
                if (v167 == *(_DWORD *)(a1 + 276))
                  goto LABEL_198;
LABEL_199:
                *v165 = v167 + 1;
                v168 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(*(google::protobuf::internal::ArenaImpl **)(a1 + 264));
                v169 = *(_QWORD *)(a1 + 280);
                v170 = *(int *)(a1 + 272);
                *(_DWORD *)(a1 + 272) = v170 + 1;
                *(_QWORD *)(v169 + 8 * v170 + 8) = v168;
                v164 = v336[0];
LABEL_200:
                v171 = *v164;
                if (*v164 < 0)
                {
                  v173 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v164, (const char *)*v164);
                  if (!v173)
                    goto LABEL_416;
                  v172 = v173;
                  v171 = v174;
                }
                else
                {
                  v172 = v164 + 1;
                }
                v175 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v172, v171);
                v176 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v176--, 1);
                *((_DWORD *)this + 22) = v176;
                if (v176 < 0 == v24)
                {
                  v177 = v175;
                  v163 = (char *)protobuf::Intelligence_Condition::_InternalParse((uint64_t)v168, (google::protobuf::internal *)v172, this);
                  if (v163)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v178 = *((_DWORD *)this + 7) + v177;
                      *((_DWORD *)this + 7) = v178;
                      v179 = *((_QWORD *)this + 1) + (v178 & (v178 >> 31));
                      *(_QWORD *)this = v179;
                      v336[0] = v163;
                      if (v179 <= (unint64_t)v163 || *(_WORD *)v163 != 386)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x11u:
              if (v9 != 138)
                goto LABEL_400;
              v180 = TagFallback - 2;
              while (2)
              {
                v181 = v180 + 2;
                v336[0] = v181;
                v182 = *(int **)(a1 + 304);
                if (!v182)
                {
                  v184 = *(_DWORD *)(a1 + 300);
LABEL_217:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 288), v184 + 1);
                  v182 = *(int **)(a1 + 304);
                  v184 = *v182;
                  goto LABEL_218;
                }
                v183 = *(int *)(a1 + 296);
                v184 = *v182;
                if ((int)v183 < *v182)
                {
                  *(_DWORD *)(a1 + 296) = v183 + 1;
                  v185 = *(protobuf::Intelligence_Counter **)&v182[2 * v183 + 2];
                  goto LABEL_219;
                }
                if (v184 == *(_DWORD *)(a1 + 300))
                  goto LABEL_217;
LABEL_218:
                *v182 = v184 + 1;
                v185 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 288));
                v186 = *(_QWORD *)(a1 + 304);
                v187 = *(int *)(a1 + 296);
                *(_DWORD *)(a1 + 296) = v187 + 1;
                *(_QWORD *)(v186 + 8 * v187 + 8) = v185;
                v181 = v336[0];
LABEL_219:
                v188 = *v181;
                if (*v181 < 0)
                {
                  v190 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v181, (const char *)*v181);
                  if (!v190)
                    goto LABEL_416;
                  v189 = v190;
                  v188 = v191;
                }
                else
                {
                  v189 = v181 + 1;
                }
                v192 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v189, v188);
                v193 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v193--, 1);
                *((_DWORD *)this + 22) = v193;
                if (v193 < 0 == v24)
                {
                  v194 = v192;
                  v180 = protobuf::Intelligence_Counter::_InternalParse((uint64_t)v185, (google::protobuf::internal *)v189, this);
                  if (v180)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v195 = *((_DWORD *)this + 7) + v194;
                      *((_DWORD *)this + 7) = v195;
                      v196 = *((_QWORD *)this + 1) + (v195 & (v195 >> 31));
                      *(_QWORD *)this = v196;
                      v336[0] = v180;
                      if (v196 <= (unint64_t)v180 || *(_WORD *)v180 != 394)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x12u:
              if (v9 != 146)
                goto LABEL_400;
              v197 = TagFallback - 2;
              while (2)
              {
                v198 = v197 + 2;
                v336[0] = v198;
                v199 = *(int **)(a1 + 328);
                if (!v199)
                {
                  v201 = *(_DWORD *)(a1 + 324);
LABEL_236:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 312), v201 + 1);
                  v199 = *(int **)(a1 + 328);
                  v201 = *v199;
                  goto LABEL_237;
                }
                v200 = *(int *)(a1 + 320);
                v201 = *v199;
                if ((int)v200 < *v199)
                {
                  *(_DWORD *)(a1 + 320) = v200 + 1;
                  v202 = *(protobuf::Intelligence_Flag **)&v199[2 * v200 + 2];
                  goto LABEL_238;
                }
                if (v201 == *(_DWORD *)(a1 + 324))
                  goto LABEL_236;
LABEL_237:
                *v199 = v201 + 1;
                v202 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(*(google::protobuf::internal::ArenaImpl **)(a1 + 312));
                v203 = *(_QWORD *)(a1 + 328);
                v204 = *(int *)(a1 + 320);
                *(_DWORD *)(a1 + 320) = v204 + 1;
                *(_QWORD *)(v203 + 8 * v204 + 8) = v202;
                v198 = v336[0];
LABEL_238:
                v205 = *v198;
                if (*v198 < 0)
                {
                  v207 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v198, (const char *)*v198);
                  if (!v207)
                    goto LABEL_416;
                  v206 = v207;
                  v205 = v208;
                }
                else
                {
                  v206 = v198 + 1;
                }
                v209 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v206, v205);
                v210 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v210--, 1);
                *((_DWORD *)this + 22) = v210;
                if (v210 < 0 == v24)
                {
                  v211 = v209;
                  v197 = (char *)protobuf::Intelligence_Flag::_InternalParse((uint64_t)v202, (google::protobuf::internal *)v206, this);
                  if (v197)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v212 = *((_DWORD *)this + 7) + v211;
                      *((_DWORD *)this + 7) = v212;
                      v213 = *((_QWORD *)this + 1) + (v212 & (v212 >> 31));
                      *(_QWORD *)this = v213;
                      v336[0] = v197;
                      if (v213 <= (unint64_t)v197 || *(_WORD *)v197 != 402)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x13u:
              if (v9 != 154)
                goto LABEL_400;
              v214 = TagFallback - 2;
              while (2)
              {
                v215 = v214 + 2;
                v336[0] = v215;
                v216 = *(int **)(a1 + 352);
                if (!v216)
                {
                  v218 = *(_DWORD *)(a1 + 348);
LABEL_255:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 336), v218 + 1);
                  v216 = *(int **)(a1 + 352);
                  v218 = *v216;
                  goto LABEL_256;
                }
                v217 = *(int *)(a1 + 344);
                v218 = *v216;
                if ((int)v217 < *v216)
                {
                  *(_DWORD *)(a1 + 344) = v217 + 1;
                  v219 = *(protobuf::Intelligence_Label **)&v216[2 * v217 + 2];
                  goto LABEL_257;
                }
                if (v218 == *(_DWORD *)(a1 + 348))
                  goto LABEL_255;
LABEL_256:
                *v216 = v218 + 1;
                v219 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(*(google::protobuf::internal::ArenaImpl **)(a1 + 336));
                v220 = *(_QWORD *)(a1 + 352);
                v221 = *(int *)(a1 + 344);
                *(_DWORD *)(a1 + 344) = v221 + 1;
                *(_QWORD *)(v220 + 8 * v221 + 8) = v219;
                v215 = v336[0];
LABEL_257:
                v222 = *v215;
                if (*v215 < 0)
                {
                  v224 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v215, (const char *)*v215);
                  if (!v224)
                    goto LABEL_416;
                  v223 = v224;
                  v222 = v225;
                }
                else
                {
                  v223 = v215 + 1;
                }
                v226 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v223, v222);
                v227 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v227--, 1);
                *((_DWORD *)this + 22) = v227;
                if (v227 < 0 == v24)
                {
                  v228 = v226;
                  v214 = (char *)protobuf::Intelligence_Label::_InternalParse((uint64_t)v219, (google::protobuf::internal *)v223, this);
                  if (v214)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v229 = *((_DWORD *)this + 7) + v228;
                      *((_DWORD *)this + 7) = v229;
                      v230 = *((_QWORD *)this + 1) + (v229 & (v229 >> 31));
                      *(_QWORD *)this = v230;
                      v336[0] = v214;
                      if (v230 <= (unint64_t)v214 || *(_WORD *)v214 != 410)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x14u:
              if (v9 != 162)
                goto LABEL_400;
              v231 = TagFallback - 2;
              while (2)
              {
                v232 = v231 + 2;
                v336[0] = v232;
                v233 = *(int **)(a1 + 376);
                if (!v233)
                {
                  v235 = *(_DWORD *)(a1 + 372);
LABEL_274:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 360), v235 + 1);
                  v233 = *(int **)(a1 + 376);
                  v235 = *v233;
                  goto LABEL_275;
                }
                v234 = *(int *)(a1 + 368);
                v235 = *v233;
                if ((int)v234 < *v233)
                {
                  *(_DWORD *)(a1 + 368) = v234 + 1;
                  v236 = *(protobuf::Intelligence_List **)&v233[2 * v234 + 2];
                  goto LABEL_276;
                }
                if (v235 == *(_DWORD *)(a1 + 372))
                  goto LABEL_274;
LABEL_275:
                *v233 = v235 + 1;
                v236 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(*(google::protobuf::internal::ArenaImpl **)(a1 + 360));
                v237 = *(_QWORD *)(a1 + 376);
                v238 = *(int *)(a1 + 368);
                *(_DWORD *)(a1 + 368) = v238 + 1;
                *(_QWORD *)(v237 + 8 * v238 + 8) = v236;
                v232 = v336[0];
LABEL_276:
                v239 = *v232;
                if (*v232 < 0)
                {
                  v241 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v232, (const char *)*v232);
                  if (!v241)
                    goto LABEL_416;
                  v240 = v241;
                  v239 = v242;
                }
                else
                {
                  v240 = v232 + 1;
                }
                v243 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v240, v239);
                v244 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v244--, 1);
                *((_DWORD *)this + 22) = v244;
                if (v244 < 0 == v24)
                {
                  v245 = v243;
                  v231 = protobuf::Intelligence_List::_InternalParse((uint64_t)v236, (google::protobuf::internal *)v240, this);
                  if (v231)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v246 = *((_DWORD *)this + 7) + v245;
                      *((_DWORD *)this + 7) = v246;
                      v247 = *((_QWORD *)this + 1) + (v246 & (v246 >> 31));
                      *(_QWORD *)this = v247;
                      v336[0] = v231;
                      if (v247 <= (unint64_t)v231 || *(_WORD *)v231 != 418)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x16u:
              if (v9 != 176)
                goto LABEL_400;
              v5 |= 8u;
              v248 = TagFallback + 1;
              v249 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_290;
              v250 = *v248;
              v249 = v249 + (v250 << 7) - 128;
              if (v250 < 0)
              {
                v332 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v249);
                v336[0] = v332;
                *(_BYTE *)(a1 + 552) = v333 != 0;
                if (!v332)
                  goto LABEL_416;
              }
              else
              {
                v248 = TagFallback + 2;
LABEL_290:
                v336[0] = v248;
                *(_BYTE *)(a1 + 552) = v249 != 0;
              }
              goto LABEL_413;
            case 0x1Au:
              if (v9 != 210)
                goto LABEL_400;
              *(_DWORD *)(a1 + 16) |= 1u;
              v251 = *(std::string **)(a1 + 528);
              if (v251 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v335, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v251 = *v335;
                TagFallback = v336[0];
              }
              v252 = google::protobuf::internal::InlineGreedyStringParser(v251, TagFallback, (uint64_t)this);
              goto LABEL_405;
            case 0x1Bu:
              if (v9 != 218)
                goto LABEL_400;
              v253 = TagFallback - 2;
              while (2)
              {
                v254 = v253 + 2;
                v336[0] = v254;
                v255 = *(int **)(a1 + 400);
                if (!v255)
                {
                  v257 = *(_DWORD *)(a1 + 396);
LABEL_302:
                  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 384), v257 + 1);
                  v255 = *(int **)(a1 + 400);
                  v257 = *v255;
                  goto LABEL_303;
                }
                v256 = *(int *)(a1 + 392);
                v257 = *v255;
                if ((int)v256 < *v255)
                {
                  *(_DWORD *)(a1 + 392) = v256 + 1;
                  v258 = *(protobuf::Intelligence_Variable **)&v255[2 * v256 + 2];
                  goto LABEL_304;
                }
                if (v257 == *(_DWORD *)(a1 + 396))
                  goto LABEL_302;
LABEL_303:
                *v255 = v257 + 1;
                v258 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(*(google::protobuf::internal::ArenaImpl **)(a1 + 384));
                v259 = *(_QWORD *)(a1 + 400);
                v260 = *(int *)(a1 + 392);
                *(_DWORD *)(a1 + 392) = v260 + 1;
                *(_QWORD *)(v259 + 8 * v260 + 8) = v258;
                v254 = v336[0];
LABEL_304:
                v261 = *v254;
                if (*v254 < 0)
                {
                  v263 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v254, (const char *)*v254);
                  if (!v263)
                    goto LABEL_416;
                  v262 = v263;
                  v261 = v264;
                }
                else
                {
                  v262 = v254 + 1;
                }
                v265 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v262, v261);
                v266 = *((_DWORD *)this + 22);
                v24 = __OFSUB__(v266--, 1);
                *((_DWORD *)this + 22) = v266;
                if (v266 < 0 == v24)
                {
                  v267 = v265;
                  v253 = protobuf::Intelligence_Variable::_InternalParse((uint64_t)v258, (google::protobuf::internal *)v262, this);
                  if (v253)
                  {
                    ++*((_DWORD *)this + 22);
                    if (!*((_DWORD *)this + 20))
                    {
                      v268 = *((_DWORD *)this + 7) + v267;
                      *((_DWORD *)this + 7) = v268;
                      v269 = *((_QWORD *)this + 1) + (v268 & (v268 >> 31));
                      *(_QWORD *)this = v269;
                      v336[0] = v253;
                      if (v269 <= (unint64_t)v253 || *(_WORD *)v253 != 474)
                        goto LABEL_413;
                      continue;
                    }
                  }
                }
                goto LABEL_416;
              }
            case 0x1Cu:
              if (v9 != 226)
                goto LABEL_400;
              v270 = TagFallback - 2;
              while (1)
              {
                v271 = (google::protobuf::internal *)(v270 + 2);
                v336[0] = v270 + 2;
                v272 = *(int **)(a1 + 424);
                if (!v272)
                  break;
                v273 = *(int *)(a1 + 416);
                v274 = *v272;
                if ((int)v273 >= *v272)
                {
                  if (v274 == *(_DWORD *)(a1 + 420))
                  {
LABEL_321:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 408), v274 + 1);
                    v272 = *(int **)(a1 + 424);
                    v274 = *v272;
                  }
                  *v272 = v274 + 1;
                  v275 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(*(google::protobuf::internal::ArenaImpl **)(a1 + 408));
                  v276 = *(_QWORD *)(a1 + 424);
                  v277 = *(int *)(a1 + 416);
                  *(_DWORD *)(a1 + 416) = v277 + 1;
                  *(_QWORD *)(v276 + 8 * v277 + 8) = v275;
                  v271 = (google::protobuf::internal *)v336[0];
                  goto LABEL_323;
                }
                *(_DWORD *)(a1 + 416) = v273 + 1;
                v275 = *(protobuf::Intelligence_ResponseGroup **)&v272[2 * v273 + 2];
LABEL_323:
                v270 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_ResponseGroup>(this, (uint64_t)v275, v271);
                v336[0] = v270;
                if (!v270)
                  goto LABEL_416;
                if (*(_QWORD *)this <= (unint64_t)v270 || *(_WORD *)v270 != 482)
                  goto LABEL_413;
              }
              v274 = *(_DWORD *)(a1 + 420);
              goto LABEL_321;
            case 0x1Du:
              if (v9 != 234)
                goto LABEL_400;
              v278 = TagFallback - 2;
              while (1)
              {
                v279 = (google::protobuf::internal *)(v278 + 2);
                v336[0] = v278 + 2;
                v280 = *(int **)(a1 + 448);
                if (!v280)
                  break;
                v281 = *(int *)(a1 + 440);
                v282 = *v280;
                if ((int)v281 >= *v280)
                {
                  if (v282 == *(_DWORD *)(a1 + 444))
                  {
LABEL_334:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 432), v282 + 1);
                    v280 = *(int **)(a1 + 448);
                    v282 = *v280;
                  }
                  *v280 = v282 + 1;
                  v283 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(*(google::protobuf::internal::ArenaImpl **)(a1 + 432));
                  v284 = *(_QWORD *)(a1 + 448);
                  v285 = *(int *)(a1 + 440);
                  *(_DWORD *)(a1 + 440) = v285 + 1;
                  *(_QWORD *)(v284 + 8 * v285 + 8) = v283;
                  v279 = (google::protobuf::internal *)v336[0];
                  goto LABEL_336;
                }
                *(_DWORD *)(a1 + 440) = v281 + 1;
                v283 = *(protobuf::Intelligence_InputGroup **)&v280[2 * v281 + 2];
LABEL_336:
                v278 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup>(this, (uint64_t)v283, v279);
                v336[0] = v278;
                if (!v278)
                  goto LABEL_416;
                if (*(_QWORD *)this <= (unint64_t)v278 || *(_WORD *)v278 != 490)
                  goto LABEL_413;
              }
              v282 = *(_DWORD *)(a1 + 444);
              goto LABEL_334;
            case 0x1Eu:
              if (v9 != 242)
                goto LABEL_400;
              v286 = TagFallback - 2;
              while (1)
              {
                v287 = v286 + 2;
                v336[0] = v286 + 2;
                v288 = *(int **)(a1 + 472);
                if (!v288)
                  break;
                v289 = *(int *)(a1 + 464);
                v290 = *v288;
                if ((int)v289 >= *v288)
                {
                  if (v290 == *(_DWORD *)(a1 + 468))
                  {
LABEL_347:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 456), v290 + 1);
                    v288 = *(int **)(a1 + 472);
                    v290 = *v288;
                  }
                  *v288 = v290 + 1;
                  v292 = (google::protobuf::internal::ArenaImpl *)*v8;
                  if (*v8)
                  {
                    if (*((_QWORD *)v292 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v292, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v293 = *(_QWORD *)(a1 + 472);
                  v294 = *(int *)(a1 + 464);
                  *(_DWORD *)(a1 + 464) = v294 + 1;
                  *(_QWORD *)(v293 + 8 * v294 + 8) = AlignedAndAddCleanup;
                  v287 = v336[0];
                  goto LABEL_354;
                }
                *(_DWORD *)(a1 + 464) = v289 + 1;
                AlignedAndAddCleanup = *(std::string **)&v288[2 * v289 + 2];
LABEL_354:
                v286 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v287, (uint64_t)this);
                v336[0] = v286;
                if (!v286)
                  goto LABEL_416;
                if (*(_QWORD *)this <= (unint64_t)v286 || *(_WORD *)v286 != 498)
                  goto LABEL_413;
              }
              v290 = *(_DWORD *)(a1 + 468);
              goto LABEL_347;
            case 0x1Fu:
              if (v9 != 250)
                goto LABEL_400;
              v295 = TagFallback - 2;
              break;
            case 0x20u:
              if (v9 != 2)
                goto LABEL_400;
              *(_DWORD *)(a1 + 16) |= 2u;
              v304 = *(protobuf::Intelligence_Start **)(a1 + 536);
              if (!v304)
              {
                v304 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0);
                *(_QWORD *)(a1 + 536) = v304;
                TagFallback = v336[0];
              }
              v305 = *TagFallback;
              if (*TagFallback < 0)
              {
                v325 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)TagFallback, (const char *)*TagFallback);
                if (!v325)
                  goto LABEL_416;
                v306 = v325;
                v305 = v326;
              }
              else
              {
                v306 = TagFallback + 1;
              }
              v327 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v306, v305);
              v328 = *((_DWORD *)this + 22);
              v24 = __OFSUB__(v328--, 1);
              *((_DWORD *)this + 22) = v328;
              if (v328 < 0 != v24)
                goto LABEL_416;
              v329 = v327;
              v330 = protobuf::Intelligence_Start::_InternalParse((uint64_t)v304, (google::protobuf::internal *)v306, this);
              if (!v330)
                goto LABEL_416;
              ++*((_DWORD *)this + 22);
              if (*((_DWORD *)this + 20))
                goto LABEL_416;
              v331 = *((_DWORD *)this + 7) + v329;
              *((_DWORD *)this + 7) = v331;
              *(_QWORD *)this = *((_QWORD *)this + 1) + (v331 & (v331 >> 31));
              v336[0] = v330;
              goto LABEL_413;
            case 0x21u:
              if (v9 != 10)
                goto LABEL_400;
              v307 = TagFallback - 2;
              while (2)
              {
                v308 = v307 + 2;
                v336[0] = v308;
                v309 = *(int **)(a1 + 520);
                if (v309)
                {
                  v310 = *(int *)(a1 + 512);
                  v311 = *v309;
                  if ((int)v310 < *v309)
                  {
                    *(_DWORD *)(a1 + 512) = v310 + 1;
                    v312 = *(protobuf::Intelligence_Event **)&v309[2 * v310 + 2];
                    goto LABEL_390;
                  }
                  if (v311 != *(_DWORD *)(a1 + 516))
                  {
LABEL_389:
                    *v309 = v311 + 1;
                    v312 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(*(google::protobuf::internal::ArenaImpl **)(a1 + 504));
                    v313 = *(_QWORD *)(a1 + 520);
                    v314 = *(int *)(a1 + 512);
                    *(_DWORD *)(a1 + 512) = v314 + 1;
                    *(_QWORD *)(v313 + 8 * v314 + 8) = v312;
                    v308 = v336[0];
LABEL_390:
                    v315 = *v308;
                    if (*v308 < 0)
                    {
                      v317 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v308, (const char *)*v308);
                      if (!v317)
                        goto LABEL_416;
                      v316 = v317;
                      v315 = v318;
                    }
                    else
                    {
                      v316 = v308 + 1;
                    }
                    v319 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v316, v315);
                    v320 = *((_DWORD *)this + 22);
                    v24 = __OFSUB__(v320--, 1);
                    *((_DWORD *)this + 22) = v320;
                    if (v320 < 0 == v24)
                    {
                      v321 = v319;
                      v307 = (char *)protobuf::Intelligence_Event::_InternalParse((uint64_t)v312, (google::protobuf::internal *)v316, this);
                      if (v307)
                      {
                        ++*((_DWORD *)this + 22);
                        if (!*((_DWORD *)this + 20))
                        {
                          v322 = *((_DWORD *)this + 7) + v321;
                          *((_DWORD *)this + 7) = v322;
                          v323 = *((_QWORD *)this + 1) + (v322 & (v322 >> 31));
                          *(_QWORD *)this = v323;
                          v336[0] = v307;
                          if (v323 <= (unint64_t)v307 || *(_WORD *)v307 != 650)
                            goto LABEL_413;
                          continue;
                        }
                      }
                    }
LABEL_416:
                    TagFallback = 0;
                    goto LABEL_417;
                  }
                }
                else
                {
                  v311 = *(_DWORD *)(a1 + 516);
                }
                break;
              }
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 504), v311 + 1);
              v309 = *(int **)(a1 + 520);
              v311 = *v309;
              goto LABEL_389;
            default:
LABEL_400:
              if ((_DWORD)v9)
                v324 = (v9 & 7) == 4;
              else
                v324 = 1;
              if (v324)
              {
                *((_DWORD *)this + 20) = (_DWORD)v9 - 1;
                goto LABEL_417;
              }
              v252 = (char *)google::protobuf::internal::UnknownFieldParse(v9, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_405:
              v336[0] = v252;
              if (!v252)
                goto LABEL_416;
LABEL_413:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)v336, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v296 = v295 + 2;
            v336[0] = v295 + 2;
            v297 = *(int **)(a1 + 496);
            if (!v297)
              break;
            v298 = *(int *)(a1 + 488);
            v299 = *v297;
            if ((int)v298 >= *v297)
            {
              if (v299 == *(_DWORD *)(a1 + 492))
              {
LABEL_365:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 480), v299 + 1);
                v297 = *(int **)(a1 + 496);
                v299 = *v297;
              }
              *v297 = v299 + 1;
              v301 = (google::protobuf::internal::ArenaImpl *)*v7;
              if (*v7)
              {
                if (*((_QWORD *)v301 + 14))
                v300 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v301, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                v300 = (std::string *)operator new();
              }
              v300->__r_.__value_.__r.__words[0] = 0;
              v300->__r_.__value_.__l.__size_ = 0;
              v300->__r_.__value_.__r.__words[2] = 0;
              v302 = *(_QWORD *)(a1 + 496);
              v303 = *(int *)(a1 + 488);
              *(_DWORD *)(a1 + 488) = v303 + 1;
              *(_QWORD *)(v302 + 8 * v303 + 8) = v300;
              v296 = v336[0];
              goto LABEL_372;
            }
            *(_DWORD *)(a1 + 488) = v298 + 1;
            v300 = *(std::string **)&v297[2 * v298 + 2];
LABEL_372:
            v295 = google::protobuf::internal::InlineGreedyStringParser(v300, v296, (uint64_t)this);
            v336[0] = v295;
            if (!v295)
              goto LABEL_416;
            if (*(_QWORD *)this <= (unint64_t)v295 || *(_WORD *)v295 != 506)
              goto LABEL_413;
          }
          v299 = *(_DWORD *)(a1 + 492);
          goto LABEL_365;
        }
        TagFallback = v336[0] + 2;
      }
      break;
    }
    v336[0] = TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = v336[0];
LABEL_417:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_ResponseGroup>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)protobuf::Intelligence_ResponseGroup::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::Intelligence_InputGroup>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)protobuf::Intelligence_InputGroup::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::Intelligence::InternalSerializeWithCachedSizesToArray(protobuf::Intelligence *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  int v8;
  int i;
  protobuf::Intelligence_Meta *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int j;
  protobuf::Intelligence_DialogResponse *v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int k;
  protobuf::Intelligence_BehaviorResponse *v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int m;
  protobuf::Intelligence_ReferenceResponse *v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int n;
  protobuf::Intelligence_ResponseGroup *v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int ii;
  protobuf::Intelligence_InputGroup *v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int jj;
  protobuf::Intelligence_Activity *v58;
  unsigned int v59;
  char *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int kk;
  protobuf::Intelligence_Utterance *v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int mm;
  protobuf::Intelligence_Character *v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int nn;
  protobuf::Intelligence_Intent *v82;
  unsigned int v83;
  char *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int i1;
  protobuf::Intelligence_Condition *v90;
  unsigned int v91;
  char *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  int i2;
  protobuf::Intelligence_Counter *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int i3;
  protobuf::Intelligence_Flag *v106;
  unsigned int v107;
  char *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int i4;
  protobuf::Intelligence_Label *v114;
  unsigned int v115;
  char *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int i5;
  protobuf::Intelligence_List *v122;
  unsigned int v123;
  char *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  int v129;
  int i6;
  protobuf::Intelligence_Variable *v131;
  unsigned int v132;
  char *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  int i7;
  protobuf::Intelligence_ResponseGroup *v139;
  unsigned int v140;
  char *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int i8;
  protobuf::Intelligence_InputGroup *v147;
  unsigned int v148;
  char *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int i9;
  uint64_t v155;
  int64_t v156;
  const void *v157;
  int v158;
  int i10;
  uint64_t v160;
  int64_t v161;
  const void *v162;
  protobuf::Intelligence_Start *v163;
  unsigned int v164;
  char *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int i11;
  protobuf::Intelligence_Event *v171;
  unsigned int v172;
  char *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 4) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = *((_QWORD *)this + 68);
    *v4 = 9;
    *(_QWORD *)(v4 + 1) = v7;
    v4 += 9;
  }
  v8 = *((_DWORD *)this + 8);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v10 = (protobuf::Intelligence_Meta *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 18;
      v11 = *((_DWORD *)v10 + 5);
      if (v11 > 0x7F)
      {
        v4[1] = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v12 = v4 + 3;
          do
          {
            *(v12 - 1) = v13 | 0x80;
            v14 = v13 >> 7;
            ++v12;
            v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
          *(v12 - 1) = v14;
        }
        else
        {
          v4[2] = v13;
          v12 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v11;
        v12 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_Meta::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
    }
  }
  v16 = *((_DWORD *)this + 14);
  if (v16)
  {
    for (j = 0; j != v16; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v18 = (protobuf::Intelligence_DialogResponse *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 34;
      v19 = *((_DWORD *)v18 + 5);
      if (v19 > 0x7F)
      {
        v4[1] = v19 | 0x80;
        v21 = v19 >> 7;
        if (v19 >> 14)
        {
          v20 = v4 + 3;
          do
          {
            *(v20 - 1) = v21 | 0x80;
            v22 = v21 >> 7;
            ++v20;
            v23 = v21 >> 14;
            v21 >>= 7;
          }
          while (v23);
          *(v20 - 1) = v22;
        }
        else
        {
          v4[2] = v21;
          v20 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v19;
        v20 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_DialogResponse::InternalSerializeWithCachedSizesToArray(v18, v20, a3);
    }
  }
  v24 = *((_DWORD *)this + 20);
  if (v24)
  {
    for (k = 0; k != v24; ++k)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v26 = (protobuf::Intelligence_BehaviorResponse *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, k);
      *v4 = 42;
      v27 = *((_DWORD *)v26 + 5);
      if (v27 > 0x7F)
      {
        v4[1] = v27 | 0x80;
        v29 = v27 >> 7;
        if (v27 >> 14)
        {
          v28 = v4 + 3;
          do
          {
            *(v28 - 1) = v29 | 0x80;
            v30 = v29 >> 7;
            ++v28;
            v31 = v29 >> 14;
            v29 >>= 7;
          }
          while (v31);
          *(v28 - 1) = v30;
        }
        else
        {
          v4[2] = v29;
          v28 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v27;
        v28 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_BehaviorResponse::InternalSerializeWithCachedSizesToArray(v26, v28, a3);
    }
  }
  v32 = *((_DWORD *)this + 26);
  if (v32)
  {
    for (m = 0; m != v32; ++m)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v34 = (protobuf::Intelligence_ReferenceResponse *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((uint64_t)this + 96, m);
      *v4 = 50;
      v35 = *((_DWORD *)v34 + 5);
      if (v35 > 0x7F)
      {
        v4[1] = v35 | 0x80;
        v37 = v35 >> 7;
        if (v35 >> 14)
        {
          v36 = v4 + 3;
          do
          {
            *(v36 - 1) = v37 | 0x80;
            v38 = v37 >> 7;
            ++v36;
            v39 = v37 >> 14;
            v37 >>= 7;
          }
          while (v39);
          *(v36 - 1) = v38;
        }
        else
        {
          v4[2] = v37;
          v36 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v35;
        v36 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_ReferenceResponse::InternalSerializeWithCachedSizesToArray(v34, v36, a3);
    }
  }
  v40 = *((_DWORD *)this + 32);
  if (v40)
  {
    for (n = 0; n != v40; ++n)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v42 = (protobuf::Intelligence_ResponseGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 120, n);
      *v4 = 58;
      v43 = *((_DWORD *)v42 + 5);
      if (v43 > 0x7F)
      {
        v4[1] = v43 | 0x80;
        v45 = v43 >> 7;
        if (v43 >> 14)
        {
          v44 = v4 + 3;
          do
          {
            *(v44 - 1) = v45 | 0x80;
            v46 = v45 >> 7;
            ++v44;
            v47 = v45 >> 14;
            v45 >>= 7;
          }
          while (v47);
          *(v44 - 1) = v46;
        }
        else
        {
          v4[2] = v45;
          v44 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v43;
        v44 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_ResponseGroup::InternalSerializeWithCachedSizesToArray(v42, v44, a3);
    }
  }
  v48 = *((_DWORD *)this + 38);
  if (v48)
  {
    for (ii = 0; ii != v48; ++ii)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v50 = (protobuf::Intelligence_InputGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 144, ii);
      *v4 = 66;
      v51 = *((_DWORD *)v50 + 5);
      if (v51 > 0x7F)
      {
        v4[1] = v51 | 0x80;
        v53 = v51 >> 7;
        if (v51 >> 14)
        {
          v52 = v4 + 3;
          do
          {
            *(v52 - 1) = v53 | 0x80;
            v54 = v53 >> 7;
            ++v52;
            v55 = v53 >> 14;
            v53 >>= 7;
          }
          while (v55);
          *(v52 - 1) = v54;
        }
        else
        {
          v4[2] = v53;
          v52 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v51;
        v52 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup::InternalSerializeWithCachedSizesToArray(v50, v52, a3);
    }
  }
  v56 = *((_DWORD *)this + 44);
  if (v56)
  {
    for (jj = 0; jj != v56; ++jj)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v58 = (protobuf::Intelligence_Activity *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, jj);
      *v4 = 74;
      v59 = *((_DWORD *)v58 + 5);
      if (v59 > 0x7F)
      {
        v4[1] = v59 | 0x80;
        v61 = v59 >> 7;
        if (v59 >> 14)
        {
          v60 = v4 + 3;
          do
          {
            *(v60 - 1) = v61 | 0x80;
            v62 = v61 >> 7;
            ++v60;
            v63 = v61 >> 14;
            v61 >>= 7;
          }
          while (v63);
          *(v60 - 1) = v62;
        }
        else
        {
          v4[2] = v61;
          v60 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v59;
        v60 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_Activity::InternalSerializeWithCachedSizesToArray(v58, v60, a3);
    }
  }
  v64 = *((_DWORD *)this + 50);
  if (v64)
  {
    for (kk = 0; kk != v64; ++kk)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v66 = (protobuf::Intelligence_Utterance *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>((uint64_t)this + 192, kk);
      *v4 = 82;
      v67 = *((_DWORD *)v66 + 5);
      if (v67 > 0x7F)
      {
        v4[1] = v67 | 0x80;
        v69 = v67 >> 7;
        if (v67 >> 14)
        {
          v68 = v4 + 3;
          do
          {
            *(v68 - 1) = v69 | 0x80;
            v70 = v69 >> 7;
            ++v68;
            v71 = v69 >> 14;
            v69 >>= 7;
          }
          while (v71);
          *(v68 - 1) = v70;
        }
        else
        {
          v4[2] = v69;
          v68 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v67;
        v68 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_Utterance::InternalSerializeWithCachedSizesToArray(v66, v68, a3);
    }
  }
  v72 = *((_DWORD *)this + 56);
  if (v72)
  {
    for (mm = 0; mm != v72; ++mm)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v74 = (protobuf::Intelligence_Character *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>((uint64_t)this + 216, mm);
      *v4 = 90;
      v75 = *((_DWORD *)v74 + 5);
      if (v75 > 0x7F)
      {
        v4[1] = v75 | 0x80;
        v77 = v75 >> 7;
        if (v75 >> 14)
        {
          v76 = v4 + 3;
          do
          {
            *(v76 - 1) = v77 | 0x80;
            v78 = v77 >> 7;
            ++v76;
            v79 = v77 >> 14;
            v77 >>= 7;
          }
          while (v79);
          *(v76 - 1) = v78;
        }
        else
        {
          v4[2] = v77;
          v76 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v75;
        v76 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_Character::InternalSerializeWithCachedSizesToArray(v74, v76, a3);
    }
  }
  v80 = *((_DWORD *)this + 62);
  if (v80)
  {
    for (nn = 0; nn != v80; ++nn)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v82 = (protobuf::Intelligence_Intent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>((uint64_t)this + 240, nn);
      *v4 = 106;
      v83 = *((_DWORD *)v82 + 5);
      if (v83 > 0x7F)
      {
        v4[1] = v83 | 0x80;
        v85 = v83 >> 7;
        if (v83 >> 14)
        {
          v84 = v4 + 3;
          do
          {
            *(v84 - 1) = v85 | 0x80;
            v86 = v85 >> 7;
            ++v84;
            v87 = v85 >> 14;
            v85 >>= 7;
          }
          while (v87);
          *(v84 - 1) = v86;
        }
        else
        {
          v4[2] = v85;
          v84 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v83;
        v84 = v4 + 2;
      }
      v4 = (char *)protobuf::Intelligence_Intent::InternalSerializeWithCachedSizesToArray(v82, v84, a3);
    }
  }
  v88 = *((_DWORD *)this + 68);
  if (v88)
  {
    for (i1 = 0; i1 != v88; ++i1)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v90 = (protobuf::Intelligence_Condition *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((uint64_t)this + 264, i1);
      *(_WORD *)v4 = 386;
      v91 = *((_DWORD *)v90 + 5);
      if (v91 > 0x7F)
      {
        v4[2] = v91 | 0x80;
        v93 = v91 >> 7;
        if (v91 >> 14)
        {
          v92 = v4 + 4;
          do
          {
            *(v92 - 1) = v93 | 0x80;
            v94 = v93 >> 7;
            ++v92;
            v95 = v93 >> 14;
            v93 >>= 7;
          }
          while (v95);
          *(v92 - 1) = v94;
        }
        else
        {
          v4[3] = v93;
          v92 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v91;
        v92 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Condition::InternalSerializeWithCachedSizesToArray(v90, v92, a3);
    }
  }
  v96 = *((_DWORD *)this + 74);
  if (v96)
  {
    for (i2 = 0; i2 != v96; ++i2)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v98 = (protobuf::Intelligence_Counter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((uint64_t)this + 288, i2);
      *(_WORD *)v4 = 394;
      v99 = *((_DWORD *)v98 + 5);
      if (v99 > 0x7F)
      {
        v4[2] = v99 | 0x80;
        v101 = v99 >> 7;
        if (v99 >> 14)
        {
          v100 = v4 + 4;
          do
          {
            *(v100 - 1) = v101 | 0x80;
            v102 = v101 >> 7;
            ++v100;
            v103 = v101 >> 14;
            v101 >>= 7;
          }
          while (v103);
          *(v100 - 1) = v102;
        }
        else
        {
          v4[3] = v101;
          v100 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v99;
        v100 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Counter::InternalSerializeWithCachedSizesToArray(v98, v100, a3);
    }
  }
  v104 = *((_DWORD *)this + 80);
  if (v104)
  {
    for (i3 = 0; i3 != v104; ++i3)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v106 = (protobuf::Intelligence_Flag *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((uint64_t)this + 312, i3);
      *(_WORD *)v4 = 402;
      v107 = *((_DWORD *)v106 + 5);
      if (v107 > 0x7F)
      {
        v4[2] = v107 | 0x80;
        v109 = v107 >> 7;
        if (v107 >> 14)
        {
          v108 = v4 + 4;
          do
          {
            *(v108 - 1) = v109 | 0x80;
            v110 = v109 >> 7;
            ++v108;
            v111 = v109 >> 14;
            v109 >>= 7;
          }
          while (v111);
          *(v108 - 1) = v110;
        }
        else
        {
          v4[3] = v109;
          v108 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v107;
        v108 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Flag::InternalSerializeWithCachedSizesToArray(v106, v108, a3);
    }
  }
  v112 = *((_DWORD *)this + 86);
  if (v112)
  {
    for (i4 = 0; i4 != v112; ++i4)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v114 = (protobuf::Intelligence_Label *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((uint64_t)this + 336, i4);
      *(_WORD *)v4 = 410;
      v115 = *((_DWORD *)v114 + 5);
      if (v115 > 0x7F)
      {
        v4[2] = v115 | 0x80;
        v117 = v115 >> 7;
        if (v115 >> 14)
        {
          v116 = v4 + 4;
          do
          {
            *(v116 - 1) = v117 | 0x80;
            v118 = v117 >> 7;
            ++v116;
            v119 = v117 >> 14;
            v117 >>= 7;
          }
          while (v119);
          *(v116 - 1) = v118;
        }
        else
        {
          v4[3] = v117;
          v116 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v115;
        v116 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Label::InternalSerializeWithCachedSizesToArray(v114, v116, a3);
    }
  }
  v120 = *((_DWORD *)this + 92);
  if (v120)
  {
    for (i5 = 0; i5 != v120; ++i5)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v122 = (protobuf::Intelligence_List *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((uint64_t)this + 360, i5);
      *(_WORD *)v4 = 418;
      v123 = *((_DWORD *)v122 + 5);
      if (v123 > 0x7F)
      {
        v4[2] = v123 | 0x80;
        v125 = v123 >> 7;
        if (v123 >> 14)
        {
          v124 = v4 + 4;
          do
          {
            *(v124 - 1) = v125 | 0x80;
            v126 = v125 >> 7;
            ++v124;
            v127 = v125 >> 14;
            v125 >>= 7;
          }
          while (v127);
          *(v124 - 1) = v126;
        }
        else
        {
          v4[3] = v125;
          v124 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v123;
        v124 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_List::InternalSerializeWithCachedSizesToArray(v122, v124, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v128 = *((_BYTE *)this + 552);
    *(_WORD *)v4 = 432;
    v4[2] = v128;
    v4 += 3;
  }
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 26, *((_QWORD *)this + 66), v4);
  v129 = *((_DWORD *)this + 98);
  if (v129)
  {
    for (i6 = 0; i6 != v129; ++i6)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v131 = (protobuf::Intelligence_Variable *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)this + 384, i6);
      *(_WORD *)v4 = 474;
      v132 = *((_DWORD *)v131 + 5);
      if (v132 > 0x7F)
      {
        v4[2] = v132 | 0x80;
        v134 = v132 >> 7;
        if (v132 >> 14)
        {
          v133 = v4 + 4;
          do
          {
            *(v133 - 1) = v134 | 0x80;
            v135 = v134 >> 7;
            ++v133;
            v136 = v134 >> 14;
            v134 >>= 7;
          }
          while (v136);
          *(v133 - 1) = v135;
        }
        else
        {
          v4[3] = v134;
          v133 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v132;
        v133 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Variable::InternalSerializeWithCachedSizesToArray(v131, v133, a3);
    }
  }
  v137 = *((_DWORD *)this + 104);
  if (v137)
  {
    for (i7 = 0; i7 != v137; ++i7)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v139 = (protobuf::Intelligence_ResponseGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408, i7);
      *(_WORD *)v4 = 482;
      v140 = *((_DWORD *)v139 + 5);
      if (v140 > 0x7F)
      {
        v4[2] = v140 | 0x80;
        v142 = v140 >> 7;
        if (v140 >> 14)
        {
          v141 = v4 + 4;
          do
          {
            *(v141 - 1) = v142 | 0x80;
            v143 = v142 >> 7;
            ++v141;
            v144 = v142 >> 14;
            v142 >>= 7;
          }
          while (v144);
          *(v141 - 1) = v143;
        }
        else
        {
          v4[3] = v142;
          v141 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v140;
        v141 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_ResponseGroup::InternalSerializeWithCachedSizesToArray(v139, v141, a3);
    }
  }
  v145 = *((_DWORD *)this + 110);
  if (v145)
  {
    for (i8 = 0; i8 != v145; ++i8)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v147 = (protobuf::Intelligence_InputGroup *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 432, i8);
      *(_WORD *)v4 = 490;
      v148 = *((_DWORD *)v147 + 5);
      if (v148 > 0x7F)
      {
        v4[2] = v148 | 0x80;
        v150 = v148 >> 7;
        if (v148 >> 14)
        {
          v149 = v4 + 4;
          do
          {
            *(v149 - 1) = v150 | 0x80;
            v151 = v150 >> 7;
            ++v149;
            v152 = v150 >> 14;
            v150 >>= 7;
          }
          while (v152);
          *(v149 - 1) = v151;
        }
        else
        {
          v4[3] = v150;
          v149 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v148;
        v149 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_InputGroup::InternalSerializeWithCachedSizesToArray(v147, v149, a3);
    }
  }
  v153 = *((_DWORD *)this + 116);
  if (v153 >= 1)
  {
    for (i9 = 0; v153 != i9; ++i9)
    {
      v155 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 456, i9);
      if (*(char *)(v155 + 23) < 0)
      {
        v156 = *(_QWORD *)(v155 + 8);
        if (v156 > 127)
          goto LABEL_239;
      }
      else
      {
        v156 = *(unsigned __int8 *)(v155 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 13 >= v156)
      {
        *(_WORD *)v4 = 498;
        v4[2] = v156;
        if (*(char *)(v155 + 23) >= 0)
          v157 = (const void *)v155;
        else
          v157 = *(const void **)v155;
        memcpy(v4 + 3, v157, v156);
        v4 += v156 + 3;
        continue;
      }
LABEL_239:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 30, v155, v4);
    }
  }
  v158 = *((_DWORD *)this + 122);
  if (v158 >= 1)
  {
    for (i10 = 0; v158 != i10; ++i10)
    {
      v160 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 480, i10);
      if (*(char *)(v160 + 23) < 0)
      {
        v161 = *(_QWORD *)(v160 + 8);
        if (v161 > 127)
          goto LABEL_252;
      }
      else
      {
        v161 = *(unsigned __int8 *)(v160 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 13 >= v161)
      {
        *(_WORD *)v4 = 506;
        v4[2] = v161;
        if (*(char *)(v160 + 23) >= 0)
          v162 = (const void *)v160;
        else
          v162 = *(const void **)v160;
        memcpy(v4 + 3, v162, v161);
        v4 += v161 + 3;
        continue;
      }
LABEL_252:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 31, v160, v4);
    }
  }
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v163 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
    *(_WORD *)v4 = 642;
    v164 = *((_DWORD *)v163 + 5);
    if (v164 > 0x7F)
    {
      v4[2] = v164 | 0x80;
      v166 = v164 >> 7;
      if (v164 >> 14)
      {
        v165 = v4 + 4;
        do
        {
          *(v165 - 1) = v166 | 0x80;
          v167 = v166 >> 7;
          ++v165;
          v168 = v166 >> 14;
          v166 >>= 7;
        }
        while (v168);
        *(v165 - 1) = v167;
      }
      else
      {
        v4[3] = v166;
        v165 = v4 + 4;
      }
    }
    else
    {
      v4[2] = v164;
      v165 = v4 + 3;
    }
    v4 = (char *)protobuf::Intelligence_Start::InternalSerializeWithCachedSizesToArray(v163, v165, a3);
  }
  v169 = *((_DWORD *)this + 128);
  if (v169)
  {
    for (i11 = 0; i11 != v169; ++i11)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v171 = (protobuf::Intelligence_Event *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((uint64_t)this + 504, i11);
      *(_WORD *)v4 = 650;
      v172 = *((_DWORD *)v171 + 5);
      if (v172 > 0x7F)
      {
        v4[2] = v172 | 0x80;
        v174 = v172 >> 7;
        if (v172 >> 14)
        {
          v173 = v4 + 4;
          do
          {
            *(v173 - 1) = v174 | 0x80;
            v175 = v174 >> 7;
            ++v173;
            v176 = v174 >> 14;
            v174 >>= 7;
          }
          while (v176);
          *(v173 - 1) = v175;
        }
        else
        {
          v4[3] = v174;
          v173 = v4 + 4;
        }
      }
      else
      {
        v4[2] = v172;
        v173 = v4 + 3;
      }
      v4 = (char *)protobuf::Intelligence_Event::InternalSerializeWithCachedSizesToArray(v171, v173, a3);
    }
  }
  v177 = *((_QWORD *)this + 1);
  if ((v177 & 1) == 0)
    return (unsigned __int8 *)v4;
  v179 = v177 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v179 + 23) < 0)
  {
    v181 = *(void **)v179;
    v180 = *(_QWORD *)(v179 + 8);
  }
  else
  {
    LODWORD(v180) = *(unsigned __int8 *)(v179 + 23);
    v181 = (void *)v179;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v180)
  {
    v182 = (int)v180;
    memcpy(v4, v181, (int)v180);
    v4 += v182;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v181, v180, (unsigned __int8 *)v4);
}

uint64_t protobuf::Intelligence::ByteSizeLong(protobuf::Intelligence *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::Intelligence_Meta **v4;
  uint64_t v5;
  protobuf::Intelligence_Meta *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::Intelligence_DialogResponse **v11;
  uint64_t v12;
  protobuf::Intelligence_DialogResponse *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  protobuf::Intelligence_BehaviorResponse **v18;
  uint64_t v19;
  protobuf::Intelligence_BehaviorResponse *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  protobuf::Intelligence_ReferenceResponse **v25;
  uint64_t v26;
  protobuf::Intelligence_ReferenceResponse *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  protobuf::Intelligence_ResponseGroup **v32;
  uint64_t v33;
  protobuf::Intelligence_ResponseGroup *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  protobuf::Intelligence_InputGroup **v39;
  uint64_t v40;
  protobuf::Intelligence_InputGroup *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  protobuf::Intelligence_Activity **v46;
  uint64_t v47;
  protobuf::Intelligence_Activity *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  protobuf::Intelligence_Utterance **v53;
  uint64_t v54;
  protobuf::Intelligence_Utterance *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  protobuf::Intelligence_Character **v60;
  uint64_t v61;
  protobuf::Intelligence_Character *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  protobuf::Intelligence_Intent **v67;
  uint64_t v68;
  protobuf::Intelligence_Intent *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  protobuf::Intelligence_Condition **v74;
  uint64_t v75;
  protobuf::Intelligence_Condition *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  protobuf::Intelligence_Counter **v81;
  uint64_t v82;
  protobuf::Intelligence_Counter *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  protobuf::Intelligence_Flag **v88;
  uint64_t v89;
  protobuf::Intelligence_Flag *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  protobuf::Intelligence_Label **v95;
  uint64_t v96;
  protobuf::Intelligence_Label *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  protobuf::Intelligence_List **v102;
  uint64_t v103;
  protobuf::Intelligence_List *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  protobuf::Intelligence_Variable **v109;
  uint64_t v110;
  protobuf::Intelligence_Variable *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  protobuf::Intelligence_ResponseGroup **v116;
  uint64_t v117;
  protobuf::Intelligence_ResponseGroup *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  protobuf::Intelligence_InputGroup **v123;
  uint64_t v124;
  protobuf::Intelligence_InputGroup *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  protobuf::Intelligence_Event **v140;
  uint64_t v141;
  protobuf::Intelligence_Event *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v152;
  uint64_t v153;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::Intelligence_Meta **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::Intelligence_Meta::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::Intelligence_DialogResponse **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::Intelligence_DialogResponse::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (protobuf::Intelligence_BehaviorResponse **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = protobuf::Intelligence_BehaviorResponse::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (protobuf::Intelligence_ReferenceResponse **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = protobuf::Intelligence_ReferenceResponse::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((int *)this + 32);
  v30 = v23 + v29;
  v31 = *((_QWORD *)this + 17);
  if (v31)
    v32 = (protobuf::Intelligence_ResponseGroup **)(v31 + 8);
  else
    v32 = 0;
  if ((_DWORD)v29)
  {
    v33 = 8 * v29;
    do
    {
      v34 = *v32++;
      v35 = protobuf::Intelligence_ResponseGroup::ByteSizeLong(v34);
      v30 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6);
      v33 -= 8;
    }
    while (v33);
  }
  v36 = *((int *)this + 38);
  v37 = v30 + v36;
  v38 = *((_QWORD *)this + 20);
  if (v38)
    v39 = (protobuf::Intelligence_InputGroup **)(v38 + 8);
  else
    v39 = 0;
  if ((_DWORD)v36)
  {
    v40 = 8 * v36;
    do
    {
      v41 = *v39++;
      v42 = protobuf::Intelligence_InputGroup::ByteSizeLong(v41);
      v37 += v42 + ((9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6);
      v40 -= 8;
    }
    while (v40);
  }
  v43 = *((int *)this + 44);
  v44 = v37 + v43;
  v45 = *((_QWORD *)this + 23);
  if (v45)
    v46 = (protobuf::Intelligence_Activity **)(v45 + 8);
  else
    v46 = 0;
  if ((_DWORD)v43)
  {
    v47 = 8 * v43;
    do
    {
      v48 = *v46++;
      v49 = protobuf::Intelligence_Activity::ByteSizeLong(v48);
      v44 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
      v47 -= 8;
    }
    while (v47);
  }
  v50 = *((int *)this + 50);
  v51 = v44 + v50;
  v52 = *((_QWORD *)this + 26);
  if (v52)
    v53 = (protobuf::Intelligence_Utterance **)(v52 + 8);
  else
    v53 = 0;
  if ((_DWORD)v50)
  {
    v54 = 8 * v50;
    do
    {
      v55 = *v53++;
      v56 = protobuf::Intelligence_Utterance::ByteSizeLong(v55);
      v51 += v56 + ((9 * (__clz(v56 | 1) ^ 0x1F) + 73) >> 6);
      v54 -= 8;
    }
    while (v54);
  }
  v57 = *((int *)this + 56);
  v58 = v51 + v57;
  v59 = *((_QWORD *)this + 29);
  if (v59)
    v60 = (protobuf::Intelligence_Character **)(v59 + 8);
  else
    v60 = 0;
  if ((_DWORD)v57)
  {
    v61 = 8 * v57;
    do
    {
      v62 = *v60++;
      v63 = protobuf::Intelligence_Character::ByteSizeLong(v62);
      v58 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6);
      v61 -= 8;
    }
    while (v61);
  }
  v64 = *((int *)this + 62);
  v65 = v58 + v64;
  v66 = *((_QWORD *)this + 32);
  if (v66)
    v67 = (protobuf::Intelligence_Intent **)(v66 + 8);
  else
    v67 = 0;
  if ((_DWORD)v64)
  {
    v68 = 8 * v64;
    do
    {
      v69 = *v67++;
      v70 = protobuf::Intelligence_Intent::ByteSizeLong(v69);
      v65 += v70 + ((9 * (__clz(v70 | 1) ^ 0x1F) + 73) >> 6);
      v68 -= 8;
    }
    while (v68);
  }
  v71 = *((int *)this + 68);
  v72 = v65 + 2 * v71;
  v73 = *((_QWORD *)this + 35);
  if (v73)
    v74 = (protobuf::Intelligence_Condition **)(v73 + 8);
  else
    v74 = 0;
  if ((_DWORD)v71)
  {
    v75 = 8 * v71;
    do
    {
      v76 = *v74++;
      v77 = protobuf::Intelligence_Condition::ByteSizeLong(v76);
      v72 += v77 + ((9 * (__clz(v77 | 1) ^ 0x1F) + 73) >> 6);
      v75 -= 8;
    }
    while (v75);
  }
  v78 = *((int *)this + 74);
  v79 = v72 + 2 * v78;
  v80 = *((_QWORD *)this + 38);
  if (v80)
    v81 = (protobuf::Intelligence_Counter **)(v80 + 8);
  else
    v81 = 0;
  if ((_DWORD)v78)
  {
    v82 = 8 * v78;
    do
    {
      v83 = *v81++;
      v84 = protobuf::Intelligence_Counter::ByteSizeLong(v83);
      v79 += v84 + ((9 * (__clz(v84 | 1) ^ 0x1F) + 73) >> 6);
      v82 -= 8;
    }
    while (v82);
  }
  v85 = *((int *)this + 80);
  v86 = v79 + 2 * v85;
  v87 = *((_QWORD *)this + 41);
  if (v87)
    v88 = (protobuf::Intelligence_Flag **)(v87 + 8);
  else
    v88 = 0;
  if ((_DWORD)v85)
  {
    v89 = 8 * v85;
    do
    {
      v90 = *v88++;
      v91 = protobuf::Intelligence_Flag::ByteSizeLong(v90);
      v86 += v91 + ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6);
      v89 -= 8;
    }
    while (v89);
  }
  v92 = *((int *)this + 86);
  v93 = v86 + 2 * v92;
  v94 = *((_QWORD *)this + 44);
  if (v94)
    v95 = (protobuf::Intelligence_Label **)(v94 + 8);
  else
    v95 = 0;
  if ((_DWORD)v92)
  {
    v96 = 8 * v92;
    do
    {
      v97 = *v95++;
      v98 = protobuf::Intelligence_Label::ByteSizeLong(v97);
      v93 += v98 + ((9 * (__clz(v98 | 1) ^ 0x1F) + 73) >> 6);
      v96 -= 8;
    }
    while (v96);
  }
  v99 = *((int *)this + 92);
  v100 = v93 + 2 * v99;
  v101 = *((_QWORD *)this + 47);
  if (v101)
    v102 = (protobuf::Intelligence_List **)(v101 + 8);
  else
    v102 = 0;
  if ((_DWORD)v99)
  {
    v103 = 8 * v99;
    do
    {
      v104 = *v102++;
      v105 = protobuf::Intelligence_List::ByteSizeLong(v104);
      v100 += v105 + ((9 * (__clz(v105 | 1) ^ 0x1F) + 73) >> 6);
      v103 -= 8;
    }
    while (v103);
  }
  v106 = *((int *)this + 98);
  v107 = v100 + 2 * v106;
  v108 = *((_QWORD *)this + 50);
  if (v108)
    v109 = (protobuf::Intelligence_Variable **)(v108 + 8);
  else
    v109 = 0;
  if ((_DWORD)v106)
  {
    v110 = 8 * v106;
    do
    {
      v111 = *v109++;
      v112 = protobuf::Intelligence_Variable::ByteSizeLong(v111);
      v107 += v112 + ((9 * (__clz(v112 | 1) ^ 0x1F) + 73) >> 6);
      v110 -= 8;
    }
    while (v110);
  }
  v113 = *((int *)this + 104);
  v114 = v107 + 2 * v113;
  v115 = *((_QWORD *)this + 53);
  if (v115)
    v116 = (protobuf::Intelligence_ResponseGroup **)(v115 + 8);
  else
    v116 = 0;
  if ((_DWORD)v113)
  {
    v117 = 8 * v113;
    do
    {
      v118 = *v116++;
      v119 = protobuf::Intelligence_ResponseGroup::ByteSizeLong(v118);
      v114 += v119 + ((9 * (__clz(v119 | 1) ^ 0x1F) + 73) >> 6);
      v117 -= 8;
    }
    while (v117);
  }
  v120 = *((int *)this + 110);
  v121 = v114 + 2 * v120;
  v122 = *((_QWORD *)this + 56);
  if (v122)
    v123 = (protobuf::Intelligence_InputGroup **)(v122 + 8);
  else
    v123 = 0;
  if ((_DWORD)v120)
  {
    v124 = 8 * v120;
    do
    {
      v125 = *v123++;
      v126 = protobuf::Intelligence_InputGroup::ByteSizeLong(v125);
      v121 += v126 + ((9 * (__clz(v126 | 1) ^ 0x1F) + 73) >> 6);
      v124 -= 8;
    }
    while (v124);
  }
  v127 = *((unsigned int *)this + 116);
  v128 = v121 + 2 * v127;
  if ((int)v127 >= 1)
  {
    v129 = 0;
    do
    {
      v130 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 456, v129);
      v131 = *(unsigned __int8 *)(v130 + 23);
      if ((v131 & 0x80u) != 0)
        v131 = *(_QWORD *)(v130 + 8);
      v128 += v131 + ((9 * (__clz(v131 | 1) ^ 0x1F) + 73) >> 6);
      ++v129;
    }
    while ((_DWORD)v127 != v129);
  }
  v132 = *((unsigned int *)this + 122);
  v133 = v128 + 2 * v132;
  if ((int)v132 >= 1)
  {
    v134 = 0;
    do
    {
      v135 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 480, v134);
      v136 = *(unsigned __int8 *)(v135 + 23);
      if ((v136 & 0x80u) != 0)
        v136 = *(_QWORD *)(v135 + 8);
      v133 += v136 + ((9 * (__clz(v136 | 1) ^ 0x1F) + 73) >> 6);
      ++v134;
    }
    while ((_DWORD)v132 != v134);
  }
  v137 = *((int *)this + 128);
  v138 = v133 + 2 * v137;
  v139 = *((_QWORD *)this + 65);
  if (v139)
    v140 = (protobuf::Intelligence_Event **)(v139 + 8);
  else
    v140 = 0;
  if ((_DWORD)v137)
  {
    v141 = 8 * v137;
    do
    {
      v142 = *v140++;
      v143 = protobuf::Intelligence_Event::ByteSizeLong(v142);
      v138 += v143 + ((9 * (__clz(v143 | 1) ^ 0x1F) + 73) >> 6);
      v141 -= 8;
    }
    while (v141);
  }
  v144 = *((_DWORD *)this + 4);
  if ((v144 & 0xF) != 0)
  {
    if ((v144 & 1) != 0)
    {
      v145 = *((_QWORD *)this + 66);
      v146 = *(unsigned __int8 *)(v145 + 23);
      v147 = *(_QWORD *)(v145 + 8);
      if ((v146 & 0x80u) == 0)
        v147 = v146;
      v138 += v147 + ((9 * (__clz(v147 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
    if ((v144 & 2) != 0)
    {
      v148 = protobuf::Intelligence_Start::ByteSizeLong(*((protobuf::Intelligence_Start **)this + 67));
      v138 += v148 + ((9 * (__clz(v148 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
    v149 = v138 + 9;
    if ((v144 & 4) == 0)
      v149 = v138;
    if ((v144 & 8) != 0)
      v138 = v149 + 3;
    else
      v138 = v149;
  }
  v150 = *((_QWORD *)this + 1);
  if ((v150 & 1) != 0)
  {
    v152 = v150 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v152 + 23) < 0)
      v153 = *(_QWORD *)(v152 + 8);
    else
      v153 = *(unsigned __int8 *)(v152 + 23);
    v138 += v153;
  }
  *((_DWORD *)this + 5) = v138;
  return v138;
}

void protobuf::Intelligence::CheckTypeAndMergeFrom(protobuf::Intelligence *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::Intelligence::MergeFrom(this, lpsrc);
}

void protobuf::Intelligence::MergeFrom(protobuf::Intelligence *this, const protobuf::Intelligence *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  protobuf::Intelligence_Start *v9;
  const protobuf::Intelligence_Start *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.cc", 15005);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((int **)this + 18, (uint64_t)a2 + 144);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((int **)this + 21, (uint64_t)a2 + 168);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>((int **)this + 24, (uint64_t)a2 + 192);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>((int **)this + 27, (uint64_t)a2 + 216);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>((int **)this + 30, (uint64_t)a2 + 240);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((int **)this + 33, (uint64_t)a2 + 264);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>((int **)this + 36, (uint64_t)a2 + 288);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>((int **)this + 39, (uint64_t)a2 + 312);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>((int **)this + 42, (uint64_t)a2 + 336);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>((int **)this + 45, (uint64_t)a2 + 360);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((int **)this + 48, (uint64_t)a2 + 384);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((int **)this + 51, (uint64_t)a2 + 408);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((int **)this + 54, (uint64_t)a2 + 432);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 456, (uint64_t)a2 + 456);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 480, (uint64_t)a2 + 480);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((int **)this + 63, (uint64_t)a2 + 504);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      *((_DWORD *)this + 4) |= 1u;
      v7 = (const std::string *)*((_QWORD *)a2 + 66);
      v8 = (std::string *)*((_QWORD *)this + 66);
      if (v8 != v7)
      {
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 66, (uint64_t)v7);
          if ((v6 & 2) == 0)
          {
LABEL_11:
            if ((v6 & 4) == 0)
              goto LABEL_12;
            goto LABEL_23;
          }
LABEL_17:
          *((_DWORD *)this + 4) |= 2u;
          v9 = (protobuf::Intelligence_Start *)*((_QWORD *)this + 67);
          if (!v9)
          {
            v9 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0);
            *((_QWORD *)this + 67) = v9;
          }
          if (*((_QWORD *)a2 + 67))
            v10 = (const protobuf::Intelligence_Start *)*((_QWORD *)a2 + 67);
          else
            v10 = (const protobuf::Intelligence_Start *)&protobuf::_Intelligence_Start_default_instance_;
          protobuf::Intelligence_Start::MergeFrom(v9, v10);
          if ((v6 & 4) == 0)
          {
LABEL_12:
            if ((v6 & 8) == 0)
            {
LABEL_14:
              *((_DWORD *)this + 4) |= v6;
              return;
            }
LABEL_13:
            *((_BYTE *)this + 552) = *((_BYTE *)a2 + 552);
            goto LABEL_14;
          }
LABEL_23:
          *((_QWORD *)this + 68) = *((_QWORD *)a2 + 68);
          if ((v6 & 8) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
        std::string::operator=(v8, v7);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF405E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::Intelligence::CopyFrom(protobuf::Intelligence *this, const protobuf::Intelligence *a2)
{
  if (a2 != this)
  {
    protobuf::Intelligence::Clear(this);
    protobuf::Intelligence::MergeFrom(this, a2);
  }
}

uint64_t protobuf::Intelligence::IsInitialized(protobuf::Intelligence *this)
{
  return 1;
}

double protobuf::Intelligence::InternalSwap(protobuf::Intelligence *this, protobuf::Intelligence *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 24), (protobuf::Intelligence *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 48), (protobuf::Intelligence *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 72), (protobuf::Intelligence *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 96), (protobuf::Intelligence *)((char *)a2 + 96));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 120), (protobuf::Intelligence *)((char *)a2 + 120));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 144), (protobuf::Intelligence *)((char *)a2 + 144));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 168), (protobuf::Intelligence *)((char *)a2 + 168));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 192), (protobuf::Intelligence *)((char *)a2 + 192));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 216), (protobuf::Intelligence *)((char *)a2 + 216));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 240), (protobuf::Intelligence *)((char *)a2 + 240));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 264), (protobuf::Intelligence *)((char *)a2 + 264));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 288), (protobuf::Intelligence *)((char *)a2 + 288));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 312), (protobuf::Intelligence *)((char *)a2 + 312));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 336), (protobuf::Intelligence *)((char *)a2 + 336));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 360), (protobuf::Intelligence *)((char *)a2 + 360));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 384), (protobuf::Intelligence *)((char *)a2 + 384));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 408), (protobuf::Intelligence *)((char *)a2 + 408));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 432), (protobuf::Intelligence *)((char *)a2 + 432));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 456), (protobuf::Intelligence *)((char *)a2 + 456));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 480), (protobuf::Intelligence *)((char *)a2 + 480));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::Intelligence *)((char *)this + 504), (protobuf::Intelligence *)((char *)a2 + 504));
  v13 = (uint64_t **)((char *)a2 + 528);
  v14 = (uint64_t *)*((_QWORD *)this + 66);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v13 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 66, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 66);
  }
  v15 = *v13;
  if (*v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 66, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v13;
  }
  v16 = v14[2];
  v17 = *(_OWORD *)v14;
  v18 = v15[2];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = *((_QWORD *)a2 + 67);
  *((_QWORD *)a2 + 67) = v19;
  result = *((double *)this + 68);
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 68);
  *((double *)a2 + 68) = result;
  LOBYTE(v19) = *((_BYTE *)this + 552);
  *((_BYTE *)this + 552) = *((_BYTE *)a2 + 552);
  *((_BYTE *)a2 + 552) = v19;
  return result;
}

_QWORD *protobuf::Intelligence::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.Intelligence");
}

protobuf::Intelligence_Meta *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Meta *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Meta *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Meta>);
    protobuf::Intelligence_Meta::Intelligence_Meta(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Meta *)operator new();
    protobuf::Intelligence_Meta::Intelligence_Meta(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_KeyValueParameter *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_KeyValueParameter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_KeyValueParameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xC0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_KeyValueParameter>);
    protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_KeyValueParameter *)operator new();
    protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF409D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40A43BFAD9);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Undo *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Undo>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Undo *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Undo *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Undo>);
    protobuf::Intelligence_Undo::Intelligence_Undo(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Undo *)operator new();
    protobuf::Intelligence_Undo::Intelligence_Undo(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_DialogResponse *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_DialogResponse *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_DialogResponse *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xF0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_DialogResponse>);
    protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_DialogResponse *)operator new();
    protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40114067D4);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_BehaviorResponse *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_BehaviorResponse *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_BehaviorResponse *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xA8uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_BehaviorResponse>);
    protobuf::Intelligence_BehaviorResponse::Intelligence_BehaviorResponse(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_BehaviorResponse *)operator new();
    protobuf::Intelligence_BehaviorResponse::Intelligence_BehaviorResponse(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40B4A8759ALL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_ReferenceResponse *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_ReferenceResponse *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_ReferenceResponse *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x90uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ReferenceResponse>);
    protobuf::Intelligence_ReferenceResponse::Intelligence_ReferenceResponse(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_ReferenceResponse *)operator new();
    protobuf::Intelligence_ReferenceResponse::Intelligence_ReferenceResponse(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40A0FE4946);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_ResponseGroup *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_ResponseGroup *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_ResponseGroup *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x80uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ResponseGroup>);
    protobuf::Intelligence_ResponseGroup::Intelligence_ResponseGroup(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_ResponseGroup *)operator new();
    protobuf::Intelligence_ResponseGroup::Intelligence_ResponseGroup(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40FEB2EEB8);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Interjection *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup_Interjection *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Interjection *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Interjection>);
    protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Interjection *)operator new();
    protobuf::Intelligence_InputGroup_Interjection::Intelligence_InputGroup_Interjection(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40DC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40C24530F0);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Intent *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup_Intent *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Intent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Intent>);
    protobuf::Intelligence_InputGroup_Intent::Intelligence_InputGroup_Intent(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Intent *)operator new();
    protobuf::Intelligence_InputGroup_Intent::Intelligence_InputGroup_Intent(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40FD116D44);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Event *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup_Event *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Event *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Event>);
    protobuf::Intelligence_InputGroup_Event::Intelligence_InputGroup_Event(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Event *)operator new();
    protobuf::Intelligence_InputGroup_Event::Intelligence_InputGroup_Event(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40B600A8A2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_Fallback *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup_Fallback *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Fallback *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Fallback>);
    protobuf::Intelligence_InputGroup_Fallback::Intelligence_InputGroup_Fallback(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_Fallback *)operator new();
    protobuf::Intelligence_InputGroup_Fallback::Intelligence_InputGroup_Fallback(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF40FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C4030D5F432);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup_LegacyEvent *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup_LegacyEvent *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_LegacyEvent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_LegacyEvent>);
    protobuf::Intelligence_InputGroup_LegacyEvent::Intelligence_InputGroup_LegacyEvent(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup_LegacyEvent *)operator new();
    protobuf::Intelligence_InputGroup_LegacyEvent::Intelligence_InputGroup_LegacyEvent(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40E04C479ALL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_InputGroup *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_InputGroup *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xB0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup>);
    protobuf::Intelligence_InputGroup::Intelligence_InputGroup(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_InputGroup *)operator new();
    protobuf::Intelligence_InputGroup::Intelligence_InputGroup(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41110(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40C7E49807);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Activity *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Activity *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Activity *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Activity>);
    protobuf::Intelligence_Activity::Intelligence_Activity(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Activity *)operator new();
    protobuf::Intelligence_Activity::Intelligence_Activity(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF411B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C400F112FBCLL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Utterance *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Utterance *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Utterance *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Utterance>);
    protobuf::Intelligence_Utterance::Intelligence_Utterance(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Utterance *)operator new();
    protobuf::Intelligence_Utterance::Intelligence_Utterance(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40A4F785B1);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Character *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Character *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Character *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Character>);
    protobuf::Intelligence_Character::Intelligence_Character(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Character *)operator new();
    protobuf::Intelligence_Character::Intelligence_Character(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40CA074DDCLL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Counter *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Counter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Counter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Counter>);
    protobuf::Intelligence_Counter::Intelligence_Counter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Counter *)operator new();
    protobuf::Intelligence_Counter::Intelligence_Counter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF413B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Flag *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Flag *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Flag *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Flag>);
    protobuf::Intelligence_Flag::Intelligence_Flag(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Flag *)operator new();
    protobuf::Intelligence_Flag::Intelligence_Flag(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C404E984866);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Label *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Label *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Label *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Label>);
    protobuf::Intelligence_Label::Intelligence_Label(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Label *)operator new();
    protobuf::Intelligence_Label::Intelligence_Label(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_List *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_List *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_List *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_List>);
    protobuf::Intelligence_List::Intelligence_List(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_List *)operator new();
    protobuf::Intelligence_List::Intelligence_List(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF415A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Variable *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Variable *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Variable *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x80uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Variable>);
    protobuf::Intelligence_Variable::Intelligence_Variable(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Variable *)operator new();
    protobuf::Intelligence_Variable::Intelligence_Variable(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C400FE9DF76);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Start *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Start *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Start *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Start>);
    protobuf::Intelligence_Start::Intelligence_Start(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Start *)operator new();
    protobuf::Intelligence_Start::Intelligence_Start(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF416F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_NLParameters *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_NLParameters *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_NLParameters *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_NLParameters>);
    protobuf::Intelligence_NLParameters::Intelligence_NLParameters(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_NLParameters *)operator new();
    protobuf::Intelligence_NLParameters::Intelligence_NLParameters(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF417A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Event *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Event *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Event *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xA8uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Event>);
    protobuf::Intelligence_Event::Intelligence_Event(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Event *)operator new();
    protobuf::Intelligence_Event::Intelligence_Event(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40B4D98986);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Intent *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Intent *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Intent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Intent>);
    protobuf::Intelligence_Intent::Intelligence_Intent(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Intent *)operator new();
    protobuf::Intelligence_Intent::Intelligence_Intent(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF418F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40E04C479ALL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Memory_Value *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_Memory_Value *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Memory_Value *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory_Value>);
    protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Memory_Value *)operator new();
    protobuf::Intelligence_State_Memory_Value::Intelligence_State_Memory_Value(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C4050885234);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Memory *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_Memory *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Memory *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory>);
    protobuf::Intelligence_State_Memory::Intelligence_State_Memory(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Memory *)operator new();
    protobuf::Intelligence_State_Memory::Intelligence_State_Memory(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C407D532265);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_InputGroup *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_InputGroup *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_InputGroup *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_InputGroup>);
    protobuf::Intelligence_State_InputGroup::Intelligence_State_InputGroup(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_InputGroup *)operator new();
    protobuf::Intelligence_State_InputGroup::Intelligence_State_InputGroup(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40D4912B22);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Event *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_Event *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Event *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Event>);
    protobuf::Intelligence_State_Event::Intelligence_State_Event(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Event *)operator new();
    protobuf::Intelligence_State_Event::Intelligence_State_Event(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Response *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_Response *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Response *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Response>);
    protobuf::Intelligence_State_Response::Intelligence_State_Response(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Response *)operator new();
    protobuf::Intelligence_State_Response::Intelligence_State_Response(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_Timer *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_Timer *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Timer *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Timer>);
    protobuf::Intelligence_State_Timer::Intelligence_State_Timer(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_Timer *)operator new();
    protobuf::Intelligence_State_Timer::Intelligence_State_Timer(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41CE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40269C9ABCLL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>);
    protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Intelligence_State_ExecutionState_Frame_ResponseState(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *)operator new();
    protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::Intelligence_State_ExecutionState_Frame_ResponseState(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40E23D33CELL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState_Frame *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_ExecutionState_Frame *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState_Frame *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame>);
    protobuf::Intelligence_State_ExecutionState_Frame::Intelligence_State_ExecutionState_Frame(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState_Frame *)operator new();
    protobuf::Intelligence_State_ExecutionState_Frame::Intelligence_State_ExecutionState_Frame(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C4050885234);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State_ExecutionState *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State_ExecutionState *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState>);
    protobuf::Intelligence_State_ExecutionState::Intelligence_State_ExecutionState(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State_ExecutionState *)operator new();
    protobuf::Intelligence_State_ExecutionState::Intelligence_State_ExecutionState(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40870AC4B2);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_State *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_State *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_State *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xF0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State>);
    protobuf::Intelligence_State::Intelligence_State(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_State *)operator new();
    protobuf::Intelligence_State::Intelligence_State(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF41F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40AD20B86DLL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Condition_ConditionEntry *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Condition_ConditionEntry *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition_ConditionEntry>);
    protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Condition_ConditionEntry *)operator new();
    protobuf::Intelligence_Condition_ConditionEntry::Intelligence_Condition_ConditionEntry(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF42028(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40E36F92F9);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Condition *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence_Condition *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence_Condition *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition>);
    protobuf::Intelligence_Condition::Intelligence_Condition(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence_Condition *)operator new();
    protobuf::Intelligence_Condition::Intelligence_Condition(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF420D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

protobuf::Intelligence *google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence>(google::protobuf::internal::ArenaImpl *this)
{
  protobuf::Intelligence *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (protobuf::Intelligence *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x230uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::Intelligence>);
    protobuf::Intelligence::Intelligence(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (protobuf::Intelligence *)operator new();
    protobuf::Intelligence::Intelligence(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_22AF42178(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10A1C4031AC1C0ELL);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_Meta *protobuf::Intelligence_Meta::New(protobuf::Intelligence_Meta *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(0);
}

protobuf::Intelligence_Meta *protobuf::Intelligence_Meta::New(protobuf::Intelligence_Meta *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(a2);
}

uint64_t protobuf::Intelligence_Meta::GetCachedSize(protobuf::Intelligence_Meta *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::New(protobuf::Intelligence_KeyValueParameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(0);
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::New(protobuf::Intelligence_KeyValueParameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(a2);
}

uint64_t protobuf::Intelligence_KeyValueParameter::GetCachedSize(protobuf::Intelligence_KeyValueParameter *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Undo *protobuf::Intelligence_Undo::New(protobuf::Intelligence_Undo *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Undo>(0);
}

protobuf::Intelligence_Undo *protobuf::Intelligence_Undo::New(protobuf::Intelligence_Undo *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Undo>(a2);
}

uint64_t protobuf::Intelligence_Undo::GetCachedSize(protobuf::Intelligence_Undo *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_DialogResponse *protobuf::Intelligence_DialogResponse::New(protobuf::Intelligence_DialogResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(0);
}

protobuf::Intelligence_DialogResponse *protobuf::Intelligence_DialogResponse::New(protobuf::Intelligence_DialogResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(a2);
}

uint64_t protobuf::Intelligence_DialogResponse::GetCachedSize(protobuf::Intelligence_DialogResponse *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_BehaviorResponse *protobuf::Intelligence_BehaviorResponse::New(protobuf::Intelligence_BehaviorResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(0);
}

protobuf::Intelligence_BehaviorResponse *protobuf::Intelligence_BehaviorResponse::New(protobuf::Intelligence_BehaviorResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(a2);
}

uint64_t protobuf::Intelligence_BehaviorResponse::GetCachedSize(protobuf::Intelligence_BehaviorResponse *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_ReferenceResponse *protobuf::Intelligence_ReferenceResponse::New(protobuf::Intelligence_ReferenceResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(0);
}

protobuf::Intelligence_ReferenceResponse *protobuf::Intelligence_ReferenceResponse::New(protobuf::Intelligence_ReferenceResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(a2);
}

uint64_t protobuf::Intelligence_ReferenceResponse::GetCachedSize(protobuf::Intelligence_ReferenceResponse *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_ResponseGroup *protobuf::Intelligence_ResponseGroup::New(protobuf::Intelligence_ResponseGroup *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(0);
}

protobuf::Intelligence_ResponseGroup *protobuf::Intelligence_ResponseGroup::New(protobuf::Intelligence_ResponseGroup *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(a2);
}

uint64_t protobuf::Intelligence_ResponseGroup::GetCachedSize(protobuf::Intelligence_ResponseGroup *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup_Interjection *protobuf::Intelligence_InputGroup_Interjection::New(protobuf::Intelligence_InputGroup_Interjection *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(0);
}

protobuf::Intelligence_InputGroup_Interjection *protobuf::Intelligence_InputGroup_Interjection::New(protobuf::Intelligence_InputGroup_Interjection *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Interjection>(a2);
}

uint64_t protobuf::Intelligence_InputGroup_Interjection::GetCachedSize(protobuf::Intelligence_InputGroup_Interjection *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup_Intent *protobuf::Intelligence_InputGroup_Intent::New(protobuf::Intelligence_InputGroup_Intent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(0);
}

protobuf::Intelligence_InputGroup_Intent *protobuf::Intelligence_InputGroup_Intent::New(protobuf::Intelligence_InputGroup_Intent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(a2);
}

uint64_t protobuf::Intelligence_InputGroup_Intent::GetCachedSize(protobuf::Intelligence_InputGroup_Intent *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup_Event *protobuf::Intelligence_InputGroup_Event::New(protobuf::Intelligence_InputGroup_Event *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(0);
}

protobuf::Intelligence_InputGroup_Event *protobuf::Intelligence_InputGroup_Event::New(protobuf::Intelligence_InputGroup_Event *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(a2);
}

uint64_t protobuf::Intelligence_InputGroup_Event::GetCachedSize(protobuf::Intelligence_InputGroup_Event *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup_Fallback *protobuf::Intelligence_InputGroup_Fallback::New(protobuf::Intelligence_InputGroup_Fallback *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(0);
}

protobuf::Intelligence_InputGroup_Fallback *protobuf::Intelligence_InputGroup_Fallback::New(protobuf::Intelligence_InputGroup_Fallback *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(a2);
}

uint64_t protobuf::Intelligence_InputGroup_Fallback::GetCachedSize(protobuf::Intelligence_InputGroup_Fallback *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup_LegacyEvent *protobuf::Intelligence_InputGroup_LegacyEvent::New(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(0);
}

protobuf::Intelligence_InputGroup_LegacyEvent *protobuf::Intelligence_InputGroup_LegacyEvent::New(protobuf::Intelligence_InputGroup_LegacyEvent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(a2);
}

uint64_t protobuf::Intelligence_InputGroup_LegacyEvent::GetCachedSize(protobuf::Intelligence_InputGroup_LegacyEvent *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_InputGroup *protobuf::Intelligence_InputGroup::New(protobuf::Intelligence_InputGroup *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(0);
}

protobuf::Intelligence_InputGroup *protobuf::Intelligence_InputGroup::New(protobuf::Intelligence_InputGroup *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(a2);
}

uint64_t protobuf::Intelligence_InputGroup::GetCachedSize(protobuf::Intelligence_InputGroup *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Activity *protobuf::Intelligence_Activity::New(protobuf::Intelligence_Activity *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(0);
}

protobuf::Intelligence_Activity *protobuf::Intelligence_Activity::New(protobuf::Intelligence_Activity *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(a2);
}

uint64_t protobuf::Intelligence_Activity::GetCachedSize(protobuf::Intelligence_Activity *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Utterance *protobuf::Intelligence_Utterance::New(protobuf::Intelligence_Utterance *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(0);
}

protobuf::Intelligence_Utterance *protobuf::Intelligence_Utterance::New(protobuf::Intelligence_Utterance *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(a2);
}

uint64_t protobuf::Intelligence_Utterance::GetCachedSize(protobuf::Intelligence_Utterance *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Character *protobuf::Intelligence_Character::New(protobuf::Intelligence_Character *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(0);
}

protobuf::Intelligence_Character *protobuf::Intelligence_Character::New(protobuf::Intelligence_Character *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(a2);
}

uint64_t protobuf::Intelligence_Character::GetCachedSize(protobuf::Intelligence_Character *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Counter *protobuf::Intelligence_Counter::New(protobuf::Intelligence_Counter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(0);
}

protobuf::Intelligence_Counter *protobuf::Intelligence_Counter::New(protobuf::Intelligence_Counter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(a2);
}

uint64_t protobuf::Intelligence_Counter::GetCachedSize(protobuf::Intelligence_Counter *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Flag *protobuf::Intelligence_Flag::New(protobuf::Intelligence_Flag *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(0);
}

protobuf::Intelligence_Flag *protobuf::Intelligence_Flag::New(protobuf::Intelligence_Flag *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(a2);
}

uint64_t protobuf::Intelligence_Flag::GetCachedSize(protobuf::Intelligence_Flag *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Label *protobuf::Intelligence_Label::New(protobuf::Intelligence_Label *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(0);
}

protobuf::Intelligence_Label *protobuf::Intelligence_Label::New(protobuf::Intelligence_Label *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(a2);
}

uint64_t protobuf::Intelligence_Label::GetCachedSize(protobuf::Intelligence_Label *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_List *protobuf::Intelligence_List::New(protobuf::Intelligence_List *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(0);
}

protobuf::Intelligence_List *protobuf::Intelligence_List::New(protobuf::Intelligence_List *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(a2);
}

uint64_t protobuf::Intelligence_List::GetCachedSize(protobuf::Intelligence_List *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Variable *protobuf::Intelligence_Variable::New(protobuf::Intelligence_Variable *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(0);
}

protobuf::Intelligence_Variable *protobuf::Intelligence_Variable::New(protobuf::Intelligence_Variable *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(a2);
}

uint64_t protobuf::Intelligence_Variable::GetCachedSize(protobuf::Intelligence_Variable *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Start *protobuf::Intelligence_Start::New(protobuf::Intelligence_Start *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(0);
}

protobuf::Intelligence_Start *protobuf::Intelligence_Start::New(protobuf::Intelligence_Start *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Start>(a2);
}

uint64_t protobuf::Intelligence_Start::GetCachedSize(protobuf::Intelligence_Start *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_NLParameters *protobuf::Intelligence_NLParameters::New(protobuf::Intelligence_NLParameters *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(0);
}

protobuf::Intelligence_NLParameters *protobuf::Intelligence_NLParameters::New(protobuf::Intelligence_NLParameters *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(a2);
}

uint64_t protobuf::Intelligence_NLParameters::GetCachedSize(protobuf::Intelligence_NLParameters *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Event *protobuf::Intelligence_Event::New(protobuf::Intelligence_Event *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(0);
}

protobuf::Intelligence_Event *protobuf::Intelligence_Event::New(protobuf::Intelligence_Event *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(a2);
}

uint64_t protobuf::Intelligence_Event::GetCachedSize(protobuf::Intelligence_Event *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Intent *protobuf::Intelligence_Intent::New(protobuf::Intelligence_Intent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(0);
}

protobuf::Intelligence_Intent *protobuf::Intelligence_Intent::New(protobuf::Intelligence_Intent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(a2);
}

uint64_t protobuf::Intelligence_Intent::GetCachedSize(protobuf::Intelligence_Intent *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_Memory_Value *protobuf::Intelligence_State_Memory_Value::New(protobuf::Intelligence_State_Memory_Value *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(0);
}

protobuf::Intelligence_State_Memory_Value *protobuf::Intelligence_State_Memory_Value::New(protobuf::Intelligence_State_Memory_Value *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(a2);
}

uint64_t protobuf::Intelligence_State_Memory_Value::GetCachedSize(protobuf::Intelligence_State_Memory_Value *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_Memory *protobuf::Intelligence_State_Memory::New(protobuf::Intelligence_State_Memory *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(0);
}

protobuf::Intelligence_State_Memory *protobuf::Intelligence_State_Memory::New(protobuf::Intelligence_State_Memory *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(a2);
}

uint64_t protobuf::Intelligence_State_Memory::GetCachedSize(protobuf::Intelligence_State_Memory *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_InputGroup *protobuf::Intelligence_State_InputGroup::New(protobuf::Intelligence_State_InputGroup *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(0);
}

protobuf::Intelligence_State_InputGroup *protobuf::Intelligence_State_InputGroup::New(protobuf::Intelligence_State_InputGroup *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(a2);
}

uint64_t protobuf::Intelligence_State_InputGroup::GetCachedSize(protobuf::Intelligence_State_InputGroup *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_Event *protobuf::Intelligence_State_Event::New(protobuf::Intelligence_State_Event *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(0);
}

protobuf::Intelligence_State_Event *protobuf::Intelligence_State_Event::New(protobuf::Intelligence_State_Event *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(a2);
}

uint64_t protobuf::Intelligence_State_Event::GetCachedSize(protobuf::Intelligence_State_Event *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_Response *protobuf::Intelligence_State_Response::New(protobuf::Intelligence_State_Response *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(0);
}

protobuf::Intelligence_State_Response *protobuf::Intelligence_State_Response::New(protobuf::Intelligence_State_Response *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(a2);
}

uint64_t protobuf::Intelligence_State_Response::GetCachedSize(protobuf::Intelligence_State_Response *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_Timer *protobuf::Intelligence_State_Timer::New(protobuf::Intelligence_State_Timer *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(0);
}

protobuf::Intelligence_State_Timer *protobuf::Intelligence_State_Timer::New(protobuf::Intelligence_State_Timer *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(a2);
}

uint64_t protobuf::Intelligence_State_Timer::GetCachedSize(protobuf::Intelligence_State_Timer *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::New(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(0);
}

protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::New(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(a2);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::GetCachedSize(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_ExecutionState_Frame *protobuf::Intelligence_State_ExecutionState_Frame::New(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(0);
}

protobuf::Intelligence_State_ExecutionState_Frame *protobuf::Intelligence_State_ExecutionState_Frame::New(protobuf::Intelligence_State_ExecutionState_Frame *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(a2);
}

uint64_t protobuf::Intelligence_State_ExecutionState_Frame::GetCachedSize(protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State_ExecutionState *protobuf::Intelligence_State_ExecutionState::New(protobuf::Intelligence_State_ExecutionState *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(0);
}

protobuf::Intelligence_State_ExecutionState *protobuf::Intelligence_State_ExecutionState::New(protobuf::Intelligence_State_ExecutionState *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(a2);
}

uint64_t protobuf::Intelligence_State_ExecutionState::GetCachedSize(protobuf::Intelligence_State_ExecutionState *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_State *protobuf::Intelligence_State::New(protobuf::Intelligence_State *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State>(0);
}

protobuf::Intelligence_State *protobuf::Intelligence_State::New(protobuf::Intelligence_State *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State>(a2);
}

uint64_t protobuf::Intelligence_State::GetCachedSize(protobuf::Intelligence_State *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Condition_ConditionEntry *protobuf::Intelligence_Condition_ConditionEntry::New(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(0);
}

protobuf::Intelligence_Condition_ConditionEntry *protobuf::Intelligence_Condition_ConditionEntry::New(protobuf::Intelligence_Condition_ConditionEntry *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(a2);
}

uint64_t protobuf::Intelligence_Condition_ConditionEntry::GetCachedSize(protobuf::Intelligence_Condition_ConditionEntry *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence_Condition *protobuf::Intelligence_Condition::New(protobuf::Intelligence_Condition *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(0);
}

protobuf::Intelligence_Condition *protobuf::Intelligence_Condition::New(protobuf::Intelligence_Condition *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(a2);
}

uint64_t protobuf::Intelligence_Condition::GetCachedSize(protobuf::Intelligence_Condition *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::Intelligence *protobuf::Intelligence::New(protobuf::Intelligence *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence>(0);
}

protobuf::Intelligence *protobuf::Intelligence::New(protobuf::Intelligence *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence>(a2);
}

uint64_t protobuf::Intelligence::GetCachedSize(protobuf::Intelligence *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t *google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24);
    if (v3 && v4 == 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      MEMORY[0x22E2E9CCC](v3, 0x1032C402ED93987);
    }
  }
  *a1 = 0;
  return a1;
}

void google::protobuf::internal::ArenaStringPtr::CreateInstance(std::string **a1, google::protobuf::internal::ArenaImpl *this, __int128 *a3)
{
  std::string *AlignedAndAddCleanup;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a3)
  {
    if (this)
      goto LABEL_3;
LABEL_8:
    AlignedAndAddCleanup = (std::string *)operator new();
    v7 = AlignedAndAddCleanup;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = *a3;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/arenastring.h", 370);
  v9 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: initial_value != NULL: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  if (!this)
    goto LABEL_8;
LABEL_3:
  if (*((_QWORD *)this + 14))
  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  v7 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v8 = *a3;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v8;
LABEL_11:
  *a1 = v7;
}

void sub_22AF426BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF427B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF4288C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF42F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF432DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF433B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF4364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF43804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22AF438E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_InputGroup_Event **v3;
  protobuf::Intelligence_InputGroup_Event *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_Event **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_Event::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_InputGroup_Fallback **v3;
  protobuf::Intelligence_InputGroup_Fallback *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_Fallback **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_Fallback::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_InputGroup_LegacyEvent **v3;
  protobuf::Intelligence_InputGroup_LegacyEvent *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_LegacyEvent **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_LegacyEvent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_NLParameters **v3;
  protobuf::Intelligence_NLParameters *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_NLParameters **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_NLParameters::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_State_Memory **v3;
  protobuf::Intelligence_State_Memory *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_State_Memory **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_State_Memory::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  protobuf::Intelligence_Condition_ConditionEntry **v3;
  protobuf::Intelligence_Condition_ConditionEntry *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (protobuf::Intelligence_Condition_ConditionEntry **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Condition_ConditionEntry::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22AF43CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(uint64_t *a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if ((*a1 & 1) != 0)
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  else
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::string::append(v3, v5, v6);
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(google::protobuf::internal::InternalMetadataWithArenaLite *this)
{
  unint64_t v1;

  if ((*(_QWORD *)this & 1) != 0)
    v1 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFELL;
  else
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)this);
  if (*(char *)(v1 + 23) < 0)
  {
    **(_BYTE **)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v1 = 0;
    *(_BYTE *)(v1 + 23) = 0;
  }
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)*((_QWORD *)this + 2);
  if (v2 && !*(_QWORD *)this)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)*((_QWORD *)this + 2);
    }
    operator delete(v2);
  }
  *((_QWORD *)this + 2) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase((google::protobuf::internal::ArenaImpl **)this);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_InputGroup_Intent **v13;
  protobuf::Intelligence_InputGroup_Intent **v14;
  protobuf::Intelligence_InputGroup_Intent *v15;
  protobuf::Intelligence_InputGroup_Intent *v16;
  protobuf::Intelligence_InputGroup_Intent *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup_Intent **v21;
  protobuf::Intelligence_InputGroup_Intent **v22;
  protobuf::Intelligence_InputGroup_Intent *v23;
  protobuf::Intelligence_InputGroup_Intent *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Intent **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Intent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Intent **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Intent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF43F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(protobuf::Intelligence_InputGroup_Intent *a1, protobuf::Intelligence_InputGroup_Intent *this)
{
  protobuf::Intelligence_InputGroup_Intent::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_InputGroup_Fallback **v13;
  protobuf::Intelligence_InputGroup_Fallback **v14;
  protobuf::Intelligence_InputGroup_Fallback *v15;
  protobuf::Intelligence_InputGroup_Fallback *v16;
  protobuf::Intelligence_InputGroup_Fallback *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup_Fallback **v21;
  protobuf::Intelligence_InputGroup_Fallback **v22;
  protobuf::Intelligence_InputGroup_Fallback *v23;
  protobuf::Intelligence_InputGroup_Fallback *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Fallback **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Fallback **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Fallback **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Fallback **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF440EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(protobuf::Intelligence_InputGroup_Fallback *a1, protobuf::Intelligence_InputGroup_Fallback *this)
{
  protobuf::Intelligence_InputGroup_Fallback::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const protobuf::Intelligence_InputGroup_LegacyEvent **v13;
  protobuf::Intelligence_InputGroup_LegacyEvent **v14;
  const protobuf::Intelligence_InputGroup_LegacyEvent *v15;
  const protobuf::Intelligence_InputGroup_LegacyEvent *v16;
  protobuf::Intelligence_InputGroup_LegacyEvent *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup_LegacyEvent **v21;
  const protobuf::Intelligence_InputGroup_LegacyEvent **v22;
  const protobuf::Intelligence_InputGroup_LegacyEvent *v23;
  protobuf::Intelligence_InputGroup_LegacyEvent *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_InputGroup_LegacyEvent **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_LegacyEvent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_LegacyEvent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_LegacyEvent **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_InputGroup_LegacyEvent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_LegacyEvent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_InputGroup_Event **v13;
  protobuf::Intelligence_InputGroup_Event **v14;
  protobuf::Intelligence_InputGroup_Event *v15;
  protobuf::Intelligence_InputGroup_Event *v16;
  protobuf::Intelligence_InputGroup_Event *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup_Event **v21;
  protobuf::Intelligence_InputGroup_Event **v22;
  protobuf::Intelligence_InputGroup_Event *v23;
  protobuf::Intelligence_InputGroup_Event *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF443D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(protobuf::Intelligence_InputGroup_Event *a1, protobuf::Intelligence_InputGroup_Event *this)
{
  protobuf::Intelligence_InputGroup_Event::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const protobuf::Intelligence_NLParameters **v13;
  protobuf::Intelligence_NLParameters **v14;
  const protobuf::Intelligence_NLParameters *v15;
  const protobuf::Intelligence_NLParameters *v16;
  protobuf::Intelligence_NLParameters *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_NLParameters **v21;
  const protobuf::Intelligence_NLParameters **v22;
  const protobuf::Intelligence_NLParameters *v23;
  protobuf::Intelligence_NLParameters *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_NLParameters **)(v6 + 8);
      v14 = (protobuf::Intelligence_NLParameters **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_NLParameters>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_NLParameters **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_NLParameters **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_NLParameters>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v13;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v14;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v15;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v16;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v21;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **v22;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v23;
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF446BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a1, protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
  protobuf::Intelligence_State_ExecutionState_Frame_ResponseState::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_ExecutionState_Frame **v13;
  protobuf::Intelligence_State_ExecutionState_Frame **v14;
  protobuf::Intelligence_State_ExecutionState_Frame *v15;
  protobuf::Intelligence_State_ExecutionState_Frame *v16;
  protobuf::Intelligence_State_ExecutionState_Frame *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_ExecutionState_Frame **v21;
  protobuf::Intelligence_State_ExecutionState_Frame **v22;
  protobuf::Intelligence_State_ExecutionState_Frame *v23;
  protobuf::Intelligence_State_ExecutionState_Frame *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState_Frame **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState_Frame **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState_Frame **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState_Frame **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(protobuf::Intelligence_State_ExecutionState_Frame *a1, protobuf::Intelligence_State_ExecutionState_Frame *this)
{
  protobuf::Intelligence_State_ExecutionState_Frame::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_Memory **v13;
  protobuf::Intelligence_State_Memory **v14;
  protobuf::Intelligence_State_Memory *v15;
  protobuf::Intelligence_State_Memory *v16;
  protobuf::Intelligence_State_Memory *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_Memory **v21;
  protobuf::Intelligence_State_Memory **v22;
  protobuf::Intelligence_State_Memory *v23;
  protobuf::Intelligence_State_Memory *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Memory **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Memory **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Memory **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Memory **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF449B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(protobuf::Intelligence_State_Memory *a1, protobuf::Intelligence_State_Memory *this)
{
  protobuf::Intelligence_State_Memory::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_Response **v13;
  protobuf::Intelligence_State_Response **v14;
  protobuf::Intelligence_State_Response *v15;
  protobuf::Intelligence_State_Response *v16;
  protobuf::Intelligence_State_Response *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_Response **v21;
  protobuf::Intelligence_State_Response **v22;
  protobuf::Intelligence_State_Response *v23;
  protobuf::Intelligence_State_Response *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Response **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Response **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Response **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Response **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(protobuf::Intelligence_State_Response *a1, protobuf::Intelligence_State_Response *this)
{
  protobuf::Intelligence_State_Response::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_ExecutionState **v13;
  protobuf::Intelligence_State_ExecutionState **v14;
  protobuf::Intelligence_State_ExecutionState *v15;
  protobuf::Intelligence_State_ExecutionState *v16;
  protobuf::Intelligence_State_ExecutionState *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_ExecutionState **v21;
  protobuf::Intelligence_State_ExecutionState **v22;
  protobuf::Intelligence_State_ExecutionState *v23;
  protobuf::Intelligence_State_ExecutionState *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(protobuf::Intelligence_State_ExecutionState *a1, protobuf::Intelligence_State_ExecutionState *this)
{
  protobuf::Intelligence_State_ExecutionState::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_InputGroup **v13;
  protobuf::Intelligence_State_InputGroup **v14;
  protobuf::Intelligence_State_InputGroup *v15;
  protobuf::Intelligence_State_InputGroup *v16;
  protobuf::Intelligence_State_InputGroup *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_InputGroup **v21;
  protobuf::Intelligence_State_InputGroup **v22;
  protobuf::Intelligence_State_InputGroup *v23;
  protobuf::Intelligence_State_InputGroup *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_InputGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_InputGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_InputGroup **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_InputGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(protobuf::Intelligence_State_InputGroup *a1, protobuf::Intelligence_State_InputGroup *this)
{
  protobuf::Intelligence_State_InputGroup::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Timer>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_Timer **v13;
  protobuf::Intelligence_State_Timer **v14;
  protobuf::Intelligence_State_Timer *v15;
  protobuf::Intelligence_State_Timer *v16;
  protobuf::Intelligence_State_Timer *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_Timer **v21;
  protobuf::Intelligence_State_Timer **v22;
  protobuf::Intelligence_State_Timer *v23;
  protobuf::Intelligence_State_Timer *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Timer **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Timer **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Timer **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Timer **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF44FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(protobuf::Intelligence_State_Timer *a1, protobuf::Intelligence_State_Timer *this)
{
  protobuf::Intelligence_State_Timer::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_State_Event **v13;
  protobuf::Intelligence_State_Event **v14;
  protobuf::Intelligence_State_Event *v15;
  protobuf::Intelligence_State_Event *v16;
  protobuf::Intelligence_State_Event *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_State_Event **v21;
  protobuf::Intelligence_State_Event **v22;
  protobuf::Intelligence_State_Event *v23;
  protobuf::Intelligence_State_Event *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF45120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(protobuf::Intelligence_State_Event *a1, protobuf::Intelligence_State_Event *this)
{
  protobuf::Intelligence_State_Event::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Condition_ConditionEntry **v13;
  protobuf::Intelligence_Condition_ConditionEntry **v14;
  protobuf::Intelligence_Condition_ConditionEntry *v15;
  protobuf::Intelligence_Condition_ConditionEntry *v16;
  protobuf::Intelligence_Condition_ConditionEntry *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Condition_ConditionEntry **v21;
  protobuf::Intelligence_Condition_ConditionEntry **v22;
  protobuf::Intelligence_Condition_ConditionEntry *v23;
  protobuf::Intelligence_Condition_ConditionEntry *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Condition_ConditionEntry **)(v6 + 8);
      v14 = (protobuf::Intelligence_Condition_ConditionEntry **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Condition_ConditionEntry **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Condition_ConditionEntry **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF4529C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(protobuf::Intelligence_Condition_ConditionEntry *a1, protobuf::Intelligence_Condition_ConditionEntry *this)
{
  return protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Meta **v13;
  protobuf::Intelligence_Meta **v14;
  protobuf::Intelligence_Meta *v15;
  protobuf::Intelligence_Meta *v16;
  protobuf::Intelligence_Meta *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Meta **v21;
  protobuf::Intelligence_Meta **v22;
  protobuf::Intelligence_Meta *v23;
  protobuf::Intelligence_Meta *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Meta **)(v6 + 8);
      v14 = (protobuf::Intelligence_Meta **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Meta **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Meta **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF456C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(protobuf::Intelligence_Meta *a1, protobuf::Intelligence_Meta *this)
{
  protobuf::Intelligence_Meta::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_DialogResponse **v13;
  protobuf::Intelligence_DialogResponse **v14;
  protobuf::Intelligence_DialogResponse *v15;
  protobuf::Intelligence_DialogResponse *v16;
  protobuf::Intelligence_DialogResponse *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_DialogResponse **v21;
  protobuf::Intelligence_DialogResponse **v22;
  protobuf::Intelligence_DialogResponse *v23;
  protobuf::Intelligence_DialogResponse *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_DialogResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_DialogResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_DialogResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_DialogResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF4583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(protobuf::Intelligence_DialogResponse *a1, protobuf::Intelligence_DialogResponse *this)
{
  protobuf::Intelligence_DialogResponse::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_BehaviorResponse **v13;
  protobuf::Intelligence_BehaviorResponse **v14;
  protobuf::Intelligence_BehaviorResponse *v15;
  protobuf::Intelligence_BehaviorResponse *v16;
  protobuf::Intelligence_BehaviorResponse *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_BehaviorResponse **v21;
  protobuf::Intelligence_BehaviorResponse **v22;
  protobuf::Intelligence_BehaviorResponse *v23;
  protobuf::Intelligence_BehaviorResponse *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_BehaviorResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_BehaviorResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_BehaviorResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_BehaviorResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF459B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(protobuf::Intelligence_BehaviorResponse *a1, protobuf::Intelligence_BehaviorResponse *this)
{
  protobuf::Intelligence_BehaviorResponse::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_ReferenceResponse **v13;
  protobuf::Intelligence_ReferenceResponse **v14;
  protobuf::Intelligence_ReferenceResponse *v15;
  protobuf::Intelligence_ReferenceResponse *v16;
  protobuf::Intelligence_ReferenceResponse *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_ReferenceResponse **v21;
  protobuf::Intelligence_ReferenceResponse **v22;
  protobuf::Intelligence_ReferenceResponse *v23;
  protobuf::Intelligence_ReferenceResponse *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_ReferenceResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_ReferenceResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_ReferenceResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_ReferenceResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF45B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(protobuf::Intelligence_ReferenceResponse *a1, protobuf::Intelligence_ReferenceResponse *this)
{
  protobuf::Intelligence_ReferenceResponse::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_ResponseGroup **v13;
  protobuf::Intelligence_ResponseGroup **v14;
  protobuf::Intelligence_ResponseGroup *v15;
  protobuf::Intelligence_ResponseGroup *v16;
  protobuf::Intelligence_ResponseGroup *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_ResponseGroup **v21;
  protobuf::Intelligence_ResponseGroup **v22;
  protobuf::Intelligence_ResponseGroup *v23;
  protobuf::Intelligence_ResponseGroup *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_ResponseGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_ResponseGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_ResponseGroup **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_ResponseGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF45CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(protobuf::Intelligence_ResponseGroup *a1, protobuf::Intelligence_ResponseGroup *this)
{
  protobuf::Intelligence_ResponseGroup::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const protobuf::Intelligence_InputGroup **v13;
  protobuf::Intelligence_InputGroup **v14;
  const protobuf::Intelligence_InputGroup *v15;
  const protobuf::Intelligence_InputGroup *v16;
  protobuf::Intelligence_InputGroup *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_InputGroup **v21;
  const protobuf::Intelligence_InputGroup **v22;
  const protobuf::Intelligence_InputGroup *v23;
  protobuf::Intelligence_InputGroup *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_InputGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_InputGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF45E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Activity **v13;
  protobuf::Intelligence_Activity **v14;
  protobuf::Intelligence_Activity *v15;
  protobuf::Intelligence_Activity *v16;
  protobuf::Intelligence_Activity *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Activity **v21;
  protobuf::Intelligence_Activity **v22;
  protobuf::Intelligence_Activity *v23;
  protobuf::Intelligence_Activity *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Activity **)(v6 + 8);
      v14 = (protobuf::Intelligence_Activity **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Activity **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Activity **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF45F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(protobuf::Intelligence_Activity *a1, protobuf::Intelligence_Activity *this)
{
  protobuf::Intelligence_Activity::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Utterance **v13;
  protobuf::Intelligence_Utterance **v14;
  protobuf::Intelligence_Utterance *v15;
  protobuf::Intelligence_Utterance *v16;
  protobuf::Intelligence_Utterance *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Utterance **v21;
  protobuf::Intelligence_Utterance **v22;
  protobuf::Intelligence_Utterance *v23;
  protobuf::Intelligence_Utterance *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Utterance **)(v6 + 8);
      v14 = (protobuf::Intelligence_Utterance **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Utterance **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Utterance **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(protobuf::Intelligence_Utterance *a1, protobuf::Intelligence_Utterance *this)
{
  protobuf::Intelligence_Utterance::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Character **v13;
  protobuf::Intelligence_Character **v14;
  protobuf::Intelligence_Character *v15;
  protobuf::Intelligence_Character *v16;
  protobuf::Intelligence_Character *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Character **v21;
  protobuf::Intelligence_Character **v22;
  protobuf::Intelligence_Character *v23;
  protobuf::Intelligence_Character *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Character **)(v6 + 8);
      v14 = (protobuf::Intelligence_Character **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Character **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Character **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(protobuf::Intelligence_Character *a1, protobuf::Intelligence_Character *this)
{
  protobuf::Intelligence_Character::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Intent **v13;
  protobuf::Intelligence_Intent **v14;
  protobuf::Intelligence_Intent *v15;
  protobuf::Intelligence_Intent *v16;
  protobuf::Intelligence_Intent *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Intent **v21;
  protobuf::Intelligence_Intent **v22;
  protobuf::Intelligence_Intent *v23;
  protobuf::Intelligence_Intent *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Intent **)(v6 + 8);
      v14 = (protobuf::Intelligence_Intent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Intent **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Intent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF4640C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(protobuf::Intelligence_Intent *a1, protobuf::Intelligence_Intent *this)
{
  protobuf::Intelligence_Intent::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Condition **v13;
  protobuf::Intelligence_Condition **v14;
  protobuf::Intelligence_Condition *v15;
  protobuf::Intelligence_Condition *v16;
  protobuf::Intelligence_Condition *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Condition **v21;
  protobuf::Intelligence_Condition **v22;
  protobuf::Intelligence_Condition *v23;
  protobuf::Intelligence_Condition *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Condition **)(v6 + 8);
      v14 = (protobuf::Intelligence_Condition **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Condition **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Condition **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(protobuf::Intelligence_Condition *a1, protobuf::Intelligence_Condition *this)
{
  protobuf::Intelligence_Condition::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Counter **v13;
  protobuf::Intelligence_Counter **v14;
  protobuf::Intelligence_Counter *v15;
  protobuf::Intelligence_Counter *v16;
  protobuf::Intelligence_Counter *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Counter **v21;
  protobuf::Intelligence_Counter **v22;
  protobuf::Intelligence_Counter *v23;
  protobuf::Intelligence_Counter *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Counter **)(v6 + 8);
      v14 = (protobuf::Intelligence_Counter **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Counter **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Counter **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(protobuf::Intelligence_Counter *a1, protobuf::Intelligence_Counter *this)
{
  protobuf::Intelligence_Counter::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Flag **v13;
  protobuf::Intelligence_Flag **v14;
  protobuf::Intelligence_Flag *v15;
  protobuf::Intelligence_Flag *v16;
  protobuf::Intelligence_Flag *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Flag **v21;
  protobuf::Intelligence_Flag **v22;
  protobuf::Intelligence_Flag *v23;
  protobuf::Intelligence_Flag *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Flag **)(v6 + 8);
      v14 = (protobuf::Intelligence_Flag **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Flag **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Flag **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(protobuf::Intelligence_Flag *a1, protobuf::Intelligence_Flag *this)
{
  protobuf::Intelligence_Flag::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Label **v13;
  protobuf::Intelligence_Label **v14;
  protobuf::Intelligence_Label *v15;
  protobuf::Intelligence_Label *v16;
  protobuf::Intelligence_Label *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Label **v21;
  protobuf::Intelligence_Label **v22;
  protobuf::Intelligence_Label *v23;
  protobuf::Intelligence_Label *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Label **)(v6 + 8);
      v14 = (protobuf::Intelligence_Label **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Label **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Label **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF469FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(protobuf::Intelligence_Label *a1, protobuf::Intelligence_Label *this)
{
  protobuf::Intelligence_Label::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_List **v13;
  protobuf::Intelligence_List **v14;
  protobuf::Intelligence_List *v15;
  protobuf::Intelligence_List *v16;
  protobuf::Intelligence_List *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_List **v21;
  protobuf::Intelligence_List **v22;
  protobuf::Intelligence_List *v23;
  protobuf::Intelligence_List *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_List **)(v6 + 8);
      v14 = (protobuf::Intelligence_List **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_List **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_List **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(protobuf::Intelligence_List *a1, protobuf::Intelligence_List *this)
{
  protobuf::Intelligence_List::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Variable **v13;
  protobuf::Intelligence_Variable **v14;
  protobuf::Intelligence_Variable *v15;
  protobuf::Intelligence_Variable *v16;
  protobuf::Intelligence_Variable *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Variable **v21;
  protobuf::Intelligence_Variable **v22;
  protobuf::Intelligence_Variable *v23;
  protobuf::Intelligence_Variable *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Variable **)(v6 + 8);
      v14 = (protobuf::Intelligence_Variable **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Variable **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Variable **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(protobuf::Intelligence_Variable *a1, protobuf::Intelligence_Variable *this)
{
  protobuf::Intelligence_Variable::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  protobuf::Intelligence_Event **v13;
  protobuf::Intelligence_Event **v14;
  protobuf::Intelligence_Event *v15;
  protobuf::Intelligence_Event *v16;
  protobuf::Intelligence_Event *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  protobuf::Intelligence_Event **v21;
  protobuf::Intelligence_Event **v22;
  protobuf::Intelligence_Event *v23;
  protobuf::Intelligence_Event *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22AF46E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(protobuf::Intelligence_Event *a1, protobuf::Intelligence_Event *this)
{
  protobuf::Intelligence_Event::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Meta>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_KeyValueParameter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Undo>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_DialogResponse>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_BehaviorResponse>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ReferenceResponse>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ResponseGroup>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Interjection>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Intent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Event>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Fallback>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_LegacyEvent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Activity>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Utterance>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Character>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Counter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Flag>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Label>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_List>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Variable>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Start>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_NLParameters>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Event>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Intent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory_Value>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_InputGroup>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Event>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Response>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Timer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition_ConditionEntry>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void siri::intelligence::FunctionHandler::GetAllDescriptions(int64x2_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  const void **v5;
  const void **i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64x2_t v20;
  void **v21;
  std::string v22;
  std::string __p;
  _BYTE v24[24];
  const void **v25;
  const void **v26;
  void **v27;
  int64x2_t v28;
  void **v29;
  int64x2_t *v30;

  siri::intelligence::GetFunctionDefinitions((siri::intelligence *)&v25);
  v3 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v26 - (char *)v25) >> 4));
  if (v26 == v25)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>((uint64_t)v25, v26, v4, 1);
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  v5 = v25;
  for (i = v26; v5 != i; v5 += 10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(v24, 0, sizeof(v24));
    std::string::operator=(&v22, (const std::string *)v5);
    std::string::operator=(&__p, (const std::string *)(v5 + 4));
    if (v24 != (_BYTE *)(v5 + 7))
      std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)v24, (std::string *)v5[7], (std::string *)v5[8], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[8] - (_BYTE *)v5[7]) >> 3));
    v8 = a1->u64[1];
    v7 = a1[1].u64[0];
    if (v8 >= v7)
    {
      v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - a1->i64[0]) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0x38E38E38E38E38ELL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - a1->i64[0]) >> 3);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x1C71C71C71C71C7)
        v13 = 0x38E38E38E38E38ELL;
      else
        v13 = v11;
      v30 = a1 + 1;
      if (v13)
      {
        if (v13 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (void **)operator new(72 * v13);
      }
      else
      {
        v14 = 0;
      }
      v27 = v14;
      v28.i64[0] = (uint64_t)&v14[9 * v10];
      v28.i64[1] = v28.i64[0];
      v29 = &v14[9 * v13];
      std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>((std::string *)v28.i64[0], (__int128 *)&v22);
      v15 = v28.i64[0];
      v9 = v28.i64[1] + 72;
      v28.i64[1] += 72;
      v17 = a1->i64[0];
      v16 = a1->u64[1];
      if (v16 == a1->i64[0])
      {
        v20 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          v18 = *(_OWORD *)(v16 - 72);
          *(_QWORD *)(v15 - 56) = *(_QWORD *)(v16 - 56);
          *(_OWORD *)(v15 - 72) = v18;
          *(_QWORD *)(v16 - 64) = 0;
          *(_QWORD *)(v16 - 56) = 0;
          *(_QWORD *)(v16 - 72) = 0;
          v19 = *(_OWORD *)(v16 - 48);
          *(_QWORD *)(v15 - 32) = *(_QWORD *)(v16 - 32);
          *(_OWORD *)(v15 - 48) = v19;
          *(_QWORD *)(v16 - 40) = 0;
          *(_QWORD *)(v16 - 32) = 0;
          *(_QWORD *)(v16 - 48) = 0;
          *(_QWORD *)(v15 - 24) = 0;
          *(_QWORD *)(v15 - 16) = 0;
          *(_QWORD *)(v15 - 8) = 0;
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v16 - 24);
          *(_QWORD *)(v15 - 8) = *(_QWORD *)(v16 - 8);
          v15 -= 72;
          *(_QWORD *)(v16 - 24) = 0;
          *(_QWORD *)(v16 - 16) = 0;
          *(_QWORD *)(v16 - 8) = 0;
          v16 -= 72;
        }
        while (v16 != v17);
        v20 = *a1;
        v9 = v28.i64[1];
      }
      a1->i64[0] = v15;
      a1->i64[1] = v9;
      v28 = v20;
      v21 = (void **)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v29;
      v29 = v21;
      v27 = (void **)v20.i64[0];
      std::__split_buffer<siri::intelligence::FunctionDescription>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>((std::string *)a1->i64[1], (__int128 *)&v22);
      v9 = v8 + 72;
      a1->i64[1] = v9;
    }
    a1->i64[1] = v9;
    v27 = (void **)v24;
    std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_22AF47358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__split_buffer<siri::intelligence::FunctionDescription>::~__split_buffer((uint64_t)&a25);
  siri::intelligence::FunctionDescription::~FunctionDescription((void **)&__p);
  std::vector<siri::intelligence::FunctionDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a22;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetFunctionDefinitions(siri::intelligence *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  siri::intelligence *v28;
  void *v29[3];
  _QWORD v30[3];
  char v31;
  _QWORD v32[3];
  _QWORD v33[3];
  char v34;
  _QWORD v35[3];
  _QWORD v36[3];
  char v37;
  void *v38[3];
  _QWORD v39[3];
  char v40;
  void *v41[3];
  _QWORD v42[3];
  char v43;
  void *v44[3];
  _QWORD v45[3];
  char v46;
  void *v47[3];
  _QWORD v48[3];
  char v49;
  _QWORD v50[3];
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];
  _QWORD v54[3];
  char v55;
  void *v56[3];
  _QWORD v57[3];
  char v58;
  _QWORD v59[3];
  _QWORD v60[3];
  char v61;
  _QWORD v62[3];
  _QWORD v63[3];
  char v64;
  _QWORD v65[3];
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  _QWORD v69[3];
  char v70;
  _QWORD v71[3];
  _QWORD v72[3];
  char v73;
  _QWORD v74[3];
  _QWORD v75[3];
  char v76;
  void *v77[3];
  _QWORD v78[3];
  char v79;
  void *v80[3];
  _QWORD v81[3];
  char v82;
  _QWORD v83[3];
  _QWORD v84[3];
  char v85;
  _QWORD v86[3];
  _QWORD v87[3];
  char v88;
  _QWORD v89[3];
  _QWORD v90[3];
  char v91;
  _QWORD v92[3];
  _QWORD v93[3];
  char v94;
  _QWORD v95[3];
  _QWORD v96[3];
  char v97;
  _QWORD v98[3];
  _QWORD v99[3];
  char v100;
  _QWORD v101[3];
  _QWORD v102[3];
  char v103;
  _QWORD v104[3];
  _QWORD v105[3];
  char v106;
  _QWORD v107[3];
  _QWORD v108[3];
  char v109;
  _QWORD v110[3];
  _QWORD v111[3];
  char v112;
  _QWORD v113[3];
  _QWORD v114[3];
  char v115;
  _QWORD v116[3];
  _QWORD v117[3];
  char v118;
  _QWORD v119[3];
  _QWORD v120[3];
  char v121;
  _QWORD v122[3];
  _QWORD v123[3];
  char v124;
  void *v125[3];
  _QWORD v126[3];
  char v127;
  void *v128[3];
  _QWORD v129[3];
  char v130;
  void *v131[3];
  _QWORD v132[3];
  char v133;
  void *v134[3];
  _QWORD v135[3];
  char v136;
  siri::intelligence *v137;
  char v138;
  void (*v139)(uint64_t *@<X0>, uint64_t@<X8>);
  _QWORD v140[3];
  _QWORD v141[3];
  _QWORD v142[4];
  _QWORD v143[3];
  _QWORD v144[3];
  _QWORD v145[4];
  _QWORD v146[3];
  _QWORD v147[3];
  _QWORD v148[4];
  _QWORD v149[3];
  _QWORD v150[3];
  _QWORD v151[4];
  _QWORD v152[3];
  _QWORD v153[3];
  _QWORD v154[4];
  _QWORD v155[3];
  _QWORD v156[3];
  _QWORD v157[4];
  _QWORD v158[3];
  _QWORD v159[3];
  _QWORD v160[4];
  _QWORD v161[3];
  _QWORD v162[3];
  _QWORD v163[4];
  _QWORD v164[3];
  _QWORD v165[3];
  _QWORD v166[4];
  _QWORD v167[3];
  _QWORD v168[3];
  _QWORD v169[4];
  _QWORD v170[3];
  _QWORD v171[3];
  _QWORD v172[4];
  _QWORD v173[3];
  _QWORD v174[3];
  _QWORD v175[4];
  _QWORD v176[3];
  _QWORD v177[3];
  _QWORD v178[4];
  _QWORD v179[3];
  _QWORD v180[3];
  _QWORD v181[4];
  _QWORD v182[3];
  _QWORD v183[3];
  _QWORD v184[4];
  _QWORD v185[3];
  _QWORD v186[3];
  _QWORD v187[4];
  _QWORD v188[3];
  _QWORD v189[3];
  _QWORD v190[4];
  _QWORD v191[3];
  _QWORD v192[3];
  _QWORD v193[4];
  _QWORD v194[3];
  _QWORD v195[3];
  _QWORD v196[4];
  _QWORD v197[3];
  _QWORD v198[3];
  _QWORD v199[4];
  _QWORD v200[3];
  _QWORD v201[3];
  _QWORD v202[4];
  _QWORD v203[3];
  _QWORD v204[3];
  _QWORD v205[4];
  _QWORD v206[3];
  _QWORD v207[3];
  _QWORD v208[4];
  _QWORD v209[3];
  _QWORD v210[4];

  v210[3] = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    v28 = this;
    std::string::basic_string[abi:ne180100]<0>(&v137, "abs");
    v139 = siri::intelligence::FunctionAbs;
    std::string::basic_string[abi:ne180100]<0>(v140, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v134, "value");
    std::string::basic_string[abi:ne180100]<0>(v135, siri::intelligence::TYPE_NUMBER[0]);
    v136 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v141, (uint64_t)v134, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v142, "sqrt");
    v142[3] = siri::intelligence::FunctionSqrt;
    std::string::basic_string[abi:ne180100]<0>(v143, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v131, "value");
    std::string::basic_string[abi:ne180100]<0>(v132, siri::intelligence::TYPE_NUMBER[0]);
    v133 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v144, (uint64_t)v131, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v145, "odd");
    v145[3] = siri::intelligence::FunctionOdd;
    std::string::basic_string[abi:ne180100]<0>(v146, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v128, "value");
    std::string::basic_string[abi:ne180100]<0>(v129, siri::intelligence::TYPE_NUMBER[0]);
    v130 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v147, (uint64_t)v128, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v148, "even");
    v148[3] = siri::intelligence::FunctionEven;
    std::string::basic_string[abi:ne180100]<0>(v149, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v125, "value");
    std::string::basic_string[abi:ne180100]<0>(v126, siri::intelligence::TYPE_NUMBER[0]);
    v127 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v150, (uint64_t)v125, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v151, "add");
    v151[3] = siri::intelligence::FunctionAdd;
    std::string::basic_string[abi:ne180100]<0>(v152, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v120, siri::intelligence::TYPE_NUMBER[0]);
    v121 = 1;
    std::string::basic_string[abi:ne180100]<0>(v122, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v123, siri::intelligence::TYPE_NUMBER[0]);
    v124 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v153, (uint64_t)v119, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v154, "subtract");
    v154[3] = siri::intelligence::FunctionSubtract;
    std::string::basic_string[abi:ne180100]<0>(v155, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v113, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v114, siri::intelligence::TYPE_NUMBER[0]);
    v115 = 1;
    std::string::basic_string[abi:ne180100]<0>(v116, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v117, siri::intelligence::TYPE_NUMBER[0]);
    v118 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v156, (uint64_t)v113, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v157, "multiply");
    v157[3] = siri::intelligence::FunctionMultiply;
    std::string::basic_string[abi:ne180100]<0>(v158, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v107, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v108, siri::intelligence::TYPE_NUMBER[0]);
    v109 = 1;
    std::string::basic_string[abi:ne180100]<0>(v110, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v111, siri::intelligence::TYPE_NUMBER[0]);
    v112 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v159, (uint64_t)v107, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v160, "divide");
    v160[3] = siri::intelligence::FunctionDivide;
    std::string::basic_string[abi:ne180100]<0>(v161, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v101, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v102, siri::intelligence::TYPE_NUMBER[0]);
    v103 = 1;
    std::string::basic_string[abi:ne180100]<0>(v104, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v105, siri::intelligence::TYPE_NUMBER[0]);
    v106 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v162, (uint64_t)v101, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v163, "min");
    v163[3] = siri::intelligence::FunctionMin;
    std::string::basic_string[abi:ne180100]<0>(v164, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v95, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v96, siri::intelligence::TYPE_NUMBER[0]);
    v97 = 1;
    std::string::basic_string[abi:ne180100]<0>(v98, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v99, siri::intelligence::TYPE_NUMBER[0]);
    v100 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v165, (uint64_t)v95, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v166, "max");
    v166[3] = siri::intelligence::FunctionMax;
    std::string::basic_string[abi:ne180100]<0>(v167, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v89, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v90, siri::intelligence::TYPE_NUMBER[0]);
    v91 = 1;
    std::string::basic_string[abi:ne180100]<0>(v92, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v93, siri::intelligence::TYPE_NUMBER[0]);
    v94 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v168, (uint64_t)v89, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v169, "randomInt");
    v169[3] = siri::intelligence::FunctionRandomInt;
    std::string::basic_string[abi:ne180100]<0>(v170, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "minValue");
    std::string::basic_string[abi:ne180100]<0>(v84, siri::intelligence::TYPE_NUMBER[0]);
    v85 = 1;
    std::string::basic_string[abi:ne180100]<0>(v86, "maxValue");
    std::string::basic_string[abi:ne180100]<0>(v87, siri::intelligence::TYPE_NUMBER[0]);
    v88 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v171, (uint64_t)v83, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v172, "upper");
    v172[3] = siri::intelligence::FunctionUpper;
    std::string::basic_string[abi:ne180100]<0>(v173, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v80, "string");
    std::string::basic_string[abi:ne180100]<0>(v81, siri::intelligence::TYPE_STRING[0]);
    v82 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v174, (uint64_t)v80, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v175, "lower");
    v175[3] = siri::intelligence::FunctionLower;
    std::string::basic_string[abi:ne180100]<0>(v176, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v77, "string");
    std::string::basic_string[abi:ne180100]<0>(v78, siri::intelligence::TYPE_STRING[0]);
    v79 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v177, (uint64_t)v77, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v178, "startsWith");
    v178[3] = siri::intelligence::FunctionStartsWith;
    std::string::basic_string[abi:ne180100]<0>(v179, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "string");
    std::string::basic_string[abi:ne180100]<0>(v72, siri::intelligence::TYPE_STRING[0]);
    v73 = 1;
    std::string::basic_string[abi:ne180100]<0>(v74, "prefix");
    std::string::basic_string[abi:ne180100]<0>(v75, siri::intelligence::TYPE_STRING[0]);
    v76 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v180, (uint64_t)v71, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v181, "endsWith");
    v181[3] = siri::intelligence::FunctionEndsWith;
    std::string::basic_string[abi:ne180100]<0>(v182, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "string");
    std::string::basic_string[abi:ne180100]<0>(v66, siri::intelligence::TYPE_STRING[0]);
    v67 = 1;
    std::string::basic_string[abi:ne180100]<0>(v68, "suffix");
    std::string::basic_string[abi:ne180100]<0>(v69, siri::intelligence::TYPE_STRING[0]);
    v70 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v183, (uint64_t)v65, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v184, "contains");
    v184[3] = siri::intelligence::FunctionContains;
    std::string::basic_string[abi:ne180100]<0>(v185, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "haystack");
    std::string::basic_string[abi:ne180100]<0>(v60, siri::intelligence::TYPE_UNKNOWN);
    v61 = 1;
    std::string::basic_string[abi:ne180100]<0>(v62, "needle");
    std::string::basic_string[abi:ne180100]<0>(v63, siri::intelligence::TYPE_UNKNOWN);
    v64 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v186, (uint64_t)v59, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v187, "length");
    v187[3] = siri::intelligence::FunctionLength;
    std::string::basic_string[abi:ne180100]<0>(v188, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v56, "variable");
    std::string::basic_string[abi:ne180100]<0>(v57, siri::intelligence::TYPE_UNKNOWN);
    v58 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v189, (uint64_t)v56, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v190, "arrayIndex");
    v190[3] = siri::intelligence::ArrayIndex;
    std::string::basic_string[abi:ne180100]<0>(v191, siri::intelligence::TYPE_UNKNOWN);
    std::string::basic_string[abi:ne180100]<0>(v50, "variable");
    std::string::basic_string[abi:ne180100]<0>(v51, siri::intelligence::TYPE_ARRAY[0]);
    v52 = 1;
    std::string::basic_string[abi:ne180100]<0>(v53, "index");
    std::string::basic_string[abi:ne180100]<0>(v54, siri::intelligence::TYPE_NUMBER[0]);
    v55 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v192, (uint64_t)v50, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v193, "defined");
    v193[3] = siri::intelligence::FunctionDefined;
    std::string::basic_string[abi:ne180100]<0>(v194, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "variable");
    std::string::basic_string[abi:ne180100]<0>(v48, siri::intelligence::TYPE_UNKNOWN);
    v49 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v195, (uint64_t)v47, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v196, "undefined");
    v196[3] = siri::intelligence::FunctionUndefined;
    std::string::basic_string[abi:ne180100]<0>(v197, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v44, "variable");
    std::string::basic_string[abi:ne180100]<0>(v45, siri::intelligence::TYPE_UNKNOWN);
    v46 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v198, (uint64_t)v44, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v199, "empty");
    v199[3] = siri::intelligence::FunctionEmpty;
    std::string::basic_string[abi:ne180100]<0>(v200, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "variable");
    std::string::basic_string[abi:ne180100]<0>(v42, siri::intelligence::TYPE_UNKNOWN);
    v43 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v201, (uint64_t)v41, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v202, "nonempty");
    v202[3] = siri::intelligence::FunctionNonEmpty;
    std::string::basic_string[abi:ne180100]<0>(v203, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v38, "variable");
    std::string::basic_string[abi:ne180100]<0>(v39, siri::intelligence::TYPE_UNKNOWN);
    v40 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v204, (uint64_t)v38, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v205, "directInvocationBuilder");
    v205[3] = siri::intelligence::FunctionDirectInvocationBuilder;
    std::string::basic_string[abi:ne180100]<0>(v206, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v32, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v33, siri::intelligence::TYPE_STRING[0]);
    v34 = 1;
    std::string::basic_string[abi:ne180100]<0>(v35, "userData");
    std::string::basic_string[abi:ne180100]<0>(v36, siri::intelligence::TYPE_DICTIONARY[0]);
    v37 = 0;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v207, (uint64_t)v32, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v208, "visitCount");
    v208[3] = siri::intelligence::FunctionVisitCount;
    std::string::basic_string[abi:ne180100]<0>(v209, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "responseId");
    std::string::basic_string[abi:ne180100]<0>(v30, siri::intelligence::TYPE_STRING[0]);
    v31 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v210, (uint64_t)v29, 1uLL);
    std::vector<siri::intelligence::FunctionDefinition>::vector[abi:ne180100](&v137, 0x18uLL);
    for (i = 1840; i != -80; i -= 80)
      siri::intelligence::FunctionDefinition::~FunctionDefinition((void **)((char *)&v137 + i));
    siri::intelligence::TestParseError::~TestParseError(v29);
    for (j = 7; j != -7; j -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v32[j]);
    siri::intelligence::TestParseError::~TestParseError(v38);
    siri::intelligence::TestParseError::~TestParseError(v41);
    siri::intelligence::TestParseError::~TestParseError(v44);
    siri::intelligence::TestParseError::~TestParseError(v47);
    for (k = 7; k != -7; k -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v50[k]);
    siri::intelligence::TestParseError::~TestParseError(v56);
    for (m = 7; m != -7; m -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v59[m]);
    for (n = 7; n != -7; n -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v65[n]);
    for (ii = 7; ii != -7; ii -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v71[ii]);
    siri::intelligence::TestParseError::~TestParseError(v77);
    siri::intelligence::TestParseError::~TestParseError(v80);
    for (jj = 7; jj != -7; jj -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v83[jj]);
    for (kk = 7; kk != -7; kk -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v89[kk]);
    for (mm = 7; mm != -7; mm -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v95[mm]);
    for (nn = 7; nn != -7; nn -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v101[nn]);
    for (i1 = 7; i1 != -7; i1 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v107[i1]);
    for (i2 = 7; i2 != -7; i2 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v113[i2]);
    for (i3 = 7; i3 != -7; i3 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v119[i3]);
    siri::intelligence::TestParseError::~TestParseError(v125);
    siri::intelligence::TestParseError::~TestParseError(v128);
    siri::intelligence::TestParseError::~TestParseError(v131);
    siri::intelligence::TestParseError::~TestParseError(v134);
    __cxa_atexit((void (*)(void *))std::vector<siri::intelligence::FunctionDefinition>::~vector[abi:ne180100], &qword_253F46360, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_8);
    this = v28;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = qword_253F46360;
  v4 = qword_253F46368;
  v137 = this;
  v138 = 0;
  if (qword_253F46368 != qword_253F46360)
  {
    std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](this, 0xCCCCCCCCCCCCCCCDLL * ((qword_253F46368 - qword_253F46360) >> 4));
    v5 = 0;
    v6 = *((_QWORD *)this + 1);
    do
    {
      v7 = (std::string *)(v6 + v5);
      v8 = (__int128 *)(v3 + v5);
      if (*(char *)(v3 + v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      *(_QWORD *)(v6 + v5 + 24) = *(_QWORD *)(v3 + v5 + 24);
      v10 = (std::string *)(v6 + v5 + 32);
      v11 = (const std::string::value_type **)(v3 + v5 + 32);
      if (*(char *)(v3 + v5 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(v3 + v5 + 40));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(v6 + v5 + 48) = *(_QWORD *)(v3 + v5 + 48);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v13 = v6 + v5;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      v14 = (_QWORD *)(v6 + v5 + 56);
      v14[2] = 0;
      std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(v14, *(_QWORD *)(v3 + v5 + 56), *(_QWORD *)(v3 + v5 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + v5 + 64) - *(_QWORD *)(v3 + v5 + 56)) >> 3));
      v5 += 80;
    }
    while (v3 + v5 != v4);
    *((_QWORD *)this + 1) = v6 + v5;
  }
}

void sub_22AF483BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  uint64_t v59;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;

  for (i = 1840; i != -80; i -= 80)
    siri::intelligence::FunctionDefinition::~FunctionDefinition((void **)(v59 + i));
  siri::intelligence::TestParseError::~TestParseError(&a10);
  for (j = 56; j != -56; j -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a17 + j));
  siri::intelligence::TestParseError::~TestParseError(&a31);
  siri::intelligence::TestParseError::~TestParseError(&a38);
  siri::intelligence::TestParseError::~TestParseError(&a45);
  siri::intelligence::TestParseError::~TestParseError(&a52);
  for (k = 56; k != -56; k -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a59 + k));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x200]);
  for (m = 56; m != -56; m -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x238] + m));
  for (n = 56; n != -56; n -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2A8] + n));
  for (ii = 56; ii != -56; ii -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x318] + ii));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x388]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x3C0]);
  for (jj = 56; jj != -56; jj -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x3F8] + jj));
  for (kk = 56; kk != -56; kk -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x468] + kk));
  for (mm = 56; mm != -56; mm -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x4D8] + mm));
  for (nn = 56; nn != -56; nn -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x548] + nn));
  for (i1 = 56; i1 != -56; i1 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x5B8] + i1));
  for (i2 = 56; i2 != -56; i2 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x628] + i2));
  for (i3 = 56; i3 != -56; i3 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x698] + i3));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x708]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x740]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x778]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x7B0]);
  __cxa_guard_abort(&_MergedGlobals_8);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDescription::~FunctionDescription(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void **std::vector<siri::intelligence::FunctionDefinition>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void siri::intelligence::FunctionHandler::Validate(uint64_t a1, const void **a2, siri::intelligence::ValidationResults *a3, const void **a4, uint64_t *a5, uint64_t a6, int a7)
{
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;
  std::string::size_type v13;
  char *v14;
  char *v15;
  const std::string *v16;
  const std::string *v17;
  std::string::size_type size;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string::size_type v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string::size_type v28;
  size_t v29;
  size_t v30;
  char v31;
  std::string *v32;
  BOOL v33;
  size_t v34;
  std::string *v35;
  const void *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  int v40;
  int IsEquivalentType;
  size_t v42;
  std::string *v43;
  const void *v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v68;
  int v69;
  _BOOL4 v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  int v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  std::string *v96;
  std::string *v97;
  std::string::value_type *v98;
  std::string::value_type *v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  size_t v107;
  std::string *p_p;
  const void *v109;
  int v110;
  const std::string::value_type *v111;
  std::string::size_type v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  int v117;
  const std::string::value_type *v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  size_t v123;
  std::string *v124;
  const void *v125;
  int v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  std::string *v129;
  const void **v130;
  uint64_t v132;
  uint64_t *v133;
  void *v136;
  std::string::size_type v137;
  unsigned __int8 v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::string v147;
  std::string __p;
  std::string v149;
  std::string v150;
  std::string v151;
  char v152;
  std::string v153;
  std::string v154;
  char v155[8];
  _QWORD *v156;

  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v155);
  v130 = a4;
  v10 = (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)v155, a4);
  if (&v156 == v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v123 = *((unsigned __int8 *)a2 + 23);
    else
      v123 = (size_t)a2[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v154, v123 + 25);
    if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v124 = &v154;
    else
      v124 = (std::string *)v154.__r_.__value_.__r.__words[0];
    if (v123)
    {
      if (*((char *)a2 + 23) >= 0)
        v125 = a2;
      else
        v125 = *a2;
      memmove(v124, v125, v123);
    }
    strcpy((char *)v124 + v123, "undefined function name: ");
    v126 = *((char *)v130 + 23);
    if (v126 >= 0)
      v127 = (const std::string::value_type *)v130;
    else
      v127 = (const std::string::value_type *)*v130;
    if (v126 >= 0)
      v128 = *((unsigned __int8 *)v130 + 23);
    else
      v128 = (std::string::size_type)v130[1];
    v129 = std::string::append(&v154, v127, v128);
    v150 = *v129;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_FUNC, (__int128 *)&v150, a7);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v154.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = v10;
    v133 = a5;
    if (*a5)
    {
      v12 = a6 + 312;
      if (!a6)
        v12 = 0;
      v132 = v12;
      std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v154, (const void ***)(*a5 + 72));
      v13 = v154.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v154.__r_.__value_.__l.__data_ != &v154.__r_.__value_.__r.__words[1])
      {
        v14 = "";
        do
        {
          if (*(char *)(v13 + 55) < 0)
            std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)(v13 + 32), *(_QWORD *)(v13 + 40));
          else
            v153 = *(std::string *)(v13 + 32);
          std::string::basic_string[abi:ne180100]<0>(&v150, v14);
          v15 = v14;
          std::string::basic_string[abi:ne180100]<0>(&v151, v14);
          v152 = 1;
          v17 = (const std::string *)v11[14];
          v16 = (const std::string *)v11[15];
          if (v17 != v16)
          {
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
            else
              size = v153.__r_.__value_.__l.__size_;
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = &v153;
            else
              v19 = (std::string *)v153.__r_.__value_.__r.__words[0];
            do
            {
              v20 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
              if ((v20 & 0x80u) == 0)
                v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
              else
                v21 = v17->__r_.__value_.__l.__size_;
              if (v21 == size)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(v17->__r_.__value_.__l.__data_, v19, v17->__r_.__value_.__l.__size_))
                  {
LABEL_30:
                    std::string::operator=(&v150, v17);
                    std::string::operator=(&v151, v17 + 1);
                    v152 = v17[2].__r_.__value_.__s.__data_[0];
                    break;
                  }
                }
                else
                {
                  if (!*((_BYTE *)&v17->__r_.__value_.__s + 23))
                    goto LABEL_30;
                  v22 = 0;
                  while (v17->__r_.__value_.__s.__data_[v22] == v19->__r_.__value_.__s.__data_[v22])
                  {
                    if (v20 == ++v22)
                      goto LABEL_30;
                  }
                }
              }
              v17 = (const std::string *)((char *)v17 + 56);
            }
            while (v17 != v16);
          }
          v23 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v23 = v150.__r_.__value_.__l.__size_;
          if (!v23)
          {
            v28 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v28 = v153.__r_.__value_.__l.__size_;
            if (v28)
            {
              std::operator+<char>();
              v14 = v15;
            }
            else
            {
              v14 = v15;
              std::string::basic_string[abi:ne180100]<0>(&v149, v15);
            }
            if (*((char *)a2 + 23) >= 0)
              v34 = *((unsigned __int8 *)a2 + 23);
            else
              v34 = (size_t)a2[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v147, v34 + 41);
            if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v147;
            else
              v35 = (std::string *)v147.__r_.__value_.__r.__words[0];
            if (v34)
            {
              if (*((char *)a2 + 23) >= 0)
                v36 = a2;
              else
                v36 = *a2;
              memmove(v35, v36, v34);
            }
            strcpy((char *)v35 + v34, "defines an unsupported function parameter");
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v37 = &v149;
            else
              v37 = (std::string *)v149.__r_.__value_.__r.__words[0];
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v38 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
            else
              v38 = v149.__r_.__value_.__l.__size_;
            v39 = std::string::append(&v147, (const std::string::value_type *)v37, v38);
            __p = *v39;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNDEF_PARAM, (__int128 *)&__p, a7);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            goto LABEL_222;
          }
          v24 = *(_QWORD *)(v13 + 56);
          v25 = *(std::__shared_weak_count **)(v13 + 64);
          v145 = v24;
          v146 = v25;
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldxr(p_shared_owners);
            while (__stxr(v27 + 1, p_shared_owners));
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v149, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
          else
            v149 = v151;
          v29 = strlen(siri::intelligence::TYPE_UNKNOWN);
          v30 = v29;
          v31 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v29 != v149.__r_.__value_.__l.__size_)
            {
LABEL_58:
              if (v24)
                goto LABEL_59;
              goto LABEL_55;
            }
            if (v29 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v32 = (std::string *)v149.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v29 != HIBYTE(v149.__r_.__value_.__r.__words[2]))
              goto LABEL_58;
            v32 = &v149;
          }
          v33 = !memcmp(v32, siri::intelligence::TYPE_UNKNOWN, v30) || v24 == 0;
          if (!v33)
          {
LABEL_59:
            if (*(char *)(v24 + 55) < 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v24 + 32), *(_QWORD *)(v24 + 40));
            else
              __p = *(std::string *)(v24 + 32);
            if ((siri::intelligence::IsEquivalentType((unsigned __int8 *)&__p, (unsigned __int8 *)&v149) & 1) != 0)
            {
              v40 = 0;
            }
            else
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 96))(&v147, v24, v132);
              IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v147, (unsigned __int8 *)&v149);
              if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v147.__r_.__value_.__l.__data_);
              v40 = IsEquivalentType ^ 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v40)
                goto LABEL_148;
            }
            else if (!v40)
            {
              goto LABEL_148;
            }
            if (*((char *)a2 + 23) >= 0)
              v42 = *((unsigned __int8 *)a2 + 23);
            else
              v42 = (size_t)a2[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v139, v42 + 28);
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &v139;
            else
              v43 = (std::string *)v139.__r_.__value_.__r.__words[0];
            if (v42)
            {
              if (*((char *)a2 + 23) >= 0)
                v44 = a2;
              else
                v44 = *a2;
              memmove(v43, v44, v42);
            }
            strcpy((char *)v43 + v42, "type mismatch for function '");
            v45 = *((char *)v130 + 23);
            if (v45 >= 0)
              v46 = (const std::string::value_type *)v130;
            else
              v46 = (const std::string::value_type *)*v130;
            if (v45 >= 0)
              v47 = *((unsigned __int8 *)v130 + 23);
            else
              v47 = (std::string::size_type)v130[1];
            v48 = std::string::append(&v139, v46, v47);
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            v140.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            v50 = std::string::append(&v140, "': parameter '");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v141.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v52 = &v153;
            else
              v52 = (std::string *)v153.__r_.__value_.__r.__words[0];
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
            else
              v53 = v153.__r_.__value_.__l.__size_;
            v54 = std::string::append(&v141, (const std::string::value_type *)v52, v53);
            v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v142.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            v56 = std::string::append(&v142, "' should be type ");
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v143.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v149;
            else
              v58 = (std::string *)v149.__r_.__value_.__r.__words[0];
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v59 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
            else
              v59 = v149.__r_.__value_.__l.__size_;
            v60 = std::string::append(&v143, (const std::string::value_type *)v58, v59);
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v144.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            v62 = std::string::append(&v144, " but it's type is ");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v147.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 96))(&v136, v24, v132);
            if ((v138 & 0x80u) == 0)
              v64 = (const std::string::value_type *)&v136;
            else
              v64 = (const std::string::value_type *)v136;
            if ((v138 & 0x80u) == 0)
              v65 = v138;
            else
              v65 = v137;
            v66 = std::string::append(&v147, v64, v65);
            __p = *v66;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&__p, a7);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if ((char)v138 < 0)
              operator delete(v136);
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v147.__r_.__value_.__l.__data_);
            if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v144.__r_.__value_.__l.__data_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v141.__r_.__value_.__l.__data_);
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v140.__r_.__value_.__l.__data_);
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v139.__r_.__value_.__l.__data_);
LABEL_148:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v150.__r_.__value_.__l.__size_ == 10)
              {
                v67 = (std::string *)v150.__r_.__value_.__r.__words[0];
                goto LABEL_153;
              }
            }
            else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) == 10)
            {
              v67 = &v150;
LABEL_153:
              v68 = v67->__r_.__value_.__r.__words[0];
              v69 = LOWORD(v67->__r_.__value_.__r.__words[1]);
              v71 = v68 != 0x65736E6F70736572 || v69 != 25673;
              if (a6 && !v71)
              {
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v24 + 56))(&__p, v24);
                if (a6 + 80 == std::__tree<std::string>::find<std::string>(a6 + 72, (const void **)&__p.__r_.__value_.__l.__data_))
                {
                  if (*((char *)a2 + 23) >= 0)
                    v72 = *((unsigned __int8 *)a2 + 23);
                  else
                    v72 = (size_t)a2[1];
                  std::string::basic_string[abi:ne180100]((uint64_t)&v139, v72 + 21);
                  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v73 = &v139;
                  else
                    v73 = (std::string *)v139.__r_.__value_.__r.__words[0];
                  if (v72)
                  {
                    if (*((char *)a2 + 23) >= 0)
                      v74 = a2;
                    else
                      v74 = *a2;
                    memmove(v73, v74, v72);
                  }
                  strcpy((char *)v73 + v72, "invalid response ID '");
                  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v24 + 56))(&v136, v24);
                  if ((v138 & 0x80u) == 0)
                    v75 = (const std::string::value_type *)&v136;
                  else
                    v75 = (const std::string::value_type *)v136;
                  if ((v138 & 0x80u) == 0)
                    v76 = v138;
                  else
                    v76 = v137;
                  v77 = std::string::append(&v139, v75, v76);
                  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                  v140.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v78;
                  v77->__r_.__value_.__l.__size_ = 0;
                  v77->__r_.__value_.__r.__words[2] = 0;
                  v77->__r_.__value_.__r.__words[0] = 0;
                  v79 = std::string::append(&v140, "' for function '");
                  v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                  v141.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v80;
                  v79->__r_.__value_.__l.__size_ = 0;
                  v79->__r_.__value_.__r.__words[2] = 0;
                  v79->__r_.__value_.__r.__words[0] = 0;
                  v81 = *((char *)v130 + 23);
                  if (v81 >= 0)
                    v82 = (const std::string::value_type *)v130;
                  else
                    v82 = (const std::string::value_type *)*v130;
                  if (v81 >= 0)
                    v83 = *((unsigned __int8 *)v130 + 23);
                  else
                    v83 = (std::string::size_type)v130[1];
                  v84 = std::string::append(&v141, v82, v83);
                  v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                  v142.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v85;
                  v84->__r_.__value_.__l.__size_ = 0;
                  v84->__r_.__value_.__r.__words[2] = 0;
                  v84->__r_.__value_.__r.__words[0] = 0;
                  v86 = std::string::append(&v142, "' parameter '");
                  v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                  v143.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v87;
                  v86->__r_.__value_.__l.__size_ = 0;
                  v86->__r_.__value_.__r.__words[2] = 0;
                  v86->__r_.__value_.__r.__words[0] = 0;
                  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v88 = &v153;
                  else
                    v88 = (std::string *)v153.__r_.__value_.__r.__words[0];
                  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v89 = HIBYTE(v153.__r_.__value_.__r.__words[2]);
                  else
                    v89 = v153.__r_.__value_.__l.__size_;
                  v90 = std::string::append(&v143, (const std::string::value_type *)v88, v89);
                  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                  v144.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v91;
                  v90->__r_.__value_.__l.__size_ = 0;
                  v90->__r_.__value_.__r.__words[2] = 0;
                  v90->__r_.__value_.__r.__words[0] = 0;
                  v92 = std::string::append(&v144, "'");
                  v147 = *v92;
                  v92->__r_.__value_.__l.__size_ = 0;
                  v92->__r_.__value_.__r.__words[2] = 0;
                  v92->__r_.__value_.__r.__words[0] = 0;
                  siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v147, a7);
                  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v147.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v144.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v143.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v142.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v141.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v140.__r_.__value_.__l.__data_);
                  if ((char)v138 < 0)
                    operator delete(v136);
                  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v139.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v149.__r_.__value_.__l.__data_);
              if (v25)
              {
LABEL_213:
                v93 = (unint64_t *)&v25->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                goto LABEL_219;
              }
            }
            else if (v25)
            {
              goto LABEL_213;
            }
            goto LABEL_221;
          }
LABEL_55:
          if (v31 < 0)
          {
            operator delete(v149.__r_.__value_.__l.__data_);
            if (v25)
            {
LABEL_217:
              v95 = (unint64_t *)&v25->__shared_owners_;
              do
                v94 = __ldaxr(v95);
              while (__stlxr(v94 - 1, v95));
LABEL_219:
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
          else if (v25)
          {
            goto LABEL_217;
          }
LABEL_221:
          v14 = v15;
LABEL_222:
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v151.__r_.__value_.__l.__data_);
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v150.__r_.__value_.__l.__data_);
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          v96 = *(std::string **)(v13 + 8);
          if (v96)
          {
            do
            {
              v97 = v96;
              v96 = (std::string *)v96->__r_.__value_.__r.__words[0];
            }
            while (v96);
          }
          else
          {
            do
            {
              v97 = *(std::string **)(v13 + 16);
              v33 = v97->__r_.__value_.__r.__words[0] == v13;
              v13 = (std::string::size_type)v97;
            }
            while (!v33);
          }
          v13 = (std::string::size_type)v97;
        }
        while (v97 != (std::string *)&v154.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v154, (_QWORD *)v154.__r_.__value_.__l.__size_);
    }
    v99 = (std::string::value_type *)v11[14];
    v98 = (std::string::value_type *)v11[15];
    while (v99 != v98)
    {
      if (v99[48])
      {
        v100 = *v133;
        if (!*v133
          || (v101 = std::__tree<std::string>::find<std::string>(v100 + 72, (const void **)v99), v100 + 80 == v101))
        {
LABEL_245:
          if (*((char *)a2 + 23) >= 0)
            v107 = *((unsigned __int8 *)a2 + 23);
          else
            v107 = (size_t)a2[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v107 + 9);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v107)
          {
            if (*((char *)a2 + 23) >= 0)
              v109 = a2;
            else
              v109 = *a2;
            memmove(p_p, v109, v107);
          }
          strcpy((char *)p_p + v107, "function ");
          v110 = *((char *)v11 + 79);
          if (v110 >= 0)
            v111 = (const std::string::value_type *)(v11 + 7);
          else
            v111 = (const std::string::value_type *)v11[7];
          if (v110 >= 0)
            v112 = *((unsigned __int8 *)v11 + 79);
          else
            v112 = (std::string::size_type)v11[8];
          v113 = std::string::append(&__p, v111, v112);
          v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
          v149.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v114;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          v115 = std::string::append(&v149, " does not define the required function parameter: '");
          v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v116;
          v115->__r_.__value_.__l.__size_ = 0;
          v115->__r_.__value_.__r.__words[2] = 0;
          v115->__r_.__value_.__r.__words[0] = 0;
          v117 = v99[23];
          if (v117 >= 0)
            v118 = v99;
          else
            v118 = *(const std::string::value_type **)v99;
          if (v117 >= 0)
            v119 = v99[23];
          else
            v119 = *((_QWORD *)v99 + 1);
          v120 = std::string::append(&v153, v118, v119);
          v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          v122 = std::string::append(&v154, "'");
          v150 = *v122;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_PARAM, (__int128 *)&v150, a7);
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v150.__r_.__value_.__l.__data_);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v154.__r_.__value_.__l.__data_);
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v153.__r_.__value_.__l.__data_);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_278;
        }
        v103 = *(_QWORD *)(v101 + 56);
        v102 = *(std::__shared_weak_count **)(v101 + 64);
        if (!v102)
          goto LABEL_244;
        v104 = (unint64_t *)&v102->__shared_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        do
          v106 = __ldaxr(v104);
        while (__stlxr(v106 - 1, v104));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          if (!v103)
            goto LABEL_245;
        }
        else
        {
LABEL_244:
          if (!v103)
            goto LABEL_245;
        }
      }
LABEL_278:
      v99 += 56;
    }
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v156);
}

void sub_22AF4A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a66;
  void *__p;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;

  if (a72 < 0)
    operator delete(__p);
  if (a64 < 0)
    operator delete(a59);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a43 < 0)
    operator delete(a38);
  if (a36 < 0)
    operator delete(a31);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  siri::intelligence::TestParseError::~TestParseError((void **)(v76 - 240));
  if (*(char *)(v76 - 153) < 0)
    operator delete(*(void **)(v76 - 176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy(v76 - 144, *(_QWORD **)(v76 - 136));
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*(_QWORD **)(v76 - 104));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::GetFunctionDefinitionsMap(siri::intelligence *this)
{
  unsigned __int8 v2;
  uint64_t *v4;
  __int128 *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  char *v9;
  __int128 v10;
  __int128 *v11;
  __int128 *v12;
  void **v13[2];
  char v14;
  uint64_t v15;

  v2 = atomic_load((unsigned __int8 *)&qword_253F46358);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253F46358))
  {
    qword_253F46388 = 0;
    qword_253F46380 = 0;
    qword_253F46378 = (uint64_t)&qword_253F46380;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::intelligence::FunctionDefinition>::~map[abi:ne180100], &qword_253F46378, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46358);
  }
  if (qword_253F46388)
    return std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100]((uint64_t)this);
  siri::intelligence::GetFunctionDefinitions((siri::intelligence *)&v11);
  v4 = (uint64_t *)v11;
  v5 = v12;
  if (v11 != v12)
  {
    do
    {
      v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&qword_253F46378, &v15, (const void **)v4);
      v7 = *v6;
      if (!*v6)
      {
        v8 = v6;
        v9 = (char *)operator new(0x88uLL);
        v7 = (uint64_t *)v9;
        v13[0] = (void **)v9;
        v13[1] = (void **)&qword_253F46380;
        v14 = 0;
        if (*((char *)v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v9 + 32), (const std::string::value_type *)*v4, v4[1]);
        }
        else
        {
          v10 = *(_OWORD *)v4;
          *((_QWORD *)v9 + 6) = v4[2];
          *((_OWORD *)v9 + 2) = v10;
        }
        *(_OWORD *)(v7 + 7) = 0u;
        *(_OWORD *)(v7 + 13) = 0u;
        *(_OWORD *)(v7 + 15) = 0u;
        *(_OWORD *)(v7 + 9) = 0u;
        *(_OWORD *)(v7 + 11) = 0u;
        std::string::basic_string[abi:ne180100]<0>(v7 + 7, "");
        v7[10] = 0;
        std::string::basic_string[abi:ne180100]<0>(v7 + 11, siri::intelligence::TYPE_UNKNOWN);
        v7[14] = 0;
        v7[15] = 0;
        v7[16] = 0;
        v14 = 1;
        std::__tree<std::string>::__insert_node_at((uint64_t **)&qword_253F46378, v15, v8, v7);
        v13[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
      }
      std::string::operator=((std::string *)(v7 + 7), (const std::string *)v4);
      v7[10] = v4[3];
      std::string::operator=((std::string *)(v7 + 11), (const std::string *)(v4 + 4));
      if (v4 != v7 + 7)
        std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)(v7 + 14), (std::string *)v4[7], (std::string *)v4[8], 0x6DB6DB6DB6DB6DB7 * ((v4[8] - v4[7]) >> 3));
      v4 += 10;
    }
    while (v4 != (uint64_t *)v5);
  }
  v13[0] = (void **)&v11;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](v13);
  return std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100]((uint64_t)this);
}

void sub_22AF4A64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v8, va);
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::intelligence::FunctionDefinition>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void siri::intelligence::FunctionHandler::GetReturnType(const void **a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void **v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p;
  std::__shared_weak_count *v48;
  char v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  char v52[8];
  _QWORD *v53;

  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v52);
  v6 = std::__tree<std::string>::find<std::string>((uint64_t)v52, a1);
  if (&v53 == (_QWORD **)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, siri::intelligence::TYPE_UNKNOWN);
    goto LABEL_15;
  }
  v7 = v6;
  v8 = v6 + 56;
  v9 = *(char *)(v6 + 79);
  if (v9 < 0)
  {
    if (*(_QWORD *)(v6 + 64) != 10)
      goto LABEL_12;
    v8 = *(_QWORD *)v8;
  }
  else if (v9 != 10)
  {
LABEL_12:
    if (*(char *)(v7 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v7 + 88), *(_QWORD *)(v7 + 96));
    }
    else
    {
      v13 = *(_OWORD *)(v7 + 88);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 104);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
    goto LABEL_15;
  }
  v10 = *(_QWORD *)v8;
  v11 = *(unsigned __int16 *)(v8 + 8);
  if (v10 != 0x646E497961727261 || v11 != 30821)
    goto LABEL_12;
  v14 = *a2;
  if (!v14)
    goto LABEL_12;
  std::string::basic_string[abi:ne180100]<0>(&__p, "variable");
  v15 = std::__tree<std::string>::find<std::string>(v14 + 72, (const void **)&__p);
  v16 = v15;
  if (v14 + 80 == v15)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v17 = *(const void **)(v15 + 56);
    v18 = *(std::__shared_weak_count **)(v16 + 64);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (v17
    {
      v50 = v21;
      v51 = v18;
      if (!v18)
        goto LABEL_33;
      v22 = (unint64_t *)&v18->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    else
    {
      v50 = 0;
      v51 = 0;
      if (!v18)
        goto LABEL_33;
    }
    v24 = (unint64_t *)&v18->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_33:
  if (v49 < 0)
    operator delete(__p);
  v26 = v50;
  if (!v50)
    goto LABEL_50;
  if (((*(uint64_t (**)(_QWORD *))(*v50 + 40))(v50) & 1) != 0)
    goto LABEL_50;
  v27 = (uint64_t *)v26[9];
  if ((int)((v26[10] - (_QWORD)v27) >> 4) < 1)
    goto LABEL_50;
  v29 = *v27;
  v28 = (std::__shared_weak_count *)v27[1];
  if (v28)
  {
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    do
      v32 = __ldaxr(v30);
    while (__stlxr(v32 - 1, v30));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!v29)
  {
LABEL_50:
    v38 = v51;
    if (v51)
    {
      v39 = (unint64_t *)&v51->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_12;
  }
  v33 = (void **)v50[9];
  if ((int)((v50[10] - (_QWORD)v33) >> 4) <= 0)
  {
    v35 = 0;
    v34 = 0;
    __p = 0;
    v48 = 0;
  }
  else
  {
    v34 = (char *)*v33;
    v35 = (std::__shared_weak_count *)v33[1];
    __p = *v33;
    v48 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
  }
  if (v34[55] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v34 + 4), *((_QWORD *)v34 + 5));
  }
  else
  {
    v41 = *((_OWORD *)v34 + 2);
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v34 + 6);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v41;
  }
  if (v35)
  {
    v42 = (unint64_t *)&v35->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v44 = v51;
  if (v51)
  {
    v45 = (unint64_t *)&v51->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_15:
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v53);
}

void sub_22AF4AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a18);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionHandler::Execute(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  void (*v23)(uint64_t *, uint64_t);
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void *v30;
  void (*v31)(void **__return_ptr);
  void **v32;
  const char *v33;
  uint64_t v34;
  void **v35;
  void *__p[2];
  char v37;
  void *v38[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  char v42[8];
  _QWORD *v43;

  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v42);
  v8 = std::__tree<std::string>::find<std::string>((uint64_t)v42, (const void **)a1);
  if (&v43 == (_QWORD **)v8)
    goto LABEL_41;
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 112);
  v11 = *(_QWORD *)(v8 + 120);
  if (v10 == v11)
    goto LABEL_24;
  v12 = 1;
  do
  {
    while (*(_BYTE *)(v10 + 48))
    {
      v13 = *a2;
      if (!*a2)
        break;
      v14 = std::__tree<std::string>::find<std::string>(v13 + 72, (const void **)v10);
      if (v13 + 80 != v14)
      {
        v16 = *(_QWORD *)(v14 + 56);
        v17 = *(std::__shared_weak_count **)(v14 + 64);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (v16)
          break;
      }
      v21 = (const void *)v10;
      if (*(char *)(v10 + 23) < 0)
        v21 = *(const void **)v10;
      if (*(char *)(a1 + 23) >= 0)
        v22 = (const void *)a1;
      else
        v22 = *(const void **)a1;
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Required parameter '%s' not provided for function '%s'. Function will have no effect.", v15, v21, v22);
      v12 = 0;
      v10 += 56;
      if (v10 == v11)
        goto LABEL_41;
    }
    v10 += 56;
  }
  while (v10 != v11);
  if ((v12 & 1) != 0)
  {
LABEL_24:
    v23 = *(void (**)(uint64_t *, uint64_t))(v9 + 80);
    v24 = (std::__shared_weak_count *)a2[1];
    v40 = *a2;
    v41 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v23(&v40, a3);
    v27 = v41;
    if (v41)
    {
      v28 = (unint64_t *)&v41->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (*(char *)(a1 + 23) >= 0)
      v30 = (const void *)a1;
    else
      v30 = *(const void **)a1;
    v31 = *(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 56);
    v32 = v38;
    v31(v38);
    if (v39 < 0)
      v32 = (void **)v38[0];
    v34 = *a4;
    if (*a4)
    {
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v34 + 56))(__p, *a4);
      if (v37 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
    }
    else
    {
      v35 = (void **)"nullptr";
    }
    siri::intelligence::Log::Debug((siri::intelligence::Log *)"Executing function %s(%s) -> %s", v33, v30, v32, v35);
    if (v34 && v37 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  else
  {
LABEL_41:
    *a4 = 0;
    a4[1] = 0;
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v43);
}

void sub_22AF4AD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,_QWORD *a27)
{
  uint64_t v27;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v27);
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a27);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionAbs(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  double v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v15 = v7;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v12 = fabs((*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7));
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v12, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "abs");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  std::string *v12;
  const std::string::value_type **v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](a1, a3);
    v6 = 0;
    v7 = a1[1];
    v8 = 56 * a3;
    do
    {
      v9 = (std::string *)(v7 + v6);
      v10 = (__int128 *)(a2 + v6);
      if (*(char *)(a2 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      v12 = (std::string *)(v7 + v6 + 24);
      v13 = (const std::string::value_type **)(a2 + v6 + 24);
      if (*(char *)(a2 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(a2 + v6 + 32));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        *(_QWORD *)(v7 + v6 + 40) = *(_QWORD *)(a2 + v6 + 40);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      *(_BYTE *)(v7 + v6 + 48) = *(_BYTE *)(a2 + v6 + 48);
      v6 += 56;
    }
    while (v8 != v6);
    a1[1] = v7 + v6;
  }
  return a1;
}

void sub_22AF4AFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionSqrt(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  double v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v17 = v7;
    v18 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if ((v16 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_12:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "sqrt");
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    if (!v6)
      return;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_12;
LABEL_9:
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  if (v11 == 0.0)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Function '%s' was passed an illegal value of 0", v10, "sqrt");
    goto LABEL_13;
  }
  v14 = sqrt(v11);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v14, __p);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (!v6)
    return;
LABEL_16:
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4B180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionOdd(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v16 = v7;
    v17 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v10 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v13 = (v10 == (double)(int)v10) & (int)v10;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(__p, &v13);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "odd");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4B2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionEven(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  BOOL v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v17 = v7;
    v18 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if ((v16 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "even");
    *a2 = 0;
    a2[1] = 0;
    if (!v6)
      return;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v11 = ((int)v10 & 1) == 0 && v10 == (double)(int)v10;
  v14 = v11;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(__p, (char *)&v14);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (v6)
  {
LABEL_16:
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22AF4B45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionAdd(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v8 = 0;
    v7 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(std::__shared_weak_count **)(v5 + 64);
    v28 = v7;
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "add");
    *a2 = 0;
    a2[1] = 0;
    if (!v8)
      return;
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v24 = v15;
    v25 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if (v15)
    {
LABEL_20:
      v18 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v23 = v18 + (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v23, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v14)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else if (v15)
  {
    goto LABEL_20;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "add");
  *a2 = 0;
  a2[1] = 0;
  if (!v14)
    goto LABEL_28;
LABEL_24:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_28:
  v8 = v29;
  if (!v29)
    return;
LABEL_29:
  v21 = (unint64_t *)&v8->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_22AF4B6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionSubtract(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v8 = 0;
    v7 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(std::__shared_weak_count **)(v5 + 64);
    v28 = v7;
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "subtract");
    *a2 = 0;
    a2[1] = 0;
    if (!v8)
      return;
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v24 = v15;
    v25 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if (v15)
    {
LABEL_20:
      v18 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v23 = v18 - (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v23, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v14)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else if (v15)
  {
    goto LABEL_20;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "subtract");
  *a2 = 0;
  a2[1] = 0;
  if (!v14)
    goto LABEL_28;
LABEL_24:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_28:
  v8 = v29;
  if (!v29)
    return;
LABEL_29:
  v21 = (unint64_t *)&v8->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_22AF4B94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionMultiply(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v8 = 0;
    v7 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(std::__shared_weak_count **)(v5 + 64);
    v28 = v7;
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "multiply");
    *a2 = 0;
    a2[1] = 0;
    if (!v8)
      return;
    goto LABEL_29;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v24 = v15;
    v25 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if (v15)
    {
LABEL_20:
      v18 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      v23 = v18 * (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v23, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v14)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  else if (v15)
  {
    goto LABEL_20;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "multiply");
  *a2 = 0;
  a2[1] = 0;
  if (!v14)
    goto LABEL_28;
LABEL_24:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_28:
  v8 = v29;
  if (!v29)
    return;
LABEL_29:
  v21 = (unint64_t *)&v8->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_22AF4BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDivide(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  const char *v19;
  double v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v30 = v8;
    v31 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v29 & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "divide");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v26 = v15;
    v27 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if ((v29 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_23:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "divide");
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    if (!v14)
      goto LABEL_31;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!v15)
    goto LABEL_23;
LABEL_20:
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  v20 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  if (v20 == 0.0)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to divide a number by zero", v19);
    goto LABEL_24;
  }
  v25 = v18 / v20;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v25, __p);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (!v14)
    goto LABEL_31;
LABEL_27:
  v21 = (unint64_t *)&v14->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_31:
  v7 = v31;
  if (!v31)
    return;
LABEL_32:
  v23 = (unint64_t *)&v7->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22AF4BE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_22AF4BEC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4BEC0);
}

void siri::intelligence::FunctionMin(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v8 = 0;
    v7 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(std::__shared_weak_count **)(v5 + 64);
    v29 = v7;
    v30 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "min");
    *a2 = 0;
    a2[1] = 0;
    if (!v8)
      return;
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v25 = v15;
    v26 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_26:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "min");
    *a2 = 0;
    a2[1] = 0;
    if (!v14)
      goto LABEL_31;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!v15)
    goto LABEL_26;
LABEL_20:
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v23 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  if (v23 >= v24)
    v18 = &v24;
  else
    v18 = &v23;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(__p, v18);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (v14)
  {
LABEL_27:
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_31:
  v8 = v30;
  if (!v30)
    return;
LABEL_32:
  v21 = (unint64_t *)&v8->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_22AF4C110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_22AF4C15C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4C154);
}

void siri::intelligence::FunctionMax(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v8 = 0;
    v7 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 56);
    v8 = *(std::__shared_weak_count **)(v5 + 64);
    v29 = v7;
    v30 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "max");
    *a2 = 0;
    a2[1] = 0;
    if (!v8)
      return;
    goto LABEL_32;
  }
  operator delete(__p[0]);
  if (!v7)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v25 = v15;
    v26 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_26:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "secondValue", "max");
    *a2 = 0;
    a2[1] = 0;
    if (!v14)
      goto LABEL_31;
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!v15)
    goto LABEL_26;
LABEL_20:
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v23 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  if (v24 >= v23)
    v18 = &v24;
  else
    v18 = &v23;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(__p, v18);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (v14)
  {
LABEL_27:
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_31:
  v8 = v30;
  if (!v30)
    return;
LABEL_32:
  v21 = (unint64_t *)&v8->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_22AF4C3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_22AF4C3F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4C3E8);
}

void siri::intelligence::FunctionRandomInt(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  int v19;
  double v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::string __p;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "minValue");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v26 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v26 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "minValue", "randomInt");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_34;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maxValue");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_23:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "maxValue", "randomInt");
    *a2 = 0;
    a2[1] = 0;
    if (!v14)
      goto LABEL_33;
    goto LABEL_29;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_23;
LABEL_20:
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  v19 = (int)(*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  if (v19 < 1)
    v20 = 0.0;
  else
    v20 = (double)(int)v18
        + (double)(uint64_t)(erand48((unsigned __int16 *)&siri::intelligence::Utils::sRandomNumberGeneratorState)
                          * (double)(v19 - (int)v18 + 1));
  v21 = operator new(0x68uLL);
  v21[2] = 0;
  *v21 = &unk_24F542598;
  v21[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v21 + 3), &__p, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a2 = v21 + 3;
  a2[1] = v21;
  if (v14)
  {
LABEL_29:
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_33:
  v7 = v26;
  if (!v26)
    return;
LABEL_34:
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_22AF4C6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_22AF4C728(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4C720);
}

void siri::intelligence::FunctionUpper(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  __int128 v13;
  void *v14[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v14, "string");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)v14);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v16 = v7;
    v17 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if (v7)
      goto LABEL_9;
LABEL_14:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "string", "upper");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_15;
  }
  if (!v7)
    goto LABEL_14;
LABEL_9:
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 56))(v14, v7);
  siri::intelligence::StringToUpper((uint64_t)v14, &__p);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>("", &__p, &v13);
  *(_OWORD *)a2 = v13;
  v13 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
LABEL_15:
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22AF4C89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v25 - 56);
  _Unwind_Resume(a1);
}

void sub_22AF4C8E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4C8DCLL);
}

void siri::intelligence::FunctionLower(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  __int128 v13;
  void *v14[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v14, "string");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)v14);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v16 = v7;
    v17 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v15 < 0)
  {
    operator delete(v14[0]);
    if (v7)
      goto LABEL_9;
LABEL_14:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "string", "lower");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_15;
  }
  if (!v7)
    goto LABEL_14;
LABEL_9:
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 56))(v14, v7);
  siri::intelligence::StringToLower((uint64_t)v14, &__p);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>("", &__p, &v13);
  *(_OWORD *)a2 = v13;
  v13 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
LABEL_15:
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22AF4CA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v25 - 56);
  _Unwind_Resume(a1);
}

void sub_22AF4CAA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4CA98);
}

void siri::intelligence::FunctionStartsWith(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  __int128 v23;
  void *v24[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "string");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v29 = v8;
    v30 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "string", "startsWith");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_32;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "prefix");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v26 = v15;
    v27 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_20;
LABEL_25:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "prefix", "startsWith");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_26;
  }
  if (!v15)
    goto LABEL_25;
LABEL_20:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v8 + 56))(&__p, v8);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v15 + 56))(v24, v15);
  v22 = siri::intelligence::StringStartsWith(&__p, (unsigned __int8 *)v24);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)&v22, &v23);
  *(_OWORD *)a2 = v23;
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_26:
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v7 = v30;
  if (v30)
  {
LABEL_32:
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22AF4CD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 72);
  _Unwind_Resume(a1);
}

void sub_22AF4CD7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4CD74);
}

void siri::intelligence::FunctionEndsWith(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  __int128 v23;
  void *v24[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "string");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v29 = v8;
    v30 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "string", "endsWith");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_32;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suffix");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v26 = v15;
    v27 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_20;
LABEL_25:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "suffix", "endsWith");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_26;
  }
  if (!v15)
    goto LABEL_25;
LABEL_20:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v8 + 56))(&__p, v8);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v15 + 56))(v24, v15);
  v22 = siri::intelligence::StringEndsWith(&__p, (unsigned __int8 *)v24);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)&v22, &v23);
  *(_OWORD *)a2 = v23;
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_26:
  if (v14)
  {
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v7 = v30;
  if (v30)
  {
LABEL_32:
    v20 = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22AF4CFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 72);
  _Unwind_Resume(a1);
}

void sub_22AF4D058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4D050);
}

void siri::intelligence::FunctionContains(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::string *v7;
  uint64_t v8;
  unint64_t *p_size;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string *v18;
  std::__split_buffer<std::string>::pointer first;
  int v20;
  std::string *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *i;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::vector<std::string>::pointer end;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p[2];
  std::string::size_type v48;
  _QWORD v49[2];
  __int128 v50;
  uint64_t v51;
  std::vector<std::string> v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::string *v56;
  std::__split_buffer<std::string> __s1;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__s1, "haystack");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__s1.__first_);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::string **)(v5 + 64);
    v55 = v8;
    v56 = v7;
    if (v7)
    {
      p_size = &v7->__r_.__value_.__l.__size_;
      do
        v10 = __ldxr(p_size);
      while (__stxr(v10 + 1, p_size));
    }
  }
  if ((SHIBYTE(__s1.__end_) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "haystack", "contains");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_78;
  }
  operator delete(__s1.__first_);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__s1, "needle");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)&__s1.__first_);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v53 = 0;
    v54 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v53 = v15;
    v54 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(__s1.__end_) & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_23:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "needle", "contains");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_72;
  }
  operator delete(__s1.__first_);
  if (!v15)
    goto LABEL_23;
LABEL_20:
  if (*(char *)(v8 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__s1, *(const std::string::value_type **)(v8 + 32), *(_QWORD *)(v8 + 40));
  }
  else
  {
    *(_OWORD *)&__s1.__first_ = *(_OWORD *)(v8 + 32);
    __s1.__end_ = *(std::__split_buffer<std::string>::pointer *)(v8 + 48);
  }
  v18 = (std::string *)strlen(siri::intelligence::TYPE_ARRAY[0]);
  if (SHIBYTE(__s1.__end_) < 0)
  {
    if (v18 == __s1.__begin_)
    {
      if (v18 == (std::string *)-1)
        std::string::__throw_out_of_range[abi:ne180100]();
      first = __s1.__first_;
      v20 = memcmp(__s1.__first_, siri::intelligence::TYPE_ARRAY[0], (size_t)v18);
      operator delete(first);
      if (!v20)
        goto LABEL_32;
    }
    else
    {
      operator delete(__s1.__first_);
    }
  }
  else if (v18 == (std::string *)HIBYTE(__s1.__end_) && !memcmp(&__s1, siri::intelligence::TYPE_ARRAY[0], (size_t)v18))
  {
LABEL_32:
    memset(&v52, 0, sizeof(v52));
    __s1.__first_ = v21;
    __s1.__begin_ = v7;
    if (v7)
    {
      v22 = &v7->__r_.__value_.__l.__size_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v50 = 0uLL;
    v51 = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)&v50, (_QWORD *)v21[3].__r_.__value_.__l.__data_, (_QWORD *)v21[3].__r_.__value_.__l.__size_, (uint64_t)(v21[3].__r_.__value_.__l.__size_ - v21[3].__r_.__value_.__r.__words[0]) >> 4);
    if (v7)
    {
      v24 = &v7->__r_.__value_.__l.__size_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(std::string *))(v7->__r_.__value_.__r.__words[0] + 16))(v7);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
      }
    }
    v27 = (uint64_t *)*((_QWORD *)&v50 + 1);
    for (i = (uint64_t *)v50; i != v27; i += 2)
    {
      v28 = *i;
      v29 = (std::__shared_weak_count *)i[1];
      v49[0] = *i;
      v49[1] = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      if (v28)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v28 + 56))(__p);
        end = v52.__end_;
        if (v52.__end_ >= v52.__end_cap_.__value_)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_ - (char *)v52.__begin_) >> 3);
          v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) > v35)
            v35 = 0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) >= 0x555555555555555)
            v36 = 0xAAAAAAAAAAAAAAALL;
          else
            v36 = v35;
          __s1.__end_cap_.__value_ = (std::allocator<std::string> *)&v52.__end_cap_;
          if (v36)
            v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v52.__end_cap_, v36);
          else
            v37 = 0;
          v38 = v37 + v34;
          __s1.__first_ = v37;
          __s1.__begin_ = v38;
          __s1.__end_cap_.__value_ = &v37[v36];
          v39 = *(_OWORD *)__p;
          v38->__r_.__value_.__r.__words[2] = v48;
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          __p[1] = 0;
          v48 = 0;
          __p[0] = 0;
          __s1.__end_ = v38 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v52, &__s1);
          v40 = v52.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__s1);
          v52.__end_ = v40;
          if (SHIBYTE(v48) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v33 = *(_OWORD *)__p;
          v52.__end_->__r_.__value_.__r.__words[2] = v48;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v33;
          v52.__end_ = end + 1;
        }
      }
      if (v29)
      {
        v41 = (unint64_t *)&v29->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    __s1.__first_ = (std::__split_buffer<std::string>::pointer)&v50;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(_QWORD *)v53 + 56))(&__s1);
    LOBYTE(__p[0]) = siri::intelligence::VectorContains((const std::string **)&v52.__begin_, (const std::string *)&__s1);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)__p, &v50);
    *(_OWORD *)a2 = v50;
    if (SHIBYTE(__s1.__end_) < 0)
      operator delete(__s1.__first_);
    __s1.__first_ = (std::__split_buffer<std::string>::pointer)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    v14 = v54;
    goto LABEL_72;
  }
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(_QWORD *)v8 + 56))(&__s1, v8);
  (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t))(*(_QWORD *)v15 + 56))(&v52, v15);
  LOBYTE(v49[0]) = siri::intelligence::StringContains((char **)&__s1, (char *)&v52);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)v49, &v50);
  *(_OWORD *)a2 = v50;
  if (SHIBYTE(v52.__end_cap_.__value_) < 0)
    operator delete(v52.__begin_);
  if (SHIBYTE(__s1.__end_) < 0)
    operator delete(__s1.__first_);
LABEL_72:
  if (v14)
  {
    v43 = (unint64_t *)&v14->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v7 = v56;
  if (v56)
  {
LABEL_78:
    v45 = &v7->__r_.__value_.__l.__size_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      (*(void (**)(std::string *))(v7->__r_.__value_.__r.__words[0] + 16))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
  }
}

void sub_22AF4D614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31)
{
  __p = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_22AF4D71C()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    operator delete(*(void **)(v0 - 128));
  JUMPOUT(0x22AF4D714);
}

void siri::intelligence::FunctionLength(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _OWORD *v10;
  size_t v11;
  void *v12;
  int v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  int v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  int v27;
  _DWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "variable");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v35 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v35 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_9;
LABEL_12:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "length");
    *a2 = 0;
    a2[1] = 0;
    if (!v6)
      return;
    goto LABEL_80;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_12;
LABEL_9:
  v10 = (_OWORD *)(v7 + 32);
  if (*(char *)(v7 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v10;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
  }
  v11 = strlen(siri::intelligence::TYPE_ARRAY[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v11 == __p.__r_.__value_.__l.__size_)
    {
      if (v11 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v12 = (void *)__p.__r_.__value_.__r.__words[0];
      v13 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_ARRAY[0], v11);
      operator delete(v12);
      if (!v13)
        goto LABEL_22;
    }
    else
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (v11 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::intelligence::TYPE_ARRAY[0], v11))
  {
LABEL_22:
    if (!v6)
    {
      v17 = (v14[10] - v14[9]) >> 4;
      goto LABEL_77;
    }
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (v14[10] - v14[9]) >> 4;
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    goto LABEL_74;
  }
  if (*(char *)(v7 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v10;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
  }
  v19 = strlen(siri::intelligence::TYPE_STRING[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v19 == __p.__r_.__value_.__l.__size_)
    {
      if (v19 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v20 = (void *)__p.__r_.__value_.__r.__words[0];
      v21 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_STRING[0], v19);
      operator delete(v20);
      if (!v21)
        goto LABEL_39;
    }
    else
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_45:
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v10;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
    }
    v25 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v25 == __p.__r_.__value_.__l.__size_)
      {
        if (v25 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v26 = (void *)__p.__r_.__value_.__r.__words[0];
        v27 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_DICTIONARY[0], v25);
        operator delete(v26);
        if (!v27)
          goto LABEL_55;
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v25 == HIBYTE(__p.__r_.__value_.__r.__words[2])
           && !memcmp(&__p, siri::intelligence::TYPE_DICTIONARY[0], v25))
    {
LABEL_55:
      if (!v6)
      {
        LODWORD(v17) = v28[22];
        goto LABEL_77;
      }
      v29 = (unint64_t *)&v6->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      LODWORD(v17) = v28[22];
      do
        v18 = __ldaxr(v29);
      while (__stlxr(v18 - 1, v29));
      goto LABEL_74;
    }
    LODWORD(v17) = 0;
    goto LABEL_77;
  }
  if (v19 != HIBYTE(__p.__r_.__value_.__r.__words[2]) || memcmp(&__p, siri::intelligence::TYPE_STRING[0], v19))
    goto LABEL_45;
LABEL_39:
  if (v22)
  {
    if (v6)
    {
      v23 = (unint64_t *)&v6->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v6 = 0;
  }
  if (v22[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v22 + 9), *((_QWORD *)v22 + 10));
  else
    __p = *(std::string *)(v22 + 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    LODWORD(v17) = __p.__r_.__value_.__r.__words[1];
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_77;
  }
  else
  {
    LODWORD(v17) = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!v6)
      goto LABEL_77;
  }
  v31 = (unint64_t *)&v6->__shared_owners_;
  do
    v18 = __ldaxr(v31);
  while (__stlxr(v18 - 1, v31));
LABEL_74:
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_77:
  v32 = operator new(0x68uLL);
  v32[2] = 0;
  *v32 = &unk_24F542598;
  v32[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v32 + 3), &__p, (double)(int)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a2 = v32 + 3;
  a2[1] = v32;
  v6 = v35;
  if (v35)
  {
LABEL_80:
    v33 = (unint64_t *)&v6->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_22AF4DC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_22AF4DC9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF4DC94);
}

void siri::intelligence::ArrayIndex(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  const void *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  double *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  const void *v37;
  std::__shared_weak_count *v38;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v37 = v8;
    v38 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if ((v36 & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "variable", "arrayIndex");
    *a2 = 0;
    a2[1] = 0;
    if (!v7)
      return;
    goto LABEL_53;
  }
  operator delete(__p[0]);
  if (!v8)
    goto LABEL_15;
LABEL_9:
  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "index");
  v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)__p);
  if (v11 + 80 == v12)
  {
    v14 = 0;
    v15 = 0;
    v34 = 0;
  }
  else
  {
    v15 = *(const void **)(v12 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    v34 = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if ((v36 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_20;
LABEL_35:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v13, "index", "arrayIndex");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (!v15)
    goto LABEL_35;
LABEL_20:
  v19 = 0;
  if (v18)
    v20 = v7 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v19 = v7;
  }
  if (v23)
  {
    if (v14)
    {
      v24 = (unint64_t *)&v14->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    if (v18)
    {
      siri::intelligence::VariableArray::GetItem((uint64_t)v18, (int)v23[9], a2);
      if (!v14)
        goto LABEL_42;
LABEL_38:
      v26 = (unint64_t *)&v14->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_42;
    }
  }
  else
  {
    v14 = 0;
  }
  *a2 = 0;
  a2[1] = 0;
  if (v14)
    goto LABEL_38;
LABEL_42:
  if (v19)
  {
    v28 = (unint64_t *)&v19->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_47:
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v7 = v38;
  if (v38)
  {
LABEL_53:
    v32 = (unint64_t *)&v7->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_22AF4DFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDefined(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v15 = v7;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v12, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "defined");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4E128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionUndefined(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v15 = v7;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) ^ 1;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v12, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "undefined");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4E28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionEmpty(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v15 = v7;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v12, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "empty");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionNonEmpty(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v6 = 0;
    v7 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 56);
    v6 = *(std::__shared_weak_count **)(v4 + 64);
    v15 = v7;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_9:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) ^ 1;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v12, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6)
        return;
      goto LABEL_13;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "nonempty");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v6)
    return;
LABEL_13:
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_22AF4E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDirectInvocationBuilder(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *v48[2];
  char v49;
  void *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string __p;
  const void *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;

  v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v59, "identifier");
  v7 = std::__tree<std::string>::find<std::string>(v6 + 72, (const void **)&v59.__r_.__value_.__l.__data_);
  if (v6 + 80 == v7)
  {
    v10 = 0;
    v9 = 0;
    v57 = 0;
    v58 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 56);
    v10 = *(std::__shared_weak_count **)(v7 + 64);
    v57 = v9;
    v58 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
  }
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_9;
LABEL_15:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v8, "identifier", "directInvocationBuilder");
    *a3 = 0;
    a3[1] = 0;
    if (!v10)
      return;
    goto LABEL_48;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_15;
LABEL_9:
  v13 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v59, "userData");
  v14 = std::__tree<std::string>::find<std::string>(v13 + 72, (const void **)&v59.__r_.__value_.__l.__data_);
  if (v13 + 80 == v14)
  {
    v16 = 0;
    v15 = 0;
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v15 = *(const void **)(v14 + 56);
    v16 = *(std::__shared_weak_count **)(v14 + 64);
    v55 = v15;
    v56 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  if (a2 && (v19 = *(uint64_t **)(a2 + 40)) != 0)
  {
    v20 = *v19;
    v22 = *(_QWORD *)(v20 + 232);
    v21 = *(std::__shared_weak_count **)(v20 + 240);
    v52 = v22;
    v53 = v21;
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    if (v22)
    {
      if (v15
      {
        v26 = (uint64_t)v25;
        v50 = v25;
        v51 = v16;
        if (v16)
        {
          v27 = (unint64_t *)&v16->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
      }
      else
      {
        v16 = 0;
        v26 = 0;
        v50 = 0;
        v51 = 0;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 56))(v48, v9);
      v46 = v26;
      v47 = v16;
      if (v16)
      {
        v38 = (unint64_t *)&v16->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      siri::intelligence::Callbacks::InvokeDirectInvocationBuilder(v22, (const char *)v48, &v46, &v59);
      v40 = v47;
      __p = v59;
      *((_BYTE *)&v59.__r_.__value_.__s + 23) = 0;
      v59.__r_.__value_.__s.__data_[0] = 0;
      if (v47)
      {
        v41 = (unint64_t *)&v47->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      v43 = v51;
      if (v51)
      {
        v44 = (unint64_t *)&v51->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
  }
  else
  {
    v52 = 0;
    v53 = 0;
  }
  v29 = (std::string *)operator new(0x78uLL);
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F540920;
  v29->__r_.__value_.__l.__size_ = 0;
  std::string::basic_string[abi:ne180100]<0>(&v59, "");
  siri::intelligence::VariableString::VariableString(v29 + 1, &v59, &__p);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  *a3 = v29 + 1;
  a3[1] = v29;
  v30 = v53;
  if (v53)
  {
    v31 = (unint64_t *)&v53->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v10 = v58;
  if (v58)
  {
LABEL_48:
    v36 = (unint64_t *)&v10->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_22AF4E948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 104);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 88);
  _Unwind_Resume(a1);
}

void sub_22AF4E9FC()
{
  uint64_t v0;

  if (*(char *)(v0 - 49) < 0)
    operator delete(*(void **)(v0 - 72));
  JUMPOUT(0x22AF4E9F4);
}

void siri::intelligence::FunctionVisitCount(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int ResponseVisitCount;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;

  v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "responseId");
  v6 = std::__tree<std::string>::find<std::string>(v5 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v5 + 80 == v6)
  {
    v8 = 0;
    v9 = 0;
    v30 = 0;
    v31 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 56);
    v8 = *(std::__shared_weak_count **)(v6 + 64);
    v30 = v9;
    v31 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_9;
LABEL_34:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v7, "responseId", "nonempty");
    *a3 = 0;
    a3[1] = 0;
    if (!v8)
      return;
    goto LABEL_35;
  }
  if (!v9)
    goto LABEL_34;
LABEL_9:
  if (!a2 || (v12 = *(uint64_t **)(a2 + 40)) == 0)
  {
    v28 = 0;
    v29 = 0;
LABEL_25:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_26;
  }
  v13 = *v12;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 56))(&__p, v9);
  v14 = (_QWORD *)(v13 + 8);
  siri::intelligence::FlowGraph::GetResponse((_QWORD *)(v13 + 8), (uint64_t)&__p, &v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v28)
    goto LABEL_25;
  v15 = (std::__shared_weak_count *)v29;
  v27[0] = v28;
  v27[1] = v29;
  if (v29)
  {
    v16 = (unint64_t *)(v29 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  ResponseVisitCount = siri::intelligence::FlowGraph::GetResponseVisitCount(v14, v27);
  v19 = operator new(0x68uLL);
  v19[2] = 0;
  *v19 = &unk_24F542598;
  v19[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v19 + 3), &__p, (double)ResponseVisitCount);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a3 = v19 + 3;
  a3[1] = v19;
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_26:
  v22 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v23 = (unint64_t *)(v29 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v8 = v31;
  if (v31)
  {
LABEL_35:
    v25 = (unint64_t *)&v8->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_22AF4EC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  void *v25;

  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::intelligence::FunctionDefinition>::vector[abi:ne180100](_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  const std::string::value_type **v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;
  unint64_t v13;
  _QWORD *v14;

  qword_253F46360 = 0;
  qword_253F46368 = 0;
  qword_253F46370 = 0;
  if (a2)
  {
    v3 = result;
    std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](&qword_253F46360, a2);
    v4 = 0;
    v5 = qword_253F46368;
    v6 = 80 * a2;
    do
    {
      v7 = (std::string *)(v5 + v4);
      v8 = (const std::string::value_type **)&v3[v4 / 8];
      if (SHIBYTE(v3[v4 / 8 + 2]) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *v8, (std::string::size_type)v8[1]);
      }
      else
      {
        v9 = *(_OWORD *)v8;
        v7->__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      *(_QWORD *)(v5 + v4 + 24) = v3[v4 / 8 + 3];
      v10 = (std::string *)(v5 + v4 + 32);
      v11 = (const std::string::value_type **)&v3[v4 / 8 + 4];
      if (SHIBYTE(v3[v4 / 8 + 6]) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, v3[v4 / 8 + 5]);
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(v5 + v4 + 48) = v3[v4 / 8 + 6];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v13 = v5 + v4;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 0;
      v14 = (_QWORD *)(v5 + v4 + 56);
      v14[2] = 0;
      result = std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(v14, v3[v4 / 8 + 7], v3[v4 / 8 + 8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[v4 / 8 + 8] - v3[v4 / 8 + 7]) >> 3));
      v4 += 80;
    }
    while (v6 != v4);
    qword_253F46368 = v5 + v4;
  }
  return result;
}

void sub_22AF4EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDefinition::~FunctionDefinition(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>@<X0>(char *a1@<X1>, double *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],double,std::allocator<siri::intelligence::VariableNumber>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22AF4EF40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],double,std::allocator<siri::intelligence::VariableNumber>,0>(_QWORD *a1, char *__s, double *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24F542598;
  a1[1] = 0;
  std::allocator<siri::intelligence::VariableNumber>::construct[abi:ne180100]<siri::intelligence::VariableNumber,char const(&)[1],double>((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_22AF4EFA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<siri::intelligence::VariableNumber>::construct[abi:ne180100]<siri::intelligence::VariableNumber,char const(&)[1],double>(int a1, uint64_t a2, char *__s, double *a4)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableNumber::VariableNumber(a2, &__p, *a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF4F064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x492492492492493)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  v3 = 56 * a2;
  result = (char *)operator new(56 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[v3];
  return result;
}

void std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(_QWORD *a1, char *a2)
{
  _QWORD *v4;
  std::string __p;

  v4 = operator new(0x60uLL);
  v4[2] = 0;
  *v4 = &unk_24F542548;
  v4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_22AF4F1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(_QWORD *a1, double *a2)
{
  _QWORD *v4;
  std::string __p;

  v4 = operator new(0x68uLL);
  v4[2] = 0;
  *v4 = &unk_24F542598;
  v4[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_22AF4F2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>@<X0>(char *a1@<X1>, const std::string *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::string,std::allocator<siri::intelligence::VariableString>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_22AF4F358(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::string,std::allocator<siri::intelligence::VariableString>,0>(std::string *a1, char *__s, const std::string *a3)
{
  char v5;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F540920;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],std::string>((int)&v5, a1 + 1, __s, a3);
  return a1;
}

void sub_22AF4F3BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],std::string>(int a1, std::string *a2, char *__s, const std::string *a4)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableString::VariableString(a2, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF4F424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],BOOL,std::allocator<siri::intelligence::VariableBoolean>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22AF4F48C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],BOOL,std::allocator<siri::intelligence::VariableBoolean>,0>(_QWORD *a1, char *__s, char *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24F542548;
  a1[1] = 0;
  std::allocator<siri::intelligence::VariableBoolean>::construct[abi:ne180100]<siri::intelligence::VariableBoolean,char const(&)[1],BOOL>((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_22AF4F4F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableBoolean>::construct[abi:ne180100]<siri::intelligence::VariableBoolean,char const(&)[1],BOOL>(int a1, uint64_t a2, char *__s, char *a4)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableBoolean::VariableBoolean(a2, &__p, *a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF4F558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0x333333333333334)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  v3 = 5 * a2;
  result = (char *)operator new(80 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v3];
  return result;
}

_QWORD *std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AF4F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (std::string *)(a3 + v6);
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v10 = (std::string *)(a3 + v6 + 24);
      v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      *(_BYTE *)(a3 + v6 + 48) = *(_BYTE *)(a1 + v6 + 48);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22AF4F704(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(char *)(v1 + v2 + 23) < 0)
    operator delete(*(void **)(v1 + v2));
  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<siri::intelligence::FunctionDefinition>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<siri::intelligence::FunctionDefinition>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100](uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD v17[2];
  char v18;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v2 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v3 = qword_253F46378;
  if ((uint64_t *)qword_253F46378 != &qword_253F46380)
  {
    while (1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v2)
        break;
      v5 = v2;
      if (v4)
      {
        do
        {
          v6 = v4;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        do
        {
          v6 = (uint64_t)v5[2];
          v7 = *(_QWORD *)v6 == (_QWORD)v5;
          v5 = (uint64_t **)v6;
        }
        while (v7);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v6 + 32), (const void **)(v3 + 32)))
      {
        if (!*v2)
          goto LABEL_9;
LABEL_11:
        v19 = (_QWORD *)v6;
        v8 = (uint64_t **)(v6 + 8);
        goto LABEL_13;
      }
      v8 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v19, (const void **)(v3 + 32));
LABEL_13:
      if (!*v8)
        goto LABEL_14;
LABEL_24:
      v14 = *(uint64_t **)(v3 + 8);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = *(uint64_t **)(v3 + 16);
          v7 = *v15 == v3;
          v3 = (uint64_t)v15;
        }
        while (!v7);
      }
      v3 = (uint64_t)v15;
      if (v15 == &qword_253F46380)
        return a1;
    }
    v6 = (uint64_t)v2;
    if (!v4)
    {
LABEL_9:
      v19 = v2;
      v8 = v2;
LABEL_14:
      v9 = (char *)operator new(0x88uLL);
      v10 = v9;
      v17[0] = v9;
      v17[1] = v2;
      v18 = 0;
      if (*(char *)(v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)(v3 + 32), *(_QWORD *)(v3 + 40));
      }
      else
      {
        v11 = *(_OWORD *)(v3 + 32);
        *((_QWORD *)v9 + 6) = *(_QWORD *)(v3 + 48);
        *((_OWORD *)v9 + 2) = v11;
      }
      if (*(char *)(v3 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 56), *(const std::string::value_type **)(v3 + 56), *(_QWORD *)(v3 + 64));
      }
      else
      {
        v12 = *(_OWORD *)(v3 + 56);
        *((_QWORD *)v10 + 9) = *(_QWORD *)(v3 + 72);
        *(_OWORD *)(v10 + 56) = v12;
      }
      *((_QWORD *)v10 + 10) = *(_QWORD *)(v3 + 80);
      if (*(char *)(v3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 88), *(const std::string::value_type **)(v3 + 88), *(_QWORD *)(v3 + 96));
      }
      else
      {
        v13 = *(_OWORD *)(v3 + 88);
        *((_QWORD *)v10 + 13) = *(_QWORD *)(v3 + 104);
        *(_OWORD *)(v10 + 88) = v13;
      }
      *((_QWORD *)v10 + 14) = 0;
      *((_QWORD *)v10 + 15) = 0;
      *((_QWORD *)v10 + 16) = 0;
      std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((_QWORD *)v10 + 14, *(_QWORD *)(v3 + 112), *(_QWORD *)(v3 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 120) - *(_QWORD *)(v3 + 112)) >> 3));
      v18 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v8, (uint64_t *)v10);
      v17[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      goto LABEL_24;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_22AF4FA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  _QWORD **v12;

  if (*(char *)(v9 + 79) < 0)
    operator delete(*v11);
  if (*(char *)(v9 + 55) < 0)
    operator delete(*v10);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*v12);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t i;

  v8 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492)
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v9;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v12 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, v12, v8);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)v12, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v11;
    return;
  }
  v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, a3, v8);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v13;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i))
  {
    i -= 56;
  }
  *(_QWORD *)(a1 + 8) = v13;
}

void sub_22AF4FD24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22AF4FD2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this[2].__r_.__value_.__s.__data_[0] = v5[2].__r_.__value_.__s.__data_[0];
      this = (std::string *)((char *)this + 56);
      v5 = (std::string *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  int v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  const void *v25;
  unint64_t v26;
  __int128 v27;
  void **v28;
  const void *v29;
  void *v30;
  void **v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  const void **v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  __int128 *v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  BOOL v52;
  __int128 *v53;
  const void **v54;
  int v55;
  size_t v56;
  const void *v57;
  size_t v58;
  int v59;
  BOOL v60;
  const void **v61;
  int v62;
  size_t v63;
  const void *v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  void **v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void **v72;
  __int128 v73;
  BOOL v74;
  __int128 v75;
  const void *v76;
  __int128 v77;
  __int128 v78;
  const void *v79;
  size_t v80;
  const void **v81;
  size_t v82;
  void *v83;
  void **v84;
  size_t v85;
  const void **v86;
  size_t v87;
  int v88;
  BOOL v89;
  const void **v90;
  int v91;
  size_t v92;
  const void *v93;
  size_t v94;
  int v95;
  BOOL v96;
  const void **v97;
  int v98;
  size_t v99;
  const void *v100;
  size_t v101;
  int v102;
  BOOL v103;
  __int128 *v104;
  const void **v105;
  int v106;
  size_t v107;
  const void *v108;
  size_t v109;
  int v110;
  BOOL v111;
  const void **v112;
  int v113;
  size_t v114;
  const void *v115;
  size_t v116;
  int v117;
  _BOOL4 v118;
  int v119;
  size_t v120;
  const void *v121;
  size_t v122;
  int v123;
  BOOL v124;
  void **v125;
  void **v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void **v130;
  __int128 v131;
  const void **v132;
  const void **v133;
  const void **v134;
  int v135;
  int v136;
  size_t v137;
  const void **v138;
  size_t v139;
  const void *v140;
  size_t v141;
  int v142;
  _BOOL4 v143;
  const void **v144;
  uint64_t v145;
  const void **v146;
  const void **v147;
  int v148;
  int v149;
  size_t v150;
  const void **v151;
  size_t v152;
  const void *v153;
  size_t v154;
  int v155;
  _BOOL4 v156;
  __int128 v157;
  const void *v158;
  const void *v159;
  uint64_t v160;
  uint64_t v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  void *v167;
  void **v168;
  size_t v169;
  const void *v170;
  size_t v171;
  int v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  void **v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  uint64_t v181;
  int64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  const void *v187;
  int v188;
  const void *v189;
  size_t v190;
  const void *v191;
  size_t v192;
  const void *v193;
  size_t v194;
  int v195;
  _BOOL4 v196;
  BOOL v197;
  const void *v198;
  uint64_t v199;
  int v200;
  int v201;
  size_t v202;
  const void *v203;
  size_t v204;
  const void *v205;
  size_t v206;
  int v207;
  BOOL v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;
  void **v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  const void *v218;
  int v219;
  const void *v220;
  size_t v221;
  const void *v222;
  size_t v223;
  const void *v224;
  size_t v225;
  int v226;
  BOOL v227;
  _BOOL4 v228;
  BOOL v229;
  const void *v230;
  int v231;
  size_t v232;
  const void *v233;
  void *v234;
  void **v235;
  size_t v236;
  int v237;
  _BOOL4 v238;
  void **v239;
  __int128 v240;
  __int128 v241;
  int64_t v242;
  const void **v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  const void *v247;
  const void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  size_t v254;
  const void *v255;
  size_t v256;
  const void *v257;
  size_t v258;
  int v259;
  _BOOL4 v260;
  __int128 v261;
  void **v262;
  __int128 v263;
  void **v264;
  void **v265;
  int v266;
  __int128 v267;
  __int128 v268;
  const void **v269;
  void **v270;
  __int128 v271;
  const void **v272;
  __int128 v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  int v278;
  size_t v279;
  const void *v280;
  size_t v281;
  const void *v282;
  size_t v283;
  int v284;
  _BOOL4 v285;
  __int128 v286;
  __int128 v287;
  void *v288;
  void **v289;
  uint64_t v290;
  __int128 v291;
  void **v292;
  __int128 v293;
  int v294;
  size_t v295;
  const void *v296;
  size_t v297;
  int v298;
  BOOL v299;
  void **v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  const void *v306;
  _QWORD *v307;
  uint64_t v308;
  int v309;
  int v310;
  size_t v311;
  const void *v312;
  size_t v313;
  const void *v314;
  size_t v315;
  int v316;
  _BOOL4 v317;
  __int128 v318;
  const void *v319;
  const void *v320;
  _QWORD *v321;
  void **v322;
  void **v323;
  _QWORD *v324;
  size_t v325;
  _QWORD *v326;
  const void *v327;
  size_t v328;
  void *v329;
  void **v330;
  size_t v331;
  const void *v332;
  size_t v333;
  int v334;
  BOOL v335;
  void **v336;
  void **v337;
  __int128 v338;
  __int128 v339;
  const void **v340;
  const void **v341;
  unint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  uint64_t v346;
  const void **v347;
  int64_t v348;
  const void **v349;
  int64_t v350;
  void *v352[2];
  const void *v353;
  const void *v354;
  __int128 v355;
  const void *v356;
  __int128 v357;
  const void *v358;
  void **v359;
  void *v360[2];
  const void *v361;
  const void *v362;
  __int128 __p;
  const void *v364;
  __int128 v365;
  const void *v366;

LABEL_1:
  v349 = a2 - 10;
  v340 = a2 - 30;
  v341 = a2 - 20;
  v6 = a1;
  v347 = a2;
  while (2)
  {
    v7 = (uint64_t)a2 - v6;
    v8 = (uint64_t)((uint64_t)a2 - v6) >> 4;
    v9 = 0xCCCCCCCCCCCCCCCDLL * v8;
    a1 = v6;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v134 = (const void **)*(a2 - 10);
        v133 = a2 - 10;
        v132 = v134;
        v135 = *(char *)(v6 + 23);
        v136 = *((char *)v133 + 23);
        if (v136 >= 0)
          v137 = *((unsigned __int8 *)v133 + 23);
        else
          v137 = (size_t)v133[1];
        if (v136 >= 0)
          v138 = v133;
        else
          v138 = v132;
        if (v135 >= 0)
          v139 = *(unsigned __int8 *)(v6 + 23);
        else
          v139 = *(_QWORD *)(v6 + 8);
        if (v135 >= 0)
          v140 = (const void *)v6;
        else
          v140 = *(const void **)v6;
        if (v139 >= v137)
          v141 = v137;
        else
          v141 = v139;
        v142 = memcmp(v138, v140, v141);
        v143 = v137 < v139;
        if (v142)
          v143 = v142 < 0;
        if (v143)
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v6, (__int128 *)v133);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6, v6 + 80, v349);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6, v6 + 80, v6 + 160, v349);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(v6, v6 + 80, v6 + 160, v6 + 240, v349);
        return;
      default:
        v10 = v6;
        if (v7 > 1919)
        {
          if (!a3)
          {
            if ((const void **)v6 != a2)
            {
              v179 = (v9 - 2) >> 1;
              v343 = 0xCCCCCCCCCCCCCCCDLL * v8;
              v342 = v7;
              v180 = v179;
              v181 = a1;
              v350 = v179;
              do
              {
                v182 = v180;
                if (v179 >= v180)
                {
                  v183 = (2 * v180) | 1;
                  v184 = v181 + 80 * v183;
                  v185 = 2 * v180 + 2;
                  v348 = v180;
                  if (v185 >= (uint64_t)v9)
                  {
                    v198 = *(const void **)v184;
                  }
                  else
                  {
                    v186 = *(char *)(v184 + 103);
                    v187 = *(const void **)(v184 + 80);
                    v188 = *(char *)(v184 + 23);
                    v189 = *(const void **)v184;
                    if (v188 >= 0)
                      v190 = *(unsigned __int8 *)(v184 + 23);
                    else
                      v190 = *(_QWORD *)(v184 + 8);
                    if (v188 >= 0)
                      v191 = (const void *)v184;
                    else
                      v191 = *(const void **)v184;
                    if (v186 >= 0)
                      v192 = *(unsigned __int8 *)(v184 + 103);
                    else
                      v192 = *(_QWORD *)(v184 + 88);
                    if (v186 >= 0)
                      v193 = (const void *)(v184 + 80);
                    else
                      v193 = *(const void **)(v184 + 80);
                    if (v192 >= v190)
                      v194 = v190;
                    else
                      v194 = v192;
                    v195 = memcmp(v191, v193, v194);
                    v196 = v190 < v192;
                    if (v195)
                      v196 = v195 < 0;
                    v197 = !v196;
                    if (v196)
                      v198 = v187;
                    else
                      v198 = v189;
                    v181 = a1;
                    if (!v197)
                    {
                      v184 += 80;
                      v183 = v185;
                    }
                  }
                  v199 = v181 + 80 * v182;
                  v200 = *(char *)(v199 + 23);
                  v201 = *(char *)(v184 + 23);
                  if (v201 >= 0)
                    v202 = *(unsigned __int8 *)(v184 + 23);
                  else
                    v202 = *(_QWORD *)(v184 + 8);
                  if (v201 >= 0)
                    v203 = (const void *)v184;
                  else
                    v203 = v198;
                  if (v200 >= 0)
                    v204 = *(unsigned __int8 *)(v199 + 23);
                  else
                    v204 = *(_QWORD *)(v199 + 8);
                  if (v200 >= 0)
                    v205 = (const void *)(v181 + 80 * v182);
                  else
                    v205 = *(const void **)v199;
                  if (v204 >= v202)
                    v206 = v202;
                  else
                    v206 = v204;
                  v207 = memcmp(v203, v205, v206);
                  v181 = a1;
                  v208 = v202 < v204;
                  if (v207)
                    v208 = v207 < 0;
                  if (!v208)
                  {
                    v209 = *(_OWORD *)v199;
                    v361 = *(const void **)(v199 + 16);
                    *(_OWORD *)v360 = v209;
                    *(_QWORD *)(v199 + 8) = 0;
                    *(_QWORD *)(v199 + 16) = 0;
                    *(_QWORD *)v199 = 0;
                    v210 = a1 + 80 * v182;
                    v362 = *(const void **)(v210 + 24);
                    v211 = *(_OWORD *)(v210 + 32);
                    v364 = *(const void **)(v210 + 48);
                    __p = v211;
                    *(_QWORD *)(v210 + 40) = 0;
                    *(_QWORD *)(v210 + 48) = 0;
                    *(_QWORD *)(v210 + 32) = 0;
                    v365 = *(_OWORD *)(v210 + 56);
                    v366 = *(const void **)(v210 + 72);
                    *(_QWORD *)(v210 + 56) = 0;
                    *(_QWORD *)(v210 + 64) = 0;
                    *(_QWORD *)(v210 + 72) = 0;
                    do
                    {
                      v212 = v184;
                      if (*(char *)(v199 + 23) < 0)
                        operator delete(*(void **)v199);
                      v213 = *(_OWORD *)v184;
                      *(_QWORD *)(v199 + 16) = *(_QWORD *)(v184 + 16);
                      *(_OWORD *)v199 = v213;
                      *(_BYTE *)(v184 + 23) = 0;
                      *(_BYTE *)v184 = 0;
                      *(_QWORD *)(v199 + 24) = *(_QWORD *)(v184 + 24);
                      v214 = (void **)(v199 + 32);
                      if (*(char *)(v199 + 55) < 0)
                        operator delete(*v214);
                      v215 = *(_OWORD *)(v184 + 32);
                      *(_QWORD *)(v199 + 48) = *(_QWORD *)(v184 + 48);
                      *(_OWORD *)v214 = v215;
                      *(_BYTE *)(v184 + 55) = 0;
                      *(_BYTE *)(v184 + 32) = 0;
                      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v199 + 56));
                      *(_OWORD *)(v199 + 56) = *(_OWORD *)(v184 + 56);
                      *(_QWORD *)(v199 + 72) = *(_QWORD *)(v184 + 72);
                      *(_QWORD *)(v184 + 56) = 0;
                      *(_QWORD *)(v184 + 64) = 0;
                      *(_QWORD *)(v184 + 72) = 0;
                      if (v179 < v183)
                        break;
                      v216 = (2 * v183) | 1;
                      v184 = v181 + 80 * v216;
                      v183 = 2 * v183 + 2;
                      if (v183 >= (uint64_t)v9)
                      {
                        v230 = *(const void **)v184;
                        v183 = v216;
                      }
                      else
                      {
                        v217 = *(char *)(v184 + 103);
                        v218 = *(const void **)(v184 + 80);
                        v219 = *(char *)(v184 + 23);
                        v220 = *(const void **)v184;
                        if (v219 >= 0)
                          v221 = *(unsigned __int8 *)(v184 + 23);
                        else
                          v221 = *(_QWORD *)(v184 + 8);
                        if (v219 >= 0)
                          v222 = (const void *)(v181 + 80 * v216);
                        else
                          v222 = *(const void **)v184;
                        if (v217 >= 0)
                          v223 = *(unsigned __int8 *)(v184 + 103);
                        else
                          v223 = *(_QWORD *)(v184 + 88);
                        if (v217 >= 0)
                          v224 = (const void *)(v184 + 80);
                        else
                          v224 = *(const void **)(v184 + 80);
                        if (v223 >= v221)
                          v225 = v221;
                        else
                          v225 = v223;
                        v226 = memcmp(v222, v224, v225);
                        v227 = v221 >= v223;
                        v9 = v343;
                        v228 = !v227;
                        if (v226)
                          v228 = v226 < 0;
                        v229 = !v228;
                        v230 = v228 ? v218 : v220;
                        v179 = v350;
                        if (v229)
                          v183 = v216;
                        else
                          v184 += 80;
                      }
                      v231 = *(char *)(v184 + 23);
                      if (v231 >= 0)
                        v232 = *(unsigned __int8 *)(v184 + 23);
                      else
                        v232 = *(_QWORD *)(v184 + 8);
                      if (v231 >= 0)
                        v233 = (const void *)v184;
                      else
                        v233 = v230;
                      if (SHIBYTE(v361) >= 0)
                        v234 = (void *)HIBYTE(v361);
                      else
                        v234 = v360[1];
                      if (SHIBYTE(v361) >= 0)
                        v235 = v360;
                      else
                        v235 = (void **)v360[0];
                      if ((unint64_t)v234 >= v232)
                        v236 = v232;
                      else
                        v236 = (size_t)v234;
                      v237 = memcmp(v233, v235, v236);
                      v238 = v232 < (unint64_t)v234;
                      if (v237)
                        v238 = v237 < 0;
                      v199 = v212;
                      v181 = a1;
                    }
                    while (!v238);
                    if (*(char *)(v212 + 23) < 0)
                      operator delete(*(void **)v212);
                    v239 = (void **)(v212 + 32);
                    v240 = *(_OWORD *)v360;
                    *(_QWORD *)(v212 + 16) = v361;
                    *(_OWORD *)v212 = v240;
                    HIBYTE(v361) = 0;
                    LOBYTE(v360[0]) = 0;
                    *(_QWORD *)(v212 + 24) = v362;
                    if (*(char *)(v212 + 55) < 0)
                      operator delete(*v239);
                    v241 = __p;
                    *(_QWORD *)(v212 + 48) = v364;
                    *(_OWORD *)v239 = v241;
                    HIBYTE(v364) = 0;
                    LOBYTE(__p) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v212 + 56));
                    *(_OWORD *)(v212 + 56) = v365;
                    *(_QWORD *)(v212 + 72) = v366;
                    v365 = 0uLL;
                    v366 = 0;
                    v352[0] = &v365;
                    std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v352);
                    if (SHIBYTE(v364) < 0)
                      operator delete((void *)__p);
                    v182 = v348;
                    if (SHIBYTE(v361) < 0)
                      operator delete(v360[0]);
                  }
                }
                v180 = v182 - 1;
              }
              while (v182);
              v242 = v342 / 0x50;
              v344 = (_QWORD *)(v181 + 56);
              v346 = v181 + 32;
              v243 = v347;
              do
              {
                v244 = 0;
                v245 = a1;
                v246 = *(_OWORD *)a1;
                v247 = *(const void **)(a1 + 24);
                v353 = *(const void **)(a1 + 16);
                *(_OWORD *)v352 = v246;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v354 = v247;
                v248 = *(const void **)(v346 + 16);
                v355 = *(_OWORD *)v346;
                v356 = v248;
                *(_QWORD *)(v346 + 8) = 0;
                *(_QWORD *)(v346 + 16) = 0;
                *(_QWORD *)v346 = 0;
                v357 = *(_OWORD *)(a1 + 56);
                v358 = *(const void **)(a1 + 72);
                *v344 = 0;
                v344[1] = 0;
                v344[2] = 0;
                do
                {
                  v249 = v245 + 80 * v244 + 80;
                  v250 = 2 * v244;
                  v244 = (2 * v244) | 1;
                  v251 = v250 + 2;
                  if (v250 + 2 < v242)
                  {
                    v252 = *(char *)(v249 + 103);
                    v253 = *(char *)(v249 + 23);
                    if (v253 >= 0)
                      v254 = *(unsigned __int8 *)(v249 + 23);
                    else
                      v254 = *(_QWORD *)(v249 + 8);
                    if (v253 >= 0)
                      v255 = (const void *)v249;
                    else
                      v255 = *(const void **)v249;
                    if (v252 >= 0)
                      v256 = *(unsigned __int8 *)(v249 + 103);
                    else
                      v256 = *(_QWORD *)(v249 + 88);
                    if (v252 >= 0)
                      v257 = (const void *)(v249 + 80);
                    else
                      v257 = *(const void **)(v249 + 80);
                    if (v256 >= v254)
                      v258 = v254;
                    else
                      v258 = v256;
                    v259 = memcmp(v255, v257, v258);
                    v260 = v254 < v256;
                    if (v259)
                      v260 = v259 < 0;
                    if (v260)
                    {
                      v249 += 80;
                      v244 = v251;
                    }
                  }
                  if (*(char *)(v245 + 23) < 0)
                    operator delete(*(void **)v245);
                  v261 = *(_OWORD *)v249;
                  *(_QWORD *)(v245 + 16) = *(_QWORD *)(v249 + 16);
                  *(_OWORD *)v245 = v261;
                  *(_BYTE *)(v249 + 23) = 0;
                  *(_BYTE *)v249 = 0;
                  *(_QWORD *)(v245 + 24) = *(_QWORD *)(v249 + 24);
                  v262 = (void **)(v245 + 32);
                  if (*(char *)(v245 + 55) < 0)
                    operator delete(*v262);
                  v263 = *(_OWORD *)(v249 + 32);
                  *(_QWORD *)(v245 + 48) = *(_QWORD *)(v249 + 48);
                  *(_OWORD *)v262 = v263;
                  *(_BYTE *)(v249 + 55) = 0;
                  *(_BYTE *)(v249 + 32) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v245 + 56));
                  *(_OWORD *)(v245 + 56) = *(_OWORD *)(v249 + 56);
                  *(_QWORD *)(v245 + 72) = *(_QWORD *)(v249 + 72);
                  *(_QWORD *)(v249 + 56) = 0;
                  *(_QWORD *)(v249 + 64) = 0;
                  *(_QWORD *)(v249 + 72) = 0;
                  v245 = v249;
                }
                while (v244 <= (uint64_t)((unint64_t)(v242 - 2) >> 1));
                v264 = (void **)(v249 + 32);
                v265 = (void **)(v243 - 10);
                v266 = *(char *)(v249 + 23);
                if ((const void **)v249 == v243 - 10)
                {
                  if (v266 < 0)
                    operator delete(*(void **)v249);
                  v272 = v243 - 10;
                  v303 = *(_OWORD *)v352;
                  *(_QWORD *)(v249 + 16) = v353;
                  *(_OWORD *)v249 = v303;
                  HIBYTE(v353) = 0;
                  LOBYTE(v352[0]) = 0;
                  *(_QWORD *)(v249 + 24) = v354;
                  if (*(char *)(v249 + 55) < 0)
                    operator delete(*v264);
                  v304 = v355;
                  *(_QWORD *)(v249 + 48) = v356;
                  *(_OWORD *)v264 = v304;
                  HIBYTE(v356) = 0;
                  LOBYTE(v355) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v249 + 56));
                  *(_OWORD *)(v249 + 56) = v357;
                  *(_QWORD *)(v249 + 72) = v358;
                  v357 = 0uLL;
                  v358 = 0;
                }
                else
                {
                  if (v266 < 0)
                    operator delete(*(void **)v249);
                  v267 = *(_OWORD *)v265;
                  *(_QWORD *)(v249 + 16) = *(v243 - 8);
                  *(_OWORD *)v249 = v267;
                  *((_BYTE *)v243 - 57) = 0;
                  *((_BYTE *)v243 - 80) = 0;
                  *(_QWORD *)(v249 + 24) = *(v243 - 7);
                  if (*(char *)(v249 + 55) < 0)
                    operator delete(*v264);
                  v268 = *((_OWORD *)v243 - 3);
                  *(_QWORD *)(v249 + 48) = *(v243 - 4);
                  *(_OWORD *)v264 = v268;
                  *((_BYTE *)v243 - 25) = 0;
                  *((_BYTE *)v243 - 48) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v249 + 56));
                  v269 = v243 - 3;
                  *(_OWORD *)(v249 + 56) = *(_OWORD *)(v243 - 3);
                  *(_QWORD *)(v249 + 72) = *(v243 - 1);
                  *v269 = 0;
                  v269[1] = 0;
                  v269[2] = 0;
                  if (*((char *)v243 - 57) < 0)
                    operator delete(*v265);
                  v270 = (void **)(v243 - 6);
                  v271 = *(_OWORD *)v352;
                  *(v243 - 8) = v353;
                  v272 = v243 - 10;
                  *(_OWORD *)v265 = v271;
                  HIBYTE(v353) = 0;
                  LOBYTE(v352[0]) = 0;
                  *(v243 - 7) = v354;
                  if (*((char *)v243 - 25) < 0)
                    operator delete(*v270);
                  v273 = v355;
                  *(v243 - 4) = v356;
                  *(_OWORD *)v270 = v273;
                  HIBYTE(v356) = 0;
                  LOBYTE(v355) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)v243 - 3);
                  *(_OWORD *)(v243 - 3) = v357;
                  *(v243 - 1) = v358;
                  v357 = 0uLL;
                  v358 = 0;
                  v274 = v249 + 80 - a1;
                  if (v274 >= 81)
                  {
                    v275 = (v274 / 0x50uLL - 2) >> 1;
                    v276 = a1 + 80 * v275;
                    v277 = *(char *)(v249 + 23);
                    v278 = *(char *)(v276 + 23);
                    if (v278 >= 0)
                      v279 = *(unsigned __int8 *)(v276 + 23);
                    else
                      v279 = *(_QWORD *)(v276 + 8);
                    if (v278 >= 0)
                      v280 = (const void *)(a1 + 80 * v275);
                    else
                      v280 = *(const void **)v276;
                    if (v277 >= 0)
                      v281 = *(unsigned __int8 *)(v249 + 23);
                    else
                      v281 = *(_QWORD *)(v249 + 8);
                    if (v277 >= 0)
                      v282 = (const void *)v249;
                    else
                      v282 = *(const void **)v249;
                    if (v281 >= v279)
                      v283 = v279;
                    else
                      v283 = v281;
                    v284 = memcmp(v280, v282, v283);
                    v285 = v279 < v281;
                    if (v284)
                      v285 = v284 < 0;
                    if (v285)
                    {
                      v286 = *(_OWORD *)v249;
                      v361 = *(const void **)(v249 + 16);
                      *(_OWORD *)v360 = v286;
                      *(_QWORD *)(v249 + 8) = 0;
                      *(_QWORD *)(v249 + 16) = 0;
                      *(_QWORD *)v249 = 0;
                      v362 = *(const void **)(v249 + 24);
                      v287 = *(_OWORD *)v264;
                      v364 = *(const void **)(v249 + 48);
                      __p = v287;
                      *(_QWORD *)(v249 + 40) = 0;
                      *(_QWORD *)(v249 + 48) = 0;
                      *v264 = 0;
                      v365 = *(_OWORD *)(v249 + 56);
                      v366 = *(const void **)(v249 + 72);
                      *(_QWORD *)(v249 + 56) = 0;
                      *(_QWORD *)(v249 + 64) = 0;
                      *(_QWORD *)(v249 + 72) = 0;
                      if (SHIBYTE(v361) >= 0)
                        v288 = (void *)HIBYTE(v361);
                      else
                        v288 = v360[1];
                      if (SHIBYTE(v361) >= 0)
                        v289 = v360;
                      else
                        v289 = (void **)v360[0];
                      do
                      {
                        v290 = v276;
                        if (*(char *)(v249 + 23) < 0)
                          operator delete(*(void **)v249);
                        v291 = *(_OWORD *)v276;
                        *(_QWORD *)(v249 + 16) = *(_QWORD *)(v276 + 16);
                        *(_OWORD *)v249 = v291;
                        *(_BYTE *)(v276 + 23) = 0;
                        *(_BYTE *)v276 = 0;
                        *(_QWORD *)(v249 + 24) = *(_QWORD *)(v276 + 24);
                        v292 = (void **)(v249 + 32);
                        if (*(char *)(v249 + 55) < 0)
                          operator delete(*v292);
                        v293 = *(_OWORD *)(v276 + 32);
                        *(_QWORD *)(v249 + 48) = *(_QWORD *)(v276 + 48);
                        *(_OWORD *)v292 = v293;
                        *(_BYTE *)(v276 + 55) = 0;
                        *(_BYTE *)(v276 + 32) = 0;
                        std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v249 + 56));
                        *(_OWORD *)(v249 + 56) = *(_OWORD *)(v276 + 56);
                        *(_QWORD *)(v249 + 72) = *(_QWORD *)(v276 + 72);
                        *(_QWORD *)(v276 + 56) = 0;
                        *(_QWORD *)(v276 + 64) = 0;
                        *(_QWORD *)(v276 + 72) = 0;
                        if (!v275)
                          break;
                        v275 = (v275 - 1) >> 1;
                        v276 = a1 + 80 * v275;
                        v294 = *(char *)(v276 + 23);
                        if (v294 >= 0)
                          v295 = *(unsigned __int8 *)(v276 + 23);
                        else
                          v295 = *(_QWORD *)(v276 + 8);
                        if (v294 >= 0)
                          v296 = (const void *)(a1 + 80 * v275);
                        else
                          v296 = *(const void **)v276;
                        if ((unint64_t)v288 >= v295)
                          v297 = v295;
                        else
                          v297 = (size_t)v288;
                        v298 = memcmp(v296, v289, v297);
                        v299 = v295 < (unint64_t)v288;
                        if (v298)
                          v299 = v298 < 0;
                        v249 = v290;
                      }
                      while (v299);
                      if (*(char *)(v290 + 23) < 0)
                        operator delete(*(void **)v290);
                      v300 = (void **)(v290 + 32);
                      v301 = *(_OWORD *)v360;
                      *(_QWORD *)(v290 + 16) = v361;
                      *(_OWORD *)v290 = v301;
                      HIBYTE(v361) = 0;
                      LOBYTE(v360[0]) = 0;
                      *(_QWORD *)(v290 + 24) = v362;
                      if (*(char *)(v290 + 55) < 0)
                        operator delete(*v300);
                      v302 = __p;
                      *(_QWORD *)(v290 + 48) = v364;
                      *(_OWORD *)v300 = v302;
                      HIBYTE(v364) = 0;
                      LOBYTE(__p) = 0;
                      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v290 + 56));
                      *(_OWORD *)(v290 + 56) = v365;
                      *(_QWORD *)(v290 + 72) = v366;
                      v365 = 0uLL;
                      v366 = 0;
                      v359 = (void **)&v365;
                      std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v359);
                      if (SHIBYTE(v364) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v361) < 0)
                        operator delete(v360[0]);
                    }
                  }
                }
                v360[0] = &v357;
                std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v360);
                if (SHIBYTE(v356) < 0)
                  operator delete((void *)v355);
                v243 = v272;
                if (SHIBYTE(v353) < 0)
                  operator delete(v352[0]);
              }
              while (v242-- > 2);
            }
            return;
          }
          v11 = v9 >> 1;
          v12 = (__int128 *)(v6 + 80 * (v9 >> 1));
          if ((unint64_t)v7 < 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>((uint64_t)v12, v6, v349);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6, (uint64_t)v12, v349);
            v13 = 5 * v11;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6 + 80, v6 + 16 * v13 - 80, v341);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6 + 160, v6 + 80 + 16 * v13, v340);
            a2 = v347;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6 + 16 * v13 - 80, (uint64_t)v12, (const void **)(v6 + 80 + 16 * v13));
            std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v6, v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(char *)(v6 + 23);
            v15 = *(char *)(v6 - 57);
            if (v15 >= 0)
              v16 = *(unsigned __int8 *)(v6 - 57);
            else
              v16 = *(_QWORD *)(v6 - 72);
            if (v15 >= 0)
              v17 = (const void *)(v6 - 80);
            else
              v17 = *(const void **)(v6 - 80);
            if (v14 >= 0)
              v18 = *(unsigned __int8 *)(v6 + 23);
            else
              v18 = *(_QWORD *)(v6 + 8);
            if (v14 >= 0)
              v19 = (const void *)v6;
            else
              v19 = *(const void **)v6;
            if (v18 >= v16)
              v20 = v16;
            else
              v20 = v18;
            v21 = memcmp(v17, v19, v20);
            v22 = v16 < v18;
            if (v21)
              v22 = v21 < 0;
            if (!v22)
            {
              v75 = *(_OWORD *)v6;
              v76 = *(const void **)(v6 + 24);
              v361 = *(const void **)(v6 + 16);
              *(_OWORD *)v360 = v75;
              *(_QWORD *)(v6 + 8) = 0;
              *(_QWORD *)(v6 + 16) = 0;
              *(_QWORD *)v6 = 0;
              v77 = *(_OWORD *)(v6 + 32);
              v364 = *(const void **)(v6 + 48);
              __p = v77;
              *(_QWORD *)(v6 + 40) = 0;
              *(_QWORD *)(v6 + 48) = 0;
              v78 = *(_OWORD *)(v6 + 56);
              *(_QWORD *)(v6 + 32) = 0;
              v365 = v78;
              v79 = *(const void **)(v6 + 72);
              v362 = v76;
              v366 = v79;
              *(_QWORD *)(v6 + 56) = 0;
              *(_QWORD *)(v6 + 64) = 0;
              *(_QWORD *)(v6 + 72) = 0;
              v80 = *((unsigned __int8 *)a2 - 57);
              v81 = (const void **)*(a2 - 10);
              v82 = (size_t)*(a2 - 9);
              if (SHIBYTE(v361) >= 0)
                v83 = (void *)HIBYTE(v361);
              else
                v83 = v360[1];
              if (SHIBYTE(v361) >= 0)
                v84 = v360;
              else
                v84 = (void **)v360[0];
              if ((v80 & 0x80u) == 0)
                v85 = v80;
              else
                v85 = v82;
              if ((v80 & 0x80u) == 0)
                v86 = v349;
              else
                v86 = v81;
              if (v85 >= (unint64_t)v83)
                v87 = (size_t)v83;
              else
                v87 = v85;
              v88 = memcmp(v84, v86, v87);
              v89 = (unint64_t)v83 < v85;
              if (v88)
                v89 = v88 < 0;
              if (v89)
              {
                v90 = (const void **)(v6 + 80);
                do
                {
                  v91 = *((char *)v90 + 23);
                  if (v91 >= 0)
                    v92 = *((unsigned __int8 *)v90 + 23);
                  else
                    v92 = (size_t)v90[1];
                  if (v91 >= 0)
                    v93 = v90;
                  else
                    v93 = *v90;
                  if (v92 >= (unint64_t)v83)
                    v94 = (size_t)v83;
                  else
                    v94 = v92;
                  v95 = memcmp(v84, v93, v94);
                  v96 = (unint64_t)v83 < v92;
                  if (v95)
                    v96 = v95 < 0;
                  v90 += 10;
                }
                while (!v96);
                v6 = (unint64_t)(v90 - 10);
              }
              else
              {
                v97 = (const void **)(v6 + 80);
                do
                {
                  v6 = (unint64_t)v97;
                  if (v97 >= v347)
                    break;
                  v98 = *((char *)v97 + 23);
                  if (v98 >= 0)
                    v99 = *((unsigned __int8 *)v97 + 23);
                  else
                    v99 = (size_t)v97[1];
                  if (v98 >= 0)
                    v100 = v97;
                  else
                    v100 = *v97;
                  if (v99 >= (unint64_t)v83)
                    v101 = (size_t)v83;
                  else
                    v101 = v99;
                  v102 = memcmp(v84, v100, v101);
                  v103 = v102 < 0;
                  if (!v102)
                    v103 = (unint64_t)v83 < v99;
                  v97 = (const void **)(v6 + 80);
                }
                while (!v103);
              }
              v104 = (__int128 *)v347;
              if (v6 >= (unint64_t)v347)
                goto LABEL_184;
              v105 = v349;
              do
              {
                v106 = *((char *)v105 + 23);
                if (v106 >= 0)
                  v107 = *((unsigned __int8 *)v105 + 23);
                else
                  v107 = (size_t)v105[1];
                if (v106 >= 0)
                  v108 = v105;
                else
                  v108 = *v105;
                if (v107 >= (unint64_t)v83)
                  v109 = (size_t)v83;
                else
                  v109 = v107;
                v110 = memcmp(v84, v108, v109);
                v111 = (unint64_t)v83 < v107;
                if (v110)
                  v111 = v110 < 0;
                v105 -= 10;
              }
              while (v111);
              while (1)
              {
                v104 = (__int128 *)(v105 + 10);
LABEL_184:
                if (v6 >= (unint64_t)v104)
                  break;
                std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v6, v104);
                v112 = (const void **)(v6 + 80);
                do
                {
                  v113 = *((char *)v112 + 23);
                  if (v113 >= 0)
                    v114 = *((unsigned __int8 *)v112 + 23);
                  else
                    v114 = (size_t)v112[1];
                  if (v113 >= 0)
                    v115 = v112;
                  else
                    v115 = *v112;
                  if (v114 >= (unint64_t)v83)
                    v116 = (size_t)v83;
                  else
                    v116 = v114;
                  v117 = memcmp(v84, v115, v116);
                  v118 = (unint64_t)v83 < v114;
                  if (v117)
                    v118 = v117 < 0;
                  v112 += 10;
                }
                while (!v118);
                v6 = (unint64_t)(v112 - 10);
                v105 = (const void **)(v104 - 5);
                do
                {
                  v119 = *((char *)v105 + 23);
                  if (v119 >= 0)
                    v120 = *((unsigned __int8 *)v105 + 23);
                  else
                    v120 = (size_t)v105[1];
                  if (v119 >= 0)
                    v121 = v105;
                  else
                    v121 = *v105;
                  if (v120 >= (unint64_t)v83)
                    v122 = (size_t)v83;
                  else
                    v122 = v120;
                  v123 = memcmp(v84, v121, v122);
                  v124 = (unint64_t)v83 < v120;
                  if (v123)
                    v124 = v123 < 0;
                  v105 -= 10;
                }
                while (v124);
              }
              v125 = (void **)(v6 - 80);
              a2 = v347;
              if (v6 - 80 != v10)
              {
                if (*(char *)(v10 + 23) < 0)
                  operator delete(*(void **)v10);
                v126 = (void **)(v10 + 32);
                v127 = *(_OWORD *)v125;
                *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 - 64);
                *(_OWORD *)v10 = v127;
                *(_BYTE *)(v6 - 57) = 0;
                *(_BYTE *)(v6 - 80) = 0;
                *(_QWORD *)(v10 + 24) = *(_QWORD *)(v6 - 56);
                if (*(char *)(v10 + 55) < 0)
                  operator delete(*v126);
                v128 = *(_OWORD *)(v6 - 48);
                *(_QWORD *)(v10 + 48) = *(_QWORD *)(v6 - 32);
                *(_OWORD *)v126 = v128;
                *(_BYTE *)(v6 - 25) = 0;
                *(_BYTE *)(v6 - 48) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v10 + 56));
                *(_OWORD *)(v10 + 56) = *(_OWORD *)(v6 - 24);
                *(_QWORD *)(v10 + 72) = *(_QWORD *)(v6 - 8);
                *(_QWORD *)(v6 - 24) = 0;
                *(_QWORD *)(v6 - 16) = 0;
                *(_QWORD *)(v6 - 8) = 0;
              }
              if (*(char *)(v6 - 57) < 0)
                operator delete(*v125);
              v129 = *(_OWORD *)v360;
              *(_QWORD *)(v6 - 64) = v361;
              *(_OWORD *)v125 = v129;
              HIBYTE(v361) = 0;
              LOBYTE(v360[0]) = 0;
              *(_QWORD *)(v6 - 56) = v362;
              v130 = (void **)(v6 - 48);
              if (*(char *)(v6 - 25) < 0)
                operator delete(*v130);
              v131 = __p;
              *(_QWORD *)(v6 - 32) = v364;
              *(_OWORD *)v130 = v131;
              HIBYTE(v364) = 0;
              LOBYTE(__p) = 0;
              std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v6 - 24));
              *(_OWORD *)(v6 - 24) = v365;
              *(_QWORD *)(v6 - 8) = v366;
              v365 = 0uLL;
              v366 = 0;
              v352[0] = &v365;
              std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v352);
              if (SHIBYTE(v364) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v361) < 0)
                operator delete(v360[0]);
              goto LABEL_122;
            }
          }
          v23 = 0;
          v24 = *(_OWORD *)v6;
          v25 = *(const void **)(v6 + 24);
          v361 = *(const void **)(v6 + 16);
          *(_OWORD *)v360 = v24;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)v6 = 0;
          v26 = v6 + 32;
          v27 = *(_OWORD *)(v6 + 32);
          v364 = *(const void **)(v6 + 48);
          __p = v27;
          *(_QWORD *)(v6 + 40) = 0;
          *(_QWORD *)(v6 + 48) = 0;
          *(_QWORD *)(v6 + 32) = 0;
          v28 = (void **)(v6 + 56);
          v365 = *(_OWORD *)(v6 + 56);
          v29 = *(const void **)(v6 + 72);
          v362 = v25;
          v366 = v29;
          *(_QWORD *)(v6 + 56) = 0;
          *(_QWORD *)(v6 + 64) = 0;
          if (SHIBYTE(v361) >= 0)
            v30 = (void *)HIBYTE(v361);
          else
            v30 = v360[1];
          if (SHIBYTE(v361) >= 0)
            v31 = v360;
          else
            v31 = (void **)v360[0];
          *(_QWORD *)(v6 + 72) = 0;
          do
          {
            v32 = *(char *)(v6 + v23 + 103);
            if (v32 >= 0)
              v33 = *(unsigned __int8 *)(v6 + v23 + 103);
            else
              v33 = *(_QWORD *)(v6 + v23 + 88);
            if (v32 >= 0)
              v34 = (const void *)(v6 + v23 + 80);
            else
              v34 = *(const void **)(v6 + v23 + 80);
            if ((unint64_t)v30 >= v33)
              v35 = v33;
            else
              v35 = (size_t)v30;
            v36 = memcmp(v34, v31, v35);
            v37 = v33 < (unint64_t)v30;
            if (v36)
              v37 = v36 < 0;
            v23 += 80;
          }
          while (v37);
          v38 = v6 + v23;
          v39 = v349;
          if (v23 == 80)
          {
            v39 = v349;
            while (1)
            {
              v46 = (__int128 *)(v39 + 10);
              if (v38 >= (unint64_t)(v39 + 10))
                break;
              v47 = *((char *)v39 + 23);
              if (v47 >= 0)
                v48 = *((unsigned __int8 *)v39 + 23);
              else
                v48 = (size_t)v39[1];
              if (v47 >= 0)
                v49 = v39;
              else
                v49 = *v39;
              if ((unint64_t)v30 >= v48)
                v50 = v48;
              else
                v50 = (size_t)v30;
              v51 = memcmp(v49, v31, v50);
              v52 = v48 < (unint64_t)v30;
              if (v51)
                v52 = v51 < 0;
              v39 -= 10;
              if (v52)
                goto LABEL_74;
            }
          }
          else
          {
            do
            {
              v40 = *((char *)v39 + 23);
              if (v40 >= 0)
                v41 = *((unsigned __int8 *)v39 + 23);
              else
                v41 = (size_t)v39[1];
              if (v40 >= 0)
                v42 = v39;
              else
                v42 = *v39;
              if ((unint64_t)v30 >= v41)
                v43 = v41;
              else
                v43 = (size_t)v30;
              v44 = memcmp(v42, v31, v43);
              v45 = v41 < (unint64_t)v30;
              if (v44)
                v45 = v44 < 0;
              v39 -= 10;
            }
            while (!v45);
LABEL_74:
            v46 = (__int128 *)(v39 + 10);
          }
          v6 = v38;
          if (v38 < (unint64_t)v46)
          {
            v53 = v46;
            do
            {
              std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v6, v53);
              v54 = (const void **)(v6 + 80);
              do
              {
                v55 = *((char *)v54 + 23);
                if (v55 >= 0)
                  v56 = *((unsigned __int8 *)v54 + 23);
                else
                  v56 = (size_t)v54[1];
                if (v55 >= 0)
                  v57 = v54;
                else
                  v57 = *v54;
                if ((unint64_t)v30 >= v56)
                  v58 = v56;
                else
                  v58 = (size_t)v30;
                v59 = memcmp(v57, v31, v58);
                v60 = v56 < (unint64_t)v30;
                if (v59)
                  v60 = v59 < 0;
                v54 += 10;
              }
              while (v60);
              v6 = (unint64_t)(v54 - 10);
              v61 = (const void **)(v53 - 5);
              do
              {
                v62 = *((char *)v61 + 23);
                if (v62 >= 0)
                  v63 = *((unsigned __int8 *)v61 + 23);
                else
                  v63 = (size_t)v61[1];
                if (v62 >= 0)
                  v64 = v61;
                else
                  v64 = *v61;
                if ((unint64_t)v30 >= v63)
                  v65 = v63;
                else
                  v65 = (size_t)v30;
                v66 = memcmp(v64, v31, v65);
                v67 = v63 < (unint64_t)v30;
                if (v66)
                  v67 = v66 < 0;
                v61 -= 10;
              }
              while (!v67);
              v53 = (__int128 *)(v61 + 10);
            }
            while (v6 < (unint64_t)v53);
          }
          v68 = (void **)(v6 - 80);
          if (v6 - 80 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v69 = *(_OWORD *)v68;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 - 64);
            *(_OWORD *)a1 = v69;
            *(_BYTE *)(v6 - 57) = 0;
            *(_BYTE *)(v6 - 80) = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 56);
            if (*(char *)(a1 + 55) < 0)
              operator delete(*(void **)v26);
            v70 = *(_OWORD *)(v6 - 48);
            *(_QWORD *)(v26 + 16) = *(_QWORD *)(v6 - 32);
            *(_OWORD *)v26 = v70;
            *(_BYTE *)(v6 - 25) = 0;
            *(_BYTE *)(v6 - 48) = 0;
            std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v28);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(a1 + 72) = *(_QWORD *)(v6 - 8);
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 8) = 0;
          }
          if (*(char *)(v6 - 57) < 0)
            operator delete(*v68);
          v71 = *(_OWORD *)v360;
          *(_QWORD *)(v6 - 64) = v361;
          *(_OWORD *)v68 = v71;
          HIBYTE(v361) = 0;
          LOBYTE(v360[0]) = 0;
          *(_QWORD *)(v6 - 56) = v362;
          v72 = (void **)(v6 - 48);
          a2 = v347;
          if (*(char *)(v6 - 25) < 0)
            operator delete(*v72);
          v73 = __p;
          *(_QWORD *)(v6 - 32) = v364;
          *(_OWORD *)v72 = v73;
          HIBYTE(v364) = 0;
          LOBYTE(__p) = 0;
          std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v6 - 24));
          *(_OWORD *)(v6 - 24) = v365;
          *(_QWORD *)(v6 - 8) = v366;
          v365 = 0uLL;
          v366 = 0;
          v352[0] = &v365;
          std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v352);
          if (SHIBYTE(v364) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v361) < 0)
            operator delete(v360[0]);
          if (v38 < (unint64_t)v46)
            goto LABEL_121;
          v74 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, (const void **)(v6 - 80));
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v6, v347))
          {
            if (v74)
              continue;
LABEL_121:
            std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>(a1, v6 - 80, a3, a4 & 1);
LABEL_122:
            a4 = 0;
            continue;
          }
          a2 = (const void **)(v6 - 80);
          if (v74)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((const void **)v6 != a2)
          {
            v144 = (const void **)(v6 + 80);
            if ((const void **)(v6 + 80) != a2)
            {
              v145 = 0;
              v146 = (const void **)v6;
              do
              {
                v147 = v144;
                v148 = *((char *)v146 + 23);
                v149 = *((char *)v146 + 103);
                if (v149 >= 0)
                  v150 = *((unsigned __int8 *)v146 + 103);
                else
                  v150 = (size_t)v146[11];
                if (v149 >= 0)
                  v151 = v144;
                else
                  v151 = (const void **)v146[10];
                if (v148 >= 0)
                  v152 = *((unsigned __int8 *)v146 + 23);
                else
                  v152 = (size_t)v146[1];
                if (v148 >= 0)
                  v153 = v146;
                else
                  v153 = *v146;
                if (v152 >= v150)
                  v154 = v150;
                else
                  v154 = v152;
                v155 = memcmp(v151, v153, v154);
                v156 = v150 < v152;
                if (v155)
                  v156 = v155 < 0;
                if (v156)
                {
                  v157 = *(_OWORD *)v147;
                  v361 = v147[2];
                  *(_OWORD *)v360 = v157;
                  v147[1] = 0;
                  v147[2] = 0;
                  *v147 = 0;
                  v158 = v146[13];
                  __p = *((_OWORD *)v146 + 7);
                  v364 = v146[16];
                  v146[14] = 0;
                  v146[15] = 0;
                  v365 = *(_OWORD *)(v146 + 17);
                  v159 = v146[19];
                  v362 = v158;
                  v366 = v159;
                  v146[16] = 0;
                  v146[17] = 0;
                  v160 = v145;
                  v146[18] = 0;
                  v146[19] = 0;
                  while (1)
                  {
                    v161 = a1 + v160;
                    v162 = (void **)(a1 + v160 + 80);
                    if (*(char *)(a1 + v160 + 103) < 0)
                      operator delete(*v162);
                    *(_OWORD *)v162 = *(_OWORD *)v161;
                    v163 = *(_QWORD *)(v161 + 24);
                    *(_QWORD *)(a1 + v160 + 96) = *(_QWORD *)(v161 + 16);
                    *(_BYTE *)(v161 + 23) = 0;
                    *(_BYTE *)v161 = 0;
                    *(_QWORD *)(v161 + 104) = v163;
                    v164 = v161 + 112;
                    if (*(char *)(v161 + 135) < 0)
                      operator delete(*(void **)v164);
                    v165 = a1 + v160;
                    *(_OWORD *)v164 = *(_OWORD *)(a1 + v160 + 32);
                    *(_QWORD *)(v164 + 16) = *(_QWORD *)(a1 + v160 + 48);
                    *(_BYTE *)(v165 + 55) = 0;
                    *(_BYTE *)(v165 + 32) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(a1 + v160 + 136));
                    *(_OWORD *)(v165 + 136) = *(_OWORD *)(v165 + 56);
                    *(_QWORD *)(v165 + 152) = *(_QWORD *)(v165 + 72);
                    *(_QWORD *)(v165 + 64) = 0;
                    *(_QWORD *)(v165 + 72) = 0;
                    *(_QWORD *)(v165 + 56) = 0;
                    if (!v160)
                      break;
                    v166 = *(char *)(v165 - 57);
                    if (SHIBYTE(v361) >= 0)
                      v167 = (void *)HIBYTE(v361);
                    else
                      v167 = v360[1];
                    if (SHIBYTE(v361) >= 0)
                      v168 = v360;
                    else
                      v168 = (void **)v360[0];
                    if (v166 >= 0)
                      v169 = *(unsigned __int8 *)(v165 - 57);
                    else
                      v169 = *(_QWORD *)(v165 - 72);
                    if (v166 >= 0)
                      v170 = (const void *)(v165 - 80);
                    else
                      v170 = *(const void **)(v165 - 80);
                    if (v169 >= (unint64_t)v167)
                      v171 = (size_t)v167;
                    else
                      v171 = v169;
                    v172 = memcmp(v168, v170, v171);
                    v173 = (unint64_t)v167 < v169;
                    if (v172)
                      v173 = v172 < 0;
                    v160 -= 80;
                    if (!v173)
                    {
                      v174 = a1 + v160 + 80;
                      goto LABEL_299;
                    }
                  }
                  v174 = a1;
LABEL_299:
                  if (*(char *)(v174 + 23) < 0)
                    operator delete(*(void **)v174);
                  v175 = v165 + 32;
                  v176 = *(_OWORD *)v360;
                  *(_QWORD *)(v174 + 16) = v361;
                  *(_OWORD *)v174 = v176;
                  HIBYTE(v361) = 0;
                  LOBYTE(v360[0]) = 0;
                  *(_QWORD *)(v174 + 24) = v362;
                  if (*(char *)(v174 + 55) < 0)
                    operator delete(*(void **)v175);
                  v177 = (void **)(v165 + 56);
                  v178 = __p;
                  *(_QWORD *)(v175 + 16) = v364;
                  *(_OWORD *)v175 = v178;
                  HIBYTE(v364) = 0;
                  LOBYTE(__p) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v177);
                  *v177 = (void *)v365;
                  *(_QWORD *)(v174 + 64) = *((_QWORD *)&v365 + 1);
                  *(_QWORD *)(v174 + 72) = v366;
                  v365 = 0uLL;
                  v366 = 0;
                  v352[0] = &v365;
                  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v352);
                  if (SHIBYTE(v364) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v361) < 0)
                    operator delete(v360[0]);
                }
                v144 = v147 + 10;
                v145 += 80;
                v146 = v147;
              }
              while (v147 + 10 != v347);
            }
          }
        }
        else if ((const void **)v6 != a2)
        {
          v306 = (const void *)(v6 + 80);
          if ((const void **)(v6 + 80) != a2)
          {
            v307 = (_QWORD *)(v6 + 152);
            do
            {
              v308 = (uint64_t)v306;
              v309 = *(char *)(a1 + 23);
              v310 = *(char *)(a1 + 103);
              if (v310 >= 0)
                v311 = *(unsigned __int8 *)(a1 + 103);
              else
                v311 = *(_QWORD *)(a1 + 88);
              if (v310 >= 0)
                v312 = v306;
              else
                v312 = *(const void **)(a1 + 80);
              if (v309 >= 0)
                v313 = *(unsigned __int8 *)(a1 + 23);
              else
                v313 = *(_QWORD *)(a1 + 8);
              if (v309 >= 0)
                v314 = (const void *)a1;
              else
                v314 = *(const void **)a1;
              if (v313 >= v311)
                v315 = v311;
              else
                v315 = v313;
              v316 = memcmp(v312, v314, v315);
              v317 = v311 < v313;
              if (v316)
                v317 = v316 < 0;
              if (v317)
              {
                v318 = *(_OWORD *)v308;
                v361 = *(const void **)(v308 + 16);
                *(_OWORD *)v360 = v318;
                *(_QWORD *)(v308 + 8) = 0;
                *(_QWORD *)(v308 + 16) = 0;
                *(_QWORD *)v308 = 0;
                v319 = *(const void **)(a1 + 104);
                __p = *(_OWORD *)(a1 + 112);
                v364 = *(const void **)(a1 + 128);
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                v365 = *(_OWORD *)(a1 + 136);
                v320 = *(const void **)(a1 + 152);
                v362 = v319;
                v366 = v320;
                *(_QWORD *)(a1 + 128) = 0;
                *(_QWORD *)(a1 + 136) = 0;
                v321 = v307;
                *(_QWORD *)(a1 + 144) = 0;
                *(_QWORD *)(a1 + 152) = 0;
                do
                {
                  v322 = (void **)(v321 - 9);
                  if (*((char *)v321 - 49) < 0)
                    operator delete(*v322);
                  *(_OWORD *)v322 = *(_OWORD *)(v321 - 19);
                  *(v321 - 7) = *(v321 - 17);
                  *((_BYTE *)v321 - 129) = 0;
                  *((_BYTE *)v321 - 152) = 0;
                  *(v321 - 6) = *(v321 - 16);
                  v323 = (void **)(v321 - 5);
                  if (*((char *)v321 - 17) < 0)
                    operator delete(*v323);
                  *(_OWORD *)v323 = *(_OWORD *)(v321 - 15);
                  *(v321 - 3) = *(v321 - 13);
                  *((_BYTE *)v321 - 97) = 0;
                  *((_BYTE *)v321 - 120) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)v321 - 2);
                  *((_OWORD *)v321 - 1) = *((_OWORD *)v321 - 6);
                  v324 = v321 - 10;
                  *v321 = *(v321 - 10);
                  *(v321 - 10) = 0;
                  *(v321 - 12) = 0;
                  *(v321 - 11) = 0;
                  v325 = *((unsigned __int8 *)v321 - 209);
                  v326 = v321 - 29;
                  v327 = (const void *)*(v321 - 29);
                  v328 = *(v321 - 28);
                  if (SHIBYTE(v361) >= 0)
                    v329 = (void *)HIBYTE(v361);
                  else
                    v329 = v360[1];
                  if (SHIBYTE(v361) >= 0)
                    v330 = v360;
                  else
                    v330 = (void **)v360[0];
                  if ((v325 & 0x80u) == 0)
                    v331 = v325;
                  else
                    v331 = v328;
                  if ((v325 & 0x80u) == 0)
                    v332 = v326;
                  else
                    v332 = v327;
                  if (v331 >= (unint64_t)v329)
                    v333 = (size_t)v329;
                  else
                    v333 = v331;
                  v334 = memcmp(v330, v332, v333);
                  v335 = (unint64_t)v329 < v331;
                  if (v334)
                    v335 = v334 < 0;
                  v321 = v324;
                }
                while (v335);
                v336 = (void **)(v324 - 9);
                if (*((char *)v324 - 49) < 0)
                  operator delete(*v336);
                v337 = (void **)(v324 - 5);
                v338 = *(_OWORD *)v360;
                *(v324 - 7) = v361;
                *(_OWORD *)v336 = v338;
                HIBYTE(v361) = 0;
                LOBYTE(v360[0]) = 0;
                *(v324 - 6) = v362;
                if (*((char *)v324 - 17) < 0)
                  operator delete(*v337);
                v339 = __p;
                *(v324 - 3) = v364;
                *(_OWORD *)v337 = v339;
                HIBYTE(v364) = 0;
                LOBYTE(__p) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)v324 - 2);
                *((_OWORD *)v324 - 1) = v365;
                *v324 = v366;
                v365 = 0uLL;
                v366 = 0;
                v352[0] = &v365;
                std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v352);
                if (SHIBYTE(v364) < 0)
                  operator delete((void *)__p);
                if (SHIBYTE(v361) < 0)
                  operator delete(v360[0]);
              }
              v306 = (const void *)(v308 + 80);
              v307 += 10;
              a1 = v308;
            }
            while ((const void **)(v308 + 80) != a2);
          }
        }
        return;
    }
  }
}

  v298 = a2;
  v299 = a2 - 8;
  v289 = a2 - 24;
  v291 = a2 - 16;
  v6 = a1;
  while (2)
  {
    v7 = (uint64_t)a2 - v6;
    v8 = (uint64_t)((uint64_t)a2 - v6) >> 6;
    a1 = v6;
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v117 = (const void **)*(a2 - 8);
        v116 = a2 - 8;
        v115 = v117;
        v118 = *(char *)(v6 + 23);
        v119 = *((char *)v116 + 23);
        if (v119 >= 0)
          v120 = *((unsigned __int8 *)v116 + 23);
        else
          v120 = (size_t)v116[1];
        if (v119 >= 0)
          v121 = v116;
        else
          v121 = v115;
        if (v118 >= 0)
          v122 = *(unsigned __int8 *)(v6 + 23);
        else
          v122 = *(_QWORD *)(v6 + 8);
        if (v118 >= 0)
          v123 = (const void *)v6;
        else
          v123 = *(const void **)v6;
        if (v122 >= v120)
          v124 = v120;
        else
          v124 = v122;
        v125 = memcmp(v121, v123, v124);
        v126 = v120 < v122;
        if (v125)
          v126 = v125 < 0;
        if (v126)
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)v6, (__int128 *)v116);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)v6, (const void **)(v6 + 64), v299);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(v6, v6 + 64, v6 + 128, v299);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(v6, v6 + 64, v6 + 128, v6 + 192, v299);
        return;
      default:
        if (v7 > 1535)
        {
          if (!a3)
          {
            if ((const void **)v6 != a2)
            {
              v290 = (unint64_t)a2 - v6;
              v157 = (v8 - 2) >> 1;
              v158 = v157;
              v159 = a1;
              v293 = v8;
              v300 = v157;
              do
              {
                v160 = v158;
                if (v157 >= v158)
                {
                  v161 = (2 * v158) | 1;
                  v162 = v159 + (v161 << 6);
                  if (2 * v158 + 2 >= (uint64_t)v8)
                  {
                    v172 = *(const void **)v162;
                  }
                  else
                  {
                    v163 = *(_BYTE *)(v162 + 87);
                    v292 = *(const void **)(v162 + 64);
                    v164 = *(_BYTE *)(v162 + 23);
                    v295 = *(const void **)v162;
                    if (v164 >= 0)
                      v165 = *(unsigned __int8 *)(v162 + 23);
                    else
                      v165 = *(_QWORD *)(v162 + 8);
                    if (v164 >= 0)
                      v166 = (const void *)(v159 + (v161 << 6));
                    else
                      v166 = *(const void **)v162;
                    if (v163 >= 0)
                      v167 = *(unsigned __int8 *)(v162 + 87);
                    else
                      v167 = *(_QWORD *)(v162 + 72);
                    if (v163 >= 0)
                      v168 = (const void *)(v162 + 64);
                    else
                      v168 = *(const void **)(v162 + 64);
                    if (v167 >= v165)
                      v169 = v165;
                    else
                      v169 = v167;
                    v170 = memcmp(v166, v168, v169);
                    v171 = v165 < v167;
                    if (v170)
                      v171 = v170 < 0;
                    v199 = !v171;
                    v172 = v295;
                    if (!v199)
                    {
                      v172 = v292;
                      v162 += 64;
                      v161 = 2 * v160 + 2;
                    }
                  }
                  v173 = v159 + (v160 << 6);
                  v174 = *(char *)(v173 + 23);
                  v175 = *(char *)(v162 + 23);
                  if (v175 >= 0)
                    v176 = *(unsigned __int8 *)(v162 + 23);
                  else
                    v176 = *(_QWORD *)(v162 + 8);
                  if (v175 >= 0)
                    v177 = (const void *)v162;
                  else
                    v177 = v172;
                  if (v174 >= 0)
                    v178 = *(unsigned __int8 *)(v173 + 23);
                  else
                    v178 = *(_QWORD *)(v173 + 8);
                  if (v174 >= 0)
                    v179 = (const void *)(v159 + (v160 << 6));
                  else
                    v179 = *(const void **)v173;
                  if (v178 >= v176)
                    v180 = v176;
                  else
                    v180 = v178;
                  v181 = memcmp(v177, v179, v180);
                  v182 = v176 < v178;
                  if (v181)
                    v182 = v181 < 0;
                  if (!v182)
                  {
                    v183 = *(_OWORD *)v173;
                    v308 = *(const void **)(v173 + 16);
                    *(_OWORD *)__p = v183;
                    *(_QWORD *)(v173 + 8) = 0;
                    *(_QWORD *)(v173 + 16) = 0;
                    *(_QWORD *)v173 = 0;
                    v296 = v160;
                    v184 = v159 + (v160 << 6);
                    *(_OWORD *)v309 = *(_OWORD *)(v184 + 24);
                    *(_OWORD *)&v309[16] = *(_OWORD *)(v184 + 40);
                    *(_QWORD *)(v184 + 32) = 0;
                    *(_QWORD *)(v184 + 40) = 0;
                    *(_QWORD *)(v184 + 48) = 0;
                    v310 = *(_WORD *)(v184 + 56);
                    do
                    {
                      v185 = v162;
                      if (*(char *)(v173 + 23) < 0)
                        operator delete(*(void **)v173);
                      v186 = *(_OWORD *)v162;
                      *(_QWORD *)(v173 + 16) = *(_QWORD *)(v162 + 16);
                      *(_OWORD *)v173 = v186;
                      *(_BYTE *)(v162 + 23) = 0;
                      *(_BYTE *)v162 = 0;
                      *(_QWORD *)(v173 + 24) = *(_QWORD *)(v162 + 24);
                      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v173 + 32));
                      *(_OWORD *)(v173 + 32) = *(_OWORD *)(v162 + 32);
                      *(_QWORD *)(v173 + 48) = *(_QWORD *)(v162 + 48);
                      *(_QWORD *)(v162 + 32) = 0;
                      *(_QWORD *)(v162 + 40) = 0;
                      *(_QWORD *)(v162 + 48) = 0;
                      *(_WORD *)(v173 + 56) = *(_WORD *)(v162 + 56);
                      if (v157 < v161)
                        break;
                      v187 = (2 * v161) | 1;
                      v162 = v159 + (v187 << 6);
                      v161 = 2 * v161 + 2;
                      if (v161 >= (uint64_t)v8)
                      {
                        v200 = *(const void **)v162;
                        v161 = v187;
                      }
                      else
                      {
                        v188 = *(char *)(v162 + 87);
                        v189 = *(const void **)(v162 + 64);
                        v190 = *(char *)(v162 + 23);
                        v191 = *(const void **)v162;
                        if (v190 >= 0)
                          v192 = *(unsigned __int8 *)(v162 + 23);
                        else
                          v192 = *(_QWORD *)(v162 + 8);
                        if (v190 >= 0)
                          v193 = (const void *)v162;
                        else
                          v193 = *(const void **)v162;
                        if (v188 >= 0)
                          v194 = *(unsigned __int8 *)(v162 + 87);
                        else
                          v194 = *(_QWORD *)(v162 + 72);
                        if (v188 >= 0)
                          v195 = (const void *)(v162 + 64);
                        else
                          v195 = *(const void **)(v162 + 64);
                        if (v194 >= v192)
                          v196 = v192;
                        else
                          v196 = v194;
                        v197 = memcmp(v193, v195, v196);
                        v198 = v192 < v194;
                        if (v197)
                          v198 = v197 < 0;
                        v199 = !v198;
                        v200 = v198 ? v189 : v191;
                        v157 = v300;
                        v159 = a1;
                        v8 = v293;
                        if (v199)
                          v161 = v187;
                        else
                          v162 += 64;
                      }
                      v201 = *(char *)(v162 + 23);
                      if (v201 >= 0)
                        v202 = *(unsigned __int8 *)(v162 + 23);
                      else
                        v202 = *(_QWORD *)(v162 + 8);
                      if (v201 >= 0)
                        v203 = (const void *)v162;
                      else
                        v203 = v200;
                      if (SHIBYTE(v308) >= 0)
                        v204 = (void *)HIBYTE(v308);
                      else
                        v204 = __p[1];
                      if (SHIBYTE(v308) >= 0)
                        v205 = __p;
                      else
                        v205 = (void **)__p[0];
                      if ((unint64_t)v204 >= v202)
                        v206 = v202;
                      else
                        v206 = (size_t)v204;
                      v207 = memcmp(v203, v205, v206);
                      v208 = v202 < (unint64_t)v204;
                      if (v207)
                        v208 = v207 < 0;
                      v173 = v185;
                    }
                    while (!v208);
                    if (*(char *)(v185 + 23) < 0)
                      operator delete(*(void **)v185);
                    v209 = *(_OWORD *)__p;
                    *(_QWORD *)(v185 + 16) = v308;
                    *(_OWORD *)v185 = v209;
                    HIBYTE(v308) = 0;
                    LOBYTE(__p[0]) = 0;
                    *(_QWORD *)(v185 + 24) = *(_QWORD *)v309;
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v185 + 32));
                    *(_OWORD *)(v185 + 32) = *(_OWORD *)&v309[8];
                    *(_QWORD *)(v185 + 48) = *(_QWORD *)&v309[24];
                    memset(&v309[8], 0, 24);
                    *(_WORD *)(v185 + 56) = v310;
                    v302[0] = &v309[8];
                    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
                    if (SHIBYTE(v308) < 0)
                      operator delete(__p[0]);
                    v160 = v296;
                  }
                }
                v158 = v160 - 1;
              }
              while (v160);
              v210 = v159;
              v211 = v290 >> 6;
              v297 = (_QWORD *)(v210 + 32);
              v212 = (void **)v298;
              do
              {
                v213 = 0;
                v214 = a1;
                v215 = *(_OWORD *)a1;
                v216 = v212;
                v303 = *(void **)(a1 + 16);
                *(_OWORD *)v302 = v215;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                *(_OWORD *)v304 = *(_OWORD *)(a1 + 24);
                *(_OWORD *)&v304[16] = *(_OWORD *)(a1 + 40);
                *v297 = 0;
                v297[1] = 0;
                v297[2] = 0;
                v305 = *(_WORD *)(a1 + 56);
                do
                {
                  v217 = v214 + (v213 << 6) + 64;
                  v218 = 2 * v213;
                  v213 = (2 * v213) | 1;
                  v219 = v218 + 2;
                  if (v218 + 2 < v211)
                  {
                    v220 = *(char *)(v217 + 87);
                    v221 = *(char *)(v217 + 23);
                    if (v221 >= 0)
                      v222 = *(unsigned __int8 *)(v217 + 23);
                    else
                      v222 = *(_QWORD *)(v217 + 8);
                    if (v221 >= 0)
                      v223 = (const void *)v217;
                    else
                      v223 = *(const void **)v217;
                    if (v220 >= 0)
                      v224 = *(unsigned __int8 *)(v217 + 87);
                    else
                      v224 = *(_QWORD *)(v217 + 72);
                    if (v220 >= 0)
                      v225 = (const void *)(v217 + 64);
                    else
                      v225 = *(const void **)(v217 + 64);
                    if (v224 >= v222)
                      v226 = v222;
                    else
                      v226 = v224;
                    v227 = memcmp(v223, v225, v226);
                    v228 = v222 < v224;
                    if (v227)
                      v228 = v227 < 0;
                    if (v228)
                    {
                      v217 += 64;
                      v213 = v219;
                    }
                  }
                  if (*(char *)(v214 + 23) < 0)
                    operator delete(*(void **)v214);
                  v229 = *(_OWORD *)v217;
                  *(_QWORD *)(v214 + 16) = *(_QWORD *)(v217 + 16);
                  *(_OWORD *)v214 = v229;
                  *(_BYTE *)(v217 + 23) = 0;
                  *(_BYTE *)v217 = 0;
                  *(_QWORD *)(v214 + 24) = *(_QWORD *)(v217 + 24);
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v214 + 32));
                  *(_OWORD *)(v214 + 32) = *(_OWORD *)(v217 + 32);
                  *(_QWORD *)(v214 + 48) = *(_QWORD *)(v217 + 48);
                  *(_QWORD *)(v217 + 32) = 0;
                  *(_QWORD *)(v217 + 40) = 0;
                  *(_QWORD *)(v217 + 48) = 0;
                  *(_WORD *)(v214 + 56) = *(_WORD *)(v217 + 56);
                  v214 = v217;
                }
                while (v213 <= (uint64_t)((unint64_t)(v211 - 2) >> 1));
                v212 = v216 - 8;
                v230 = *(char *)(v217 + 23);
                if ((void **)v217 == v216 - 8)
                {
                  if (v230 < 0)
                    operator delete(*(void **)v217);
                  v258 = *(_OWORD *)v302;
                  *(_QWORD *)(v217 + 16) = v303;
                  *(_OWORD *)v217 = v258;
                  HIBYTE(v303) = 0;
                  LOBYTE(v302[0]) = 0;
                  *(_QWORD *)(v217 + 24) = *(_QWORD *)v304;
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v217 + 32));
                  *(_OWORD *)(v217 + 32) = *(_OWORD *)&v304[8];
                  *(_QWORD *)(v217 + 48) = *(_QWORD *)&v304[24];
                  memset(&v304[8], 0, 24);
                  *(_WORD *)(v217 + 56) = v305;
                }
                else
                {
                  if (v230 < 0)
                    operator delete(*(void **)v217);
                  v231 = *(_OWORD *)v212;
                  *(_QWORD *)(v217 + 16) = *(v216 - 6);
                  *(_OWORD *)v217 = v231;
                  *((_BYTE *)v216 - 41) = 0;
                  *((_BYTE *)v216 - 64) = 0;
                  *(_QWORD *)(v217 + 24) = *(v216 - 5);
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v217 + 32));
                  v232 = v216 - 4;
                  *(_OWORD *)(v217 + 32) = *((_OWORD *)v216 - 2);
                  *(_QWORD *)(v217 + 48) = *(v216 - 2);
                  *v232 = 0;
                  v232[1] = 0;
                  v232[2] = 0;
                  *(_WORD *)(v217 + 56) = *((_WORD *)v216 - 4);
                  if (*((char *)v216 - 41) < 0)
                    operator delete(*v212);
                  v233 = *(_OWORD *)v302;
                  *(v216 - 6) = v303;
                  *(_OWORD *)v212 = v233;
                  HIBYTE(v303) = 0;
                  LOBYTE(v302[0]) = 0;
                  *(v216 - 5) = *(void **)v304;
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v216 - 4);
                  *((_OWORD *)v216 - 2) = *(_OWORD *)&v304[8];
                  *(v216 - 2) = *(void **)&v304[24];
                  memset(&v304[8], 0, 24);
                  *((_WORD *)v216 - 4) = v305;
                  v234 = v217 + 64 - a1;
                  if (v234 >= 65)
                  {
                    v235 = (((unint64_t)v234 >> 6) - 2) >> 1;
                    v236 = a1 + (v235 << 6);
                    v237 = *(char *)(v217 + 23);
                    v238 = *(char *)(v236 + 23);
                    if (v238 >= 0)
                      v239 = *(unsigned __int8 *)(v236 + 23);
                    else
                      v239 = *(_QWORD *)(v236 + 8);
                    if (v238 >= 0)
                      v240 = (const void *)(a1 + (v235 << 6));
                    else
                      v240 = *(const void **)v236;
                    if (v237 >= 0)
                      v241 = *(unsigned __int8 *)(v217 + 23);
                    else
                      v241 = *(_QWORD *)(v217 + 8);
                    if (v237 >= 0)
                      v242 = (const void *)v217;
                    else
                      v242 = *(const void **)v217;
                    if (v241 >= v239)
                      v243 = v239;
                    else
                      v243 = v241;
                    v244 = memcmp(v240, v242, v243);
                    v245 = v239 < v241;
                    if (v244)
                      v245 = v244 < 0;
                    if (v245)
                    {
                      v246 = *(_OWORD *)v217;
                      v308 = *(const void **)(v217 + 16);
                      *(_OWORD *)__p = v246;
                      *(_QWORD *)(v217 + 8) = 0;
                      *(_QWORD *)(v217 + 16) = 0;
                      *(_QWORD *)v217 = 0;
                      *(_OWORD *)v309 = *(_OWORD *)(v217 + 24);
                      *(_OWORD *)&v309[16] = *(_OWORD *)(v217 + 40);
                      *(_QWORD *)(v217 + 40) = 0;
                      *(_QWORD *)(v217 + 48) = 0;
                      *(_QWORD *)(v217 + 32) = 0;
                      v310 = *(_WORD *)(v217 + 56);
                      if (SHIBYTE(v308) >= 0)
                        v247 = (void *)HIBYTE(v308);
                      else
                        v247 = __p[1];
                      if (SHIBYTE(v308) >= 0)
                        v248 = __p;
                      else
                        v248 = (void **)__p[0];
                      do
                      {
                        v249 = v236;
                        if (*(char *)(v217 + 23) < 0)
                          operator delete(*(void **)v217);
                        v250 = *(_OWORD *)v236;
                        *(_QWORD *)(v217 + 16) = *(_QWORD *)(v236 + 16);
                        *(_OWORD *)v217 = v250;
                        *(_BYTE *)(v236 + 23) = 0;
                        *(_BYTE *)v236 = 0;
                        *(_QWORD *)(v217 + 24) = *(_QWORD *)(v236 + 24);
                        std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v217 + 32));
                        *(_OWORD *)(v217 + 32) = *(_OWORD *)(v236 + 32);
                        *(_QWORD *)(v217 + 48) = *(_QWORD *)(v236 + 48);
                        *(_QWORD *)(v236 + 32) = 0;
                        *(_QWORD *)(v236 + 40) = 0;
                        *(_QWORD *)(v236 + 48) = 0;
                        *(_WORD *)(v217 + 56) = *(_WORD *)(v236 + 56);
                        if (!v235)
                          break;
                        v235 = (v235 - 1) >> 1;
                        v236 = a1 + (v235 << 6);
                        v251 = *(char *)(v236 + 23);
                        if (v251 >= 0)
                          v252 = *(unsigned __int8 *)(v236 + 23);
                        else
                          v252 = *(_QWORD *)(v236 + 8);
                        if (v251 >= 0)
                          v253 = (const void *)(a1 + (v235 << 6));
                        else
                          v253 = *(const void **)v236;
                        if ((unint64_t)v247 >= v252)
                          v254 = v252;
                        else
                          v254 = (size_t)v247;
                        v255 = memcmp(v253, v248, v254);
                        v256 = v252 < (unint64_t)v247;
                        if (v255)
                          v256 = v255 < 0;
                        v217 = v249;
                      }
                      while (v256);
                      if (*(char *)(v249 + 23) < 0)
                        operator delete(*(void **)v249);
                      v257 = *(_OWORD *)__p;
                      *(_QWORD *)(v249 + 16) = v308;
                      *(_OWORD *)v249 = v257;
                      HIBYTE(v308) = 0;
                      LOBYTE(__p[0]) = 0;
                      *(_QWORD *)(v249 + 24) = *(_QWORD *)v309;
                      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v249 + 32));
                      *(_OWORD *)(v249 + 32) = *(_OWORD *)&v309[8];
                      *(_QWORD *)(v249 + 48) = *(_QWORD *)&v309[24];
                      memset(&v309[8], 0, 24);
                      *(_WORD *)(v249 + 56) = v310;
                      v306 = (void **)&v309[8];
                      std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v306);
                      if (SHIBYTE(v308) < 0)
                        operator delete(__p[0]);
                    }
                  }
                }
                __p[0] = &v304[8];
                std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                if (SHIBYTE(v303) < 0)
                  operator delete(v302[0]);
              }
              while (v211-- > 2);
            }
            return;
          }
          v9 = v6 + (v8 >> 1 << 6);
          if ((unint64_t)v7 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(v6 + (v8 >> 1 << 6)), (const void **)v6, v299);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)v6, (const void **)(v6 + (v8 >> 1 << 6)), v299);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(v6 + 64), (const void **)(v9 - 64), v291);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(v6 + 128), (const void **)(v6 + 64 + (v8 >> 1 << 6)), v289);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(v9 - 64), (const void **)(v6 + (v8 >> 1 << 6)), (const void **)(v6 + 64 + (v8 >> 1 << 6)));
            std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)v6, (__int128 *)(v6 + (v8 >> 1 << 6)));
          }
          v10 = v6;
          --a3;
          if ((a4 & 1) == 0)
          {
            v11 = *(char *)(v6 + 23);
            v12 = *(char *)(v6 - 41);
            if (v12 >= 0)
              v13 = *(unsigned __int8 *)(v6 - 41);
            else
              v13 = *(_QWORD *)(v6 - 56);
            if (v12 >= 0)
              v14 = (const void *)(v6 - 64);
            else
              v14 = *(const void **)(v6 - 64);
            if (v11 >= 0)
              v15 = *(unsigned __int8 *)(v6 + 23);
            else
              v15 = *(_QWORD *)(v6 + 8);
            if (v11 >= 0)
              v16 = (const void *)v6;
            else
              v16 = *(const void **)v6;
            if (v15 >= v13)
              v17 = v13;
            else
              v17 = v15;
            v18 = memcmp(v14, v16, v17);
            v19 = v13 < v15;
            if (v18)
              v19 = v18 < 0;
            if (!v19)
            {
              v67 = *(_OWORD *)v6;
              v308 = *(const void **)(v6 + 16);
              *(_OWORD *)__p = v67;
              *(_QWORD *)(v6 + 8) = 0;
              *(_QWORD *)(v6 + 16) = 0;
              *(_QWORD *)v6 = 0;
              *(_OWORD *)v309 = *(_OWORD *)(v6 + 24);
              *(_OWORD *)&v309[16] = *(_OWORD *)(v6 + 40);
              *(_QWORD *)(v6 + 32) = 0;
              v68 = (void **)(v6 + 32);
              *(_QWORD *)(v6 + 40) = 0;
              *(_QWORD *)(v6 + 48) = 0;
              v310 = *(_WORD *)(v6 + 56);
              v69 = *((char *)a2 - 41);
              if (SHIBYTE(v308) >= 0)
                v70 = (void *)HIBYTE(v308);
              else
                v70 = __p[1];
              if (SHIBYTE(v308) >= 0)
                v71 = __p;
              else
                v71 = (void **)__p[0];
              if (v69 >= 0)
                v72 = *((unsigned __int8 *)a2 - 41);
              else
                v72 = (size_t)*(a2 - 7);
              if (v69 >= 0)
                v73 = v299;
              else
                v73 = (const void **)*(a2 - 8);
              if (v72 >= (unint64_t)v70)
                v74 = (size_t)v70;
              else
                v74 = v72;
              v75 = memcmp(v71, v73, v74);
              v76 = (unint64_t)v70 < v72;
              if (v75)
                v76 = v75 < 0;
              if (v76)
              {
                v77 = (const void **)(v6 + 64);
                do
                {
                  v78 = *((char *)v77 + 23);
                  if (v78 >= 0)
                    v79 = *((unsigned __int8 *)v77 + 23);
                  else
                    v79 = (size_t)v77[1];
                  if (v78 >= 0)
                    v80 = v77;
                  else
                    v80 = *v77;
                  if (v79 >= (unint64_t)v70)
                    v81 = (size_t)v70;
                  else
                    v81 = v79;
                  v82 = memcmp(v71, v80, v81);
                  v83 = (unint64_t)v70 < v79;
                  if (v82)
                    v83 = v82 < 0;
                  v77 += 8;
                }
                while (!v83);
                v6 = (unint64_t)(v77 - 8);
              }
              else
              {
                v84 = (const void **)(v6 + 64);
                do
                {
                  v6 = (unint64_t)v84;
                  if (v84 >= v298)
                    break;
                  v85 = *((char *)v84 + 23);
                  if (v85 >= 0)
                    v86 = *((unsigned __int8 *)v84 + 23);
                  else
                    v86 = (size_t)v84[1];
                  if (v85 >= 0)
                    v87 = v84;
                  else
                    v87 = *v84;
                  if (v86 >= (unint64_t)v70)
                    v88 = (size_t)v70;
                  else
                    v88 = v86;
                  v89 = memcmp(v71, v87, v88);
                  v90 = v89 < 0;
                  if (!v89)
                    v90 = (unint64_t)v70 < v86;
                  v84 = (const void **)(v6 + 64);
                }
                while (!v90);
              }
              v91 = (__int128 *)v298;
              if (v6 >= (unint64_t)v298)
                goto LABEL_179;
              v92 = v299;
              do
              {
                v93 = *((char *)v92 + 23);
                if (v93 >= 0)
                  v94 = *((unsigned __int8 *)v92 + 23);
                else
                  v94 = (size_t)v92[1];
                if (v93 >= 0)
                  v95 = v92;
                else
                  v95 = *v92;
                if (v94 >= (unint64_t)v70)
                  v96 = (size_t)v70;
                else
                  v96 = v94;
                v97 = memcmp(v71, v95, v96);
                v98 = (unint64_t)v70 < v94;
                if (v97)
                  v98 = v97 < 0;
                v92 -= 8;
              }
              while (v98);
              while (1)
              {
                v91 = (__int128 *)(v92 + 8);
LABEL_179:
                if (v6 >= (unint64_t)v91)
                  break;
                std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)v6, v91);
                v99 = (const void **)(v6 + 64);
                do
                {
                  v100 = *((char *)v99 + 23);
                  if (v100 >= 0)
                    v101 = *((unsigned __int8 *)v99 + 23);
                  else
                    v101 = (size_t)v99[1];
                  if (v100 >= 0)
                    v102 = v99;
                  else
                    v102 = *v99;
                  if (v101 >= (unint64_t)v70)
                    v103 = (size_t)v70;
                  else
                    v103 = v101;
                  v104 = memcmp(v71, v102, v103);
                  v105 = (unint64_t)v70 < v101;
                  if (v104)
                    v105 = v104 < 0;
                  v99 += 8;
                }
                while (!v105);
                v6 = (unint64_t)(v99 - 8);
                v92 = (const void **)(v91 - 4);
                do
                {
                  v106 = *((char *)v92 + 23);
                  if (v106 >= 0)
                    v107 = *((unsigned __int8 *)v92 + 23);
                  else
                    v107 = (size_t)v92[1];
                  if (v106 >= 0)
                    v108 = v92;
                  else
                    v108 = *v92;
                  if (v107 >= (unint64_t)v70)
                    v109 = (size_t)v70;
                  else
                    v109 = v107;
                  v110 = memcmp(v71, v108, v109);
                  v111 = (unint64_t)v70 < v107;
                  if (v110)
                    v111 = v110 < 0;
                  v92 -= 8;
                }
                while (v111);
              }
              v112 = (void **)(v6 - 64);
              if (v6 - 64 != a1)
              {
                if (*(char *)(a1 + 23) < 0)
                  operator delete(*(void **)a1);
                v113 = *(_OWORD *)v112;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 - 48);
                *(_OWORD *)a1 = v113;
                *(_BYTE *)(v6 - 41) = 0;
                *(_BYTE *)(v6 - 64) = 0;
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(v6 - 40);
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v68);
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 - 32);
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(v6 - 16);
                *(_QWORD *)(v6 - 32) = 0;
                *(_QWORD *)(v6 - 24) = 0;
                *(_QWORD *)(v6 - 16) = 0;
                *(_WORD *)(a1 + 56) = *(_WORD *)(v6 - 8);
              }
              if (*(char *)(v6 - 41) < 0)
                operator delete(*v112);
              v114 = *(_OWORD *)__p;
              *(_QWORD *)(v6 - 48) = v308;
              *(_OWORD *)v112 = v114;
              HIBYTE(v308) = 0;
              LOBYTE(__p[0]) = 0;
              *(_QWORD *)(v6 - 40) = *(_QWORD *)v309;
              std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v6 - 32));
              *(_OWORD *)(v6 - 32) = *(_OWORD *)&v309[8];
              *(_QWORD *)(v6 - 16) = *(_QWORD *)&v309[24];
              memset(&v309[8], 0, 24);
              *(_WORD *)(v6 - 8) = v310;
              v302[0] = &v309[8];
              std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
              a2 = v298;
              if (SHIBYTE(v308) < 0)
                operator delete(__p[0]);
              goto LABEL_117;
            }
          }
          v20 = 0;
          v21 = *(_OWORD *)v6;
          v308 = *(const void **)(v6 + 16);
          *(_OWORD *)__p = v21;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)v6 = 0;
          *(_OWORD *)v309 = *(_OWORD *)(v6 + 24);
          *(_OWORD *)&v309[16] = *(_OWORD *)(v6 + 40);
          *(_QWORD *)(v6 + 32) = 0;
          v22 = (void **)(v6 + 32);
          *(_QWORD *)(v6 + 40) = 0;
          *(_QWORD *)(v6 + 48) = 0;
          v310 = *(_WORD *)(v6 + 56);
          if (SHIBYTE(v308) >= 0)
            v23 = (void *)HIBYTE(v308);
          else
            v23 = __p[1];
          if (SHIBYTE(v308) >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          do
          {
            v25 = *(char *)(v6 + v20 + 87);
            if (v25 >= 0)
              v26 = *(unsigned __int8 *)(v6 + v20 + 87);
            else
              v26 = *(_QWORD *)(v6 + v20 + 72);
            if (v25 >= 0)
              v27 = (const void *)(v6 + v20 + 64);
            else
              v27 = *(const void **)(v6 + v20 + 64);
            if ((unint64_t)v23 >= v26)
              v28 = v26;
            else
              v28 = (size_t)v23;
            v29 = memcmp(v27, v24, v28);
            v30 = v26 < (unint64_t)v23;
            if (v29)
              v30 = v29 < 0;
            v20 += 64;
          }
          while (v30);
          v31 = v6 + v20;
          v32 = v299;
          if (v20 == 64)
          {
            v40 = v299;
            while (1)
            {
              v39 = (__int128 *)(v40 + 8);
              if (v31 >= (unint64_t)(v40 + 8))
                break;
              v41 = *((char *)v40 + 23);
              if (v41 >= 0)
                v42 = *((unsigned __int8 *)v40 + 23);
              else
                v42 = (size_t)v40[1];
              if (v41 >= 0)
                v43 = v40;
              else
                v43 = *v40;
              if ((unint64_t)v23 >= v42)
                v44 = v42;
              else
                v44 = (size_t)v23;
              v45 = memcmp(v43, v24, v44);
              v46 = v42 < (unint64_t)v23;
              if (v45)
                v46 = v45 < 0;
              v40 -= 8;
              if (v46)
              {
                v39 = (__int128 *)(v40 + 8);
                break;
              }
            }
          }
          else
          {
            do
            {
              v33 = *((char *)v32 + 23);
              if (v33 >= 0)
                v34 = *((unsigned __int8 *)v32 + 23);
              else
                v34 = (size_t)v32[1];
              if (v33 >= 0)
                v35 = v32;
              else
                v35 = *v32;
              if ((unint64_t)v23 >= v34)
                v36 = v34;
              else
                v36 = (size_t)v23;
              v37 = memcmp(v35, v24, v36);
              v38 = v34 < (unint64_t)v23;
              if (v37)
                v38 = v37 < 0;
              v32 -= 8;
            }
            while (!v38);
            v39 = (__int128 *)(v32 + 8);
          }
          v6 = v31;
          if (v31 < (unint64_t)v39)
          {
            v47 = v39;
            do
            {
              std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)v6, v47);
              v48 = (const void **)(v6 + 64);
              do
              {
                v49 = *((char *)v48 + 23);
                if (v49 >= 0)
                  v50 = *((unsigned __int8 *)v48 + 23);
                else
                  v50 = (size_t)v48[1];
                if (v49 >= 0)
                  v51 = v48;
                else
                  v51 = *v48;
                if ((unint64_t)v23 >= v50)
                  v52 = v50;
                else
                  v52 = (size_t)v23;
                v53 = memcmp(v51, v24, v52);
                v54 = v50 < (unint64_t)v23;
                if (v53)
                  v54 = v53 < 0;
                v48 += 8;
              }
              while (v54);
              v6 = (unint64_t)(v48 - 8);
              v55 = (const void **)(v47 - 4);
              do
              {
                v56 = *((char *)v55 + 23);
                if (v56 >= 0)
                  v57 = *((unsigned __int8 *)v55 + 23);
                else
                  v57 = (size_t)v55[1];
                if (v56 >= 0)
                  v58 = v55;
                else
                  v58 = *v55;
                if ((unint64_t)v23 >= v57)
                  v59 = v57;
                else
                  v59 = (size_t)v23;
                v60 = memcmp(v58, v24, v59);
                v61 = v57 < (unint64_t)v23;
                if (v60)
                  v61 = v60 < 0;
                v55 -= 8;
              }
              while (!v61);
              v47 = (__int128 *)(v55 + 8);
            }
            while (v6 < (unint64_t)(v55 + 8));
            v10 = a1;
          }
          v62 = (void **)(v6 - 64);
          if (v6 - 64 != v10)
          {
            if (*(char *)(v10 + 23) < 0)
              operator delete(*(void **)v10);
            v63 = *(_OWORD *)v62;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 - 48);
            *(_OWORD *)v10 = v63;
            *(_BYTE *)(v6 - 41) = 0;
            *(_BYTE *)(v6 - 64) = 0;
            *(_QWORD *)(v10 + 24) = *(_QWORD *)(v6 - 40);
            std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v22);
            *(_OWORD *)(v10 + 32) = *(_OWORD *)(v6 - 32);
            *(_QWORD *)(v10 + 48) = *(_QWORD *)(v6 - 16);
            *(_QWORD *)(v6 - 32) = 0;
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_WORD *)(v10 + 56) = *(_WORD *)(v6 - 8);
          }
          if (*(char *)(v6 - 41) < 0)
            operator delete(*v62);
          v64 = *(_OWORD *)__p;
          *(_QWORD *)(v6 - 48) = v308;
          *(_OWORD *)v62 = v64;
          HIBYTE(v308) = 0;
          LOBYTE(__p[0]) = 0;
          *(_QWORD *)(v6 - 40) = *(_QWORD *)v309;
          std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v6 - 32));
          *(_OWORD *)(v6 - 32) = *(_OWORD *)&v309[8];
          *(_QWORD *)(v6 - 16) = *(_QWORD *)&v309[24];
          memset(&v309[8], 0, 24);
          *(_WORD *)(v6 - 8) = v310;
          v302[0] = &v309[8];
          std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
          if (SHIBYTE(v308) < 0)
            operator delete(__p[0]);
          v65 = v31 >= (unint64_t)v39;
          a2 = v298;
          if (!v65)
            goto LABEL_116;
          v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, (const void **)(v6 - 64));
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(v6, v298))
          {
            if (v66)
              continue;
LABEL_116:
            std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>(a1, v6 - 64, a3, a4 & 1);
LABEL_117:
            a4 = 0;
            continue;
          }
          a2 = (const void **)(v6 - 64);
          if (v66)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if ((const void **)v6 != a2)
          {
            v127 = (const void **)(v6 + 64);
            if ((const void **)(v6 + 64) != a2)
            {
              v128 = 0;
              v129 = (const void **)v6;
              do
              {
                v130 = v127;
                v131 = *((char *)v129 + 23);
                v132 = *((char *)v129 + 87);
                if (v132 >= 0)
                  v133 = *((unsigned __int8 *)v129 + 87);
                else
                  v133 = (size_t)v129[9];
                if (v132 >= 0)
                  v134 = v127;
                else
                  v134 = (const void **)v129[8];
                if (v131 >= 0)
                  v135 = *((unsigned __int8 *)v129 + 23);
                else
                  v135 = (size_t)v129[1];
                if (v131 >= 0)
                  v136 = v129;
                else
                  v136 = *v129;
                if (v135 >= v133)
                  v137 = v133;
                else
                  v137 = v135;
                v138 = memcmp(v134, v136, v137);
                v139 = v133 < v135;
                if (v138)
                  v139 = v138 < 0;
                if (v139)
                {
                  v140 = *(_OWORD *)v130;
                  v308 = v130[2];
                  *(_OWORD *)__p = v140;
                  v130[1] = 0;
                  v130[2] = 0;
                  *v130 = 0;
                  *(_OWORD *)v309 = *(_OWORD *)(v129 + 11);
                  *(_OWORD *)&v309[16] = *(_OWORD *)(v129 + 13);
                  v129[13] = 0;
                  v129[14] = 0;
                  v129[12] = 0;
                  v310 = *((_WORD *)v129 + 60);
                  v141 = v128;
                  v142 = a1;
                  while (1)
                  {
                    v143 = v141;
                    v144 = v142 + v141;
                    v145 = v142 + v141 + 64;
                    if (*(char *)(v142 + v141 + 87) < 0)
                      operator delete(*(void **)v145);
                    *(_OWORD *)v145 = *(_OWORD *)v144;
                    v146 = *(_QWORD *)(v144 + 24);
                    *(_QWORD *)(v145 + 16) = *(_QWORD *)(v144 + 16);
                    *(_BYTE *)(v144 + 23) = 0;
                    *(_BYTE *)v144 = 0;
                    *(_QWORD *)(v144 + 88) = v146;
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v144 + 96));
                    *(_OWORD *)(v144 + 96) = *(_OWORD *)(v144 + 32);
                    *(_QWORD *)(v144 + 112) = *(_QWORD *)(v144 + 48);
                    *(_QWORD *)(v144 + 40) = 0;
                    *(_QWORD *)(v144 + 48) = 0;
                    *(_QWORD *)(v144 + 32) = 0;
                    *(_WORD *)(v144 + 120) = *(_WORD *)(v144 + 56);
                    if (!v143)
                      break;
                    v142 = a1;
                    v147 = *(char *)(a1 + v143 - 41);
                    if (SHIBYTE(v308) >= 0)
                      v148 = (void *)HIBYTE(v308);
                    else
                      v148 = __p[1];
                    if (SHIBYTE(v308) >= 0)
                      v149 = __p;
                    else
                      v149 = (void **)__p[0];
                    if (v147 >= 0)
                      v150 = *(unsigned __int8 *)(a1 + v143 - 41);
                    else
                      v150 = *(_QWORD *)(a1 + v143 - 56);
                    if (v147 >= 0)
                      v151 = (const void *)(a1 + v143 - 64);
                    else
                      v151 = *(const void **)(a1 + v143 - 64);
                    if (v150 >= (unint64_t)v148)
                      v152 = (size_t)v148;
                    else
                      v152 = v150;
                    v153 = memcmp(v149, v151, v152);
                    v154 = v153 < 0;
                    if (!v153)
                      v154 = (unint64_t)v148 < v150;
                    v141 = v143 - 64;
                    if (!v154)
                    {
                      v155 = a1 + v143;
                      goto LABEL_286;
                    }
                  }
                  v155 = a1;
LABEL_286:
                  if (*(char *)(v155 + 23) < 0)
                    operator delete(*(void **)v155);
                  v156 = *(_OWORD *)__p;
                  *(_QWORD *)(v155 + 16) = v308;
                  *(_OWORD *)v155 = v156;
                  HIBYTE(v308) = 0;
                  LOBYTE(__p[0]) = 0;
                  *(_QWORD *)(v155 + 24) = *(_QWORD *)v309;
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(a1 + v143 + 32));
                  *(_QWORD *)(a1 + v143 + 32) = *(_QWORD *)&v309[8];
                  *(_OWORD *)(v155 + 40) = *(_OWORD *)&v309[16];
                  memset(&v309[8], 0, 24);
                  *(_WORD *)(v155 + 56) = v310;
                  v302[0] = &v309[8];
                  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
                  if (SHIBYTE(v308) < 0)
                    operator delete(__p[0]);
                }
                v127 = v130 + 8;
                v128 += 64;
                v129 = v130;
              }
              while (v130 + 8 != v298);
            }
          }
        }
        else if ((const void **)v6 != a2)
        {
          v260 = (const void *)(v6 + 64);
          if ((const void **)(v6 + 64) != a2)
          {
            v261 = (_WORD *)(v6 + 120);
            do
            {
              v262 = (uint64_t)v260;
              v263 = *(char *)(a1 + 23);
              v264 = *(char *)(a1 + 87);
              if (v264 >= 0)
                v265 = *(unsigned __int8 *)(a1 + 87);
              else
                v265 = *(_QWORD *)(a1 + 72);
              if (v264 >= 0)
                v266 = v260;
              else
                v266 = *(const void **)(a1 + 64);
              if (v263 >= 0)
                v267 = *(unsigned __int8 *)(a1 + 23);
              else
                v267 = *(_QWORD *)(a1 + 8);
              if (v263 >= 0)
                v268 = (const void *)a1;
              else
                v268 = *(const void **)a1;
              if (v267 >= v265)
                v269 = v265;
              else
                v269 = v267;
              v270 = memcmp(v266, v268, v269);
              v271 = v265 < v267;
              if (v270)
                v271 = v270 < 0;
              if (v271)
              {
                v272 = *(_OWORD *)v262;
                v308 = *(const void **)(v262 + 16);
                *(_OWORD *)__p = v272;
                *(_QWORD *)(v262 + 8) = 0;
                *(_QWORD *)(v262 + 16) = 0;
                *(_QWORD *)v262 = 0;
                *(_OWORD *)v309 = *(_OWORD *)(a1 + 88);
                *(_OWORD *)&v309[16] = *(_OWORD *)(a1 + 104);
                *(_QWORD *)(a1 + 104) = 0;
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 96) = 0;
                v310 = *(_WORD *)(a1 + 120);
                v273 = v261;
                do
                {
                  v274 = (void **)(v273 - 28);
                  if (*((char *)v273 - 33) < 0)
                    operator delete(*v274);
                  *(_OWORD *)v274 = *(_OWORD *)(v273 - 60);
                  *((_QWORD *)v273 - 5) = *((_QWORD *)v273 - 13);
                  *((_BYTE *)v273 - 97) = 0;
                  *((_BYTE *)v273 - 120) = 0;
                  *((_QWORD *)v273 - 4) = *((_QWORD *)v273 - 12);
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)v273 - 3);
                  *(_OWORD *)(v273 - 12) = *(_OWORD *)(v273 - 44);
                  *((_QWORD *)v273 - 1) = *((_QWORD *)v273 - 9);
                  *((_QWORD *)v273 - 10) = 0;
                  *((_QWORD *)v273 - 9) = 0;
                  *((_QWORD *)v273 - 11) = 0;
                  v275 = v273 - 32;
                  *v273 = *(v273 - 32);
                  v276 = *((unsigned __int8 *)v273 - 161);
                  v277 = v273 - 92;
                  v278 = (const void *)*((_QWORD *)v273 - 23);
                  v279 = *((_QWORD *)v273 - 22);
                  if (SHIBYTE(v308) >= 0)
                    v280 = (void *)HIBYTE(v308);
                  else
                    v280 = __p[1];
                  if (SHIBYTE(v308) >= 0)
                    v281 = __p;
                  else
                    v281 = (void **)__p[0];
                  if ((v276 & 0x80u) == 0)
                    v282 = v276;
                  else
                    v282 = v279;
                  if ((v276 & 0x80u) == 0)
                    v283 = v277;
                  else
                    v283 = v278;
                  if (v282 >= (unint64_t)v280)
                    v284 = (size_t)v280;
                  else
                    v284 = v282;
                  v285 = memcmp(v281, v283, v284);
                  v286 = (unint64_t)v280 < v282;
                  if (v285)
                    v286 = v285 < 0;
                  v273 = v275;
                }
                while (v286);
                v287 = (void **)(v275 - 28);
                if (*((char *)v275 - 33) < 0)
                  operator delete(*v287);
                v288 = *(_OWORD *)__p;
                *((_QWORD *)v275 - 5) = v308;
                *(_OWORD *)v287 = v288;
                HIBYTE(v308) = 0;
                LOBYTE(__p[0]) = 0;
                *((_QWORD *)v275 - 4) = *(_QWORD *)v309;
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)v275 - 3);
                *(_OWORD *)(v275 - 12) = *(_OWORD *)&v309[8];
                *((_QWORD *)v275 - 1) = *(_QWORD *)&v309[24];
                memset(&v309[8], 0, 24);
                *v275 = v310;
                v302[0] = &v309[8];
                std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v302);
                if (SHIBYTE(v308) < 0)
                  operator delete(__p[0]);
              }
              v260 = (const void *)(v262 + 64);
              v261 += 32;
              a1 = v262;
            }
            while ((const void **)(v262 + 64) != v298);
          }
        }
        return;
    }
  }
}

  v392 = a2 - 2;
  v388 = a2 - 4;
  v389 = a2;
  v387 = a2 - 6;
  while (2)
  {
    v9 = (char *)v389 - (char *)i;
    v10 = ((char *)v389 - (char *)i) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v189 = *(v389 - 2);
        v398[2] = v189;
        v190 = (std::__shared_weak_count *)*(v389 - 1);
        v399 = v190;
        if (v190)
        {
          p_shared_owners = (unint64_t *)&v190->__shared_owners_;
          do
            v192 = __ldxr(p_shared_owners);
          while (__stxr(v192 + 1, p_shared_owners));
        }
        v193 = (std::__shared_weak_count *)i[1];
        v398[0] = *i;
        v398[1] = (uint64_t)v193;
        if (v193)
        {
          v194 = (unint64_t *)&v193->__shared_owners_;
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
        }
        v196 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v189, v190, v398);
        if (v193)
        {
          v197 = (unint64_t *)&v193->__shared_owners_;
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
        }
        v199 = v399;
        if (v399)
        {
          v200 = (unint64_t *)&v399->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        if (v196)
        {
          v202 = *i;
          *i = *(v389 - 2);
          *(v389 - 2) = v202;
          v203 = i[1];
          i[1] = *(v389 - 1);
          *(v389 - 1) = v203;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(i, i + 2, v392, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(i, i + 2, i + 4, v392, a3);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *,0>(i, i + 2, i + 4, i + 6, v392, a3);
        return;
      default:
        if (v9 > 383)
        {
          v391 = i;
          if (!a4)
          {
            if (i == v389)
              return;
            v237 = (v10 - 2) >> 1;
            v393 = v237;
            while (1)
            {
              v238 = v237;
              if (v393 < v237)
                goto LABEL_416;
              v239 = (2 * v237) | 1;
              v240 = &v391[2 * v239];
              if (2 * v237 + 2 >= (uint64_t)v10)
                goto LABEL_354;
              v410[0] = *(_OWORD *)v240;
              v241 = v410[0];
              if (*((_QWORD *)&v410[0] + 1))
              {
                v242 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                do
                  v243 = __ldxr(v242);
                while (__stxr(v243 + 1, v242));
              }
              *(_QWORD *)&v409 = v240[2];
              v244 = (std::__shared_weak_count *)v240[3];
              *((_QWORD *)&v409 + 1) = v244;
              if (v244)
              {
                v245 = (unint64_t *)&v244->__shared_owners_;
                do
                  v246 = __ldxr(v245);
                while (__stxr(v246 + 1, v245));
              }
              v247 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v241, *((std::__shared_weak_count **)&v241 + 1), (uint64_t *)&v409);
              if (v244)
              {
                v248 = (unint64_t *)&v244->__shared_owners_;
                do
                  v249 = __ldaxr(v248);
                while (__stlxr(v249 - 1, v248));
                if (!v249)
                {
                  ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                  std::__shared_weak_count::__release_weak(v244);
                }
              }
              v250 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
              if (*((_QWORD *)&v410[0] + 1))
              {
                v251 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 - 1, v251));
                if (!v252)
                  break;
              }
              if (v247)
                goto LABEL_353;
LABEL_354:
              v253 = *v240;
              v254 = (std::__shared_weak_count *)v240[1];
              *(_QWORD *)&v408 = *v240;
              *((_QWORD *)&v408 + 1) = v254;
              if (v254)
              {
                v255 = (unint64_t *)&v254->__shared_owners_;
                do
                  v256 = __ldxr(v255);
                while (__stxr(v256 + 1, v255));
              }
              v257 = &v391[2 * v238];
              *(_QWORD *)&v407 = *v257;
              v258 = (std::__shared_weak_count *)v257[1];
              *((_QWORD *)&v407 + 1) = v258;
              if (v258)
              {
                v259 = (unint64_t *)&v258->__shared_owners_;
                do
                  v260 = __ldxr(v259);
                while (__stxr(v260 + 1, v259));
              }
              v261 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v253, v254, (uint64_t *)&v407);
              if (v258)
              {
                v262 = (unint64_t *)&v258->__shared_owners_;
                do
                  v263 = __ldaxr(v262);
                while (__stlxr(v263 - 1, v262));
                if (!v263)
                {
                  ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                  std::__shared_weak_count::__release_weak(v258);
                }
              }
              v264 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v265 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 - 1, v265));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                  std::__shared_weak_count::__release_weak(v264);
                }
              }
              if (!v261)
              {
                v406 = *(_OWORD *)v257;
                *v257 = 0;
                v257[1] = 0;
                while (1)
                {
                  v267 = (uint64_t)v240;
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v257, (__int128 *)v240);
                  if (v393 < v239)
                  {
LABEL_411:
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v267, &v406);
                    v295 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
                    if (*((_QWORD *)&v406 + 1))
                    {
                      v296 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                        std::__shared_weak_count::__release_weak(v295);
                      }
                    }
                    break;
                  }
                  v268 = 2 * v239;
                  v239 = (2 * v239) | 1;
                  v240 = &v391[2 * v239];
                  v269 = v268 + 2;
                  if (v268 + 2 < (uint64_t)v10)
                  {
                    v270 = *(_OWORD *)v240;
                    v405 = v270;
                    if (*((_QWORD *)&v270 + 1))
                    {
                      v271 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
                      do
                        v272 = __ldxr(v271);
                      while (__stxr(v272 + 1, v271));
                    }
                    *(_QWORD *)&v404 = v240[2];
                    v273 = (std::__shared_weak_count *)v240[3];
                    *((_QWORD *)&v404 + 1) = v273;
                    if (v273)
                    {
                      v274 = (unint64_t *)&v273->__shared_owners_;
                      do
                        v275 = __ldxr(v274);
                      while (__stxr(v275 + 1, v274));
                    }
                    v276 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v270, *((std::__shared_weak_count **)&v270 + 1), (uint64_t *)&v404);
                    if (v273)
                    {
                      v277 = (unint64_t *)&v273->__shared_owners_;
                      do
                        v278 = __ldaxr(v277);
                      while (__stlxr(v278 - 1, v277));
                      if (!v278)
                      {
                        ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                        std::__shared_weak_count::__release_weak(v273);
                      }
                    }
                    v279 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
                    if (*((_QWORD *)&v405 + 1))
                    {
                      v280 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 8);
                      do
                        v281 = __ldaxr(v280);
                      while (__stlxr(v281 - 1, v280));
                      if (!v281)
                      {
                        ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                        std::__shared_weak_count::__release_weak(v279);
                        if (!v276)
                          goto LABEL_391;
LABEL_390:
                        v240 += 2;
                        v239 = v269;
                        goto LABEL_391;
                      }
                    }
                    if (v276)
                      goto LABEL_390;
                  }
LABEL_391:
                  v282 = *v240;
                  v283 = (std::__shared_weak_count *)v240[1];
                  *(_QWORD *)&v403 = *v240;
                  *((_QWORD *)&v403 + 1) = v283;
                  if (v283)
                  {
                    v284 = (unint64_t *)&v283->__shared_owners_;
                    do
                      v285 = __ldxr(v284);
                    while (__stxr(v285 + 1, v284));
                  }
                  v286 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
                  v402 = v406;
                  if (*((_QWORD *)&v406 + 1))
                  {
                    v287 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
                    do
                      v288 = __ldxr(v287);
                    while (__stxr(v288 + 1, v287));
                  }
                  v289 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v282, v283, (uint64_t *)&v402);
                  if (v286)
                  {
                    v290 = (unint64_t *)&v286->__shared_owners_;
                    do
                      v291 = __ldaxr(v290);
                    while (__stlxr(v291 - 1, v290));
                    if (!v291)
                    {
                      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                      std::__shared_weak_count::__release_weak(v286);
                    }
                  }
                  v292 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
                  if (*((_QWORD *)&v403 + 1))
                  {
                    v293 = (unint64_t *)(*((_QWORD *)&v403 + 1) + 8);
                    do
                      v294 = __ldaxr(v293);
                    while (__stlxr(v294 - 1, v293));
                    if (!v294)
                    {
                      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                      std::__shared_weak_count::__release_weak(v292);
                    }
                  }
                  v257 = (uint64_t *)v267;
                  if (v289)
                    goto LABEL_411;
                }
              }
LABEL_416:
              v237 = v238 - 1;
              if (!v238)
              {
                v298 = (unint64_t)v9 >> 4;
                v299 = (uint64_t)v389;
                v300 = v391;
                while (1)
                {
                  v390 = v299;
                  v301 = 0;
                  v407 = *(_OWORD *)v300;
                  *v300 = 0;
                  v300[1] = 0;
                  v302 = (unint64_t)(v298 - 2) >> 1;
                  v303 = (uint64_t)v300;
                  v394 = v302;
                  do
                  {
                    v304 = v303;
                    v303 += 16 * (v301 + 1);
                    v305 = 2 * v301;
                    v301 = (2 * v301) | 1;
                    v306 = v305 + 2;
                    if (v305 + 2 >= v298)
                      goto LABEL_438;
                    v307 = v298;
                    v308 = *(_QWORD *)v303;
                    v309 = *(std::__shared_weak_count **)(v303 + 8);
                    if (v309)
                    {
                      v310 = (unint64_t *)&v309->__shared_owners_;
                      do
                        v311 = __ldxr(v310);
                      while (__stxr(v311 + 1, v310));
                    }
                    *(_QWORD *)&v410[0] = *(_QWORD *)(v303 + 16);
                    v312 = *(std::__shared_weak_count **)(v303 + 24);
                    *((_QWORD *)&v410[0] + 1) = v312;
                    if (v312)
                    {
                      v313 = (unint64_t *)&v312->__shared_owners_;
                      do
                        v314 = __ldxr(v313);
                      while (__stxr(v314 + 1, v313));
                    }
                    v315 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v308, v309, (uint64_t *)v410);
                    if (!v312)
                      goto LABEL_432;
                    v316 = (unint64_t *)&v312->__shared_owners_;
                    do
                      v317 = __ldaxr(v316);
                    while (__stlxr(v317 - 1, v316));
                    if (!v317)
                    {
                      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                      std::__shared_weak_count::__release_weak(v312);
                      if (!v309)
                        goto LABEL_436;
                    }
                    else
                    {
LABEL_432:
                      if (!v309)
                        goto LABEL_436;
                    }
                    v318 = (unint64_t *)&v309->__shared_owners_;
                    do
                      v319 = __ldaxr(v318);
                    while (__stlxr(v319 - 1, v318));
                    if (v319)
                    {
LABEL_436:
                      v298 = v307;
                      v302 = v394;
                      if (!v315)
                        goto LABEL_438;
LABEL_437:
                      v303 += 16;
                      v301 = v306;
                      goto LABEL_438;
                    }
                    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                    std::__shared_weak_count::__release_weak(v309);
                    v298 = v307;
                    v302 = v394;
                    if (v315)
                      goto LABEL_437;
LABEL_438:
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v304, (__int128 *)v303);
                  }
                  while (v301 <= v302);
                  v299 = v390 - 16;
                  if (v303 == v390 - 16)
                  {
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v303, &v407);
                    v300 = v391;
                    goto LABEL_488;
                  }
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v303, (__int128 *)(v390 - 16));
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v299, &v407);
                  v300 = v391;
                  v320 = v303 - (_QWORD)v391 + 16;
                  if (v320 >= 17)
                  {
                    v395 = v298;
                    v321 = (((unint64_t)v320 >> 4) - 2) >> 1;
                    v322 = &v391[2 * v321];
                    v323 = *v322;
                    v324 = (std::__shared_weak_count *)v322[1];
                    if (v324)
                    {
                      v325 = (unint64_t *)&v324->__shared_owners_;
                      do
                        v326 = __ldxr(v325);
                      while (__stxr(v326 + 1, v325));
                    }
                    *(_QWORD *)&v410[0] = *(_QWORD *)v303;
                    v327 = *(std::__shared_weak_count **)(v303 + 8);
                    *((_QWORD *)&v410[0] + 1) = v327;
                    if (v327)
                    {
                      v328 = (unint64_t *)&v327->__shared_owners_;
                      do
                        v329 = __ldxr(v328);
                      while (__stxr(v329 + 1, v328));
                    }
                    v330 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v323, v324, (uint64_t *)v410);
                    if (v327)
                    {
                      v331 = (unint64_t *)&v327->__shared_owners_;
                      do
                        v332 = __ldaxr(v331);
                      while (__stlxr(v332 - 1, v331));
                      if (!v332)
                      {
                        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                        std::__shared_weak_count::__release_weak(v327);
                      }
                    }
                    if (v324)
                    {
                      v333 = (unint64_t *)&v324->__shared_owners_;
                      do
                        v334 = __ldaxr(v333);
                      while (__stlxr(v334 - 1, v333));
                      if (!v334)
                      {
                        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                        std::__shared_weak_count::__release_weak(v324);
                      }
                    }
                    v298 = v395;
                    if (v330)
                    {
                      v409 = *(_OWORD *)v303;
                      *(_QWORD *)v303 = 0;
                      *(_QWORD *)(v303 + 8) = 0;
                      while (1)
                      {
                        v335 = (uint64_t)v322;
                        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v303, (__int128 *)v322);
                        if (!v321)
                        {
LABEL_482:
                          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v335, &v409);
                          v348 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
                          v298 = v395;
                          if (*((_QWORD *)&v409 + 1))
                          {
                            v349 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
                            do
                              v350 = __ldaxr(v349);
                            while (__stlxr(v350 - 1, v349));
                            if (!v350)
                            {
                              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                              std::__shared_weak_count::__release_weak(v348);
                            }
                          }
                          break;
                        }
                        v321 = (v321 - 1) >> 1;
                        v322 = &v391[2 * v321];
                        v336 = *v322;
                        v337 = (std::__shared_weak_count *)v322[1];
                        if (v337)
                        {
                          v338 = (unint64_t *)&v337->__shared_owners_;
                          do
                            v339 = __ldxr(v338);
                          while (__stxr(v339 + 1, v338));
                        }
                        v340 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
                        v408 = v409;
                        if (*((_QWORD *)&v409 + 1))
                        {
                          v341 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
                          do
                            v342 = __ldxr(v341);
                          while (__stxr(v342 + 1, v341));
                        }
                        v343 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v336, v337, (uint64_t *)&v408);
                        if (!v340)
                          goto LABEL_475;
                        v344 = (unint64_t *)&v340->__shared_owners_;
                        do
                          v345 = __ldaxr(v344);
                        while (__stlxr(v345 - 1, v344));
                        if (!v345)
                        {
                          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                          std::__shared_weak_count::__release_weak(v340);
                          if (v337)
                          {
LABEL_476:
                            v346 = (unint64_t *)&v337->__shared_owners_;
                            do
                              v347 = __ldaxr(v346);
                            while (__stlxr(v347 - 1, v346));
                            if (!v347)
                            {
                              ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                              std::__shared_weak_count::__release_weak(v337);
                            }
                          }
                        }
                        else
                        {
LABEL_475:
                          if (v337)
                            goto LABEL_476;
                        }
                        v303 = v335;
                        if (!v343)
                          goto LABEL_482;
                      }
                    }
                  }
LABEL_488:
                  v351 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                  if (*((_QWORD *)&v407 + 1))
                  {
                    v352 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                    do
                      v353 = __ldaxr(v352);
                    while (__stlxr(v353 - 1, v352));
                    if (!v353)
                    {
                      ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                      std::__shared_weak_count::__release_weak(v351);
                    }
                  }
                  if (v298-- <= 2)
                    return;
                }
              }
            }
            ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
            std::__shared_weak_count::__release_weak(v250);
            if (!v247)
              goto LABEL_354;
LABEL_353:
            v240 += 2;
            v239 = 2 * v238 + 2;
            goto LABEL_354;
          }
          v11 = v10 >> 1;
          v12 = &i[2 * (v10 >> 1)];
          if ((unint64_t)v9 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(&i[2 * (v10 >> 1)], i, v392, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(i, &i[2 * (v10 >> 1)], v392, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(i + 2, v12 - 2, v388, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(i + 4, &i[2 * v11 + 2], v387, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(v12 - 2, v12, &i[2 * v11 + 2], a3);
            v13 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)v12;
            *(_OWORD *)v12 = v13;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v14 = *(i - 2);
            v396[2] = v14;
            v15 = (std::__shared_weak_count *)*(i - 1);
            v397 = v15;
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *i;
            v19 = (std::__shared_weak_count *)i[1];
            v396[0] = v18;
            v396[1] = (uint64_t)v19;
            if (v19)
            {
              v20 = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v14, v15, v396);
            if (v19)
            {
              v23 = (unint64_t *)&v19->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            v25 = v397;
            i = v391;
            if (v397)
            {
              v26 = (unint64_t *)&v397->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            if (!v22)
            {
              v109 = (std::__shared_weak_count *)v391[1];
              *(_QWORD *)&v410[0] = *v391;
              v108 = *(_QWORD *)&v410[0];
              *((_QWORD *)&v410[0] + 1) = v109;
              *v391 = 0;
              v391[1] = 0;
              *(_QWORD *)&v409 = v108;
              *((_QWORD *)&v409 + 1) = v109;
              if (v109)
              {
                v110 = (unint64_t *)&v109->__shared_owners_;
                do
                  v111 = __ldxr(v110);
                while (__stxr(v111 + 1, v110));
              }
              *(_QWORD *)&v408 = *(v389 - 2);
              v112 = (std::__shared_weak_count *)*(v389 - 1);
              *((_QWORD *)&v408 + 1) = v112;
              if (v112)
              {
                v113 = (unint64_t *)&v112->__shared_owners_;
                do
                  v114 = __ldxr(v113);
                while (__stxr(v114 + 1, v113));
              }
              v115 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v108, v109, (uint64_t *)&v408);
              if (v112)
              {
                v116 = (unint64_t *)&v112->__shared_owners_;
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 - 1, v116));
                if (!v117)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                }
              }
              v118 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
              if (*((_QWORD *)&v409 + 1))
              {
                v119 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
                do
                  v120 = __ldaxr(v119);
                while (__stlxr(v120 - 1, v119));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                  std::__shared_weak_count::__release_weak(v118);
                }
              }
              if (v115)
              {
                do
                {
                  v121 = v410[0];
                  v407 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v122 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v123 = __ldxr(v122);
                    while (__stxr(v123 + 1, v122));
                  }
                  v124 = (std::__shared_weak_count *)i[3];
                  *(_QWORD *)&v406 = i[2];
                  *((_QWORD *)&v406 + 1) = v124;
                  if (v124)
                  {
                    v125 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
                  }
                  v127 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v121, *((std::__shared_weak_count **)&v121 + 1), (uint64_t *)&v406);
                  if (v124)
                  {
                    v128 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v129 = __ldaxr(v128);
                    while (__stlxr(v129 - 1, v128));
                    if (!v129)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  v130 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                  if (*((_QWORD *)&v407 + 1))
                  {
                    v131 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                    do
                      v132 = __ldaxr(v131);
                    while (__stlxr(v132 - 1, v131));
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
                  i += 2;
                }
                while (!v127);
              }
              else
              {
                v133 = v391;
                for (i = v391 + 2; i < v389; i += 2)
                {
                  v134 = i;
                  v135 = v410[0];
                  v407 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v136 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  v138 = (std::__shared_weak_count *)v133[3];
                  *(_QWORD *)&v406 = *i;
                  *((_QWORD *)&v406 + 1) = v138;
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldxr(v139);
                    while (__stxr(v140 + 1, v139));
                  }
                  v141 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v135, *((std::__shared_weak_count **)&v135 + 1), (uint64_t *)&v406);
                  if (v138)
                  {
                    v142 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  v144 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                  if (!*((_QWORD *)&v407 + 1))
                    goto LABEL_190;
                  v145 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                    if (v141)
                      break;
                  }
                  else
                  {
LABEL_190:
                    if (v141)
                      break;
                  }
                  v133 = v134;
                }
              }
              v147 = v389;
              if (i < v389)
              {
                v147 = v389;
                do
                {
                  v148 = v410[0];
                  v405 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v149 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v150 = __ldxr(v149);
                    while (__stxr(v150 + 1, v149));
                  }
                  *(_QWORD *)&v404 = *(v147 - 2);
                  v151 = (std::__shared_weak_count *)*(v147 - 1);
                  *((_QWORD *)&v404 + 1) = v151;
                  if (v151)
                  {
                    v152 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v153 = __ldxr(v152);
                    while (__stxr(v153 + 1, v152));
                  }
                  v154 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v148, *((std::__shared_weak_count **)&v148 + 1), (uint64_t *)&v404);
                  if (v151)
                  {
                    v155 = (unint64_t *)&v151->__shared_owners_;
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                  }
                  v157 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
                  if (*((_QWORD *)&v405 + 1))
                  {
                    v158 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 8);
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }
                  v147 -= 2;
                }
                while (v154);
              }
              while (i < v147)
              {
                v160 = *i;
                *i = *v147;
                *v147 = v160;
                v161 = i[1];
                i[1] = v147[1];
                v147[1] = v161;
                do
                {
                  v162 = v410[0];
                  v403 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v163 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v164 = __ldxr(v163);
                    while (__stxr(v164 + 1, v163));
                  }
                  v165 = (std::__shared_weak_count *)i[3];
                  *(_QWORD *)&v402 = i[2];
                  *((_QWORD *)&v402 + 1) = v165;
                  if (v165)
                  {
                    v166 = (unint64_t *)&v165->__shared_owners_;
                    do
                      v167 = __ldxr(v166);
                    while (__stxr(v167 + 1, v166));
                  }
                  v168 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v162, *((std::__shared_weak_count **)&v162 + 1), (uint64_t *)&v402);
                  if (v165)
                  {
                    v169 = (unint64_t *)&v165->__shared_owners_;
                    do
                      v170 = __ldaxr(v169);
                    while (__stlxr(v170 - 1, v169));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                      std::__shared_weak_count::__release_weak(v165);
                    }
                  }
                  v171 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
                  if (*((_QWORD *)&v403 + 1))
                  {
                    v172 = (unint64_t *)(*((_QWORD *)&v403 + 1) + 8);
                    do
                      v173 = __ldaxr(v172);
                    while (__stlxr(v173 - 1, v172));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
                  i += 2;
                }
                while (!v168);
                do
                {
                  v174 = v410[0];
                  v401 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v175 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v176 = __ldxr(v175);
                    while (__stxr(v176 + 1, v175));
                  }
                  v400[0] = *(v147 - 2);
                  v177 = (std::__shared_weak_count *)*(v147 - 1);
                  v400[1] = (uint64_t)v177;
                  if (v177)
                  {
                    v178 = (unint64_t *)&v177->__shared_owners_;
                    do
                      v179 = __ldxr(v178);
                    while (__stxr(v179 + 1, v178));
                  }
                  v180 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v174, *((std::__shared_weak_count **)&v174 + 1), v400);
                  if (v177)
                  {
                    v181 = (unint64_t *)&v177->__shared_owners_;
                    do
                      v182 = __ldaxr(v181);
                    while (__stlxr(v182 - 1, v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                      std::__shared_weak_count::__release_weak(v177);
                    }
                  }
                  v183 = (std::__shared_weak_count *)*((_QWORD *)&v401 + 1);
                  if (*((_QWORD *)&v401 + 1))
                  {
                    v184 = (unint64_t *)(*((_QWORD *)&v401 + 1) + 8);
                    do
                      v185 = __ldaxr(v184);
                    while (__stlxr(v185 - 1, v184));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                      std::__shared_weak_count::__release_weak(v183);
                    }
                  }
                  v147 -= 2;
                }
                while (v180);
              }
              if (i - 2 != v391)
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v391, (__int128 *)i - 1);
              std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)(i - 2), v410);
              v186 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
              if (*((_QWORD *)&v410[0] + 1))
              {
                v187 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              a5 = 0;
              continue;
            }
          }
          v410[0] = *(_OWORD *)i;
          *i = 0;
          i[1] = 0;
          v28 = i;
          do
          {
            while (1)
            {
              v29 = (uint64_t)v28;
              v30 = v28[2];
              v31 = (std::__shared_weak_count *)v28[3];
              v28 += 2;
              *(_QWORD *)&v409 = v30;
              *((_QWORD *)&v409 + 1) = v31;
              if (v31)
              {
                v32 = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
              }
              v34 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
              v408 = v410[0];
              if (*((_QWORD *)&v410[0] + 1))
              {
                v35 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              v37 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v30, v31, (uint64_t *)&v408);
              if (v34)
              {
                v38 = (unint64_t *)&v34->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              v40 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
              if (*((_QWORD *)&v409 + 1))
              {
                v41 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                  break;
              }
              if (!v37)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
          while (v37);
LABEL_45:
          v43 = v389;
          if ((uint64_t *)v29 == v391)
          {
            v43 = v389;
            if (v28 < v389)
            {
              v43 = v389;
              do
              {
                v59 = *(v43 - 2);
                v43 -= 2;
                v58 = v59;
                *(_QWORD *)&v407 = v59;
                v60 = (std::__shared_weak_count *)v43[1];
                *((_QWORD *)&v407 + 1) = v60;
                if (v60)
                {
                  v61 = (unint64_t *)&v60->__shared_owners_;
                  do
                    v62 = __ldxr(v61);
                  while (__stxr(v62 + 1, v61));
                }
                v63 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
                v406 = v410[0];
                if (*((_QWORD *)&v410[0] + 1))
                {
                  v64 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                  do
                    v65 = __ldxr(v64);
                  while (__stxr(v65 + 1, v64));
                }
                v66 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v58, v60, (uint64_t *)&v406);
                if (v63)
                {
                  v67 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v69 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                if (*((_QWORD *)&v407 + 1))
                {
                  v70 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
                v72 = v28 >= v43 || v66;
              }
              while ((v72 & 1) == 0);
            }
          }
          else
          {
            do
            {
              while (1)
              {
                v45 = *(v43 - 2);
                v43 -= 2;
                v44 = v45;
                *(_QWORD *)&v407 = v45;
                v46 = (std::__shared_weak_count *)v43[1];
                *((_QWORD *)&v407 + 1) = v46;
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
                v49 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
                v406 = v410[0];
                if (*((_QWORD *)&v410[0] + 1))
                {
                  v50 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                v52 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v44, v46, (uint64_t *)&v406);
                if (v49)
                {
                  v53 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v55 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                if (*((_QWORD *)&v407 + 1))
                {
                  v56 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                    break;
                }
                if (v52)
                  goto LABEL_87;
              }
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            while (!v52);
          }
LABEL_87:
          if (v28 < v43)
          {
            v73 = v28;
            v74 = v43;
            do
            {
              v75 = *v73;
              *v73 = *v74;
              *v74 = v75;
              v76 = v73[1];
              v73[1] = v74[1];
              v74[1] = v76;
              do
              {
                while (1)
                {
                  v29 = (uint64_t)v73;
                  v77 = v73[2];
                  v78 = (std::__shared_weak_count *)v73[3];
                  v73 += 2;
                  *(_QWORD *)&v405 = v77;
                  *((_QWORD *)&v405 + 1) = v78;
                  if (v78)
                  {
                    v79 = (unint64_t *)&v78->__shared_owners_;
                    do
                      v80 = __ldxr(v79);
                    while (__stxr(v80 + 1, v79));
                  }
                  v81 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
                  v404 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v82 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v83 = __ldxr(v82);
                    while (__stxr(v83 + 1, v82));
                  }
                  v84 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v77, v78, (uint64_t *)&v404);
                  if (v81)
                  {
                    v85 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
                  if (*((_QWORD *)&v405 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                      break;
                  }
                  if (!v84)
                    goto LABEL_110;
                }
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
              while (v84);
              do
              {
                while (1)
                {
LABEL_110:
                  v91 = *(v74 - 2);
                  v74 -= 2;
                  v90 = v91;
                  *(_QWORD *)&v403 = v91;
                  v92 = (std::__shared_weak_count *)v74[1];
                  *((_QWORD *)&v403 + 1) = v92;
                  if (v92)
                  {
                    v93 = (unint64_t *)&v92->__shared_owners_;
                    do
                      v94 = __ldxr(v93);
                    while (__stxr(v94 + 1, v93));
                  }
                  v95 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
                  v402 = v410[0];
                  if (*((_QWORD *)&v410[0] + 1))
                  {
                    v96 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
                    do
                      v97 = __ldxr(v96);
                    while (__stxr(v97 + 1, v96));
                  }
                  v98 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v90, v92, (uint64_t *)&v402);
                  if (v95)
                  {
                    v99 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v100 = __ldaxr(v99);
                    while (__stlxr(v100 - 1, v99));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                      std::__shared_weak_count::__release_weak(v95);
                    }
                  }
                  v101 = (std::__shared_weak_count *)*((_QWORD *)&v403 + 1);
                  if (!*((_QWORD *)&v403 + 1))
                    break;
                  v102 = (unint64_t *)(*((_QWORD *)&v403 + 1) + 8);
                  do
                    v103 = __ldaxr(v102);
                  while (__stlxr(v103 - 1, v102));
                  if (v103)
                    break;
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                  if (v98)
                    goto LABEL_126;
                }
              }
              while (!v98);
LABEL_126:
              ;
            }
            while (v73 < v74);
          }
          if ((uint64_t *)v29 != v391)
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v391, (__int128 *)v29);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v29, v410);
          v104 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
          if (*((_QWORD *)&v410[0] + 1))
          {
            v105 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          if (v28 < v43)
          {
LABEL_137:
            std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *,false>(v391, v29, a3, a4, a5 & 1);
            a5 = 0;
            i = (uint64_t *)(v29 + 16);
            continue;
          }
          v107 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>(v391, (uint64_t *)v29, a3);
          i = (uint64_t *)(v29 + 16);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0 &,std::shared_ptr<siri::intelligence::IntentReference> *>((uint64_t *)(v29 + 16), v389, a3))
          {
            if (v107)
              continue;
            goto LABEL_137;
          }
          a2 = (uint64_t *)v29;
          i = v391;
          if (v107)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) == 0)
        {
          if (i == v389)
            return;
          v355 = i + 2;
          while (1)
          {
            if (v355 == v389)
              return;
            v356 = v355;
            v357 = i[2];
            v358 = (std::__shared_weak_count *)i[3];
            *(_QWORD *)&v410[0] = v357;
            *((_QWORD *)&v410[0] + 1) = v358;
            if (v358)
            {
              v359 = (unint64_t *)&v358->__shared_owners_;
              do
                v360 = __ldxr(v359);
              while (__stxr(v360 + 1, v359));
            }
            v361 = (std::__shared_weak_count *)i[1];
            *(_QWORD *)&v409 = *i;
            *((_QWORD *)&v409 + 1) = v361;
            if (v361)
            {
              v362 = (unint64_t *)&v361->__shared_owners_;
              do
                v363 = __ldxr(v362);
              while (__stxr(v363 + 1, v362));
            }
            v364 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v357, v358, (uint64_t *)&v409);
            if (v361)
            {
              v365 = (unint64_t *)&v361->__shared_owners_;
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                std::__shared_weak_count::__release_weak(v361);
              }
            }
            v367 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
            if (!*((_QWORD *)&v410[0] + 1))
              goto LABEL_514;
            v368 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
            do
              v369 = __ldaxr(v368);
            while (__stlxr(v369 - 1, v368));
            if (!v369)
            {
              ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
              std::__shared_weak_count::__release_weak(v367);
              if (!v364)
                goto LABEL_540;
            }
            else
            {
LABEL_514:
              if (!v364)
                goto LABEL_540;
            }
            v408 = *(_OWORD *)v356;
            *v356 = 0;
            v356[1] = 0;
            v370 = (uint64_t)v356;
            do
            {
              while (1)
              {
                v371 = v370;
                v370 = (uint64_t)i;
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v371, (__int128 *)i);
                v372 = v408;
                v407 = v408;
                if (*((_QWORD *)&v408 + 1))
                {
                  v373 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v374 = __ldxr(v373);
                  while (__stxr(v374 + 1, v373));
                }
                i -= 2;
                *(_QWORD *)&v406 = *(_QWORD *)(v370 - 16);
                v375 = *(std::__shared_weak_count **)(v370 - 8);
                *((_QWORD *)&v406 + 1) = v375;
                if (v375)
                {
                  v376 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v377 = __ldxr(v376);
                  while (__stxr(v377 + 1, v376));
                }
                v378 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v372, *((std::__shared_weak_count **)&v372 + 1), (uint64_t *)&v406);
                if (v375)
                {
                  v379 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v380 = __ldaxr(v379);
                  while (__stlxr(v380 - 1, v379));
                  if (!v380)
                  {
                    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                    std::__shared_weak_count::__release_weak(v375);
                  }
                }
                v381 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                if (*((_QWORD *)&v407 + 1))
                {
                  v382 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                  do
                    v383 = __ldaxr(v382);
                  while (__stlxr(v383 - 1, v382));
                  if (!v383)
                    break;
                }
                if (!v378)
                  goto LABEL_534;
              }
              ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
              std::__shared_weak_count::__release_weak(v381);
            }
            while (v378);
LABEL_534:
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v370, &v408);
            v384 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v385 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 - 1, v385));
              if (!v386)
              {
                ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                std::__shared_weak_count::__release_weak(v384);
              }
            }
LABEL_540:
            v355 = v356 + 2;
            i = v356;
          }
        }
        if (i == v389)
          return;
        v204 = i + 2;
        if (i + 2 == v389)
          return;
        v205 = (uint64_t)i;
        do
        {
          v206 = v204;
          v207 = *(_QWORD *)(v205 + 16);
          v208 = *(std::__shared_weak_count **)(v205 + 24);
          *(_QWORD *)&v410[0] = v207;
          *((_QWORD *)&v410[0] + 1) = v208;
          if (v208)
          {
            v209 = (unint64_t *)&v208->__shared_owners_;
            do
              v210 = __ldxr(v209);
            while (__stxr(v210 + 1, v209));
          }
          v211 = *(std::__shared_weak_count **)(v205 + 8);
          *(_QWORD *)&v409 = *(_QWORD *)v205;
          *((_QWORD *)&v409 + 1) = v211;
          if (v211)
          {
            v212 = (unint64_t *)&v211->__shared_owners_;
            do
              v213 = __ldxr(v212);
            while (__stxr(v213 + 1, v212));
          }
          v214 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v207, v208, (uint64_t *)&v409);
          if (v211)
          {
            v215 = (unint64_t *)&v211->__shared_owners_;
            do
              v216 = __ldaxr(v215);
            while (__stlxr(v216 - 1, v215));
            if (!v216)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          v217 = (std::__shared_weak_count *)*((_QWORD *)&v410[0] + 1);
          if (!*((_QWORD *)&v410[0] + 1))
            goto LABEL_301;
          v218 = (unint64_t *)(*((_QWORD *)&v410[0] + 1) + 8);
          do
            v219 = __ldaxr(v218);
          while (__stlxr(v219 - 1, v218));
          if (!v219)
          {
            ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
            std::__shared_weak_count::__release_weak(v217);
            if (!v214)
              goto LABEL_331;
          }
          else
          {
LABEL_301:
            if (!v214)
              goto LABEL_331;
          }
          v408 = *(_OWORD *)(v205 + 16);
          *v206 = 0;
          v206[1] = 0;
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v206, (__int128 *)v205);
          v220 = (uint64_t)i;
          if ((uint64_t *)v205 == i)
            goto LABEL_326;
          while (1)
          {
            v221 = v408;
            v407 = v408;
            if (*((_QWORD *)&v408 + 1))
            {
              v222 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v223 = __ldxr(v222);
              while (__stxr(v223 + 1, v222));
            }
            v224 = (uint64_t *)(v205 - 16);
            *(_QWORD *)&v406 = *(_QWORD *)(v205 - 16);
            v225 = *(std::__shared_weak_count **)(v205 - 8);
            *((_QWORD *)&v406 + 1) = v225;
            if (v225)
            {
              v226 = (unint64_t *)&v225->__shared_owners_;
              do
                v227 = __ldxr(v226);
              while (__stxr(v227 + 1, v226));
            }
            v228 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_0::operator()(*a3, v221, *((std::__shared_weak_count **)&v221 + 1), (uint64_t *)&v406);
            if (v225)
            {
              v229 = (unint64_t *)&v225->__shared_owners_;
              do
                v230 = __ldaxr(v229);
              while (__stlxr(v230 - 1, v229));
              if (!v230)
              {
                ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                std::__shared_weak_count::__release_weak(v225);
              }
            }
            v231 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
            if (*((_QWORD *)&v407 + 1))
            {
              v232 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
              do
                v233 = __ldaxr(v232);
              while (__stlxr(v233 - 1, v232));
              if (!v233)
                break;
            }
            if (!v228)
              goto LABEL_325;
LABEL_321:
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v205, (__int128 *)(v205 - 16));
            v205 -= 16;
            if (v224 == i)
            {
              v220 = (uint64_t)i;
              goto LABEL_326;
            }
          }
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
          if (v228)
            goto LABEL_321;
LABEL_325:
          v220 = v205;
LABEL_326:
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v220, &v408);
          v234 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
          if (*((_QWORD *)&v408 + 1))
          {
            v235 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
            if (!v236)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
LABEL_331:
          v204 = v206 + 2;
          v205 = (uint64_t)v206;
        }
        while (v206 + 2 != v389);
        return;
    }
  }
}

  v368 = (uint64_t *)(a2 - 32);
  v369 = (uint64_t *)(a2 - 16);
  v367 = (uint64_t *)(a2 - 48);
  v10 = a1;
  v371 = (uint64_t *)a2;
  while (2)
  {
    v11 = v10;
    v12 = a2 - (_QWORD)v10;
    v13 = (uint64_t)(a2 - (_QWORD)v10) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v378 = *(_QWORD *)(a2 - 16);
        v183 = *(std::__shared_weak_count **)(a2 - 8);
        v379 = v183;
        if (v183)
        {
          p_shared_owners = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldxr(p_shared_owners);
          while (__stxr(v185 + 1, p_shared_owners));
        }
        v186 = (std::__shared_weak_count *)v10[1];
        v377[0] = *v10;
        v377[1] = (uint64_t)v186;
        if (v186)
        {
          v187 = (unint64_t *)&v186->__shared_owners_;
          do
            v188 = __ldxr(v187);
          while (__stxr(v188 + 1, v187));
        }
        v189 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v378, v377);
        if (v186)
        {
          v190 = (unint64_t *)&v186->__shared_owners_;
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v192 = v379;
        if (v379)
        {
          v193 = (unint64_t *)&v379->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        if (v189)
        {
          v195 = *v10;
          *v10 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v195;
          v196 = v10[1];
          v10[1] = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v196;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v10, v10 + 2, v369, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v10, v10 + 2, v10 + 4, v369, a3);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *,0>(v10, v10 + 2, v10 + 4, v10 + 6, v369, a3);
        return;
      default:
        if (v12 > 383)
        {
          v373 = v10;
          if (!a4)
          {
            if (v10 == (uint64_t *)a2)
              return;
            v228 = (v13 - 2) >> 1;
            v370 = v228;
            while (1)
            {
              v229 = v228;
              if (v370 < v228)
                goto LABEL_418;
              v230 = (2 * v228) | 1;
              v231 = (uint64_t)&v11[2 * v230];
              if (2 * v228 + 2 >= (uint64_t)v13)
                goto LABEL_356;
              v391[0] = *(_OWORD *)v231;
              if (*((_QWORD *)&v391[0] + 1))
              {
                v232 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                do
                  v233 = __ldxr(v232);
                while (__stxr(v233 + 1, v232));
              }
              v389 = *(_QWORD *)(v231 + 16);
              v234 = *(std::__shared_weak_count **)(v231 + 24);
              v390 = v234;
              if (v234)
              {
                v235 = (unint64_t *)&v234->__shared_owners_;
                do
                  v236 = __ldxr(v235);
                while (__stxr(v236 + 1, v235));
              }
              v237 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, v391, &v389);
              if (v234)
              {
                v238 = (unint64_t *)&v234->__shared_owners_;
                do
                  v239 = __ldaxr(v238);
                while (__stlxr(v239 - 1, v238));
                if (!v239)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
              v240 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
              if (*((_QWORD *)&v391[0] + 1))
              {
                v241 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                  break;
              }
              if (v237)
                goto LABEL_355;
LABEL_356:
              v243 = *(_QWORD *)(v231 + 8);
              *(_QWORD *)&v388 = *(_QWORD *)v231;
              *((_QWORD *)&v388 + 1) = v243;
              if (v243)
              {
                v244 = (unint64_t *)(v243 + 8);
                do
                  v245 = __ldxr(v244);
                while (__stxr(v245 + 1, v244));
              }
              v11 = v373;
              v246 = &v373[2 * v229];
              *(_QWORD *)&v387 = *v246;
              v247 = (std::__shared_weak_count *)v246[1];
              *((_QWORD *)&v387 + 1) = v247;
              if (v247)
              {
                v248 = (unint64_t *)&v247->__shared_owners_;
                do
                  v249 = __ldxr(v248);
                while (__stxr(v249 + 1, v248));
              }
              v250 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v388, (uint64_t *)&v387);
              if (v247)
              {
                v251 = (unint64_t *)&v247->__shared_owners_;
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 - 1, v251));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                  std::__shared_weak_count::__release_weak(v247);
                }
              }
              v253 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
              if (*((_QWORD *)&v388 + 1))
              {
                v254 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
                do
                  v255 = __ldaxr(v254);
                while (__stlxr(v255 - 1, v254));
                if (!v255)
                {
                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                  std::__shared_weak_count::__release_weak(v253);
                }
              }
              if ((v250 & 1) == 0)
              {
                v386 = *(_OWORD *)v246;
                *v246 = 0;
                v246[1] = 0;
                while (1)
                {
                  v256 = v231;
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v246, (__int128 *)v231);
                  if (v370 < v230)
                  {
LABEL_413:
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v256, &v386);
                    v283 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
                    if (*((_QWORD *)&v386 + 1))
                    {
                      v284 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
                      do
                        v285 = __ldaxr(v284);
                      while (__stlxr(v285 - 1, v284));
                      if (!v285)
                      {
                        ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                        std::__shared_weak_count::__release_weak(v283);
                      }
                    }
                    break;
                  }
                  v257 = 2 * v230;
                  v230 = (2 * v230) | 1;
                  v231 = (uint64_t)&v11[2 * v230];
                  v258 = v257 + 2;
                  if (v257 + 2 < (uint64_t)v13)
                  {
                    v259 = *(_OWORD *)v231;
                    v385 = v259;
                    if (*((_QWORD *)&v259 + 1))
                    {
                      v260 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
                      do
                        v261 = __ldxr(v260);
                      while (__stxr(v261 + 1, v260));
                    }
                    *(_QWORD *)&v384 = *(_QWORD *)(v231 + 16);
                    v262 = *(std::__shared_weak_count **)(v231 + 24);
                    *((_QWORD *)&v384 + 1) = v262;
                    if (v262)
                    {
                      v263 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v264 = __ldxr(v263);
                      while (__stxr(v264 + 1, v263));
                    }
                    v265 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v385, (uint64_t *)&v384);
                    if (v262)
                    {
                      v266 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v267 = __ldaxr(v266);
                      while (__stlxr(v267 - 1, v266));
                      if (!v267)
                      {
                        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                        std::__shared_weak_count::__release_weak(v262);
                      }
                    }
                    v268 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
                    if (*((_QWORD *)&v385 + 1))
                    {
                      v269 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
                      do
                        v270 = __ldaxr(v269);
                      while (__stlxr(v270 - 1, v269));
                      if (!v270)
                      {
                        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                        std::__shared_weak_count::__release_weak(v268);
                        if ((v265 & 1) == 0)
                          goto LABEL_393;
LABEL_392:
                        v231 += 16;
                        v230 = v258;
                        goto LABEL_393;
                      }
                    }
                    if (v265)
                      goto LABEL_392;
                  }
LABEL_393:
                  v271 = *(_QWORD *)(v231 + 8);
                  *(_QWORD *)&v383 = *(_QWORD *)v231;
                  *((_QWORD *)&v383 + 1) = v271;
                  if (v271)
                  {
                    v272 = (unint64_t *)(v271 + 8);
                    do
                      v273 = __ldxr(v272);
                    while (__stxr(v273 + 1, v272));
                  }
                  v274 = (std::__shared_weak_count *)*((_QWORD *)&v386 + 1);
                  v382 = v386;
                  v11 = v373;
                  if (*((_QWORD *)&v386 + 1))
                  {
                    v275 = (unint64_t *)(*((_QWORD *)&v386 + 1) + 8);
                    do
                      v276 = __ldxr(v275);
                    while (__stxr(v276 + 1, v275));
                  }
                  v277 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v383, (uint64_t *)&v382);
                  if (v274)
                  {
                    v278 = (unint64_t *)&v274->__shared_owners_;
                    do
                      v279 = __ldaxr(v278);
                    while (__stlxr(v279 - 1, v278));
                    if (!v279)
                    {
                      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                      std::__shared_weak_count::__release_weak(v274);
                    }
                  }
                  v280 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
                  if (*((_QWORD *)&v383 + 1))
                  {
                    v281 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
                    do
                      v282 = __ldaxr(v281);
                    while (__stlxr(v282 - 1, v281));
                    if (!v282)
                    {
                      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                      std::__shared_weak_count::__release_weak(v280);
                    }
                  }
                  v246 = (uint64_t *)v256;
                  if (v277)
                    goto LABEL_413;
                }
              }
LABEL_418:
              v228 = v229 - 1;
              if (!v229)
              {
                v286 = (unint64_t)v12 >> 4;
                v287 = (uint64_t)v371;
                while (1)
                {
                  v372 = v287;
                  v288 = (uint64_t)v11;
                  v289 = 0;
                  v385 = *(_OWORD *)v288;
                  *(_QWORD *)v288 = 0;
                  *(_QWORD *)(v288 + 8) = 0;
                  do
                  {
                    v290 = v288;
                    v288 += 16 * v289 + 16;
                    v291 = 2 * v289;
                    v289 = (2 * v289) | 1;
                    v292 = v291 + 2;
                    if (v291 + 2 >= v286)
                      goto LABEL_441;
                    v391[0] = *(_OWORD *)v288;
                    if (*((_QWORD *)&v391[0] + 1))
                    {
                      v293 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                      do
                        v294 = __ldxr(v293);
                      while (__stxr(v294 + 1, v293));
                    }
                    v389 = *(_QWORD *)(v288 + 16);
                    v295 = *(std::__shared_weak_count **)(v288 + 24);
                    v390 = v295;
                    if (v295)
                    {
                      v296 = (unint64_t *)&v295->__shared_owners_;
                      do
                        v297 = __ldxr(v296);
                      while (__stxr(v297 + 1, v296));
                    }
                    v298 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, v391, &v389);
                    if (v295)
                    {
                      v299 = (unint64_t *)&v295->__shared_owners_;
                      do
                        v300 = __ldaxr(v299);
                      while (__stlxr(v300 - 1, v299));
                      if (!v300)
                      {
                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                        std::__shared_weak_count::__release_weak(v295);
                      }
                    }
                    v301 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                    if (!*((_QWORD *)&v391[0] + 1))
                      goto LABEL_439;
                    v302 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v303 = __ldaxr(v302);
                    while (__stlxr(v303 - 1, v302));
                    if (v303)
                    {
LABEL_439:
                      if (!v298)
                        goto LABEL_441;
LABEL_440:
                      v288 += 16;
                      v289 = v292;
                      goto LABEL_441;
                    }
                    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                    std::__shared_weak_count::__release_weak(v301);
                    if ((v298 & 1) != 0)
                      goto LABEL_440;
LABEL_441:
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v290, (__int128 *)v288);
                  }
                  while (v289 <= (uint64_t)((unint64_t)(v286 - 2) >> 1));
                  v287 = v372 - 16;
                  if (v288 == v372 - 16)
                  {
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v288, &v385);
                  }
                  else
                  {
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v288, (__int128 *)(v372 - 16));
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v287, &v385);
                    v304 = v288 - (_QWORD)v373 + 16;
                    if (v304 >= 17)
                    {
                      v305 = (((unint64_t)v304 >> 4) - 2) >> 1;
                      v306 = (__int128 *)&v373[2 * v305];
                      v391[0] = *v306;
                      if (*((_QWORD *)&v391[0] + 1))
                      {
                        v307 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                        do
                          v308 = __ldxr(v307);
                        while (__stxr(v308 + 1, v307));
                      }
                      v389 = *(_QWORD *)v288;
                      v309 = *(std::__shared_weak_count **)(v288 + 8);
                      v390 = v309;
                      if (v309)
                      {
                        v310 = (unint64_t *)&v309->__shared_owners_;
                        do
                          v311 = __ldxr(v310);
                        while (__stxr(v311 + 1, v310));
                      }
                      v312 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, v391, &v389);
                      if (v309)
                      {
                        v313 = (unint64_t *)&v309->__shared_owners_;
                        do
                          v314 = __ldaxr(v313);
                        while (__stlxr(v314 - 1, v313));
                        if (!v314)
                        {
                          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                          std::__shared_weak_count::__release_weak(v309);
                        }
                      }
                      v315 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                      if (*((_QWORD *)&v391[0] + 1))
                      {
                        v316 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                        do
                          v317 = __ldaxr(v316);
                        while (__stlxr(v317 - 1, v316));
                        if (!v317)
                        {
                          ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                          std::__shared_weak_count::__release_weak(v315);
                        }
                      }
                      v287 = v372 - 16;
                      if (v312)
                      {
                        v388 = *(_OWORD *)v288;
                        *(_QWORD *)v288 = 0;
                        *(_QWORD *)(v288 + 8) = 0;
                        do
                        {
                          v318 = (uint64_t)v306;
                          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v288, v306);
                          if (!v305)
                            break;
                          v305 = (v305 - 1) >> 1;
                          v306 = (__int128 *)&v373[2 * v305];
                          v387 = *v306;
                          if (*((_QWORD *)&v387 + 1))
                          {
                            v319 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                            do
                              v320 = __ldxr(v319);
                            while (__stxr(v320 + 1, v319));
                          }
                          v321 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
                          v386 = v388;
                          if (*((_QWORD *)&v388 + 1))
                          {
                            v322 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
                            do
                              v323 = __ldxr(v322);
                            while (__stxr(v323 + 1, v322));
                          }
                          v324 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                          if (v321)
                          {
                            v325 = (unint64_t *)&v321->__shared_owners_;
                            do
                              v326 = __ldaxr(v325);
                            while (__stlxr(v326 - 1, v325));
                            if (!v326)
                            {
                              ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                              std::__shared_weak_count::__release_weak(v321);
                            }
                          }
                          v327 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                          if (*((_QWORD *)&v387 + 1))
                          {
                            v328 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                            do
                              v329 = __ldaxr(v328);
                            while (__stlxr(v329 - 1, v328));
                            if (!v329)
                            {
                              ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                              std::__shared_weak_count::__release_weak(v327);
                            }
                          }
                          v288 = v318;
                        }
                        while ((v324 & 1) != 0);
                        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v318, &v388);
                        v330 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
                        v287 = v372 - 16;
                        if (*((_QWORD *)&v388 + 1))
                        {
                          v331 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
                          do
                            v332 = __ldaxr(v331);
                          while (__stlxr(v332 - 1, v331));
                          if (!v332)
                          {
                            ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                            std::__shared_weak_count::__release_weak(v330);
                          }
                        }
                      }
                    }
                  }
                  v333 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
                  v11 = v373;
                  if (*((_QWORD *)&v385 + 1))
                  {
                    v334 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
                    do
                      v335 = __ldaxr(v334);
                    while (__stlxr(v335 - 1, v334));
                    if (!v335)
                    {
                      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                      std::__shared_weak_count::__release_weak(v333);
                    }
                  }
                  if (v286-- <= 2)
                    return;
                }
              }
            }
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
            if ((v237 & 1) == 0)
              goto LABEL_356;
LABEL_355:
            v231 += 16;
            v230 = 2 * v229 + 2;
            goto LABEL_356;
          }
          v14 = v10;
          v15 = v13 >> 1;
          v16 = &v10[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(&v10[2 * (v13 >> 1)], v10, v369, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v10, &v10[2 * (v13 >> 1)], v369, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v10 + 2, v16 - 2, v368, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v10 + 4, &v10[2 * v15 + 2], v367, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v16 - 2, &v10[2 * (v13 >> 1)], &v10[2 * v15 + 2], a3);
            v17 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v17;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v375 = *(v10 - 2);
            v18 = (std::__shared_weak_count *)*(v10 - 1);
            v376 = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
            v21 = (std::__shared_weak_count *)v10[1];
            v374[0] = *v14;
            v374[1] = (uint64_t)v21;
            if (v21)
            {
              v22 = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            v24 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v375, v374);
            if (v21)
            {
              v25 = (unint64_t *)&v21->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v27 = v376;
            if (v376)
            {
              v28 = (unint64_t *)&v376->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            if ((v24 & 1) == 0)
            {
              v107 = v14[1];
              *(_QWORD *)&v391[0] = *v14;
              v108 = *(_QWORD *)&v391[0];
              *((_QWORD *)&v391[0] + 1) = v107;
              *v14 = 0;
              v14[1] = 0;
              v389 = v108;
              v390 = (std::__shared_weak_count *)v107;
              if (v107)
              {
                v109 = (unint64_t *)(v107 + 8);
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
              }
              *(_QWORD *)&v388 = *(_QWORD *)(a2 - 16);
              v111 = *(std::__shared_weak_count **)(a2 - 8);
              *((_QWORD *)&v388 + 1) = v111;
              if (v111)
              {
                v112 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldxr(v112);
                while (__stxr(v113 + 1, v112));
              }
              v114 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v389, (uint64_t *)&v388);
              if (v111)
              {
                v115 = (unint64_t *)&v111->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              v117 = v390;
              if (v390)
              {
                v118 = (unint64_t *)&v390->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              v10 = v14;
              if (!v114)
              {
                v10 = v14 + 2;
                v131 = v14;
                if ((unint64_t)(v14 + 2) >= a2)
                  goto LABEL_196;
                while (1)
                {
                  v132 = v10;
                  v387 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v133 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v134 = __ldxr(v133);
                    while (__stxr(v134 + 1, v133));
                  }
                  v135 = (std::__shared_weak_count *)v131[3];
                  *(_QWORD *)&v386 = *v10;
                  *((_QWORD *)&v386 + 1) = v135;
                  if (v135)
                  {
                    v136 = (unint64_t *)&v135->__shared_owners_;
                    do
                      v137 = __ldxr(v136);
                    while (__stxr(v137 + 1, v136));
                  }
                  v138 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                  if (v135)
                  {
                    v139 = (unint64_t *)&v135->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                      std::__shared_weak_count::__release_weak(v135);
                    }
                  }
                  v141 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                  if (!*((_QWORD *)&v387 + 1))
                    goto LABEL_190;
                  v142 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                    if ((v138 & 1) != 0)
                    {
LABEL_195:
                      v14 = v373;
                      goto LABEL_196;
                    }
                  }
                  else
                  {
LABEL_190:
                    if ((v138 & 1) != 0)
                      goto LABEL_195;
                  }
                  v10 += 2;
                  v131 = v132;
                  v14 = v373;
                  if ((unint64_t)(v132 + 2) >= a2)
                    goto LABEL_196;
                }
              }
              do
              {
                v387 = v391[0];
                if (*((_QWORD *)&v391[0] + 1))
                {
                  v120 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                  do
                    v121 = __ldxr(v120);
                  while (__stxr(v121 + 1, v120));
                }
                v122 = (std::__shared_weak_count *)v10[3];
                *(_QWORD *)&v386 = v10[2];
                *((_QWORD *)&v386 + 1) = v122;
                if (v122)
                {
                  v123 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v124 = __ldxr(v123);
                  while (__stxr(v124 + 1, v123));
                }
                v125 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                if (v122)
                {
                  v126 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                v128 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                if (*((_QWORD *)&v387 + 1))
                {
                  v129 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                  do
                    v130 = __ldaxr(v129);
                  while (__stlxr(v130 - 1, v129));
                  if (!v130)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }
                v10 += 2;
              }
              while ((v125 & 1) == 0);
LABEL_196:
              v144 = (uint64_t *)a2;
              if ((unint64_t)v10 < a2)
              {
                v144 = (uint64_t *)a2;
                do
                {
                  v385 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v145 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v146 = __ldxr(v145);
                    while (__stxr(v146 + 1, v145));
                  }
                  *(_QWORD *)&v384 = *(v144 - 2);
                  v147 = (std::__shared_weak_count *)*(v144 - 1);
                  *((_QWORD *)&v384 + 1) = v147;
                  if (v147)
                  {
                    v148 = (unint64_t *)&v147->__shared_owners_;
                    do
                      v149 = __ldxr(v148);
                    while (__stxr(v149 + 1, v148));
                  }
                  v150 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v385, (uint64_t *)&v384);
                  if (v147)
                  {
                    v151 = (unint64_t *)&v147->__shared_owners_;
                    do
                      v152 = __ldaxr(v151);
                    while (__stlxr(v152 - 1, v151));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                      std::__shared_weak_count::__release_weak(v147);
                    }
                  }
                  v153 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
                  if (*((_QWORD *)&v385 + 1))
                  {
                    v154 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
                    do
                      v155 = __ldaxr(v154);
                    while (__stlxr(v155 - 1, v154));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v144 -= 2;
                }
                while ((v150 & 1) != 0);
              }
              while (v10 < v144)
              {
                v156 = *v10;
                *v10 = *v144;
                *v144 = v156;
                v157 = v10[1];
                v10[1] = v144[1];
                v144[1] = v157;
                do
                {
                  v383 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v158 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v159 = __ldxr(v158);
                    while (__stxr(v159 + 1, v158));
                  }
                  v160 = (std::__shared_weak_count *)v10[3];
                  *(_QWORD *)&v382 = v10[2];
                  *((_QWORD *)&v382 + 1) = v160;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldxr(v161);
                    while (__stxr(v162 + 1, v161));
                  }
                  v163 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v383, (uint64_t *)&v382);
                  if (v160)
                  {
                    v164 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v166 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
                  if (*((_QWORD *)&v383 + 1))
                  {
                    v167 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
                    do
                      v168 = __ldaxr(v167);
                    while (__stlxr(v168 - 1, v167));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                      std::__shared_weak_count::__release_weak(v166);
                    }
                  }
                  v10 += 2;
                }
                while (!v163);
                do
                {
                  v381 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v169 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v170 = __ldxr(v169);
                    while (__stxr(v170 + 1, v169));
                  }
                  v380[0] = *(v144 - 2);
                  v171 = (std::__shared_weak_count *)*(v144 - 1);
                  v380[1] = (uint64_t)v171;
                  if (v171)
                  {
                    v172 = (unint64_t *)&v171->__shared_owners_;
                    do
                      v173 = __ldxr(v172);
                    while (__stxr(v173 + 1, v172));
                  }
                  v174 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v381, v380);
                  if (v171)
                  {
                    v175 = (unint64_t *)&v171->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
                  v177 = (std::__shared_weak_count *)*((_QWORD *)&v381 + 1);
                  if (*((_QWORD *)&v381 + 1))
                  {
                    v178 = (unint64_t *)(*((_QWORD *)&v381 + 1) + 8);
                    do
                      v179 = __ldaxr(v178);
                    while (__stlxr(v179 - 1, v178));
                    if (!v179)
                    {
                      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                      std::__shared_weak_count::__release_weak(v177);
                    }
                  }
                  v144 -= 2;
                }
                while ((v174 & 1) != 0);
              }
              if (v10 - 2 != v14)
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)v10 - 1);
              std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)(v10 - 2), v391);
              v180 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
              if (*((_QWORD *)&v391[0] + 1))
              {
                v181 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                  std::__shared_weak_count::__release_weak(v180);
                }
              }
              a5 = 0;
              continue;
            }
          }
          v391[0] = *(_OWORD *)v14;
          *v14 = 0;
          v14[1] = 0;
          v30 = v14;
          do
          {
            while (1)
            {
              v31 = (uint64_t)v30;
              v33 = v30[2];
              v32 = (std::__shared_weak_count *)v30[3];
              v30 += 2;
              v389 = v33;
              v390 = v32;
              if (v32)
              {
                v34 = (unint64_t *)&v32->__shared_owners_;
                do
                  v35 = __ldxr(v34);
                while (__stxr(v35 + 1, v34));
              }
              v36 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
              v388 = v391[0];
              if (*((_QWORD *)&v391[0] + 1))
              {
                v37 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              v39 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v389, (uint64_t *)&v388);
              if (v36)
              {
                v40 = (unint64_t *)&v36->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              v42 = v390;
              if (v390)
              {
                v43 = (unint64_t *)&v390->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                  break;
              }
              if ((v39 & 1) == 0)
                goto LABEL_45;
            }
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          while ((v39 & 1) != 0);
LABEL_45:
          if ((uint64_t *)v31 == v373)
          {
            a2 = (unint64_t)v371;
            if (v30 < v371)
            {
              a2 = (unint64_t)v371;
              do
              {
                v58 = *(_QWORD *)(a2 - 16);
                a2 -= 16;
                *(_QWORD *)&v387 = v58;
                v59 = *(_QWORD *)(a2 + 8);
                *((_QWORD *)&v387 + 1) = v59;
                if (v59)
                {
                  v60 = (unint64_t *)(v59 + 8);
                  do
                    v61 = __ldxr(v60);
                  while (__stxr(v61 + 1, v60));
                }
                v62 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                v386 = v391[0];
                if (*((_QWORD *)&v391[0] + 1))
                {
                  v63 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                  do
                    v64 = __ldxr(v63);
                  while (__stxr(v64 + 1, v63));
                }
                v65 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                if (v62)
                {
                  v66 = (unint64_t *)&v62->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                v68 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                if (*((_QWORD *)&v387 + 1))
                {
                  v69 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                if ((unint64_t)v30 >= a2)
                  v71 = 1;
                else
                  v71 = v65;
              }
              while ((v71 & 1) == 0);
            }
          }
          else
          {
            do
            {
              while (1)
              {
                v45 = *(_QWORD *)(a2 - 16);
                a2 -= 16;
                *(_QWORD *)&v387 = v45;
                v46 = *(_QWORD *)(a2 + 8);
                *((_QWORD *)&v387 + 1) = v46;
                if (v46)
                {
                  v47 = (unint64_t *)(v46 + 8);
                  do
                    v48 = __ldxr(v47);
                  while (__stxr(v48 + 1, v47));
                }
                v49 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                v386 = v391[0];
                if (*((_QWORD *)&v391[0] + 1))
                {
                  v50 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                v52 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                if (v49)
                {
                  v53 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v55 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                if (*((_QWORD *)&v387 + 1))
                {
                  v56 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                    break;
                }
                if ((v52 & 1) != 0)
                  goto LABEL_87;
              }
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            while ((v52 & 1) == 0);
          }
LABEL_87:
          if ((unint64_t)v30 < a2)
          {
            v72 = v30;
            v73 = (uint64_t *)a2;
            do
            {
              v74 = *v72;
              *v72 = *v73;
              *v73 = v74;
              v75 = v72[1];
              v72[1] = v73[1];
              v73[1] = v75;
              do
              {
                while (1)
                {
                  v31 = (uint64_t)v72;
                  v77 = v72[2];
                  v76 = v72[3];
                  v72 += 2;
                  *(_QWORD *)&v385 = v77;
                  *((_QWORD *)&v385 + 1) = v76;
                  if (v76)
                  {
                    v78 = (unint64_t *)(v76 + 8);
                    do
                      v79 = __ldxr(v78);
                    while (__stxr(v79 + 1, v78));
                  }
                  v80 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                  v384 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v81 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v82 = __ldxr(v81);
                    while (__stxr(v82 + 1, v81));
                  }
                  v83 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v385, (uint64_t *)&v384);
                  if (v80)
                  {
                    v84 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v85 = __ldaxr(v84);
                    while (__stlxr(v85 - 1, v84));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v86 = (std::__shared_weak_count *)*((_QWORD *)&v385 + 1);
                  if (*((_QWORD *)&v385 + 1))
                  {
                    v87 = (unint64_t *)(*((_QWORD *)&v385 + 1) + 8);
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                      break;
                  }
                  if ((v83 & 1) == 0)
                    goto LABEL_110;
                }
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
              while ((v83 & 1) != 0);
              do
              {
                while (1)
                {
LABEL_110:
                  v89 = *(v73 - 2);
                  v73 -= 2;
                  *(_QWORD *)&v383 = v89;
                  v90 = v73[1];
                  *((_QWORD *)&v383 + 1) = v90;
                  if (v90)
                  {
                    v91 = (unint64_t *)(v90 + 8);
                    do
                      v92 = __ldxr(v91);
                    while (__stxr(v92 + 1, v91));
                  }
                  v93 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
                  v382 = v391[0];
                  if (*((_QWORD *)&v391[0] + 1))
                  {
                    v94 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
                    do
                      v95 = __ldxr(v94);
                    while (__stxr(v95 + 1, v94));
                  }
                  v96 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v383, (uint64_t *)&v382);
                  if (v93)
                  {
                    v97 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v98 = __ldaxr(v97);
                    while (__stlxr(v98 - 1, v97));
                    if (!v98)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  v99 = (std::__shared_weak_count *)*((_QWORD *)&v383 + 1);
                  if (!*((_QWORD *)&v383 + 1))
                    break;
                  v100 = (unint64_t *)(*((_QWORD *)&v383 + 1) + 8);
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (v101)
                    break;
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                  if (v96)
                    goto LABEL_126;
                }
              }
              while (!v96);
LABEL_126:
              ;
            }
            while (v72 < v73);
          }
          if ((uint64_t *)v31 != v373)
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v373, (__int128 *)v31);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v31, v391);
          v102 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
          if (*((_QWORD *)&v391[0] + 1))
          {
            v103 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
            do
              v104 = __ldaxr(v103);
            while (__stlxr(v104 - 1, v103));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
              std::__shared_weak_count::__release_weak(v102);
            }
          }
          v105 = (unint64_t)v30 >= a2;
          a2 = (unint64_t)v371;
          a1 = v373;
          if (!v105)
          {
LABEL_138:
            std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *,false>(v373, v31, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (uint64_t *)(v31 + 16);
            continue;
          }
          v106 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>(v373, (uint64_t *)v31, a3);
          v10 = (uint64_t *)(v31 + 16);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1 &,std::shared_ptr<siri::intelligence::ResponseBase> *>((uint64_t *)(v31 + 16), v371, a3))
          {
            if (v106)
              continue;
            goto LABEL_138;
          }
          a2 = v31;
          if (v106)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) == 0)
        {
          if (v10 == (uint64_t *)a2)
            return;
          v337 = v10 + 2;
          if (v10 + 2 == (uint64_t *)a2)
            return;
          while (1)
          {
            v338 = (uint64_t)v337;
            v339 = v11[3];
            *(_QWORD *)&v391[0] = v11[2];
            *((_QWORD *)&v391[0] + 1) = v339;
            if (v339)
            {
              v340 = (unint64_t *)(v339 + 8);
              do
                v341 = __ldxr(v340);
              while (__stxr(v341 + 1, v340));
            }
            v342 = (std::__shared_weak_count *)v11[1];
            v389 = *v11;
            v390 = v342;
            if (v342)
            {
              v343 = (unint64_t *)&v342->__shared_owners_;
              do
                v344 = __ldxr(v343);
              while (__stxr(v344 + 1, v343));
            }
            v345 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, v391, &v389);
            if (v342)
            {
              v346 = (unint64_t *)&v342->__shared_owners_;
              do
                v347 = __ldaxr(v346);
              while (__stlxr(v347 - 1, v346));
              if (!v347)
              {
                ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                std::__shared_weak_count::__release_weak(v342);
              }
            }
            v348 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
            if (!*((_QWORD *)&v391[0] + 1))
              goto LABEL_514;
            v349 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
            do
              v350 = __ldaxr(v349);
            while (__stlxr(v350 - 1, v349));
            if (!v350)
            {
              ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
              std::__shared_weak_count::__release_weak(v348);
              if (!v345)
                goto LABEL_540;
            }
            else
            {
LABEL_514:
              if (!v345)
                goto LABEL_540;
            }
            v388 = *(_OWORD *)v338;
            *(_QWORD *)v338 = 0;
            *(_QWORD *)(v338 + 8) = 0;
            v351 = v338;
            do
            {
              while (1)
              {
                v352 = v351;
                v351 = (uint64_t)v11;
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v352, (__int128 *)v11);
                v387 = v388;
                if (*((_QWORD *)&v388 + 1))
                {
                  v353 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
                  do
                    v354 = __ldxr(v353);
                  while (__stxr(v354 + 1, v353));
                }
                v11 -= 2;
                *(_QWORD *)&v386 = *(_QWORD *)(v351 - 16);
                v355 = *(std::__shared_weak_count **)(v351 - 8);
                *((_QWORD *)&v386 + 1) = v355;
                if (v355)
                {
                  v356 = (unint64_t *)&v355->__shared_owners_;
                  do
                    v357 = __ldxr(v356);
                  while (__stxr(v357 + 1, v356));
                }
                v358 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
                if (v355)
                {
                  v359 = (unint64_t *)&v355->__shared_owners_;
                  do
                    v360 = __ldaxr(v359);
                  while (__stlxr(v360 - 1, v359));
                  if (!v360)
                  {
                    ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                    std::__shared_weak_count::__release_weak(v355);
                  }
                }
                v361 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
                if (*((_QWORD *)&v387 + 1))
                {
                  v362 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
                  do
                    v363 = __ldaxr(v362);
                  while (__stlxr(v363 - 1, v362));
                  if (!v363)
                    break;
                }
                if ((v358 & 1) == 0)
                  goto LABEL_534;
              }
              ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
              std::__shared_weak_count::__release_weak(v361);
            }
            while ((v358 & 1) != 0);
LABEL_534:
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v351, &v388);
            v364 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
            if (*((_QWORD *)&v388 + 1))
            {
              v365 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                std::__shared_weak_count::__release_weak(v364);
              }
            }
LABEL_540:
            v337 = (uint64_t *)(v338 + 16);
            v11 = (uint64_t *)v338;
            if ((uint64_t *)(v338 + 16) == v371)
              return;
          }
        }
        if (v10 == (uint64_t *)a2)
          return;
        v197 = v10 + 2;
        if (v10 + 2 == v371)
          return;
        v198 = (uint64_t)v10;
        do
        {
          v199 = v197;
          v200 = *(_QWORD *)(v198 + 24);
          *(_QWORD *)&v391[0] = *(_QWORD *)(v198 + 16);
          *((_QWORD *)&v391[0] + 1) = v200;
          if (v200)
          {
            v201 = (unint64_t *)(v200 + 8);
            do
              v202 = __ldxr(v201);
            while (__stxr(v202 + 1, v201));
          }
          v203 = *(std::__shared_weak_count **)(v198 + 8);
          v389 = *(_QWORD *)v198;
          v390 = v203;
          if (v203)
          {
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldxr(v204);
            while (__stxr(v205 + 1, v204));
          }
          v206 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, v391, &v389);
          if (v203)
          {
            v207 = (unint64_t *)&v203->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          v209 = (std::__shared_weak_count *)*((_QWORD *)&v391[0] + 1);
          if (!*((_QWORD *)&v391[0] + 1))
            goto LABEL_303;
          v210 = (unint64_t *)(*((_QWORD *)&v391[0] + 1) + 8);
          do
            v211 = __ldaxr(v210);
          while (__stlxr(v211 - 1, v210));
          if (!v211)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
            if (!v206)
              goto LABEL_333;
          }
          else
          {
LABEL_303:
            if (!v206)
              goto LABEL_333;
          }
          v388 = *(_OWORD *)(v198 + 16);
          *v199 = 0;
          v199[1] = 0;
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v199, (__int128 *)v198);
          v212 = (uint64_t)v10;
          if ((uint64_t *)v198 == v10)
            goto LABEL_328;
          while (1)
          {
            v387 = v388;
            if (*((_QWORD *)&v388 + 1))
            {
              v213 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
              do
                v214 = __ldxr(v213);
              while (__stxr(v214 + 1, v213));
            }
            v215 = (uint64_t *)(v198 - 16);
            *(_QWORD *)&v386 = *(_QWORD *)(v198 - 16);
            v216 = *(std::__shared_weak_count **)(v198 - 8);
            *((_QWORD *)&v386 + 1) = v216;
            if (v216)
            {
              v217 = (unint64_t *)&v216->__shared_owners_;
              do
                v218 = __ldxr(v217);
              while (__stxr(v218 + 1, v217));
            }
            v219 = siri::intelligence::FlowGraph::Save(protobuf::Intelligence_State *,unsigned long,unsigned long)::$_1::operator()(*a3, &v387, (uint64_t *)&v386);
            if (v216)
            {
              v220 = (unint64_t *)&v216->__shared_owners_;
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 - 1, v220));
              if (!v221)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            v222 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
            if (*((_QWORD *)&v387 + 1))
            {
              v223 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (!v224)
                break;
            }
            if (!v219)
              goto LABEL_327;
LABEL_323:
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v198, (__int128 *)(v198 - 16));
            v198 -= 16;
            if (v215 == v10)
            {
              v212 = (uint64_t)v10;
              goto LABEL_328;
            }
          }
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
          if ((v219 & 1) != 0)
            goto LABEL_323;
LABEL_327:
          v212 = v198;
LABEL_328:
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v212, &v388);
          v225 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
          if (*((_QWORD *)&v388 + 1))
          {
            v226 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
            do
              v227 = __ldaxr(v226);
            while (__stlxr(v227 - 1, v226));
            if (!v227)
            {
              ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
              std::__shared_weak_count::__release_weak(v225);
            }
          }
LABEL_333:
          v197 = v199 + 2;
          v198 = (uint64_t)v199;
        }
        while (v199 + 2 != v371);
        return;
    }
  }
}

  v9 = a2;
  v138 = a2 - 7;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)v9 - v10;
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v9 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(a2 - 7), (std::__shared_weak_count *)*(a2 - 6), (uint64_t *)v10))
        {
          std::swap[abi:ne180100]<siri::intelligence::RuleMatch>(v10, (uint64_t)(a2 - 7));
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)v10, v10 + 56, (uint64_t)v138, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)v10, v10 + 56, v10 + 112, (uint64_t)v138, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*,0>((uint64_t *)v10, v10 + 56, v10 + 112, v10 + 168, (uint64_t)v138, a3);
        return;
      default:
        if (v11 > 1343)
        {
          if (!a4)
          {
            if ((uint64_t *)v10 != v9)
            {
              v136 = (unint64_t)v9 - v10;
              v139 = (unint64_t)(v12 - 2) >> 1;
              v70 = v139;
              do
              {
                v71 = v70;
                if (v139 >= v70)
                {
                  v72 = (2 * v70) | 1;
                  v73 = a1 + 56 * v72;
                  if (2 * v70 + 2 < v12
                    && siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v73, *(std::__shared_weak_count **)(v73 + 8), (uint64_t *)(v73 + 56)))
                  {
                    v73 += 56;
                    v72 = 2 * v71 + 2;
                  }
                  v74 = a1 + 56 * v71;
                  if (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v73, *(std::__shared_weak_count **)(v73 + 8), (uint64_t *)v74))
                  {
                    v146 = *(_OWORD *)v74;
                    *(_QWORD *)v74 = 0;
                    *(_QWORD *)(v74 + 8) = 0;
                    v137 = v71;
                    v75 = a1 + 56 * v71;
                    v147 = *(_OWORD *)(v75 + 16);
                    *(_QWORD *)(v75 + 16) = 0;
                    *(_QWORD *)(v75 + 24) = 0;
                    v148 = *(_DWORD *)(v75 + 32);
                    v149 = *(_OWORD *)(v75 + 40);
                    *(_QWORD *)(v75 + 40) = 0;
                    *(_QWORD *)(v75 + 48) = 0;
                    do
                    {
                      v76 = v73;
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v74, (__int128 *)v73);
                      v77 = v73 + 16;
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v74 + 16, (__int128 *)(v73 + 16));
                      *(_DWORD *)(v74 + 32) = *(_DWORD *)(v73 + 32);
                      v78 = v73 + 40;
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v74 + 40, (__int128 *)(v73 + 40));
                      if (v139 < v72)
                        break;
                      v79 = (2 * v72) | 1;
                      v73 = a1 + 56 * v79;
                      v72 = 2 * v72 + 2;
                      if (v72 >= v12)
                      {
                        v72 = v79;
                      }
                      else if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v73, *(std::__shared_weak_count **)(v73 + 8), (uint64_t *)(v73 + 56)))
                      {
                        v73 += 56;
                      }
                      else
                      {
                        v72 = v79;
                      }
                      v74 = v76;
                    }
                    while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v73, *(std::__shared_weak_count **)(v73 + 8), (uint64_t *)&v146));
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v76, &v146);
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v77, &v147);
                    *(_DWORD *)(v76 + 32) = v148;
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v78, &v149);
                    v80 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                    if (*((_QWORD *)&v149 + 1))
                    {
                      v81 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                    v71 = v137;
                    if (*((_QWORD *)&v147 + 1))
                    {
                      v84 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    v86 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                    if (*((_QWORD *)&v146 + 1))
                    {
                      v87 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                      do
                        v88 = __ldaxr(v87);
                      while (__stlxr(v88 - 1, v87));
                      if (!v88)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                  }
                }
                v70 = v71 - 1;
              }
              while (v71);
              v89 = v136 / 0x38;
              do
              {
                v90 = 0;
                v91 = *(_OWORD *)(a1 + 16);
                v142 = *(_OWORD *)a1;
                v140 = a2;
                *(_QWORD *)a1 = 0;
                *(_QWORD *)(a1 + 8) = 0;
                v143 = v91;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)(a1 + 24) = 0;
                v144 = *(_DWORD *)(a1 + 32);
                v145 = *(_OWORD *)(a1 + 40);
                v92 = a1;
                *(_QWORD *)(a1 + 40) = 0;
                *(_QWORD *)(a1 + 48) = 0;
                do
                {
                  v93 = v92 + 56 * v90 + 56;
                  v94 = (2 * v90) | 1;
                  v95 = 2 * v90 + 2;
                  if (v95 < v89
                    && siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v93, *(std::__shared_weak_count **)(v92 + 56 * v90 + 64), (uint64_t *)(v92 + 56 * v90 + 112)))
                  {
                    v93 += 56;
                    v94 = v95;
                  }
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v92, (__int128 *)v93);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v92 + 16, (__int128 *)(v93 + 16));
                  *(_DWORD *)(v92 + 32) = *(_DWORD *)(v93 + 32);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v92 + 40, (__int128 *)(v93 + 40));
                  v92 = v93;
                  v90 = v94;
                }
                while (v94 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                v96 = (uint64_t)(a2 - 7);
                a2 -= 7;
                if ((uint64_t *)v93 == v140 - 7)
                {
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93, &v142);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 16, &v143);
                  *(_DWORD *)(v93 + 32) = v144;
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 40, &v145);
                }
                else
                {
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93, (__int128 *)(v140 - 7));
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 16, (__int128 *)(v140 - 5));
                  *(_DWORD *)(v93 + 32) = *((_DWORD *)v140 - 6);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 40, (__int128 *)v140 - 1);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v96, &v142);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)(v140 - 5), &v143);
                  *((_DWORD *)v140 - 6) = v144;
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)(v140 - 2), &v145);
                  v97 = v93 - a1 + 56;
                  if (v97 >= 57)
                  {
                    v98 = (v97 / 0x38uLL - 2) >> 1;
                    v99 = a1 + 56 * v98;
                    if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v99, *(std::__shared_weak_count **)(v99 + 8), (uint64_t *)v93))
                    {
                      v146 = *(_OWORD *)v93;
                      *(_QWORD *)v93 = 0;
                      *(_QWORD *)(v93 + 8) = 0;
                      v147 = *(_OWORD *)(v93 + 16);
                      *(_QWORD *)(v93 + 16) = 0;
                      *(_QWORD *)(v93 + 24) = 0;
                      v148 = *(_DWORD *)(v93 + 32);
                      v149 = *(_OWORD *)(v93 + 40);
                      *(_QWORD *)(v93 + 40) = 0;
                      *(_QWORD *)(v93 + 48) = 0;
                      do
                      {
                        v100 = v99;
                        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93, (__int128 *)v99);
                        v101 = v99 + 16;
                        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 16, (__int128 *)(v99 + 16));
                        *(_DWORD *)(v93 + 32) = *(_DWORD *)(v99 + 32);
                        v102 = v99 + 40;
                        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v93 + 40, (__int128 *)(v99 + 40));
                        if (!v98)
                          break;
                        v98 = (v98 - 1) >> 1;
                        v99 = a1 + 56 * v98;
                        v93 = v100;
                      }
                      while (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)v99, *(std::__shared_weak_count **)(v99 + 8), (uint64_t *)&v146));
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v100, &v146);
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v101, &v147);
                      *(_DWORD *)(v100 + 32) = v148;
                      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v102, &v149);
                      v103 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                      if (*((_QWORD *)&v149 + 1))
                      {
                        v104 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      v106 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                      if (*((_QWORD *)&v147 + 1))
                      {
                        v107 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      v109 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                      if (*((_QWORD *)&v146 + 1))
                      {
                        v110 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                    }
                  }
                }
                v112 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
                if (*((_QWORD *)&v145 + 1))
                {
                  v113 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
                  do
                    v114 = __ldaxr(v113);
                  while (__stlxr(v114 - 1, v113));
                  if (!v114)
                  {
                    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                    std::__shared_weak_count::__release_weak(v112);
                  }
                }
                v115 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                if (*((_QWORD *)&v143 + 1))
                {
                  v116 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                v118 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
                if (*((_QWORD *)&v142 + 1))
                {
                  v119 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
              }
              while (v89-- > 2);
            }
            return;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = v10 + 56 * v13;
          if ((unint64_t)v11 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)(v10 + 56 * v13), v10, (uint64_t)v138, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)v10, v10 + 56 * v13, (uint64_t)v138, a3);
            v15 = 56 * v13;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)(v10 + 56), v15 + v10 - 56, (uint64_t)(a2 - 14), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)(v10 + 112), v10 + 56 + v15, (uint64_t)(a2 - 21), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)(v15 + v10 - 56), v14, v10 + 56 + v15, a3);
            std::swap[abi:ne180100]<siri::intelligence::RuleMatch>(v10, v14);
          }
          --a4;
          if ((a5 & 1) == 0
            && !siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)(v10 - 56), *(std::__shared_weak_count **)(v10 - 48), (uint64_t *)v10))
          {
            v146 = *(_OWORD *)v10;
            *(_QWORD *)v10 = 0;
            *(_QWORD *)(v10 + 8) = 0;
            v147 = *(_OWORD *)(v10 + 16);
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 16) = 0;
            v148 = *(_DWORD *)(v10 + 32);
            v149 = *(_OWORD *)(v10 + 40);
            *(_QWORD *)(v10 + 48) = 0;
            *(_QWORD *)(v10 + 40) = 0;
            if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), v138))
            {
              do
                v10 += 56;
              while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), (uint64_t *)v10));
            }
            else
            {
              v40 = (uint64_t *)(v10 + 56);
              do
              {
                v10 = (unint64_t)v40;
                if (v40 >= v9)
                  break;
                v41 = siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), v40);
                v40 = (uint64_t *)(v10 + 56);
              }
              while (!v41);
            }
            v42 = v9;
            if (v10 < (unint64_t)v9)
            {
              v42 = v9;
              do
                v42 -= 7;
              while (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), v42));
            }
            while (v10 < (unint64_t)v42)
            {
              std::swap[abi:ne180100]<siri::intelligence::RuleMatch>(v10, (uint64_t)v42);
              do
                v10 += 56;
              while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), (uint64_t *)v10));
              do
                v42 -= 7;
              while (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), v42));
            }
            if (v10 - 56 != a1)
            {
              std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1, (__int128 *)(v10 - 56));
              std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 16, (__int128 *)(v10 - 40));
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 24);
              std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 40, (__int128 *)(v10 - 16));
            }
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 56, &v146);
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 40, &v147);
            *(_DWORD *)(v10 - 24) = v148;
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 16, &v149);
            v43 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
            if (*((_QWORD *)&v149 + 1))
            {
              v44 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
            if (*((_QWORD *)&v147 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
            if (*((_QWORD *)&v146 + 1))
            {
              v50 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            goto LABEL_46;
          }
          v16 = 0;
          v146 = *(_OWORD *)v10;
          v17 = *(_OWORD *)(v10 + 16);
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          v147 = v17;
          *(_QWORD *)(v10 + 24) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          v148 = *(_DWORD *)(v10 + 32);
          v149 = *(_OWORD *)(v10 + 40);
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 40) = 0;
          do
          {
            v18 = siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)(v10 + v16 + 56), *(std::__shared_weak_count **)(v10 + v16 + 64), (uint64_t *)&v146);
            v16 += 56;
          }
          while (v18);
          v19 = v10 + v16;
          if (v16 == 56)
          {
            v9 = a2;
            do
            {
              if (v19 >= (unint64_t)v9)
                break;
              v22 = *(v9 - 7);
              v23 = (std::__shared_weak_count *)*(v9 - 6);
              v9 -= 7;
            }
            while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v22, v23, (uint64_t *)&v146));
          }
          else
          {
            do
            {
              v20 = *(v9 - 7);
              v21 = (std::__shared_weak_count *)*(v9 - 6);
              v9 -= 7;
            }
            while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v20, v21, (uint64_t *)&v146));
          }
          v10 += v16;
          if (v19 < (unint64_t)v9)
          {
            v24 = (unint64_t)v9;
            do
            {
              std::swap[abi:ne180100]<siri::intelligence::RuleMatch>(v10, v24);
              do
              {
                v25 = *(_QWORD *)(v10 + 56);
                v26 = *(std::__shared_weak_count **)(v10 + 64);
                v10 += 56;
              }
              while (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v25, v26, (uint64_t *)&v146));
              do
              {
                v27 = *(_QWORD *)(v24 - 56);
                v28 = *(std::__shared_weak_count **)(v24 - 48);
                v24 -= 56;
              }
              while (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v27, v28, (uint64_t *)&v146));
            }
            while (v10 < v24);
          }
          if (v10 - 56 != a1)
          {
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1, (__int128 *)(v10 - 56));
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 16, (__int128 *)(v10 - 40));
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 - 24);
            std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 40, (__int128 *)(v10 - 16));
          }
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 56, &v146);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 40, &v147);
          *(_DWORD *)(v10 - 24) = v148;
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v10 - 16, &v149);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
          if (*((_QWORD *)&v149 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
          if (*((_QWORD *)&v147 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
          if (*((_QWORD *)&v146 + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v38 = v19 >= (unint64_t)v9;
          v9 = a2;
          if (!v38)
            goto LABEL_45;
          v39 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)a1, (uint64_t *)(v10 - 56), a3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*>((uint64_t *)v10, a2, a3))
          {
            if (v39)
              continue;
LABEL_45:
            std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0 &,siri::intelligence::RuleMatch*,false>(a1, v10 - 56, a3, a4, a5 & 1);
LABEL_46:
            a5 = 0;
            continue;
          }
          a2 = (uint64_t *)(v10 - 56);
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if ((uint64_t *)v10 != v9)
          {
            v52 = v10 + 56;
            if ((uint64_t *)(v10 + 56) != a2)
            {
              v53 = 0;
              v54 = v10;
              do
              {
                v55 = v52;
                if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)(v54 + 56), *(std::__shared_weak_count **)(v52 + 8), (uint64_t *)v54))
                {
                  v146 = *(_OWORD *)v55;
                  *(_QWORD *)v55 = 0;
                  *(_QWORD *)(v55 + 8) = 0;
                  v147 = *(_OWORD *)(v54 + 72);
                  *(_QWORD *)(v54 + 72) = 0;
                  *(_QWORD *)(v54 + 80) = 0;
                  v148 = *(_DWORD *)(v54 + 88);
                  v149 = *(_OWORD *)(v54 + 96);
                  *(_QWORD *)(v54 + 96) = 0;
                  *(_QWORD *)(v54 + 104) = 0;
                  v56 = v53;
                  while (1)
                  {
                    v57 = a1 + v56;
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + v56 + 56, (__int128 *)(a1 + v56));
                    v58 = a1 + v56 + 16;
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v57 + 72, (__int128 *)(v57 + 16));
                    *(_DWORD *)(v57 + 88) = *(_DWORD *)(v57 + 32);
                    v59 = a1 + v56 + 40;
                    std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v57 + 96, (__int128 *)(v57 + 40));
                    if (!v56)
                      break;
                    v56 -= 56;
                    if (!siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), (uint64_t *)(v57 - 56)))
                    {
                      v60 = a1 + v56 + 56;
                      goto LABEL_96;
                    }
                  }
                  v60 = a1;
LABEL_96:
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v60, &v146);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v58, &v147);
                  *(_DWORD *)(v60 + 32) = v148;
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v59, &v149);
                  v61 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                  if (*((_QWORD *)&v149 + 1))
                  {
                    v62 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  v64 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                  if (*((_QWORD *)&v147 + 1))
                  {
                    v65 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  v67 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                  if (*((_QWORD *)&v146 + 1))
                  {
                    v68 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                    do
                      v69 = __ldaxr(v68);
                    while (__stlxr(v69 - 1, v68));
                    if (!v69)
                    {
                      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                      std::__shared_weak_count::__release_weak(v67);
                    }
                  }
                }
                v52 = v55 + 56;
                v53 += 56;
                v54 = v55;
              }
              while ((uint64_t *)(v55 + 56) != a2);
            }
          }
        }
        else if ((uint64_t *)v10 != v9)
        {
          v122 = v10 + 56;
          if ((uint64_t *)(v10 + 56) != a2)
          {
            v123 = v10 - 56;
            do
            {
              v124 = v122;
              if (siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, *(_QWORD *)(a1 + 56), *(std::__shared_weak_count **)(v122 + 8), (uint64_t *)a1))
              {
                v146 = *(_OWORD *)v124;
                *(_QWORD *)v124 = 0;
                *(_QWORD *)(v124 + 8) = 0;
                v147 = *(_OWORD *)(a1 + 72);
                *(_QWORD *)(a1 + 72) = 0;
                *(_QWORD *)(a1 + 80) = 0;
                v148 = *(_DWORD *)(a1 + 88);
                v149 = *(_OWORD *)(a1 + 96);
                *(_QWORD *)(a1 + 96) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                v125 = v123;
                do
                {
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 112, (__int128 *)(v125 + 56));
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 128, (__int128 *)(v125 + 72));
                  *(_DWORD *)(v125 + 144) = *(_DWORD *)(v125 + 88);
                  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 152, (__int128 *)(v125 + 96));
                  v126 = siri::intelligence::Intelligence::Impl::PickResponseRandom(std::vector<siri::intelligence::RuleMatch> const&)::$_0::operator()(*a3, v146, *((std::__shared_weak_count **)&v146 + 1), (uint64_t *)v125);
                  v125 -= 56;
                }
                while (v126);
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 112, &v146);
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 128, &v147);
                *(_DWORD *)(v125 + 144) = v148;
                std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v125 + 152, &v149);
                v127 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
                if (*((_QWORD *)&v149 + 1))
                {
                  v128 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                v130 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                if (*((_QWORD *)&v147 + 1))
                {
                  v131 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                  do
                    v132 = __ldaxr(v131);
                  while (__stlxr(v132 - 1, v131));
                  if (!v132)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                v133 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                if (*((_QWORD *)&v146 + 1))
                {
                  v134 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                  do
                    v135 = __ldaxr(v134);
                  while (__stlxr(v135 - 1, v134));
                  if (!v135)
                  {
                    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                    std::__shared_weak_count::__release_weak(v133);
                  }
                }
              }
              v122 = v124 + 56;
              v123 += 56;
              a1 = v124;
            }
            while ((uint64_t *)(v124 + 56) != a2);
          }
        }
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a2, a3, (const void **)a4);
  v10 = *(char *)(a4 + 23);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(a4 + 23);
  else
    v14 = *(_QWORD *)(a4 + 8);
  if (v10 >= 0)
    v15 = (const void *)a4;
  else
    v15 = *(const void **)a4;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a4, (__int128 *)a5);
    v19 = *(char *)(a3 + 23);
    v20 = *(char *)(a4 + 23);
    if (v20 >= 0)
      v21 = *(unsigned __int8 *)(a4 + 23);
    else
      v21 = *(_QWORD *)(a4 + 8);
    if (v20 >= 0)
      v22 = (const void *)a4;
    else
      v22 = *(const void **)a4;
    if (v19 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    if (v19 >= 0)
      v24 = (const void *)a3;
    else
      v24 = *(const void **)a3;
    if (v23 >= v21)
      v25 = v21;
    else
      v25 = v23;
    v26 = memcmp(v22, v24, v25);
    v27 = v21 < v23;
    if (v26)
      v27 = v26 < 0;
    if (v27)
    {
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a3, (__int128 *)a4);
      v28 = *(char *)(a2 + 23);
      v29 = *(char *)(a3 + 23);
      if (v29 >= 0)
        v30 = *(unsigned __int8 *)(a3 + 23);
      else
        v30 = *(_QWORD *)(a3 + 8);
      if (v29 >= 0)
        v31 = (const void *)a3;
      else
        v31 = *(const void **)a3;
      if (v28 >= 0)
        v32 = *(unsigned __int8 *)(a2 + 23);
      else
        v32 = *(_QWORD *)(a2 + 8);
      if (v28 >= 0)
        v33 = (const void *)a2;
      else
        v33 = *(const void **)a2;
      if (v32 >= v30)
        v34 = v30;
      else
        v34 = v32;
      v35 = memcmp(v31, v33, v34);
      v36 = v30 < v32;
      if (v35)
        v36 = v35 < 0;
      if (v36)
      {
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (__int128 *)a3);
        v37 = *(char *)(a1 + 23);
        v38 = *(char *)(a2 + 23);
        if (v38 >= 0)
          v39 = *(unsigned __int8 *)(a2 + 23);
        else
          v39 = *(_QWORD *)(a2 + 8);
        if (v38 >= 0)
          v40 = (const void *)a2;
        else
          v40 = *(const void **)a2;
        if (v37 >= 0)
          v41 = *(unsigned __int8 *)(a1 + 23);
        else
          v41 = *(_QWORD *)(a1 + 8);
        if (v37 >= 0)
          v42 = (const void *)a1;
        else
          v42 = *(const void **)a1;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        if (v45)
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (__int128 *)a2);
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  __int128 *v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  _BOOL4 v40;

  v6 = *(char *)(a1 + 23);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v6 >= 0)
    v11 = (const void *)a1;
  else
    v11 = *(const void **)a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = v8 < v10;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v15 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v8 >= v16)
    v18 = v16;
  else
    v18 = v8;
  v19 = memcmp(v17, v9, v18);
  v20 = v16 < v8;
  if (v19)
    v20 = v19 < 0;
  if (v14)
  {
    v21 = a1;
    if (v20)
    {
LABEL_51:
      v31 = (__int128 *)a3;
LABEL_72:
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v21, v31);
      return;
    }
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (__int128 *)a2);
    v22 = *(char *)(a2 + 23);
    v23 = *((char *)a3 + 23);
    if (v23 >= 0)
      v24 = *((unsigned __int8 *)a3 + 23);
    else
      v24 = (size_t)a3[1];
    if (v23 >= 0)
      v25 = a3;
    else
      v25 = *a3;
    if (v22 >= 0)
      v26 = *(unsigned __int8 *)(a2 + 23);
    else
      v26 = *(_QWORD *)(a2 + 8);
    if (v22 >= 0)
      v27 = (const void *)a2;
    else
      v27 = *(const void **)a2;
    if (v26 >= v24)
      v28 = v24;
    else
      v28 = v26;
    v29 = memcmp(v25, v27, v28);
    v30 = v24 < v26;
    if (v29)
      v30 = v29 < 0;
    if (v30)
    {
      v21 = a2;
      goto LABEL_51;
    }
  }
  else if (v20)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (__int128 *)a3);
    v32 = *(char *)(a1 + 23);
    v33 = *(char *)(a2 + 23);
    if (v33 >= 0)
      v34 = *(unsigned __int8 *)(a2 + 23);
    else
      v34 = *(_QWORD *)(a2 + 8);
    if (v33 >= 0)
      v35 = (const void *)a2;
    else
      v35 = *(const void **)a2;
    if (v32 >= 0)
      v36 = *(unsigned __int8 *)(a1 + 23);
    else
      v36 = *(_QWORD *)(a1 + 8);
    if (v32 >= 0)
      v37 = (const void *)a1;
    else
      v37 = *(const void **)a1;
    if (v36 >= v34)
      v38 = v34;
    else
      v38 = v36;
    v39 = memcmp(v35, v37, v38);
    v40 = v34 < v36;
    if (v39)
      v40 = v39 < 0;
    if (v40)
    {
      v21 = a1;
      v31 = (__int128 *)a2;
      goto LABEL_72;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  int v7;
  int v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  const void **v16;
  const void **v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  const void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v35;
  int v36;
  void *v37;
  void **v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  void *v50[2];
  uint64_t v51;
  uint64_t v52;
  __int128 __p;
  const void *v54;
  __int128 v55;
  const void *v56;
  void **v57;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 10);
      v7 = *(char *)(a1 + 23);
      v8 = *((char *)a2 - 57);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 - 57);
      else
        v9 = (size_t)*(a2 - 9);
      if (v8 >= 0)
        v10 = a2 - 10;
      else
        v10 = (const void **)*(a2 - 10);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      if (v7 >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      if (v11 >= v9)
        v13 = v9;
      else
        v13 = v11;
      v14 = memcmp(v10, v12, v13);
      v15 = v9 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, v6);
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, a1 + 160, a2 - 10);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 10);
      return 1;
    default:
      v16 = (const void **)(a1 + 160);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, (const void **)(a1 + 160));
      v17 = (const void **)(a1 + 240);
      if ((const void **)(a1 + 240) == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *((char *)v16 + 23);
    v21 = *((char *)v17 + 23);
    if (v21 >= 0)
      v22 = *((unsigned __int8 *)v17 + 23);
    else
      v22 = (size_t)v17[1];
    if (v21 >= 0)
      v23 = v17;
    else
      v23 = *v17;
    if (v20 >= 0)
      v24 = *((unsigned __int8 *)v16 + 23);
    else
      v24 = (size_t)v16[1];
    if (v20 >= 0)
      v25 = v16;
    else
      v25 = *v16;
    if (v24 >= v22)
      v26 = v22;
    else
      v26 = v24;
    v27 = memcmp(v23, v25, v26);
    v28 = v22 < v24;
    if (v27)
      v28 = v27 < 0;
    if (v28)
    {
      *(_OWORD *)v50 = *(_OWORD *)v17;
      v29 = v17[2];
      v30 = v17[3];
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      v51 = (uint64_t)v29;
      v52 = (uint64_t)v30;
      __p = *((_OWORD *)v17 + 2);
      v54 = v17[6];
      v17[4] = 0;
      v17[5] = 0;
      v55 = *(_OWORD *)(v17 + 7);
      v56 = v17[9];
      v17[8] = 0;
      v17[9] = 0;
      v31 = v18;
      v17[6] = 0;
      v17[7] = 0;
      while (1)
      {
        v32 = a1 + v31;
        v33 = (void **)(a1 + v31 + 240);
        if (*(char *)(a1 + v31 + 263) < 0)
          operator delete(*v33);
        *(_OWORD *)v33 = *(_OWORD *)(v32 + 160);
        *(_QWORD *)(a1 + v31 + 256) = *(_QWORD *)(v32 + 176);
        *(_BYTE *)(v32 + 183) = 0;
        *(_BYTE *)(v32 + 160) = 0;
        *(_QWORD *)(v32 + 264) = *(_QWORD *)(v32 + 184);
        v34 = (void **)(v32 + 272);
        if (*(char *)(v32 + 295) < 0)
          operator delete(*v34);
        v35 = a1 + v31;
        *(_OWORD *)v34 = *(_OWORD *)(a1 + v31 + 192);
        *(_QWORD *)(v32 + 288) = *(_QWORD *)(a1 + v31 + 208);
        *(_BYTE *)(v35 + 215) = 0;
        *(_BYTE *)(v35 + 192) = 0;
        std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(a1 + v31 + 296));
        *(_OWORD *)(a1 + v31 + 296) = *(_OWORD *)(a1 + v31 + 216);
        *(_QWORD *)(v35 + 312) = *(_QWORD *)(v35 + 232);
        *(_QWORD *)(v35 + 224) = 0;
        *(_QWORD *)(v35 + 232) = 0;
        *(_QWORD *)(v35 + 216) = 0;
        if (v31 == -160)
          break;
        v36 = *(char *)(v35 + 103);
        if (v51 >= 0)
          v37 = (void *)HIBYTE(v51);
        else
          v37 = v50[1];
        if (v51 >= 0)
          v38 = v50;
        else
          v38 = (void **)v50[0];
        if (v36 >= 0)
          v39 = *(unsigned __int8 *)(v35 + 103);
        else
          v39 = *(_QWORD *)(v35 + 88);
        if (v36 >= 0)
          v40 = (const void *)(v35 + 80);
        else
          v40 = *(const void **)(v35 + 80);
        if (v39 >= (unint64_t)v37)
          v41 = (size_t)v37;
        else
          v41 = v39;
        v42 = memcmp(v38, v40, v41);
        v43 = (unint64_t)v37 < v39;
        if (v42)
          v43 = v42 < 0;
        v31 -= 80;
        if (!v43)
        {
          v44 = a1 + v31 + 240;
          goto LABEL_67;
        }
      }
      v44 = a1;
LABEL_67:
      if (*(char *)(v44 + 23) < 0)
        operator delete(*(void **)v44);
      v45 = (void **)(v35 + 192);
      *(_OWORD *)v44 = *(_OWORD *)v50;
      v46 = v51;
      v47 = v52;
      HIBYTE(v51) = 0;
      LOBYTE(v50[0]) = 0;
      *(_QWORD *)(v44 + 16) = v46;
      *(_QWORD *)(v44 + 24) = v47;
      if (*(char *)(v44 + 55) < 0)
        operator delete(*v45);
      *(_OWORD *)v45 = __p;
      *(_QWORD *)(v35 + 208) = v54;
      HIBYTE(v54) = 0;
      LOBYTE(__p) = 0;
      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v35 + 216));
      v48 = *((_QWORD *)&v55 + 1);
      *(_QWORD *)(v35 + 216) = v55;
      v49 = v56;
      *(_QWORD *)(v44 + 64) = v48;
      *(_QWORD *)(v44 + 72) = v49;
      v56 = 0;
      v55 = 0uLL;
      v57 = (void **)&v55;
      std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v57);
      if (SHIBYTE(v54) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v51) < 0)
        operator delete(v50[0]);
      if (++v19 == 8)
        return v17 + 10 == a2;
    }
    v16 = v17;
    v18 += 80;
    v17 += 10;
    if (v17 == a2)
      return 1;
  }
}

void std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  *(_OWORD *)v15 = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v16 = v4;
  v6 = a1 + 32;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v8 = (void **)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  v18 = v7;
  v19 = v9;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v20 = v10;
  v21 = v11;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v12;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)v6);
  v13 = a2[2];
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v6 = v13;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v8);
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  v14 = (void **)(a2 + 2);
  *a2 = *(_OWORD *)v15;
  *((_QWORD *)a2 + 2) = v16;
  *((_QWORD *)a2 + 3) = v5;
  if (*((char *)a2 + 55) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 6) = v18;
  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  *((_QWORD *)a2 + 8) = v10;
  *((_QWORD *)a2 + 9) = v11;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = (void **)&v19;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v22);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a2, (const void **)a3);
  v8 = *(char *)(a3 + 23);
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = *a4;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  if (v8 >= 0)
    v13 = (const void *)a3;
  else
    v13 = *(const void **)a3;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v16 = v10 < v12;
  if (v15)
    v16 = v15 < 0;
  if (v16)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a3, (__int128 *)a4);
    v17 = *(char *)(a2 + 23);
    v18 = *(char *)(a3 + 23);
    if (v18 >= 0)
      v19 = *(unsigned __int8 *)(a3 + 23);
    else
      v19 = *(_QWORD *)(a3 + 8);
    if (v18 >= 0)
      v20 = (const void *)a3;
    else
      v20 = *(const void **)a3;
    if (v17 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    if (v17 >= 0)
      v22 = (const void *)a2;
    else
      v22 = *(const void **)a2;
    if (v21 >= v19)
      v23 = v19;
    else
      v23 = v21;
    v24 = memcmp(v20, v22, v23);
    v25 = v19 < v21;
    if (v24)
      v25 = v24 < 0;
    if (v25)
    {
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (__int128 *)a3);
      v26 = *(char *)(a1 + 23);
      v27 = *(char *)(a2 + 23);
      if (v27 >= 0)
        v28 = *(unsigned __int8 *)(a2 + 23);
      else
        v28 = *(_QWORD *)(a2 + 8);
      if (v27 >= 0)
        v29 = (const void *)a2;
      else
        v29 = *(const void **)a2;
      if (v26 >= 0)
        v30 = *(unsigned __int8 *)(a1 + 23);
      else
        v30 = *(_QWORD *)(a1 + 8);
      if (v26 >= 0)
        v31 = (const void *)a1;
      else
        v31 = *(const void **)a1;
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
      v33 = memcmp(v29, v31, v32);
      v34 = v28 < v30;
      if (v33)
        v34 = v33 < 0;
      if (v34)
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (__int128 *)a2);
    }
  }
}

void std::vector<siri::intelligence::FunctionDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(this[2].__r_.__value_.__r.__words, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
}

void sub_22AF52394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::intelligence::FunctionDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void siri::intelligence::BehaviorHandler::GetAllDescriptions(int64x2_t *a1@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  const void **v5;
  const void **i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  void **v20;
  std::string __p;
  _BYTE v22[24];
  const void **v23;
  const void **v24;
  void **v25;
  int64x2_t v26;
  void **v27;
  int64x2_t *v28;

  siri::intelligence::GetBehaviorDefinitions((siri::intelligence *)&v23);
  v3 = 126 - 2 * __clz(((char *)v24 - (char *)v23) >> 6);
  if (v24 == v23)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>((uint64_t)v23, v24, v4, 1);
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  v5 = v23;
  for (i = v24; v5 != i; v5 += 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(v22, 0, sizeof(v22));
    std::string::operator=(&__p, (const std::string *)v5);
    if (v22 != (_BYTE *)(v5 + 4))
      std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((uint64_t)v22, (std::string *)v5[4], (__int128 *)v5[5], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[5] - (_BYTE *)v5[4]) >> 3));
    v8 = a1->u64[1];
    v7 = a1[1].u64[0];
    if (v8 >= v7)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - a1->i64[0]) >> 4);
      v11 = v10 + 1;
      if (v10 + 1 > 0x555555555555555)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - a1->i64[0]) >> 4);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x2AAAAAAAAAAAAAALL)
        v13 = 0x555555555555555;
      else
        v13 = v11;
      v28 = a1 + 1;
      if (v13)
      {
        if (v13 > 0x555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (void **)operator new(48 * v13);
      }
      else
      {
        v14 = 0;
      }
      v25 = v14;
      v26.i64[0] = (uint64_t)&v14[6 * v10];
      v26.i64[1] = v26.i64[0];
      v27 = &v14[6 * v13];
      std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>((std::string *)v26.i64[0], (__int128 *)&__p);
      v15 = v26.i64[0];
      v9 = v26.i64[1] + 48;
      v26.i64[1] += 48;
      v17 = a1->i64[0];
      v16 = a1->u64[1];
      if (v16 == a1->i64[0])
      {
        v19 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          v18 = *(_OWORD *)(v16 - 48);
          *(_QWORD *)(v15 - 32) = *(_QWORD *)(v16 - 32);
          *(_OWORD *)(v15 - 48) = v18;
          *(_QWORD *)(v16 - 40) = 0;
          *(_QWORD *)(v16 - 32) = 0;
          *(_QWORD *)(v16 - 48) = 0;
          *(_QWORD *)(v15 - 24) = 0;
          *(_QWORD *)(v15 - 16) = 0;
          *(_QWORD *)(v15 - 8) = 0;
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v16 - 24);
          *(_QWORD *)(v15 - 8) = *(_QWORD *)(v16 - 8);
          v15 -= 48;
          *(_QWORD *)(v16 - 24) = 0;
          *(_QWORD *)(v16 - 16) = 0;
          *(_QWORD *)(v16 - 8) = 0;
          v16 -= 48;
        }
        while (v16 != v17);
        v19 = *a1;
        v9 = v26.i64[1];
      }
      a1->i64[0] = v15;
      a1->i64[1] = v9;
      v26 = v19;
      v20 = (void **)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v27;
      v27 = v20;
      v25 = (void **)v19.i64[0];
      std::__split_buffer<siri::intelligence::BehaviorDescription>::~__split_buffer((uint64_t)&v25);
    }
    else
    {
      std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>((std::string *)a1->i64[1], (__int128 *)&__p);
      v9 = v8 + 48;
      a1->i64[1] = v9;
    }
    a1->i64[1] = v9;
    v25 = (void **)v22;
    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_22AF526A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__split_buffer<siri::intelligence::BehaviorDescription>::~__split_buffer((uint64_t)&a18);
  siri::intelligence::BehaviorDescription::~BehaviorDescription((void **)&a9);
  std::vector<siri::intelligence::BehaviorDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = &a15;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetBehaviorDefinitions(siri::intelligence *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  siri::intelligence *v25;
  _QWORD v26[3];
  _QWORD v27[3];
  char v28;
  _QWORD v29[3];
  _QWORD v30[3];
  char v31;
  _QWORD v32[3];
  _QWORD v33[3];
  char v34;
  _QWORD v35[3];
  _QWORD v36[3];
  char v37;
  _QWORD v38[3];
  _QWORD v39[3];
  char v40;
  _QWORD v41[3];
  _QWORD v42[3];
  char v43;
  _QWORD v44[3];
  _QWORD v45[3];
  char v46;
  _QWORD v47[3];
  _QWORD v48[3];
  char v49;
  _QWORD v50[3];
  _QWORD v51[3];
  char v52;
  _QWORD v53[3];
  _QWORD v54[3];
  char v55;
  _QWORD v56[3];
  _QWORD v57[3];
  char v58;
  _QWORD v59[3];
  _QWORD v60[3];
  char v61;
  _QWORD v62[3];
  _QWORD v63[3];
  char v64;
  _QWORD v65[3];
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  _QWORD v69[3];
  char v70;
  void *v71[3];
  _QWORD v72[3];
  char v73;
  void *v74[3];
  _QWORD v75[3];
  char v76;
  void *v77[3];
  _QWORD v78[3];
  char v79;
  void *v80[3];
  _QWORD v81[3];
  char v82;
  _QWORD v83[3];
  _QWORD v84[3];
  char v85;
  _QWORD v86[3];
  _QWORD v87[3];
  char v88;
  _QWORD v89[3];
  _QWORD v90[3];
  char v91;
  _QWORD v92[3];
  _QWORD v93[3];
  char v94;
  _QWORD v95[3];
  _QWORD v96[3];
  char v97;
  _QWORD v98[3];
  _QWORD v99[3];
  char v100;
  _QWORD v101[3];
  _QWORD v102[3];
  char v103;
  _QWORD v104[3];
  _QWORD v105[3];
  char v106;
  _QWORD v107[3];
  _QWORD v108[3];
  char v109;
  _QWORD v110[3];
  _QWORD v111[3];
  char v112;
  _QWORD v113[3];
  _QWORD v114[3];
  char v115;
  _QWORD v116[3];
  _QWORD v117[3];
  char v118;
  _QWORD v119[3];
  _QWORD v120[3];
  char v121;
  _QWORD v122[3];
  _QWORD v123[3];
  char v124;
  std::string v125;
  uint64_t (*v126)(uint64_t *, uint64_t **);
  _QWORD v127[3];
  __int16 v128;
  _QWORD v129[4];
  _QWORD v130[3];
  __int16 v131;
  _QWORD v132[4];
  _QWORD v133[3];
  __int16 v134;
  _QWORD v135[4];
  _QWORD v136[3];
  __int16 v137;
  _QWORD v138[4];
  _QWORD v139[3];
  __int16 v140;
  _QWORD v141[4];
  _QWORD v142[3];
  __int16 v143;
  _QWORD v144[4];
  _QWORD v145[3];
  __int16 v146;
  _QWORD v147[4];
  _QWORD v148[3];
  __int16 v149;
  _QWORD v150[4];
  _QWORD v151[3];
  __int16 v152;
  _QWORD v153[4];
  _QWORD v154[3];
  __int16 v155;
  _QWORD v156[7];
  __int16 v157;
  _QWORD v158[4];
  _QWORD v159[3];
  __int16 v160;
  _QWORD v161[4];
  _QWORD v162[3];
  __int16 v163;
  _QWORD v164[7];
  __int16 v165;
  _QWORD v166[7];
  __int16 v167;
  _QWORD v168[4];
  _QWORD v169[3];
  __int16 v170;
  _QWORD v171[4];
  _QWORD v172[3];
  __int16 v173;
  _QWORD v174[4];
  _QWORD v175[3];
  __int16 v176;
  _QWORD v177[4];
  _QWORD v178[3];
  __int16 v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_9);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_9))
  {
    v25 = this;
    std::string::basic_string[abi:ne180100]<0>(&v125, "setString");
    v126 = siri::intelligence::BehaviorSetString;
    std::string::basic_string[abi:ne180100]<0>(v119, "name");
    std::string::basic_string[abi:ne180100]<0>(v120, siri::intelligence::TYPE_REFERENCE[0]);
    v121 = 1;
    std::string::basic_string[abi:ne180100]<0>(v122, "value");
    std::string::basic_string[abi:ne180100]<0>(v123, siri::intelligence::TYPE_STRING[0]);
    v124 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v127, (uint64_t)v119, 2uLL);
    v128 = 0;
    std::string::basic_string[abi:ne180100]<0>(v129, "setNumber");
    v129[3] = siri::intelligence::BehaviorSetNumber;
    std::string::basic_string[abi:ne180100]<0>(v113, "name");
    std::string::basic_string[abi:ne180100]<0>(v114, siri::intelligence::TYPE_REFERENCE[0]);
    v115 = 1;
    std::string::basic_string[abi:ne180100]<0>(v116, "value");
    std::string::basic_string[abi:ne180100]<0>(v117, siri::intelligence::TYPE_NUMBER[0]);
    v118 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v130, (uint64_t)v113, 2uLL);
    v131 = 0;
    std::string::basic_string[abi:ne180100]<0>(v132, "setBoolean");
    v132[3] = siri::intelligence::BehaviorSetBoolean;
    std::string::basic_string[abi:ne180100]<0>(v107, "name");
    std::string::basic_string[abi:ne180100]<0>(v108, siri::intelligence::TYPE_REFERENCE[0]);
    v109 = 1;
    std::string::basic_string[abi:ne180100]<0>(v110, "value");
    std::string::basic_string[abi:ne180100]<0>(v111, siri::intelligence::TYPE_BOOLEAN[0]);
    v112 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v133, (uint64_t)v107, 2uLL);
    v134 = 0;
    std::string::basic_string[abi:ne180100]<0>(v135, "setArray");
    v135[3] = siri::intelligence::BehaviorSetArray;
    std::string::basic_string[abi:ne180100]<0>(v101, "name");
    std::string::basic_string[abi:ne180100]<0>(v102, siri::intelligence::TYPE_REFERENCE[0]);
    v103 = 1;
    std::string::basic_string[abi:ne180100]<0>(v104, "value");
    std::string::basic_string[abi:ne180100]<0>(v105, siri::intelligence::TYPE_ARRAY[0]);
    v106 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v136, (uint64_t)v101, 2uLL);
    v137 = 0;
    std::string::basic_string[abi:ne180100]<0>(v138, "setDictionary");
    v138[3] = siri::intelligence::BehaviorSetDictionary;
    std::string::basic_string[abi:ne180100]<0>(v95, "name");
    std::string::basic_string[abi:ne180100]<0>(v96, siri::intelligence::TYPE_REFERENCE[0]);
    v97 = 1;
    std::string::basic_string[abi:ne180100]<0>(v98, "value");
    std::string::basic_string[abi:ne180100]<0>(v99, siri::intelligence::TYPE_DICTIONARY[0]);
    v100 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v139, (uint64_t)v95, 2uLL);
    v140 = 0;
    std::string::basic_string[abi:ne180100]<0>(v141, "pushBack");
    v141[3] = siri::intelligence::BehaviorPushBack;
    std::string::basic_string[abi:ne180100]<0>(v89, "name");
    std::string::basic_string[abi:ne180100]<0>(v90, siri::intelligence::TYPE_REFERENCE[0]);
    v91 = 1;
    std::string::basic_string[abi:ne180100]<0>(v92, "value");
    std::string::basic_string[abi:ne180100]<0>(v93, siri::intelligence::TYPE_UNKNOWN);
    v94 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v142, (uint64_t)v89, 2uLL);
    v143 = 0;
    std::string::basic_string[abi:ne180100]<0>(v144, "popBack");
    v144[3] = siri::intelligence::BehaviorPopBack;
    std::string::basic_string[abi:ne180100]<0>(v83, "name");
    std::string::basic_string[abi:ne180100]<0>(v84, siri::intelligence::TYPE_REFERENCE[0]);
    v85 = 1;
    std::string::basic_string[abi:ne180100]<0>(v86, "destination");
    std::string::basic_string[abi:ne180100]<0>(v87, siri::intelligence::TYPE_REFERENCE[0]);
    v88 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v145, (uint64_t)v83, 2uLL);
    v146 = 0;
    std::string::basic_string[abi:ne180100]<0>(v147, "setUndefined");
    v147[3] = siri::intelligence::BehaviorSetUndefined;
    std::string::basic_string[abi:ne180100]<0>(v80, "name");
    std::string::basic_string[abi:ne180100]<0>(v81, siri::intelligence::TYPE_REFERENCE[0]);
    v82 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v148, (uint64_t)v80, 1uLL);
    v149 = 0;
    std::string::basic_string[abi:ne180100]<0>(v150, "setEmpty");
    v150[3] = siri::intelligence::BehaviorSetEmpty;
    std::string::basic_string[abi:ne180100]<0>(v77, "name");
    std::string::basic_string[abi:ne180100]<0>(v78, siri::intelligence::TYPE_REFERENCE[0]);
    v79 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v151, (uint64_t)v77, 1uLL);
    v152 = 0;
    std::string::basic_string[abi:ne180100]<0>(v153, "retryInputs");
    v153[3] = siri::intelligence::BehaviorRetryInputs;
    std::string::basic_string[abi:ne180100]<0>(v74, "responseId");
    std::string::basic_string[abi:ne180100]<0>(v75, siri::intelligence::TYPE_STRING[0]);
    v76 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v154, (uint64_t)v74, 1uLL);
    v155 = 0;
    std::string::basic_string[abi:ne180100]<0>(v156, "repeatLastResponse");
    v156[3] = siri::intelligence::BehaviorRepeatLastResponse;
    memset(&v156[4], 0, 24);
    v157 = 0;
    std::string::basic_string[abi:ne180100]<0>(v158, "switchActivity");
    v158[3] = siri::intelligence::BehaviorSwitchActivity;
    std::string::basic_string[abi:ne180100]<0>(v71, "activityId");
    std::string::basic_string[abi:ne180100]<0>(v72, siri::intelligence::TYPE_STRING[0]);
    v73 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v159, (uint64_t)v71, 1uLL);
    v160 = 0;
    std::string::basic_string[abi:ne180100]<0>(v161, "registerUndo");
    v161[3] = siri::intelligence::BehaviorRegisterUndo;
    std::string::basic_string[abi:ne180100]<0>(v65, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v66, siri::intelligence::TYPE_STRING[0]);
    v67 = 1;
    std::string::basic_string[abi:ne180100]<0>(v68, "userData");
    std::string::basic_string[abi:ne180100]<0>(v69, siri::intelligence::TYPE_DICTIONARY[0]);
    v70 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v162, (uint64_t)v65, 2uLL);
    v163 = 0;
    std::string::basic_string[abi:ne180100]<0>(v164, "exitValue");
    v164[3] = siri::intelligence::BehaviorExitValue;
    memset(&v164[4], 0, 24);
    v165 = 1;
    std::string::basic_string[abi:ne180100]<0>(v166, "setVariables");
    v166[3] = siri::intelligence::BehaviorSetVariables;
    memset(&v166[4], 0, 24);
    v167 = 256;
    std::string::basic_string[abi:ne180100]<0>(v168, "pickFromArray");
    v168[3] = siri::intelligence::BehaviorPickFromArray;
    std::string::basic_string[abi:ne180100]<0>(v56, "name");
    std::string::basic_string[abi:ne180100]<0>(v57, siri::intelligence::TYPE_REFERENCE[0]);
    v58 = 1;
    std::string::basic_string[abi:ne180100]<0>(v59, "destination");
    std::string::basic_string[abi:ne180100]<0>(v60, siri::intelligence::TYPE_REFERENCE[0]);
    v61 = 1;
    std::string::basic_string[abi:ne180100]<0>(v62, "deleteItem");
    std::string::basic_string[abi:ne180100]<0>(v63, siri::intelligence::TYPE_BOOLEAN[0]);
    v64 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v169, (uint64_t)v56, 3uLL);
    v170 = 0;
    std::string::basic_string[abi:ne180100]<0>(v171, "directInvocation");
    v171[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v50, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v51, siri::intelligence::TYPE_STRING[0]);
    v52 = 1;
    std::string::basic_string[abi:ne180100]<0>(v53, "userData");
    std::string::basic_string[abi:ne180100]<0>(v54, siri::intelligence::TYPE_DICTIONARY[0]);
    v55 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v172, (uint64_t)v50, 2uLL);
    v173 = 0;
    std::string::basic_string[abi:ne180100]<0>(v174, "externalFlow");
    v174[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v35, "flowBuilderClass");
    std::string::basic_string[abi:ne180100]<0>(v36, siri::intelligence::TYPE_STRING[0]);
    v37 = 1;
    std::string::basic_string[abi:ne180100]<0>(v38, "flowName");
    std::string::basic_string[abi:ne180100]<0>(v39, siri::intelligence::TYPE_STRING[0]);
    v40 = 1;
    std::string::basic_string[abi:ne180100]<0>(v41, "builderParameters");
    std::string::basic_string[abi:ne180100]<0>(v42, siri::intelligence::TYPE_DICTIONARY[0]);
    v43 = 0;
    std::string::basic_string[abi:ne180100]<0>(v44, "bundleIdentifier");
    std::string::basic_string[abi:ne180100]<0>(v45, siri::intelligence::TYPE_STRING[0]);
    v46 = 0;
    std::string::basic_string[abi:ne180100]<0>(v47, "libraryPath");
    std::string::basic_string[abi:ne180100]<0>(v48, siri::intelligence::TYPE_STRING[0]);
    v49 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v175, (uint64_t)v35, 5uLL);
    v176 = 0;
    std::string::basic_string[abi:ne180100]<0>(v177, "authoredFlow");
    v177[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, "flowId");
    std::string::basic_string[abi:ne180100]<0>(v27, siri::intelligence::TYPE_STRING[0]);
    v28 = 1;
    std::string::basic_string[abi:ne180100]<0>(v29, "bundleIdentifier");
    std::string::basic_string[abi:ne180100]<0>(v30, siri::intelligence::TYPE_STRING[0]);
    v31 = 0;
    std::string::basic_string[abi:ne180100]<0>(v32, "libraryPath");
    std::string::basic_string[abi:ne180100]<0>(v33, siri::intelligence::TYPE_STRING[0]);
    v34 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v178, (uint64_t)v26, 3uLL);
    v179 = 0;
    std::vector<siri::intelligence::BehaviorDefinition>::vector[abi:ne180100](&v125, 0x13uLL);
    for (i = 1152; i != -64; i -= 64)
      siri::intelligence::BehaviorDefinition::~BehaviorDefinition((void **)((char *)&v125.__r_.__value_.__l.__data_ + i));
    for (j = 14; j != -7; j -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v26[j]);
    for (k = 28; k != -7; k -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v35[k]);
    for (m = 7; m != -7; m -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v50[m]);
    for (n = 14; n != -7; n -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v56[n]);
    for (ii = 7; ii != -7; ii -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v65[ii]);
    siri::intelligence::TestParseError::~TestParseError(v71);
    siri::intelligence::TestParseError::~TestParseError(v74);
    siri::intelligence::TestParseError::~TestParseError(v77);
    siri::intelligence::TestParseError::~TestParseError(v80);
    for (jj = 7; jj != -7; jj -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v83[jj]);
    for (kk = 7; kk != -7; kk -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v89[kk]);
    for (mm = 7; mm != -7; mm -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v95[mm]);
    for (nn = 7; nn != -7; nn -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v101[nn]);
    for (i1 = 7; i1 != -7; i1 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v107[i1]);
    for (i2 = 7; i2 != -7; i2 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v113[i2]);
    for (i3 = 7; i3 != -7; i3 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v119[i3]);
    __cxa_atexit((void (*)(void *))std::vector<siri::intelligence::BehaviorDefinition>::~vector[abi:ne180100], &qword_253F463A0, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_9);
    this = v25;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = qword_253F463A0;
  v4 = qword_253F463A8;
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  v125.__r_.__value_.__s.__data_[8] = 0;
  if (qword_253F463A8 != qword_253F463A0)
  {
    std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](this, (qword_253F463A8 - qword_253F463A0) >> 6);
    v5 = 0;
    v6 = *((_QWORD *)this + 1);
    do
    {
      v7 = (std::string *)(v6 + v5);
      v8 = (__int128 *)(v3 + v5);
      if (*(char *)(v3 + v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v10 = *(_QWORD *)(v3 + v5 + 24);
      *(_QWORD *)(v6 + v5 + 32) = 0;
      v11 = (std::string *)(v6 + v5 + 32);
      v11[-1].__r_.__value_.__r.__words[2] = v10;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v11, *(__int128 **)(v3 + v5 + 32), *(__int128 **)(v3 + v5 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + v5 + 40) - *(_QWORD *)(v3 + v5 + 32)) >> 3));
      *(_WORD *)(v6 + v5 + 56) = *(_WORD *)(v3 + v5 + 56);
      v5 += 64;
    }
    while (v3 + v5 != v4);
    *((_QWORD *)this + 1) = v6 + v5;
  }
}

void sub_22AF533C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;

  for (i = 1152; i != -64; i -= 64)
    siri::intelligence::BehaviorDefinition::~BehaviorDefinition((void **)(v67 + i));
  for (j = 112; j != -56; j -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a11 + j));
  for (k = 224; k != -56; k -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a32 + k));
  for (m = 56; m != -56; m -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a67 + m));
  for (n = 112; n != -56; n -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x240] + n));
  for (ii = 56; ii != -56; ii -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2E8] + ii));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x358]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x390]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x3C8]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x400]);
  for (jj = 56; jj != -56; jj -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x438] + jj));
  for (kk = 56; kk != -56; kk -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x4A8] + kk));
  for (mm = 56; mm != -56; mm -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x518] + mm));
  for (nn = 56; nn != -56; nn -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x588] + nn));
  for (i1 = 56; i1 != -56; i1 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x5F8] + i1));
  for (i2 = 56; i2 != -56; i2 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x668] + i2));
  for (i3 = 56; i3 != -56; i3 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x6D8] + i3));
  __cxa_guard_abort(&_MergedGlobals_9);
  _Unwind_Resume(a1);
}

void siri::intelligence::BehaviorDescription::~BehaviorDescription(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void **std::vector<siri::intelligence::BehaviorDefinition>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void siri::intelligence::BehaviorHandler::Validate(uint64_t a1, const void **a2, siri::intelligence::ValidationResults *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::string::size_type size;
  uint64_t v15;
  __int128 v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  size_t v36;
  size_t v37;
  std::string *v38;
  std::string *v39;
  uint64_t v40;
  void *v41;
  char IsEquivalentType;
  char v43;
  size_t v44;
  std::string *v45;
  const void *v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::size_type v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  std::string::size_type v74;
  std::string *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::string::size_type v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  size_t v84;
  std::string *v85;
  const void *v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  size_t v92;
  size_t v93;
  char v94;
  std::string *v95;
  BOOL v96;
  size_t v97;
  size_t v98;
  std::string *v99;
  void *v100;
  char v101;
  char v102;
  size_t v103;
  std::string *v104;
  const void *v105;
  int v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  std::string *v128;
  std::string::size_type v129;
  int v130;
  _BOOL4 v132;
  size_t v133;
  std::string *v134;
  const void *v135;
  void **v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  int v142;
  const std::string::value_type *v143;
  std::string::size_type v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  std::string::size_type v150;
  std::string *v151;
  __int128 v152;
  std::string *v153;
  unint64_t *v154;
  unint64_t v155;
  std::string *v156;
  std::string *v157;
  const std::string::value_type *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v162;
  int v163;
  uint64_t v165;
  int v166;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::string::size_type v182;
  _OWORD *v183;
  int IsGlobalVariable;
  std::string *v185;
  std::string::size_type v186;
  std::string *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  size_t v200;
  std::string *v201;
  const void *v202;
  int v203;
  const std::string::value_type *v204;
  std::string::size_type v205;
  std::string *v206;
  __int128 v207;
  std::string *v208;
  __int128 v209;
  int v210;
  const std::string::value_type *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  std::string *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219[2];
  void *__p[2];
  unsigned __int8 v224;
  std::string v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  std::string v228;
  std::string v229;
  char v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  std::string v235;
  std::string v236;
  std::string v237;
  std::string v238;
  std::string v239;
  std::string v240;
  std::string v241;
  _BYTE v242[8];
  _QWORD *v243;

  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v242);
  v10 = std::__tree<std::string>::find<std::string>((uint64_t)v242, (const void **)a4);
  v11 = v10;
  if (&v243 != (_QWORD **)v10 && !*(_BYTE *)(v10 + 112))
  {
    if (a6)
      v12 = a6 + 312;
    else
      v12 = 0;
    *(_QWORD *)v219 = a4;
    if (*(_BYTE *)(v10 + 113))
    {
      if (!a6)
        goto LABEL_3;
      siri::intelligence::VariableDictionary::GetValues(*a5, (uint64_t)&v228);
      size = v228.__r_.__value_.__l.__size_;
      v13 = (_QWORD *)v228.__r_.__value_.__r.__words[0];
      if (v228.__r_.__value_.__r.__words[0] == v228.__r_.__value_.__l.__size_)
      {
LABEL_151:
        v241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v241);
        goto LABEL_3;
      }
      while (1)
      {
        v15 = *v13;
        if (*(char *)(*v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v241, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
        }
        else
        {
          v16 = *(_OWORD *)(v15 + 8);
          v241.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
          *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v16;
        }
        if (!siri::intelligence::Memory::HasVariable(v12, (uint64_t)&v241))
        {
          if (*((char *)a2 + 23) >= 0)
            v23 = *((unsigned __int8 *)a2 + 23);
          else
            v23 = (size_t)a2[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v238, v23 + 59);
          if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &v238;
          else
            v24 = (std::string *)v238.__r_.__value_.__r.__words[0];
          if (v23)
          {
            if (*((char *)a2 + 23) >= 0)
              v25 = a2;
            else
              v25 = *a2;
            memmove(v24, v25, v23);
          }
          strcpy((char *)v24 + v23, "defines a parameter key that's not a valid variable name: '");
          if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v241;
          else
            v26 = (std::string *)v241.__r_.__value_.__r.__words[0];
          if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(v241.__r_.__value_.__r.__words[2]);
          else
            v27 = v241.__r_.__value_.__l.__size_;
          v28 = std::string::append(&v238, (const std::string::value_type *)v26, v27);
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v239.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = std::string::append(&v239, "'");
          v240 = *v30;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_PARAM, (__int128 *)&v240, a7);
          if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v240.__r_.__value_.__l.__data_);
          if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v239.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_148;
          v31 = (void *)v238.__r_.__value_.__r.__words[0];
          goto LABEL_147;
        }
        if (siri::intelligence::Memory::IsGlobalVariable(v12, (unsigned __int8 *)&v241))
        {
          if (*((char *)a2 + 23) >= 0)
            v17 = *((unsigned __int8 *)a2 + 23);
          else
            v17 = (size_t)a2[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v239, v17 + 38);
          if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v239;
          else
            v18 = (std::string *)v239.__r_.__value_.__r.__words[0];
          if (v17)
          {
            if (*((char *)a2 + 23) >= 0)
              v19 = a2;
            else
              v19 = *a2;
            memmove(v18, v19, v17);
          }
          strcpy((char *)v18 + v17, "modifies a read-only global variable: ");
          if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v241;
          else
            v20 = (std::string *)v241.__r_.__value_.__r.__words[0];
          if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = HIBYTE(v241.__r_.__value_.__r.__words[2]);
          else
            v21 = v241.__r_.__value_.__l.__size_;
          v22 = std::string::append(&v239, (const std::string::value_type *)v20, v21);
          v240 = *v22;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_READ_ONLY, (__int128 *)&v240, a7);
          if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v240.__r_.__value_.__l.__data_);
          if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v239.__r_.__value_.__l.__data_);
        }
        siri::intelligence::Memory::GetVariable(v12, (uint64_t)&v241, &v239);
        if (*(char *)(v239.__r_.__value_.__r.__words[0] + 55) < 0)
          std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(v239.__r_.__value_.__r.__words[0] + 32), *(_QWORD *)(v239.__r_.__value_.__r.__words[0] + 40));
        else
          v240 = *(std::string *)(v239.__r_.__value_.__r.__words[0] + 32);
        v32 = (std::__shared_weak_count *)v239.__r_.__value_.__l.__size_;
        if (v239.__r_.__value_.__l.__size_)
        {
          v33 = (unint64_t *)(v239.__r_.__value_.__l.__size_ + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v13 + 96))(&v239, *v13, v12);
        v35 = (const void *)siri::intelligence::TYPE_UNKNOWN;
        v36 = strlen(siri::intelligence::TYPE_UNKNOWN);
        v37 = v36;
        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v36 != v240.__r_.__value_.__l.__size_)
            goto LABEL_74;
          if (v36 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v38 = (std::string *)v240.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v36 != HIBYTE(v240.__r_.__value_.__r.__words[2]))
            goto LABEL_74;
          v38 = &v240;
        }
        if (!memcmp(v38, siri::intelligence::TYPE_UNKNOWN, v37))
          goto LABEL_143;
LABEL_74:
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v37 == v239.__r_.__value_.__l.__size_)
          {
            if (v37 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v39 = (std::string *)v239.__r_.__value_.__r.__words[0];
LABEL_80:
            if (!memcmp(v39, v35, v37))
              goto LABEL_143;
          }
        }
        else if (v37 == HIBYTE(v239.__r_.__value_.__r.__words[2]))
        {
          v39 = &v239;
          goto LABEL_80;
        }
        v40 = *v13;
        if (*(char *)(*v13 + 55) < 0)
          std::string::__init_copy_ctor_external(&v238, *(const std::string::value_type **)(v40 + 32), *(_QWORD *)(v40 + 40));
        else
          v238 = *(std::string *)(v40 + 32);
        if ((siri::intelligence::IsEquivalentType((unsigned __int8 *)&v238, (unsigned __int8 *)&v240) & 1) != 0)
        {
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          {
            v41 = (void *)v238.__r_.__value_.__r.__words[0];
            goto LABEL_142;
          }
        }
        else
        {
          IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v239, (unsigned __int8 *)&v240);
          v43 = IsEquivalentType;
          if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if ((IsEquivalentType & 1) != 0)
              goto LABEL_143;
LABEL_91:
            if (*((char *)a2 + 23) >= 0)
              v44 = *((unsigned __int8 *)a2 + 23);
            else
              v44 = (size_t)a2[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v231, v44 + 19);
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v231;
            else
              v45 = (std::string *)v231.__r_.__value_.__r.__words[0];
            if (v44)
            {
              if (*((char *)a2 + 23) >= 0)
                v46 = a2;
              else
                v46 = *a2;
              memmove(v45, v46, v44);
            }
            strcpy((char *)v45 + v44, "type mismatch for '");
            v47 = *(char *)(a4 + 23);
            if (v47 >= 0)
              v48 = (const std::string::value_type *)a4;
            else
              v48 = *(const std::string::value_type **)a4;
            if (v47 >= 0)
              v49 = *(unsigned __int8 *)(a4 + 23);
            else
              v49 = *(_QWORD *)(a4 + 8);
            v50 = std::string::append(&v231, v48, v49);
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v232.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            v52 = std::string::append(&v232, "': parameter '");
            v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            v233.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v54 = &v241;
            else
              v54 = (std::string *)v241.__r_.__value_.__r.__words[0];
            if ((v241.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = HIBYTE(v241.__r_.__value_.__r.__words[2]);
            else
              v55 = v241.__r_.__value_.__l.__size_;
            v56 = std::string::append(&v233, (const std::string::value_type *)v54, v55);
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v234.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            v58 = std::string::append(&v234, "' should be type ");
            v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v235.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v60 = &v240;
            else
              v60 = (std::string *)v240.__r_.__value_.__r.__words[0];
            if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
            else
              v61 = v240.__r_.__value_.__l.__size_;
            v62 = std::string::append(&v235, (const std::string::value_type *)v60, v61);
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v236.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            v64 = std::string::append(&v236, " but it's type is ");
            v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            v237.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &v239;
            else
              v66 = (std::string *)v239.__r_.__value_.__r.__words[0];
            if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
            else
              v67 = v239.__r_.__value_.__l.__size_;
            v68 = std::string::append(&v237, (const std::string::value_type *)v66, v67);
            v238 = *v68;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&v238, a7);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v237.__r_.__value_.__l.__data_);
            if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v236.__r_.__value_.__l.__data_);
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v235.__r_.__value_.__l.__data_);
            if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v234.__r_.__value_.__l.__data_);
            if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v233.__r_.__value_.__l.__data_);
            if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v232.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_143;
            v41 = (void *)v231.__r_.__value_.__r.__words[0];
LABEL_142:
            operator delete(v41);
            goto LABEL_143;
          }
          operator delete(v238.__r_.__value_.__l.__data_);
          if ((v43 & 1) == 0)
            goto LABEL_91;
        }
LABEL_143:
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v240.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_148;
        v31 = (void *)v240.__r_.__value_.__r.__words[0];
LABEL_147:
        operator delete(v31);
LABEL_148:
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v241.__r_.__value_.__l.__data_);
        v13 += 2;
        if (v13 == (_QWORD *)size)
          goto LABEL_151;
      }
    }
    if (!*a5)
      goto LABEL_457;
    v218 = a6;
    std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v241, (const void ***)(*a5 + 72));
    v69 = v241.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v241.__r_.__value_.__l.__data_ != &v241.__r_.__value_.__r.__words[1])
    {
      v216 = a6 + 80;
      v217 = a6 + 72;
      v70 = "";
      do
      {
        if (*(char *)(v69 + 55) < 0)
          std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(v69 + 32), *(_QWORD *)(v69 + 40));
        else
          v240 = *(std::string *)(v69 + 32);
        std::string::basic_string[abi:ne180100]<0>(&v228, v70);
        v71 = v70;
        std::string::basic_string[abi:ne180100]<0>(&v229, v70);
        v230 = 1;
        v73 = *(_QWORD *)(v11 + 88);
        v72 = *(_QWORD *)(v11 + 96);
        if (v73 != v72)
        {
          if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
          else
            v74 = v240.__r_.__value_.__l.__size_;
          if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v240;
          else
            v75 = (std::string *)v240.__r_.__value_.__r.__words[0];
          do
          {
            v76 = *(unsigned __int8 *)(v73 + 23);
            if ((v76 & 0x80u) == 0)
              v77 = *(unsigned __int8 *)(v73 + 23);
            else
              v77 = *(_QWORD *)(v73 + 8);
            if (v77 == v74)
            {
              if ((v76 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v73, v75, *(_QWORD *)(v73 + 8)))
                {
LABEL_178:
                  std::string::operator=(&v228, (const std::string *)v73);
                  std::string::operator=(&v229, (const std::string *)(v73 + 24));
                  v230 = *(_BYTE *)(v73 + 48);
                  break;
                }
              }
              else
              {
                if (!*(_BYTE *)(v73 + 23))
                  goto LABEL_178;
                v78 = 0;
                while (*(unsigned __int8 *)(v73 + v78) == v75->__r_.__value_.__s.__data_[v78])
                {
                  if (v76 == ++v78)
                    goto LABEL_178;
                }
              }
            }
            v73 += 56;
          }
          while (v73 != v72);
        }
        v79 = HIBYTE(v228.__r_.__value_.__r.__words[2]);
        if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = v228.__r_.__value_.__l.__size_;
        if (!v79)
        {
          if (*((char *)a2 + 23) >= 0)
            v84 = *((unsigned __int8 *)a2 + 23);
          else
            v84 = (size_t)a2[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v237, v84 + 35);
          if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &v237;
          else
            v85 = (std::string *)v237.__r_.__value_.__r.__words[0];
          if (v84)
          {
            if (*((char *)a2 + 23) >= 0)
              v86 = a2;
            else
              v86 = *a2;
            memmove(v85, v86, v84);
          }
          strcpy((char *)v85 + v84, "defines an unsupported parameter: '");
          if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = &v240;
          else
            v87 = (std::string *)v240.__r_.__value_.__r.__words[0];
          if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v88 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
          else
            v88 = v240.__r_.__value_.__l.__size_;
          v89 = std::string::append(&v237, (const std::string::value_type *)v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v238.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          v91 = std::string::append(&v238, "'");
          v70 = v71;
          v239 = *v91;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNDEF_PARAM, (__int128 *)&v239, a7);
          if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v239.__r_.__value_.__l.__data_);
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v237.__r_.__value_.__l.__data_);
          goto LABEL_364;
        }
        v80 = *(_QWORD *)(v69 + 56);
        v81 = *(std::__shared_weak_count **)(v69 + 64);
        v226 = v80;
        v227 = v81;
        if (v81)
        {
          p_shared_owners = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldxr(p_shared_owners);
          while (__stxr(v83 + 1, p_shared_owners));
        }
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v239, v229.__r_.__value_.__l.__data_, v229.__r_.__value_.__l.__size_);
        else
          v239 = v229;
        v92 = strlen(siri::intelligence::TYPE_UNKNOWN);
        v93 = v92;
        v94 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v92 != v239.__r_.__value_.__l.__size_)
          {
LABEL_223:
            if (v80)
              goto LABEL_224;
            goto LABEL_357;
          }
          if (v92 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v95 = (std::string *)v239.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v92 != HIBYTE(v239.__r_.__value_.__r.__words[2]))
            goto LABEL_223;
          v95 = &v239;
        }
        v96 = !memcmp(v95, siri::intelligence::TYPE_UNKNOWN, v93) || v80 == 0;
        if (!v96)
        {
LABEL_224:
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v80 + 96))(&v238, v80, v12);
          v97 = strlen(siri::intelligence::TYPE_UNKNOWN);
          v98 = v97;
          if ((SHIBYTE(v238.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (v97 == HIBYTE(v238.__r_.__value_.__r.__words[2]))
            {
              v99 = &v238;
              goto LABEL_230;
            }
            goto LABEL_231;
          }
          if (v97 != v238.__r_.__value_.__l.__size_)
            goto LABEL_231;
          if (v97 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v99 = (std::string *)v238.__r_.__value_.__r.__words[0];
LABEL_230:
          if (memcmp(v99, siri::intelligence::TYPE_UNKNOWN, v98))
          {
LABEL_231:
            if (*(char *)(v80 + 55) < 0)
              std::string::__init_copy_ctor_external(&v237, *(const std::string::value_type **)(v80 + 32), *(_QWORD *)(v80 + 40));
            else
              v237 = *(std::string *)(v80 + 32);
            if ((siri::intelligence::IsEquivalentType((unsigned __int8 *)&v237, (unsigned __int8 *)&v239) & 1) != 0)
            {
              if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
              {
                v100 = (void *)v237.__r_.__value_.__r.__words[0];
                goto LABEL_292;
              }
            }
            else
            {
              v101 = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v238, (unsigned __int8 *)&v239);
              v102 = v101;
              if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v237.__r_.__value_.__l.__data_);
                if ((v102 & 1) != 0)
                  goto LABEL_293;
              }
              else if ((v101 & 1) != 0)
              {
                goto LABEL_293;
              }
              if (*((char *)a2 + 23) >= 0)
                v103 = *((unsigned __int8 *)a2 + 23);
              else
                v103 = (size_t)a2[1];
              std::string::basic_string[abi:ne180100]((uint64_t)&v225, v103 + 19);
              if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v104 = &v225;
              else
                v104 = (std::string *)v225.__r_.__value_.__r.__words[0];
              if (v103)
              {
                if (*((char *)a2 + 23) >= 0)
                  v105 = a2;
                else
                  v105 = *a2;
                memmove(v104, v105, v103);
              }
              strcpy((char *)v104 + v103, "type mismatch for '");
              v106 = *(char *)(*(_QWORD *)v219 + 23);
              if (v106 >= 0)
                v107 = *(const std::string::value_type **)v219;
              else
                v107 = **(const std::string::value_type ***)v219;
              if (v106 >= 0)
                v108 = *(unsigned __int8 *)(*(_QWORD *)v219 + 23);
              else
                v108 = *(_QWORD *)(*(_QWORD *)v219 + 8);
              v109 = std::string::append(&v225, v107, v108);
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v231.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              v111 = std::string::append(&v231, "': parameter '");
              v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              v232.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v113 = &v240;
              else
                v113 = (std::string *)v240.__r_.__value_.__r.__words[0];
              if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
              else
                v114 = v240.__r_.__value_.__l.__size_;
              v115 = std::string::append(&v232, (const std::string::value_type *)v113, v114);
              v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
              v233.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v116;
              v115->__r_.__value_.__l.__size_ = 0;
              v115->__r_.__value_.__r.__words[2] = 0;
              v115->__r_.__value_.__r.__words[0] = 0;
              v117 = std::string::append(&v233, "' should be type ");
              v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
              v234.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v118;
              v117->__r_.__value_.__l.__size_ = 0;
              v117->__r_.__value_.__r.__words[2] = 0;
              v117->__r_.__value_.__r.__words[0] = 0;
              if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v119 = &v239;
              else
                v119 = (std::string *)v239.__r_.__value_.__r.__words[0];
              if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
              else
                v120 = v239.__r_.__value_.__l.__size_;
              v121 = std::string::append(&v234, (const std::string::value_type *)v119, v120);
              v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
              v235.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v122;
              v121->__r_.__value_.__l.__size_ = 0;
              v121->__r_.__value_.__r.__words[2] = 0;
              v121->__r_.__value_.__r.__words[0] = 0;
              v123 = std::string::append(&v235, " but it's type is ");
              v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
              v236.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v236.__r_.__value_.__l.__data_ = v124;
              v123->__r_.__value_.__l.__size_ = 0;
              v123->__r_.__value_.__r.__words[2] = 0;
              v123->__r_.__value_.__r.__words[0] = 0;
              if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v125 = &v238;
              else
                v125 = (std::string *)v238.__r_.__value_.__r.__words[0];
              if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v126 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
              else
                v126 = v238.__r_.__value_.__l.__size_;
              v127 = std::string::append(&v236, (const std::string::value_type *)v125, v126);
              v237 = *v127;
              v127->__r_.__value_.__l.__size_ = 0;
              v127->__r_.__value_.__r.__words[2] = 0;
              v127->__r_.__value_.__r.__words[0] = 0;
              siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&v237, a7);
              if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v237.__r_.__value_.__l.__data_);
              if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v236.__r_.__value_.__l.__data_);
              if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v235.__r_.__value_.__l.__data_);
              if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v234.__r_.__value_.__l.__data_);
              if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v233.__r_.__value_.__l.__data_);
              if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v232.__r_.__value_.__l.__data_);
              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v231.__r_.__value_.__l.__data_);
              if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              {
                v100 = (void *)v225.__r_.__value_.__r.__words[0];
LABEL_292:
                operator delete(v100);
              }
            }
LABEL_293:
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v228.__r_.__value_.__l.__size_ == 10)
              {
                v128 = (std::string *)v228.__r_.__value_.__r.__words[0];
                goto LABEL_298;
              }
            }
            else if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) == 10)
            {
              v128 = &v228;
LABEL_298:
              v129 = v128->__r_.__value_.__r.__words[0];
              v130 = LOWORD(v128->__r_.__value_.__r.__words[1]);
              v132 = v129 != 0x65736E6F70736572 || v130 != 25673;
              if (v218 && !v132)
              {
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v80 + 56))(&v237, v80);
                if (v216 == std::__tree<std::string>::find<std::string>(v217, (const void **)&v237.__r_.__value_.__l.__data_))
                {
                  if (*((char *)a2 + 23) >= 0)
                    v133 = *((unsigned __int8 *)a2 + 23);
                  else
                    v133 = (size_t)a2[1];
                  std::string::basic_string[abi:ne180100]((uint64_t)&v225, v133 + 21);
                  if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v134 = &v225;
                  else
                    v134 = (std::string *)v225.__r_.__value_.__r.__words[0];
                  if (v133)
                  {
                    if (*((char *)a2 + 23) >= 0)
                      v135 = a2;
                    else
                      v135 = *a2;
                    memmove(v134, v135, v133);
                  }
                  strcpy((char *)v134 + v133, "invalid response ID '");
                  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v80 + 56))(__p, v80);
                  if ((v224 & 0x80u) == 0)
                    v136 = __p;
                  else
                    v136 = (void **)__p[0];
                  if ((v224 & 0x80u) == 0)
                    v137 = v224;
                  else
                    v137 = (std::string::size_type)__p[1];
                  v138 = std::string::append(&v225, (const std::string::value_type *)v136, v137);
                  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
                  v231.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v139;
                  v138->__r_.__value_.__l.__size_ = 0;
                  v138->__r_.__value_.__r.__words[2] = 0;
                  v138->__r_.__value_.__r.__words[0] = 0;
                  v140 = std::string::append(&v231, "' for behavior '");
                  v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
                  v232.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v141;
                  v140->__r_.__value_.__l.__size_ = 0;
                  v140->__r_.__value_.__r.__words[2] = 0;
                  v140->__r_.__value_.__r.__words[0] = 0;
                  v142 = *(char *)(*(_QWORD *)v219 + 23);
                  if (v142 >= 0)
                    v143 = *(const std::string::value_type **)v219;
                  else
                    v143 = **(const std::string::value_type ***)v219;
                  if (v142 >= 0)
                    v144 = *(unsigned __int8 *)(*(_QWORD *)v219 + 23);
                  else
                    v144 = *(_QWORD *)(*(_QWORD *)v219 + 8);
                  v145 = std::string::append(&v232, v143, v144);
                  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
                  v233.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v146;
                  v145->__r_.__value_.__l.__size_ = 0;
                  v145->__r_.__value_.__r.__words[2] = 0;
                  v145->__r_.__value_.__r.__words[0] = 0;
                  v147 = std::string::append(&v233, "' parameter '");
                  v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
                  v234.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v148;
                  v147->__r_.__value_.__l.__size_ = 0;
                  v147->__r_.__value_.__r.__words[2] = 0;
                  v147->__r_.__value_.__r.__words[0] = 0;
                  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v149 = &v240;
                  else
                    v149 = (std::string *)v240.__r_.__value_.__r.__words[0];
                  if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v150 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
                  else
                    v150 = v240.__r_.__value_.__l.__size_;
                  v151 = std::string::append(&v234, (const std::string::value_type *)v149, v150);
                  v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
                  v235.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v152;
                  v151->__r_.__value_.__l.__size_ = 0;
                  v151->__r_.__value_.__r.__words[2] = 0;
                  v151->__r_.__value_.__r.__words[0] = 0;
                  v153 = std::string::append(&v235, "'");
                  v236 = *v153;
                  v153->__r_.__value_.__l.__size_ = 0;
                  v153->__r_.__value_.__r.__words[2] = 0;
                  v153->__r_.__value_.__r.__words[0] = 0;
                  siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v236, a7);
                  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v236.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v235.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v234.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v233.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v232.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v231.__r_.__value_.__l.__data_);
                  if ((char)v224 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v225.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v237.__r_.__value_.__l.__data_);
              }
            }
          }
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v238.__r_.__value_.__l.__data_);
          v94 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
        }
LABEL_357:
        v70 = v71;
        if (v94 < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        if (v81)
        {
          v154 = (unint64_t *)&v81->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
LABEL_364:
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v229.__r_.__value_.__l.__data_);
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v240.__r_.__value_.__l.__data_);
        v156 = *(std::string **)(v69 + 8);
        if (v156)
        {
          do
          {
            v157 = v156;
            v156 = (std::string *)v156->__r_.__value_.__r.__words[0];
          }
          while (v156);
        }
        else
        {
          do
          {
            v157 = *(std::string **)(v69 + 16);
            v96 = v157->__r_.__value_.__r.__words[0] == v69;
            v69 = (std::string::size_type)v157;
          }
          while (!v96);
        }
        v69 = (std::string::size_type)v157;
      }
      while (v157 != (std::string *)&v241.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v241, (_QWORD *)v241.__r_.__value_.__l.__size_);
    if (*(char *)(*(_QWORD *)v219 + 23) < 0)
    {
      v159 = *(_QWORD *)(*(_QWORD *)v219 + 8);
      if (v159 == 9)
      {
        v160 = **(uint64_t ***)v219;
        if (***(_QWORD ***)v219 == 0x6E69727453746573 && *(_BYTE *)(**(_QWORD **)v219 + 8) == 103)
          goto LABEL_412;
        v162 = *v160;
        v163 = *((unsigned __int8 *)v160 + 8);
        if (v162 == 0x65626D754E746573 && v163 == 114)
          goto LABEL_412;
        v159 = *(_QWORD *)(*(_QWORD *)v219 + 8);
      }
      if (v159 != 10)
        goto LABEL_406;
      v158 = **(const std::string::value_type ***)v219;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v219 + 23) == 9)
      {
        if (**(_QWORD **)v219 == 0x6E69727453746573 && *(_BYTE *)(*(_QWORD *)v219 + 8) == 103)
          goto LABEL_412;
        if (**(_QWORD **)v219 == 0x65626D754E746573 && *(_BYTE *)(*(_QWORD *)v219 + 8) == 114)
          goto LABEL_412;
        goto LABEL_406;
      }
      v158 = *(const std::string::value_type **)v219;
      if (*(_BYTE *)(*(_QWORD *)v219 + 23) != 10)
      {
LABEL_406:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "setArray")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "setDictionary")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "pushBack")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "popBack")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "setUndefined")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v219, "setEmpty"))
        {
          goto LABEL_457;
        }
LABEL_412:
        v170 = *a5;
        std::string::basic_string[abi:ne180100]<0>(&v228, "name");
        v171 = std::__tree<std::string>::find<std::string>(v170 + 72, (const void **)&v228.__r_.__value_.__l.__data_);
        v172 = v171;
        if (v170 + 80 == v171)
        {
          *(_OWORD *)&v239.__r_.__value_.__l.__data_ = 0uLL;
        }
        else
        {
          v173 = *(const void **)(v171 + 56);
          v174 = *(std::__shared_weak_count **)(v172 + 64);
          if (v174)
          {
            v175 = (unint64_t *)&v174->__shared_owners_;
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          if (v173
          {
            v239.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
            v239.__r_.__value_.__l.__size_ = (std::string::size_type)v174;
            if (v174)
            {
              v178 = (unint64_t *)&v174->__shared_owners_;
              do
                v179 = __ldxr(v178);
              while (__stxr(v179 + 1, v178));
LABEL_423:
              v180 = (unint64_t *)&v174->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
          }
          else
          {
            *(_OWORD *)&v239.__r_.__value_.__l.__data_ = 0uLL;
            if (v174)
              goto LABEL_423;
          }
        }
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        v182 = v239.__r_.__value_.__r.__words[0];
        if (v239.__r_.__value_.__r.__words[0])
        {
          v183 = (_OWORD *)(v239.__r_.__value_.__r.__words[0] + 72);
          if (*(char *)(v239.__r_.__value_.__r.__words[0] + 95) < 0)
          {
            std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(v239.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(v239.__r_.__value_.__r.__words[0] + 80));
          }
          else
          {
            *(_OWORD *)&v228.__r_.__value_.__l.__data_ = *v183;
            v228.__r_.__value_.__r.__words[2] = *(_QWORD *)(v239.__r_.__value_.__r.__words[0] + 88);
          }
          IsGlobalVariable = siri::intelligence::Memory::IsGlobalVariable(v12, (unsigned __int8 *)&v228);
          if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v228.__r_.__value_.__l.__data_);
          if (IsGlobalVariable)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot modify read-only global variable: ", a2, (void **)&v241.__r_.__value_.__l.__data_);
            if (*(char *)(v182 + 95) < 0)
            {
              std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)(v182 + 72), *(_QWORD *)(v182 + 80));
            }
            else
            {
              *(_OWORD *)&v240.__r_.__value_.__l.__data_ = *v183;
              v240.__r_.__value_.__r.__words[2] = *(_QWORD *)(v182 + 88);
            }
            if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v185 = &v240;
            else
              v185 = (std::string *)v240.__r_.__value_.__r.__words[0];
            if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v186 = HIBYTE(v240.__r_.__value_.__r.__words[2]);
            else
              v186 = v240.__r_.__value_.__l.__size_;
            v187 = std::string::append(&v241, (const std::string::value_type *)v185, v186);
            v228 = *v187;
            v187->__r_.__value_.__l.__size_ = 0;
            v187->__r_.__value_.__r.__words[2] = 0;
            v187->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_READ_ONLY, (__int128 *)&v228, a7);
            if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v228.__r_.__value_.__l.__data_);
            if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v240.__r_.__value_.__l.__data_);
            if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v241.__r_.__value_.__l.__data_);
          }
        }
        v188 = (std::__shared_weak_count *)v239.__r_.__value_.__l.__size_;
        if (v239.__r_.__value_.__l.__size_)
        {
          v189 = (unint64_t *)(v239.__r_.__value_.__l.__size_ + 8);
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
LABEL_457:
        v191 = *(_QWORD *)(v11 + 88);
        v192 = *(_QWORD *)(v11 + 96);
        if (v191 == v192)
          goto LABEL_3;
        while (1)
        {
          if (*(_BYTE *)(v191 + 48))
          {
            v193 = *a5;
            if (!*a5
              || (v194 = std::__tree<std::string>::find<std::string>(v193 + 72, (const void **)v191), v193 + 80 == v194))
            {
LABEL_467:
              if (*((char *)a2 + 23) >= 0)
                v200 = *((unsigned __int8 *)a2 + 23);
              else
                v200 = (size_t)a2[1];
              std::string::basic_string[abi:ne180100]((uint64_t)&v238, v200 + 9);
              if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v201 = &v238;
              else
                v201 = (std::string *)v238.__r_.__value_.__r.__words[0];
              if (v200)
              {
                if (*((char *)a2 + 23) >= 0)
                  v202 = a2;
                else
                  v202 = *a2;
                memmove(v201, v202, v200);
              }
              strcpy((char *)v201 + v200, "behavior ");
              v203 = *(char *)(v11 + 79);
              if (v203 >= 0)
                v204 = (const std::string::value_type *)(v11 + 56);
              else
                v204 = *(const std::string::value_type **)(v11 + 56);
              if (v203 >= 0)
                v205 = *(unsigned __int8 *)(v11 + 79);
              else
                v205 = *(_QWORD *)(v11 + 64);
              v206 = std::string::append(&v238, v204, v205);
              v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
              v239.__r_.__value_.__r.__words[2] = v206->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v207;
              v206->__r_.__value_.__l.__size_ = 0;
              v206->__r_.__value_.__r.__words[2] = 0;
              v206->__r_.__value_.__r.__words[0] = 0;
              v208 = std::string::append(&v239, " does not define the required parameter: '");
              v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
              v240.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v209;
              v208->__r_.__value_.__l.__size_ = 0;
              v208->__r_.__value_.__r.__words[2] = 0;
              v208->__r_.__value_.__r.__words[0] = 0;
              v210 = *(char *)(v191 + 23);
              if (v210 >= 0)
                v211 = (const std::string::value_type *)v191;
              else
                v211 = *(const std::string::value_type **)v191;
              if (v210 >= 0)
                v212 = *(unsigned __int8 *)(v191 + 23);
              else
                v212 = *(_QWORD *)(v191 + 8);
              v213 = std::string::append(&v240, v211, v212);
              v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
              v241.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v214;
              v213->__r_.__value_.__l.__size_ = 0;
              v213->__r_.__value_.__r.__words[2] = 0;
              v213->__r_.__value_.__r.__words[0] = 0;
              v215 = std::string::append(&v241, "'");
              v228 = *v215;
              v215->__r_.__value_.__l.__size_ = 0;
              v215->__r_.__value_.__r.__words[2] = 0;
              v215->__r_.__value_.__r.__words[0] = 0;
              siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_PARAM, (__int128 *)&v228, a7);
              if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v228.__r_.__value_.__l.__data_);
              if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v241.__r_.__value_.__l.__data_);
              if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v240.__r_.__value_.__l.__data_);
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v238.__r_.__value_.__l.__data_);
              goto LABEL_500;
            }
            v196 = *(_QWORD *)(v194 + 56);
            v195 = *(std::__shared_weak_count **)(v194 + 64);
            if (!v195)
              goto LABEL_466;
            v197 = (unint64_t *)&v195->__shared_owners_;
            do
              v198 = __ldxr(v197);
            while (__stxr(v198 + 1, v197));
            do
              v199 = __ldaxr(v197);
            while (__stlxr(v199 - 1, v197));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
              if (!v196)
                goto LABEL_467;
            }
            else
            {
LABEL_466:
              if (!v196)
                goto LABEL_467;
            }
          }
LABEL_500:
          v191 += 56;
          if (v191 == v192)
            goto LABEL_3;
        }
      }
    }
    v165 = *(_QWORD *)v158;
    v166 = *((unsigned __int16 *)v158 + 4);
    if (v165 == 0x656C6F6F42746573 && v166 == 28257)
      goto LABEL_412;
    goto LABEL_406;
  }
LABEL_3:
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v242, v243);
}

void sub_22AF555B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1 - 208);
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(v1 - 112, *(_QWORD **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::GetBehaviorDefinitionsMap@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t *v5;
  __int128 *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  char *v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  void **v14[2];
  char v15;
  uint64_t v16;

  v3 = atomic_load((unsigned __int8 *)&qword_253F46398);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253F46398))
  {
    qword_253F463C8 = 0;
    qword_253F463C0 = 0;
    qword_253F463B8 = (uint64_t)&qword_253F463C0;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::intelligence::BehaviorDefinition>::~map[abi:ne180100], &qword_253F463B8, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46398);
  }
  if (qword_253F463C8)
    return std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](a1);
  siri::intelligence::GetBehaviorDefinitions((siri::intelligence *)&v12);
  v5 = (uint64_t *)v12;
  v6 = v13;
  if (v12 != v13)
  {
    do
    {
      v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&qword_253F463B8, &v16, (const void **)v5);
      v8 = *v7;
      if (!*v7)
      {
        v9 = v7;
        v10 = (char *)operator new(0x78uLL);
        v8 = (uint64_t *)v10;
        v14[0] = (void **)v10;
        v14[1] = (void **)&qword_253F463C0;
        v15 = 0;
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v10 + 32), (const std::string::value_type *)*v5, v5[1]);
        }
        else
        {
          v11 = *(_OWORD *)v5;
          *((_QWORD *)v10 + 6) = v5[2];
          *((_OWORD *)v10 + 2) = v11;
        }
        *(_OWORD *)(v8 + 7) = 0u;
        *(_OWORD *)(v8 + 11) = 0u;
        *(_OWORD *)(v8 + 13) = 0u;
        *(_OWORD *)(v8 + 9) = 0u;
        std::string::basic_string[abi:ne180100]<0>(v8 + 7, "");
        *((_WORD *)v8 + 56) = 0;
        *((_OWORD *)v8 + 5) = 0u;
        *((_OWORD *)v8 + 6) = 0u;
        v15 = 1;
        std::__tree<std::string>::__insert_node_at((uint64_t **)&qword_253F463B8, v16, v9, v8);
        v14[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      }
      std::string::operator=((std::string *)(v8 + 7), (const std::string *)v5);
      v8[10] = v5[3];
      if (v5 != v8 + 7)
        std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((uint64_t)(v8 + 11), (std::string *)v5[4], (__int128 *)v5[5], 0x6DB6DB6DB6DB6DB7 * ((v5[5] - v5[4]) >> 3));
      *((_WORD *)v8 + 56) = *((_WORD *)v5 + 28);
      v5 += 8;
    }
    while (v5 != (uint64_t *)v6);
  }
  v14[0] = (void **)&v12;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](v14);
  return std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](a1);
}

void sub_22AF55D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v8, va);
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t std::map<std::string,siri::intelligence::BehaviorDefinition>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t siri::intelligence::BehaviorHandler::Execute(uint64_t a1, const char *a2, _QWORD *a3, void *a4, void *a5, uint64_t a6)
{
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t *, void **);
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const void *v36;
  int v37;
  void **v38;
  char *v39;
  const char *v40;
  void **v41;
  void **v42;
  char v44;
  void *__p[2];
  char v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void *v49[2];
  uint64_t v50;
  char v51[8];
  _QWORD *v52;

  if (a4)
  {
    v10 = (const void **)a2;
    siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v51);
    v11 = std::__tree<std::string>::find<std::string>((uint64_t)v51, v10);
    v12 = v11;
    if (&v52 == (_QWORD **)v11 || (v13 = *(uint64_t (**)(uint64_t *, void **))(v11 + 80)) == 0)
    {
      v27 = 0;
LABEL_58:
      std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v51, v52);
      return v27;
    }
    v14 = *(_QWORD *)(v11 + 88);
    v15 = *(_QWORD *)(v11 + 96);
    if (v14 != v15)
    {
      v16 = 1;
      while (2)
      {
        v44 = v16;
        while (1)
        {
          if (*(_BYTE *)(v14 + 48))
          {
            v17 = *a3;
            if (*a3)
            {
              v18 = std::__tree<std::string>::find<std::string>(v17 + 72, (const void **)v14);
              if (v17 + 80 == v18)
                break;
              v21 = *(_QWORD *)(v18 + 56);
              v20 = *(std::__shared_weak_count **)(v18 + 64);
              if (v20)
              {
                p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                do
                  v23 = __ldxr(p_shared_owners);
                while (__stxr(v23 + 1, p_shared_owners));
                do
                  v24 = __ldaxr(p_shared_owners);
                while (__stlxr(v24 - 1, p_shared_owners));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              if (!v21)
                break;
            }
          }
          v14 += 56;
          if (v14 == v15)
          {
            if ((v44 & 1) != 0)
            {
              v13 = *(uint64_t (**)(uint64_t *, void **))(v12 + 80);
              goto LABEL_30;
            }
            v27 = 0;
            goto LABEL_44;
          }
        }
        v25 = (const void *)v14;
        if (*(char *)(v14 + 23) < 0)
          v25 = *(const void **)v14;
        if (*((char *)v10 + 23) >= 0)
          v26 = v10;
        else
          v26 = *v10;
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Required parameter '%s' not provided for behavior '%s'. Behavior will have no effect.", v19, v25, v26);
        v16 = 0;
        v27 = 0;
        v14 += 56;
        if (v14 != v15)
          continue;
        goto LABEL_44;
      }
    }
LABEL_30:
    v49[0] = a4;
    v49[1] = a5;
    v50 = a6;
    v28 = (std::__shared_weak_count *)a3[1];
    v47 = *a3;
    v48 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v13(&v47, v49);
    v27 = v31;
    v33 = v48;
    if (!v48)
      goto LABEL_37;
    v34 = (unint64_t *)&v48->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if ((v27 & 1) == 0)
        goto LABEL_38;
    }
    else
    {
LABEL_37:
      if ((v31 & 1) == 0)
      {
LABEL_38:
        if (*((char *)v10 + 23) >= 0)
          v36 = v10;
        else
          v36 = *v10;
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Error returned from system behavior '%s'", v32, v36);
      }
    }
LABEL_44:
    if (*((char *)v10 + 23) < 0)
      v10 = (const void **)*v10;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 56))(v49);
    v37 = SHIBYTE(v50);
    v38 = (void **)v49[0];
    if ((_DWORD)v27)
      v39 = "true";
    else
      v39 = "false";
    std::string::basic_string[abi:ne180100]<0>(__p, v39);
    v41 = v49;
    if (v37 < 0)
      v41 = v38;
    if (v46 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    siri::intelligence::Log::Debug((siri::intelligence::Log *)"Executing behavior %s(%s) -> %s", v40, v10, v41, v42);
    if (v46 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50) < 0)
      operator delete(v49[0]);
    goto LABEL_58;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Behavior execution called will NULL intelligence or memory. Skipping execution.", a2);
  return 0;
}

void sub_22AF56154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,_QWORD *a29)
{
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)&a28, a29);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::BehaviorHandler::IsNameHandled(uint64_t a1, const void **a2)
{
  _BOOL8 v3;
  _BYTE v5[8];
  _QWORD *v6;

  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v5);
  v3 = &v6 != (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)v5, a2);
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v5, v6);
  return v3;
}

void sub_22AF56214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::BehaviorHandler::AreKeysVariableNames(uint64_t a1, const void **a2)
{
  uint64_t v3;
  _BOOL8 v4;
  _BYTE v6[8];
  _QWORD *v7;

  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v6);
  v3 = std::__tree<std::string>::find<std::string>((uint64_t)v6, a2);
  v4 = &v7 != (_QWORD **)v3 && *(_BYTE *)(v3 + 113) != 0;
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v6, v7);
  return v4;
}

void sub_22AF56298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::BehaviorSetString(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string lpsrc;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char *v47;
  std::string::size_type size;
  std::string __p;
  char *v50;
  std::__shared_weak_count *v51;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v50 = v12;
      v51 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v50 = 0;
      v51 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v50)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(_QWORD *)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    v45 = v21;
    v46 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 88))(&lpsrc, v21, v17 + 24);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v47 = v26;
      size = lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v47 = 0;
      size = 0;
    }
    v29 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v46;
    if (v46)
    {
      v33 = (unint64_t *)&v46->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v35 = v47;
    if (v47)
    {
      if (v50[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v50 + 9), *((_QWORD *)v50 + 10));
      else
        __p = *(std::string *)(v50 + 3);
      if (v35[95] < 0)
        std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v35 + 9), *((_QWORD *)v35 + 10));
      else
        lpsrc = *(std::string *)(v35 + 3);
      v36 = siri::intelligence::Memory::SetStringValue(v20, (uint64_t)&__p, &lpsrc);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a string", v25, "value", "setString");
      v36 = 0;
    }
    v37 = (std::__shared_weak_count *)size;
    if (size)
    {
      v38 = (unint64_t *)(size + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setString");
    v36 = 0;
  }
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v36;
}

void sub_22AF56648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF566CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF566C4);
}

_QWORD *std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  uint64_t v13;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](a1, a3);
    v13 = a1[1];
    v6 = (__int128 *)(a2 + 24);
    v7 = 56 * a3;
    v8 = (std::string *)v13;
    do
    {
      if (*((char *)v6 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)v6 - 3), *((_QWORD *)v6 - 2));
      }
      else
      {
        v9 = *(__int128 *)((char *)v6 - 24);
        v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 - 1);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v10 = v8 + 1;
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v11 = *v6;
        v8[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v8[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)v6 + 24);
      v8 = (std::string *)(v13 + 56);
      v13 += 56;
      v6 = (__int128 *)((char *)v6 + 56);
      v7 -= 56;
    }
    while (v7);
    a1[1] = v8;
  }
  return a1;
}

void sub_22AF567EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::BehaviorSetNumber(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  double *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *lpsrc;
  std::__shared_weak_count *v46;
  double *v47;
  std::__shared_weak_count *v48;
  std::string __p;
  char *v50;
  std::__shared_weak_count *v51;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v50 = v12;
      v51 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v50 = 0;
      v51 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v50)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(_QWORD *)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    v43 = v21;
    v44 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 88))(&lpsrc, v21, v17 + 24);
    if (lpsrc
    {
      v47 = v26;
      v48 = v46;
      if (v46)
      {
        v27 = (unint64_t *)&v46->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v47 = 0;
      v48 = 0;
    }
    v29 = v46;
    if (v46)
    {
      v30 = (unint64_t *)&v46->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = v47;
    if (v47)
    {
      if (v50[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v50 + 9), *((_QWORD *)v50 + 10));
      else
        __p = *(std::string *)(v50 + 3);
      v35 = siri::intelligence::Memory::SetNumberValue(v20, (uint64_t)&__p, v34[9]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a number", v25, "value", "setNumber", v43);
      v35 = 0;
    }
    v36 = v48;
    if (v48)
    {
      v37 = (unint64_t *)&v48->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setNumber");
    v35 = 0;
  }
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v35;
}

void sub_22AF56B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF56BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF56BECLL);
}

uint64_t siri::intelligence::BehaviorSetBoolean(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _BYTE *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *lpsrc;
  std::__shared_weak_count *v46;
  _BYTE *v47;
  std::__shared_weak_count *v48;
  std::string __p;
  char *v50;
  std::__shared_weak_count *v51;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v50 = v12;
      v51 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v50 = 0;
      v51 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v50)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(_QWORD *)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    v43 = v21;
    v44 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 88))(&lpsrc, v21, v17 + 24);
    if (lpsrc
    {
      v47 = v26;
      v48 = v46;
      if (v46)
      {
        v27 = (unint64_t *)&v46->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v47 = 0;
      v48 = 0;
    }
    v29 = v46;
    if (v46)
    {
      v30 = (unint64_t *)&v46->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = v47;
    if (v47)
    {
      if (v50[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v50 + 9), *((_QWORD *)v50 + 10));
      else
        __p = *(std::string *)(v50 + 3);
      v35 = siri::intelligence::Memory::SetBooleanValue(v20, (uint64_t)&__p, v34[66]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a BOOLean", v25, "value", "setBoolean", v43);
      v35 = 0;
    }
    v36 = v48;
    if (v48)
    {
      v37 = (unint64_t *)&v48->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setBoolean");
    v35 = 0;
  }
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v35;
}

void sub_22AF56F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF56FD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF56FCCLL);
}

uint64_t siri::intelligence::BehaviorSetArray(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  _QWORD **v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD **v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *lpsrc;
  std::__shared_weak_count *v45;
  uint64_t v46;
  void **p_lpsrc;
  std::__shared_weak_count *v48;
  _QWORD **v49;
  std::__shared_weak_count *v50;
  std::string __p;
  char *v52;
  std::__shared_weak_count *v53;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v52 = 0;
    v53 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v52 = v12;
      v53 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v52 = 0;
      v53 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v52)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(void ***)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    p_lpsrc = v21;
    v48 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*((void (**)(void **__return_ptr, void **, uint64_t))*v21 + 11))(&lpsrc, v21, v17 + 24);
    if (lpsrc
    {
      v49 = v26;
      v50 = v45;
      if (v45)
      {
        v27 = (unint64_t *)&v45->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v49 = 0;
      v50 = 0;
    }
    v29 = v45;
    if (v45)
    {
      v30 = (unint64_t *)&v45->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v48;
    if (v48)
    {
      v33 = (unint64_t *)&v48->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v35 = v49;
    if (v49)
    {
      if (v52[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v52 + 9), *((_QWORD *)v52 + 10));
      else
        __p = *(std::string *)(v52 + 3);
      lpsrc = 0;
      v45 = 0;
      v46 = 0;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)&lpsrc, v35[9], v35[10], ((char *)v35[10] - (char *)v35[9]) >> 4);
      v36 = siri::intelligence::Memory::SetArrayValue(v20, (uint64_t)&__p, (uint64_t **)&lpsrc);
      p_lpsrc = &lpsrc;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not an array", v25, "value", "setArray");
      v36 = 0;
    }
    v37 = v50;
    if (v50)
    {
      v38 = (unint64_t *)&v50->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setArray");
    v36 = 0;
  }
  v40 = v53;
  if (v53)
  {
    v41 = (unint64_t *)&v53->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v36;
}

void sub_22AF57374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF573F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF573ECLL);
}

uint64_t siri::intelligence::BehaviorSetDictionary(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const char *v25;
  siri::intelligence::VariableDictionary *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  siri::intelligence::VariableDictionary *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *lpsrc;
  std::__shared_weak_count *v45;
  void **p_lpsrc;
  std::__shared_weak_count *v47;
  siri::intelligence::VariableDictionary *v48;
  std::__shared_weak_count *v49;
  std::string __p;
  char *v51;
  std::__shared_weak_count *v52;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v51 = v12;
      v52 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v51 = 0;
      v52 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v51)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(void ***)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    p_lpsrc = v21;
    v47 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*((void (**)(void **__return_ptr, void **, uint64_t))*v21 + 11))(&lpsrc, v21, v17 + 24);
    if (lpsrc
    {
      v48 = v26;
      v49 = v45;
      if (v45)
      {
        v27 = (unint64_t *)&v45->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v29 = v45;
    if (v45)
    {
      v30 = (unint64_t *)&v45->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v47;
    if (v47)
    {
      v33 = (unint64_t *)&v47->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v35 = v48;
    if (v48)
    {
      if (v51[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v51 + 9), *((_QWORD *)v51 + 10));
      else
        __p = *(std::string *)(v51 + 3);
      siri::intelligence::VariableDictionary::GetValues((uint64_t)v35, (uint64_t)&lpsrc);
      v36 = siri::intelligence::Memory::SetDictionaryValue(v20, (uint64_t)&__p, (uint64_t **)&lpsrc);
      p_lpsrc = &lpsrc;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a dictionary", v25, "value", "setDictionary");
      v36 = 0;
    }
    v37 = v49;
    if (v49)
    {
      v38 = (unint64_t *)&v49->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setDictionary");
    v36 = 0;
  }
  v40 = v52;
  if (v52)
  {
    v41 = (unint64_t *)&v52->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v36;
}

void sub_22AF57784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF57804(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF577FCLL);
}

BOOL siri::intelligence::BehaviorPushBack(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string __p;
  char *v48;
  std::__shared_weak_count *v49;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v48 = v12;
      v49 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v48 = 0;
      v49 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v48)
  {
    v17 = **a2;
    v18 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "value");
    v19 = std::__tree<std::string>::find<std::string>(v18 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v20 = v17 + 24;
    v21 = *(_QWORD *)(v19 + 56);
    v22 = *(std::__shared_weak_count **)(v19 + 64);
    v43 = v21;
    v44 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 88))(&v45, v21, v20);
    if (v22)
    {
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v27 = v45;
    if (v45)
    {
      if (v48[95] < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v48 + 9), *((_QWORD *)v48 + 10));
        v27 = v45;
      }
      else
      {
        __p = *(std::string *)(v48 + 3);
      }
      v41 = v27;
      v42 = v46;
      if (v46)
      {
        v29 = (unint64_t *)&v46->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v28 = siri::intelligence::Memory::PushBackArrayValue(v20, (const void **)&__p.__r_.__value_.__l.__data_, &v41);
      v31 = v42;
      if (v42)
      {
        v32 = (unint64_t *)&v42->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v28 = 0;
    }
    v34 = v46;
    if (v46)
    {
      v35 = (unint64_t *)&v46->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "pushBack");
    v28 = 0;
  }
  v37 = v49;
  if (v49)
  {
    v38 = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return v28;
}

void sub_22AF57B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF57BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF57B98);
}

uint64_t siri::intelligence::BehaviorPopBack(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  const void *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string v37;
  const void *v38;
  std::__shared_weak_count *v39;
  std::string __p;
  char *v41;
  std::__shared_weak_count *v42;

  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v41 = v12;
      v42 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v41 = 0;
      v42 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v41)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "popBack");
    v23 = 0;
    goto LABEL_57;
  }
  memset(&__p, 0, sizeof(__p));
  v17 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v37, "destination");
  v18 = std::__tree<std::string>::find<std::string>(v17 + 72, (const void **)&v37.__r_.__value_.__l.__data_);
  if (v17 + 80 == v18)
  {
    v19 = 0;
    v20 = 0;
    v38 = 0;
    v39 = 0;
  }
  else
  {
    v20 = *(const void **)(v18 + 56);
    v19 = *(std::__shared_weak_count **)(v18 + 64);
    v38 = v20;
    v39 = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if (!v20)
      goto LABEL_45;
  }
  else if (!v20)
  {
    goto LABEL_45;
  }
  if (v24)
  {
    if (v19)
    {
      v26 = (unint64_t *)&v19->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v24[95] < 0)
      std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)v24 + 9), *((_QWORD *)v24 + 10));
    else
      v37 = *(std::string *)(v24 + 3);
    __p = v37;
    if (v19)
    {
      v28 = (unint64_t *)&v19->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
LABEL_45:
    v30 = **a2;
    if (v41[95] < 0)
      std::string::__init_copy_ctor_external(&v37, *((const std::string::value_type **)v41 + 9), *((_QWORD *)v41 + 10));
    else
      v37 = *(std::string *)(v41 + 3);
    v23 = siri::intelligence::Memory::PopBackArrayValue(v30 + 24, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v19 = v39;
    if (!v39)
      goto LABEL_55;
    goto LABEL_51;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v25, "destination", "popBack", 0, 0);
  v23 = 0;
  if (v19)
  {
LABEL_51:
    v31 = (unint64_t *)&v19->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_55:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_57:
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v23;
}

void sub_22AF57F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v27 - 48);
  _Unwind_Resume(a1);
}

void sub_22AF57F9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF57F94);
}

BOOL siri::intelligence::BehaviorSetUndefined(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string __p;
  char *v28;
  std::__shared_weak_count *v29;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v6 = v4;
  if (v3 + 80 == v4)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v7 = *(const void **)(v4 + 56);
    v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7
    {
      v28 = v11;
      v29 = v8;
      if (!v8)
        goto LABEL_17;
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    else
    {
      v28 = 0;
      v29 = 0;
      if (!v8)
        goto LABEL_17;
    }
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v28)
  {
    v16 = **a2;
    if (v28[95] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v28 + 9), *((_QWORD *)v28 + 10));
    else
      __p = *(std::string *)(v28 + 3);
    siri::intelligence::Memory::GetVariable(v16 + 24, (uint64_t)&__p, &v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = v25 != 0;
    if (v25)
      (*(void (**)(void))(*(_QWORD *)v25 + 24))();
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v5, "name", "setUndefined");
    v17 = 0;
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v17;
}

void sub_22AF581C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::BehaviorSetEmpty(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string __p;
  char *v28;
  std::__shared_weak_count *v29;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v6 = v4;
  if (v3 + 80 == v4)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v7 = *(const void **)(v4 + 56);
    v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7
    {
      v28 = v11;
      v29 = v8;
      if (!v8)
        goto LABEL_17;
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    else
    {
      v28 = 0;
      v29 = 0;
      if (!v8)
        goto LABEL_17;
    }
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v28)
  {
    v16 = **a2;
    if (v28[95] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v28 + 9), *((_QWORD *)v28 + 10));
    else
      __p = *(std::string *)(v28 + 3);
    siri::intelligence::Memory::GetVariable(v16 + 24, (uint64_t)&__p, &v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v17 = v25 != 0;
    if (v25)
      (*(void (**)(void))(*(_QWORD *)v25 + 32))();
    v18 = v26;
    if (v26)
    {
      v19 = (unint64_t *)&v26->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v5, "name", "setEmpty");
    v17 = 0;
  }
  v21 = v29;
  if (v29)
  {
    v22 = (unint64_t *)&v29->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v17;
}

void sub_22AF58434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::BehaviorRetryInputs(uint64_t *a1, siri::intelligence::Intelligence::Impl ***a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "responseId");
  v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    v5 = 0;
    v6 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 56);
    v5 = *(std::__shared_weak_count **)(v4 + 64);
    v19 = v6;
    v20 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  if ((v18 & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_9;
LABEL_18:
    siri::intelligence::ExecutionState::RewindToLastInputGroup((siri::intelligence::Intelligence::Impl *)((char *)**a2 + 96));
    goto LABEL_19;
  }
  operator delete(__p[0]);
  if (!v6)
    goto LABEL_18;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(&v15, v6, (uint64_t)**a2 + 24);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v15 + 56))(__p);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  siri::intelligence::Intelligence::RetryInputsForResponseId(*a2, (unsigned __int8 **)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v5 = v20;
LABEL_19:
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return 1;
}

void sub_22AF58604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_22AF58644(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF5863CLL);
}

siri::intelligence::ExecutionState *siri::intelligence::BehaviorRepeatLastResponse(uint64_t a1, uint64_t *a2)
{
  siri::intelligence::ExecutionState *result;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  char v23[8];
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  void **v30;

  result = (siri::intelligence::ExecutionState *)a2[2];
  if (result)
  {
    if (a2[1])
    {
      siri::intelligence::ExecutionState::PopLastResponseIfDone(result);
      v4 = a2[2];
      v6 = *(_QWORD *)(v4 + 24);
      v5 = *(std::__shared_weak_count **)(v4 + 32);
      v21 = v6;
      v22 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      siri::intelligence::ExecStateResponse::ExecStateResponse((uint64_t)v23, (uint64_t)&v21, (siri::intelligence::Memory *)(*(_QWORD *)*a2 + 24));
      siri::intelligence::ExecStateResponse::operator=(a2[1], (uint64_t)v23);
      v30 = (void **)&v29;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v30);
      v27 = &unk_24F540670;
      v9 = v28;
      if (v28)
      {
        v10 = (unint64_t *)&v28->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v27);
      v25 = &unk_24F5406D8;
      v12 = v26;
      if (v26)
      {
        v13 = (unint64_t *)&v26->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v25);
      v15 = v24;
      if (v24)
      {
        v16 = (unint64_t *)&v24->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      return (siri::intelligence::ExecutionState *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_22AF58820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  siri::intelligence::ExecStateResponse::~ExecStateResponse((siri::intelligence::ExecStateResponse *)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::BehaviorSwitchActivity()
{
  return 1;
}

BOOL siri::intelligence::BehaviorRegisterUndo(uint64_t *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *lpsrc[2];
  std::string __p;
  uint64_t v54;
  std::__shared_weak_count *v55;

  if (!*(_QWORD *)a2)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"BehaviorRegisterUndo() called with null intelligence object. This should never happen.", a2);
    return 0;
  }
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "identifier");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    v7 = 0;
    v8 = 0;
    v54 = 0;
    v55 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 56);
    v7 = *(std::__shared_weak_count **)(v5 + 64);
    v54 = v8;
    v55 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v8 != 0;
  if (!v8)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not defined", v6, "identifier", "registerUndo");
    if (!v7)
      return v11;
    goto LABEL_67;
  }
  v12 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "userData");
  v13 = std::__tree<std::string>::find<std::string>(v12 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v12 + 80 == v13)
  {
    v14 = 0;
    v15 = 0;
    lpsrc[0] = 0;
    lpsrc[1] = 0;
  }
  else
  {
    v15 = *(void **)(v13 + 56);
    v14 = *(std::__shared_weak_count **)(v13 + 64);
    lpsrc[0] = v15;
    lpsrc[1] = v14;
    if (v14)
    {
      v16 = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v15)
      goto LABEL_34;
  }
  else if (!v15)
  {
    goto LABEL_34;
  }
  (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(_QWORD *)v15 + 88))(&__p, v15, **(_QWORD **)a2 + 24);
  v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)lpsrc = v18;
  if (v14)
  {
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_34:
  v24 = (char *)operator new(0x40uLL);
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &unk_24F540C08;
  *((_QWORD *)v24 + 1) = 0;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *((_QWORD *)v24 + 7) = 0;
  v50 = (uint64_t)(v24 + 24);
  v51 = (std::__shared_weak_count *)v24;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v54 + 56))(&__p);
  std::string::operator=((std::string *)v24 + 1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc[0]
  {
    v48 = v25;
    v49 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v26 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
  }
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)v24 + 6, (uint64_t *)&v48);
  v28 = v49;
  if (v49)
  {
    v29 = (unint64_t *)&v49->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(_QWORD *)a2;
  v46 = v50;
  v47 = v51;
  if (v51)
  {
    v32 = (unint64_t *)&v51->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)v31 + 216), &v46);
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v51;
  if (v51)
  {
    v38 = (unint64_t *)&v51->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v41 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v7 = v55;
  if (v55)
  {
LABEL_67:
    v43 = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v11;
}

void sub_22AF58C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void sub_22AF58CC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF58CC0);
}

BOOL siri::intelligence::BehaviorExitValue(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = a1[1];
    v10 = *a1;
    v11 = (std::__shared_weak_count *)v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)v2 + 248), &v10);
    v6 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"BehaviorExitValue() called with null intelligence object. This should never happen.", a2);
  }
  return v2 != 0;
}

uint64_t siri::intelligence::BehaviorSetVariables(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string __p;
  std::string v18;
  uint64_t *v19;
  uint64_t *v20;

  v2 = **a2;
  siri::intelligence::VariableDictionary::GetValues(*a1, (uint64_t)&v19);
  v3 = v19;
  v4 = v20;
  if (v19 != v20)
  {
    v5 = v2 + 24;
    LODWORD(v2) = 1;
    while (1)
    {
      v6 = *v3;
      if ((*(char *)(*v3 + 31) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
      v6 = *v3;
      if ((*(char *)(*v3 + 31) & 0x80000000) == 0)
      {
        v7 = (__int128 *)(v6 + 8);
        goto LABEL_7;
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 8), *(_QWORD *)(v6 + 16));
      v6 = *v3;
LABEL_8:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(&v15, v6, v5);
      v10 = siri::intelligence::Memory::SetVariable(v5, (uint64_t)&__p, &v15);
      v11 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v2 = v10 & v2;
      v3 += 2;
      if (v3 == v4)
        goto LABEL_21;
    }
    v7 = (__int128 *)(v6 + 8);
    v8 = *(_OWORD *)(v6 + 8);
    v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 24);
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
LABEL_7:
    v9 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    goto LABEL_8;
  }
  v2 = 1;
LABEL_21:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v2;
}

void sub_22AF58EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  __p = &a24;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::BehaviorPickFromArray(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const std::string::value_type **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  siri::intelligence::VariableArray *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL8 v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  siri::intelligence::VariableArray *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  siri::intelligence::VariableArray *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  siri::intelligence::VariableArray *v93;
  std::string::size_type size;
  std::string __p;
  const std::string::value_type **v96;
  std::__shared_weak_count *v97;

  v3 = **a2;
  v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  v7 = v5;
  if (v4 + 80 == v5)
  {
    v96 = 0;
    v97 = 0;
  }
  else
  {
    v8 = *(const void **)(v5 + 56);
    v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v8
    {
      v96 = v12;
      v97 = v9;
      if (!v9)
        goto LABEL_17;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    else
    {
      v96 = 0;
      v97 = 0;
      if (!v9)
        goto LABEL_17;
    }
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v96)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "pickFromArray");
    v36 = 0;
    goto LABEL_128;
  }
  v17 = v3 + 24;
  (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v96 + 11))(&__p, v96, v3 + 24);
  if (__p.__r_.__value_.__r.__words[0]
  {
    v93 = v19;
    size = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v93 = 0;
    size = 0;
  }
  v22 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v93)
  {
    v25 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "destination");
    v26 = std::__tree<std::string>::find<std::string>(v25 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v28 = v26;
    if (v25 + 80 == v26)
    {
      v91 = 0;
      v92 = 0;
    }
    else
    {
      v29 = *(const void **)(v26 + 56);
      v30 = *(std::__shared_weak_count **)(v28 + 64);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      if (v29
      {
        v91 = v33;
        v92 = v30;
        if (!v30)
          goto LABEL_51;
        v34 = (unint64_t *)&v30->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      else
      {
        v91 = 0;
        v92 = 0;
        if (!v30)
          goto LABEL_51;
      }
      v37 = (unint64_t *)&v30->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
LABEL_51:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v36 = v91 != 0;
    if (!v91)
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v27, "destination", "pickFromArray");
LABEL_118:
      v73 = v92;
      if (v92)
      {
        v74 = (unint64_t *)&v92->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      goto LABEL_123;
    }
    v39 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "deleteItem");
    v40 = std::__tree<std::string>::find<std::string>(v39 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    v41 = v40;
    if (v39 + 80 == v40)
    {
      v89 = 0;
      v90 = 0;
    }
    else
    {
      v42 = *(const void **)(v40 + 56);
      v43 = *(std::__shared_weak_count **)(v41 + 64);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      if (v42
      {
        v89 = v46;
        v90 = v43;
        if (!v43)
          goto LABEL_71;
        v47 = (unint64_t *)&v43->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      else
      {
        v89 = 0;
        v90 = 0;
        if (!v43)
          goto LABEL_71;
      }
      v49 = (unint64_t *)&v43->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
LABEL_71:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v89)
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(_QWORD *)v89 + 88))(&__p, v89, v17);
      v51 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 80))(__p.__r_.__value_.__r.__words[0]);
      v52 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v53 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
    }
    else
    {
      v51 = 0;
    }
    v56 = *((_QWORD *)v93 + 9);
    v55 = *((_QWORD *)v93 + 10);
    v57 = v55 - v56;
    if (v55 == v56)
    {
      if (v91[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v91 + 9), *((_QWORD *)v91 + 10));
      else
        __p = *(std::string *)(v91 + 3);
      v87 = 0;
      v88 = 0;
      siri::intelligence::Memory::SetVariable(v17, (uint64_t)&__p, &v87);
      v64 = v88;
      if (v88)
      {
        v65 = (unint64_t *)&v88->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
LABEL_109:
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    else
    {
      v58 = erand48((unsigned __int16 *)&siri::intelligence::Utils::sRandomNumberGeneratorState);
      if (v91[95] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v91 + 9), *((_QWORD *)v91 + 10));
      else
        __p = *(std::string *)(v91 + 3);
      v59 = (uint64_t)(v58 * (double)(v57 >> 4));
      siri::intelligence::VariableArray::GetItem((uint64_t)v93, v59, &v85);
      siri::intelligence::Memory::SetVariable(v17, (uint64_t)&__p, &v85);
      v60 = v86;
      if (v86)
      {
        v61 = (unint64_t *)&v86->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v51)
        {
LABEL_113:
          v70 = v90;
          if (v90)
          {
            v71 = (unint64_t *)&v90->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          goto LABEL_118;
        }
      }
      else if (!v51)
      {
        goto LABEL_113;
      }
      v63 = v93;
      siri::intelligence::VariableArray::RemoveItem(v93, v59);
      if (*((char *)v96 + 95) < 0)
        std::string::__init_copy_ctor_external(&__p, v96[9], (std::string::size_type)v96[10]);
      else
        __p = *(std::string *)((_BYTE *)v96 + 3);
      v83 = v63;
      v84 = (std::__shared_weak_count *)size;
      if (size)
      {
        v67 = (unint64_t *)(size + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      siri::intelligence::Memory::SetVariable(v17, (uint64_t)&__p, &v83);
      v64 = v84;
      if (v84)
      {
        v69 = (unint64_t *)&v84->__shared_owners_;
        do
          v66 = __ldaxr(v69);
        while (__stlxr(v66 - 1, v69));
        goto LABEL_109;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_113;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a reference to an array", v18, "name", "pickFromArray");
  v36 = 0;
LABEL_123:
  v76 = (std::__shared_weak_count *)size;
  if (size)
  {
    v77 = (unint64_t *)(size + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_128:
  v79 = v97;
  if (v97)
  {
    v80 = (unint64_t *)&v97->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  return v36;
}

void sub_22AF59684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void sub_22AF5975C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF59754);
}

std::string *std::vector<siri::intelligence::BehaviorDefinition>::vector[abi:ne180100](std::string *result, unint64_t a2)
{
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  char *v8;
  __int128 v9;
  std::string::size_type v10;
  std::string *v11;

  qword_253F463A0 = 0;
  qword_253F463A8 = 0;
  qword_253F463B0 = 0;
  if (a2)
  {
    v3 = result;
    std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](&qword_253F463A0, a2);
    v4 = 0;
    v5 = qword_253F463A8;
    v6 = a2 << 6;
    do
    {
      v7 = (std::string *)(v5 + v4);
      v8 = (char *)v3 + v4;
      if (SHIBYTE(v3->__r_.__value_.__r.__words[v4 / 8 + 2]) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *(_OWORD *)v8;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v10 = v3[1].__r_.__value_.__r.__words[v4 / 8];
      *(_QWORD *)(v5 + v4 + 32) = 0;
      v11 = (std::string *)(v5 + v4 + 32);
      v11[-1].__r_.__value_.__r.__words[2] = v10;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      result = std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v11, *(__int128 **)((char *)&v3[1].__r_.__value_.__l.__size_ + v4), (__int128 *)v3[1].__r_.__value_.__r.__words[v4 / 8 + 2], 0x6DB6DB6DB6DB6DB7* ((uint64_t)(v3[1].__r_.__value_.__r.__words[v4 / 8 + 2]- *(std::string::size_type *)((char *)&v3[1].__r_.__value_.__l.__size_ + v4)) >> 3));
      *(_WORD *)(v5 + v4 + 56) = v3[2].__r_.__value_.__r.__words[v4 / 8 + 1];
      v4 += 64;
    }
    while (v6 != v4);
    qword_253F463A8 = v5 + v4;
  }
  return result;
}

void sub_22AF59874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::BehaviorDefinition::~BehaviorDefinition(void **this)
{
  void **v2;

  v2 = this + 4;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::intelligence::ExecStateResponse::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1, (__int128 *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  v4 = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = v4;
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 112), *(__int128 **)(a2 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 3));
  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 136, (__int128 *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  v5 = *(_DWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = v5;
  if (a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 248), *(std::string **)(a2 + 248), *(__int128 **)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 3));
  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](a1 + 272, (__int128 *)(a2 + 272));
  std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate((void **)(a1 + 288));
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  return a1;
}

void siri::intelligence::ExecStateResponse::~ExecStateResponse(siri::intelligence::ExecStateResponse *this)
{
  void **v2;

  v2 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((_QWORD *)this + 19) = &unk_24F540670;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  siri::intelligence::ResponseBase::~ResponseBase((void **)this + 19);
  *((_QWORD *)this + 2) = &unk_24F5406D8;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  siri::intelligence::ResponseBase::~ResponseBase((void **)this + 2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 58)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(a2 << 6);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * a2];
  return result;
}

std::string *std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22AF59CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v11;

  v4 = this;
  v11 = this;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v8 = v4 + 1;
      if (*((char *)v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)v6 + 3), *((_QWORD *)v6 + 4));
      }
      else
      {
        v9 = *(__int128 *)((char *)v6 + 24);
        v4[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 5);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)v6 + 48);
      v6 = (__int128 *)((char *)v6 + 56);
      v4 = (std::string *)((char *)v11 + 56);
      v11 = (std::string *)((char *)v11 + 56);
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_22AF59DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::BehaviorDefinition>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<siri::intelligence::BehaviorDefinition>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD v17[2];
  char v18;
  _QWORD *v19;

  *(_QWORD *)(a1 + 8) = 0;
  v2 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v3 = qword_253F463B8;
  if ((uint64_t *)qword_253F463B8 != &qword_253F463C0)
  {
    while (1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v2)
        break;
      v5 = v2;
      if (v4)
      {
        do
        {
          v6 = v4;
          v4 = *(_QWORD *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        do
        {
          v6 = (uint64_t)v5[2];
          v7 = *(_QWORD *)v6 == (_QWORD)v5;
          v5 = (uint64_t **)v6;
        }
        while (v7);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v6 + 32), (const void **)(v3 + 32)))
      {
        if (!*v2)
          goto LABEL_9;
LABEL_11:
        v19 = (_QWORD *)v6;
        v8 = (uint64_t **)(v6 + 8);
        goto LABEL_13;
      }
      v8 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v19, (const void **)(v3 + 32));
LABEL_13:
      if (!*v8)
        goto LABEL_14;
LABEL_21:
      v14 = *(uint64_t **)(v3 + 8);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = *(uint64_t **)(v3 + 16);
          v7 = *v15 == v3;
          v3 = (uint64_t)v15;
        }
        while (!v7);
      }
      v3 = (uint64_t)v15;
      if (v15 == &qword_253F463C0)
        return a1;
    }
    v6 = (uint64_t)v2;
    if (!v4)
    {
LABEL_9:
      v19 = v2;
      v8 = v2;
LABEL_14:
      v9 = (char *)operator new(0x78uLL);
      v10 = v9;
      v17[0] = v9;
      v17[1] = v2;
      v18 = 0;
      if (*(char *)(v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)(v3 + 32), *(_QWORD *)(v3 + 40));
      }
      else
      {
        v11 = *(_OWORD *)(v3 + 32);
        *((_QWORD *)v9 + 6) = *(_QWORD *)(v3 + 48);
        *((_OWORD *)v9 + 2) = v11;
      }
      if (*(char *)(v3 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 56), *(const std::string::value_type **)(v3 + 56), *(_QWORD *)(v3 + 64));
      }
      else
      {
        v12 = *(_OWORD *)(v3 + 56);
        *((_QWORD *)v10 + 9) = *(_QWORD *)(v3 + 72);
        *(_OWORD *)(v10 + 56) = v12;
      }
      v13 = *(_QWORD *)(v3 + 80);
      *((_QWORD *)v10 + 11) = 0;
      *((_QWORD *)v10 + 10) = v13;
      *((_QWORD *)v10 + 12) = 0;
      *((_QWORD *)v10 + 13) = 0;
      std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((std::string *)(v10 + 88), *(__int128 **)(v3 + 88), *(__int128 **)(v3 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 96) - *(_QWORD *)(v3 + 88)) >> 3));
      *((_WORD *)v10 + 56) = *(_WORD *)(v3 + 112);
      v18 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v8, (uint64_t *)v10);
      v17[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_22AF5A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 55) < 0)
    operator delete(*v11);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492)
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, (std::string *)a3, v9);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v8, i))
  {
    i -= 56;
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_22AF5A38C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22AF5A394(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  void **v22;
  void *v23;
  void **v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  const void **v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  int v37;
  BOOL v38;
  __int128 *v39;
  const void **v40;
  int v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  BOOL v46;
  __int128 *v47;
  const void **v48;
  int v49;
  size_t v50;
  const void *v51;
  size_t v52;
  int v53;
  BOOL v54;
  const void **v55;
  int v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  void **v62;
  __int128 v63;
  __int128 v64;
  BOOL v65;
  BOOL v66;
  __int128 v67;
  void **v68;
  int v69;
  void *v70;
  void **v71;
  size_t v72;
  const void **v73;
  size_t v74;
  int v75;
  BOOL v76;
  const void **v77;
  int v78;
  size_t v79;
  const void *v80;
  size_t v81;
  int v82;
  BOOL v83;
  const void **v84;
  int v85;
  size_t v86;
  const void *v87;
  size_t v88;
  int v89;
  BOOL v90;
  __int128 *v91;
  const void **v92;
  int v93;
  size_t v94;
  const void *v95;
  size_t v96;
  int v97;
  BOOL v98;
  const void **v99;
  int v100;
  size_t v101;
  const void *v102;
  size_t v103;
  int v104;
  _BOOL4 v105;
  int v106;
  size_t v107;
  const void *v108;
  size_t v109;
  int v110;
  BOOL v111;
  void **v112;
  __int128 v113;
  __int128 v114;
  const void **v115;
  const void **v116;
  const void **v117;
  int v118;
  int v119;
  size_t v120;
  const void **v121;
  size_t v122;
  const void *v123;
  size_t v124;
  int v125;
  _BOOL4 v126;
  const void **v127;
  uint64_t v128;
  const void **v129;
  const void **v130;
  int v131;
  int v132;
  size_t v133;
  const void **v134;
  size_t v135;
  const void *v136;
  size_t v137;
  int v138;
  _BOOL4 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  void *v148;
  void **v149;
  size_t v150;
  const void *v151;
  size_t v152;
  int v153;
  BOOL v154;
  uint64_t v155;
  __int128 v156;
  int64_t v157;
  int64_t v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  size_t v165;
  const void *v166;
  size_t v167;
  const void *v168;
  size_t v169;
  int v170;
  _BOOL4 v171;
  const void *v172;
  uint64_t v173;
  int v174;
  int v175;
  size_t v176;
  const void *v177;
  size_t v178;
  const void *v179;
  size_t v180;
  int v181;
  BOOL v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  const void *v189;
  int v190;
  const void *v191;
  size_t v192;
  const void *v193;
  size_t v194;
  const void *v195;
  size_t v196;
  int v197;
  _BOOL4 v198;
  BOOL v199;
  const void *v200;
  int v201;
  size_t v202;
  const void *v203;
  void *v204;
  void **v205;
  size_t v206;
  int v207;
  _BOOL4 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  void **v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  int v221;
  size_t v222;
  const void *v223;
  size_t v224;
  const void *v225;
  size_t v226;
  int v227;
  _BOOL4 v228;
  __int128 v229;
  int v230;
  __int128 v231;
  void **v232;
  __int128 v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  int v238;
  size_t v239;
  const void *v240;
  size_t v241;
  const void *v242;
  size_t v243;
  int v244;
  _BOOL4 v245;
  __int128 v246;
  void *v247;
  void **v248;
  uint64_t v249;
  __int128 v250;
  int v251;
  size_t v252;
  const void *v253;
  size_t v254;
  int v255;
  BOOL v256;
  __int128 v257;
  __int128 v258;
  const void *v260;
  _WORD *v261;
  uint64_t v262;
  int v263;
  int v264;
  size_t v265;
  const void *v266;
  size_t v267;
  const void *v268;
  size_t v269;
  int v270;
  _BOOL4 v271;
  __int128 v272;
  _WORD *v273;
  void **v274;
  _WORD *v275;
  size_t v276;
  _WORD *v277;
  const void *v278;
  size_t v279;
  void *v280;
  void **v281;
  size_t v282;
  const void *v283;
  size_t v284;
  int v285;
  BOOL v286;
  void **v287;
  __int128 v288;
  const void **v289;
  unint64_t v290;
  const void **v291;
  const void *v292;
  unint64_t v293;
  const void *v295;
  int64_t v296;
  _QWORD *v297;
  const void **v298;
  const void **v299;
  int64_t v300;
  void *v302[2];
  void *v303;
  _BYTE v304[32];
  __int16 v305;
  void **v306;
  void *__p[2];
  const void *v308;
  _BYTE v309[32];
  __int16 v310;

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  size_t v21;
  const void *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, a2, a3, (const void **)a4);
  v10 = *(char *)(a4 + 23);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(a4 + 23);
  else
    v14 = *(_QWORD *)(a4 + 8);
  if (v10 >= 0)
    v15 = (const void *)a4;
  else
    v15 = *(const void **)a4;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a4, (__int128 *)a5);
    v19 = *(char *)(a3 + 23);
    v20 = *(char *)(a4 + 23);
    if (v20 >= 0)
      v21 = *(unsigned __int8 *)(a4 + 23);
    else
      v21 = *(_QWORD *)(a4 + 8);
    if (v20 >= 0)
      v22 = (const void *)a4;
    else
      v22 = *(const void **)a4;
    if (v19 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    if (v19 >= 0)
      v24 = (const void *)a3;
    else
      v24 = *(const void **)a3;
    if (v23 >= v21)
      v25 = v21;
    else
      v25 = v23;
    v26 = memcmp(v22, v24, v25);
    v27 = v21 < v23;
    if (v26)
      v27 = v26 < 0;
    if (v27)
    {
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a3, (__int128 *)a4);
      v28 = *(char *)(a2 + 23);
      v29 = *(char *)(a3 + 23);
      if (v29 >= 0)
        v30 = *(unsigned __int8 *)(a3 + 23);
      else
        v30 = *(_QWORD *)(a3 + 8);
      if (v29 >= 0)
        v31 = (const void *)a3;
      else
        v31 = *(const void **)a3;
      if (v28 >= 0)
        v32 = *(unsigned __int8 *)(a2 + 23);
      else
        v32 = *(_QWORD *)(a2 + 8);
      if (v28 >= 0)
        v33 = (const void *)a2;
      else
        v33 = *(const void **)a2;
      if (v32 >= v30)
        v34 = v30;
      else
        v34 = v32;
      v35 = memcmp(v31, v33, v34);
      v36 = v30 < v32;
      if (v35)
        v36 = v35 < 0;
      if (v36)
      {
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a2, (__int128 *)a3);
        v37 = *(char *)(a1 + 23);
        v38 = *(char *)(a2 + 23);
        if (v38 >= 0)
          v39 = *(unsigned __int8 *)(a2 + 23);
        else
          v39 = *(_QWORD *)(a2 + 8);
        if (v38 >= 0)
          v40 = (const void *)a2;
        else
          v40 = *(const void **)a2;
        if (v37 >= 0)
          v41 = *(unsigned __int8 *)(a1 + 23);
        else
          v41 = *(_QWORD *)(a1 + 8);
        if (v37 >= 0)
          v42 = (const void *)a1;
        else
          v42 = *(const void **)a1;
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        if (v45)
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(const void **a1, const void **a2, const void **a3)
{
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  __int128 *v21;
  int v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  __int128 *v31;
  int v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  _BOOL4 v40;

  v6 = *((char *)a1 + 23);
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v6 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  if (v6 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = v8 < v10;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v15 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v8 >= v16)
    v18 = v16;
  else
    v18 = v8;
  v19 = memcmp(v17, v9, v18);
  v20 = v16 < v8;
  if (v19)
    v20 = v19 < 0;
  if (v14)
  {
    v21 = (__int128 *)a1;
    if (v20)
    {
LABEL_51:
      v31 = (__int128 *)a3;
LABEL_72:
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>(v21, v31);
      return;
    }
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a1, (__int128 *)a2);
    v22 = *((char *)a2 + 23);
    v23 = *((char *)a3 + 23);
    if (v23 >= 0)
      v24 = *((unsigned __int8 *)a3 + 23);
    else
      v24 = (size_t)a3[1];
    if (v23 >= 0)
      v25 = a3;
    else
      v25 = *a3;
    if (v22 >= 0)
      v26 = *((unsigned __int8 *)a2 + 23);
    else
      v26 = (size_t)a2[1];
    if (v22 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    if (v26 >= v24)
      v28 = v24;
    else
      v28 = v26;
    v29 = memcmp(v25, v27, v28);
    v30 = v24 < v26;
    if (v29)
      v30 = v29 < 0;
    if (v30)
    {
      v21 = (__int128 *)a2;
      goto LABEL_51;
    }
  }
  else if (v20)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a2, (__int128 *)a3);
    v32 = *((char *)a1 + 23);
    v33 = *((char *)a2 + 23);
    if (v33 >= 0)
      v34 = *((unsigned __int8 *)a2 + 23);
    else
      v34 = (size_t)a2[1];
    if (v33 >= 0)
      v35 = a2;
    else
      v35 = *a2;
    if (v32 >= 0)
      v36 = *((unsigned __int8 *)a1 + 23);
    else
      v36 = (size_t)a1[1];
    if (v32 >= 0)
      v37 = a1;
    else
      v37 = *a1;
    if (v36 >= v34)
      v38 = v34;
    else
      v38 = v36;
    v39 = memcmp(v35, v37, v38);
    v40 = v34 < v36;
    if (v39)
      v40 = v39 < 0;
    if (v40)
    {
      v21 = (__int128 *)a1;
      v31 = (__int128 *)a2;
      goto LABEL_72;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(uint64_t a1, const void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  int v7;
  int v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  const void **v16;
  const void **v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  void **v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  void **v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *__p[2];
  const void *v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  void **v52;

  v4 = ((uint64_t)a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 8);
      v7 = *(char *)(a1 + 23);
      v8 = *((char *)a2 - 41);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 - 41);
      else
        v9 = (size_t)*(a2 - 7);
      if (v8 >= 0)
        v10 = a2 - 8;
      else
        v10 = (const void **)*(a2 - 8);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      if (v7 >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      if (v11 >= v9)
        v13 = v9;
      else
        v13 = v11;
      v14 = memcmp(v10, v12, v13);
      v15 = v9 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a1, v6);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + 64), a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, a1 + 64, a1 + 128, a2 - 8);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 8);
      return 1;
    default:
      v16 = (const void **)(a1 + 128);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + 64), (const void **)(a1 + 128));
      v17 = (const void **)(a1 + 192);
      if ((const void **)(a1 + 192) == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *((char *)v16 + 23);
    v21 = *((char *)v17 + 23);
    if (v21 >= 0)
      v22 = *((unsigned __int8 *)v17 + 23);
    else
      v22 = (size_t)v17[1];
    if (v21 >= 0)
      v23 = v17;
    else
      v23 = *v17;
    if (v20 >= 0)
      v24 = *((unsigned __int8 *)v16 + 23);
    else
      v24 = (size_t)v16[1];
    if (v20 >= 0)
      v25 = v16;
    else
      v25 = *v16;
    if (v24 >= v22)
      v26 = v22;
    else
      v26 = v24;
    v27 = memcmp(v23, v25, v26);
    v28 = v22 < v24;
    if (v27)
      v28 = v27 < 0;
    if (v28)
    {
      *(_OWORD *)__p = *(_OWORD *)v17;
      v48 = v17[2];
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      v49 = *(_OWORD *)(v17 + 3);
      v50 = *(_OWORD *)(v17 + 5);
      v17[4] = 0;
      v17[5] = 0;
      v51 = *((_WORD *)v17 + 28);
      v29 = v18;
      v17[6] = 0;
      while (1)
      {
        v30 = v29;
        v31 = a1 + v29;
        v32 = a1 + v29 + 192;
        if (*(char *)(a1 + v29 + 215) < 0)
          operator delete(*(void **)v32);
        *(_OWORD *)v32 = *(_OWORD *)(v31 + 128);
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 144);
        *(_BYTE *)(v31 + 151) = 0;
        *(_BYTE *)(v31 + 128) = 0;
        *(_QWORD *)(v31 + 216) = *(_QWORD *)(v31 + 152);
        std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v31 + 224));
        *(_OWORD *)(v31 + 224) = *(_OWORD *)(v31 + 160);
        *(_QWORD *)(v31 + 240) = *(_QWORD *)(v31 + 176);
        *(_QWORD *)(v31 + 168) = 0;
        *(_QWORD *)(v31 + 176) = 0;
        *(_QWORD *)(v31 + 160) = 0;
        *(_WORD *)(v31 + 248) = *(_WORD *)(v31 + 184);
        if (v30 == -128)
          break;
        v33 = *(char *)(a1 + v30 + 87);
        if (SHIBYTE(v48) >= 0)
          v34 = (void *)HIBYTE(v48);
        else
          v34 = __p[1];
        if (SHIBYTE(v48) >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        if (v33 >= 0)
          v36 = *(unsigned __int8 *)(a1 + v30 + 87);
        else
          v36 = *(_QWORD *)(a1 + v30 + 72);
        if (v33 >= 0)
          v37 = (const void *)(a1 + v30 + 64);
        else
          v37 = *(const void **)(a1 + v30 + 64);
        if (v36 >= (unint64_t)v34)
          v38 = (size_t)v34;
        else
          v38 = v36;
        v39 = memcmp(v35, v37, v38);
        v40 = v39 < 0;
        if (!v39)
          v40 = (unint64_t)v34 < v36;
        v29 = v30 - 64;
        if (!v40)
        {
          v41 = a1 + v29 + 192;
          goto LABEL_65;
        }
      }
      v41 = a1;
LABEL_65:
      if (*(char *)(v41 + 23) < 0)
        operator delete(*(void **)v41);
      v42 = (void **)(a1 + v30 + 160);
      *(_OWORD *)v41 = *(_OWORD *)__p;
      v43 = v48;
      v44 = v49;
      HIBYTE(v48) = 0;
      LOBYTE(__p[0]) = 0;
      *(_QWORD *)(v41 + 16) = v43;
      *(_QWORD *)(v41 + 24) = v44;
      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v42);
      v45 = v50;
      *v42 = (void *)*((_QWORD *)&v49 + 1);
      v46 = *((_QWORD *)&v50 + 1);
      *(_QWORD *)(v41 + 40) = v45;
      *(_QWORD *)(v41 + 48) = v46;
      v50 = 0uLL;
      *((_QWORD *)&v49 + 1) = 0;
      *(_WORD *)(v41 + 56) = v51;
      v52 = (void **)&v49 + 1;
      std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v52);
      if (SHIBYTE(v48) < 0)
        operator delete(__p[0]);
      if (++v19 == 8)
        return v17 + 8 == a2;
    }
    v16 = v17;
    v18 += 64;
    v17 += 8;
    if (v17 == a2)
      return 1;
  }
}

void std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>(__int128 *a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  __int16 v16;
  void **v17;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v13 = v5;
  v15 = 0;
  v7 = a1 + 2;
  v11 = a1[2];
  *(_OWORD *)__p = v4;
  v14[0] = *((_QWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 4) = 0;
  v9 = *((_WORD *)a1 + 28);
  v16 = v9;
  v10 = *((_QWORD *)a2 + 2);
  *a1 = *a2;
  *((_QWORD *)a1 + 2) = v10;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a1 + 4);
  *v7 = a2[2];
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_WORD *)a1 + 28) = *((_WORD *)a2 + 28);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *a2 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 2) = v13;
  *((_QWORD *)a2 + 3) = v6;
  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a2 + 4);
  a2[2] = v11;
  *((_QWORD *)a2 + 6) = v8;
  v14[1] = 0;
  v15 = 0;
  v14[0] = 0;
  *((_WORD *)a2 + 28) = v9;
  v17 = (void **)v14;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  size_t v28;
  const void *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *(char *)(a3 + 23);
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = *a4;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  if (v8 >= 0)
    v13 = (const void *)a3;
  else
    v13 = *(const void **)a3;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v16 = v10 < v12;
  if (v15)
    v16 = v15 < 0;
  if (v16)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a3, (__int128 *)a4);
    v17 = *(char *)(a2 + 23);
    v18 = *(char *)(a3 + 23);
    if (v18 >= 0)
      v19 = *(unsigned __int8 *)(a3 + 23);
    else
      v19 = *(_QWORD *)(a3 + 8);
    if (v18 >= 0)
      v20 = (const void *)a3;
    else
      v20 = *(const void **)a3;
    if (v17 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    if (v17 >= 0)
      v22 = (const void *)a2;
    else
      v22 = *(const void **)a2;
    if (v21 >= v19)
      v23 = v19;
    else
      v23 = v21;
    v24 = memcmp(v20, v22, v23);
    v25 = v19 < v21;
    if (v24)
      v25 = v24 < 0;
    if (v25)
    {
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a2, (__int128 *)a3);
      v26 = *(char *)(a1 + 23);
      v27 = *(char *)(a2 + 23);
      if (v27 >= 0)
        v28 = *(unsigned __int8 *)(a2 + 23);
      else
        v28 = *(_QWORD *)(a2 + 8);
      if (v27 >= 0)
        v29 = (const void *)a2;
      else
        v29 = *(const void **)a2;
      if (v26 >= 0)
        v30 = *(unsigned __int8 *)(a1 + 23);
      else
        v30 = *(_QWORD *)(a1 + 8);
      if (v26 >= 0)
        v31 = (const void *)a1;
      else
        v31 = *(const void **)a1;
      if (v30 >= v28)
        v32 = v28;
      else
        v32 = v30;
      v33 = memcmp(v29, v31, v32);
      v34 = v28 < v30;
      if (v33)
        v34 = v33 < 0;
      if (v34)
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((__int128 *)a1, (__int128 *)a2);
    }
  }
}

void std::vector<siri::intelligence::BehaviorDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(this + 1, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
}

void sub_22AF5C478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::intelligence::BehaviorDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

YAML::Emitter *YAML::Emitter::Emitter(YAML::Emitter *this)
{
  YAML::EmitterState *v2;
  std::vector<char>::value_type __x;

  v2 = (YAML::EmitterState *)operator new();
  YAML::EmitterState::EmitterState(v2);
  *(_QWORD *)this = v2;
  __x = 0;
  std::vector<char>::vector((std::vector<char> *)((char *)this + 8), 1uLL, &__x);
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_22AF5C54C(_Unwind_Exception *a1)
{
  YAML::EmitterState **v1;

  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t YAML::Emitter::Emitter(uint64_t a1, uint64_t a2)
{
  YAML::EmitterState *v4;

  v4 = (YAML::EmitterState *)operator new();
  YAML::EmitterState::EmitterState(v4);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

void sub_22AF5C5EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x1032C409558ADD0);
  _Unwind_Resume(a1);
}

void YAML::Emitter::~Emitter(YAML::Emitter *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this, 0);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this, 0);
}

uint64_t YAML::Emitter::c_str(YAML::Emitter *this)
{
  if (*((_QWORD *)this + 4))
    return 0;
  *(_BYTE *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 5)) = 0;
  return *((_QWORD *)this + 1);
}

uint64_t YAML::Emitter::size(YAML::Emitter *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t YAML::Emitter::good(YAML::Emitter *this)
{
  return **(unsigned __int8 **)this;
}

void YAML::Emitter::GetLastError(YAML::Emitter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL YAML::Emitter::SetOutputCharset(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 3;
  if ((a2 - 3) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 32), a2, 1);
  return v2 < 2;
}

uint64_t YAML::Emitter::SetStringFormat(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0)
  {
    v2 = 1;
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 36), a2, 1);
  }
  return v2;
}

uint64_t YAML::Emitter::SetBoolFormat(uint64_t *a1, int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;

  v4 = a2 - 8;
  if ((a2 - 8) > 2)
  {
    if ((a2 - 11) <= 2)
    {
      v5 = 1;
      YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 48), a2, 1);
      goto LABEL_6;
    }
  }
  else
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 40), a2, 1);
  }
  v5 = 0;
LABEL_6:
  if ((a2 & 0xFFFFFFFE) == 0xE)
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 44), a2, 1);
    v6 = 1;
  }
  else
  {
    v6 = v5;
  }
  if (v4 < 3)
    return 1;
  else
    return v6;
}

BOOL YAML::Emitter::SetIntBase(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 16;
  if ((a2 - 16) <= 2)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 52), a2, 1);
  return v2 < 3;
}

BOOL YAML::Emitter::SetSeqFormat(uint64_t *a1, int a2)
{
  unsigned int v2;

  v2 = a2 - 23;
  if ((a2 - 23) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 80), a2, 1);
  return v2 < 2;
}

uint64_t YAML::Emitter::SetMapFormat(uint64_t *a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;

  v4 = a2 - 23;
  if ((a2 - 23) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, (_DWORD *)(*a1 + 84), a2, 1);
  if (a2 != 29 && a2)
  {
    v7 = 0;
  }
  else
  {
    v5 = *a1;
    v6 = (_DWORD *)(*a1 + 88);
    v7 = 1;
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v5, v6, a2, 1);
  }
  if (v4 < 2)
    return 1;
  else
    return v7;
}

BOOL YAML::Emitter::SetIndent(YAML::Emitter *this, unint64_t a2)
{
  if (a2 >= 2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 56), a2, 1);
  return a2 > 1;
}

BOOL YAML::Emitter::SetPreCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 64), a2, 1);
  return a2 != 0;
}

BOOL YAML::Emitter::SetPostCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 72), a2, 1);
  return a2 != 0;
}

BOOL YAML::Emitter::SetFloatPrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 9)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 96), a2, 1);
  return a2 < 0xA;
}

BOOL YAML::Emitter::SetDoublePrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 0x11)
    YAML::EmitterState::_Set<unsigned long>(*(_QWORD *)this, (_QWORD *)(*(_QWORD *)this + 104), a2, 1);
  return a2 < 0x12;
}

YAML::Emitter *YAML::Emitter::SetLocalValue(YAML::Emitter *this, unsigned int a2)
{
  _BYTE *v3;

  v3 = *(_BYTE **)this;
  if (*v3)
  {
    switch(a2)
    {
      case 0x13u:
        YAML::Emitter::EmitBeginDoc(this);
        break;
      case 0x14u:
        YAML::Emitter::EmitEndDoc(this);
        break;
      case 0x15u:
        YAML::Emitter::EmitBeginSeq(this);
        break;
      case 0x16u:
        YAML::Emitter::EmitEndSeq(this);
        break;
      case 0x17u:
      case 0x18u:
        goto LABEL_7;
      case 0x19u:
        YAML::Emitter::EmitBeginMap(this);
        break;
      case 0x1Au:
        YAML::Emitter::EmitEndMap(this);
        break;
      case 0x1Bu:
      case 0x1Cu:
        return this;
      default:
        if (a2 == 1)
        {
          YAML::Emitter::EmitKindTag(this);
        }
        else if (a2 == 2)
        {
          YAML::Emitter::EmitNewline(this);
        }
        else
        {
LABEL_7:
          YAML::EmitterState::SetLocalValue((uint64_t)v3, a2);
        }
        break;
    }
  }
  return this;
}

void YAML::Emitter::EmitBeginDoc(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::string __str;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) != v3 && **(_DWORD **)(v3 - 8) || *(_BYTE *)(v1 + 192) || *(_BYTE *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(_BYTE *)v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      if (*((_QWORD *)this + 7))
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "---\n", 4uLL);
      v4 = *(_QWORD *)this;
      *(_WORD *)(v4 + 192) = 0;
      *(_BYTE *)(v4 + 194) = 0;
    }
  }
}

void sub_22AF5CC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitEndDoc(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v2;
  std::vector<char> *v3;
  std::string __str;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v2 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) != v2 && **(_DWORD **)(v2 - 8) || *(_BYTE *)(v1 + 192) || *(_BYTE *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(_BYTE *)v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v3 = (std::vector<char> *)((char *)this + 8);
      if (*((_QWORD *)this + 7))
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      YAML::ostream_wrapper::write(v3, "...\n", 4uLL);
    }
  }
}

void sub_22AF5CD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitBeginSeq(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) == v3 || *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 80) == 24)
        v4 = 4;
      else
        v4 = 3;
    }
    else
    {
      v4 = 3;
    }
    YAML::Emitter::PrepareNode(this, v4);
    YAML::EmitterState::StartedGroup(*(_QWORD *)this, 1);
  }
}

void YAML::Emitter::EmitEndSeq(YAML::Emitter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char __src;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v3)
    {
      if (!*(_QWORD *)(v2 + 200))
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      goto LABEL_20;
    }
    v4 = *(_QWORD *)(v3 - 8);
    if (*(_QWORD *)(v4 + 16))
    {
      if (*(_DWORD *)(v4 + 4) != 1)
      {
LABEL_20:
        YAML::EmitterState::EndedGroup(v2, 1);
        return;
      }
    }
    else
    {
      *(_DWORD *)(v4 + 4) = 1;
    }
    if (*((_BYTE *)this + 64))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      v2 = *(_QWORD *)this;
    }
    v5 = *(_QWORD *)(v2 + 184);
    if (*((_QWORD *)this + 7) < v5)
    {
      do
      {
        __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      while (*((_QWORD *)this + 7) < v5);
      v2 = *(_QWORD *)this;
    }
    v6 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v6)
      v7 = (_QWORD *)(v2 + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (!*v7)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "[", 1uLL);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "]", 1uLL);
    v2 = *(_QWORD *)this;
    goto LABEL_20;
  }
}

void YAML::Emitter::EmitBeginMap(YAML::Emitter *this)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (**(_BYTE **)this)
  {
    v3 = *(_QWORD *)(v1 + 168);
    if (*(_QWORD *)(v1 + 160) == v3 || *(_DWORD *)(*(_QWORD *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 84) == 24)
        v4 = 6;
      else
        v4 = 5;
    }
    else
    {
      v4 = 5;
    }
    YAML::Emitter::PrepareNode(this, v4);
    YAML::EmitterState::StartedGroup(*(_QWORD *)this, 2);
  }
}

void YAML::Emitter::EmitEndMap(YAML::Emitter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char __src;

  v2 = *(_QWORD *)this;
  if (*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v3)
    {
      if (!*(_QWORD *)(v2 + 200))
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      goto LABEL_20;
    }
    v4 = *(_QWORD *)(v3 - 8);
    if (*(_QWORD *)(v4 + 16))
    {
      if (*(_DWORD *)(v4 + 4) != 1)
      {
LABEL_20:
        YAML::EmitterState::EndedGroup(v2, 2);
        return;
      }
    }
    else
    {
      *(_DWORD *)(v4 + 4) = 1;
    }
    if (*((_BYTE *)this + 64))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      v2 = *(_QWORD *)this;
    }
    v5 = *(_QWORD *)(v2 + 184);
    if (*((_QWORD *)this + 7) < v5)
    {
      do
      {
        __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      while (*((_QWORD *)this + 7) < v5);
      v2 = *(_QWORD *)this;
    }
    v6 = *(_QWORD *)(v2 + 168);
    if (*(_QWORD *)(v2 + 160) == v6)
      v7 = (_QWORD *)(v2 + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (!*v7)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "{", 1uLL);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "}", 1uLL);
    v2 = *(_QWORD *)this;
    goto LABEL_20;
  }
}

void YAML::Emitter::EmitKindTag(YAML::Emitter *this)
{
  void *v2[2];
  char v3;
  std::string v4;
  void *__p;
  char v6;
  __int128 v7;
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v2, "");
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  YAML::_Tag::_Tag(&v4, &v7, (__int128 *)v2, 1);
  if (v8 < 0)
    operator delete((void *)v7);
  YAML::Emitter::Write(this, (uint64_t)&v4);
  if (v6 < 0)
    operator delete(__p);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_22AF5D160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  siri::intelligence::TestParseError::~TestParseError(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Emitter::EmitNewline(YAML::Emitter *this)
{
  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 0);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    *(_BYTE *)(*(_QWORD *)this + 194) = 1;
  }
}

uint64_t *YAML::Emitter::SetLocalIndent(uint64_t *a1, int *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (v3 >= 2)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 56), v3, 0);
  return a1;
}

uint64_t *YAML::Emitter::SetLocalPrecision(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  if (v4 <= 9)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 96), v4, 0);
  v5 = a2[1];
  if (v5 <= 0x11)
    YAML::EmitterState::_Set<unsigned long>(*a1, (_QWORD *)(*a1 + 104), v5, 0);
  return a1;
}

void YAML::Emitter::PrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v2)
  {
    YAML::Emitter::PrepareTopNode(this, a2);
  }
  else
  {
    v3 = *(int **)(v2 - 8);
    v4 = *v3;
    v5 = v3[1] == 1;
    if (v3[1] == 1)
      v6 = 3;
    else
      v6 = 4;
    if (v5)
      v7 = 5;
    else
      v7 = 6;
    if (v4 != 1)
      v6 = v7;
    switch(v6)
    {
      case 3:
        YAML::Emitter::FlowSeqPrepareNode(this, a2);
        break;
      case 4:
        YAML::Emitter::BlockSeqPrepareNode(this, a2);
        break;
      case 5:
        YAML::Emitter::FlowMapPrepareNode(this, a2);
        break;
      case 6:
        YAML::Emitter::BlockMapPrepareNode(this, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t YAML::Emitter::CanEmitNewline(YAML::Emitter *this)
{
  return 1;
}

void YAML::Emitter::PrepareTopNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BOOL4 v6;
  uint64_t v7;

  if (a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v4)
      v5 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v5 = (_QWORD *)(*(_QWORD *)(v4 - 8) + 16);
    if (*v5 && *((_QWORD *)this + 7))
      YAML::Emitter::EmitBeginDoc(this);
    if (a2 <= 6)
    {
      if (((1 << a2) & 0x2E) != 0)
      {
        if (*(_BYTE *)(*(_QWORD *)this + 192))
          v6 = 1;
        else
          v6 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
        YAML::Emitter::SpaceOrIndentTo(this, v6, 0);
      }
      else if (((1 << a2) & 0x50) != 0)
      {
        v7 = *(_QWORD *)this;
        if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v7 + 193) || *(_BYTE *)(v7 + 194))
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
    }
  }
}

void YAML::Emitter::FlowSeqPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ",";
    else
      v8 = "[";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowSeqPrepareNode", "emitter.cpp", 336, "false");
    }
  }
}

void YAML::Emitter::BlockSeqPrepareNode(YAML::Emitter *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  char __src;

  v4 = *(_QWORD *)this;
  v6 = *(_QWORD *)(*(_QWORD *)this + 160);
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (v6 == v5)
  {
    v7 = 0;
    if (!a2)
      return;
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 8);
    if (!a2)
      return;
  }
  v8 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    if (v6 == v5)
      v9 = (_QWORD *)(v4 + 200);
    else
      v9 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
    if (*v9 || *((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v8)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "-", 1uLL);
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 5:
      if (*(_BYTE *)(*(_QWORD *)this + 192))
        v10 = 1;
      else
        v10 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
      YAML::Emitter::SpaceOrIndentTo(this, v10, v7 + v8);
      break;
    case 4:
      goto LABEL_24;
    case 6:
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(*(_QWORD *)this + 193) || *((_BYTE *)this + 64))
LABEL_24:
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      break;
    default:
      return;
  }
}

void YAML::Emitter::FlowMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  v6 = *(_QWORD *)(v4 + 160);
  v5 = *(_QWORD *)(v4 + 168);
  if (v6 == v5)
  {
    if ((*(_BYTE *)(v4 + 200) & 1) != 0)
    {
LABEL_11:
      YAML::Emitter::FlowMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v5 - 8);
    if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(v7 + 24))
      {
        YAML::Emitter::FlowMapPrepareLongKeyValue(this, a2);
        return;
      }
      goto LABEL_11;
    }
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    v6 = *(_QWORD *)(*(_QWORD *)this + 160);
    v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  }
  if (v6 == v5 || !*(_BYTE *)(*(_QWORD *)(v5 - 8) + 24))
    YAML::Emitter::FlowMapPrepareSimpleKey(this, a2);
  else
    YAML::Emitter::FlowMapPrepareLongKey(this, a2);
}

void YAML::Emitter::BlockMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v4 + 160) == v5)
  {
    if ((*(_BYTE *)(v4 + 200) & 1) != 0)
    {
LABEL_13:
      YAML::Emitter::BlockMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else
  {
    v6 = *(_QWORD *)(v5 - 8);
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    {
      if (*(_BYTE *)(v6 + 24))
      {
        YAML::Emitter::BlockMapPrepareLongKeyValue(this, a2);
        return;
      }
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    v4 = *(_QWORD *)this;
  }
  if ((a2 & 0xFFFFFFFD) == 4)
  {
    YAML::EmitterState::SetLongKey(v4);
    v4 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v4 + 168);
  if (*(_QWORD *)(v4 + 160) == v7 || !*(_BYTE *)(*(_QWORD *)(v7 - 8) + 24))
    YAML::Emitter::BlockMapPrepareSimpleKey(this, a2);
  else
    YAML::Emitter::BlockMapPrepareLongKey(this, a2);
}

void YAML::Emitter::SpaceOrIndentTo(YAML::Emitter *this, int a2, unint64_t a3)
{
  std::vector<char> *v6;
  unint64_t v7;
  BOOL v8;
  char __src;

  v6 = (std::vector<char> *)((char *)this + 8);
  if (*((_BYTE *)this + 64))
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v8 = a2 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    YAML::ostream_wrapper::write(v6, " ", 1uLL);
    v7 = *((_QWORD *)this + 7);
  }
  if (v7 < a3)
  {
    do
    {
      __src = 32;
      YAML::ostream_wrapper::write(v6, &__src, 1uLL);
    }
    while (*((_QWORD *)this + 7) < a3);
  }
}

void YAML::Emitter::FlowMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ", ?";
    else
      v8 = "{ ?";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 3uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKey", "emitter.cpp", 418, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    v6 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (*(_QWORD *)(*(_QWORD *)this + 160) == v6)
      v7 = (_QWORD *)(*(_QWORD *)this + 200);
    else
      v7 = (_QWORD *)(*(_QWORD *)(v6 - 8) + 16);
    if (*v7)
      v8 = ",";
    else
      v8 = "{";
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v9 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v9 + 193))
      {
        v10 = 1;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 168);
        if (*(_QWORD *)(v9 + 160) == v11)
          v12 = (_QWORD *)(v9 + 200);
        else
          v12 = (_QWORD *)(*(_QWORD *)(v11 - 8) + 16);
        v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKey", "emitter.cpp", 477, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v6 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v6 + 193))
      {
        v7 = 1;
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 168);
        if (*(_QWORD *)(v6 + 160) == v8)
          v9 = (_QWORD *)(v6 + 200);
        else
          v9 = (_QWORD *)(*(_QWORD *)(v8 - 8) + 16);
        v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKeyValue", "emitter.cpp", 446, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD *v9;
  char __src;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 168) - *(_QWORD *)(*(_QWORD *)this + 160) >= 0x10uLL)
    v5 = *(_QWORD *)(v4 + 184) - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 168) - 16) + 8);
  else
    v5 = 0;
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
  {
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v5)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      v6 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)this + 192) || *(_BYTE *)(v6 + 193))
      {
        v7 = 1;
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 168);
        if (*(_QWORD *)(v6 + 160) == v8)
          v9 = (_QWORD *)(v6 + 200);
        else
          v9 = (_QWORD *)(*(_QWORD *)(v8 - 8) + 16);
        v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKeyValue", "emitter.cpp", 505, "false");
    }
  }
}

void YAML::Emitter::BlockMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char __src;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
  {
    v6 = (_QWORD *)(v4 + 200);
    if (!a2)
      return;
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)(v5 - 8) + 16);
    if (!a2)
      return;
  }
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    if (*v6)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    if (*((_BYTE *)this + 64))
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    while (*((_QWORD *)this + 7) < v7)
    {
      __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "?", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
    YAML::Emitter::SpaceOrIndentTo(this, 1, v7 + 1);
}

void YAML::Emitter::BlockMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v10;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
  {
    v6 = (uint64_t *)(v4 + 200);
    if (!a2)
      return;
  }
  else
  {
    v6 = (uint64_t *)(*(_QWORD *)(v5 - 8) + 16);
    if (!a2)
      return;
  }
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193))
  {
    v8 = *v6;
    if (!*(_BYTE *)(v4 + 194) && v8 != 0)
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)this + 192))
      v10 = 1;
    else
      v10 = *(unsigned __int8 *)(*(_QWORD *)this + 193) != 0;
    YAML::Emitter::SpaceOrIndentTo(this, v10, v7);
  }
}

void YAML::Emitter::BlockMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  unint64_t v4;
  char __src;

  if (a2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 184);
    if (!*(_BYTE *)(*(_QWORD *)this + 192) && !*(_BYTE *)(*(_QWORD *)this + 193))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      while (*((_QWORD *)this + 7) < v4)
      {
        __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
    }
    if (a2 <= 6)
      YAML::Emitter::SpaceOrIndentTo(this, 1, v4 + 1);
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 168);
  if (*(_QWORD *)(*(_QWORD *)this + 160) == v5)
    v6 = 0;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 8);
  v7 = *(_QWORD *)(v4 + 184);
  if (!*(_BYTE *)(v4 + 192) && !*(_BYTE *)(v4 + 193) && !*(_BYTE *)(v4 + 194))
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v6 + v7);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
}

_QWORD *YAML::Emitter::PrepareIntegralStream(_QWORD *result, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*result + 52);
  switch(v3)
  {
    case 18:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"0", 1);
      v4 = 64;
      break;
    case 17:
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"0x", 2);
      v4 = 8;
      break;
    case 16:
      v4 = 2;
      break;
    default:
      __assert_rtn("PrepareIntegralStream", "emitter.cpp", 666, "false");
  }
  v5 = a2 + 16 + *(_QWORD *)(*(_QWORD *)(a2 + 16) - 24);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 8) & 0xFFFFFFB5 | v4;
  return result;
}

uint64_t **YAML::Emitter::StartedScalar(YAML::Emitter *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  YAML::EmitterState::StartedNode(*(_QWORD *)this);
  return YAML::SettingChanges::clear((uint64_t **)(v1 + 112));
}

uint64_t YAML::Emitter::Write(uint64_t a1, const void **a2)
{
  uint64_t v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *(_QWORD *)a1;
  if (**(_BYTE **)a1)
  {
    v6 = *(_DWORD *)(v3 + 32);
    v5 = *(_DWORD *)(v3 + 36);
    v8 = *(_QWORD *)(v3 + 160);
    v7 = *(_QWORD *)(v3 + 168);
    if (v8 == v7)
      v9 = 0;
    else
      v9 = *(_DWORD *)(*(_QWORD *)(v7 - 8) + 4);
    v10 = YAML::Utils::ComputeStringFormat((uint64_t)a2, v5, v9, v6 == 4);
    if (v10 == 3)
    {
      YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*(_QWORD *)a1, (_DWORD *)(*(_QWORD *)a1 + 88), 29, 0);
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::Utils::WriteLiteralString((std::vector<char> *)(a1 + 8), (uint64_t)a2, (char *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + *(_QWORD *)(*(_QWORD *)a1 + 184)));
    }
    else
    {
      v11 = v10;
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      switch(v11)
      {
        case 2:
          YAML::Utils::WriteDoubleQuotedString((std::vector<char> *)(a1 + 8), (uint64_t)a2, v6 == 4);
          break;
        case 1:
          YAML::Utils::WriteSingleQuotedString((std::vector<char> *)(a1 + 8), (uint64_t)a2);
          break;
        case 0:
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 8), a2);
          break;
      }
    }
    v12 = *(_QWORD *)a1;
    YAML::EmitterState::StartedNode(*(_QWORD *)a1);
    YAML::SettingChanges::clear((uint64_t **)(v12 + 112));
  }
  return a1;
}

uint64_t YAML::Emitter::GetFloatPrecision(YAML::Emitter *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 96);
}

uint64_t YAML::Emitter::GetDoublePrecision(YAML::Emitter *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 104);
}

const char *YAML::Emitter::ComputeFullBoolName(YAML::Emitter *this, int a2)
{
  uint64_t v2;
  int v3;
  const char *v4;
  const char *v5;
  int v6;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 44) == 15)
  {
    v3 = *(_DWORD *)(v2 + 48);
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(v2 + 40);
  v3 = *(_DWORD *)(v2 + 48);
  switch(v6)
  {
    case 10:
      switch(v3)
      {
        case 13:
          v4 = "Off";
          v5 = "On";
          break;
        case 12:
          v4 = "off";
          v5 = "on";
          break;
        case 11:
          v4 = "OFF";
          v5 = "ON";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 9:
      switch(v3)
      {
        case 13:
          v4 = "False";
          v5 = "True";
          break;
        case 12:
          v4 = "false";
          v5 = "true";
          break;
        case 11:
          v4 = "FALSE";
          v5 = "TRUE";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 8:
LABEL_3:
      switch(v3)
      {
        case 13:
          v4 = "No";
          v5 = "Yes";
          goto LABEL_22;
        case 12:
          v4 = "no";
          v5 = "yes";
          goto LABEL_22;
        case 11:
          v4 = "NO";
          v5 = "YES";
          goto LABEL_22;
      }
      goto LABEL_21;
    default:
LABEL_21:
      v4 = "n";
      v5 = "y";
      break;
  }
LABEL_22:
  if (a2)
    return v5;
  else
    return v4;
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, int a2)
{
  char *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    v4 = (char *)YAML::Emitter::ComputeFullBoolName(this, a2);
    if (*(_DWORD *)(*(_QWORD *)this + 44) == 15)
    {
      LOBYTE(__p[0]) = *v4;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const char *)__p, 1uLL);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v4);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const void **)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    v5 = *(_QWORD *)this;
    YAML::EmitterState::StartedNode(*(_QWORD *)this);
    YAML::SettingChanges::clear((uint64_t **)(v5 + 112));
  }
  return this;
}

void sub_22AF5E770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, YAML::ostream_wrapper *a2)
{
  uint64_t v4;

  if (**(_BYTE **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    YAML::Utils::WriteChar((std::vector<char> *)((char *)this + 8), a2);
    v4 = *(_QWORD *)this;
    YAML::EmitterState::StartedNode(*(_QWORD *)this);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return this;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  std::string __str;

  v3 = *a1;
  if (*(_BYTE *)*a1)
  {
    if (*(_BYTE *)(v3 + 192) || *(_BYTE *)(v3 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(_BYTE *)v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "*", 1uLL);
      v7 = *a1;
      if ((v6 & 1) != 0)
      {
        YAML::EmitterState::StartedNode(*a1);
        YAML::SettingChanges::clear((uint64_t **)(v7 + 112));
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(_BYTE *)v7 = 0;
      std::string::operator=((std::string *)(v7 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  uint64_t v3;
  char v5;
  uint64_t v6;
  std::string __str;

  v3 = *a1;
  if (*(_BYTE *)*a1)
  {
    if (*(_BYTE *)(v3 + 192))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(_BYTE *)v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 1u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "&", 1uLL);
      v6 = *a1;
      if ((v5 & 1) != 0)
      {
        *(_BYTE *)(v6 + 192) = 1;
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(_BYTE *)v6 = 0;
      std::string::operator=((std::string *)(v6 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char __src;

  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 0);
    v4 = *a1;
    if (a1[7])
    {
      v5 = *(_QWORD *)(v4 + 64);
      if (v5)
      {
        do
        {
          __src = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), &__src, 1uLL);
          --v5;
        }
        while (v5);
        v4 = *a1;
      }
    }
    YAML::Utils::WriteComment((uint64_t)(a1 + 1), a2, *(_QWORD *)(v4 + 72));
    *(_BYTE *)(*a1 + 194) = 1;
  }
  return a1;
}

{
  uint64_t v4;
  void *v6[2];
  char v7;
  std::string v8;
  void *__p;
  char v10;
  __int128 v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v6, "binary");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  YAML::_Tag::_Tag(&v8, &v11, (__int128 *)v6, 2);
  if (v12 < 0)
    operator delete((void *)v11);
  YAML::Emitter::Write((YAML::Emitter *)a1, (uint64_t)&v8);
  if (v10 < 0)
    operator delete(__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::Utils::WriteBinary((std::vector<char> *)(a1 + 1), a2);
    v4 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return a1;
}

void sub_22AF5E8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22AF5E9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *a1, uint64_t a2)
{
  _BYTE *v3;
  int v5;
  std::vector<char> *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  std::string __str;

  v3 = *(_BYTE **)a1;
  if (!**(_BYTE **)a1)
    return a1;
  if (v3[193])
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
    *v3 = 0;
    std::string::operator=((std::string *)(v3 + 8), &__str);
    goto LABEL_12;
  }
  YAML::Emitter::PrepareNode(a1, 1u);
  v5 = *(_DWORD *)(a2 + 48);
  v6 = (std::vector<char> *)((char *)a1 + 8);
  if (v5 == 1)
  {
    v7 = (uint64_t *)(a2 + 24);
    v8 = 0;
  }
  else
  {
    if (v5)
    {
      if ((YAML::Utils::WriteTagWithPrefix(v6, (uint64_t *)a2, (uint64_t *)(a2 + 24)) & 1) != 0)
        goto LABEL_9;
      goto LABEL_11;
    }
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
  }
  if ((YAML::Utils::WriteTag(v6, v7, v8) & 1) != 0)
  {
LABEL_9:
    *(_BYTE *)(*(_QWORD *)a1 + 193) = 1;
    return a1;
  }
LABEL_11:
  v9 = *(_QWORD *)a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
  *(_BYTE *)v9 = 0;
  std::string::operator=((std::string *)(v9 + 8), &__str);
LABEL_12:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_22AF5EAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::Write(uint64_t *a1)
{
  uint64_t v2;

  if (*(_BYTE *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "~", 1uLL);
    v2 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v2 + 112));
  }
  return a1;
}

void sub_22AF5ED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  siri::intelligence::TestParseError::~TestParseError(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *YAML::_Tag::_Tag(std::string *this, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_22AF5EDD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

YAML::EmitterState *std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](YAML::EmitterState **a1, YAML::EmitterState *a2)
{
  YAML::EmitterState *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    YAML::EmitterState::~EmitterState(result);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

uint64_t siri::intelligence::Saver::SaveFile(siri::intelligence **a1, std::string *a2, int a3)
{
  const char *v4;
  uint64_t *v5;
  char *v7;
  std::string *v8;
  uint64_t *v9;

  if (a3 == 2)
  {
    if (siri::intelligence::YamlIO::ToFile(*a1, a2))
      return 1;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v9 = (uint64_t *)v8;
    v7 = "Failed to write to YAML file: %s";
  }
  else
  {
    if (a3 == 1)
    {
      if ((siri::intelligence::ProtobufIO::ToFile(*a1, a2) & 1) == 0)
      {
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = (uint64_t *)a2;
        else
          v5 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to write to binary file: %s", v4, v5);
        return 0;
      }
      return 1;
    }
    v7 = "Unsupported destination format specified during conversion";
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)v7, (const char *)a2, v9);
  return 0;
}

uint64_t siri::intelligence::Saver::SaveFile(siri::intelligence **a1, std::string *a2)
{
  siri::intelligence *v3;
  unint64_t *v4;
  unint64_t v5;
  int FormatForFilename;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  siri::intelligence *v11[2];

  v3 = a1[1];
  v11[0] = *a1;
  v11[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)((char *)v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  FormatForFilename = siri::intelligence::GetFormatForFilename((uint64_t)a2);
  v7 = siri::intelligence::Saver::SaveFile(v11, a2, FormatForFilename);
  if (v3)
  {
    v8 = (unint64_t *)((char *)v3 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      (*(void (**)(siri::intelligence *))(*(_QWORD *)v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
  return v7;
}

void sub_22AF5EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double siri::intelligence::ConditionEntry::ConditionEntry(siri::intelligence::ConditionEntry *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

siri::intelligence::ConditionEntry *siri::intelligence::ConditionEntry::ConditionEntry(siri::intelligence::ConditionEntry *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  std::string *v4;
  _QWORD *v5;
  int v6;
  int v7;
  const protobuf::Intelligence_Condition_ConditionEntry *v8;
  unint64_t v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  const protobuf::Intelligence_Condition_ConditionEntry *v20;
  unint64_t v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  std::string *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  const protobuf::Intelligence_Condition_ConditionEntry *v41;
  std::string *v42;
  const protobuf::Intelligence_Condition_ConditionEntry *v43;
  unint64_t v44;
  std::string::size_type v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char *v54;
  char *v55;
  __int128 v56;
  std::string __p;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v55 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (std::string *)((char *)this + 24);
  v54 = (char *)this + 48;
  v5 = (_QWORD *)((char *)this + 64);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v6 = *((_DWORD *)a2 + 8);
  if (v6)
  {
    *(_DWORD *)this = 2;
    if (v6 >= 1)
    {
      v7 = 0;
      do
      {
        v8 = (const protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)a2 + 24, v7);
        siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v8);
        v9 = *((_QWORD *)this + 9);
        if (v9 >= *((_QWORD *)this + 10))
        {
          v14 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v5, (const siri::intelligence::ConditionEntry *)&__p);
        }
        else
        {
          *(_DWORD *)v9 = __p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v9 + 8) = __p.__r_.__value_.__l.__size_;
          v10 = __p.__r_.__value_.__r.__words[2];
          *(_QWORD *)(v9 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          if (v10)
          {
            v11 = (unint64_t *)(v10 + 8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }
          if (SHIBYTE(v59) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v9 + 24), (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
          }
          else
          {
            v13 = v58;
            *(_QWORD *)(v9 + 40) = v59;
            *(_OWORD *)(v9 + 24) = v13;
          }
          *(_QWORD *)(v9 + 48) = v60;
          v15 = v61;
          *(_QWORD *)(v9 + 56) = v61;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          *(_QWORD *)(v9 + 64) = 0;
          *(_QWORD *)(v9 + 72) = 0;
          *(_QWORD *)(v9 + 80) = 0;
          std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((_QWORD *)(v9 + 64), v62, v63, 0x2E8BA2E8BA2E8BA3 * ((v63 - v62) >> 3));
          v14 = v9 + 88;
          *((_QWORD *)this + 9) = v9 + 88;
        }
        *((_QWORD *)this + 9) = v14;
        siri::intelligence::ConditionEntry::~ConditionEntry((void **)&__p.__r_.__value_.__l.__data_);
        ++v7;
      }
      while (v7 < *((_DWORD *)a2 + 8));
    }
  }
  else
  {
    v18 = *((_DWORD *)a2 + 14);
    if (v18)
    {
      *(_DWORD *)this = 3;
      if (v18 >= 1)
      {
        v19 = 0;
        do
        {
          v20 = (const protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)a2 + 48, v19);
          siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v20);
          v21 = *((_QWORD *)this + 9);
          if (v21 >= *((_QWORD *)this + 10))
          {
            v26 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v5, (const siri::intelligence::ConditionEntry *)&__p);
          }
          else
          {
            *(_DWORD *)v21 = __p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v21 + 8) = __p.__r_.__value_.__l.__size_;
            v22 = __p.__r_.__value_.__r.__words[2];
            *(_QWORD *)(v21 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            if (v22)
            {
              v23 = (unint64_t *)(v22 + 8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            if (SHIBYTE(v59) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(v21 + 24), (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
            }
            else
            {
              v25 = v58;
              *(_QWORD *)(v21 + 40) = v59;
              *(_OWORD *)(v21 + 24) = v25;
            }
            *(_QWORD *)(v21 + 48) = v60;
            v27 = v61;
            *(_QWORD *)(v21 + 56) = v61;
            if (v27)
            {
              v28 = (unint64_t *)(v27 + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
            *(_QWORD *)(v21 + 64) = 0;
            *(_QWORD *)(v21 + 72) = 0;
            *(_QWORD *)(v21 + 80) = 0;
            std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((_QWORD *)(v21 + 64), v62, v63, 0x2E8BA2E8BA2E8BA3 * ((v63 - v62) >> 3));
            v26 = v21 + 88;
            *((_QWORD *)this + 9) = v21 + 88;
          }
          *((_QWORD *)this + 9) = v26;
          siri::intelligence::ConditionEntry::~ConditionEntry((void **)&__p.__r_.__value_.__l.__data_);
          ++v19;
        }
        while (v19 < *((_DWORD *)a2 + 14));
      }
    }
    else
    {
      v30 = *((_DWORD *)a2 + 4);
      if ((v30 & 8) != 0)
      {
        v41 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)a2 + 12);
        if (!v41)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
          v42 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || not_child_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v64, (const char **)&v42->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          v41 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((_QWORD *)a2 + 12);
        }
        *(_DWORD *)this = 4;
        if (v41)
          v43 = v41;
        else
          v43 = (const protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v43);
        v44 = *((_QWORD *)this + 9);
        if (v44 >= *((_QWORD *)this + 10))
        {
          v49 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v5, (const siri::intelligence::ConditionEntry *)&__p);
        }
        else
        {
          *(_DWORD *)v44 = __p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v44 + 8) = __p.__r_.__value_.__l.__size_;
          v45 = __p.__r_.__value_.__r.__words[2];
          *(_QWORD *)(v44 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          if (v45)
          {
            v46 = (unint64_t *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          if (SHIBYTE(v59) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v44 + 24), (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
          }
          else
          {
            v48 = v58;
            *(_QWORD *)(v44 + 40) = v59;
            *(_OWORD *)(v44 + 24) = v48;
          }
          *(_QWORD *)(v44 + 48) = v60;
          v50 = v61;
          *(_QWORD *)(v44 + 56) = v61;
          if (v50)
          {
            v51 = (unint64_t *)(v50 + 8);
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
          }
          *(_QWORD *)(v44 + 64) = 0;
          *(_QWORD *)(v44 + 72) = 0;
          *(_QWORD *)(v44 + 80) = 0;
          std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((_QWORD *)(v44 + 64), v62, v63, 0x2E8BA2E8BA2E8BA3 * ((v63 - v62) >> 3));
          v49 = v44 + 88;
          *((_QWORD *)this + 9) = v44 + 88;
        }
        *((_QWORD *)this + 9) = v49;
        siri::intelligence::ConditionEntry::~ConditionEntry((void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_DWORD *)this = 1;
        if ((v30 & 0x10) != 0)
        {
          if (!*((_QWORD *)a2 + 13))
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
            v31 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || left_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v64, (const char **)&v31->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          if (*((_QWORD *)a2 + 13))
            v32 = (void *)*((_QWORD *)a2 + 13);
          else
            v32 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          siri::intelligence::Variable::FromProtobuf(&__p, (uint64_t)v32, (uint64_t *)&v56);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v55, &v56);
          v33 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::operator=(v4, *((const std::string **)a2 + 10));
        if ((*((_DWORD *)a2 + 4) & 0x20) != 0)
        {
          if (!*((_QWORD *)a2 + 14))
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
            v36 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || right_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v64, (const char **)&v36->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          if (*((_QWORD *)a2 + 14))
            v37 = (void *)*((_QWORD *)a2 + 14);
          else
            v37 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          siri::intelligence::Variable::FromProtobuf(&__p, (uint64_t)v37, (uint64_t *)&v56);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)v54, &v56);
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return this;
}

void sub_22AF5F5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v21);
  *(_QWORD *)(v18 + 72) = v19;
  siri::intelligence::ConditionEntry::~ConditionEntry(&__p);
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a9);
  if (*(char *)(v18 + 47) < 0)
    operator delete(*v20);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::ConditionEntry::GetType(siri::intelligence::ConditionEntry *this)
{
  return *(unsigned int *)this;
}

_DWORD *siri::intelligence::ConditionEntry::SetType(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t siri::intelligence::ConditionEntry::GetLeft@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::intelligence::ConditionEntry::SetLeft(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), a2);
}

void siri::intelligence::ConditionEntry::GetOperator(siri::intelligence::ConditionEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::intelligence::ConditionEntry::SetOperator(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t siri::intelligence::ConditionEntry::GetRight@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 56);
  *a2 = *(_QWORD *)(this + 48);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *siri::intelligence::ConditionEntry::SetRight(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), a2);
}

_QWORD *siri::intelligence::ConditionEntry::GetChildren@<X0>(siri::intelligence::ConditionEntry *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, *((_QWORD *)this + 8), *((_QWORD *)this + 9), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3));
}

void siri::intelligence::ConditionEntry::SetChildren(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 64);
  if (v2 != a2)
    std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(v2, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
}

void siri::intelligence::ConditionEntry::Validate(const void **a1, uint64_t a2, siri::intelligence::ValidationResults *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  size_t v9;
  std::string *v10;
  google::protobuf::internal *v11;
  const void *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int LineNumFromUnknownField;
  std::string *v16;
  size_t v17;
  std::string *p_p;
  const void *v19;
  uint64_t v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  std::string *v28;
  std::string *v29;
  size_t v30;
  std::string *v31;
  const void *v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  size_t v42;
  std::string *v43;
  google::protobuf::internal *v44;
  const void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  std::string *v49;
  std::string *v50;
  uint64_t i;
  uint64_t v52;
  void *v53[2];
  char v54;
  std::string __p;
  std::string v56;
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[3];
  _QWORD v63[3];
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  _QWORD v67[5];

  v67[4] = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_10);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_10))
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "set");
    std::string::basic_string[abi:ne180100]<0>(v57, "true");
    std::string::basic_string[abi:ne180100]<0>(v58, "unset");
    std::string::basic_string[abi:ne180100]<0>(v59, "false");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F463E0, (const void **)&v56.__r_.__value_.__l.__data_, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v59[i + 2]) < 0)
        operator delete((void *)v59[i]);
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F463E0, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_10);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_253F463D8);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_253F463D8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "==");
    std::string::basic_string[abi:ne180100]<0>(v57, "eq");
    std::string::basic_string[abi:ne180100]<0>(v58, "!=");
    std::string::basic_string[abi:ne180100]<0>(v59, "ne");
    std::string::basic_string[abi:ne180100]<0>(v60, "<");
    std::string::basic_string[abi:ne180100]<0>(v61, "lt");
    std::string::basic_string[abi:ne180100]<0>(v62, "<=");
    std::string::basic_string[abi:ne180100]<0>(v63, "le");
    std::string::basic_string[abi:ne180100]<0>(v64, ">");
    std::string::basic_string[abi:ne180100]<0>(v65, "gt");
    std::string::basic_string[abi:ne180100]<0>(v66, ">=");
    std::string::basic_string[abi:ne180100]<0>(v67, "ge");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_253F463F8, (const void **)&v56.__r_.__value_.__l.__data_, 12);
    v52 = 288;
    do
    {
      if (v56.__r_.__value_.__s.__data_[v52 - 1] < 0)
        operator delete(*(void **)((char *)&__p.__r_.__value_.__l.__data_ + v52));
      v52 -= 24;
    }
    while (v52);
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_253F463F8, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F463D8);
  }
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 0x20) == 0)
    goto LABEL_25;
  if (*(_QWORD *)(a2 + 112))
  {
    if ((v8 & 2) == 0)
      goto LABEL_6;
LABEL_25:
    if ((v8 & 2) == 0)
      goto LABEL_82;
    goto LABEL_26;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v56, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
  v16 = google::protobuf::internal::LogMessage::operator<<(&v56, "CHECK failed: !value || right_ != nullptr: ");
  google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v16->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v56.__r_.__value_.__l.__data_);
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 2) != 0)
    goto LABEL_25;
LABEL_6:
  if (*((char *)a1 + 23) >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = (size_t)a1[1];
  v10 = &v56;
  v11 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v56, v9 + 46);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*((char *)a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = *a1;
    v11 = (google::protobuf::internal *)memmove(v10, v12, v9);
  }
  strcpy((char *)v10 + v9, "does not define an operator for the expression");
  v13 = *(_QWORD *)(a2 + 8);
  if ((v13 & 1) != 0)
  {
    v14 = (unsigned __int8 *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    google::protobuf::internal::InitProtobufDefaults(v11);
    v14 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v14, (uint64_t)&__p, -1);
  siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_OPERATOR, (__int128 *)&v56, LineNumFromUnknownField);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 2) != 0)
  {
LABEL_26:
    if ((v8 & 0x20) != 0)
    {
      if (!*(_QWORD *)(a2 + 112))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v56, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
        v28 = google::protobuf::internal::LogMessage::operator<<(&v56, "CHECK failed: !value || right_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v28->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v56.__r_.__value_.__l.__data_);
      }
    }
    else if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F463E0, *(const void ***)(a2 + 80)) == &unk_253F463E8)
    {
      if (*((char *)a1 + 23) >= 0)
        v17 = *((unsigned __int8 *)a1 + 23);
      else
        v17 = (size_t)a1[1];
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v17 + 39);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v17)
      {
        if (*((char *)a1 + 23) >= 0)
          v19 = a1;
        else
          v19 = *a1;
        memmove(p_p, v19, v17);
      }
      strcpy((char *)p_p + v17, "defines an unsupported unary operator: ");
      v20 = *(_QWORD *)(a2 + 80);
      v21 = *(char *)(v20 + 23);
      if (v21 >= 0)
        v22 = *(const std::string::value_type **)(a2 + 80);
      else
        v22 = *(const std::string::value_type **)v20;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v20 + 23);
      else
        v23 = *(_QWORD *)(v20 + 8);
      v24 = std::string::append(&__p, v22, v23);
      v56 = *v24;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v25 = *(_QWORD *)(a2 + 8);
      if ((v25 & 1) != 0)
      {
        v26 = (unsigned __int8 *)(v25 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v24);
        v26 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      v27 = siri::intelligence::GetLineNumFromUnknownField(v26, (uint64_t)v53, -1);
      siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_OPERATOR, (__int128 *)&v56, v27);
      if (v54 < 0)
        operator delete(v53[0]);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((*(_DWORD *)(a2 + 16) & 0x20) != 0)
    {
      if (!*(_QWORD *)(a2 + 112))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v56, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
        v29 = google::protobuf::internal::LogMessage::operator<<(&v56, "CHECK failed: !value || right_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v29->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v56.__r_.__value_.__l.__data_);
      }
      if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_253F463F8, *(const void ***)(a2 + 80)) == &unk_253F46400)
      {
        if (*((char *)a1 + 23) >= 0)
          v30 = *((unsigned __int8 *)a1 + 23);
        else
          v30 = (size_t)a1[1];
        v31 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v30)
        {
          if (*((char *)a1 + 23) >= 0)
            v32 = a1;
          else
            v32 = *a1;
          memmove(v31, v32, v30);
        }
        strcpy((char *)v31 + v30, "defines an unsupported binary operator: ");
        v33 = *(_QWORD *)(a2 + 80);
        v34 = *(char *)(v33 + 23);
        if (v34 >= 0)
          v35 = *(const std::string::value_type **)(a2 + 80);
        else
          v35 = *(const std::string::value_type **)v33;
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(v33 + 23);
        else
          v36 = *(_QWORD *)(v33 + 8);
        v37 = std::string::append(&__p, v35, v36);
        v56 = *v37;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v38 = *(_QWORD *)(a2 + 8);
        if ((v38 & 1) != 0)
        {
          v39 = (unsigned __int8 *)(v38 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v37);
          v39 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v53, "");
        v40 = siri::intelligence::GetLineNumFromUnknownField(v39, (uint64_t)v53, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_OPERATOR, (__int128 *)&v56, v40);
        if (v54 < 0)
          operator delete(v53[0]);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_82:
  v41 = *(_DWORD *)(a2 + 16);
  if ((v41 & 0x10) != 0)
  {
    if (*(_QWORD *)(a2 + 104))
      return;
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v56, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
    v49 = google::protobuf::internal::LogMessage::operator<<(&v56, "CHECK failed: !value || left_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v49->__r_.__value_.__l.__data_);
    goto LABEL_103;
  }
  if (*(_DWORD *)(a2 + 32) | *(_DWORD *)(a2 + 56))
    return;
  if ((v41 & 8) != 0)
  {
    if (*(_QWORD *)(a2 + 96))
      return;
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v56, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
    v50 = google::protobuf::internal::LogMessage::operator<<(&v56, "CHECK failed: !value || not_child_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v50->__r_.__value_.__l.__data_);
LABEL_103:
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v56.__r_.__value_.__l.__data_);
    return;
  }
  if (*((char *)a1 + 23) >= 0)
    v42 = *((unsigned __int8 *)a1 + 23);
  else
    v42 = (size_t)a1[1];
  v43 = &v56;
  v44 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v56, v42 + 23);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if (v42)
  {
    if (*((char *)a1 + 23) >= 0)
      v45 = a1;
    else
      v45 = *a1;
    v44 = (google::protobuf::internal *)memmove(v43, v45, v42);
  }
  strcpy((char *)v43 + v42, "has an empty expression");
  v46 = *(_QWORD *)(a2 + 8);
  if ((v46 & 1) != 0)
  {
    v47 = (unsigned __int8 *)(v46 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    google::protobuf::internal::InitProtobufDefaults(v44);
    v47 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v48 = siri::intelligence::GetLineNumFromUnknownField(v47, (uint64_t)&__p, -1);
  siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_EMPTY_EXPR, (__int128 *)&v56, v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_22AF600DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v28;

  v28 = 288;
  while (1)
  {
    if (*(char *)(v26 + v28 - 1) < 0)
      operator delete(*(void **)(v26 + v28 - 24));
    v28 -= 24;
    if (!v28)
    {
      __cxa_guard_abort(&qword_253F463D8);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::intelligence::ResolvedCondition::ResolvedCondition(uint64_t a1, const std::string *a2, uint64_t a3, std::string *a4)
{
  std::string *v7;
  const char *v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  std::string *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  std::string::size_type v41;
  char v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  std::string __p;
  __int128 v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  std::string v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  int64_t v68;
  void **v69;
  std::__shared_weak_count *v70;

  v7 = (std::string *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  v57 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  std::string::operator=((std::string *)a1, a2);
  v8 = "OR";
  switch(*(_DWORD *)a3)
  {
    case 1:
      MEMORY[0x22E2E99E4](v7, "");
      v9 = *(void ***)(a3 + 8);
      v10 = *(std::__shared_weak_count **)(a3 + 16);
      v69 = v9;
      v70 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (v9)
      {
        (*((void (**)(std::string *__return_ptr))*v9 + 8))(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(v7, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (*(char *)(a3 + 47) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
        else
          __p = *(std::string *)(a3 + 24);
        v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = __p.__r_.__value_.__l.__size_;
        if (v41)
        {
          std::operator+<char>();
          if (v68 >= 0)
            v43 = (const std::string::value_type *)&v67;
          else
            v43 = (const std::string::value_type *)v67;
          if (v68 >= 0)
            v44 = HIBYTE(v68);
          else
            v44 = *((_QWORD *)&v67 + 1);
          std::string::append(v7, v43, v44);
          if (SHIBYTE(v68) < 0)
            operator delete((void *)v67);
          v45 = *(_QWORD *)(a3 + 48);
          v46 = *(std::__shared_weak_count **)(a3 + 56);
          v65 = v45;
          v66 = v46;
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          if (v45)
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v45 + 64))(&v64);
            v49 = std::string::insert(&v64, 0, " ");
            v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v68 = v49->__r_.__value_.__r.__words[2];
            v67 = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            if (v68 >= 0)
              v51 = (const std::string::value_type *)&v67;
            else
              v51 = (const std::string::value_type *)v67;
            if (v68 >= 0)
              v52 = HIBYTE(v68);
            else
              v52 = *((_QWORD *)&v67 + 1);
            std::string::append(v7, v51, v52);
            if (SHIBYTE(v68) < 0)
              operator delete((void *)v67);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v46)
          {
            v53 = (unint64_t *)&v46->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v42 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = v70;
      }
      if (v10)
      {
        v55 = (unint64_t *)&v10->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      goto LABEL_20;
    case 2:
      v8 = "AND";
      goto LABEL_19;
    case 3:
      goto LABEL_19;
    case 4:
      v8 = "NOT";
      goto LABEL_19;
    default:
      v8 = "<unknown>";
LABEL_19:
      MEMORY[0x22E2E99E4](v7, v8);
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      *(_BYTE *)(a1 + 48) = siri::intelligence::ConditionEntry::Evaluate(a3, a4, (uint64_t *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v67 = 0uLL;
      v68 = 0;
      std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(&v67, *(_QWORD *)(a3 + 64), *(_QWORD *)(a3 + 72), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 3));
      v16 = *((_QWORD *)&v67 + 1);
      v15 = v67;
      if ((_QWORD)v67 == *((_QWORD *)&v67 + 1))
        goto LABEL_49;
      break;
  }
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&v64, "");
    siri::intelligence::ResolvedCondition::ResolvedCondition(&__p, &v64, v15, a4);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    if (v17 < v18)
    {
      v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v17 = v19;
      memset(&__p, 0, sizeof(__p));
      v20 = v60;
      *(_OWORD *)(v17 + 24) = v59;
      *(_QWORD *)(v17 + 40) = v20;
      v60 = 0;
      v59 = 0uLL;
      *(_BYTE *)(v17 + 48) = v61;
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      *(_OWORD *)(v17 + 56) = v62;
      *(_QWORD *)(v17 + 72) = v63;
      v62 = 0uLL;
      v63 = 0;
      v21 = (char *)(v17 + 80);
      goto LABEL_39;
    }
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - *v57) >> 4);
    v23 = v22 + 1;
    if (v22 + 1 > 0x333333333333333)
      std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - *v57) >> 4);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0x199999999999999)
      v25 = 0x333333333333333;
    else
      v25 = v23;
    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>(a1 + 72, v25);
    v28 = &v26[80 * v22];
    v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v28 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v28 = v29;
    memset(&__p, 0, sizeof(__p));
    v30 = v59;
    *((_QWORD *)v28 + 5) = v60;
    *(_OWORD *)(v28 + 24) = v30;
    v60 = 0;
    v59 = 0uLL;
    v28[48] = v61;
    *((_QWORD *)v28 + 8) = 0;
    *((_QWORD *)v28 + 9) = 0;
    *((_QWORD *)v28 + 7) = 0;
    *(_OWORD *)(v28 + 56) = v62;
    *((_QWORD *)v28 + 9) = v63;
    v62 = 0uLL;
    v63 = 0;
    v31 = *(char **)(a1 + 56);
    v32 = *(char **)(a1 + 64);
    if (v32 == v31)
    {
      v21 = v28 + 80;
      *(_QWORD *)(a1 + 56) = v28;
      *(_QWORD *)(a1 + 64) = v28 + 80;
      *(_QWORD *)(a1 + 72) = &v26[80 * v27];
      if (v32)
        goto LABEL_38;
    }
    else
    {
      v33 = a4;
      v34 = 0;
      do
      {
        v35 = &v28[v34];
        v36 = &v32[v34];
        v37 = *(_OWORD *)&v32[v34 - 80];
        *((_QWORD *)v35 - 8) = *(_QWORD *)&v32[v34 - 64];
        *((_OWORD *)v35 - 5) = v37;
        *((_QWORD *)v36 - 9) = 0;
        *((_QWORD *)v36 - 8) = 0;
        *((_QWORD *)v36 - 10) = 0;
        v38 = *(_OWORD *)&v32[v34 - 56];
        *((_QWORD *)v35 - 5) = *(_QWORD *)&v32[v34 - 40];
        *(_OWORD *)(v35 - 56) = v38;
        *((_QWORD *)v36 - 6) = 0;
        *((_QWORD *)v36 - 5) = 0;
        *((_QWORD *)v36 - 7) = 0;
        *(v35 - 32) = v32[v34 - 32];
        *((_QWORD *)v35 - 2) = 0;
        *((_QWORD *)v35 - 1) = 0;
        *((_QWORD *)v35 - 3) = 0;
        *(_OWORD *)(v35 - 24) = *(_OWORD *)&v32[v34 - 24];
        *((_QWORD *)v35 - 1) = *(_QWORD *)&v32[v34 - 8];
        *((_QWORD *)v36 - 3) = 0;
        *((_QWORD *)v36 - 2) = 0;
        *((_QWORD *)v36 - 1) = 0;
        v34 -= 80;
      }
      while (&v32[v34] != v31);
      v32 = *(char **)(a1 + 56);
      v39 = *(_QWORD *)(a1 + 64);
      v21 = v28 + 80;
      *(_QWORD *)(a1 + 56) = &v28[v34];
      *(_QWORD *)(a1 + 64) = v28 + 80;
      *(_QWORD *)(a1 + 72) = &v26[80 * v27];
      while ((char *)v39 != v32)
      {
        v39 -= 80;
        std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(v39);
      }
      a4 = v33;
      if (v32)
LABEL_38:
        operator delete(v32);
    }
LABEL_39:
    *(_QWORD *)(a1 + 64) = v21;
    v69 = (void **)&v62;
    std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v69);
    if (SHIBYTE(v60) < 0)
      operator delete((void *)v59);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    v15 += 88;
  }
  while (v15 != v16);
LABEL_49:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_22AF608AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v34 - 104);
  a13 = a12;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v33 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::ConditionEntry::Evaluate(uint64_t a1, std::string *a2, uint64_t *a3)
{
  std::string *v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  char v25;
  std::string::size_type size;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  uint64_t v36;
  unsigned __int16 **v37;
  size_t v38;
  size_t v39;
  size_t v40;
  std::string *v41;
  size_t v42;
  char *v43;
  size_t v44;
  std::string *v45;
  char *v46;
  size_t v47;
  std::string *v48;
  double *v49;
  unint64_t *v50;
  unint64_t v51;
  double v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  double *v69;
  unint64_t *v70;
  unint64_t v71;
  double v72;
  unint64_t v73;
  int v74;
  int v75;
  _WORD *v76;
  BOOL v77;
  _BOOL4 v78;
  int v79;
  _WORD *v80;
  _BOOL4 v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  char *lpsrc;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  _QWORD v95[2];
  std::string v96;
  std::string v97;
  std::string v98;

  v4 = a2;
  v6 = 0;
  while (*(_DWORD *)a1 == 4)
  {
    if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 72))
    {
LABEL_16:
      v7 = 0;
      return (v6 ^ v7) & 1;
    }
    v6 ^= 1u;
    a1 = *(_QWORD *)(a1 + 64);
  }
  v7 = 1;
  switch(*(_DWORD *)a1)
  {
    case 0:
      return (v6 ^ v7) & 1;
    case 1:
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v8 + 88))(&v93, v8, a2);
      }
      else
      {
        v93 = 0;
        v94 = 0;
      }
      v14 = *(_QWORD *)(a1 + 48);
      if (v14)
      {
        (*(void (**)(char **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v14 + 88))(&v91, v14, v4);
      }
      else
      {
        v91 = 0;
        v92 = 0;
      }
      v16 = v93;
      v15 = v94;
      v90 = v94;
      if (v94)
      {
        p_shared_owners = (unint64_t *)&v94->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      v20 = v91;
      v19 = v92;
      lpsrc = v91;
      v89 = v92;
      if (v92)
      {
        v21 = (unint64_t *)&v92->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      if (!v16)
      {
        if (*((char *)a3 + 23) >= 0)
          v23 = a3;
        else
          v23 = (uint64_t *)*a3;
        if (!v20)
        {
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Condition '%s' has no left operand", (const char *)a2, v23);
          v7 = 1;
          goto LABEL_125;
        }
        v24 = "Condition expression '%s' has right operand but no left operand";
        goto LABEL_70;
      }
      if (!v20)
        goto LABEL_73;
      if (*(char *)(v16 + 55) < 0)
        std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v16 + 32), *(_QWORD *)(v16 + 40));
      else
        v98 = *(std::string *)(v16 + 32);
      if (v20[55] < 0)
        std::string::__init_copy_ctor_external(&v97, *((const std::string::value_type **)v20 + 4), *((_QWORD *)v20 + 5));
      else
        v97 = *(std::string *)(v20 + 32);
      v25 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      else
        size = v98.__r_.__value_.__l.__size_;
      v27 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      v28 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = v97.__r_.__value_.__l.__size_;
      if (size == v27)
      {
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          a2 = &v97;
        else
          a2 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        {
          v34 = memcmp(v98.__r_.__value_.__l.__data_, a2, v98.__r_.__value_.__l.__size_) != 0;
        }
        else if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
        {
          v29 = HIBYTE(v98.__r_.__value_.__r.__words[2]) - 1;
          v30 = &v98;
          do
          {
            v32 = v30->__r_.__value_.__s.__data_[0];
            v30 = (std::string *)((char *)v30 + 1);
            v31 = v32;
            v33 = a2->__r_.__value_.__s.__data_[0];
            a2 = (std::string *)((char *)a2 + 1);
            v34 = v31 != v33;
          }
          while (v31 == v33 && v29-- != 0);
        }
        else
        {
          v34 = 0;
        }
      }
      else
      {
        v34 = 1;
      }
      if ((v28 & 0x80000000) == 0)
      {
        if ((v25 & 0x80) == 0)
          goto LABEL_65;
LABEL_72:
        operator delete(v98.__r_.__value_.__l.__data_);
        if (v34)
          goto LABEL_66;
        goto LABEL_73;
      }
      operator delete(v97.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_72;
LABEL_65:
      if (v34)
      {
LABEL_66:
        if (*((char *)a3 + 23) >= 0)
          v23 = a3;
        else
          v23 = (uint64_t *)*a3;
        v24 = "Variable type mismatch in condition '%s'";
LABEL_70:
        siri::intelligence::Log::Error((siri::intelligence::Log *)v24, (const char *)a2, v23);
        v7 = 0;
        goto LABEL_125;
      }
LABEL_73:
      v36 = *(unsigned __int8 *)(a1 + 47);
      if ((v36 & 0x80u) != 0)
        v36 = *(_QWORD *)(a1 + 32);
      if (v36)
      {
        if (*(char *)(v16 + 55) < 0)
          std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)(v16 + 32), *(_QWORD *)(v16 + 40));
        else
          v98 = *(std::string *)(v16 + 32);
        v37 = (unsigned __int16 **)(a1 + 24);
        v38 = strlen(siri::intelligence::TYPE_NUMBER[0]);
        v39 = v38;
        v40 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        {
          v42 = v98.__r_.__value_.__l.__size_;
          if (v38 != v98.__r_.__value_.__l.__size_)
          {
            v43 = siri::intelligence::TYPE_BOOLEAN[0];
            v44 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
            goto LABEL_94;
          }
          if (v38 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v41 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v38 != HIBYTE(v98.__r_.__value_.__r.__words[2]))
          {
            v43 = siri::intelligence::TYPE_BOOLEAN[0];
            v44 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
            goto LABEL_90;
          }
          v41 = &v98;
        }
        if (memcmp(v41, siri::intelligence::TYPE_NUMBER[0], v39))
        {
          v43 = siri::intelligence::TYPE_BOOLEAN[0];
          v44 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
          if ((v40 & 0x80) != 0)
          {
            v42 = v98.__r_.__value_.__l.__size_;
LABEL_94:
            if (v44 != v42)
            {
              v46 = siri::intelligence::TYPE_STRING[0];
              v47 = strlen(siri::intelligence::TYPE_STRING[0]);
              goto LABEL_117;
            }
            if (v42 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v45 = (std::string *)v98.__r_.__value_.__r.__words[0];
LABEL_97:
            if (memcmp(v45, v43, v42))
            {
              v46 = siri::intelligence::TYPE_STRING[0];
              v47 = strlen(siri::intelligence::TYPE_STRING[0]);
              if ((v40 & 0x80) == 0)
              {
LABEL_99:
                if (v47 == v40)
                {
                  v48 = &v98;
                  goto LABEL_120;
                }
                goto LABEL_121;
              }
              v42 = v98.__r_.__value_.__l.__size_;
LABEL_117:
              if (v47 == v42)
              {
                if (v42 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
                v48 = (std::string *)v98.__r_.__value_.__r.__words[0];
                v40 = v42;
LABEL_120:
                if (memcmp(v48, v46, v40))
                  goto LABEL_121;
                std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(&v96, (void *)v16, (uint64_t)v15);
                if (*(char *)(v96.__r_.__value_.__r.__words[0] + 95) < 0)
                  std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v96.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(v96.__r_.__value_.__r.__words[0] + 80));
                else
                  v97 = *(std::string *)(v96.__r_.__value_.__r.__words[0] + 72);
                std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v96);
                if (v20)
                {
                  std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(v95, v20, (uint64_t)v19);
                  if (*(char *)(v95[0] + 95) < 0)
                    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(v95[0] + 72), *(_QWORD *)(v95[0] + 80));
                  else
                    v96 = *(std::string *)(v95[0] + 72);
                  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v95);
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v96, "");
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "==")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "eq"))
                {
                  v81 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v97, (unsigned __int8 *)&v96);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "!=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "ne"))
                {
                  v81 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&v97, (unsigned __int8 *)&v96);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "<")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "lt"))
                {
                  v81 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, &v96);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "<=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "le"))
                {
                  v81 = std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v97.__r_.__value_.__l.__data_, (const void **)&v96.__r_.__value_.__l.__data_);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), ">")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "gt"))
                {
                  v81 = std::operator>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v97.__r_.__value_.__l.__data_, (const void **)&v96.__r_.__value_.__l.__data_);
                }
                else
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), ">=")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "ge"))
                  {
                    if (*(char *)(a1 + 47) >= 0)
                      v87 = a1 + 24;
                    else
                      v87 = *(_QWORD *)(a1 + 24);
                    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported numeric operator found in condition: %s", v86, v87);
                    v7 = 0;
                    goto LABEL_202;
                  }
                  v81 = std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v97, &v96);
                }
                v7 = v81;
LABEL_202:
                if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v96.__r_.__value_.__l.__data_);
                if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v97.__r_.__value_.__l.__data_);
                goto LABEL_122;
              }
LABEL_121:
              v7 = 0;
LABEL_122:
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v98.__r_.__value_.__l.__data_);
              v19 = v89;
              goto LABEL_125;
            }
            if (v15)
            {
              v55 = (unint64_t *)&v15->__shared_owners_;
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
              v57 = v54[66];
              do
                v58 = __ldaxr(v55);
              while (__stlxr(v58 - 1, v55));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            else
            {
              v57 = v54[66];
            }
            v7 = v57 != 0;
            if (lpsrc)
            {
              std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableBoolean,siri::intelligence::Variable>(&v97, lpsrc, (uint64_t)v89);
              v78 = *(_BYTE *)(v97.__r_.__value_.__r.__words[0] + 66) != 0;
              std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v97);
            }
            else
            {
              v78 = 0;
            }
            v79 = *(char *)(a1 + 47);
            if (v79 < 0)
            {
              if (*(_QWORD *)(a1 + 32) != 2)
              {
LABEL_183:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "eq"))
                {
                  goto LABEL_184;
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "!=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "ne"))
                {
                  v7 = (v57 != 0) ^ v78;
                  goto LABEL_122;
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "set")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "true"))
                {
                  goto LABEL_122;
                }
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "unset")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "false"))
                {
                  if (*(char *)(a1 + 47) >= 0)
                    v83 = a1 + 24;
                  else
                    v83 = *(_QWORD *)(a1 + 24);
                  siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported BOOLean operator found in condition: %s", v82, v83);
                  goto LABEL_121;
                }
                v77 = v57 == 0;
LABEL_170:
                v7 = v77;
                goto LABEL_122;
              }
              v80 = *v37;
            }
            else
            {
              v80 = (_WORD *)(a1 + 24);
              if (v79 != 2)
                goto LABEL_183;
            }
            if (*v80 == 15677)
            {
LABEL_184:
              v7 = (v57 != 0) ^ v78 ^ 1;
              goto LABEL_122;
            }
            goto LABEL_183;
          }
LABEL_90:
          if (v44 != v40)
          {
            v46 = siri::intelligence::TYPE_STRING[0];
            v47 = strlen(siri::intelligence::TYPE_STRING[0]);
            goto LABEL_99;
          }
          v45 = &v98;
          v42 = v40;
          goto LABEL_97;
        }
        if (v15)
        {
          v50 = (unint64_t *)&v15->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
          v52 = v49[9];
          do
            v53 = __ldaxr(v50);
          while (__stlxr(v53 - 1, v50));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        else
        {
          v52 = v49[9];
        }
        if (lpsrc)
        {
          if (v69 && v89)
          {
            v70 = (unint64_t *)&v89->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
            v72 = v69[9];
            do
              v73 = __ldaxr(v70);
            while (__stlxr(v73 - 1, v70));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          else
          {
            v72 = v69[9];
          }
        }
        else
        {
          v72 = 0.0;
        }
        v74 = *(char *)(a1 + 47);
        if (v74 < 0)
        {
          if (*(_QWORD *)(a1 + 32) != 2)
            goto LABEL_166;
          v76 = *v37;
          v75 = **v37;
        }
        else
        {
          if (v74 != 2)
            goto LABEL_166;
          v75 = *(unsigned __int16 *)v37;
          v76 = (_WORD *)(a1 + 24);
        }
        if (v75 == 15677 || *v76 == 29029)
        {
          v77 = v52 == v72;
          goto LABEL_170;
        }
LABEL_166:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "!=")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "ne"))
        {
          v7 = v52 != v72;
          goto LABEL_122;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "<")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "lt"))
        {
          v7 = v52 < v72;
          goto LABEL_122;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "<=")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "le"))
        {
          v7 = v52 <= v72;
          goto LABEL_122;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), ">")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "gt"))
        {
          v7 = v52 > v72;
          goto LABEL_122;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), ">=")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 24), "ge"))
        {
          v7 = v52 >= v72;
          goto LABEL_122;
        }
        if (*(char *)(a1 + 47) >= 0)
          v85 = a1 + 24;
        else
          v85 = *(_QWORD *)(a1 + 24);
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported numeric operator found in condition: %s", v84, v85);
        goto LABEL_121;
      }
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16) ^ 1;
LABEL_125:
      if (v19)
      {
        v59 = (unint64_t *)&v19->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v90)
      {
        v61 = (unint64_t *)&v90->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v63 = v92;
      if (v92)
      {
        v64 = (unint64_t *)&v92->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = v94;
      if (v94)
      {
        v67 = (unint64_t *)&v94->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      return (v6 ^ v7) & 1;
    case 2:
      v10 = *(_QWORD *)(a1 + 64);
      v9 = *(_QWORD *)(a1 + 72);
      while (v10 != v9)
      {
        v7 = siri::intelligence::ConditionEntry::Evaluate(v10, v4, a3);
        if (!v7)
          break;
        v10 += 88;
      }
      return (v6 ^ v7) & 1;
    case 3:
      v12 = *(_QWORD *)(a1 + 64);
      v11 = *(_QWORD *)(a1 + 72);
      if (v12 == v11)
        goto LABEL_16;
      do
      {
        v7 = siri::intelligence::ConditionEntry::Evaluate(v12, v4, a3);
        if ((v7 & 1) != 0)
          break;
        v12 += 88;
      }
      while (v12 != v11);
      return (v6 ^ v7) & 1;
    default:
      goto LABEL_16;
  }
}

void sub_22AF61628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a26 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void siri::intelligence::ResolvedCondition::GetId(siri::intelligence::ResolvedCondition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::intelligence::ResolvedCondition::GetExpression(siri::intelligence::ResolvedCondition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

uint64_t siri::intelligence::ResolvedCondition::GetValue(siri::intelligence::ResolvedCondition *this)
{
  return *((unsigned __int8 *)this + 48);
}

_QWORD *siri::intelligence::ResolvedCondition::GetChildren@<X0>(siri::intelligence::ResolvedCondition *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(a2, *((_QWORD *)this + 7), *((_QWORD *)this + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4));
}

double siri::intelligence::Condition::Condition(siri::intelligence::Condition *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

void siri::intelligence::Condition::GetId(siri::intelligence::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

std::string *siri::intelligence::Condition::GetRootCondition@<X0>(siri::intelligence::Condition *this@<X0>, std::string *a2@<X8>)
{
  return siri::intelligence::ConditionEntry::ConditionEntry(a2, (siri::intelligence::Condition *)((char *)this + 24));
}

std::string *siri::intelligence::ConditionEntry::ConditionEntry(std::string *this, const siri::intelligence::ConditionEntry *a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;

  LODWORD(this->__r_.__value_.__l.__data_) = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 2);
  this->__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 1);
  this->__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(&this[2].__r_.__value_.__r.__words[2], *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  return this;
}

void sub_22AF618C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::intelligence::Condition::SetRootCondition(siri::intelligence::Condition *this, const std::string *a2)
{
  uint64_t *v4;
  std::string *v5;

  v4 = (uint64_t *)&a2[2];
  *((_DWORD *)this + 6) = a2->__r_.__value_.__l.__data_;
  v5 = (std::string *)((char *)this + 24);
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)this + 4, (uint64_t *)&a2->__r_.__value_.__l.__size_);
  std::string::operator=(v5 + 1, a2 + 1);
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](v5[2].__r_.__value_.__r.__words, v4);
  if (v5 != a2)
    std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((uint64_t *)this + 11, a2[2].__r_.__value_.__r.__words[2], (uint64_t)a2[3].__r_.__value_.__l.__data_, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[3].__r_.__value_.__r.__words[0] - a2[2].__r_.__value_.__r.__words[2]) >> 3));
}

uint64_t siri::intelligence::Condition::Evaluate(siri::intelligence::Condition *this, std::string *a2)
{
  return siri::intelligence::ConditionEntry::Evaluate((uint64_t)this + 24, a2, (uint64_t *)this);
}

uint64_t siri::intelligence::Condition::GetResolvedCondition@<X0>(const std::string *this@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  return siri::intelligence::ResolvedCondition::ResolvedCondition(a3, this, (uint64_t)&this[1], a2);
}

void siri::intelligence::ConditionEntry::~ConditionEntry(void **this)
{
  void **v2;

  v2 = this + 8;
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableBoolean,siri::intelligence::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

BOOL std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2;
  int v3;
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  int v9;

  v2 = *((char *)a1 + 23);
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v6 >= v4)
    v8 = v4;
  else
    v8 = v6;
  v9 = memcmp(v5, v7, v8);
  if (v9)
    return v9 >= 0;
  else
    return v4 >= v6;
}

BOOL std::operator>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2;
  int v3;
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  int v9;

  v2 = *((char *)a1 + 23);
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v6 >= v4)
    v8 = v4;
  else
    v8 = v6;
  v9 = memcmp(v5, v7, v8);
  if (v9)
    return v9 < 0;
  else
    return v4 < v6;
}

BOOL std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 >= 0;
  else
    return v4 >= v5;
}

void std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)(v4 - 88));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(_QWORD *a1, const siri::intelligence::ConditionEntry *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[24];
  _QWORD *v19;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v7 = 0x2E8BA2E8BA2E8BALL;
  else
    v7 = v3;
  v19 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(v7);
  else
    v8 = 0;
  v17 = v7;
  *(_QWORD *)v18 = v7 + 88 * v2;
  *(_QWORD *)&v18[16] = v7 + 88 * v8;
  siri::intelligence::ConditionEntry::ConditionEntry(*(std::string **)v18, a2);
  v9 = 0;
  *(_QWORD *)&v18[8] = *(_QWORD *)v18 + 88;
  v11 = *a1;
  for (i = a1[1];
        i + v9 != v11;
        siri::intelligence::ConditionEntry::ConditionEntry((std::string *)(v9 + *(_QWORD *)v18), (const siri::intelligence::ConditionEntry *)(v9 + i)))
  {
    v9 -= 88;
  }
  v12 = a1[2];
  v13 = *(_OWORD *)&v18[8];
  v16 = *(_QWORD *)&v18[8];
  v14 = *(_OWORD *)a1;
  *a1 = *(_QWORD *)v18 + v9;
  *(_OWORD *)v18 = v14;
  *(_OWORD *)(a1 + 1) = v13;
  *(_QWORD *)&v18[16] = v12;
  v17 = v14;
  std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer((uint64_t)&v17);
  return v16;
}

void sub_22AF61F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

uint64_t std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    siri::intelligence::ConditionEntry::~ConditionEntry((void **)(i - 88));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AF620B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a1 == a2)
    return a3;
  v4 = a1;
  v5 = 0;
  v6 = a3;
  do
  {
    *(_DWORD *)v6 = *(_DWORD *)v4;
    v7 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v6 + 16) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if (*(char *)(v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v6 + 24), *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
    }
    else
    {
      v10 = *(_OWORD *)(v4 + 24);
      *(_QWORD *)(v6 + 40) = *(_QWORD *)(v4 + 40);
      *(_OWORD *)(v6 + 24) = v10;
    }
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(v4 + 48);
    *(_QWORD *)(v6 + 56) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_QWORD *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>();
    v4 += 88;
    v6 += 88;
    v5 += 88;
  }
  while (v4 != a2);
  return v6;
}

void sub_22AF6223C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v2 + 8);
  if (v2 != v1)
  {
    v5 = v1 - 88;
    do
    {
      siri::intelligence::ConditionEntry::~ConditionEntry((void **)(v5 + v3));
      v3 -= 88;
    }
    while (v3);
  }
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;

  v8 = a1[2];
  v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          siri::intelligence::ConditionEntry::~ConditionEntry((void **)(v10 - 88));
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x2E8BA2E8BA2E8BALL)
      std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
    v12 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    if (v12 >= 0x1745D1745D1745DLL)
      v14 = 0x2E8BA2E8BA2E8BALL;
    else
      v14 = v13;
    std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](a1, v14);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, a3, a1[1]);
    goto LABEL_16;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 3) < a4)
  {
    v16 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(a2, v16, v9);
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(v16, a3, a1[1]);
LABEL_16:
    a1[1] = v15;
    return;
  }
  v17 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(a2, a3, v9);
  for (i = a1[1]; i != v17; siri::intelligence::ConditionEntry::~ConditionEntry((void **)(i - 88)))
    ;
  a1[1] = v17;
}

void sub_22AF6242C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22AF62434(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 64;
    do
    {
      v6 = v5 - 64;
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 64);
      std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a3 + 8), (uint64_t *)(v5 - 56));
      std::string::operator=((std::string *)(a3 + 24), (const std::string *)(v5 - 40));
      std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a3 + 48), (uint64_t *)(v5 - 16));
      if (a3 != v5 - 64)
        std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a3 + 64);
      a3 += 88;
      v5 += 88;
    }
    while (v6 + 88 != a2);
  }
  return a3;
}

void std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::ResolvedCondition>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ResolvedCondition>,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AF625AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ResolvedCondition>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ResolvedCondition>,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = (std::string *)(a4 + v7);
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      }
      v11 = (std::string *)(a4 + v7 + 24);
      v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v14 = *(_BYTE *)(a2 + v7 + 48);
      *(_QWORD *)(a4 + v7 + 56) = 0;
      v15 = a4 + v7 + 56;
      *(_BYTE *)(v15 - 8) = v14;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>();
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_22AF62710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(char *)(v1 + v2 + 23) < 0)
    operator delete(*(void **)(v1 + v2));
  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(v4 + v2);
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

YAML::SingleDocParser *YAML::SingleDocParser::SingleDocParser(YAML::SingleDocParser *this, YAML::Scanner *a2, const YAML::Directives *a3)
{
  _OWORD *v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = (char *)this + 32;
  return this;
}

{
  _OWORD *v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = (char *)this + 32;
  return this;
}

void YAML::SingleDocParser::~SingleDocParser(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((_QWORD **)this + 2, 0);
}

{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((_QWORD **)this + 2, 0);
}

void YAML::SingleDocParser::HandleDocument(uint64_t a1, uint64_t a2)
{
  YAML::Scanner *v4;
  unint64_t v5;
  YAML::Scanner *v6;

  v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (!*((_QWORD *)v4 + 17))
    __assert_rtn("HandleDocument", "singledocparser.cpp", 30, "!m_scanner.empty()");
  if (*(_QWORD *)(a1 + 48))
    __assert_rtn("HandleDocument", "singledocparser.cpp", 31, "!m_curAnchor");
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 8);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 1)
    YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  while (1)
  {
    v6 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((_QWORD *)v6 + 17) || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 2)
      break;
    YAML::Scanner::pop(*(int64x2_t **)a1);
  }
}

void YAML::SingleDocParser::HandleNode(uint64_t a1, uint64_t a2)
{
  YAML::Scanner *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((_QWORD *)v4 + 17))
  {
    v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v30 = *(_QWORD *)(v5 + 8);
    v31 = *(_DWORD *)(v5 + 16);
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "?");
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, &v30, &__p, 0, 0);
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
      YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
    }
    else if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 17)
    {
      v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v8 = YAML::SingleDocParser::LookupAnchor(a1, &v30, (const void **)(v7 + 24));
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v30, v8);
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
    else
    {
      __p = 0;
      v28 = 0;
      v29 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      YAML::SingleDocParser::ParseProperties((YAML::Scanner **)a1, (uint64_t)&__p, &v23, (uint64_t)&v24);
      v9 = HIBYTE(v26);
      if (v26 < 0)
        v9 = v25;
      if (v9)
        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)a2 + 88))(a2, &v30, &v24);
      v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v11 = v10;
      v12 = *(_DWORD *)(v10 + 4);
      if (v12 == 19 && YAML::IsNullString((unsigned __int8 **)(v10 + 24)))
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v30, v23);
LABEL_28:
        YAML::Scanner::pop(*(int64x2_t **)a1);
      }
      else
      {
        v13 = HIBYTE(v29);
        if (v29 < 0)
          v13 = v28;
        if (!v13)
        {
          if (v12 == 20)
            v14 = "!";
          else
            v14 = "?";
          MEMORY[0x22E2E99E4](&__p, v14);
          v12 = *(_DWORD *)(v11 + 4);
        }
        v15 = 2;
        switch(v12)
        {
          case 3:
            v15 = 1;
            goto LABEL_25;
          case 4:
            v15 = 1;
            goto LABEL_32;
          case 5:
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 13:
            goto LABEL_39;
          case 8:
LABEL_25:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, &v30, &__p, v23, v15);
            YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
            v16 = 8;
            goto LABEL_33;
          case 9:
            goto LABEL_32;
          case 14:
            v17 = *(_QWORD **)(a1 + 16);
            v18 = v17[5];
            if (!v18
              || *(_DWORD *)(*(_QWORD *)(v17[1] + (((unint64_t)(v18 + v17[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v18 + v17[4] - 1) & 0x3FF)) != 4)
            {
              goto LABEL_39;
            }
LABEL_32:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, &v30, &__p, v23, v15);
            YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
            v16 = 10;
LABEL_33:
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8 * v16))(a2);
            break;
          default:
            if ((v12 - 19) < 2)
            {
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, &v30, &__p, v23, v11 + 24);
              goto LABEL_28;
            }
LABEL_39:
            v19 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?");
            v20 = v23;
            if (v19)
            {
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v30, v23);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v21, "");
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, &v30, &__p, v20, v21);
              if (v22 < 0)
                operator delete(v21[0]);
            }
            break;
        }
      }
      if (SHIBYTE(v26) < 0)
        operator delete(v24);
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
    }
  }
  else
  {
    v6 = *(_DWORD *)(*(_QWORD *)a1 + 16);
    __p = *(void **)(*(_QWORD *)a1 + 8);
    LODWORD(v28) = v6;
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a2 + 32))(a2, &__p, 0);
  }
}

void sub_22AF62D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleMap(YAML::Scanner **a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 > 13)
  {
    if (v4 == 14)
    {
      YAML::SingleDocParser::HandleCompactMap((uint64_t)a1, a2);
    }
    else if (v4 == 15)
    {
      YAML::SingleDocParser::HandleCompactMapWithNoKey((uint64_t)a1, a2);
    }
  }
  else if (v4 == 4)
  {
    YAML::SingleDocParser::HandleBlockMap((uint64_t)a1, a2);
  }
  else if (v4 == 9)
  {
    YAML::SingleDocParser::HandleFlowMap((uint64_t)a1, a2);
  }
}

uint64_t YAML::SingleDocParser::LookupAnchor(uint64_t a1, _DWORD *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  _QWORD *exception;
  _QWORD v13[3];

  v4 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_9;
  v7 = a1 + 40;
  v8 = a1 + 32;
  do
  {
    v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a3);
    v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v5;
      v8 = v5;
    }
    v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v8 + 32)))
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "the referenced anchor is not defined");
    YAML::Exception::Exception((uint64_t)exception, a2, (uint64_t)v13);
    *exception = &unk_24F5439A0;
  }
  return *(_QWORD *)(v8 + 56);
}

void sub_22AF62F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseProperties(YAML::Scanner **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  YAML::Scanner *v8;
  int v9;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  *a3 = 0;
  while (1)
  {
    v8 = *a1;
    YAML::Scanner::EnsureTokensInQueue(*a1);
    if (!*((_QWORD *)v8 + 17))
      break;
    v9 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
    if (v9 == 16)
    {
      YAML::SingleDocParser::ParseAnchor(a1, a3, (std::string *)a4);
    }
    else
    {
      if (v9 != 18)
        return;
      YAML::SingleDocParser::ParseTag(a1, a2);
    }
  }
}

void YAML::SingleDocParser::HandleSequence(YAML::Scanner **a1, uint64_t a2)
{
  int v4;

  v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 == 8)
  {
    YAML::SingleDocParser::HandleFlowSequence((uint64_t)a1, a2);
  }
  else if (v4 == 3)
  {
    YAML::SingleDocParser::HandleBlockSequence((uint64_t)a1, a2);
  }
}

void YAML::SingleDocParser::HandleBlockSequence(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  int64x2_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *exception;
  int v15;
  std::string *v16;
  int v17;
  __int128 v18;
  int v19;
  std::string __p;
  std::string v21;
  int v22;

  YAML::Scanner::pop(*(int64x2_t **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v18) = 2;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v18);
  do
  {
    v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v15 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      v16 = *(std::string **)(*(_QWORD *)a1 + 8);
      v17 = v15;
      std::string::basic_string[abi:ne180100]<0>(&v18, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)exception, &v16, (uint64_t)&v18);
      *exception = &unk_24F5439A0;
    }
    v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v7 = v6;
    v8 = *(_DWORD *)(v6 + 16);
    v18 = *(_OWORD *)v6;
    v19 = v8;
    if (*(char *)(v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
    }
    else
    {
      v9 = *(_OWORD *)(v6 + 24);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v21, 0, sizeof(v21));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(__int128 **)(v7 + 48), *(__int128 **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
    v22 = *(_DWORD *)(v7 + 72);
    if ((DWORD1(v18) & 0xFFFFFFFD) != 5)
    {
      v13 = __cxa_allocate_exception(0x38uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)v13, (_DWORD *)&v18 + 2, (uint64_t)&v16);
      *v13 = &unk_24F5439A0;
    }
    YAML::Scanner::pop(*(int64x2_t **)a1);
    v10 = DWORD1(v18);
    if (DWORD1(v18) != 5)
    {
      v11 = *(int64x2_t **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (v11[8].i64[1] && (v12 = YAML::Scanner::peek(*(YAML::Scanner **)a1), (*(_DWORD *)(v12 + 4) | 2) == 7))
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v12 + 8, 0);
      else
        YAML::SingleDocParser::HandleNode(a1, a2);
    }
    v16 = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v10 != 5);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 2);
}

void sub_22AF6332C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowSequence(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64x2_t *v5;
  int64x2_t *v6;
  unint64_t v7;
  int v8;
  _QWORD *exception;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD v21[3];
  uint64_t v22;
  int v23;

  YAML::Scanner::pop(*(int64x2_t **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v21[0]) = 4;
  std::deque<YAML::CollectionType::value>::push_back(v4, v21);
  while (1)
  {
    v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v10 = (uint64_t *)a1;
      v11 = exception;
      v12 = *v10;
      v13 = *(_QWORD *)(v12 + 8);
      LODWORD(v12) = *(_DWORD *)(v12 + 16);
      v22 = v13;
      v23 = v12;
      std::string::basic_string[abi:ne180100]<0>(v21, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v11, &v22, (uint64_t)v21);
      *v11 = &unk_24F5439A0;
    }
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 10)
      break;
    YAML::SingleDocParser::HandleNode(a1, a2);
    v6 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v6[8].i64[1])
    {
      v14 = __cxa_allocate_exception(0x38uLL);
      v15 = (uint64_t *)a1;
      v16 = v14;
      v17 = *v15;
      v18 = *(_QWORD *)(v17 + 8);
      LODWORD(v17) = *(_DWORD *)(v17 + 16);
      v22 = v18;
      v23 = v17;
      std::string::basic_string[abi:ne180100]<0>(v21, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v16, &v22, (uint64_t)v21);
      *v16 = &unk_24F5439A0;
    }
    v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v8 = *(_DWORD *)(v7 + 4);
    if (v8 != 10)
    {
      if (v8 != 13)
      {
        v19 = v7;
        v20 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(v21, "end of sequence flow not found");
        YAML::Exception::Exception((uint64_t)v20, (_DWORD *)(v19 + 8), (uint64_t)v21);
        *v20 = &unk_24F5439A0;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 4);
}

void sub_22AF635E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

void YAML::CollectionStack::PopCollectionType(_QWORD *a1, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[5];
  if (v3)
    v4 = *(_DWORD *)(*(_QWORD *)(a1[1] + (((unint64_t)(v3 + a1[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v3 + a1[4] - 1) & 0x3FF));
  else
    v4 = 0;
  if (v4 != a2)
    __assert_rtn("PopCollectionType", "collectionstack.h", 31, "type == GetCurCollectionType()");
  v6 = a1[1];
  v5 = a1[2];
  if (v5 == v6)
    v7 = 0;
  else
    v7 = ((v5 - v6) << 7) - 1;
  a1[5] = v3 - 1;
  if ((unint64_t)(v7 - (v3 + a1[4]) - 2047) <= 0xFFFFFFFFFFFFF7FFLL)
  {
    operator delete(*(void **)(v5 - 8));
    a1[2] -= 8;
  }
}

void YAML::SingleDocParser::HandleBlockMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  int64x2_t *v10;
  char v11;
  _QWORD *exception;
  int v13;
  _QWORD *v14;
  std::string *v15;
  int v16;
  __int128 v17;
  int v18;
  std::string __p;
  std::string v20;
  int v21;

  YAML::Scanner::pop(*(int64x2_t **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v17) = 1;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v17);
  do
  {
    while (1)
    {
      v5 = *(int64x2_t **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (!v5[8].i64[1])
      {
        exception = __cxa_allocate_exception(0x38uLL);
        v13 = *(_DWORD *)(*(_QWORD *)a1 + 16);
        v15 = *(std::string **)(*(_QWORD *)a1 + 8);
        v16 = v13;
        std::string::basic_string[abi:ne180100]<0>(&v17, "end of map not found");
        YAML::Exception::Exception((uint64_t)exception, &v15, (uint64_t)&v17);
        *exception = &unk_24F5439A0;
      }
      v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      v7 = v6;
      v8 = *(_DWORD *)(v6 + 16);
      v17 = *(_OWORD *)v6;
      v18 = v8;
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
      }
      else
      {
        v9 = *(_OWORD *)(v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      memset(&v20, 0, sizeof(v20));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *(__int128 **)(v7 + 48), *(__int128 **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 48)) >> 3));
      v21 = *(_DWORD *)(v7 + 72);
      if (DWORD1(v17) == 6)
      {
        YAML::Scanner::pop(*(int64x2_t **)a1);
        v11 = 0;
      }
      else
      {
        if (DWORD1(v17) == 14)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          if (DWORD1(v17) != 15)
          {
            v14 = __cxa_allocate_exception(0x38uLL);
            std::string::basic_string[abi:ne180100]<0>(&v15, "end of map not found");
            YAML::Exception::Exception((uint64_t)v14, (_DWORD *)&v17 + 2, (uint64_t)&v15);
            *v14 = &unk_24F5439A0;
          }
          (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a2 + 32))(a2, (char *)&v17 + 8, 0);
        }
        v10 = *(int64x2_t **)a1;
        YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
        if (v10[8].i64[1] && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a2 + 32))(a2, (char *)&v17 + 8, 0);
        }
        v11 = 1;
      }
      v15 = &v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((v11 & 1) == 0)
        goto LABEL_21;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v11 & 1) != 0);
LABEL_21:
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 1);
}

void sub_22AF639A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      YAML::Token::~Token(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int64x2_t *v5;
  unint64_t v6;
  int v7;
  int64x2_t *v8;
  int64x2_t *v9;
  unint64_t v10;
  int v11;
  _QWORD *exception;
  int v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;

  YAML::Scanner::pop(*(int64x2_t **)a1);
  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v20[0]) = 3;
  std::deque<YAML::CollectionType::value>::push_back(v4, v20);
  while (1)
  {
    v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v13 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v22 = v13;
      std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)exception, &v21, (uint64_t)v20);
      *exception = &unk_24F5439A0;
    }
    v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v21 = *(_QWORD *)(v6 + 8);
    v22 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 4);
    if (v7 == 14)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
      goto LABEL_7;
    }
    if (v7 == 11)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v21, 0);
LABEL_7:
    v8 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (v8[8].i64[1] && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v21, 0);
    }
    v9 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v9[8].i64[1])
    {
      v14 = __cxa_allocate_exception(0x38uLL);
      v15 = *(_DWORD *)(*(_QWORD *)a1 + 16);
      v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v19 = v15;
      std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)v14, &v18, (uint64_t)v20);
      *v14 = &unk_24F5439A0;
    }
    v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    v11 = *(_DWORD *)(v10 + 4);
    if (v11 != 11)
    {
      if (v11 != 13)
      {
        v16 = v10;
        v17 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
        YAML::Exception::Exception((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v20);
        *v17 = &unk_24F5439A0;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 3);
}

void sub_22AF63CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  char v18;

  if (a17 < 0)
    operator delete(__p);
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleCompactMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  YAML::Scanner *v6;
  uint64_t v7;
  int v8;

  v4 = *(_QWORD **)(a1 + 16);
  LODWORD(v7) = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v7);
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_DWORD *)(v5 + 16);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  v6 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((_QWORD *)v6 + 17) && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
  {
    YAML::Scanner::pop(*(int64x2_t **)a1);
    YAML::SingleDocParser::HandleNode(a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a2 + 32))(a2, &v7, 0);
  }
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 5);
}

void YAML::SingleDocParser::HandleCompactMapWithNoKey(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;

  v4 = *(_QWORD **)(a1 + 16);
  v6 = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v6);
  v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v5 + 8, 0);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  YAML::CollectionStack::PopCollectionType(*(_QWORD **)(a1 + 16), 5);
}

void YAML::SingleDocParser::ParseTag(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *exception;
  std::string __p;
  void *v9[3];
  char v10;
  void *v11;
  char v12;

  v4 = YAML::Scanner::peek(*a1);
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = v4;
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "cannot assign multiple tags to the same node");
    YAML::Exception::Exception((uint64_t)exception, (_DWORD *)(v6 + 8), (uint64_t)v9);
    *exception = &unk_24F5439A0;
  }
  YAML::Tag::Tag((uint64_t)v9, v4);
  YAML::Tag::Translate((YAML::Tag *)v9, a1[1], &__p);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::Scanner::pop((int64x2_t *)*a1);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9[1]);
}

void sub_22AF63F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseAnchor(YAML::Scanner **a1, uint64_t *a2, std::string *a3)
{
  const std::string *v6;
  const std::string *v7;
  uint64_t v8;
  _QWORD *exception;
  _QWORD v10[3];

  v6 = (const std::string *)YAML::Scanner::peek(*a1);
  v7 = v6;
  if (*a2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "cannot assign multiple anchors to the same node");
    YAML::Exception::Exception((uint64_t)exception, &v7->__r_.__value_.__r.__words[1], (uint64_t)v10);
    *exception = &unk_24F5439A0;
  }
  v8 = (uint64_t)&v6[1];
  std::string::operator=(a3, v6 + 1);
  *a2 = YAML::SingleDocParser::RegisterAnchor((uint64_t)a1, v8);
  YAML::Scanner::pop((int64x2_t *)*a1);
}

void sub_22AF640C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Tag::~Tag(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t YAML::SingleDocParser::RegisterAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  const void **v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v6 = (uint64_t **)(a1 + 32);
    v5 = *(uint64_t **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 48) = v7;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v5;
          v9 = (const void **)(v5 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, (const void **)a2, (const void **)v5 + 4))
            break;
          v5 = *v8;
          v6 = v8;
          if (!*v8)
            goto LABEL_13;
        }
        if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, v9, (const void **)a2))
          break;
        v6 = v8 + 1;
        v5 = v8[1];
        if (!v5)
          goto LABEL_13;
      }
      v10 = *v6;
      if (*v6)
        goto LABEL_19;
    }
    else
    {
      v8 = (uint64_t **)(a1 + 32);
    }
LABEL_13:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = (std::string *)(v10 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10[6] = *(_QWORD *)(a2 + 16);
    }
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = **(_QWORD **)(a1 + 24);
    v13 = v10;
    if (v12)
    {
      *(_QWORD *)(a1 + 24) = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v13);
    ++*(_QWORD *)(a1 + 40);
LABEL_19:
    v10[7] = v7;
    return v7;
  }
  return 0;
}

void sub_22AF6428C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<YAML::CollectionType::value>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(_QWORD *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22AF64760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100](_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](result);
    JUMPOUT(0x22E2E9CCCLL);
  }
  return result;
}

uint64_t std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void __cxx_global_array_dtor_1()
{
  uint64_t v0;

  v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0)
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

siri::intelligence::Memory *siri::intelligence::Memory::Memory(siri::intelligence::Memory *this)
{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  return this;
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  return this;
}

void siri::intelligence::Memory::Clear(siri::intelligence::Memory *this)
{
  siri::intelligence::Memory *v1;
  char *v2;

  v1 = this;
  (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
  v2 = (char *)*((_QWORD *)v1 + 7);
  v1 = (siri::intelligence::Memory *)((char *)v1 + 56);
  std::__tree<std::string>::destroy((uint64_t)v1 - 8, v2);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
}

void siri::intelligence::Memory::ClearChangedVariableNames(char **this)
{
  _QWORD *v1;

  v1 = this + 7;
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t siri::intelligence::Memory::IsEmpty(siri::intelligence::Memory *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
}

BOOL siri::intelligence::Memory::GetArrayIndex(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 v3;
  size_t v7;
  size_t v8;
  size_t v9;
  const void *p_s1;
  const void *v11;
  size_t v12;
  const char *v13;
  const void *v14;
  uint64_t v15;
  const char *v16;
  double *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *lpsrc;
  std::__shared_weak_count *v30;
  void *__s1;
  size_t v32;
  unsigned __int8 v33;

  v3 = 0;
  if (!a3 || !*(_BYTE *)(a2 + 48))
    return v3;
  siri::intelligence::GetLiteralType((std::string *)(a2 + 24), &__s1);
  v7 = strlen(siri::intelligence::TYPE_NUMBER[0]);
  v8 = v7;
  v9 = v33;
  if ((char)v33 < 0)
  {
    if (v7 != v32)
    {
      v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
      v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
      v9 = v32;
LABEL_16:
      if (v12 == v9)
      {
        if (v9 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v14 = __s1;
LABEL_19:
        if (!memcmp(v14, v11, v9))
        {
          siri::intelligence::Memory::GetVariable(a1, a2 + 24, &lpsrc);
          if (lpsrc)
          {
            v3 = v17 != 0;
            if (v17)
            {
              v19 = v30;
              if (v30)
              {
                p_shared_owners = (unint64_t *)&v30->__shared_owners_;
                do
                  v21 = __ldxr(p_shared_owners);
                while (__stxr(v21 + 1, p_shared_owners));
                *a3 = (int)v17[9];
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
              else
              {
                *a3 = (int)v17[9];
              }
            }
            else
            {
              if (*(char *)(a2 + 47) >= 0)
                v24 = a2 + 24;
              else
                v24 = *(_QWORD *)(a2 + 24);
              siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index has non-numeric variable reference: %s", v18, v24, 0, 0);
            }
          }
          else
          {
            if (*(char *)(a2 + 47) >= 0)
              v23 = a2 + 24;
            else
              v23 = *(_QWORD *)(a2 + 24);
            siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index refers to undefined variable: %s", v16, v23);
            v3 = 0;
          }
          v25 = v30;
          if (v30)
          {
            v26 = (unint64_t *)&v30->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          goto LABEL_48;
        }
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    if (v7 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = __s1;
  }
  else
  {
    if (v7 != v33)
    {
      v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
      v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
      goto LABEL_13;
    }
    p_s1 = &__s1;
  }
  if (memcmp(p_s1, siri::intelligence::TYPE_NUMBER[0], v8))
  {
    v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
    v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
    if ((v9 & 0x80) != 0)
    {
      v9 = v32;
      goto LABEL_16;
    }
LABEL_13:
    if (v12 == v9)
    {
      v14 = &__s1;
      goto LABEL_19;
    }
LABEL_20:
    if (*(char *)(a2 + 47) >= 0)
      v15 = a2 + 24;
    else
      v15 = *(_QWORD *)(a2 + 24);
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index has non-numeric value: %s", v13, v15);
    v3 = 0;
    goto LABEL_48;
  }
  *a3 = siri::intelligence::StringToIntegralType<int>((const std::string *)(a2 + 24), 0);
  v3 = 1;
LABEL_48:
  if ((char)v33 < 0)
    operator delete(__s1);
  return v3;
}

void sub_22AF64CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetVariable(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  int v33;
  void *lpsrc[2];
  void **v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  siri::intelligence::Memory::GetLiteralVariable(a2, &v39);
  if (v39)
  {
    v6 = v40;
    *a3 = v39;
    a3[1] = v6;
    return;
  }
  siri::intelligence::ParseVariableComponents(a2, &v37);
  if (v37 != v38)
  {
    siri::intelligence::Memory::GetRoot(&v35, a1, a2, 0);
    v7 = v35;
    if (!v35)
    {
      *a3 = 0;
      a3[1] = 0;
LABEL_38:
      v26 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      goto LABEL_43;
    }
    v8 = v38;
    v9 = v38 - 56;
    v10 = std::__tree<std::string>::find<std::string>((uint64_t)(v35 + 9), (const void **)(v38 - 56));
    if (v7 + 10 == (void **)v10)
    {
      lpsrc[0] = 0;
      lpsrc[1] = 0;
    }
    else
    {
      v11 = *(unint64_t **)(v10 + 64);
      lpsrc[0] = *(void **)(v10 + 56);
      lpsrc[1] = v11;
      if (v11)
      {
        v12 = v11 + 1;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    if (*(_BYTE *)(v8 - 8))
    {
      v33 = 0;
      if ((siri::intelligence::Memory::GetArrayIndex(a1, v9, &v33) & 1) == 0
        || !lpsrc[0]
      {
        *a3 = 0;
        a3[1] = 0;
        goto LABEL_33;
      }
      v15 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v16 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      siri::intelligence::VariableArray::GetItem((uint64_t)v14, v33, &v32);
      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)lpsrc, &v32);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v15)
      {
        v21 = (unint64_t *)&v15->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)lpsrc;
    lpsrc[0] = 0;
    lpsrc[1] = 0;
LABEL_33:
    v23 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v24 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_38;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_43:
  v35 = (void **)&v37;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v35);
  v29 = v40;
  if (v40)
  {
    v30 = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_22AF64FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a16 = (void **)&a18;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetRoot(void ***a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void ***a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  siri::intelligence::VariableArray *v30;
  unint64_t *v31;
  unint64_t v32;
  siri::intelligence::VariableArray *v33;
  const char *v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  siri::intelligence::VariableArray *v41;
  unint64_t *v42;
  unint64_t v43;
  siri::intelligence::VariableArray *v44;
  const char *v45;
  unint64_t *v46;
  unint64_t v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  siri::intelligence::VariableArray *v61;
  char **v62;
  unint64_t v63;
  int v64;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char v82;
  siri::intelligence::VariableArray *v83;
  siri::intelligence::VariableArray *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void **v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116[2];
  void *lpsrc[2];
  int v118;
  siri::intelligence::VariableArray *v119;
  siri::intelligence::VariableArray *v120;
  siri::intelligence::VariableArray *v121[2];
  uint64_t v122;
  std::__shared_weak_count *v123;
  void ***v124;
  std::__shared_weak_count *v125;
  void **v126;
  std::string *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;

  siri::intelligence::ParseVariableComponents(a2, &v129);
  v8 = v129;
  v9 = v130 - v129;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v130 - v129) >> 3)) <= 1)
  {
    v10 = a1[1];
    *a4 = *a1;
    a4[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 1);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    goto LABEL_22;
  }
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v13 = *a1;
  v14 = (std::__shared_weak_count *)a1[1];
  v124 = (void ***)*a1;
  v125 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v9 = v130 - v8;
  }
  if (v9 == 56 || v13 == 0)
  {
LABEL_15:
    v18 = v125;
    *a4 = v13;
    a4[1] = (void **)&v18->__vftable;
    v124 = 0;
    v125 = 0;
    goto LABEL_16;
  }
  v22 = 0;
  while (1)
  {
    v23 = v8 + 56 * v22;
    v24 = v127;
    if ((unint64_t)v127 >= v128)
    {
      v25 = (std::string *)std::vector<siri::intelligence::VariableComponent>::__push_back_slow_path<siri::intelligence::VariableComponent const&>((uint64_t *)&v126, (__int128 *)(v8 + 56 * v22));
    }
    else
    {
      std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>((int)&v128, v127, (__int128 *)(v8 + 56 * v22));
      v25 = (std::string *)((char *)v24 + 56);
    }
    v127 = v25;
    if (!*(_BYTE *)(v8 + 56 * v22 + 48))
      break;
    v118 = 0;
    if (!siri::intelligence::Memory::GetArrayIndex((uint64_t)a1, v8 + 56 * v22, &v118))
    {
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_16;
    }
    v26 = (void **)v124;
    v27 = std::__tree<std::string>::find<std::string>((uint64_t)(v124 + 9), (const void **)(v8 + 56 * v22));
    v28 = v27;
    if (v26 + 10 == (void **)v27)
    {
      v122 = 0;
      v123 = 0;
LABEL_49:
      v121[0] = 0;
      v121[1] = 0;
      if (!a3)
        goto LABEL_119;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>((const std::string *)(v8 + 56 * v22), lpsrc);
      v48 = *(_OWORD *)lpsrc;
      lpsrc[0] = 0;
      lpsrc[1] = 0;
      v49 = (std::__shared_weak_count *)v121[1];
      *(_OWORD *)v121 = v48;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v53 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (void **)v124;
      v56 = (std::__shared_weak_count *)v121[1];
      v116[0] = (uint64_t)v121[0];
      v116[1] = (uint64_t)v121[1];
      if (v121[1])
      {
        v57 = (unint64_t *)((char *)v121[1] + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      siri::intelligence::VariableDictionary::AddProperty((uint64_t)v55, v116);
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      goto LABEL_68;
    }
    v29 = *(const void **)(v27 + 56);
    v30 = *(siri::intelligence::VariableArray **)(v28 + 64);
    v122 = *(_QWORD *)(v28 + 56);
    v123 = (std::__shared_weak_count *)v30;
    if (v30)
    {
      v31 = (unint64_t *)((char *)v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    if (!v29)
      goto LABEL_49;
    if (!v33)
    {
      v121[0] = 0;
      v121[1] = 0;
      if (*(char *)(v23 + 23) < 0)
        v23 = *(_QWORD *)v23;
      if (*(char *)(a2 + 23) >= 0)
        v89 = a2;
      else
        v89 = *(_QWORD *)a2;
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Reference to non-array component '%s' in variable reference: %s", v34, v23, v89);
LABEL_119:
      v82 = 0;
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_120;
    }
    v121[0] = v33;
    v121[1] = v30;
    if (v30)
    {
      v35 = (unint64_t *)((char *)v30 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
LABEL_68:
    v61 = v121[0];
    v62 = (char **)((char *)v121[0] + 72);
    v63 = (uint64_t)(*((_QWORD *)v121[0] + 10) - *((_QWORD *)v121[0] + 9)) >> 4;
    v64 = v118;
    if (v63 <= v118)
    {
      if (v63 != v118 || a3 == 0)
        goto LABEL_119;
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(lpsrc);
      v66 = (std::__shared_weak_count *)lpsrc[1];
      v115 = *(_OWORD *)lpsrc;
      lpsrc[0] = 0;
      lpsrc[1] = 0;
      if ((_QWORD)v115)
      {
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](v62, &v115);
        *((_BYTE *)v61 + 64) = 1;
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      }
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v70 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v61 = v121[0];
      v64 = v118;
    }
    siri::intelligence::VariableArray::GetItem((uint64_t)v61, v64, lpsrc);
    v72 = (void **)lpsrc[0];
    if (lpsrc[0]
    {
      v73 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v74 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
    }
    else
    {
      v73 = 0;
    }
    v76 = v125;
    v124 = (void ***)v72;
    v125 = v73;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v80 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = 1;
LABEL_120:
    v90 = (std::__shared_weak_count *)v121[1];
    if (v121[1])
    {
      v91 = (unint64_t *)((char *)v121[1] + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = v123;
    if (v123)
    {
      v94 = (unint64_t *)&v123->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if ((v82 & 1) == 0)
      goto LABEL_16;
LABEL_131:
    ++v22;
    v8 = v129;
    v13 = (void **)v124;
    if (v22 >= 0x6DB6DB6DB6DB6DB7 * ((v130 - v129) >> 3) - 1 || v124 == 0)
      goto LABEL_15;
  }
  v37 = (void **)v124;
  v38 = std::__tree<std::string>::find<std::string>((uint64_t)(v124 + 9), (const void **)(v8 + 56 * v22));
  v39 = v38;
  if (v37 + 10 == (void **)v38)
  {
    v122 = 0;
    v123 = 0;
    goto LABEL_105;
  }
  v40 = *(const void **)(v38 + 56);
  v41 = *(siri::intelligence::VariableArray **)(v39 + 64);
  v122 = *(_QWORD *)(v39 + 56);
  v123 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v42 = (unint64_t *)((char *)v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  if (!v40)
  {
LABEL_105:
    v121[0] = 0;
    v121[1] = 0;
    if ((a3 & 1) == 0)
    {
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_167;
    }
    v83 = (siri::intelligence::VariableArray *)operator new(0x78uLL);
    *((_QWORD *)v83 + 2) = 0;
    *(_QWORD *)v83 = &unk_24F5426D8;
    *((_QWORD *)v83 + 1) = 0;
    v84 = (siri::intelligence::VariableArray *)siri::intelligence::VariableDictionary::VariableDictionary((_QWORD *)v83 + 3, (const std::string *)v23);
    v85 = (std::__shared_weak_count *)v121[1];
    v121[0] = v84;
    v121[1] = v83;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      v88 = (void **)v124;
      v83 = v121[1];
      v119 = v121[0];
      v120 = v121[1];
      if (!v121[1])
        goto LABEL_140;
    }
    else
    {
      v88 = (void **)v124;
      v119 = v84;
      v120 = v83;
    }
    v97 = (unint64_t *)((char *)v83 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
LABEL_140:
    siri::intelligence::VariableDictionary::AddProperty((uint64_t)v88, (uint64_t *)&v119);
    v99 = (std::__shared_weak_count *)v120;
    if (v120)
    {
      v100 = (unint64_t *)((char *)v120 + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    goto LABEL_145;
  }
  if (v44)
  {
    v121[0] = v44;
    v121[1] = v41;
    if (v41)
    {
      v46 = (unint64_t *)((char *)v41 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
LABEL_145:
    std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](&v124, (uint64_t *)v121);
    v102 = (std::__shared_weak_count *)v121[1];
    if (v121[1])
    {
      v103 = (unint64_t *)((char *)v121[1] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = v123;
    if (v123)
    {
      v106 = (unint64_t *)&v123->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    goto LABEL_131;
  }
  v121[0] = 0;
  v121[1] = 0;
  if (*(char *)(v23 + 23) < 0)
    v23 = *(_QWORD *)v23;
  if (*(char *)(a2 + 23) >= 0)
    v108 = a2;
  else
    v108 = *(_QWORD *)a2;
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Reference to non-dictionary component '%s' in variable reference: %s", v45, v23, v108);
  v109 = (std::__shared_weak_count *)v121[1];
  *a4 = 0;
  a4[1] = 0;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
LABEL_167:
  v112 = v123;
  if (v123)
  {
    v113 = (unint64_t *)&v123->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
LABEL_16:
  v19 = v125;
  if (v125)
  {
    v20 = (unint64_t *)&v125->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v124 = &v126;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
LABEL_22:
  v126 = (void **)&v129;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v126);
}

void sub_22AF65874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void **a27)
{
  uint64_t v27;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  a27 = (void **)(v27 - 144);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a27);
  *(_QWORD *)(v27 - 144) = v27 - 120;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::CreateVariable(void ***a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __int128 v10;
  int IsEquivalentType;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unint64_t *v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  int v46;
  const char *v47;
  int v48;
  std::string *v49;
  uint64_t *v50;
  uint64_t v51[2];
  void *__p[2];
  char v53;
  std::string v54;
  uint64_t v55;
  uint64_t v56;

  siri::intelligence::ParseVariableComponents(a2, &v55);
  if (v55 == v56)
  {
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_49;
  }
  if (*(char *)(v56 - 33) < 0)
  {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v56 - 56), *(_QWORD *)(v56 - 48));
  }
  else
  {
    v10 = *(_OWORD *)(v56 - 56);
    v54.__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 - 40);
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
  }
  *a5 = 0;
  a5[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_STRING[0]);
  IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
  v12 = IsEquivalentType;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v12)
    {
LABEL_8:
      v13 = operator new(0x78uLL);
      v13[2] = 0;
      *v13 = &unk_24F540920;
      v13[1] = 0;
      v14 = (uint64_t)siri::intelligence::VariableString::VariableString(v13 + 3, &v54);
      v15 = (std::__shared_weak_count *)a5[1];
      *a5 = v14;
      a5[1] = (uint64_t)v13;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
LABEL_25:
        if (v17)
          goto LABEL_28;
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        v26 = v15;
        goto LABEL_27;
      }
      goto LABEL_29;
    }
  }
  else if (IsEquivalentType)
  {
    goto LABEL_8;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_NUMBER[0]);
  v18 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
  v19 = v18;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v19)
    {
LABEL_15:
      v20 = operator new(0x68uLL);
      v20[2] = 0;
      *v20 = &unk_24F542598;
      v20[1] = 0;
      v14 = (uint64_t)siri::intelligence::VariableNumber::VariableNumber(v20 + 3, &v54);
      v15 = (std::__shared_weak_count *)a5[1];
      *a5 = v14;
      a5[1] = (uint64_t)v20;
      if (v15)
      {
        v21 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v21);
        while (__stlxr(v17 - 1, v21));
        goto LABEL_25;
      }
LABEL_29:
      std::string::operator=((std::string *)(v14 + 32), a3);
      v27 = *(unsigned __int8 *)(a4 + 23);
      if ((v27 & 0x80u) != 0)
        v27 = *(_QWORD *)(a4 + 8);
      if (v27)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a5 + 16))(*a5, a4);
      siri::intelligence::Memory::GetRoot(a1, a2, 1, (void ***)__p);
      v28 = __p[0];
      if (__p[0])
      {
        v29 = (std::__shared_weak_count *)a5[1];
        v51[0] = *a5;
        v51[1] = (uint64_t)v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        siri::intelligence::VariableDictionary::AddProperty((uint64_t)v28, v51);
        if (v29)
        {
          v32 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      v34 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v35 = (unint64_t *)((char *)__p[1] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      goto LABEL_47;
    }
  }
  else if (v18)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_BOOLEAN[0]);
  v22 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
  v23 = v22;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v23)
    {
LABEL_22:
      v24 = operator new(0x60uLL);
      v24[2] = 0;
      *v24 = &unk_24F542548;
      v24[1] = 0;
      v14 = siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)(v24 + 3), &v54);
      v15 = (std::__shared_weak_count *)a5[1];
      *a5 = v14;
      a5[1] = (uint64_t)v24;
      if (v15)
      {
        v25 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v25);
        while (__stlxr(v17 - 1, v25));
        goto LABEL_25;
      }
      goto LABEL_29;
    }
  }
  else if (v22)
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_DICTIONARY[0]);
  v37 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
  if (v53 < 0)
    operator delete(__p[0]);
  if (v37)
  {
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string &,void>(&v54, __p);
    v38 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v39 = (std::__shared_weak_count *)a5[1];
    *(_OWORD *)a5 = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        v26 = v42;
LABEL_27:
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_ARRAY[0]);
    v45 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
    if (v53 < 0)
      operator delete(__p[0]);
    if (v45)
    {
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string &,void>(&v54, __p);
      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
      std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_REFERENCE[0]);
      v46 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
      if (v53 < 0)
        operator delete(__p[0]);
      if (v46)
      {
        std::allocate_shared[abi:ne180100]<siri::intelligence::VariableReference,std::allocator<siri::intelligence::VariableReference>,std::string &,void>(__p, &v54);
        std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
        std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_FUNCTION);
        v48 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)__p);
        if (v53 < 0)
          operator delete(__p[0]);
        if (v48)
        {
          std::allocate_shared[abi:ne180100]<siri::intelligence::VariableFunction,std::allocator<siri::intelligence::VariableFunction>,std::string &,void>((uint64_t *)__p, &v54);
          std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)a5, (__int128 *)__p);
          std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        }
        else
        {
          v49 = &v54;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v49 = (std::string *)v54.__r_.__value_.__r.__words[0];
          if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = (uint64_t *)a3;
          else
            v50 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported type for variable '%s': '%s'", v47, v49, v50);
        }
      }
    }
  }
LABEL_28:
  v14 = *a5;
  if (*a5)
    goto LABEL_29;
LABEL_47:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
LABEL_49:
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_22AF65EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v27);
  if (a25 < 0)
    operator delete(__p);
  __p = &a27;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetLiteralVariable(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  size_t v4;
  size_t v5;
  size_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  size_t v10;
  const void *p_s1;
  char *v12;
  size_t v13;
  const void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  __int128 v19;
  void *__s1;
  size_t v21;
  unsigned __int8 v22;
  char v23;

  siri::intelligence::GetLiteralType((std::string *)a1, &__s1);
  v4 = strlen(siri::intelligence::TYPE_NUMBER[0]);
  v5 = v4;
  v6 = v22;
  if ((char)v22 < 0)
  {
    v8 = v21;
    if (v4 != v21)
    {
      v9 = siri::intelligence::TYPE_BOOLEAN[0];
      v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      goto LABEL_15;
    }
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v7 = __s1;
  }
  else
  {
    if (v4 != v22)
    {
      v9 = siri::intelligence::TYPE_BOOLEAN[0];
      v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
LABEL_11:
      if (v10 != v6)
      {
        v12 = siri::intelligence::TYPE_STRING[0];
        v13 = strlen(siri::intelligence::TYPE_STRING[0]);
        goto LABEL_20;
      }
      p_s1 = &__s1;
      v8 = v6;
      goto LABEL_18;
    }
    v7 = &__s1;
  }
  if (!memcmp(v7, siri::intelligence::TYPE_NUMBER[0], v5))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], a1);
LABEL_25:
    v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    goto LABEL_37;
  }
  v9 = siri::intelligence::TYPE_BOOLEAN[0];
  v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
  if ((v6 & 0x80) == 0)
    goto LABEL_11;
  v8 = v21;
LABEL_15:
  if (v10 != v8)
  {
    v12 = siri::intelligence::TYPE_STRING[0];
    v13 = strlen(siri::intelligence::TYPE_STRING[0]);
    goto LABEL_27;
  }
  if (v8 == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  p_s1 = __s1;
LABEL_18:
  if (!memcmp(p_s1, v9, v8))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], a1);
    goto LABEL_25;
  }
  v12 = siri::intelligence::TYPE_STRING[0];
  v13 = strlen(siri::intelligence::TYPE_STRING[0]);
  if ((v6 & 0x80) != 0)
  {
    v8 = v21;
LABEL_27:
    if (v13 == v8)
    {
      if (v8 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v14 = __s1;
      v6 = v8;
      goto LABEL_30;
    }
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_38;
  }
LABEL_20:
  if (v13 != v6)
    goto LABEL_31;
  v14 = &__s1;
LABEL_30:
  if (memcmp(v14, v12, v6))
    goto LABEL_31;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableStringENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v19);
  v16 = v19;
  v17 = *(unsigned __int8 *)(a1 + 23);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a1 + 8);
  std::string::basic_string(&__p, (const std::string *)a1, 1uLL, v17 - 2, (std::allocator<char> *)&v23);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 16))(v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v19;
LABEL_37:
  *(_OWORD *)a2 = v15;
LABEL_38:
  if ((char)v22 < 0)
    operator delete(__s1);
}

void sub_22AF66214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

_QWORD *siri::intelligence::Memory::GetVariables@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::intelligence::Memory::GetOrCreateVariable(void ***a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  siri::intelligence::Memory::GetVariable((uint64_t)a1, a2, &v14);
  if (v14)
  {
    v8 = (uint64_t)v15;
    *a4 = v14;
    a4[1] = v8;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_6_1);
    siri::intelligence::Memory::CreateVariable(a1, a2, a3, (uint64_t)__p, a4);
    if (v13 < 0)
      operator delete(__p[0]);
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_22AF66374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetVariable(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void **v4;
  const char *v6;
  const std::string::value_type **v7;
  uint64_t v8;
  _OWORD *v9;
  const void **v10;
  uint64_t v11;
  char v12;
  std::string::size_type size;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  uint64_t v17;
  std::string *p_str;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v24;
  const char *v25;
  int IsEquivalentType;
  uint64_t v27;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD **v64;
  _QWORD **v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::string *v85;
  const char *v86;
  std::string *v87;
  char *v88;
  int v89;
  std::string::size_type v90;
  __int128 v91;
  std::string *v92;
  std::string *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123[2];
  _QWORD v124[2];
  _QWORD v125[2];
  _QWORD v126[2];
  _QWORD v127[2];
  void *v128;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::string *v132;
  uint64_t v133;
  void *v134;
  std::__shared_weak_count *v135;
  _BYTE *v136;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  _QWORD *v140;
  uint64_t v141;
  void *v142;
  std::__shared_weak_count *v143;
  std::string *v144;
  uint64_t v145;
  char *v146;
  std::__shared_weak_count *v147;
  std::string v148;
  std::string __str;
  uint64_t v150;
  std::__shared_weak_count *v151;

  v4 = (const void **)a2;
  siri::intelligence::Memory::GetVariable(a1, a2, &v150);
  v7 = (const std::string::value_type **)v150;
  if (!v150)
  {
    if (*((char *)v4 + 23) >= 0)
      v10 = v4;
    else
      v10 = (const void **)*v4;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to set variable that does not exist: %s", v6, v10);
    goto LABEL_9;
  }
  v8 = *a3;
  if (!*a3)
  {
LABEL_62:
    (*((void (**)(const std::string::value_type **))*v7 + 3))(v7);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
    v11 = 1;
    goto LABEL_63;
  }
  v9 = (_OWORD *)(v150 + 32);
  if (*(char *)(v150 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v150 + 32), *(_QWORD *)(v150 + 40));
    v8 = *a3;
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v9;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v150 + 48);
  }
  if (*(char *)(v8 + 55) < 0)
    std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)(v8 + 32), *(_QWORD *)(v8 + 40));
  else
    v148 = *(std::string *)(v8 + 32);
  v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v14 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
  v15 = SHIBYTE(v148.__r_.__value_.__r.__words[2]);
  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = v148.__r_.__value_.__l.__size_;
  if (size != v14)
  {
    v22 = 1;
    if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_53;
  }
  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v148;
  else
    v16 = (std::string *)v148.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v22 = memcmp(__str.__r_.__value_.__l.__data_, v16, __str.__r_.__value_.__l.__size_) != 0;
    goto LABEL_35;
  }
  if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
    p_str = &__str;
    do
    {
      v20 = p_str->__r_.__value_.__s.__data_[0];
      p_str = (std::string *)((char *)p_str + 1);
      v19 = v20;
      v21 = v16->__r_.__value_.__s.__data_[0];
      v16 = (std::string *)((char *)v16 + 1);
      v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_35:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_53;
  }
  v22 = 0;
  if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((v12 & 0x80) == 0)
      goto LABEL_37;
LABEL_54:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_38;
    goto LABEL_55;
  }
LABEL_53:
  operator delete(v148.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_54;
LABEL_37:
  if (v22)
  {
LABEL_38:
    v24 = *a3;
    if (*(char *)(*a3 + 55) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v24 + 32), *(_QWORD *)(v24 + 40));
    else
      __str = *(std::string *)(v24 + 32);
    std::string::basic_string[abi:ne180100]<0>(&v148, siri::intelligence::TYPE_STRING[0]);
    IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&__str, (unsigned __int8 *)&v148);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (IsEquivalentType)
      {
LABEL_45:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 56))(&__str);
        v11 = (*((uint64_t (**)(const std::string::value_type **, std::string *))*v7 + 2))(v7, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_63;
      }
    }
    else if (IsEquivalentType)
    {
      goto LABEL_45;
    }
    if (*((char *)v4 + 23) < 0)
      v4 = (const void **)*v4;
    v27 = *a3;
    if (*(char *)(*a3 + 55) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v27 + 32), *(_QWORD *)(v27 + 40));
    else
      __str = *(std::string *)(v27 + 32);
    v47 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    v48 = __str.__r_.__value_.__r.__words[0];
    if (*((char *)v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v148, v7[4], (std::string::size_type)v7[5]);
    }
    else
    {
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = *v9;
      v148.__r_.__value_.__r.__words[2] = (std::string::size_type)v7[6];
    }
    v49 = &__str;
    if (v47 < 0)
      v49 = (std::string *)v48;
    v50 = &v148;
    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)v148.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to set a value for variable '%s' with type '%s' instead of '%s'", v25, v4, v49, v50);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_9:
    v11 = 0;
    goto LABEL_63;
  }
LABEL_55:
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3) & 1) == 0)
    goto LABEL_62;
  if (*a3
  {
    v29 = v28;
    v30 = (std::__shared_weak_count *)a3[1];
    v146 = v28;
    v147 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
  }
  else
  {
    v29 = 0;
    v146 = 0;
    v147 = 0;
  }
  if (!v37)
  {
    v144 = 0;
    v145 = 0;
    goto LABEL_78;
  }
  v38 = v37;
  v39 = v151;
  v144 = v37;
  v145 = (uint64_t)v151;
  if (v151)
  {
    v40 = (unint64_t *)&v151->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  if (!v29)
  {
LABEL_78:
    if (*a3
    {
      v43 = v42;
      v44 = (std::__shared_weak_count *)a3[1];
      v142 = v42;
      v143 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
    }
    else
    {
      v43 = 0;
      v142 = 0;
      v143 = 0;
    }
    if (v51)
    {
      v52 = v151;
      v140 = v51;
      v141 = (uint64_t)v151;
      if (v151)
      {
        v53 = (unint64_t *)&v151->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      if (v43)
      {
        v51[9] = v43[9];
        v11 = 1;
        *((_BYTE *)v51 + 64) = 1;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
LABEL_220:
        if (v52)
        {
          v113 = (unint64_t *)&v52->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v115 = v143;
        if (v143)
        {
          v116 = (unint64_t *)&v143->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        v39 = (std::__shared_weak_count *)v145;
        goto LABEL_231;
      }
    }
    else
    {
      v140 = 0;
      v141 = 0;
    }
    if (*a3
    {
      v56 = v55;
      v57 = (std::__shared_weak_count *)a3[1];
      v138 = v55;
      v139 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
    }
    else
    {
      v56 = 0;
      v138 = 0;
      v139 = 0;
    }
    if (v60)
    {
      v61 = v151;
      v136 = v60;
      v137 = (uint64_t)v151;
      if (v151)
      {
        v62 = (unint64_t *)&v151->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      if (v56)
      {
        v60[66] = v56[66];
        v11 = 1;
        v60[64] = 1;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
LABEL_209:
        if (v61)
        {
          v108 = (unint64_t *)&v61->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v110 = v139;
        if (v139)
        {
          v111 = (unint64_t *)&v139->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        v52 = (std::__shared_weak_count *)v141;
        goto LABEL_220;
      }
    }
    else
    {
      v136 = 0;
      v137 = 0;
    }
    if (*a3
    {
      v65 = v64;
      v66 = (std::__shared_weak_count *)a3[1];
      v134 = v64;
      v135 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
    }
    else
    {
      v65 = 0;
      v134 = 0;
      v135 = 0;
    }
    if (v69)
    {
      v70 = v69;
      v71 = v151;
      v132 = v69;
      v133 = (uint64_t)v151;
      if (v151)
      {
        v72 = (unint64_t *)&v151->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      if (v65)
      {
        memset(&__str, 0, sizeof(__str));
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)&__str, v65[9], v65[10], ((char *)v65[10] - (char *)v65[9]) >> 4);
        if (&v70[3] != &__str)
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((uint64_t)&v70[3], (uint64_t *)__str.__r_.__value_.__l.__data_, (uint64_t *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4);
        v11 = 1;
        v70[2].__r_.__value_.__s.__data_[16] = 1;
        v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
LABEL_198:
        if (v71)
        {
          v103 = (unint64_t *)&v71->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        v105 = v135;
        if (v135)
        {
          v106 = (unint64_t *)&v135->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v61 = (std::__shared_weak_count *)v137;
        goto LABEL_209;
      }
    }
    else
    {
      v71 = 0;
      v132 = 0;
      v133 = 0;
    }
    if (*a3
    {
      v75 = (uint64_t)v74;
      v76 = (std::__shared_weak_count *)a3[1];
      v130 = v74;
      v131 = v76;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
    }
    else
    {
      v75 = 0;
      v130 = 0;
      v131 = 0;
    }
    if (v79)
    {
      v80 = (uint64_t)v79;
      v81 = v151;
      v128 = v79;
      v129 = (uint64_t)v151;
      if (v151)
      {
        v82 = (unint64_t *)&v151->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      if (v75)
      {
        siri::intelligence::VariableDictionary::GetValues(v75, (uint64_t)&__str);
        siri::intelligence::VariableDictionary::SetValues(v80, (uint64_t **)&__str);
        v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
        v11 = 1;
LABEL_188:
        if (v81)
        {
          v98 = (unint64_t *)&v81->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v100 = v131;
        if (v131)
        {
          v101 = (unint64_t *)&v131->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        goto LABEL_198;
      }
    }
    else
    {
      v81 = 0;
      v128 = 0;
      v129 = 0;
    }
    std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableReference,siri::intelligence::Variable>(v127, (void *)*a3, a3[1]);
    v84 = (uint64_t)v151;
    std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableReference,siri::intelligence::Variable>(v126, v7, (uint64_t)v151);
    v85 = (std::string *)v126[0];
    if (v126[0] && v127[0])
    {
      if (*(char *)(v127[0] + 95) < 0)
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v127[0] + 72), *(_QWORD *)(v127[0] + 80));
      else
        __str = *(std::string *)(v127[0] + 72);
      std::string::operator=(v85 + 3, &__str);
      v85[2].__r_.__value_.__s.__data_[16] = 1;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
      v11 = 1;
    }
    else
    {
      std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(v125, (void *)*a3, a3[1]);
      std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(v124, v7, v84);
      v87 = (std::string *)v124[0];
      if (v124[0] && v125[0])
      {
        if (*(char *)(v125[0] + 95) < 0)
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v125[0] + 72), *(_QWORD *)(v125[0] + 80));
        else
          __str = *(std::string *)(v125[0] + 72);
        std::string::operator=(v87 + 3, &__str);
        v87[2].__r_.__value_.__s.__data_[16] = 1;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v94 = v124[0];
        v95 = *(_QWORD *)(v125[0] + 104);
        v123[0] = *(_QWORD *)(v125[0] + 96);
        v123[1] = v95;
        if (v95)
        {
          v96 = (unint64_t *)(v95 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(v94 + 96), v123);
        std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v123);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
        v11 = 1;
      }
      else
      {
        v88 = (char *)*a3;
        if (*(char *)(*a3 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v88 + 4), *((_QWORD *)v88 + 5));
          v88 = (char *)*a3;
        }
        else
        {
          __str = *(std::string *)(v88 + 32);
        }
        v89 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
        v90 = __str.__r_.__value_.__r.__words[0];
        if (v88[31] < 0)
        {
          std::string::__init_copy_ctor_external(&v148, *((const std::string::value_type **)v88 + 1), *((_QWORD *)v88 + 2));
        }
        else
        {
          v91 = *(_OWORD *)(v88 + 8);
          v148.__r_.__value_.__r.__words[2] = *((_QWORD *)v88 + 3);
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v91;
        }
        v92 = &__str;
        if (v89 < 0)
          v92 = (std::string *)v90;
        v93 = &v148;
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v93 = (std::string *)v148.__r_.__value_.__r.__words[0];
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Unknown type (%s) found when setting new variable value: %s", v86, v92, v93);
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v148.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v11 = 0;
      }
      std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v124);
      std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v125);
    }
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v126);
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v127);
    goto LABEL_188;
  }
  if (v29[95] < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v29 + 9), *((_QWORD *)v29 + 10));
  else
    __str = *(std::string *)(v29 + 3);
  std::string::operator=(v38 + 3, &__str);
  v38[2].__r_.__value_.__s.__data_[16] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), v4, (uint64_t)v4);
  v11 = 1;
LABEL_231:
  if (v39)
  {
    v118 = (unint64_t *)&v39->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v120 = v147;
  if (v147)
  {
    v121 = (unint64_t *)&v147->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
LABEL_63:
  v33 = v151;
  if (v151)
  {
    v34 = (unint64_t *)&v151->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v11;
}

void sub_22AF6701C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v35 - 208);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v35 - 192);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v35 - 176);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v35 - 96);
  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableReference,siri::intelligence::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL siri::intelligence::Memory::HasVariable(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  siri::intelligence::Memory::GetVariable(a1, a2, &v7);
  v3 = v7;
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 != 0;
}

void siri::intelligence::Memory::SetGlobalVariables(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = (_QWORD *)(a1 + 24);
  v5 = (uint64_t **)(a1 + 16);
  std::__tree<std::string>::destroy(a1 + 16, *(char **)(a1 + 24));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_6_1);
      siri::intelligence::Memory::CreateVariable((void ***)a1, (uint64_t)(v7 + 4), (std::string *)(v7 + 7), (uint64_t)__p, &v17);
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v16 < 0)
        operator delete(__p[0]);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)v7 + 4, (uint64_t)(v7 + 4));
      v12 = (_QWORD *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v7[2];
          v14 = *v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != v6);
  }
}

void sub_22AF6743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::IsGlobalVariable(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  size_t v6;
  std::string::size_type size;
  char v8;
  std::string *p_str;
  unsigned __int8 *v10;
  void **v11;
  const void *v12;
  _BOOL8 v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  void *__p[2];
  char v19;
  std::string __str;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    while (1)
    {
      if (*((char *)v2 + 55) < 0)
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v2[4], v2[5]);
      else
        __str = *(std::string *)(v2 + 4);
      v5 = a2[23];
      if ((v5 & 0x80u) == 0)
        v6 = a2[23];
      else
        v6 = *((_QWORD *)a2 + 1);
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (v6 == size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, p_str, *((_QWORD *)a2 + 1)))
          {
LABEL_41:
            v13 = 1;
            if (v8 < 0)
              goto LABEL_32;
            goto LABEL_33;
          }
        }
        else
        {
          if (!a2[23])
            goto LABEL_41;
          v10 = a2;
          while (*v10 == p_str->__r_.__value_.__s.__data_[0])
          {
            ++v10;
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v5)
              goto LABEL_41;
          }
        }
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
      if (v19 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if (v6)
      {
        if ((a2[23] & 0x80u) == 0)
          v12 = a2;
        else
          v12 = *(const void **)a2;
        memmove(v11, v12, v6);
      }
      *(_WORD *)((char *)v11 + v6) = 46;
      v13 = siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_32:
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_33:
      if (v13)
        return 1;
      v14 = (_QWORD *)v2[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v2[2];
          v16 = *v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v16);
      }
      v2 = v15;
      if (v15 == v3)
        return v13;
    }
  }
  return 0;
}

void sub_22AF67624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::IsUnsupportedGlobalVariable(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17[3];
  std::string v18;
  uint64_t v19[3];
  void **v20;

  if ((siri::intelligence::Memory::IsGlobalVariable(a1, a2) & 1) != 0)
    return 0;
  siri::intelligence::ParseVariableComponents((uint64_t)a2, v19);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v19[1] - v19[0]) >> 3)) < 2
    || (v5 = *(_QWORD **)(a1 + 16), v6 = (_QWORD *)(a1 + 24), v5 == v6))
  {
LABEL_32:
    v4 = 0;
    goto LABEL_36;
  }
  while (1)
  {
    if (*((char *)v5 + 55) < 0)
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)v5[4], v5[5]);
    else
      v18 = *(std::string *)(v5 + 4);
    siri::intelligence::ParseVariableComponents((uint64_t)&v18, v17);
    v7 = (unsigned __int8 *)v17[0];
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v17[1] - v17[0]) >> 3)) < 2)
      goto LABEL_24;
    v8 = *(unsigned __int8 *)(v17[0] + 23);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v17[0] + 23);
    else
      v9 = *(_QWORD *)(v17[0] + 8);
    v10 = *(unsigned __int8 *)(v19[0] + 23);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(v19[0] + 8);
    if (v9 != v10)
      goto LABEL_24;
    v12 = v11 >= 0 ? (unsigned __int8 *)v19[0] : *(unsigned __int8 **)v19[0];
    if ((v8 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v17[0] + 23))
      goto LABEL_33;
    while (*v7 == *v12)
    {
      ++v7;
      ++v12;
      if (!--v8)
        goto LABEL_33;
    }
LABEL_24:
    v20 = (void **)v17;
    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v13 = (_QWORD *)v5[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v5[2];
        v15 = *v14 == (_QWORD)v5;
        v5 = v14;
      }
      while (!v15);
    }
    v5 = v14;
    if (v14 == v6)
      goto LABEL_32;
  }
  if (memcmp(*(const void **)v17[0], v12, *(_QWORD *)(v17[0] + 8)))
    goto LABEL_24;
LABEL_33:
  v20 = (void **)v17;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v4 = 1;
LABEL_36:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v4;
}

void sub_22AF67854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  __p = &a20;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetVariableFromString(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &v12);
  v6 = v12;
  if (v12)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a3);
  }
  else
  {
    v7 = 0;
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_22AF67938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetVariableAsStringVector(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  const void *v6;
  uint64_t v7;
  std::string *v8;
  int IsEquivalentType;
  const char *v10;
  int v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40[2];
  std::string::size_type v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  std::string v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__split_buffer<std::string> __p;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  siri::intelligence::Memory::GetVariable(a1, a2, &v45);
  v6 = (const void *)v45;
  if (!v45)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Non-existing variable referenced: '%s'", v5, v7);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_52;
  }
  if (*(char *)(v45 + 55) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v45 + 32), *(_QWORD *)(v45 + 40));
  else
    v44 = *(std::string *)(v45 + 32);
  if (!siri::intelligence::IsPrimitiveType((unsigned __int8 *)&v44))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
    IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v44, (unsigned __int8 *)&__p);
    v11 = IsEquivalentType;
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!v11)
      {
LABEL_47:
        v34 = &v44;
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported variable type '%s'", v10, v34);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        goto LABEL_50;
      }
    }
    else if (!IsEquivalentType)
    {
      goto LABEL_47;
    }
    if (v12)
    {
      v13 = v46;
      v42 = v12;
      v43 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (v12[10] != v12[9])
      {
        v16 = 0;
        do
        {
          siri::intelligence::VariableArray::GetItem((uint64_t)v12, v16, &v38);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v38 + 56))(v40);
          v17 = *(_QWORD *)(a3 + 8);
          v18 = *(_QWORD *)(a3 + 16);
          if (v17 >= v18)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a3) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a3) >> 3);
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x555555555555555)
              v23 = 0xAAAAAAAAAAAAAAALL;
            else
              v23 = v21;
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v23)
              v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v23);
            else
              v24 = 0;
            v25 = v24 + v20;
            __p.__first_ = v24;
            __p.__begin_ = v25;
            __p.__end_cap_.__value_ = &v24[v23];
            v26 = *(_OWORD *)v40;
            v25->__r_.__value_.__r.__words[2] = v41;
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
            v40[1] = 0;
            v41 = 0;
            v40[0] = 0;
            __p.__end_ = v25 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__p);
            v27 = *(_QWORD *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            v28 = SHIBYTE(v41);
            *(_QWORD *)(a3 + 8) = v27;
            if (v28 < 0)
              operator delete(v40[0]);
          }
          else
          {
            v19 = *(_OWORD *)v40;
            *(_QWORD *)(v17 + 16) = v41;
            *(_OWORD *)v17 = v19;
            v40[1] = 0;
            v41 = 0;
            v40[0] = 0;
            *(_QWORD *)(a3 + 8) = v17 + 24;
          }
          v29 = v39;
          if (v39)
          {
            v30 = (unint64_t *)&v39->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          ++v16;
          v12 = v42;
        }
        while (v16 < (uint64_t)(v42[10] - v42[9]) >> 4);
        v13 = v43;
      }
      if (v13)
      {
        v32 = (unint64_t *)&v13->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr, const void *))(*(_QWORD *)v6 + 56))(&__p, v6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v40[0] = (void *)a3;
  LOBYTE(v40[1]) = 0;
  v8 = (std::string *)operator new(0x18uLL);
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v8 + 1;
  *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a3 + 16, (__int128 *)&__p, (__int128 *)&__p.__end_cap_, v8);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
LABEL_50:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
LABEL_52:
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_22AF67D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

double siri::intelligence::Memory::GetNumberValue(uint64_t a1, uint64_t a2)
{
  double v2;
  double *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v13;

  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  v2 = 0.0;
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
        v2 = v3[9];
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      else
      {
        v2 = v3[9];
      }
    }
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v2;
}

uint64_t siri::intelligence::Memory::SetNumberValue(uint64_t a1, uint64_t a2, double a3)
{
  const char *v6;
  double *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  void *lpsrc;
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_NUMBER[0]);
  siri::intelligence::Memory::GetOrCreateVariable((void ***)a1, a2, &__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc
  {
    v8 = (std::__shared_weak_count *)v21;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    __p.__r_.__value_.__l.__size_ = v21;
    if (v21)
    {
      v9 = (unint64_t *)(v21 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v7[9] = a3;
    *((_BYTE *)v7 + 64) = 1;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v13 = 1;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting number that is not explicitly defined: %s", v6, v14, *(_OWORD *)&__p.__r_.__value_.__l.__data_);
    v13 = 0;
  }
  v15 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v16 = (unint64_t *)(v21 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v13;
}

void sub_22AF68074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::Memory::GetBooleanValue(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v13;

  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (lpsrc
  {
    v3 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      v6 = v2[66] != 0;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      v6 = v2[66] != 0;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v6;
}

uint64_t siri::intelligence::Memory::SetBooleanValue(uint64_t a1, uint64_t a2, char a3)
{
  const char *v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  void *lpsrc;
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_BOOLEAN[0]);
  siri::intelligence::Memory::GetOrCreateVariable((void ***)a1, a2, &__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc
  {
    v8 = (std::__shared_weak_count *)v21;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    __p.__r_.__value_.__l.__size_ = v21;
    if (v21)
    {
      v9 = (unint64_t *)(v21 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v7[66] = a3;
    v7[64] = 1;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v13 = 1;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const void *)a2;
    else
      v14 = *(const void **)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting BOOLean that is not explicitly defined: %s", v6, v14, *(_OWORD *)&__p.__r_.__value_.__l.__data_);
    v13 = 0;
  }
  v15 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v16 = (unint64_t *)(v21 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v13;
}

void sub_22AF68308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetStringValue(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *lpsrc;
  std::__shared_weak_count *v15;

  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (lpsrc
  {
    v5 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (v4[95] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
    }
    else
    {
      v8 = *(_OWORD *)(v4 + 72);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 11);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
    }
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_6_1);
  }
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22AF68468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetStringValue(uint64_t a1, uint64_t a2, const std::string *a3)
{
  const char *v6;
  std::string *v7;
  std::string *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string __p;
  void *lpsrc;
  std::string::size_type v22;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  siri::intelligence::Memory::GetOrCreateVariable((void ***)a1, a2, &__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc
  {
    v8 = v7;
    v9 = (std::__shared_weak_count *)v22;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    __p.__r_.__value_.__l.__size_ = v22;
    if (v22)
    {
      v10 = (unint64_t *)(v22 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    std::string::operator=(v7 + 3, a3);
    v8[2].__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v14 = 1;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const void *)a2;
    else
      v15 = *(const void **)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting string that is not explicitly defined: %s", v6, v15, *(_OWORD *)&__p.__r_.__value_.__l.__data_);
    v14 = 0;
  }
  v16 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v17 = (unint64_t *)(v22 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v14;
}

void sub_22AF68604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetArrayValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *lpsrc;
  std::__shared_weak_count *v15;
  _QWORD **v16;
  std::__shared_weak_count *v17;

  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (lpsrc
  {
    v5 = v15;
    v16 = v4;
    v17 = v15;
    if (!v15)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v5 = v15;
    if (!v15)
      goto LABEL_14;
  }
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  v10 = v16;
  if (v16)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)a3, v10[9], v10[10], ((char *)v10[10] - (char *)v10[9]) >> 4);
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_15:
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22AF6875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetArrayValue(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  const char *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;
  void *lpsrc;
  std::string::size_type v38;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
  siri::intelligence::Memory::GetOrCreateVariable((void ***)a1, a2, &__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    __p.__r_.__value_.__l.__size_ = v38;
    if (v38)
    {
      v8 = (unint64_t *)(v38 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    (*(void (**)(void *))(*(_QWORD *)v7 + 32))(v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = *v10;
        v13 = (std::__shared_weak_count *)v10[1];
        v34 = *v10;
        v35 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          v16 = __p.__r_.__value_.__r.__words[0];
          *((_QWORD *)&v33 + 1) = v13;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        else
        {
          v16 = __p.__r_.__value_.__r.__words[0];
          *((_QWORD *)&v33 + 1) = 0;
        }
        *(_QWORD *)&v33 = v12;
        if (v12)
        {
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((char **)(v16 + 72), &v33);
          *(_BYTE *)(v16 + 64) = 1;
        }
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = v35;
        if (v35)
        {
          v22 = (unint64_t *)&v35->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v27 = 1;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (*(char *)(a2 + 23) >= 0)
      v28 = (const void *)a2;
    else
      v28 = *(const void **)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting array that is not explicitly defined: %s", v6, v28);
    v27 = 0;
  }
  v29 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v30 = (unint64_t *)(v38 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v27;
}

void sub_22AF689D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetDictionaryValue(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  siri::intelligence::VariableDictionary *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *lpsrc;
  std::__shared_weak_count *v14;
  siri::intelligence::VariableDictionary *v15;
  std::__shared_weak_count *v16;

  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (lpsrc
  {
    v5 = v14;
    v15 = v4;
    v16 = v14;
    if (!v14)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v5 = v14;
    if (!v14)
      goto LABEL_14;
  }
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  if (v15)
  {
    siri::intelligence::VariableDictionary::GetValues((uint64_t)v15, (uint64_t)a3);
    goto LABEL_15;
  }
LABEL_14:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_15:
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_22AF68B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetDictionaryValue(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  const char *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;
  void *lpsrc;
  std::string::size_type v38;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_DICTIONARY[0]);
  siri::intelligence::Memory::GetOrCreateVariable((void ***)a1, a2, &__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (lpsrc
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    __p.__r_.__value_.__l.__size_ = v38;
    if (v38)
    {
      v8 = (unint64_t *)(v38 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    (*(void (**)(void *))(*(_QWORD *)v7 + 32))(v7);
    v10 = *a3;
    v11 = a3[1];
    while (v10 != v11)
    {
      v12 = *v10;
      v13 = (std::__shared_weak_count *)v10[1];
      v34 = *v10;
      v35 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = __p.__r_.__value_.__r.__words[0];
        v33 = v13;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      else
      {
        v16 = __p.__r_.__value_.__r.__words[0];
        v33 = 0;
      }
      v32 = v12;
      siri::intelligence::VariableDictionary::AddProperty(v16, &v32);
      if (v13)
      {
        v18 = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v20 = v35;
      if (v35)
      {
        v21 = (unint64_t *)&v35->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v10 += 2;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v24 = 1;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (*(char *)(a2 + 23) >= 0)
      v23 = (const void *)a2;
    else
      v23 = *(const void **)a2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting array that is not explicitly defined: %s", v6, v23);
    v24 = 0;
  }
  v28 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v29 = (unint64_t *)(v38 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v24;
}

void sub_22AF68D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::Memory::PushBackArrayValue(uint64_t a1, const void **a2, _QWORD *a3)
{
  char **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char **v12;
  _BOOL8 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v26;
  __int128 lpsrc;
  char **v28;
  std::__shared_weak_count *v29;

  if (!*a3)
    return 0;
  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &lpsrc);
  if ((_QWORD)lpsrc
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    v28 = v6;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    if (!*((_QWORD *)&lpsrc + 1))
      goto LABEL_13;
    v8 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    if (!*((_QWORD *)&lpsrc + 1))
      goto LABEL_30;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  v12 = v28;
  if (v28)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 88))(&lpsrc, *a3, a1);
    v13 = lpsrc != 0;
    if ((_QWORD)lpsrc)
    {
      v26 = lpsrc;
      if (*((_QWORD *)&lpsrc + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](v12 + 9, &v26);
      *((_BYTE *)v12 + 64) = 1;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    if (*((_QWORD *)&lpsrc + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_31;
  }
LABEL_30:
  v13 = 0;
LABEL_31:
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v13;
}

void sub_22AF68FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::PopBackArrayValue(uint64_t a1, const void **a2, uint64_t a3)
{
  siri::intelligence::VariableArray *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v26[2];
  void *lpsrc;
  std::__shared_weak_count *v28;
  siri::intelligence::VariableArray *v29;
  std::__shared_weak_count *v30;

  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &lpsrc);
  if (lpsrc
  {
    v7 = v28;
    v29 = v6;
    v30 = v28;
    if (!v28)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v7 = v28;
    if (!v28)
    {
LABEL_31:
      v21 = 0;
      goto LABEL_32;
    }
  }
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_12:
  if (!v29 || *((_QWORD *)v29 + 10) == *((_QWORD *)v29 + 9))
    goto LABEL_31;
  siri::intelligence::VariableArray::PopBack((uint64_t)v29, &lpsrc);
  v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a3 + 8);
  if (v12)
  {
    v13 = v28;
    v26[0] = lpsrc;
    v26[1] = v28;
    if (v28)
    {
      v14 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    siri::intelligence::Memory::SetVariable(a1, a3, v26);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = 1;
LABEL_32:
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v21;
}

void sub_22AF691E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::ExpandVariables(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  _OWORD *v9;
  size_t v10;
  size_t v11;
  char v12;
  std::string *v13;
  size_t v14;
  int v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::string __s1;
  std::string v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::vector<std::string> v24;
  std::string __p;
  std::string v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v26 = *(std::string *)a4;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v26))
  {
    siri::intelligence::Entity::GetName((siri::intelligence::Entity *)&v26, &__p);
    memset(&v24, 0, sizeof(v24));
    siri::intelligence::Memory::GetVariable(a1, (uint64_t)&__p, &v22);
    v7 = v22;
    v8 = a3;
    if (!v22)
      goto LABEL_37;
    siri::intelligence::Memory::GetVariableAsStringVector(a1, (uint64_t)&__p, (uint64_t)&v21);
    std::vector<std::string>::__vdeallocate(&v24);
    v24 = (std::vector<std::string>)v21;
    memset(&v21, 0, sizeof(v21));
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    v9 = (_OWORD *)(v7 + 32);
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v9;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
    }
    v10 = strlen(siri::intelligence::TYPE_NUMBER[0]);
    v11 = v10;
    v12 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v10 != v21.__r_.__value_.__l.__size_)
        goto LABEL_20;
      if (v10 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v13 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v10 != HIBYTE(v21.__r_.__value_.__r.__words[2]))
        goto LABEL_20;
      v13 = &v21;
    }
    if (memcmp(v13, siri::intelligence::TYPE_NUMBER[0], v11))
    {
LABEL_20:
      if (*(char *)(v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
      }
      else
      {
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v9;
        __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
      }
      v14 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v14 == __s1.__r_.__value_.__l.__size_)
        {
          if (v14 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v16 = (void *)__s1.__r_.__value_.__r.__words[0];
          v15 = memcmp(__s1.__r_.__value_.__l.__data_, siri::intelligence::TYPE_BOOLEAN[0], v14) == 0;
        }
        else
        {
          v15 = 0;
          v16 = (void *)__s1.__r_.__value_.__r.__words[0];
        }
        operator delete(v16);
      }
      else
      {
        v15 = v14 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
           && memcmp(&__s1, siri::intelligence::TYPE_BOOLEAN[0], v14) == 0;
      }
      if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_36;
LABEL_35:
      operator delete(v21.__r_.__value_.__l.__data_);
      goto LABEL_36;
    }
    v15 = 1;
    if (v12 < 0)
      goto LABEL_35;
LABEL_36:
    v8 = a3 & ~v15;
LABEL_37:
    siri::intelligence::Entity::Expand((std::string::size_type *)&v26, (__int128 **)&v24, v8, &v21);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    v17 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_22AF69544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 + 23) < 0)
    operator delete(*(void **)v36);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::ValidateVariableReference(uint64_t *a1, uint64_t a2, const void **a3, siri::intelligence::ValidationResults *a4, int a5)
{
  size_t v9;
  std::string *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  const char **v26;
  std::string::size_type v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  unint64_t v31;
  size_t v32;
  size_t v33;
  std::string *v34;
  std::string::size_type v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  const char **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  size_t v46;
  std::string *v47;
  const void *v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  int v53;
  size_t v54;
  std::string *v55;
  const void *v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  void *v61;
  std::string::size_type v62;
  int v63;
  size_t v64;
  size_t v65;
  size_t v66;
  std::string *v67;
  size_t v68;
  std::string *v69;
  const void *v70;
  int v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type size;
  std::string *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  size_t v84;
  size_t v85;
  std::string *p_str;
  int v87;
  size_t v88;
  size_t v89;
  std::string *v90;
  size_t v91;
  char *v92;
  size_t v93;
  size_t v94;
  std::string *v95;
  const void *v96;
  int v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  std::string *v104;
  size_t v105;
  std::string *v106;
  const void *v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  void *v118;
  size_t v119;
  std::string *v120;
  const void *v121;
  int v122;
  const std::string::value_type *v123;
  std::string::size_type v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  std::string::size_type v130;
  size_t v131;
  std::string *v132;
  const void *v133;
  int v134;
  const std::string::value_type *v135;
  std::string::size_type v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string __str;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::string v155;
  std::string v156;

  if ((siri::intelligence::IsValidCompoundVariableName(a2) & 1) == 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    v17 = &v155;
    std::string::basic_string[abi:ne180100]((uint64_t)&v155, v16 + 43);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v155.__r_.__value_.__r.__words[0];
    if (v16)
    {
      if (*((char *)a3 + 23) >= 0)
        v18 = a3;
      else
        v18 = *a3;
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, "variable reference has invalid characters: ");
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = (const std::string::value_type *)a2;
    else
      v20 = *(const std::string::value_type **)a2;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    v22 = std::string::append(&v155, v20, v21);
    v156 = *v22;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_INVALID_NAME, (__int128 *)&v156, a5);
    goto LABEL_37;
  }
  if (siri::intelligence::Memory::IsUnsupportedGlobalVariable((uint64_t)a1, (unsigned __int8 *)a2))
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = *((unsigned __int8 *)a3 + 23);
    else
      v9 = (size_t)a3[1];
    v10 = &v155;
    std::string::basic_string[abi:ne180100]((uint64_t)&v155, v9 + 40);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v155.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)a3 + 23) >= 0)
        v11 = a3;
      else
        v11 = *a3;
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "reference to undefined global variable: ");
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a2;
    else
      v13 = *(const std::string::value_type **)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = std::string::append(&v155, v13, v14);
    v156 = *v15;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddWarning(a4, (__int128 *)siri::intelligence::CODE_READ_ONLY, (__int128 *)&v156, a5);
LABEL_37:
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v156.__r_.__value_.__l.__data_);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
    return;
  }
  v23 = (std::__shared_weak_count *)a1[1];
  v153 = *a1;
  v154 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = (const char **)siri::intelligence::TYPE_DICTIONARY;
  std::string::basic_string[abi:ne180100]<0>(&v156, siri::intelligence::TYPE_DICTIONARY[0]);
  siri::intelligence::ParseVariableComponents(a2, (uint64_t *)&v155);
  v27 = v155.__r_.__value_.__r.__words[0];
  if (v155.__r_.__value_.__l.__size_ == v155.__r_.__value_.__r.__words[0])
    goto LABEL_301;
  v28 = 0;
  v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v155.__r_.__value_.__l.__size_ - v155.__r_.__value_.__r.__words[0]) >> 3);
  while (1)
  {
    v30 = v27 + 56 * v28;
    v31 = v29 - 1;
    v32 = strlen(*v26);
    v33 = v32;
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v32 != v156.__r_.__value_.__l.__size_)
        goto LABEL_53;
      if (v32 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v34 = (std::string *)v156.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v32 != HIBYTE(v156.__r_.__value_.__r.__words[2]))
        goto LABEL_53;
      v34 = &v156;
    }
    if (!memcmp(v34, *v26, v33))
    {
      v39 = v26;
      v40 = v153;
      v41 = std::__tree<std::string>::find<std::string>(v153 + 72, (const void **)(v27 + 56 * v28));
      if (v40 + 80 == v41)
      {
        v151 = 0;
        v152 = 0;
        v26 = v39;
      }
      else
      {
        v42 = *(_QWORD *)(v41 + 56);
        v43 = *(std::__shared_weak_count **)(v41 + 64);
        v151 = v42;
        v152 = v43;
        v26 = v39;
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        if (v42)
        {
          if (*(char *)(v42 + 55) < 0)
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v42 + 32), *(_QWORD *)(v42 + 40));
          else
            __str = *(std::string *)(v42 + 32);
          if (siri::intelligence::IsPrimitiveType((unsigned __int8 *)&__str))
          {
            if (v28 == v31)
              goto LABEL_154;
            if (*((char *)a3 + 23) >= 0)
              v54 = *((unsigned __int8 *)a3 + 23);
            else
              v54 = (size_t)a3[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v148, v54 + 58);
            if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = &v148;
            else
              v55 = (std::string *)v148.__r_.__value_.__r.__words[0];
            if (v54)
            {
              if (*((char *)a3 + 23) >= 0)
                v56 = a3;
              else
                v56 = *a3;
              memmove(v55, v56, v54);
            }
            strcpy((char *)v55 + v54, "variable reference has components after a primitive type: ");
            v57 = *(char *)(v30 + 23);
            if (v57 >= 0)
              v58 = (const std::string::value_type *)(v27 + 56 * v28);
            else
              v58 = *(const std::string::value_type **)v30;
            if (v57 >= 0)
              v59 = *(unsigned __int8 *)(v30 + 23);
            else
              v59 = *(_QWORD *)(v30 + 8);
            v60 = std::string::append(&v148, v58, v59);
            v149 = *v60;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_UNDEF_VAR, (__int128 *)&v149, a5);
            if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v149.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_154;
            v61 = (void *)v148.__r_.__value_.__r.__words[0];
            goto LABEL_153;
          }
          v62 = v27 + 56 * v28;
          v63 = *(unsigned __int8 *)(v62 + 48);
          v64 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (!*(_BYTE *)(v62 + 48))
            goto LABEL_165;
          v65 = strlen(siri::intelligence::TYPE_ARRAY[0]);
          v66 = v65;
          if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (v65 == __str.__r_.__value_.__l.__size_)
            {
              if (v65 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v67 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_121:
              if (memcmp(v67, siri::intelligence::TYPE_ARRAY[0], v66))
                goto LABEL_122;
LABEL_165:
              if (v28 == v31)
                goto LABEL_175;
              v84 = strlen(siri::intelligence::TYPE_ARRAY[0]);
              v85 = v84;
              if ((v64 & 0x80) != 0)
              {
                if (v84 == __str.__r_.__value_.__l.__size_)
                {
                  if (v84 == -1)
                    std::string::__throw_out_of_range[abi:ne180100]();
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  goto LABEL_172;
                }
              }
              else if (v84 == v64)
              {
                p_str = &__str;
LABEL_172:
                v87 = memcmp(p_str, siri::intelligence::TYPE_ARRAY[0], v85) == 0;
                goto LABEL_174;
              }
              v87 = 0;
LABEL_174:
              if (v63 != v87)
              {
                if (*((char *)a3 + 23) >= 0)
                  v94 = *((unsigned __int8 *)a3 + 23);
                else
                  v94 = (size_t)a3[1];
                std::string::basic_string[abi:ne180100]((uint64_t)&v146, v94 + 57);
                if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v95 = &v146;
                else
                  v95 = (std::string *)v146.__r_.__value_.__r.__words[0];
                if (v94)
                {
                  if (*((char *)a3 + 23) >= 0)
                    v96 = a3;
                  else
                    v96 = *a3;
                  memmove(v95, v96, v94);
                }
                strcpy((char *)v95 + v94, "does not have an array element lookup for an array type '");
                v97 = *(char *)(v30 + 23);
                if (v97 >= 0)
                  v98 = (const std::string::value_type *)v30;
                else
                  v98 = *(const std::string::value_type **)v30;
                if (v97 >= 0)
                  v99 = *(unsigned __int8 *)(v30 + 23);
                else
                  v99 = *(_QWORD *)(v30 + 8);
                v100 = std::string::append(&v146, v98, v99);
                v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v101;
                v100->__r_.__value_.__l.__size_ = 0;
                v100->__r_.__value_.__r.__words[2] = 0;
                v100->__r_.__value_.__r.__words[0] = 0;
                v102 = std::string::append(&v147, "' on type ");
                v26 = v39;
                v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                v148.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v103;
                v102->__r_.__value_.__l.__size_ = 0;
                v102->__r_.__value_.__r.__words[2] = 0;
                v102->__r_.__value_.__r.__words[0] = 0;
                if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v78 = &v156;
                else
                  v78 = (std::string *)v156.__r_.__value_.__r.__words[0];
                if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v156.__r_.__value_.__r.__words[2]);
                else
                  size = v156.__r_.__value_.__l.__size_;
                goto LABEL_145;
              }
LABEL_175:
              v26 = v39;
              v88 = strlen(*v39);
              v89 = v88;
              if ((v64 & 0x80) != 0)
              {
                v91 = __str.__r_.__value_.__l.__size_;
                if (v88 != __str.__r_.__value_.__l.__size_)
                {
                  v92 = siri::intelligence::TYPE_ARRAY[0];
                  v93 = strlen(siri::intelligence::TYPE_ARRAY[0]);
                  goto LABEL_211;
                }
                if (v88 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
                v90 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (v88 != v64)
                {
                  v92 = siri::intelligence::TYPE_ARRAY[0];
                  v93 = strlen(siri::intelligence::TYPE_ARRAY[0]);
                  goto LABEL_208;
                }
                v90 = &__str;
              }
              if (!memcmp(v90, *v39, v89))
                goto LABEL_154;
              v92 = siri::intelligence::TYPE_ARRAY[0];
              v93 = strlen(siri::intelligence::TYPE_ARRAY[0]);
              if ((v64 & 0x80) != 0)
              {
                v91 = __str.__r_.__value_.__l.__size_;
LABEL_211:
                if (v93 != v91)
                  goto LABEL_215;
                if (v91 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
                v104 = (std::string *)__str.__r_.__value_.__r.__words[0];
                goto LABEL_214;
              }
LABEL_208:
              v91 = v64;
              if (v93 != v64)
                goto LABEL_215;
              v104 = &__str;
LABEL_214:
              if (!memcmp(v104, v92, v91))
                goto LABEL_154;
LABEL_215:
              std::string::operator=(&v156, &__str);
              v53 = 0;
LABEL_155:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_157;
            }
          }
          else if (v65 == HIBYTE(__str.__r_.__value_.__r.__words[2]))
          {
            v67 = &__str;
            goto LABEL_121;
          }
LABEL_122:
          if (*((char *)a3 + 23) >= 0)
            v68 = *((unsigned __int8 *)a3 + 23);
          else
            v68 = (size_t)a3[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&v146, v68 + 58);
          if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v69 = &v146;
          else
            v69 = (std::string *)v146.__r_.__value_.__r.__words[0];
          v26 = v39;
          if (v68)
          {
            if (*((char *)a3 + 23) >= 0)
              v70 = a3;
            else
              v70 = *a3;
            memmove(v69, v70, v68);
          }
          strcpy((char *)v69 + v68, "attempts to lookup an array element for a non-array type '");
          v71 = *(char *)(v30 + 23);
          if (v71 >= 0)
            v72 = (const std::string::value_type *)v30;
          else
            v72 = *(const std::string::value_type **)v30;
          if (v71 >= 0)
            v73 = *(unsigned __int8 *)(v30 + 23);
          else
            v73 = *(_QWORD *)(v30 + 8);
          v74 = std::string::append(&v146, v72, v73);
          v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          v76 = std::string::append(&v147, "' on type ");
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v148.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &v156;
          else
            v78 = (std::string *)v156.__r_.__value_.__r.__words[0];
          if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v156.__r_.__value_.__r.__words[2]);
          else
            size = v156.__r_.__value_.__l.__size_;
LABEL_145:
          v80 = std::string::append(&v148, (const std::string::value_type *)v78, size);
          v149 = *v80;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&v149, a5);
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
          if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v148.__r_.__value_.__l.__data_);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v147.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_154;
          v61 = (void *)v146.__r_.__value_.__r.__words[0];
LABEL_153:
          operator delete(v61);
LABEL_154:
          v53 = 1;
          goto LABEL_155;
        }
      }
      if (*((char *)a3 + 23) >= 0)
        v46 = *((unsigned __int8 *)a3 + 23);
      else
        v46 = (size_t)a3[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v149, v46 + 33);
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v149;
      else
        v47 = (std::string *)v149.__r_.__value_.__r.__words[0];
      if (v46)
      {
        if (*((char *)a3 + 23) >= 0)
          v48 = a3;
        else
          v48 = *a3;
        memmove(v47, v48, v46);
      }
      strcpy((char *)v47 + v46, "reference to undefined variable: ");
      v49 = *(char *)(v30 + 23);
      if (v49 >= 0)
        v50 = (const std::string::value_type *)(v27 + 56 * v28);
      else
        v50 = *(const std::string::value_type **)v30;
      if (v49 >= 0)
        v51 = *(unsigned __int8 *)(v30 + 23);
      else
        v51 = *(_QWORD *)(v30 + 8);
      v52 = std::string::append(&v149, v50, v51);
      __str = *v52;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_UNDEF_VAR, (__int128 *)&__str, a5);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v53 = 1;
LABEL_157:
      v81 = v152;
      if (v152)
      {
        v82 = (unint64_t *)&v152->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (v53)
        goto LABEL_301;
      goto LABEL_163;
    }
LABEL_53:
    if (!siri::intelligence::DialogTypes::IsDialogTypeInput((siri::intelligence *)&v156, (const void **)(v27 + 56 * v28)))break;
    siri::intelligence::DialogTypes::GetDialogTypeInputType((siri::intelligence *)&v156, (const void **)(v27 + 56 * v28), &__str);
    v35 = v27 + 56 * v28;
    v37 = *(unsigned __int8 *)(v35 + 48);
    v36 = (unsigned __int8 *)(v35 + 48);
    if (v37 && !siri::intelligence::StringEndsWith(&__str, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX))
    {
      if (*((char *)a3 + 23) >= 0)
        v119 = *((unsigned __int8 *)a3 + 23);
      else
        v119 = (size_t)a3[1];
      v120 = &v146;
      std::string::basic_string[abi:ne180100]((uint64_t)&v146, v119 + 58);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v120 = (std::string *)v146.__r_.__value_.__r.__words[0];
      if (v119)
      {
        if (*((char *)a3 + 23) >= 0)
          v121 = a3;
        else
          v121 = *a3;
        memmove(v120, v121, v119);
      }
      strcpy((char *)v120 + v119, "attempts to lookup an array element for a non-array type '");
      v122 = *(char *)(v30 + 23);
      if (v122 >= 0)
        v123 = (const std::string::value_type *)v30;
      else
        v123 = *(const std::string::value_type **)v30;
      if (v122 >= 0)
        v124 = *(unsigned __int8 *)(v30 + 23);
      else
        v124 = *(_QWORD *)(v30 + 8);
      v125 = std::string::append(&v146, v123, v124);
      v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v126;
      v125->__r_.__value_.__l.__size_ = 0;
      v125->__r_.__value_.__r.__words[2] = 0;
      v125->__r_.__value_.__r.__words[0] = 0;
      v127 = std::string::append(&v147, "' on type ");
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      v148.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = &v156;
      else
        v129 = (std::string *)v156.__r_.__value_.__r.__words[0];
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v130 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
      else
        v130 = v156.__r_.__value_.__l.__size_;
LABEL_290:
      v141 = std::string::append(&v148, (const std::string::value_type *)v129, v130);
      v149 = *v141;
      v141->__r_.__value_.__l.__size_ = 0;
      v141->__r_.__value_.__r.__words[2] = 0;
      v141->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&v149, a5);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v148.__r_.__value_.__l.__data_);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v118 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_300;
      }
      goto LABEL_301;
    }
    if (v28 != v31)
    {
      v38 = *v36;
      if (v38 != siri::intelligence::StringEndsWith(&__str, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX))
      {
        if (*((char *)a3 + 23) >= 0)
          v131 = *((unsigned __int8 *)a3 + 23);
        else
          v131 = (size_t)a3[1];
        v132 = &v146;
        std::string::basic_string[abi:ne180100]((uint64_t)&v146, v131 + 57);
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v132 = (std::string *)v146.__r_.__value_.__r.__words[0];
        if (v131)
        {
          if (*((char *)a3 + 23) >= 0)
            v133 = a3;
          else
            v133 = *a3;
          memmove(v132, v133, v131);
        }
        strcpy((char *)v132 + v131, "does not have an array element lookup for an array type '");
        v134 = *(char *)(v30 + 23);
        if (v134 >= 0)
          v135 = (const std::string::value_type *)v30;
        else
          v135 = *(const std::string::value_type **)v30;
        if (v134 >= 0)
          v136 = *(unsigned __int8 *)(v30 + 23);
        else
          v136 = *(_QWORD *)(v30 + 8);
        v137 = std::string::append(&v146, v135, v136);
        v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        v139 = std::string::append(&v147, "' on type ");
        v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
        v148.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v140;
        v139->__r_.__value_.__l.__size_ = 0;
        v139->__r_.__value_.__r.__words[2] = 0;
        v139->__r_.__value_.__r.__words[0] = 0;
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = &v156;
        else
          v129 = (std::string *)v156.__r_.__value_.__r.__words[0];
        if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
        else
          v130 = v156.__r_.__value_.__l.__size_;
        goto LABEL_290;
      }
    }
    std::string::operator=(&v156, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_163:
    ++v28;
    v27 = v155.__r_.__value_.__r.__words[0];
    v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v155.__r_.__value_.__l.__size_ - v155.__r_.__value_.__r.__words[0]) >> 3);
    if (v28 >= v29)
      goto LABEL_301;
  }
  if (*((char *)a3 + 23) >= 0)
    v105 = *((unsigned __int8 *)a3 + 23);
  else
    v105 = (size_t)a3[1];
  v106 = &v147;
  std::string::basic_string[abi:ne180100]((uint64_t)&v147, v105 + 32);
  if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v106 = (std::string *)v147.__r_.__value_.__r.__words[0];
  if (v105)
  {
    if (*((char *)a3 + 23) >= 0)
      v107 = a3;
    else
      v107 = *a3;
    memmove(v106, v107, v105);
  }
  strcpy((char *)v106 + v105, "refers to a non-existing input '");
  v108 = *(char *)(v30 + 23);
  if (v108 >= 0)
    v109 = (const std::string::value_type *)v30;
  else
    v109 = *(const std::string::value_type **)v30;
  if (v108 >= 0)
    v110 = *(unsigned __int8 *)(v30 + 23);
  else
    v110 = *(_QWORD *)(v30 + 8);
  v111 = std::string::append(&v147, v109, v110);
  v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
  v148.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v112;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  v113 = std::string::append(&v148, "' on type ");
  v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v156;
  else
    v115 = (std::string *)v156.__r_.__value_.__r.__words[0];
  if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v116 = HIBYTE(v156.__r_.__value_.__r.__words[2]);
  else
    v116 = v156.__r_.__value_.__l.__size_;
  v117 = std::string::append(&v149, (const std::string::value_type *)v115, v116);
  __str = *v117;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_UNDEF_VAR, (__int128 *)&__str, a5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
  {
    v118 = (void *)v147.__r_.__value_.__r.__words[0];
LABEL_300:
    operator delete(v118);
  }
LABEL_301:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  v142 = v154;
  if (v154)
  {
    v143 = (unint64_t *)&v154->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
}

void sub_22AF6A55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a42 < 0)
    operator delete(a37);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  a37 = (void *)(v45 - 152);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::ValidateVariableReference(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, siri::intelligence::ValidationResults *a5, uint64_t a6)
{
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD **v38;
  BOOL v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD v42[2];
  std::string v43;
  std::string v44;
  std::string v45;
  std::string __p;
  _QWORD **v47;
  _QWORD *v48[3];
  std::__shared_weak_count *v49;

  if (*(_QWORD *)a2)
  {
    if (v12)
    {
      v13 = *(std::__shared_weak_count **)(a2 + 8);
      v48[2] = v12;
      v49 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v47, (const void ***)v12 + 9);
      v16 = v47;
      if (v47 != v48)
      {
        do
        {
          if (!siri::intelligence::DialogTypes::IsDialogTypeInput((siri::intelligence *)a3, (const void **)v16 + 4))
          {
            v17 = a1;
            if (*((char *)a4 + 23) >= 0)
              v18 = *((unsigned __int8 *)a4 + 23);
            else
              v18 = (size_t)a4[1];
            std::string::basic_string[abi:ne180100]((uint64_t)&v43, v18 + 32);
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = &v43;
            else
              v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
            if (v18)
            {
              if (*((char *)a4 + 23) >= 0)
                v20 = a4;
              else
                v20 = *a4;
              memmove(v19, v20, v18);
            }
            strcpy((char *)v19 + v18, "refers to a non-existing input '");
            v21 = *((char *)v16 + 55);
            if (v21 >= 0)
              v22 = (const std::string::value_type *)(v16 + 4);
            else
              v22 = (const std::string::value_type *)v16[4];
            if (v21 >= 0)
              v23 = *((unsigned __int8 *)v16 + 55);
            else
              v23 = (std::string::size_type)v16[5];
            v24 = std::string::append(&v43, v22, v23);
            v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            v26 = std::string::append(&v44, "' on type ");
            a1 = v17;
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v45.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            v28 = *(char *)(a3 + 23);
            if (v28 >= 0)
              v29 = (const std::string::value_type *)a3;
            else
              v29 = *(const std::string::value_type **)a3;
            if (v28 >= 0)
              v30 = *(unsigned __int8 *)(a3 + 23);
            else
              v30 = *(_QWORD *)(a3 + 8);
            v31 = std::string::append(&v45, v29, v30);
            __p = *v31;
            v31->__r_.__value_.__l.__size_ = 0;
            v31->__r_.__value_.__r.__words[2] = 0;
            v31->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a5, (__int128 *)siri::intelligence::CODE_UNDEF_VAR, (__int128 *)&__p, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v45.__r_.__value_.__l.__data_);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v43.__r_.__value_.__l.__data_);
          }
          siri::intelligence::DialogTypes::GetDialogTypeInputType((siri::intelligence *)a3, (const void **)v16 + 4, &__p);
          v32 = (std::__shared_weak_count *)v16[8];
          v42[0] = v16[7];
          v42[1] = v32;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          siri::intelligence::Memory::ValidateVariableReference(a1, v42, &__p, a4, a5, a6);
          if (v32)
          {
            v35 = (unint64_t *)&v32->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v37 = v16[1];
          if (v37)
          {
            do
            {
              v38 = (_QWORD **)v37;
              v37 = (_QWORD *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (_QWORD **)v16[2];
              v39 = *v38 == v16;
              v16 = v38;
            }
            while (!v39);
          }
          v16 = v38;
        }
        while (v38 != v48);
        v13 = v49;
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v47, v48[0]);
      if (v13)
      {
        v40 = (unint64_t *)&v13->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
}

void sub_22AF6AB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39)
{
  uint64_t v39;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v39 - 112);
  _Unwind_Resume(a1);
}

uint64_t *siri::intelligence::Memory::GetChangedVariableNames@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 6);
}

uint64_t siri::intelligence::Memory::SetIntelligence(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t siri::intelligence::Memory::GetIntelligence(siri::intelligence::Memory *this)
{
  return *((_QWORD *)this + 5);
}

void siri::intelligence::Memory::Load(char **this, const protobuf::Intelligence_State *a2)
{
  int i;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  _DWORD *v10;
  std::string *v11;
  _DWORD *v12;
  int v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string v18;
  std::string v19;
  std::string __p[2];

  (*(void (**)(char *))(*(_QWORD *)*this + 24))(*this);
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  this[6] = (char *)(this + 7);
  this[7] = 0;
  this[8] = 0;
  if (*((int *)a2 + 8) >= 1)
  {
    for (i = 0; i < *((_DWORD *)a2 + 8); ++i)
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)a2 + 24, i);
      v7 = v5;
      memset(&v19, 0, sizeof(v19));
      v8 = *(_DWORD *)(v5 + 16);
      if ((v8 & 4) != 0)
      {
        v10 = *(_DWORD **)(v5 + 40);
        if (!v10)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 19390);
          v11 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || values_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          v10 = *(_DWORD **)(v7 + 40);
        }
        if (v10)
          v12 = v10;
        else
          v12 = &protobuf::_Intelligence_State_Memory_Value_default_instance_;
        MEMORY[0x22E2E99E4](&v19, "[");
        if ((int)v12[8] >= 1)
        {
          v13 = 0;
          do
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(v12 + 6), v13);
            std::operator+<char>();
            v14 = std::string::append(&v18, "'");
            v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = __p;
            else
              v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
            else
              size = __p[0].__r_.__value_.__l.__size_;
            std::string::append(&v19, (const std::string::value_type *)v16, size);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v18.__r_.__value_.__l.__data_);
            ++v13;
          }
          while (v13 < v12[8]);
        }
        std::string::append(&v19, "]");
      }
      else
      {
        if ((v8 & 2) == 0)
        {
          v9 = *(uint64_t **)(v5 + 24);
          if (*((char *)v9 + 23) < 0)
            v9 = (uint64_t *)*v9;
          siri::intelligence::Log::Warning((siri::intelligence::Log *)"Key %s has no value", v6, v9);
          goto LABEL_29;
        }
        std::string::operator=(&v19, *(const std::string **)(v5 + 32));
      }
      siri::intelligence::Memory::SetVariableFromString((uint64_t)this, *(const void ***)(v7 + 24), (uint64_t)&v19);
LABEL_29:
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22AF6AE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a23);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::Save(siri::intelligence::Memory *this, protobuf::Intelligence_State *a2)
{
  _QWORD **v3;
  int *v4;
  uint64_t v5;
  int v6;
  protobuf::Intelligence_State_Memory *v7;
  uint64_t v8;
  uint64_t v9;
  const std::string *v10;
  std::string *v11;
  _QWORD *v12;
  int IsEquivalentType;
  __n128 v14;
  int v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  protobuf::Intelligence_State_Memory_Value *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD **v31;
  BOOL v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __n128 __p;
  char v38;
  std::string v39;
  _QWORD **v40;
  _QWORD *v41[2];

  if (a2)
  {
    std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v40, (const void ***)(*(_QWORD *)this + 72));
    v3 = v40;
    if (v40 != v41)
    {
      while (1)
      {
        v4 = (int *)*((_QWORD *)a2 + 5);
        if (!v4)
          break;
        v5 = *((int *)a2 + 8);
        v6 = *v4;
        if ((int)v5 < *v4)
        {
          *((_DWORD *)a2 + 8) = v5 + 1;
          v7 = *(protobuf::Intelligence_State_Memory **)&v4[2 * v5 + 2];
          goto LABEL_10;
        }
        if (v6 == *((_DWORD *)a2 + 9))
          goto LABEL_8;
LABEL_9:
        *v4 = v6 + 1;
        v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(*((google::protobuf::internal::ArenaImpl **)a2
                                                                                              + 3));
        v8 = *((_QWORD *)a2 + 5);
        v9 = *((int *)a2 + 8);
        *((_DWORD *)a2 + 8) = v9 + 1;
        *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
LABEL_10:
        v10 = (const std::string *)(v3 + 4);
        v11 = (std::string *)*((_QWORD *)v7 + 3);
        *((_DWORD *)v7 + 4) |= 1u;
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 3, (uint64_t)v10);
        else
          std::string::operator=(v11, v10);
        v12 = v3[7];
        if (*((char *)v12 + 55) < 0)
          std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v12[4], v12[5]);
        else
          v39 = *(std::string *)(v12 + 4);
        if (siri::intelligence::IsPrimitiveType((unsigned __int8 *)&v39))
        {
          (*(void (**)(__n128 *__return_ptr))(*v3[7] + 56))(&__p);
          *((_DWORD *)v7 + 4) |= 2u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v7 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &__p);
          if (v38 < 0)
            operator delete((void *)__p.n128_u64[0]);
          goto LABEL_50;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
        IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v39, (unsigned __int8 *)&__p);
        v15 = IsEquivalentType;
        if (v38 < 0)
        {
          operator delete((void *)__p.n128_u64[0]);
          if (!v15)
            goto LABEL_50;
        }
        else if (!IsEquivalentType)
        {
          goto LABEL_50;
        }
        v16 = v3[7];
        if (v16
        {
          v18 = (uint64_t)v17;
          v19 = (std::__shared_weak_count *)v3[8];
          v35 = (uint64_t)v17;
          v36 = v19;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(p_shared_owners);
            while (__stxr(v21 + 1, p_shared_owners));
          }
        }
        else
        {
          v19 = 0;
          v18 = 0;
          v35 = 0;
          v36 = 0;
        }
        *((_DWORD *)v7 + 4) |= 4u;
        v22 = (protobuf::Intelligence_State_Memory_Value *)*((_QWORD *)v7 + 5);
        if (v22)
        {
          if (v18)
            goto LABEL_32;
        }
        else
        {
          v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(0);
          *((_QWORD *)v7 + 5) = v22;
          if (v18)
          {
LABEL_32:
            v23 = 0;
            v24 = (uint64_t)v22 + 24;
            do
            {
              if (v23 >= (uint64_t)(*(_QWORD *)(v18 + 80) - *(_QWORD *)(v18 + 72)) >> 4)
                break;
              siri::intelligence::VariableArray::GetItem(v18, v23, &v33);
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v33 + 56))(&__p);
              v14 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v24, &__p);
              if (v38 < 0)
                operator delete((void *)__p.n128_u64[0]);
              v25 = v34;
              if (v34)
              {
                v26 = (unint64_t *)&v34->__shared_owners_;
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v14);
                  std::__shared_weak_count::__release_weak(v25);
                }
              }
              ++v23;
              v18 = v35;
            }
            while (v35);
            v19 = v36;
            if (!v36)
              goto LABEL_50;
LABEL_46:
            v28 = (unint64_t *)&v19->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v14);
              std::__shared_weak_count::__release_weak(v19);
            }
            goto LABEL_50;
          }
        }
        if (v19)
          goto LABEL_46;
LABEL_50:
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        v30 = v3[1];
        if (v30)
        {
          do
          {
            v31 = (_QWORD **)v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD **)v3[2];
            v32 = *v31 == v3;
            v3 = v31;
          }
          while (!v32);
        }
        v3 = v31;
        if (v31 == v41)
          goto LABEL_58;
      }
      v6 = *((_DWORD *)a2 + 9);
LABEL_8:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v6 + 1);
      v4 = (int *)*((_QWORD *)a2 + 5);
      v6 = *v4;
      goto LABEL_9;
    }
LABEL_58:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v40, v41[0]);
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"NULL state in Memory::Save", 0);
  }
}

void sub_22AF6B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,_QWORD *a27)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a25 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AF6B2FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24F5426D8;
  a1[1] = 0;
  siri::intelligence::VariableDictionary::VariableDictionary((siri::intelligence::VariableDictionary *)(a1 + 3));
  return a1;
}

void sub_22AF6B348(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F5426D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F5426D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::vector<siri::intelligence::VariableComponent>::__push_back_slow_path<siri::intelligence::VariableComponent const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<siri::intelligence::VariableComponent>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer(&v10);
  return v8;
}

void sub_22AF6B4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__s.__data_[0] = *((_BYTE *)a3 + 48);
}

void sub_22AF6B554(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<siri::intelligence::VariableComponent>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v10 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 - 8);
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer(void **a1)
{
  std::__split_buffer<siri::intelligence::VariableComponent>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<siri::intelligence::VariableComponent>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v4, i - 56);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>@<X0>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<siri::intelligence::VariableArray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22AF6B82C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<siri::intelligence::VariableArray>,0>(_QWORD *a1, const std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_24F542688;
  a1[1] = 0;
  siri::intelligence::VariableArray::VariableArray(a1 + 3, a2);
  return a1;
}

void sub_22AF6B878(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string &,void>@<X0>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableDictionary>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22AF6B928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableDictionary>,0>(_QWORD *a1, const std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_24F5426D8;
  a1[1] = 0;
  siri::intelligence::VariableDictionary::VariableDictionary(a1 + 3, a2);
  return a1;
}

void sub_22AF6B974(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string &,void>@<X0>(const std::string *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableArray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22AF6B9CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableArray>,0>(_QWORD *a1, const std::string *a2)
{
  a1[2] = 0;
  *a1 = &unk_24F542688;
  a1[1] = 0;
  siri::intelligence::VariableArray::VariableArray(a1 + 3, a2);
  return a1;
}

void sub_22AF6BA18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableReference,std::allocator<siri::intelligence::VariableReference>,std::string &,void>(_QWORD *a1, const std::string *a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  v4[2] = 0;
  *v4 = &unk_24F5425E8;
  v4[1] = 0;
  result = siri::intelligence::VariableReference::VariableReference(v4 + 3, a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_22AF6BA80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableReference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F5425E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableReference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F5425E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableReference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<siri::intelligence::VariableFunction,std::allocator<siri::intelligence::VariableFunction>,std::string &,void>(uint64_t *a1, const std::string *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x88uLL);
  v4[2] = 0;
  *v4 = &unk_24F542638;
  v4[1] = 0;
  result = siri::intelligence::VariableFunction::VariableFunction((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_22AF6BB44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F542638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x68uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AF6BC64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24F542598;
  a1[1] = 0;
  siri::intelligence::VariableNumber::VariableNumber((siri::intelligence::VariableNumber *)(a1 + 3));
  return a1;
}

void sub_22AF6BCB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AF6BCF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24F542548;
  a1[1] = 0;
  siri::intelligence::VariableBoolean::VariableBoolean((siri::intelligence::VariableBoolean *)(a1 + 3));
  return a1;
}

void sub_22AF6BD44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22AF6BE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22AF6BE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

double YAML::EmitFromEvents::EmitFromEvents(YAML::EmitFromEvents *this, YAML::Emitter *a2)
{
  double result;

  *(_QWORD *)this = &off_24F542728;
  *((_QWORD *)this + 1) = a2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_24F542728;
  *((_QWORD *)this + 1) = a2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

uint64_t *YAML::EmitFromEvents::OnNull(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, (unsigned __int8 *)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  return YAML::Emitter::Write(a1[1]);
}

void sub_22AF6BF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::EmitFromEvents::BeginNode(YAML::Emitter *this)
{
  uint64_t v1;
  YAML::Emitter *v2;
  int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 7);
  if (v1)
  {
    v2 = this;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                               + (((unint64_t)(v1 + *((_QWORD *)this + 6) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v1 + *((_QWORD *)this + 6) - 1) & 0x3FF));
    if (v3 == 1)
    {
      v4 = 2;
      v5 = 27;
    }
    else
    {
      if (v3 != 2)
        return this;
      v4 = 1;
      v5 = 28;
    }
    this = YAML::Emitter::SetLocalValue(*((YAML::Emitter **)this + 1), v5);
    v6 = *((_QWORD *)v2 + 7) + *((_QWORD *)v2 + 6) - 1;
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)) = v4;
  }
  return this;
}

void YAML::EmitFromEvents::EmitProps(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  YAML::Emitter *v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  int v9;
  uint64_t *v10;
  std::string v11;
  std::string v12;
  std::string v13;
  void *__p;
  char v15;
  __int128 v16;
  char v17;

  if ((char)a2[23] < 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (!v7)
      goto LABEL_21;
    if (v7 == 1)
    {
      v8 = *(const std::string::value_type **)a2;
      v9 = *(unsigned __int8 *)v8;
      if (v9 == 33 || v9 == 63)
        goto LABEL_21;
      v6 = *(YAML::Emitter **)(a1 + 8);
    }
    else
    {
      v6 = *(YAML::Emitter **)(a1 + 8);
      v8 = *(const std::string::value_type **)a2;
    }
    std::string::__init_copy_ctor_external(&v12, v8, v7);
  }
  else
  {
    if (!a2[23])
      goto LABEL_21;
    if (a2[23] == 1)
    {
      v5 = *a2;
      if (v5 == 33 || v5 == 63)
        goto LABEL_21;
    }
    v6 = *(YAML::Emitter **)(a1 + 8);
    v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  YAML::_Tag::_Tag(&v13, &v16, (__int128 *)&v12, 0);
  if (v17 < 0)
    operator delete((void *)v16);
  YAML::Emitter::Write(v6, (uint64_t)&v13);
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (!a3)
      return;
    goto LABEL_22;
  }
LABEL_21:
  if (!a3)
    return;
LABEL_22:
  v10 = *(uint64_t **)(a1 + 8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v13, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v13 = v11;
  YAML::Emitter::Write(v10, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_22AF6C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::EmitFromEvents::OnAlias(YAML::Emitter *a1)
{
  uint64_t *v2;
  std::string __p;
  std::string v4;

  YAML::EmitFromEvents::BeginNode(a1);
  v2 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v4 = __p;
  YAML::Emitter::Write(v2, (uint64_t)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF6C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ToString(_anonymous_namespace_ *this)
{
  uint64_t v1;
  _QWORD v3[13];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB7F0];
  v1 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v5);
}

void sub_22AF6C3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::EmitFromEvents::OnScalar(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, const void **a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, a3, a4);
  return YAML::Emitter::Write(a1[1], a5);
}

void YAML::EmitFromEvents::OnSequenceStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unsigned int v9;
  YAML::Emitter *v10;
  int v11;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    v9 = 24;
  }
  else
  {
    if (a5 != 2)
      goto LABEL_6;
    v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(_BYTE **)v10)
    YAML::Emitter::EmitBeginSeq(v10);
  v11 = 0;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((_QWORD *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnSequenceEnd(YAML::EmitFromEvents *this)
{
  YAML::Emitter *v2;
  uint64_t v3;

  v2 = (YAML::Emitter *)*((_QWORD *)this + 1);
  if (**(_BYTE **)v2)
    YAML::Emitter::EmitEndSeq(v2);
  v3 = *((_QWORD *)this + 7) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                             + (((unint64_t)(v3 + *((_QWORD *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((_QWORD *)this + 6)) & 0x3FF)))
    __assert_rtn("OnSequenceEnd", "emitfromevents.cpp", 68, "m_stateStack.top() == State::WaitingForSequenceEntry");
  *((_QWORD *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
}

void YAML::EmitFromEvents::OnMapStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unsigned int v9;
  YAML::Emitter *v10;
  int v11;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    v9 = 24;
  }
  else
  {
    if (a5 != 2)
      goto LABEL_6;
    v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(_BYTE **)v10)
    YAML::Emitter::EmitBeginMap(v10);
  v11 = 1;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((_QWORD *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnMapEnd(YAML::EmitFromEvents *this)
{
  YAML::Emitter *v2;
  uint64_t v3;

  v2 = (YAML::Emitter *)*((_QWORD *)this + 1);
  if (**(_BYTE **)v2)
    YAML::Emitter::EmitEndMap(v2);
  v3 = *((_QWORD *)this + 7) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                             + (((unint64_t)(v3 + *((_QWORD *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((_QWORD *)this + 6)) & 0x3FF)) != 1)
    __assert_rtn("OnMapEnd", "emitfromevents.cpp", 92, "m_stateStack.top() == State::WaitingForKey");
  *((_QWORD *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
}

void YAML::EmitFromEvents::~EmitFromEvents(YAML::EmitFromEvents *this)
{
  *(_QWORD *)this = &off_24F542728;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((_QWORD *)this + 2);
}

{
  *(_QWORD *)this = &off_24F542728;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((_QWORD *)this + 2);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::deque<YAML::EmitFromEvents::State::value>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v31);
        v34 = v33;
        v35 = operator new(0x1000uLL);
        v36 = &v32[8 * v24];
        v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          v38 = 8 * v24;
          if (v6 < 1)
          {
            v73 = v35;
            v74 = v38 >> 2;
            if (v5 == v4)
              v75 = 1;
            else
              v75 = v74;
            v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v75);
            v36 = &v76[8 * (v75 >> 2)];
            v37 = &v76[8 * v77];
            if (v32)
              operator delete(v32);
            v32 = v76;
            v35 = v73;
          }
          else
          {
            v39 = v38 >> 3;
            if (v39 >= -1)
              v40 = v39 + 1;
            else
              v40 = v39 + 2;
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(_QWORD *)v36 = v35;
        v78 = v36 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32)
                v84 = 1;
              else
                v84 = (v37 - v32) >> 2;
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v84);
              v87 = v85;
              v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              v89 = v78 - v32;
              v88 = v78 == v32;
              v78 = v36;
              if (!v88)
              {
                v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                v90 = 8 * (v89 >> 3);
                v91 = v36;
                v92 = (uint64_t *)v32;
                do
                {
                  v93 = *v92++;
                  *(_QWORD *)v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              v37 = &v85[8 * v86];
              if (v32)
                operator delete(v32);
              v32 = v87;
            }
            else
            {
              v80 = (v37 - v78) >> 3;
              if (v80 >= -1)
                v81 = v80 + 1;
              else
                v81 = v80 + 2;
              v82 = v81 >> 1;
              v36 = &v32[8 * (v81 >> 1)];
              v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                v83 = v78;
              }
              v78 = &v83[8 * v82];
            }
          }
          v94 = *(_QWORD *)(i - 8);
          *((_QWORD *)v36 - 1) = v94;
          v36 -= 8;
        }
        v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95)
          operator delete(v95);
        goto LABEL_36;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v51 = 1;
          else
            v51 = (v25 - v4) >> 2;
          v52 = 2 * v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v51);
          v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v4;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v96 = 1;
            else
              v96 = (uint64_t)&v63[-*a1] >> 2;
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v96);
            v99 = &v97[8 * (v96 >> 2)];
            v100 = (uint64_t *)a1[1];
            v63 = v99;
            v101 = a1[2] - (_QWORD)v100;
            if (v101)
            {
              v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              v102 = 8 * (v101 >> 3);
              v103 = &v97[8 * (v96 >> 2)];
              do
              {
                v104 = *v100++;
                *(_QWORD *)v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v16 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v16)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v5[-*a1] >> 2;
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v5 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(_QWORD *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_22AF6CB8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 7) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void IE_GetClassName(NSObject *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v3;
  id v4;
  NSObject *v5;

  v5 = a1;
  if (v5)
  {
    v3 = (objc_class *)objc_opt_class();
    NSStringFromClass(v3);
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v4, "UTF8String"));

  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "nil");
  }

}

void sub_22AF6CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL IE_NSObjectIsBoolean(NSObject *a1)
{
  _BOOL8 v2;
  __int128 v5;
  char v6;

  IE_GetClassName(a1, &v5);
  if (v6 < 0)
  {
    v2 = *((_QWORD *)&v5 + 1) == 13
      && *(_QWORD *)v5 == 0x6F424643534E5F5FLL
      && *(_QWORD *)(v5 + 5) == 0x6E61656C6F6F4246;
    operator delete((void *)v5);
  }
  else
  {
    return v6 == 13 && (_QWORD)v5 == 0x6F424643534E5F5FLL && *(_QWORD *)((char *)&v5 + 5) == 0x6E61656C6F6F4246;
  }
  return v2;
}

void IE_NSObjectToVariable(NSObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  std::string *v37;
  const char *v38;
  std::string *p_str;
  NSObject *v40;
  __int128 *v41;
  NSObject *v42;
  uint64_t v43[2];
  uint64_t v44;
  uint64_t v45;
  std::string __str;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v42 = a1;
  if (!v42)
  {
LABEL_68:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_69;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_QWORD *)&v52 = -[NSObject UTF8String](objc_retainAutorelease(v42), "UTF8String");
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],char const*,void>("", (char **)&v52, &__str);
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    goto LABEL_69;
  }
  if (IE_NSObjectIsBoolean(v42))
  {
    LOBYTE(v44) = -[NSObject BOOLValue](v42, "BOOLValue");
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)&v44, &__str);
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[NSObject doubleValue](v42, "doubleValue");
    *(_QWORD *)&v52 = v3;
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", (double *)&v52, &__str);
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = a2;
    v5 = v42;
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__str);
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v6 = v5;
    v7 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v54;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v54 != v8)
            objc_enumerationMutation(v6);
          IE_NSObjectToVariable((uint64_t *)&v52, *(const NSObject **)(*((_QWORD *)&v53 + 1) + 8 * v9));
          if ((_QWORD)v52)
          {
            v10 = __str.__r_.__value_.__r.__words[0];
            v51 = v52;
            if (*((_QWORD *)&v52 + 1))
            {
              v11 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
              do
                v12 = __ldxr(v11);
              while (__stxr(v12 + 1, v11));
            }
            std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((char **)(v10 + 72), &v51);
            *(_BYTE *)(v10 + 64) = 1;
            v13 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
            if (*((_QWORD *)&v51 + 1))
            {
              v14 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
          }
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
          if (*((_QWORD *)&v52 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          ++v9;
        }
        while (v9 != v7);
        v7 = -[NSObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v53, v58, 16);
      }
      while (v7);
    }

    *v4 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    goto LABEL_69;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    IE_GetClassName(v42, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported NSObject type: %s", v38, p_str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
  v41 = (__int128 *)a2;
  v40 = v42;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v52);
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v19 = v40;
  v20 = -[NSObject countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v48;
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v48 != v21)
          objc_enumerationMutation(v19);
        v23 = *(NSObject **)(*((_QWORD *)&v47 + 1) + 8 * v22);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v24 = objc_retainAutorelease(v23);
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)-[NSObject UTF8String](v24, "UTF8String"));
          -[NSObject objectForKey:](v19, "objectForKey:", v24);
          v25 = objc_claimAutoreleasedReturnValue();
          IE_NSObjectToVariable(&v44, v25);
          v26 = v44;
          if (v44)
          {
            std::string::operator=((std::string *)(v44 + 8), &__str);
            v27 = v52;
            v28 = (std::__shared_weak_count *)v45;
            v43[0] = v26;
            v43[1] = v45;
            if (v45)
            {
              v29 = (unint64_t *)(v45 + 8);
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            siri::intelligence::VariableDictionary::AddProperty(v27, v43);
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
          v33 = (std::__shared_weak_count *)v45;
          if (v45)
          {
            v34 = (unint64_t *)(v45 + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }

        }
        else
        {
          IE_GetClassName(v23, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &__str;
          else
            v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Dictionary contains a non-string key of type: %s", v36, v37, v40);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v22;
      }
      while (v22 != v20);
      v20 = -[NSObject countByEnumeratingWithState:objects:count:](v19, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
    }
    while (v20);
  }

  *v41 = v52;
  v52 = 0uLL;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v52);

LABEL_69:
}

void sub_22AF6D2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id IE_VariableToNSObject(uint64_t a1)
{
  const void *v1;
  void *v3;
  const char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  double *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  siri::intelligence::VariableArray *v24;
  siri::intelligence::VariableArray *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  const void ***v36;
  const void ***v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 *v53;
  __int128 *v54;
  BOOL v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::string v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 *v75;
  _QWORD *v76[3];
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  siri::intelligence::VariableArray *v80;
  std::__shared_weak_count *v81;
  unsigned __int8 *v82;
  std::__shared_weak_count *v83;
  double *v84;
  std::__shared_weak_count *v85;
  char *v86;
  std::__shared_weak_count *v87;
  void *v88;
  std::__shared_weak_count *v89;

  v1 = *(const void **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  if (v3)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    v88 = v3;
    v89 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Found a variable reference that should already have been pinned.", v4);
    v8 = 0;
    if (!v5)
      return v8;
    goto LABEL_107;
  }
  v88 = 0;
  v89 = 0;
  if (!v10)
  {
    v86 = 0;
    v87 = 0;
    if (v15)
    {
      v16 = *(std::__shared_weak_count **)(a1 + 8);
      v84 = v15;
      v85 = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v15[9]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)
        goto LABEL_100;
    }
    else
    {
      v84 = 0;
      v85 = 0;
      if (v20)
      {
        v21 = *(std::__shared_weak_count **)(a1 + 8);
        v82 = v20;
        v83 = v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", v20[66]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v82 = 0;
        v83 = 0;
        if (v24)
        {
          v25 = v24;
          v26 = *(std::__shared_weak_count **)(a1 + 8);
          v80 = v24;
          v81 = v26;
          if (v26)
          {
            v27 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v8 = (void *)objc_opt_new();
          v29 = *((_QWORD *)v25 + 10) - *((_QWORD *)v25 + 9);
          if (v29)
          {
            v30 = 0;
            v31 = v29 >> 4;
            do
            {
              siri::intelligence::VariableArray::GetItem((uint64_t)v80, v30, &v78);
              IE_VariableToNSObject(&v78);
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              v33 = v79;
              if (v79)
              {
                v34 = (unint64_t *)&v79->__shared_owners_;
                do
                  v35 = __ldaxr(v34);
                while (__stlxr(v35 - 1, v34));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              if (v32)
                objc_msgSend(v8, "addObject:", v32);

              ++v30;
            }
            while (v30 != v31);
          }
        }
        else
        {
          v80 = 0;
          v81 = 0;
          if (v36)
          {
            v37 = v36;
            v38 = *(std::__shared_weak_count **)(a1 + 8);
            v76[2] = v36;
            v77 = v38;
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v8 = (void *)objc_opt_new();
            std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v75, v37 + 9);
            v41 = v75;
            if (v75 != (__int128 *)v76)
            {
              do
              {
                std::pair<std::string const,std::shared_ptr<siri::intelligence::Variable>>::pair[abi:ne180100](&v72, v41 + 2);
                v70 = v73;
                v71 = v74;
                if (v74)
                {
                  v42 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v43 = __ldxr(v42);
                  while (__stxr(v43 + 1, v42));
                }
                IE_VariableToNSObject(&v70);
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = v71;
                if (v71)
                {
                  v46 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                if (v44)
                {
                  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v48 = &v72;
                  else
                    v48 = (std::string *)v72.__r_.__value_.__r.__words[0];
                  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v48, v70);
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v8, "setObject:forKey:", v44, v49);

                }
                v50 = v74;
                if (v74)
                {
                  v51 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v72.__r_.__value_.__l.__data_);
                v53 = (__int128 *)*((_QWORD *)v41 + 1);
                if (v53)
                {
                  do
                  {
                    v54 = v53;
                    v53 = *(__int128 **)v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    v54 = (__int128 *)*((_QWORD *)v41 + 2);
                    v55 = *(_QWORD *)v54 == (_QWORD)v41;
                    v41 = v54;
                  }
                  while (!v55);
                }
                v41 = v54;
              }
              while (v54 != (__int128 *)v76);
            }
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v75, v76[0]);
            v56 = v77;
            if (v77)
            {
              v57 = (unint64_t *)&v77->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            v8 = 0;
          }
        }
        v59 = v81;
        if (v81)
        {
          v60 = (unint64_t *)&v81->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v21 = v83;
      }
      if (v21)
      {
        v62 = (unint64_t *)&v21->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 = v85;
      if (!v85)
        goto LABEL_100;
    }
    v64 = (unint64_t *)&v16->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_100:
    v11 = v87;
    goto LABEL_101;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  v86 = v10;
  v87 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (void *)MEMORY[0x24BDD17C8];
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    v72 = *(std::string *)(v10 + 3);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v72;
  else
    v19 = (std::string *)v72.__r_.__value_.__r.__words[0];
  objc_msgSend(v14, "stringWithUTF8String:", v19);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
LABEL_101:
  if (v11)
  {
    v66 = (unint64_t *)&v11->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v5 = v89;
  if (!v89)
    return v8;
LABEL_107:
  v68 = (unint64_t *)&v5->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (!v69)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v8;
}

void sub_22AF6D9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  void *v28;
  uint64_t v29;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 128);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 112);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v29 - 96);
  _Unwind_Resume(a1);
}

id IE_VariableToIEVariable(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  std::string *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  std::string *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;

  if (!*a1)
    return 0;
  v2 = (void *)objc_opt_new();
  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = *a1;
  if (*(char *)(*a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 8);
    v22.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v22;
  else
    v7 = (std::string *)v22.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setName:", v8);

  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v9 = (void *)MEMORY[0x24BDD17C8];
  v10 = *a1;
  if (*(char *)(*a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v10 + 32), *(_QWORD *)(v10 + 40));
  else
    v22 = *(std::string *)(v10 + 32);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v22;
  else
    v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  objc_msgSend(v9, "stringWithUTF8String:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setType:", v12);

  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  objc_msgSend(v2, "setPersistent:", *(unsigned __int8 *)(*a1 + 65));
  v13 = (std::__shared_weak_count *)a1[1];
  v20 = *a1;
  v21 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  IE_VariableToNSObject((uint64_t)&v20);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:", v16, v20);

  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v2;
}

void sub_22AF6DC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

id IE_ExpandedConditionToIECondition(const siri::intelligence::ResolvedCondition *a1)
{
  void *v2;
  void *v3;
  std::string *p_p;
  void *v5;
  void *v6;
  std::string *v7;
  void *v8;
  void *v9;
  const siri::intelligence::ResolvedCondition *i;
  std::string::size_type size;
  void *v12;
  std::string __p;
  std::string *v15;

  v2 = (void *)objc_opt_new();
  v3 = (void *)MEMORY[0x24BDD17C8];
  if (*((char *)a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
  else
    __p = *(std::string *)a1;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v3, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setConditionId:", v5);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (void *)MEMORY[0x24BDD17C8];
  if (*((char *)a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
  else
    __p = *(std::string *)((_BYTE *)a1 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(v6, "stringWithUTF8String:", v7, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setExpression:", v8);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  objc_msgSend(v2, "setValue:", *((unsigned __int8 *)a1 + 48));
  v9 = (void *)objc_opt_new();
  memset(&__p, 0, sizeof(__p));
  std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(&__p, *((_QWORD *)a1 + 7), *((_QWORD *)a1 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 4));
  size = __p.__r_.__value_.__l.__size_;
  for (i = (const siri::intelligence::ResolvedCondition *)__p.__r_.__value_.__r.__words[0];
        i != (const siri::intelligence::ResolvedCondition *)size;
        i = (const siri::intelligence::ResolvedCondition *)((char *)i + 80))
  {
    IE_ExpandedConditionToIECondition(i);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObject:", v12);

  }
  v15 = &__p;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  objc_msgSend(v2, "setChildren:", v9);

  return v2;
}

void sub_22AF6DEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

id IE_ResponseToIEResponse(const siri::intelligence::ExecStateResponse **a1)
{
  const siri::intelligence::ExecStateResponse *v2;
  const siri::intelligence::ExecStateResponse *v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  std::string *v12;
  void *v13;
  void *v14;
  std::string *v15;
  void *v16;
  void *v17;
  __int128 v18;
  std::string *v19;
  void *v20;
  void *v21;
  std::string *v22;
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  std::string *v43;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  std::string *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  void *v70;
  void *v71;
  std::string *v72;
  void *v73;
  void *v74;
  __int128 v75;
  std::string *v76;
  void *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *size;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  id v101;
  std::string::size_type v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::string v116;
  uint64_t *v117;
  std::string v118;
  std::string v119;
  char *v120;
  std::__shared_weak_count *v121;
  char v122[8];
  std::__shared_weak_count *v123;
  void *v124[16];
  std::__shared_weak_count *v125;
  void *v126[16];
  std::__shared_weak_count *v127;
  uint64_t v128;

  v101 = (id)objc_opt_new();
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      siri::intelligence::ExecStateResponse::ExecStateResponse((siri::intelligence::ExecStateResponse *)v122, v2);
      if (!siri::intelligence::ExecStateResponse::IsDialog((siri::intelligence::ExecStateResponse *)v122))
      {
        if (!siri::intelligence::ExecStateResponse::IsBehavior((siri::intelligence::ExecStateResponse *)v122))
          goto LABEL_168;
        siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ResponseBase *)&v117, (const siri::intelligence::ResponseBase *)v126);
        v117 = (uint64_t *)&unk_24F540670;
        v120 = (char *)v126[15];
        v121 = v127;
        if (v127)
        {
          p_shared_owners = (unint64_t *)&v127->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        v10 = (void *)objc_opt_new();
        v11 = (void *)MEMORY[0x24BDD17C8];
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v116, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
        else
          v116 = v118;
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v116;
        else
          v69 = (std::string *)v116.__r_.__value_.__r.__words[0];
        objc_msgSend(v11, "stringWithUTF8String:", v69);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setResponse_id:", v70);

        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        v71 = (void *)MEMORY[0x24BDD17C8];
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v116, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
        else
          v116 = v119;
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &v116;
        else
          v72 = (std::string *)v116.__r_.__value_.__r.__words[0];
        objc_msgSend(v71, "stringWithUTF8String:", v72);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setInputGroupId:", v73);

        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        v74 = (void *)MEMORY[0x24BDD17C8];
        if (v120[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)v120, *((_QWORD *)v120 + 1));
        }
        else
        {
          v75 = *(_OWORD *)v120;
          v116.__r_.__value_.__r.__words[2] = *((_QWORD *)v120 + 2);
          *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v75;
        }
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v116;
        else
          v76 = (std::string *)v116.__r_.__value_.__r.__words[0];
        objc_msgSend(v74, "stringWithUTF8String:", v76);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setName:", v77);

        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        v78 = *((_QWORD *)v120 + 3);
        v79 = *((_QWORD *)v120 + 4);
        v116.__r_.__value_.__r.__words[0] = v78;
        v116.__r_.__value_.__l.__size_ = v79;
        if (v79)
        {
          v80 = (unint64_t *)(v79 + 8);
          do
            v81 = __ldxr(v80);
          while (__stxr(v81 + 1, v80));
          if (v78)
          {
            v102 = v78;
            v103 = (std::__shared_weak_count *)v79;
            do
              v82 = __ldxr(v80);
            while (__stxr(v82 + 1, v80));
            goto LABEL_152;
          }
        }
        else if (v78)
        {
          v102 = v78;
          v103 = 0;
LABEL_152:
          IE_VariableToNSObject((uint64_t)&v102);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "setParameters:", v83);

          v84 = v103;
          if (v103)
          {
            v85 = (unint64_t *)&v103->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        objc_msgSend(v101, "addObject:", v10);
        size = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
        if (v116.__r_.__value_.__l.__size_)
        {
          v88 = (unint64_t *)(v116.__r_.__value_.__l.__size_ + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }

        v117 = (uint64_t *)&unk_24F540670;
        v66 = v121;
        if (!v121)
          goto LABEL_167;
        v90 = (unint64_t *)&v121->__shared_owners_;
        do
          v68 = __ldaxr(v90);
        while (__stlxr(v68 - 1, v90));
        goto LABEL_165;
      }
      siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ResponseBase *)&v117, (const siri::intelligence::ResponseBase *)v124);
      v117 = (uint64_t *)&unk_24F5406D8;
      v120 = (char *)v124[15];
      v121 = v125;
      if (v125)
      {
        v4 = (unint64_t *)&v125->__shared_owners_;
        do
          v5 = __ldxr(v4);
        while (__stxr(v5 + 1, v4));
      }
      v6 = (void *)objc_opt_new();
      v7 = (void *)MEMORY[0x24BDD17C8];
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v116, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
      else
        v116 = v118;
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v116;
      else
        v12 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v7, "stringWithUTF8String:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setResponse_id:", v13);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v14 = (void *)MEMORY[0x24BDD17C8];
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v116, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
      else
        v116 = v119;
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v116;
      else
        v15 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v14, "stringWithUTF8String:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setInputGroupId:", v16);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v17 = (void *)MEMORY[0x24BDD17C8];
      if (v120[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)v120, *((_QWORD *)v120 + 1));
      }
      else
      {
        v18 = *(_OWORD *)v120;
        v116.__r_.__value_.__r.__words[2] = *((_QWORD *)v120 + 2);
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v18;
      }
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v116;
      else
        v19 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v17, "stringWithUTF8String:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setText:", v20);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v21 = (void *)MEMORY[0x24BDD17C8];
      if (v120[111] < 0)
        std::string::__init_copy_ctor_external(&v116, *((const std::string::value_type **)v120 + 11), *((_QWORD *)v120 + 12));
      else
        v116 = *(std::string *)(v120 + 88);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v116;
      else
        v22 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v21, "stringWithUTF8String:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setCatId:", v23);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v24 = *((_QWORD *)v120 + 14);
      v25 = (std::__shared_weak_count *)*((_QWORD *)v120 + 15);
      v114 = v24;
      v115 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        if (!v24)
          goto LABEL_58;
        v112 = v24;
        v113 = v25;
        do
          v28 = __ldxr(v26);
        while (__stxr(v28 + 1, v26));
      }
      else
      {
        if (!v24)
          goto LABEL_58;
        v112 = v24;
        v113 = 0;
      }
      IE_VariableToNSObject((uint64_t)&v112);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setCatParameters:", v29);

      v30 = v113;
      if (v113)
      {
        v31 = (unint64_t *)&v113->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
LABEL_58:
      v33 = *((_QWORD *)v120 + 16);
      v34 = (std::__shared_weak_count *)*((_QWORD *)v120 + 17);
      v110 = v33;
      v111 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        if (!v33)
          goto LABEL_72;
        v108 = v33;
        v109 = v34;
        do
          v37 = __ldxr(v35);
        while (__stxr(v37 + 1, v35));
      }
      else
      {
        if (!v33)
          goto LABEL_72;
        v108 = v33;
        v109 = 0;
      }
      IE_VariableToNSObject((uint64_t)&v108);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setVisualParameters:", v38);

      v39 = v109;
      if (v109)
      {
        v40 = (unint64_t *)&v109->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
LABEL_72:
      v42 = (void *)MEMORY[0x24BDD17C8];
      if (v120[167] < 0)
        std::string::__init_copy_ctor_external(&v116, *((const std::string::value_type **)v120 + 18), *((_QWORD *)v120 + 19));
      else
        v116 = *(std::string *)(v120 + 6);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v116;
      else
        v43 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v42, "stringWithUTF8String:", v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setPatternId:", v44);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v45 = *((_QWORD *)v120 + 21);
      v46 = (std::__shared_weak_count *)*((_QWORD *)v120 + 22);
      v106 = v45;
      v107 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        if (v45)
        {
          v104 = v45;
          v105 = v46;
          do
            v49 = __ldxr(v47);
          while (__stxr(v49 + 1, v47));
LABEL_89:
          IE_VariableToNSObject((uint64_t)&v104);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "setPatternParameters:", v50);

          v51 = v105;
          if (v105)
          {
            v52 = (unint64_t *)&v105->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
      }
      else if (v45)
      {
        v104 = v45;
        v105 = 0;
        goto LABEL_89;
      }
      objc_msgSend(v6, "setSensitiveData:", v120[184]);
      v54 = (void *)MEMORY[0x24BDD17C8];
      if (v120[215] < 0)
        std::string::__init_copy_ctor_external(&v116, *((const std::string::value_type **)v120 + 24), *((_QWORD *)v120 + 25));
      else
        v116 = *(std::string *)(v120 + 8);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v116;
      else
        v55 = (std::string *)v116.__r_.__value_.__r.__words[0];
      objc_msgSend(v54, "stringWithUTF8String:", v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setDialogPhase:", v56);

      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      objc_msgSend(v101, "addObject:", v6);
      v57 = v107;
      if (v107)
      {
        v58 = (unint64_t *)&v107->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v111;
      if (v111)
      {
        v61 = (unint64_t *)&v111->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = v115;
      if (v115)
      {
        v64 = (unint64_t *)&v115->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }

      v117 = (uint64_t *)&unk_24F5406D8;
      v66 = v121;
      if (!v121)
        goto LABEL_167;
      v67 = (unint64_t *)&v121->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
LABEL_165:
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
LABEL_167:
      siri::intelligence::ResponseBase::~ResponseBase((void **)&v117);
LABEL_168:
      v117 = &v128;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      v126[0] = &unk_24F540670;
      v91 = v127;
      if (v127)
      {
        v92 = (unint64_t *)&v127->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      siri::intelligence::ResponseBase::~ResponseBase(v126);
      v124[0] = &unk_24F5406D8;
      v94 = v125;
      if (v125)
      {
        v95 = (unint64_t *)&v125->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      siri::intelligence::ResponseBase::~ResponseBase(v124);
      v97 = v123;
      if (v123)
      {
        v98 = (unint64_t *)&v123->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v2 = (const siri::intelligence::ExecStateResponse *)((char *)v2 + 312);
    }
    while (v2 != v3);
  }
  return v101;
}

void sub_22AF6E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;

  a35 = &unk_24F540670;
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a10);
  siri::intelligence::ResponseBase::~ResponseBase(&a35);
  siri::intelligence::ExecStateResponse::~ExecStateResponse((siri::intelligence::ExecStateResponse *)&a52);

  _Unwind_Resume(a1);
}

void sub_22AF6EB74()
{
  JUMPOUT(0x22AF6EB64);
}

void IE_GetTemplateDirFromBundle(NSBundle *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  NSBundle *v4;
  const char *v5;
  NSBundle *v6;
  void *v7;
  char *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  uint64_t v12;
  void *v13[2];
  char v14;

  v4 = a1;
  v6 = v4;
  if (v4)
  {
    -[NSBundle resourcePath](v4, "resourcePath");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[NSBundle resourcePath](v6, "resourcePath");
      v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v8 = (char *)objc_msgSend(v2, "UTF8String");
    }
    else
    {
      v8 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(v13, v8);
    if (v7)

    siri::intelligence::JoinPath((uint64_t)v13, (uint64_t)siri::intelligence::Configuration::TEMPLATES_DIR, (uint64_t)__p);
    if (siri::intelligence::DirExists((uint64_t *)__p))
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = v12;
    }
    else
    {
      v10 = __p;
      if (v12 < 0)
        v10 = (void **)__p[0];
      siri::intelligence::Log::Warning((siri::intelligence::Log *)"Bundle Templates directory not found: %s", v9, v10);
      std::string::basic_string[abi:ne180100]<0>(a2, "");
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Invalid flow request: nil bundle provided", v5);
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }

}

void sub_22AF6ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

_QWORD *IEDefer::IEDefer(_QWORD *a1, uint64_t a2)
{
  *a1 = MEMORY[0x22E2EA050](a2);
  return a1;
}

{
  *a1 = MEMORY[0x22E2EA050](a2);
  return a1;
}

void IEDefer::~IEDefer(void (***this)(void))
{
  void (**v2)(void);
  void (**v3)(void);

  v2 = *this;
  if (v2)
  {
    v2[2]();
    v3 = *this;
  }
  else
  {
    v3 = 0;
  }

}

IEEvent *IE_IntentToIEEvent(siri::intelligence::Intent **a1)
{
  void *v1;
  siri::intelligence::Intent *v2;
  void *v4;
  std::string *v6;
  uint64_t v7;
  void *v8;
  siri::intelligence::Intent *v9;
  __int128 v10;
  std::string *v11;
  siri::intelligence::Intent *v12;
  std::string::size_type i;
  std::string::size_type size;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  __int128 v28;
  std::string *v29;
  void *v30;
  void *v31;
  siri::intelligence::Intent **v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::string *v46;
  void *v47;
  void *v48;
  siri::intelligence::Intent *v49;
  std::string::size_type v50;
  void *v51;
  void *v52;
  void *v53;
  std::string::size_type v54;
  void *v55;
  std::string *v56;
  void *v57;
  void *v58;
  std::string *v59;
  void *v60;
  std::string *v61;
  void *v62;
  std::string::size_type v63;
  void *v64;
  void *v65;
  std::string *v66;
  void *v67;
  std::string *v68;
  void *v69;
  siri::intelligence::Intent *v70;
  __int128 v71;
  void *v72;
  void *v73;
  void *v74;
  siri::intelligence::Intent *v75;
  std::string::size_type j;
  std::string::size_type v77;
  void *v78;
  std::string::size_type v79;
  void *v80;
  void *v81;
  siri::intelligence::Intent *v82;
  __int128 v83;
  void *v84;
  void *v85;
  void *v86;
  siri::intelligence::Intent *v87;
  std::string::size_type k;
  std::string::size_type v89;
  std::string::size_type v90;
  void *v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::string::size_type v108;
  _QWORD *v109;
  void *v110;
  std::string *v111;
  std::string *v112;
  BOOL v113;
  void *v114;
  IEEvent *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  siri::intelligence::Intent **v122;
  void *v123;
  IEEvent *v124;
  void *v125;
  void **v126[2];
  std::string v127;
  std::string v128;
  std::string v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  std::string v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::string v135;
  uint64_t v136;
  std::__shared_weak_count *v137;

  v2 = *a1;
  if (!*a1)
    return (IEEvent *)0;
  v4 = (void *)MEMORY[0x24BDD17C8];
  if (*((char *)v2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v132, *((const std::string::value_type **)v2 + 3), *((_QWORD *)v2 + 4));
  else
    v132 = *(std::string *)((_BYTE *)v2 + 1);
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v132;
  else
    v6 = (std::string *)v132.__r_.__value_.__r.__words[0];
  objc_msgSend(v4, "stringWithUTF8String:", v6);
  v7 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  v8 = (void *)MEMORY[0x24BDD17C8];
  v9 = *a1;
  if (*((char *)*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v132.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v10;
  }
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v132;
  else
    v11 = (std::string *)v132.__r_.__value_.__r.__words[0];
  objc_msgSend(v8, "stringWithUTF8String:", v11);
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  v124 = -[IEEvent initWithName:withId:]([IEEvent alloc], "initWithName:withId:", v7, v123);
  v125 = (void *)objc_opt_new();
  v121 = (void *)v7;
  v122 = a1;
  v12 = *a1;
  memset(&v132, 0, sizeof(v132));
  std::vector<siri::intelligence::NLParameters>::__init_with_size[abi:ne180100]<siri::intelligence::NLParameters*,siri::intelligence::NLParameters*>(&v132, *((__int128 **)v12 + 24), *((__int128 **)v12 + 25), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v12 + 25) - *((_QWORD *)v12 + 24)) >> 3));
  size = v132.__r_.__value_.__l.__size_;
  for (i = v132.__r_.__value_.__r.__words[0]; i != size; i += 40)
  {
    v15 = (void *)objc_opt_new();
    v17 = *(_QWORD *)(i + 24);
    v16 = *(std::__shared_weak_count **)(i + 32);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v136 = v17;
    v137 = v16;
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = 0uLL;
    IE_VariableToNSObject((uint64_t)&v136);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v137;
    if (v137)
    {
      v22 = (unint64_t *)&v137->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
    if (v135.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (void *)MEMORY[0x24BDD17C8];
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v135, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v28 = *(_OWORD *)i;
      v135.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v28;
    }
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v135;
    else
      v29 = (std::string *)v135.__r_.__value_.__r.__words[0];
    objc_msgSend(v27, "stringWithUTF8String:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setName:", v30);

    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    v31 = v20;
    if (!v20)
    {
      v1 = (void *)objc_opt_new();
      v31 = v1;
    }
    objc_msgSend(v15, "setParameters:", v31);
    if (!v20)

    objc_msgSend(v125, "addObject:", v15);
  }
  v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  std::vector<siri::intelligence::NLParameters>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
  -[IEEvent setParsers:](v124, "setParsers:", v125);
  v32 = a1;
  siri::intelligence::Intent::GetNlProducer(*a1, &v132);
  v33 = (void *)objc_opt_new();
  v35 = v133;
  v34 = v134;
  if (v134)
  {
    v36 = (unint64_t *)&v134->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v130 = v35;
  v131 = v34;
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = 0uLL;
  v120 = v33;
  IE_VariableToNSObject((uint64_t)&v130);
  v38 = objc_claimAutoreleasedReturnValue();
  v39 = v131;
  if (v131)
  {
    v40 = (unint64_t *)&v131->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)v135.__r_.__value_.__l.__size_;
  if (v135.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(v135.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (void *)MEMORY[0x24BDD17C8];
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v135, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v135 = v132;
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v135;
  else
    v46 = (std::string *)v135.__r_.__value_.__r.__words[0];
  objc_msgSend(v45, "stringWithUTF8String:", v46, v38);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setName:", v47);

  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  v48 = (void *)v38;
  if (!v38)
    v48 = (void *)objc_opt_new();
  objc_msgSend(v33, "setParameters:", v48);
  if (!v38)

  -[IEEvent setProducer:](v124, "setProducer:", v33);
  std::string::basic_string[abi:ne180100]<0>(&v135, "socialCATI");
  v49 = *v122;
  if (*((char *)*v122 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&v129, *((const std::string::value_type **)v49 + 9), *((_QWORD *)v49 + 10));
    v49 = *v122;
  }
  else
  {
    v129 = *(std::string *)((_BYTE *)v49 + 3);
  }
  if (*((char *)v49 + 119) < 0)
    std::string::__init_copy_ctor_external(&v128, *((const std::string::value_type **)v49 + 12), *((_QWORD *)v49 + 13));
  else
    v128 = *(std::string *)((_BYTE *)v49 + 4);
  v50 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = v129.__r_.__value_.__l.__size_;
  if (v50)
  {
    v51 = (void *)objc_opt_new();
    v52 = (void *)objc_opt_new();
    v53 = (void *)objc_opt_new();
    v54 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
    if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = v128.__r_.__value_.__l.__size_;
    if (v54)
    {
      v55 = (void *)objc_opt_new();
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v128;
      else
        v56 = (std::string *)v128.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "setObject:forKey:", v57, CFSTR("identifierValue"));

      objc_msgSend(v53, "addObject:", v55);
    }
    v58 = (void *)objc_opt_new();
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v129;
    else
      v59 = (std::string *)v129.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v59);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKey:", v60, CFSTR("identifierValue"));

    objc_msgSend(v58, "setObject:forKey:", CFSTR("intentName"), CFSTR("namespace"));
    objc_msgSend(v53, "addObject:", v58);
    objc_msgSend(v52, "setObject:forKey:", v53, CFSTR("matchers"));
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = &v135;
    else
      v61 = (std::string *)v135.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "setName:", v62);

    objc_msgSend(v51, "setParameters:", v52);
    objc_msgSend(v125, "addObject:", v51);
    -[IEEvent setParsers:](v124, "setParsers:", v125);

  }
  v63 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v63 = v128.__r_.__value_.__l.__size_;
  if (v63)
  {
    v64 = (void *)objc_opt_new();
    v65 = (void *)objc_opt_new();
    if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v128;
    else
      v66 = (std::string *)v128.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "setObject:forKey:", v67, CFSTR("identifierValue"));

    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v135;
    else
      v68 = (std::string *)v135.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "setName:", v69);

    objc_msgSend(v64, "setParameters:", v65);
    -[IEEvent setProducer:](v124, "setProducer:", v64);

  }
  v70 = *v122;
  memset(&v127, 0, sizeof(v127));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, *((__int128 **)v70 + 15), *((__int128 **)v70 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v70 + 16) - *((_QWORD *)v70 + 15)) >> 3));
  v71 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
  v126[0] = (void **)&v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v126);
  if ((_QWORD)v71 != *((_QWORD *)&v71 + 1))
  {
    v72 = (void *)objc_opt_new();
    v73 = (void *)objc_opt_new();
    v74 = (void *)objc_opt_new();
    v75 = *v122;
    memset(&v127, 0, sizeof(v127));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, *((__int128 **)v75 + 15), *((__int128 **)v75 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v75 + 16) - *((_QWORD *)v75 + 15)) >> 3));
    v77 = v127.__r_.__value_.__l.__size_;
    for (j = v127.__r_.__value_.__r.__words[0]; j != v77; j += 24)
    {
      v78 = (void *)objc_opt_new();
      v79 = j;
      if (*(char *)(j + 23) < 0)
        v79 = *(_QWORD *)j;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v79);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setObject:forKey:", v80, CFSTR("identifier"));

      objc_msgSend(v74, "addObject:", v78);
    }
    v126[0] = (void **)&v127;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v126);
    objc_msgSend(v73, "setObject:forKey:", v74, CFSTR("invocations"));
    v32 = v122;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "directInvocation");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "setName:", v81);

    objc_msgSend(v72, "setParameters:", v73);
    objc_msgSend(v125, "addObject:", v72);
    -[IEEvent setParsers:](v124, "setParsers:", v125);

  }
  v82 = *v32;
  memset(&v127, 0, sizeof(v127));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, *((__int128 **)v82 + 18), *((__int128 **)v82 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v82 + 19) - *((_QWORD *)v82 + 18)) >> 3));
  v83 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
  v126[0] = (void **)&v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v126);
  if ((_QWORD)v83 != *((_QWORD *)&v83 + 1))
  {
    v84 = (void *)objc_opt_new();
    v85 = (void *)objc_opt_new();
    v86 = (void *)objc_opt_new();
    v87 = *v32;
    memset(&v127, 0, sizeof(v127));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v127, *((__int128 **)v87 + 18), *((__int128 **)v87 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v87 + 19) - *((_QWORD *)v87 + 18)) >> 3));
    v89 = v127.__r_.__value_.__l.__size_;
    for (k = v127.__r_.__value_.__r.__words[0]; k != v89; k += 24)
    {
      v90 = k;
      if (*(char *)(k + 23) < 0)
        v90 = *(_QWORD *)k;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v90);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v86, "addObject:", v91);

    }
    v126[0] = (void **)&v127;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v126);
    objc_msgSend(v85, "setObject:forKey:", v86, CFSTR("userDialogActs"));
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "usoLiteral");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v84, "setName:", v92);

    objc_msgSend(v84, "setParameters:", v85);
    objc_msgSend(v125, "addObject:", v84);
    -[IEEvent setParsers:](v124, "setParsers:", v125);

  }
  v93 = *((_QWORD *)*v32 + 32);
  v94 = (std::__shared_weak_count *)*((_QWORD *)*v32 + 33);
  if (!v94)
  {
    if (!*(_QWORD *)(v93 + 16))
      goto LABEL_146;
    goto LABEL_128;
  }
  v95 = (unint64_t *)&v94->__shared_owners_;
  do
    v96 = __ldxr(v95);
  while (__stxr(v96 + 1, v95));
  v97 = *(_QWORD *)(v93 + 16);
  do
    v98 = __ldaxr(v95);
  while (__stlxr(v98 - 1, v95));
  if (v98)
  {
    if (!v97)
      goto LABEL_146;
LABEL_128:
    v99 = (void *)objc_opt_new();
    v100 = (void *)objc_opt_new();
    v101 = (void *)objc_opt_new();
    v102 = (void **)*((_QWORD *)*v32 + 32);
    v103 = (std::__shared_weak_count *)*((_QWORD *)*v32 + 33);
    v126[0] = v102;
    v126[1] = (void **)&v103->__vftable;
    if (v103)
    {
      v104 = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v127, (const void ***)v102);
    if (v103)
    {
      v106 = (unint64_t *)&v103->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v108 = v127.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v127.__r_.__value_.__l.__data_ != &v127.__r_.__value_.__r.__words[1])
    {
      do
      {
        v109 = (_QWORD *)(v108 + 32);
        if (*(char *)(v108 + 55) < 0)
          v109 = (_QWORD *)*v109;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v109);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "addObject:", v110);

        v111 = *(std::string **)(v108 + 8);
        if (v111)
        {
          do
          {
            v112 = v111;
            v111 = (std::string *)v111->__r_.__value_.__r.__words[0];
          }
          while (v111);
        }
        else
        {
          do
          {
            v112 = *(std::string **)(v108 + 16);
            v113 = v112->__r_.__value_.__r.__words[0] == v108;
            v108 = (std::string::size_type)v112;
          }
          while (!v113);
        }
        v108 = (std::string::size_type)v112;
      }
      while (v112 != (std::string *)&v127.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::string>::destroy((uint64_t)&v127, (char *)v127.__r_.__value_.__l.__size_);
    objc_msgSend(v100, "setObject:forKey:", v101, CFSTR("utterances"));
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "exactMatch");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v99, "setName:", v114);

    objc_msgSend(v99, "setParameters:", v100);
    objc_msgSend(v125, "addObject:", v99);
    -[IEEvent setParsers:](v124, "setParsers:", v125);

    goto LABEL_146;
  }
  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
  std::__shared_weak_count::__release_weak(v94);
  if (v97)
    goto LABEL_128;
LABEL_146:
  v115 = v124;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);

  v116 = v134;
  if (v134)
  {
    v117 = (unint64_t *)&v134->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);

  return v115;
}

void sub_22AF6FA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;

  if (a26 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));

  siri::intelligence::DirectInvocation::~DirectInvocation(&a37);
  _Unwind_Resume(a1);
}

void IE_IEEventToIntent(IEEvent *a1@<X0>, std::string *a2@<X8>)
{
  IEEvent *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  std::string __str;

  v3 = a1;
  siri::intelligence::Intent::Intent((siri::intelligence::Intent *)a2);
  if (v3)
  {
    -[IEEvent eventId](v3, "eventId");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      -[IEEvent eventId](v3, "eventId");
      v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v5, "UTF8String"));
      std::string::operator=(a2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);

    }
    -[IEEvent name](v3, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[IEEvent name](v3, "name");
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v7, "UTF8String"));
      std::string::operator=(a2 + 1, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);

    }
  }

}

void sub_22AF6FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void **v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  siri::intelligence::Intent::~Intent(v16);
  _Unwind_Resume(a1);
}

IEInputGroup *IE_InputGroupToIEInputGroup(uint64_t **a1)
{
  uint64_t *v1;
  void *v3;
  IEInputGroup *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v1 = *a1;
  if (*a1)
  {
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[IEInputGroup initWithId:]([IEInputGroup alloc], "initWithId:", v3);
    -[IEInputGroup setListenAfterSpeaking:](v4, "setListenAfterSpeaking:", *((unsigned __int8 *)*a1 + 52));
    -[IEInputGroup setImmersiveExperience:](v4, "setImmersiveExperience:", *((unsigned __int8 *)*a1 + 53));
    v5 = (std::__shared_weak_count *)(*a1)[8];
    v14 = (*a1)[7];
    v15 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    IE_VariableToNSObject((uint64_t)&v14);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v8;
    if (!v8)
      v12 = (void *)objc_opt_new();
    -[IEInputGroup setNlParameters:](v4, "setNlParameters:", v12, v14);
    if (!v8)

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_22AF6FFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void IE_IEDirectInvocationToDirectInvocation(IEDirectInvocation *a1@<X0>, uint64_t a2@<X8>)
{
  IEDirectInvocation *v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string __str;

  v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  -[IEDirectInvocation identifier](v3, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[IEDirectInvocation identifier](v3, "identifier");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v5, "UTF8String"));
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

  }
  -[IEDirectInvocation userData](v3, "userData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    goto LABEL_33;
  -[IEDirectInvocation userData](v3, "userData");
  v7 = objc_claimAutoreleasedReturnValue();
  IE_NSObjectToVariable(v7, &__str);
  if (!__str.__r_.__value_.__r.__words[0]
  {
    v9 = 0;
    v10 = 0;
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
      goto LABEL_13;
LABEL_21:

    v10 = 0;
    v24 = v9;
    v25 = 0;
    goto LABEL_22;
  }
  v9 = (uint64_t)v8;
  v10 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (!__str.__r_.__value_.__l.__size_)
    goto LABEL_21;
  v11 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  size = v10;
LABEL_13:
  p_shared_owners = (unint64_t *)&size->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }

  v24 = v9;
  v25 = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = 0;
    goto LABEL_23;
  }
LABEL_22:
  v18 = 1;
LABEL_23:
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(a2 + 24), &v24);
  v19 = v25;
  if (!v25)
    goto LABEL_27;
  v20 = (unint64_t *)&v25->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if ((v18 & 1) != 0)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    if ((v18 & 1) != 0)
      goto LABEL_33;
  }
  v22 = (unint64_t *)&v10->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_33:

}

void sub_22AF70240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void **v18;
  void *v19;

  siri::intelligence::DirectInvocation::~DirectInvocation(v18);
  _Unwind_Resume(a1);
}

siri::intelligence::ExecStateResponse *siri::intelligence::ExecStateResponse::ExecStateResponse(siri::intelligence::ExecStateResponse *this, const siri::intelligence::ExecStateResponse *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ExecStateResponse *)((char *)this + 16), (const siri::intelligence::ExecStateResponse *)((char *)a2 + 16));
  v7 = *((_QWORD *)a2 + 18);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)this + 2) = &unk_24F5406D8;
  *((_QWORD *)this + 18) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ExecStateResponse *)((char *)this + 152), (const siri::intelligence::ExecStateResponse *)((char *)a2 + 152));
  *((_QWORD *)this + 19) = &unk_24F540670;
  v10 = *((_QWORD *)a2 + 35);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)this + 35) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>((char *)this + 288, *((_QWORD **)a2 + 36), *((_QWORD **)a2 + 37), (uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 4);
  return this;
}

void sub_22AF70394(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *v4 = (void *)(v7 + 16);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v5);
  siri::intelligence::ResponseBase::~ResponseBase(v4);
  *v2 = (void *)(v6 + 16);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v3);
  siri::intelligence::ResponseBase::~ResponseBase(v2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

siri::intelligence::ResponseBase *siri::intelligence::ResponseBase::ResponseBase(siri::intelligence::ResponseBase *this, const siri::intelligence::ResponseBase *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = &unk_24F5406B8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  v7 = *((_QWORD *)a2 + 10);
  v8 = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v8;
  *((_QWORD *)this + 10) = v7;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((__int128 **)a2 + 12), *((__int128 **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  return this;
}

void sub_22AF704F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22AF705CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

std::string *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],char const*,void>@<X0>(char *a1@<X1>, char **a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],char const*,std::allocator<siri::intelligence::VariableString>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_22AF7066C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],char const*,std::allocator<siri::intelligence::VariableString>,0>(std::string *a1, char *__s, char **a3)
{
  char v5;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F540920;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],char const*>((int)&v5, a1 + 1, __s, a3);
  return a1;
}

void sub_22AF706D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],char const*>(int a1, std::string *a2, char *__s, char **a4)
{
  std::string __p;
  std::string v7;

  std::string::basic_string[abi:ne180100]<0>(&v7, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, *a4);
  siri::intelligence::VariableString::VariableString(a2, &v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_22AF70754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AF707BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24F542688;
  a1[1] = 0;
  siri::intelligence::VariableArray::VariableArray((siri::intelligence::VariableArray *)(a1 + 3));
  return a1;
}

void sub_22AF70808(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

siri::intelligence::DialogResponse *siri::intelligence::DialogResponse::DialogResponse(siri::intelligence::DialogResponse *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v18;

  *(_OWORD *)((char *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &unk_24F5406D8;
  v2 = (char *)operator new(0xF0uLL);
  v3 = (_QWORD *)((char *)this + 120);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_24F5427C0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *((_QWORD *)v2 + 29) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)this + 15) = v2 + 24;
  *((_QWORD *)this + 16) = v2;
  MEMORY[0x22E2E99E4](v2 + 24, "");
  v4 = *((_QWORD *)this + 15);
  v5 = *(std::__shared_weak_count **)(v4 + 32);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  MEMORY[0x22E2E99E4](*v3 + 40, "");
  MEMORY[0x22E2E99E4](*v3 + 64, "");
  MEMORY[0x22E2E99E4](*v3 + 88, "");
  v18 = 0uLL;
  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](*v3 + 112, &v18);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v18 = 0uLL;
  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](*v3 + 128, &v18);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x22E2E99E4](*v3 + 144, "");
  v18 = 0uLL;
  std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](*v3 + 168, &v18);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  MEMORY[0x22E2E99E4](*v3 + 192, "");
  *(_BYTE *)(*((_QWORD *)this + 15) + 184) = 0;
  return this;
}

void sub_22AF70A84(_Unwind_Exception *a1)
{
  void **v1;

  siri::intelligence::ResponseBase::~ResponseBase(v1);
  _Unwind_Resume(a1);
}

void siri::intelligence::DialogResponse::GetExpanded(siri::intelligence::DialogResponse *this@<X0>, siri::intelligence::Memory *a2@<X1>, siri::intelligence::ResponseBase *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string::size_type v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string::size_type size;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string::pointer v38;
  uint64_t v39;
  std::string::pointer data;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *lpsrc;
  std::__shared_weak_count *v54;
  __int128 v55;
  std::string::size_type v56;
  std::string *v57;
  std::__shared_weak_count *v58;

  siri::intelligence::ResponseBase::ResponseBase(a3, this);
  *(_QWORD *)a3 = &unk_24F5406D8;
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)a3 + 15) = *((_QWORD *)this + 15);
  *((_QWORD *)a3 + 16) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (char *)operator new(0xF0uLL);
  *((_QWORD *)v9 + 1) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24F5427C0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *((_QWORD *)v9 + 29) = 0;
  v57 = (std::string *)(v9 + 24);
  v58 = (std::__shared_weak_count *)v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (std::__shared_weak_count *)*((_QWORD *)a3 + 16);
  *((_QWORD *)a3 + 15) = v9 + 24;
  *((_QWORD *)a3 + 16) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *((_QWORD *)this + 15);
  v16 = v57;
  std::string::operator=(v57, (const std::string *)v15);
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](v57[1].__r_.__value_.__r.__words, (uint64_t *)(v15 + 24));
  std::string::operator=((std::string *)((char *)v57 + 40), (const std::string *)(v15 + 40));
  std::string::operator=((std::string *)((char *)v57 + 64), (const std::string *)(v15 + 64));
  std::string::operator=((std::string *)((char *)v57 + 88), (const std::string *)(v15 + 88));
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](&v57[4].__r_.__value_.__r.__words[2], (uint64_t *)(v15 + 112));
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](&v57[5].__r_.__value_.__l.__size_, (uint64_t *)(v15 + 128));
  std::string::operator=(v57 + 6, (const std::string *)(v15 + 144));
  std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100](v57[7].__r_.__value_.__r.__words, (uint64_t *)(v15 + 168));
  v57[7].__r_.__value_.__s.__data_[16] = *(_BYTE *)(v15 + 184);
  std::string::operator=(v16 + 8, (const std::string *)(v15 + 192));
  if (a2)
  {
    siri::intelligence::Memory::ExpandVariables((uint64_t)a2, (uint64_t)v16, 0, (uint64_t)&v55);
    if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16->__r_.__value_.__l.__data_);
    v17 = v55;
    v16->__r_.__value_.__r.__words[2] = v56;
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    v18 = v16[4].__r_.__value_.__r.__words[2];
    if (v18)
    {
      (*(void (**)(void **__return_ptr, std::string::size_type, siri::intelligence::Memory *))(*(_QWORD *)v18 + 88))(&lpsrc, v18, a2);
      if (lpsrc
      {
        *(_QWORD *)&v55 = v19;
        *((_QWORD *)&v55 + 1) = v54;
        if (v54)
        {
          v20 = (unint64_t *)&v54->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
      }
      else
      {
        v55 = 0uLL;
      }
      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)&v16[4].__r_.__value_.__r.__words[2], &v55);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = v54;
      if (v54)
      {
        v26 = (unint64_t *)&v54->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v16 = v57;
    }
    size = v16[5].__r_.__value_.__l.__size_;
    if (size)
    {
      (*(void (**)(void **__return_ptr, std::string::size_type, siri::intelligence::Memory *))(*(_QWORD *)size + 88))(&lpsrc, size, a2);
      if (lpsrc
      {
        *(_QWORD *)&v55 = v29;
        *((_QWORD *)&v55 + 1) = v54;
        if (v54)
        {
          v30 = (unint64_t *)&v54->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
      }
      else
      {
        v55 = 0uLL;
      }
      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100]((uint64_t)&v16[5].__r_.__value_.__l.__size_, &v55);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v54;
      if (v54)
      {
        v36 = (unint64_t *)&v54->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v16 = v57;
    }
    data = v16[7].__r_.__value_.__l.__data_;
    v39 = (uint64_t)&v16[7];
    v38 = data;
    if (data)
    {
      (*(void (**)(void **__return_ptr, std::string::pointer, siri::intelligence::Memory *))(*(_QWORD *)v38 + 88))(&lpsrc, v38, a2);
      if (lpsrc
      {
        *(_QWORD *)&v55 = v41;
        *((_QWORD *)&v55 + 1) = v54;
        if (v54)
        {
          v42 = (unint64_t *)&v54->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
      }
      else
      {
        v55 = 0uLL;
      }
      std::shared_ptr<siri::intelligence::ResponseBase>::operator=[abi:ne180100](v39, &v55);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v54;
      if (v54)
      {
        v48 = (unint64_t *)&v54->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  v50 = v58;
  if (v58)
  {
    v51 = (unint64_t *)&v58->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_22AF70F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  *v7 = (void *)(v9 + 16);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v8);
  siri::intelligence::ResponseBase::~ResponseBase(v7);
  _Unwind_Resume(a1);
}

_QWORD *siri::intelligence::DialogResponse::SetCharacter(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 120) + 24), a2);
}

uint64_t siri::intelligence::DialogResponse::GetCharacter@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v2 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void siri::intelligence::DialogResponse::GetText(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = (__int128 *)*((_QWORD *)this + 15);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetText(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 120), a2);
}

void siri::intelligence::DialogResponse::GetUserData(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 15);
  if (*(char *)(v2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 40);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 56);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetUserData(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 120) + 40), a2);
}

void siri::intelligence::DialogResponse::GetCategory(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 15);
  if (*(char *)(v2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 64), *(_QWORD *)(v2 + 72));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 64);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 80);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetCategory(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 120) + 64), a2);
}

void siri::intelligence::DialogResponse::GetCatId(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 15);
  if (*(char *)(v2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 88), *(_QWORD *)(v2 + 96));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 88);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 104);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetCatId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 120) + 88), a2);
}

_QWORD *siri::intelligence::DialogResponse::SetCatParameters(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 120) + 112), a2);
}

uint64_t siri::intelligence::DialogResponse::GetCatParameters@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v2 + 112);
  v3 = *(_QWORD *)(v2 + 120);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

_QWORD *siri::intelligence::DialogResponse::SetVisualParameters(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 120) + 128), a2);
}

uint64_t siri::intelligence::DialogResponse::GetVisualParameters@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v2 + 128);
  v3 = *(_QWORD *)(v2 + 136);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void siri::intelligence::DialogResponse::GetPatternId(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 15);
  if (*(char *)(v2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 144), *(_QWORD *)(v2 + 152));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 144);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 160);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetPatternId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 120) + 144), a2);
}

_QWORD *siri::intelligence::DialogResponse::SetPatternParameters(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<YAML::detail::memory_holder>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1 + 120) + 168), a2);
}

uint64_t siri::intelligence::DialogResponse::GetPatternParameters@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v2 + 168);
  v3 = *(_QWORD *)(v2 + 176);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void siri::intelligence::DialogResponse::GetDialogPhase(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 15);
  if (*(char *)(v2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 192), *(_QWORD *)(v2 + 200));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 192);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 208);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetDialogPhase(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 120) + 192), a2);
}

uint64_t siri::intelligence::DialogResponse::HasSensitiveData(siri::intelligence::DialogResponse *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 15) + 184);
}

uint64_t siri::intelligence::DialogResponse::SetSensitiveData(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 120) + 184) = a2;
  return this;
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F5427C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F5427C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0)
    operator delete(*(void **)(a1 + 216));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 192);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 136);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_22AF7137C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AF71420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t YAML::operator<<(uint64_t a1, const YAML::Node *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD *v9[3];
  _QWORD v10[2];
  _OWORD v11[3];

  v10[0] = &off_24F542728;
  v10[1] = a1;
  memset(v11, 0, sizeof(v11));
  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)&v7, a2);
  YAML::NodeEvents::Emit((YAML::NodeEvents *)&v7, (uint64_t)v10);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((uint64_t)v9, v9[1]);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v10[0] = &off_24F542728;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](v11);
  return a1;
}

{
  _BYTE v5[72];

  YAML::Emitter::Emitter((uint64_t)v5, a1);
  YAML::operator<<((uint64_t)v5, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)v5);
  return a1;
}

void sub_22AF7154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v15;
  uint64_t v16;

  YAML::NodeEvents::~NodeEvents((YAML::NodeEvents *)&a9);
  a15 = v16 + 16;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void sub_22AF715C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void YAML::Dump(YAML *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  _BYTE v6[8];
  char *__s;
  uint64_t v8;
  uint64_t v9;

  YAML::Emitter::Emitter((YAML::Emitter *)v6);
  YAML::operator<<((uint64_t)v6, this);
  if (v8)
  {
    v5 = 0;
  }
  else
  {
    __s[v9] = 0;
    v5 = __s;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, v5);
  YAML::Emitter::~Emitter((YAML::Emitter *)v6);
}

void sub_22AF71644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void sub_22AF71950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;
  uint64_t v21;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v19 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);

  IEDefer::~IEDefer((void (***)(void))va1);
  v17 = v19;
  v19 = 0;
  if (v17)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)va, v17);
  v18 = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v15 - 64) = &off_24F543888;
  *(_QWORD *)(v15 - 56) = 0;
  if (v18)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v15 - 56, v18);

  _Unwind_Resume(a1);
}

void NSDictionaryToStringMap(NSDictionary *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  id v13;
  std::string __str;
  void *__p[2];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void **v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  a1[2].super.isa = 0;
  a1[1].super.isa = 0;
  a1->super.isa = (Class)&a1[1];
  if (v3)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v13 = v3;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
          objc_msgSend(v4, "objectForKey:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            v10 = (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String");
          else
            v10 = "";
          std::string::basic_string[abi:ne180100]<0>(__p, v10);
          if (v9)
            v11 = (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
          else
            v11 = "";
          std::string::basic_string[abi:ne180100]<0>(&__str, v11);
          v21 = __p;
          v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
          std::string::operator=((std::string *)(v12 + 7), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (v16 < 0)
            operator delete(__p[0]);

        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      }
      while (v5);
    }

    v3 = v13;
  }

}

void sub_22AF71CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v22, *(_QWORD **)(v22 + 8));
  _Unwind_Resume(a1);
}

void sub_22AF72018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;
  uint64_t v21;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v19 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);

  IEDefer::~IEDefer((void (***)(void))va1);
  v17 = v19;
  v19 = 0;
  if (v17)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)va, v17);
  v18 = *(_QWORD *)(v15 - 56);
  *(_QWORD *)(v15 - 64) = &off_24F543888;
  *(_QWORD *)(v15 - 56) = 0;
  if (v18)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v15 - 56, v18);

  _Unwind_Resume(a1);
}

void sub_22AF72448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  IEDefer::~IEDefer((void (***)(void))(v23 - 88));
  v25 = a20;
  a20 = 0;
  if (v25)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)&a20, v25);
  v26 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 48) = &off_24F543888;
  *(_QWORD *)(v23 - 40) = 0;
  if (v26)
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v23 - 40, v26);

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_22AF726F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

siri::intelligence::TestCaseBuilder *siri::intelligence::TestCaseBuilder::TestCaseBuilder(siri::intelligence::TestCaseBuilder *this)
{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  return this;
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  return this;
}

void siri::intelligence::TestCaseBuilder::Clear(protobuf::FlowTest_Test **this)
{
  _BYTE v2[72];

  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)v2);
  if (*this != (protobuf::FlowTest_Test *)v2)
    protobuf::FlowTest_Test::InternalSwap(*this, (protobuf::FlowTest_Test *)v2);
  protobuf::FlowTest_Test::~FlowTest_Test((protobuf::FlowTest_Test *)v2);
}

void siri::intelligence::TestCaseBuilder::SendIntent(uint64_t *a1, uint64_t a2, std::string *__str, uint64_t *a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  protobuf::FlowTest_Step *v11;
  uint64_t v12;
  uint64_t v13;
  protobuf::FlowTest_SendIntent *v14;
  uint64_t v15;
  std::string **v16;
  uint64_t *v17;
  std::string *v18;
  const std::string *v19;
  std::string::size_type size;
  uint64_t *v21;
  std::string *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const protobuf::FlowTest_KeyValueParameter **v29;
  uint64_t v30;
  const protobuf::FlowTest_KeyValueParameter *v31;
  int *v32;
  uint64_t v33;
  int v34;
  protobuf::FlowTest_KeyValueParameter *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _BYTE v39[56];
  int v40;
  uint64_t v41;

  v7 = *a1;
  v8 = *(int **)(*a1 + 40);
  if (!v8)
  {
    v10 = *(_DWORD *)(v7 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v7 + 24), v10 + 1);
    v8 = *(int **)(v7 + 40);
    v10 = *v8;
    goto LABEL_7;
  }
  v9 = *(int *)(v7 + 32);
  v10 = *v8;
  if ((int)v9 < *v8)
  {
    *(_DWORD *)(v7 + 32) = v9 + 1;
    v11 = *(protobuf::FlowTest_Step **)&v8[2 * v9 + 2];
    goto LABEL_8;
  }
  if (v10 == *(_DWORD *)(v7 + 36))
    goto LABEL_6;
LABEL_7:
  *v8 = v10 + 1;
  v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v7 + 24));
  v12 = *(_QWORD *)(v7 + 40);
  v13 = *(int *)(v7 + 32);
  *(_DWORD *)(v7 + 32) = v13 + 1;
  *(_QWORD *)(v12 + 8 * v13 + 8) = v11;
LABEL_8:
  *((_DWORD *)v11 + 4) |= 2u;
  v14 = (protobuf::FlowTest_SendIntent *)*((_QWORD *)v11 + 7);
  if (!v14)
  {
    v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
    *((_QWORD *)v11 + 7) = v14;
  }
  v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 8);
  if (v15)
    goto LABEL_13;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_13:
    v16 = (std::string **)((char *)v14 + 48);
    v17 = (uint64_t *)*((_QWORD *)v14 + 6);
    *((_DWORD *)v14 + 4) |= 1u;
    if (v17 != &google::protobuf::internal::fixed_address_empty_string)
    {
      v18 = (std::string *)v17;
      v19 = (const std::string *)a2;
LABEL_20:
      std::string::operator=(v18, v19);
      goto LABEL_24;
    }
    v22 = (std::string *)a2;
  }
  else
  {
    v16 = (std::string **)((char *)v14 + 56);
    v21 = (uint64_t *)*((_QWORD *)v14 + 7);
    *((_DWORD *)v14 + 4) |= 2u;
    if (v21 != &google::protobuf::internal::fixed_address_empty_string)
    {
      v18 = (std::string *)v21;
      v19 = __str;
      goto LABEL_20;
    }
    v22 = __str;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v22);
LABEL_24:
  v23 = *a4;
  v24 = (std::__shared_weak_count *)a4[1];
  v38[0] = v23;
  v38[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  siri::intelligence::VariableToTestKeyValue((uint64_t)v39, v38);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v41)
    v29 = (const protobuf::FlowTest_KeyValueParameter **)(v41 + 8);
  else
    v29 = 0;
  if (v40)
  {
    v30 = 8 * v40;
    while (1)
    {
      v31 = *v29;
      v32 = (int *)*((_QWORD *)v14 + 5);
      if (!v32)
        break;
      v33 = *((int *)v14 + 8);
      v34 = *v32;
      if ((int)v33 >= *v32)
      {
        if (v34 == *((_DWORD *)v14 + 9))
        {
LABEL_42:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v14 + 6, v34 + 1);
          v32 = (int *)*((_QWORD *)v14 + 5);
          v34 = *v32;
        }
        *v32 = v34 + 1;
        v35 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v14
                                                                                                + 3));
        v36 = *((_QWORD *)v14 + 5);
        v37 = *((int *)v14 + 8);
        *((_DWORD *)v14 + 8) = v37 + 1;
        *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
        goto LABEL_44;
      }
      *((_DWORD *)v14 + 8) = v33 + 1;
      v35 = *(protobuf::FlowTest_KeyValueParameter **)&v32[2 * v33 + 2];
LABEL_44:
      if (v31 != v35)
      {
        protobuf::FlowTest_KeyValueParameter::Clear(v35);
        protobuf::FlowTest_KeyValueParameter::MergeFrom(v35, v31);
      }
      ++v29;
      v30 -= 8;
      if (!v30)
        goto LABEL_47;
    }
    v34 = *((_DWORD *)v14 + 9);
    goto LABEL_42;
  }
LABEL_47:
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)v39);
}

void sub_22AF72A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableToTestKeyValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  std::string::size_type size;
  uint64_t v7;
  __int128 v8;
  const void *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t *v30;
  unint64_t v31;
  char v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int *v39;
  uint64_t v40;
  int v41;
  protobuf::FlowTest_KeyValueParameter *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int *v56;
  uint64_t v57;
  int v58;
  protobuf::FlowTest_KeyValueParameter *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD v69[3];
  std::__shared_weak_count *v70;
  _QWORD v71[2];
  std::string v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  _BYTE *v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  char *v82;
  std::__shared_weak_count *v83;

  protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)a1);
  v4 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 8);
    v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v5;
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v72.__r_.__value_.__l.__size_;
    operator delete(v72.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_13;
  }
  else if (!*((_BYTE *)&v72.__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  v7 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(v7 + 8);
    v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a1 + 16) |= 1u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
LABEL_13:
  v9 = (const void *)*a2;
  if (!*a2)
  {
    v82 = 0;
    v83 = 0;
    v80 = 0;
    v81 = 0;
    v78 = 0;
    v79 = 0;
    v76 = 0;
    v77 = 0;
    goto LABEL_21;
  }
  if (!v10)
  {
    v82 = 0;
    v83 = 0;
    if (v21)
    {
      v20 = (std::__shared_weak_count *)a2[1];
      v80 = v21;
      v81 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      v24 = v21[9];
      *(_DWORD *)(a1 + 16) |= 4u;
      *(_QWORD *)(a1 + 88) = v24;
      if (!v20)
        goto LABEL_42;
      goto LABEL_38;
    }
    v80 = 0;
    v81 = 0;
    if (v29)
    {
      v17 = (std::__shared_weak_count *)a2[1];
      v78 = v29;
      v79 = v17;
      if (v17)
      {
        v30 = (unint64_t *)&v17->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = v29[66];
      *(_DWORD *)(a1 + 16) |= 8u;
      *(_BYTE *)(a1 + 96) = v32;
      if (!v17)
        goto LABEL_31;
      goto LABEL_27;
    }
    v78 = 0;
    v79 = 0;
    if (v33)
    {
      v34 = (std::__shared_weak_count *)a2[1];
      v76 = v33;
      v77 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      siri::intelligence::VariableDictionary::GetValues((uint64_t)v33, (uint64_t)&v73);
      v37 = v73;
      v38 = v74;
      if (v73 != v74)
      {
        while (1)
        {
          v39 = *(int **)(a1 + 64);
          if (!v39)
            break;
          v40 = *(int *)(a1 + 56);
          v41 = *v39;
          if ((int)v40 >= *v39)
          {
            if (v41 == *(_DWORD *)(a1 + 60))
            {
LABEL_68:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v41 + 1);
              v39 = *(int **)(a1 + 64);
              v41 = *v39;
            }
            *v39 = v41 + 1;
            v42 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
            v43 = *(_QWORD *)(a1 + 64);
            v44 = *(int *)(a1 + 56);
            *(_DWORD *)(a1 + 56) = v44 + 1;
            *(_QWORD *)(v43 + 8 * v44 + 8) = v42;
            goto LABEL_70;
          }
          *(_DWORD *)(a1 + 56) = v40 + 1;
          v42 = *(protobuf::FlowTest_KeyValueParameter **)&v39[2 * v40 + 2];
LABEL_70:
          v45 = (std::__shared_weak_count *)v37[1];
          v71[0] = *v37;
          v71[1] = v45;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          siri::intelligence::VariableToTestKeyValue(&v72, v71);
          if (&v72 != (std::string *)v42)
          {
            protobuf::FlowTest_KeyValueParameter::Clear(v42);
            protobuf::FlowTest_KeyValueParameter::MergeFrom(v42, (const protobuf::FlowTest_KeyValueParameter *)&v72);
          }
          protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&v72);
          if (v45)
          {
            v48 = (unint64_t *)&v45->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v37 += 2;
          if (v37 == v38)
            goto LABEL_81;
        }
        v41 = *(_DWORD *)(a1 + 60);
        goto LABEL_68;
      }
LABEL_81:
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
LABEL_21:
      v14 = v77;
      if (v77)
      {
        v15 = (unint64_t *)&v77->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v79;
      if (!v79)
      {
LABEL_31:
        v20 = v81;
        if (!v81)
        {
LABEL_42:
          v11 = v83;
          goto LABEL_46;
        }
LABEL_38:
        v25 = (unint64_t *)&v20->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        goto LABEL_42;
      }
LABEL_27:
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      goto LABEL_31;
    }
    v76 = 0;
    v77 = 0;
    if (!v50)
      goto LABEL_21;
    v51 = (std::__shared_weak_count *)a2[1];
    v69[2] = v50;
    v70 = v51;
    if (v51)
    {
      v52 = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((char *)&v73, v50[9], v50[10], ((char *)v50[10] - (char *)v50[9]) >> 4);
    v54 = v73;
    v55 = v74;
    if (v73 == v74)
    {
LABEL_106:
      v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
      if (v51)
      {
        v67 = (unint64_t *)&v51->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      goto LABEL_21;
    }
    while (1)
    {
      v56 = *(int **)(a1 + 40);
      if (!v56)
        break;
      v57 = *(int *)(a1 + 32);
      v58 = *v56;
      if ((int)v57 >= *v56)
      {
        if (v58 == *(_DWORD *)(a1 + 36))
        {
LABEL_92:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v58 + 1);
          v56 = *(int **)(a1 + 40);
          v58 = *v56;
        }
        *v56 = v58 + 1;
        v59 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        v60 = *(_QWORD *)(a1 + 40);
        v61 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v61 + 1;
        *(_QWORD *)(v60 + 8 * v61 + 8) = v59;
        goto LABEL_94;
      }
      *(_DWORD *)(a1 + 32) = v57 + 1;
      v59 = *(protobuf::FlowTest_KeyValueParameter **)&v56[2 * v57 + 2];
LABEL_94:
      v62 = (std::__shared_weak_count *)v54[1];
      v69[0] = *v54;
      v69[1] = v62;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      siri::intelligence::VariableToTestKeyValue(&v72, v69);
      if (&v72 != (std::string *)v59)
      {
        protobuf::FlowTest_KeyValueParameter::Clear(v59);
        protobuf::FlowTest_KeyValueParameter::MergeFrom(v59, (const protobuf::FlowTest_KeyValueParameter *)&v72);
      }
      protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&v72);
      if (v62)
      {
        v65 = (unint64_t *)&v62->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v54 += 2;
      if (v54 == v55)
      {
        v51 = v70;
        goto LABEL_106;
      }
    }
    v58 = *(_DWORD *)(a1 + 36);
    goto LABEL_92;
  }
  v11 = (std::__shared_weak_count *)a2[1];
  v82 = v10;
  v83 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v10[95] < 0)
    std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
  else
    v72 = *(std::string *)(v10 + 3);
  *(_DWORD *)(a1 + 16) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 80), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
LABEL_46:
  if (v11)
  {
    v27 = (unint64_t *)&v11->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22AF7313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  protobuf::FlowTest_KeyValueParameter *v31;
  uint64_t v32;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v32 - 128);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v32 - 96);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v32 - 80);
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(v31);
  _Unwind_Resume(a1);
}

void sub_22AF7321C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x22AF7320CLL);
}

void siri::intelligence::TestCaseBuilder::AssertResponseAllIds(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  protobuf::FlowTest_Step *v7;
  uint64_t v8;
  uint64_t v9;
  protobuf::FlowTest_AssertResponse *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string *v14;
  std::string **v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  int v21;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;

  v3 = *a1;
  v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    v4 = *(int **)(v3 + 40);
    v6 = *v4;
    goto LABEL_7;
  }
  v5 = *(int *)(v3 + 32);
  v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36))
    goto LABEL_6;
LABEL_7:
  *v4 = v6 + 1;
  v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 4u;
  v10 = (protobuf::FlowTest_AssertResponse *)*((_QWORD *)v7 + 8);
  if (!v10)
  {
    v10 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((_QWORD *)v7 + 8) = v10;
  }
  v13 = a2;
  v11 = *a2;
  v12 = v13[1];
  if (v12 - v11 != 24)
  {
    if (v11 == v12)
      return;
    v17 = (uint64_t *)((char *)v10 + 48);
    while (1)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      }
      v19 = (int *)*((_QWORD *)v10 + 8);
      if (!v19)
        break;
      v20 = *((int *)v10 + 14);
      v21 = *v19;
      if ((int)v20 >= *v19)
      {
        if (v21 == *((_DWORD *)v10 + 15))
        {
LABEL_23:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v10 + 12, v21 + 1);
          v19 = (int *)*((_QWORD *)v10 + 8);
          v21 = *v19;
        }
        *v19 = v21 + 1;
        v23 = (google::protobuf::internal::ArenaImpl *)*v17;
        if (*v17)
        {
          if (*((_QWORD *)v23 + 14))
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v23, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v24 = *((_QWORD *)v10 + 8);
        v25 = *((int *)v10 + 14);
        *((_DWORD *)v10 + 14) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25 + 8) = AlignedAndAddCleanup;
        goto LABEL_30;
      }
      *((_DWORD *)v10 + 14) = v20 + 1;
      AlignedAndAddCleanup = *(std::string **)&v19[2 * v20 + 2];
LABEL_30:
      std::string::operator=(AlignedAndAddCleanup, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 += 24;
      if (v11 == v12)
        return;
    }
    v21 = *((_DWORD *)v10 + 15);
    goto LABEL_23;
  }
  v16 = (uint64_t *)*((_QWORD *)v10 + 9);
  v15 = (std::string **)((char *)v10 + 72);
  v14 = (std::string *)v16;
  *((_DWORD *)v15 - 14) |= 1u;
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, v11);
  else
    std::string::operator=(v14, (const std::string *)v11);
}

void sub_22AF734C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCaseBuilder::AssertResponseAnyId(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  protobuf::FlowTest_Step *v7;
  uint64_t v8;
  uint64_t v9;
  protobuf::FlowTest_AssertResponse *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string *v14;
  std::string **v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  int v21;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;

  v3 = *a1;
  v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    v4 = *(int **)(v3 + 40);
    v6 = *v4;
    goto LABEL_7;
  }
  v5 = *(int *)(v3 + 32);
  v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36))
    goto LABEL_6;
LABEL_7:
  *v4 = v6 + 1;
  v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 4u;
  v10 = (protobuf::FlowTest_AssertResponse *)*((_QWORD *)v7 + 8);
  if (!v10)
  {
    v10 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((_QWORD *)v7 + 8) = v10;
  }
  v13 = a2;
  v11 = *a2;
  v12 = v13[1];
  if (v12 - v11 != 24)
  {
    if (v11 == v12)
      return;
    v17 = (uint64_t *)((char *)v10 + 24);
    while (1)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v18 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      }
      v19 = (int *)*((_QWORD *)v10 + 5);
      if (!v19)
        break;
      v20 = *((int *)v10 + 8);
      v21 = *v19;
      if ((int)v20 >= *v19)
      {
        if (v21 == *((_DWORD *)v10 + 9))
        {
LABEL_23:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v10 + 6, v21 + 1);
          v19 = (int *)*((_QWORD *)v10 + 5);
          v21 = *v19;
        }
        *v19 = v21 + 1;
        v23 = (google::protobuf::internal::ArenaImpl *)*v17;
        if (*v17)
        {
          if (*((_QWORD *)v23 + 14))
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v23, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v24 = *((_QWORD *)v10 + 5);
        v25 = *((int *)v10 + 8);
        *((_DWORD *)v10 + 8) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25 + 8) = AlignedAndAddCleanup;
        goto LABEL_30;
      }
      *((_DWORD *)v10 + 8) = v20 + 1;
      AlignedAndAddCleanup = *(std::string **)&v19[2 * v20 + 2];
LABEL_30:
      std::string::operator=(AlignedAndAddCleanup, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 += 24;
      if (v11 == v12)
        return;
    }
    v21 = *((_DWORD *)v10 + 9);
    goto LABEL_23;
  }
  v16 = (uint64_t *)*((_QWORD *)v10 + 9);
  v15 = (std::string **)((char *)v10 + 72);
  v14 = (std::string *)v16;
  *((_DWORD *)v15 - 14) |= 1u;
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, v11);
  else
    std::string::operator=(v14, (const std::string *)v11);
}

void sub_22AF73770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCaseBuilder::SetVariable(uint64_t *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  protobuf::FlowTest_Step *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  protobuf::FlowTest_KeyValueParameter *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  std::string **v25;
  uint64_t *v26;
  uint64_t v27[2];
  _BYTE v28[104];

  v5 = *a1;
  v6 = *(int **)(*a1 + 40);
  if (!v6)
  {
    v8 = *(_DWORD *)(v5 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 24), v8 + 1);
    v6 = *(int **)(v5 + 40);
    v8 = *v6;
    goto LABEL_7;
  }
  v7 = *(int *)(v5 + 32);
  v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(v5 + 32) = v7 + 1;
    v9 = *(protobuf::FlowTest_Step **)&v6[2 * v7 + 2];
    goto LABEL_8;
  }
  if (v8 == *(_DWORD *)(v5 + 36))
    goto LABEL_6;
LABEL_7:
  *v6 = v8 + 1;
  v9 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v5 + 24));
  v10 = *(_QWORD *)(v5 + 40);
  v11 = *(int *)(v5 + 32);
  *(_DWORD *)(v5 + 32) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = v9;
LABEL_8:
  v12 = (int *)*((_QWORD *)v9 + 5);
  if (!v12)
  {
    v14 = *((_DWORD *)v9 + 9);
LABEL_13:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v9 + 6, v14 + 1);
    v12 = (int *)*((_QWORD *)v9 + 5);
    v14 = *v12;
    goto LABEL_14;
  }
  v13 = *((int *)v9 + 8);
  v14 = *v12;
  if ((int)v13 < *v12)
  {
    *((_DWORD *)v9 + 8) = v13 + 1;
    v15 = *(protobuf::FlowTest_KeyValueParameter **)&v12[2 * v13 + 2];
    goto LABEL_15;
  }
  if (v14 == *((_DWORD *)v9 + 9))
    goto LABEL_13;
LABEL_14:
  *v12 = v14 + 1;
  v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v9
                                                                                          + 3));
  v16 = *((_QWORD *)v9 + 5);
  v17 = *((int *)v9 + 8);
  *((_DWORD *)v9 + 8) = v17 + 1;
  *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
LABEL_15:
  v18 = *a3;
  v19 = (std::__shared_weak_count *)a3[1];
  v27[0] = v18;
  v27[1] = (uint64_t)v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  siri::intelligence::VariableToTestKeyValue((uint64_t)v28, v27);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v28 != (_BYTE *)v15)
  {
    protobuf::FlowTest_KeyValueParameter::Clear(v15);
    protobuf::FlowTest_KeyValueParameter::MergeFrom(v15, (const protobuf::FlowTest_KeyValueParameter *)v28);
  }
  v26 = (uint64_t *)*((_QWORD *)v15 + 9);
  v25 = (std::string **)((char *)v15 + 72);
  v24 = (std::string *)v26;
  *((_DWORD *)v25 - 14) |= 1u;
  if (v26 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v25, (uint64_t)a2);
  else
    std::string::operator=(v24, a2);
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)v28);
}

void sub_22AF73980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::TestCaseBuilder::GotoResponse(uint64_t *a1, std::string *__str)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  protobuf::FlowTest_Step *v7;
  uint64_t v8;
  uint64_t v9;
  protobuf::FlowTest_StartFrom *started;
  std::string **v11;
  std::string *v12;
  uint64_t *v13;

  v3 = *a1;
  v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    v4 = *(int **)(v3 + 40);
    v6 = *v4;
    goto LABEL_7;
  }
  v5 = *(int *)(v3 + 32);
  v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36))
    goto LABEL_6;
LABEL_7:
  *v4 = v6 + 1;
  v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((_QWORD *)v7 + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((_QWORD *)v7 + 6) = started;
  }
  v13 = (uint64_t *)*((_QWORD *)started + 3);
  v11 = (std::string **)((char *)started + 24);
  v12 = (std::string *)v13;
  *((_DWORD *)v11 - 2) |= 1u;
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  else
    std::string::operator=(v12, __str);
}

void siri::intelligence::TestCaseBuilder::SwitchActivity(uint64_t *a1, std::string *__str)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  protobuf::FlowTest_Step *v7;
  uint64_t v8;
  uint64_t v9;
  protobuf::FlowTest_StartFrom *started;
  std::string **v11;
  std::string *v12;
  uint64_t *v13;

  v3 = *a1;
  v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    v4 = *(int **)(v3 + 40);
    v6 = *v4;
    goto LABEL_7;
  }
  v5 = *(int *)(v3 + 32);
  v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36))
    goto LABEL_6;
LABEL_7:
  *v4 = v6 + 1;
  v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((_QWORD *)v7 + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((_QWORD *)v7 + 6) = started;
  }
  v13 = (uint64_t *)*((_QWORD *)started + 4);
  v11 = (std::string **)((char *)started + 32);
  v12 = (std::string *)v13;
  *((_DWORD *)v11 - 4) |= 2u;
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  else
    std::string::operator=(v12, __str);
}

uint64_t siri::intelligence::TestCaseBuilder::GetNumberOfSteps(siri::intelligence::TestCaseBuilder *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 32);
}

uint64_t siri::intelligence::TestCaseBuilder::AddToTestFile(uint64_t *a1, __int128 *a2, __int128 *a3, std::string *__str, uint64_t a5)
{
  uint64_t v9;
  std::string **v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string **v15;
  std::string *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[3];
  std::string v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  v9 = *a1;
  v12 = *(uint64_t **)(v9 + 48);
  v10 = (std::string **)(v9 + 48);
  v11 = (std::string *)v12;
  *((_DWORD *)v10 - 8) |= 1u;
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)__str);
  else
    std::string::operator=(v11, __str);
  v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a5 + 8);
  v14 = *a1;
  if (v13)
  {
    v17 = *(uint64_t **)(v14 + 56);
    v15 = (std::string **)(v14 + 56);
    v16 = (std::string *)v17;
    *((_DWORD *)v15 - 10) |= 2u;
    if (v17 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, a5);
    else
      std::string::operator=(v16, (const std::string *)a5);
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 56);
    if ((uint64_t *)v18 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v18 + 23) < 0)
      {
        **(_BYTE **)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v18 = 0;
        *(_BYTE *)(v18 + 23) = 0;
      }
    }
    *(_DWORD *)(v14 + 16) &= ~2u;
  }
  siri::intelligence::TestCase::TestCase(&v22, *a1, a2, a3);
  memset(v21, 0, sizeof(v21));
  siri::intelligence::TestSuite::LoadTests((uint64_t)v21, (uint64_t)a2, (uint64_t)a3);
  siri::intelligence::TestSuite::AddTestCase((siri::intelligence::TestSuite *)v21, (const siri::intelligence::TestCase *)&v22);
  v19 = siri::intelligence::TestSuite::SaveTests((siri::intelligence::TestCase **)v21);
  v31 = (void **)&v21[1] + 1;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)v21;
  std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](&v31);
  *(_QWORD *)&v21[0] = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(_QWORD *)&v21[0] = &v29;
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (v28 < 0)
    operator delete(__p);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v19;
}

void sub_22AF73D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  siri::intelligence::TestSuite::~TestSuite((void **)&a9);
  siri::intelligence::TestCase::~TestCase(&a15);
  _Unwind_Resume(a1);
}

void siri::intelligence::TestSuite::~TestSuite(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t siri::intelligence::TestCaseBuilder::AddToTestFile(uint64_t *a1, const std::string *a2, std::string *a3, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  siri::intelligence::FindTemplateDir((uint64_t)a2, (uint64_t)v12);
  siri::intelligence::Configuration::GetFlowIdFromPath(a2, (uint64_t)__p);
  v8 = siri::intelligence::TestCaseBuilder::AddToTestFile(a1, (__int128 *)v12, (__int128 *)__p, a3, a4);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return v8;
}

void sub_22AF73E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_22AF73EDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24F542810;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)(a1 + 24));
  return a1;
}

void sub_22AF73F3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F542810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F542810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::__on_zero_shared(uint64_t a1)
{
  protobuf::FlowTest_Test::~FlowTest_Test((protobuf::FlowTest_Test *)(a1 + 24));
}

BOOL siri::intelligence::DirExists(uint64_t *a1)
{
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x4000;
}

BOOL siri::intelligence::FileExists(uint64_t *a1)
{
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x8000;
}

_QWORD *siri::intelligence::FindFileInPaths@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v4 = a2[1] - *a2;
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, (char *)&str_5);
  v7 = 0;
  v8 = v4 / 24;
  if (v8 <= 1)
    v9 = 1;
  else
    v9 = v8;
  while (1)
  {
    siri::intelligence::JoinPath(*a2 + v7, a1, a3);
    result = (_QWORD *)siri::intelligence::FileExists((uint64_t *)a3);
    if ((result & 1) != 0)
      break;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v7 += 24;
    if (!--v9)
      return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, (char *)&str_5);
  }
  return result;
}

void sub_22AF74114(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::JoinPath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  const std::string::value_type *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;

  v5 = *(char *)(a1 + 23);
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) != 0)
      goto LABEL_10;
LABEL_12:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    goto LABEL_15;
  }
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    if (v5 < 0)
    {
      v10 = *(const std::string::value_type **)a1;
      goto LABEL_19;
    }
    *(_OWORD *)a3 = *(_OWORD *)a1;
    v11 = *(_QWORD *)(a1 + 16);
LABEL_15:
    *(_QWORD *)(a3 + 16) = v11;
    return;
  }
  if (siri::intelligence::IsAbsPath((std::string *)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
LABEL_10:
      v10 = *(const std::string::value_type **)a2;
      v6 = *(_QWORD *)(a2 + 8);
LABEL_19:
      std::string::__init_copy_ctor_external((std::string *)a3, v10, v6);
      return;
    }
    goto LABEL_12;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  while (1)
  {
    v12 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
    {
      v13 = *(_QWORD *)(a3 + 8);
      if (!v13)
        goto LABEL_31;
    }
    else
    {
      if (!*(_BYTE *)(a3 + 23))
        goto LABEL_31;
      v13 = *(unsigned __int8 *)(a3 + 23);
    }
    v14 = v13 - 1;
    if ((v12 & 0x80) != 0)
      break;
    if (*(_BYTE *)(a3 + v14) != 47)
      goto LABEL_31;
LABEL_30:
    std::string::erase((std::string *)a3, v12 - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  if (*(_BYTE *)(*(_QWORD *)a3 + v14) == 47)
  {
    v12 = *(_QWORD *)(a3 + 8);
    goto LABEL_30;
  }
LABEL_31:
  std::string::push_back((std::string *)a3, 47);
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  std::string::append((std::string *)a3, v16, v17);
}

void sub_22AF742A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

FILE *siri::intelligence::OpenDataFile(std::string *a1, const char *a2)
{
  std::string::size_type size;
  int v3;
  int v4;
  const char *v5;
  const char *v6;
  const char *v7;
  FILE *result;
  const char *v9;
  uint64_t *v10;
  const char *v11;
  uint64_t *v12;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v3 = (char)size;
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  v4 = (int)a2;
  v5 = (const char *)a1;
  if (((_DWORD)a2 - 1) >= 2)
  {
    if ((_DWORD)a2)
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported mode for OpenDataFile()", a2);
      return 0;
    }
    if (v3 < 0)
      a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    result = fopen((const char *)a1, "r");
    if (!result)
    {
      if (v5[23] >= 0)
        v12 = (uint64_t *)v5;
      else
        v12 = *(uint64_t **)v5;
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to read data file: %s", v11, v12);
      return 0;
    }
  }
  else
  {
    siri::intelligence::MakeDirsForFile(a1);
    if (v5[23] >= 0)
      v6 = v5;
    else
      v6 = *(const char **)v5;
    if (v4 == 1)
      v7 = "w";
    else
      v7 = "a";
    result = fopen(v6, v7);
    if (!result)
    {
      if (v5[23] >= 0)
        v10 = (uint64_t *)v5;
      else
        v10 = *(uint64_t **)v5;
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to write data file: %s", v9, v10);
      return 0;
    }
  }
  return result;
}

uint64_t siri::intelligence::MakeDirsForFile(std::string *a1)
{
  uint64_t Dir;
  std::string __p;

  siri::intelligence::DirName(a1, 1, &__p);
  Dir = siri::intelligence::MakeDir((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return Dir;
}

void sub_22AF74400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::ReadFileToVector(unint64_t *a1, std::string *a2)
{
  std::string::size_type size;
  const char *v5;
  const char *v6;
  unint64_t st_size;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  FILE *v15;
  const char *v16;
  FILE *v17;
  size_t v18;
  const char *v19;
  uint64_t *v20;
  stat v21;

  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (!a1)
  {
    if ((size & 0x80u) == 0)
      v11 = (uint64_t *)a2;
    else
      v11 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Cannot open file: %s. Data is NULL", (const char *)a2, v11);
    return 0;
  }
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  if (!siri::intelligence::FileExists((uint64_t *)a2))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Cannot open file: %s. File does not exist.", v5, v12);
    return 0;
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (const char *)a2;
  else
    v6 = (const char *)a2->__r_.__value_.__r.__words[0];
  if (stat(v6, &v21) == -1)
    st_size = 0;
  else
    st_size = v21.st_size;
  v8 = *a1;
  v9 = a1[1];
  v10 = v9 - *a1;
  if (st_size <= v10)
  {
    if (st_size < v10)
    {
      v9 = v8 + st_size;
      a1[1] = v8 + st_size;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, st_size - v10);
    v8 = *a1;
    v9 = a1[1];
  }
  if (v8 == v9)
    return 1;
  v15 = siri::intelligence::OpenDataFile(a2, 0);
  if (!v15)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = (uint64_t *)a2;
    else
      v20 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"Cannot open file: %s", v16, v20);
    return 0;
  }
  v17 = v15;
  v13 = 1;
  v18 = fread((void *)*a1, 1uLL, st_size, v15);
  fclose(v17);
  if (v18 != st_size)
  {
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"ReadFileToVector: file size discrepancy!", v19);
    return 1;
  }
  return v13;
}

off_t siri::intelligence::GetFileSize(const char *a1)
{
  stat v2;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v2) == -1)
    return 0;
  else
    return v2.st_size;
}

uint64_t siri::intelligence::ReadFileToLines@<X0>(uint64_t *a1@<X8>)
{
  std::locale::id *v2;
  const std::locale::facet *v3;
  unsigned __int8 v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  std::locale v11;
  _QWORD v12[2];
  _BYTE v13[408];
  _QWORD v14[20];

  v14[19] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::ifstream::basic_ifstream(v12);
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v2 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[0] - 24)));
    v3 = std::locale::use_facet(&v11, v2);
    v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v11);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)__p, v4);
    if ((v13[*(_QWORD *)(v12[0] - 24) + 16] & 5) != 0)
      break;
    v5 = a1[1];
    if (v5 >= a1[2])
    {
      v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v10) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a1[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v5 + 16) = v10;
        *(_OWORD *)v5 = v6;
      }
      v7 = v5 + 24;
      a1[1] = v5 + 24;
    }
    a1[1] = v7;
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v12[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2E9A98](v13);
  std::istream::~istream();
  return MEMORY[0x22E2E9C48](v14);
}

void sub_22AF74770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x22E2E9A8C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_22AF74898(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x22E2E9C48](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E2E9A98](a1 + 2);
  std::istream::~istream();
  MEMORY[0x22E2E9C48](a1 + 53);
  return a1;
}

void siri::intelligence::ReadFileToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  unsigned __int8 v11;
  size_t v12;
  char *locale;
  void **v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::locale v17;
  std::string::size_type v18;
  unsigned __int8 v19;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[2];
  _BYTE v23[408];
  _QWORD v24[21];

  v24[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
    v4 = MEMORY[0x24BEDB838];
    v5 = MEMORY[0x24BEDB838] + 64;
    v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
    v24[0] = MEMORY[0x24BEDB838] + 64;
    v22[0] = v6;
    *(_QWORD *)((char *)v22 + *(_QWORD *)(v6 - 24)) = v7;
    v22[1] = 0;
    v8 = (std::ios_base *)((char *)v22 + *(_QWORD *)(v22[0] - 24));
    std::ios_base::init(v8, v23);
    v8[1].__vftable = 0;
    v8[1].__fmtflags_ = -1;
    v22[0] = v4 + 24;
    v24[0] = v5;
    MEMORY[0x22E2E9A8C](v23);
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)((char *)v22 + *(_QWORD *)(v22[0] - 24)), *(_DWORD *)&v23[*(_QWORD *)(v22[0] - 24) + 16] | 4);
    v9 = (std::locale::id *)MEMORY[0x24BEDB350];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[0] - 24)));
      v10 = std::locale::use_facet(&v17, v9);
      v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v17);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)__p, v11);
      if ((v23[*(_QWORD *)(v22[0] - 24) + 16] & 5) != 0)
        break;
      if ((v21 & 0x80u) == 0)
        v12 = v21;
      else
        v12 = (size_t)__p[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v17, v12 + 1);
      if ((v19 & 0x80u) == 0)
        locale = (char *)&v17;
      else
        locale = (char *)v17.__locale_;
      if (v12)
      {
        if ((v21 & 0x80u) == 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        memmove(locale, v14, v12);
      }
      *(_WORD *)&locale[v12] = 10;
      if ((v19 & 0x80u) == 0)
        v15 = (const std::string::value_type *)&v17;
      else
        v15 = (const std::string::value_type *)v17.__locale_;
      if ((v19 & 0x80u) == 0)
        v16 = v19;
      else
        v16 = v18;
      std::string::append(a2, v15, v16);
      if ((char)v19 < 0)
        operator delete(v17.__locale_);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v22 + *(_QWORD *)(v22[0] - 24)), *(_DWORD *)&v23[*(_QWORD *)(v22[0] - 24) + 16] | 4);
    v22[0] = *MEMORY[0x24BEDB7E0];
    *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
    MEMORY[0x22E2E9A98](v23);
    std::istream::~istream();
    MEMORY[0x22E2E9C48](v24);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
}

void sub_22AF74C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::istream::~istream();
  MEMORY[0x22E2E9C48](a11);
  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::WriteFileFromVector(uint64_t a1, std::string *a2)
{
  const char *v4;
  FILE *v5;
  uint64_t *v6;

  v5 = siri::intelligence::OpenDataFile(a2, (const char *)1);
  if (v5)
  {
    fwrite(*(const void **)a1, *(_QWORD *)(a1 + 8) - *(_QWORD *)a1, 1uLL, v5);
    fclose(v5);
  }
  else
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = (uint64_t *)a2;
    else
      v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Error saving to file %s", v4, v6);
  }
  return v5 != 0;
}

BOOL siri::intelligence::WriteFileFromLines(__int128 **a1, std::string *a2)
{
  const char *v4;
  FILE *v5;
  size_t v6;
  char v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  size_t v11;
  uint64_t *v12;
  void *__p[2];
  char v15;
  std::string v16;

  v5 = siri::intelligence::OpenDataFile(a2, (const char *)1);
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\n");
    siri::intelligence::StringJoin(a1, (uint64_t)__p, (uint64_t)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
    v6 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    v7 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    size = v16.__r_.__value_.__l.__size_;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      v9 = v16.__r_.__value_.__l.__size_;
    if (v9)
    {
      std::string::append(&v16, "\n");
      v6 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      size = v16.__r_.__value_.__l.__size_;
      v7 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    if (v7 >= 0)
      v10 = &v16;
    else
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if (v7 >= 0)
      v11 = v6;
    else
      v11 = size;
    fwrite(v10, v11, 1uLL, v5);
    fclose(v5);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Error saving to file %s", v4, v12);
  }
  return v5 != 0;
}

void sub_22AF74E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::WriteFileFromString(uint64_t a1, std::string *a2)
{
  int v3;
  char *v4;
  size_t v5;
  _BYTE *v6;
  char v7;
  _BOOL8 v8;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (char *)a1;
  else
    v4 = *(char **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v5)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](&__p, v5);
    v6 = v11;
    do
    {
      v7 = *v4++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
    v11 = v6;
  }
  v8 = siri::intelligence::WriteFileFromVector((uint64_t)&__p, a2);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_22AF74F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::WriteTempFileFromString(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v6;
  const char *v7;
  FILE *v8;
  int v9;
  const void *v10;
  size_t v11;
  std::string *v12;
  void *__p[2];
  char v14;
  std::string v15;
  char __s[24];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  strcpy(__s, "/tmp/flowtmpfile_XXXXXX");
  v6 = mkstemp(__s);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  siri::intelligence::AddExtension((uint64_t)__p, a2, (uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p[0]);
  close(v6);
  v8 = siri::intelligence::OpenDataFile(&v15, (const char *)1);
  if (v8)
  {
    v9 = *((char *)a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = *a1;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a1 + 23);
    else
      v11 = (size_t)a1[1];
    fwrite(v10, 1uLL, v11, v8);
    fclose(v8);
    *a3 = v15;
  }
  else
  {
    v12 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to create a temporary file: %s", v7, v12);
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_5);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_22AF75088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::AddExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  size_t v7;
  std::string *p_p;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
LABEL_7:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, (const void **)a2, a3);
      return;
    }
    v6 = *(_BYTE **)a2;
  }
  else
  {
    v6 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_7;
  }
  if (*v6 == 46)
    goto LABEL_7;
  if (*(char *)(a1 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a1 + 23) >= 0)
      v9 = (const void *)a1;
    else
      v9 = *(const void **)a1;
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 46;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&__p, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF751F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::CopyFile(std::string *a1, std::string *a2)
{
  _BOOL8 v3;
  void *__p;
  void *v6;
  uint64_t v7;

  __p = 0;
  v6 = 0;
  v7 = 0;
  v3 = (siri::intelligence::ReadFileToVector((unint64_t *)&__p, a1) & 1) != 0
    && siri::intelligence::WriteFileFromVector((uint64_t)&__p, a2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_22AF7527C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::DeleteFile(const char *a1)
{
  uint64_t *v1;
  int v2;
  int *v3;
  char *v4;
  const char *v5;

  v1 = (uint64_t *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v2 = unlink(a1);
  if (v2 == -1)
  {
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v3 = __error();
    v4 = strerror(*v3);
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"unlink(2) failed on %s:  %s\n", v5, v1, v4);
  }
  return v2 != -1;
}

void siri::intelligence::ChangeExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v6;
  int v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string __p;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    v6 = std::string::rfind(&__p, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v6 != -1)
      std::string::erase(&__p, v6, 0xFFFFFFFFFFFFFFFFLL);
    v7 = *(char *)(a2 + 23);
    v8 = *(const std::string::value_type **)a2;
    if (v7 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (*v9 != 46)
    {
      std::string::append(&__p, ".");
      LOBYTE(v7) = *(_BYTE *)(a2 + 23);
      v8 = *(const std::string::value_type **)a2;
    }
    if ((v7 & 0x80u) == 0)
      v10 = (const std::string::value_type *)a2;
    else
      v10 = v8;
    if ((v7 & 0x80u) == 0)
      v11 = v7;
    else
      v11 = *(_QWORD *)(a2 + 8);
    v12 = std::string::append(&__p, v10, v11);
    if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
    }
    else
    {
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_22AF75460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

std::string *siri::intelligence::GetExtension@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v6;

  v4 = std::string::rfind(a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
  else
    return std::string::basic_string(a2, a1, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v6);
}

BOOL siri::intelligence::HasExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  std::string::size_type size;
  std::string::size_type v7;
  int v8;
  std::string *p_p;
  uint64_t v10;
  std::string *p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  _BOOL8 v18;
  std::string v20;
  std::string __p;
  std::string __s1;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      siri::intelligence::GetExtension((const std::string *)a1, &__p);
      siri::intelligence::StringToLower((uint64_t)&__p, &__s1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::intelligence::StringTrim(".", (const std::string *)a2, &v20);
      siri::intelligence::StringToLower((uint64_t)&v20, &__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        size = __s1.__r_.__value_.__l.__size_;
      v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = __p.__r_.__value_.__l.__size_;
      if (size != v7)
      {
        v18 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v18 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v18 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_34:
            if ((v5 & 0x80) == 0)
              return v18;
LABEL_38:
            operator delete(__s1.__r_.__value_.__l.__data_);
            return v18;
          }
LABEL_37:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
            return v18;
          goto LABEL_38;
        }
        v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          v13 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          v12 = v13;
          v15 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v14 = v15;
          v17 = v10-- != 0;
          v18 = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      if ((v8 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_37;
    }
  }
  return 0;
}

void sub_22AF7572C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::RemoveExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v5;

  v4 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v5);
  }
}

BOOL siri::intelligence::IsUrl(std::string *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "http:");
  if (siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)v6))
  {
    v2 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "https:");
    v2 = siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_22AF7588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::AreFilesEqual(std::string *a1, std::string *a2)
{
  uint64_t v4;
  std::string::size_type size;
  std::string::size_type v6;
  int v7;
  std::string *v8;
  std::string *v9;
  _BOOL8 v10;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  if (!siri::intelligence::FileExists((uint64_t *)a1) || !siri::intelligence::FileExists((uint64_t *)a2))
    return 0;
  v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) == 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = a2->__r_.__value_.__l.__size_;
  if (size == v6)
  {
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(a1->__r_.__value_.__l.__data_, v8, a1->__r_.__value_.__l.__size_))
        goto LABEL_21;
    }
    else if (*((_BYTE *)&a1->__r_.__value_.__s + 23))
    {
      v9 = a1;
      v10 = 1;
      while (v9->__r_.__value_.__s.__data_[0] == v8->__r_.__value_.__s.__data_[0])
      {
        v9 = (std::string *)((char *)v9 + 1);
        v8 = (std::string *)((char *)v8 + 1);
        if (!--v4)
          return v10;
      }
      goto LABEL_21;
    }
    return 1;
  }
LABEL_21:
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  siri::intelligence::ReadFileToVector((unint64_t *)&v17, a1);
  siri::intelligence::ReadFileToVector((unint64_t *)&v14, a2);
  v12 = v17;
  v13 = v14;
  if (v18 - v17 != v15 - v14)
  {
    v10 = 0;
    if (!v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  v10 = memcmp(v17, v14, v18 - v17) == 0;
  if (v13)
  {
LABEL_25:
    v15 = v13;
    operator delete(v13);
    v12 = v17;
  }
LABEL_26:
  if (v12)
  {
    v18 = v12;
    operator delete(v12);
  }
  return v10;
}

void sub_22AF75A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::AreFilesEqualIgnoringFirstNLines(unsigned __int8 *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  std::vector<std::string>::const_iterator v14;
  std::vector<std::string>::const_iterator v15;
  std::vector<std::string>::const_iterator v16;
  std::vector<std::string>::const_iterator v17;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer v20;
  std::vector<std::string> v21;
  std::vector<std::string> v22;
  std::vector<std::string> *v23;

  if (!siri::intelligence::FileExists((uint64_t *)a1) || !siri::intelligence::FileExists(a2))
    return 0;
  v6 = a1[23];
  if ((v6 & 0x80u) == 0)
    v7 = a1[23];
  else
    v7 = *((_QWORD *)a1 + 1);
  v8 = *((unsigned __int8 *)a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = a2[1];
  if (v7 == v8)
  {
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = (unsigned __int8 *)*a2;
    if ((v6 & 0x80) == 0)
    {
      if (a1[23])
      {
        v11 = a1;
        v12 = 1;
        while (*v11 == *v10)
        {
          ++v11;
          ++v10;
          if (!--v6)
            return v12;
        }
        goto LABEL_21;
      }
      return 1;
    }
    if (!memcmp(*(const void **)a1, v10, *((_QWORD *)a1 + 1)))
      return 1;
  }
LABEL_21:
  siri::intelligence::ReadFileToLines((uint64_t *)&v22);
  siri::intelligence::ReadFileToLines((uint64_t *)&v21);
  if (a3 >= 1)
  {
    v14.__i_ = v22.__begin_;
    v15.__i_ = &v22.__begin_[a3];
    std::vector<std::string>::erase(&v22, v14, v15);
    v16.__i_ = v21.__begin_;
    v17.__i_ = &v21.__begin_[a3];
    std::vector<std::string>::erase(&v21, v16, v17);
  }
  begin = v22.__begin_;
  end = v22.__end_;
  v20 = v21.__begin_;
  if ((char *)v22.__end_ - (char *)v22.__begin_ == (char *)v21.__end_ - (char *)v21.__begin_)
  {
    if (v22.__begin_ == v22.__end_)
    {
      v12 = 1;
    }
    else
    {
      do
      {
        v12 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v23, (unsigned __int8 *)begin, (unsigned __int8 *)v20);
        if (!(_DWORD)v12)
          break;
        ++begin;
        ++v20;
      }
      while (begin != end);
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v21.__begin_ = (std::vector<std::string>::pointer)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return v12;
}

void sub_22AF75BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t siri::intelligence::IsAbsPath(std::string *a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;

  if (siri::intelligence::IsUrl(a1))
    return 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  v2 = siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_22AF75D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::GetAbsPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;
  char __s[1024];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (siri::intelligence::IsAbsPath((std::string *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    getcwd(__s, 0x400uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    siri::intelligence::JoinPath((uint64_t)__p, a1, (uint64_t)a2);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_22AF75E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::intelligence::GetCurrentDir@<X0>(_QWORD *a1@<X8>)
{
  char __s[1024];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  getcwd(__s, 0x400uLL);
  return std::string::basic_string[abi:ne180100]<0>(a1, __s);
}

double siri::intelligence::JoinPath@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  siri::intelligence::JoinPath(a1, a2, a6);
  v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 8);
  if (v11)
  {
    siri::intelligence::JoinPath(a6, a3, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0)
      operator delete(*(void **)a6);
    result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(_QWORD *)(a6 + 16) = v15;
  }
  v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a4 + 8);
  if (v12)
  {
    siri::intelligence::JoinPath(a6, a4, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0)
      operator delete(*(void **)a6);
    result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(_QWORD *)(a6 + 16) = v15;
  }
  v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a5 + 8);
  if (v13)
  {
    siri::intelligence::JoinPath(a6, a5, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0)
      operator delete(*(void **)a6);
    result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(_QWORD *)(a6 + 16) = v15;
  }
  return result;
}

void sub_22AF75FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::AddQueryStringParam(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  int v9;
  uint64_t v10;
  size_t v11;
  std::string *v12;
  const std::string::value_type *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *p_p;
  std::string::size_type v21;
  size_t v22;
  std::string *v23;
  const std::string::value_type *v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  void *v33;
  size_t v34;
  std::string *v35;
  const std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  size_t v39;
  std::string *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;
  std::string __p;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "?");
  v9 = siri::intelligence::StringContains((char **)a1, (char *)&v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    if (v10)
    {
      if (*(char *)(a1 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      v12 = &v46;
      std::string::basic_string[abi:ne180100]((uint64_t)&v46, v11 + 1);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*(char *)(a1 + 23) >= 0)
          v13 = (const std::string::value_type *)a1;
        else
          v13 = *(const std::string::value_type **)a1;
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 38;
      siri::intelligence::StringUriEscape((uint64_t *)a2, &v45);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v45;
      else
        v14 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        size = v45.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v46, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v47, "=");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::StringUriEscape((uint64_t *)a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v21 = __p.__r_.__value_.__l.__size_;
      goto LABEL_57;
    }
    if (*(char *)(a1 + 23) >= 0)
      v34 = *(unsigned __int8 *)(a1 + 23);
    else
      v34 = *(_QWORD *)(a1 + 8);
    v35 = &v48;
    std::string::basic_string[abi:ne180100]((uint64_t)&v48, v34 + 1);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if (v34)
    {
      if (*(char *)(a1 + 23) >= 0)
        v36 = (const std::string::value_type *)a1;
      else
        v36 = *(const std::string::value_type **)a1;
      memmove(v35, v36, v34);
    }
    *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 38;
    siri::intelligence::StringUriEscape((uint64_t *)a2, &v47);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v47;
    else
      v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v38 = v47.__r_.__value_.__l.__size_;
  }
  else
  {
    if (v10)
    {
      if (*(char *)(a1 + 23) >= 0)
        v22 = *(unsigned __int8 *)(a1 + 23);
      else
        v22 = *(_QWORD *)(a1 + 8);
      v23 = &v46;
      std::string::basic_string[abi:ne180100]((uint64_t)&v46, v22 + 1);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (v22)
      {
        if (*(char *)(a1 + 23) >= 0)
          v24 = (const std::string::value_type *)a1;
        else
          v24 = *(const std::string::value_type **)a1;
        memmove(v23, v24, v22);
      }
      *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 63;
      siri::intelligence::StringUriEscape((uint64_t *)a2, &v45);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v45;
      else
        v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v26 = v45.__r_.__value_.__l.__size_;
      v27 = std::string::append(&v46, (const std::string::value_type *)v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v47, "=");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::StringUriEscape((uint64_t *)a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v21 = __p.__r_.__value_.__l.__size_;
LABEL_57:
      v31 = std::string::append(&v48, (const std::string::value_type *)p_p, v21);
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      {
        v33 = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_104:
        operator delete(v33);
        return;
      }
      return;
    }
    if (*(char *)(a1 + 23) >= 0)
      v39 = *(unsigned __int8 *)(a1 + 23);
    else
      v39 = *(_QWORD *)(a1 + 8);
    v40 = &v48;
    std::string::basic_string[abi:ne180100]((uint64_t)&v48, v39 + 1);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if (v39)
    {
      if (*(char *)(a1 + 23) >= 0)
        v41 = (const std::string::value_type *)a1;
      else
        v41 = *(const std::string::value_type **)a1;
      memmove(v40, v41, v39);
    }
    *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 63;
    siri::intelligence::StringUriEscape((uint64_t *)a2, &v47);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v47;
    else
      v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    else
      v38 = v47.__r_.__value_.__l.__size_;
  }
  v42 = std::string::append(&v48, (const std::string::value_type *)v37, v38);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    v33 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_104;
  }
}

void sub_22AF76480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(exception_object);
}

double siri::intelligence::DirName@<D0>(std::string *__str@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v7;
  unsigned __int8 *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  unsigned __int8 *v12;
  int v13;
  int64_t v14;
  double result;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  int v19;
  std::string::size_type v20;
  std::string v21;
  char v22;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size)
    {
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_6;
    }
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_5);
    return result;
  }
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
    goto LABEL_24;
  v7 = __str;
LABEL_6:
  v8 = (unsigned __int8 *)v7 + size;
  v9 = v7;
  v10 = (std::string *)v8;
  do
  {
    v11 = v9;
    v12 = (unsigned __int8 *)v9;
    while (1)
    {
      v13 = *v12++;
      if (v13 == 47)
        break;
      v11 = (std::string *)v12;
      if (v12 == v8)
      {
        v11 = v10;
        goto LABEL_12;
      }
    }
    v9 = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
    v10 = v11;
  }
  while (v12 != v8);
LABEL_12:
  if (v11 == (std::string *)v8)
    goto LABEL_24;
  v14 = (char *)v11 - (char *)v7;
  if (v14 == -1)
    goto LABEL_24;
  std::string::basic_string(a3, __str, 0, v14 + 1, (std::allocator<char> *)&v21);
  if (a2)
  {
    v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if ((v16 & 0x80u) != 0)
      v16 = a3->__r_.__value_.__l.__size_;
    v18 = (uint64_t)&v17[-1].__r_.__value_.__r.__words[2] + 7;
    while (v16)
    {
      v19 = *(unsigned __int8 *)(v18 + v16--);
      if (v19 != 47)
      {
        v20 = v16 + 1;
        goto LABEL_26;
      }
    }
    v20 = 0;
LABEL_26:
    std::string::basic_string(&v21, a3, 0, v20, (std::allocator<char> *)&v22);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      operator delete(a3->__r_.__value_.__l.__data_);
    result = *(double *)&v21.__r_.__value_.__l.__data_;
    *a3 = v21;
  }
  return result;
}

void sub_22AF76694(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::BaseName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  const std::string::value_type *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  std::string::size_type v15;
  std::string __p;
  char v17;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, 0);
      return;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
    {
LABEL_25:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  v6 = v5 - 1;
  if ((v4 & 0x80) != 0)
  {
    v8 = *(const std::string::value_type **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v6) != 47)
    {
      v9 = *(_QWORD *)(a1 + 8);
      if (!v9)
      {
        v15 = 0;
        goto LABEL_29;
      }
      v7 = (unsigned __int8 *)&v8[v9];
LABEL_15:
      v10 = v8;
      v11 = v7;
      do
      {
        v12 = (unsigned __int8 *)v10;
        v13 = (unsigned __int8 *)v10;
        while (1)
        {
          v14 = *v13++;
          if (v14 == 47)
            break;
          v12 = v13;
          if (v13 == v7)
          {
            v12 = v11;
            goto LABEL_21;
          }
        }
        v10 = (const std::string::value_type *)(v12 + 1);
        v11 = v12;
      }
      while (v13 != v7);
LABEL_21:
      if (v12 != v7 && v12 - (unsigned __int8 *)v8 != -1)
      {
        std::string::basic_string(a2, (const std::string *)a1, v12 - (unsigned __int8 *)v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        return;
      }
      if ((v4 & 0x80) == 0)
        goto LABEL_25;
      v8 = *(const std::string::value_type **)a1;
      v15 = *(_QWORD *)(a1 + 8);
LABEL_29:
      std::string::__init_copy_ctor_external(a2, v8, v15);
      return;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  else if (*(_BYTE *)(a1 + v6) != 47)
  {
    v7 = (unsigned __int8 *)(a1 + v4);
    v8 = (const std::string::value_type *)a1;
    goto LABEL_15;
  }
  std::string::basic_string(&__p, (const std::string *)a1, 0, v4 - 1, (std::allocator<char> *)&v17);
  siri::intelligence::BaseName(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF76828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::PopPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char v4;
  std::string::size_type v5;
  void *v6;
  unint64_t v7;
  void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  const std::string::value_type *v11;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string __str;
  void *__p[2];
  unsigned __int8 v19;
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  v4 = *(_BYTE *)(a1 + 23);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0)
    v6 = (void *)*(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(void **)(a1 + 8);
  if (!v6)
    goto LABEL_22;
  v7 = v19;
  if ((v19 & 0x80u) != 0)
    v7 = (unint64_t)__p[1];
  if (v6 == (void *)v7)
  {
    if ((v19 & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if ((*(_BYTE *)(a1 + 23) & 0x80) != 0)
    {
      v11 = *(const std::string::value_type **)a1;
      if (memcmp(*(const void **)a1, v8, *(_QWORD *)(a1 + 8))
        && siri::intelligence::SubStringCount(a1, (uint64_t)__p))
      {
        goto LABEL_24;
      }
    }
    else if (*(_BYTE *)(a1 + 23))
    {
      v9 = (unsigned __int8 *)a1;
      v10 = *(unsigned __int8 *)(a1 + 23);
      while (*v9 == *(unsigned __int8 *)v8)
      {
        ++v9;
        v8 = (void **)((char *)v8 + 1);
        if (!--v10)
          goto LABEL_22;
      }
      goto LABEL_17;
    }
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
    goto LABEL_48;
  }
LABEL_17:
  if (!siri::intelligence::SubStringCount(a1, (uint64_t)__p))
    goto LABEL_22;
  if ((v4 & 0x80) == 0)
  {
    __str = *(std::string *)a1;
    goto LABEL_25;
  }
  v11 = *(const std::string::value_type **)a1;
LABEL_24:
  std::string::__init_copy_ctor_external(&__str, v11, v5);
LABEL_25:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[size - 1] == 47)
  {
    std::string::basic_string(&v16, &__str, 0, size - 1, (std::allocator<char> *)&v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v16;
  }
  if (!siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)__p)
    || siri::intelligence::SubStringCount((uint64_t)&__str, (uint64_t)__p) != 1)
  {
    siri::intelligence::DirName(&__str, 0, &v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v16;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_43:
        if (v15->__r_.__value_.__s.__data_[v14 - 1] == 47)
        {
          std::string::basic_string(&v16, &__str, 0, v14 - 1, (std::allocator<char> *)&v20);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = v16;
        }
      }
    }
    else
    {
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&v16.__r_.__value_.__s + 23))
      {
        v15 = &__str;
        goto LABEL_43;
      }
    }
    *a2 = __str;
    goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "/");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_48:
  if ((char)v19 < 0)
    operator delete(__p[0]);
}

void sub_22AF76AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::MakeDir(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  std::string::size_type size;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  char v15;
  std::string v16;
  std::vector<std::string> v17;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || siri::intelligence::DirExists((uint64_t *)a1))
    return 1;
  memset(&v16, 0, sizeof(v16));
  siri::intelligence::StringSplit((unsigned __int8 *)a1, "/", (uint64_t *)&v16, &v17);
  __p[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(&v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  v4 = siri::intelligence::StringStartsWith((std::string *)a1, (unsigned __int8 *)__p);
  v5 = v4;
  if ((v15 & 0x80000000) == 0)
  {
    if (!v4)
      goto LABEL_11;
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v5)
LABEL_10:
    MEMORY[0x22E2E99E4](&v16, "/");
LABEL_11:
  begin = v17.__begin_;
  end = v17.__end_;
  if (v17.__begin_ == v17.__end_)
  {
LABEL_28:
    v3 = 1;
  }
  else
  {
    while (1)
    {
      size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v16.__r_.__value_.__l.__size_;
      if (size >= 2)
        std::string::append(&v16, "/");
      v9 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      v10 = v9 >= 0
          ? (const std::string::value_type *)begin
          : (const std::string::value_type *)begin->__r_.__value_.__r.__words[0];
      v11 = v9 >= 0 ? HIBYTE(begin->__r_.__value_.__r.__words[2]) : begin->__r_.__value_.__l.__size_;
      std::string::append(&v16, v10, v11);
      if (!siri::intelligence::DirExists((uint64_t *)&v16))
      {
        v12 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v16
            : (std::string *)v16.__r_.__value_.__r.__words[0];
        if (mkdir((const char *)v12, 0x1FFu) == -1)
          break;
      }
      if (++begin == end)
        goto LABEL_28;
    }
    v3 = 0;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  return v3;
}

void sub_22AF76CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *siri::intelligence::ExecuteShellCommand@<X0>(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v2;
  FILE *v4;
  const char *v5;
  FILE *v6;
  uint64_t *v8;
  std::string::value_type __s[256];
  uint64_t v10;

  v2 = (uint64_t *)a1;
  v10 = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = popen(a1, "r");
  if (v4)
  {
    v6 = v4;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (fgets(__s, 256, v6))
      std::string::append(a2, __s);
    return (_QWORD *)pclose(v6);
  }
  else
  {
    if (*((char *)v2 + 23) >= 0)
      v8 = v2;
    else
      v8 = (uint64_t *)*v2;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to execute shell command: %s", v5, v8);
    return std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
  }
}

void sub_22AF76E20(_Unwind_Exception *a1)
{
  uint64_t v1;
  FILE *v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  pclose(v2);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::DeleteDir(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
  v2 = siri::intelligence::InnerDeleteDir(a1, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  rmdir(v3);
  return v2;
}

void sub_22AF76EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::InnerDeleteDir(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = 1;
  siri::intelligence::ListDir(a1, 1, 0, (uint64_t)&v14);
  v5 = v14;
  if (v15 != v14)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      siri::intelligence::JoinPath(a1, v5 + v6, (uint64_t)v12);
      siri::intelligence::JoinPath(a2, v14 + v6, (uint64_t)__p);
      if (siri::intelligence::DirExists((uint64_t *)v12))
      {
        v4 = siri::intelligence::InnerDeleteDir(v12, __p) & v4;
        if (v13 >= 0)
          v8 = v12;
        else
          v8 = (void **)v12[0];
        rmdir((const char *)v8);
      }
      else
      {
        v4 = siri::intelligence::DeleteFile((const char *)v12) & v4;
      }
      if (v11 < 0)
        operator delete(__p[0]);
      if (v13 < 0)
        operator delete(v12[0]);
      ++v7;
      v5 = v14;
      v6 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  }
  v12[0] = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  return v4;
}

void sub_22AF76FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::ListDir(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  DIR *v8;
  const char *v9;
  DIR *v10;
  dirent *v11;
  char *d_name;
  char **v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  void *v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  __int128 *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::string *v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  void *v61[2];
  char v62;
  void *v63[2];
  std::string::size_type v64;
  void *v65[2];
  std::string::size_type v66;
  char **v67;
  char *v68[2];
  std::__split_buffer<std::string> __p;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v68[0] = 0;
  v68[1] = 0;
  v67 = v68;
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v67, (const void **)&__p.__first_, (uint64_t)&__p);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "..");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v67, (const void **)&__p.__first_, (uint64_t)&__p);
  if (SHIBYTE(__p.__end_) < 0)
    operator delete(__p.__first_);
  if (*(char *)(a1 + 23) >= 0)
    v7 = (const char *)a1;
  else
    v7 = *(const char **)a1;
  v8 = opendir(v7);
  v10 = v8;
  if (v8)
  {
    v11 = readdir(v8);
    v59 = a1;
    while (1)
    {
      if (!v11)
      {
        closedir(v10);
        goto LABEL_85;
      }
      d_name = v11->d_name;
      std::string::basic_string[abi:ne180100]<0>(&__p, v11->d_name);
      v13 = (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v67, (const void **)&__p.__first_);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (v68 != v13)
        goto LABEL_79;
      if ((_DWORD)a3)
        break;
      std::string::basic_string[abi:ne180100]<0>(v65, d_name);
      v18 = *(_QWORD *)(a4 + 8);
      v17 = *(_QWORD *)(a4 + 16);
      if (v18 >= v17)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a4) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a4) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v28)
          v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v28);
        else
          v29 = 0;
        v35 = v29 + v25;
        __p.__first_ = v29;
        __p.__begin_ = v35;
        __p.__end_cap_.__value_ = &v29[v28];
        v36 = *(_OWORD *)v65;
        v35->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
        v65[1] = 0;
        v66 = 0;
        v65[0] = 0;
        __p.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
        v37 = *(_QWORD *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__p);
        v38 = SHIBYTE(v66);
        *(_QWORD *)(a4 + 8) = v37;
        if ((v38 & 0x80000000) == 0)
          goto LABEL_44;
        v34 = v65[0];
LABEL_43:
        operator delete(v34);
        goto LABEL_44;
      }
      v19 = *(_OWORD *)v65;
      *(_QWORD *)(v18 + 16) = v66;
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(a4 + 8) = v18 + 24;
LABEL_44:
      if (a2)
        goto LABEL_79;
      std::string::basic_string[abi:ne180100]<0>(v65, d_name);
      siri::intelligence::JoinPath(a1, (uint64_t)v65, (uint64_t)&__p);
      v39 = siri::intelligence::DirExists((uint64_t *)&__p);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (SHIBYTE(v66) < 0)
      {
        operator delete(v65[0]);
        if (!v39)
          goto LABEL_79;
      }
      else if (!v39)
      {
        goto LABEL_79;
      }
      std::string::basic_string[abi:ne180100]<0>(v63, d_name);
      siri::intelligence::JoinPath(a1, (uint64_t)v63, (uint64_t)&__p);
      siri::intelligence::ListDir(v65, &__p, 0, a3);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (SHIBYTE(v64) < 0)
        operator delete(v63[0]);
      v40 = (char *)v65[0];
      if (v65[1] != v65[0])
      {
        v41 = 0;
        v42 = 0;
        do
        {
          if ((_DWORD)a3)
          {
            v43 = (__int128 *)&v40[v41];
            v44 = *(_QWORD *)(a4 + 8);
            if (v44 >= *(_QWORD *)(a4 + 16))
            {
              v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v43);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, v43);
              v45 = v44 + 24;
            }
            *(_QWORD *)(a4 + 8) = v45;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v61, d_name);
            siri::intelligence::JoinPath((uint64_t)v61, (uint64_t)v65[0] + v41, (uint64_t)v63);
            v46 = *(_QWORD *)(a4 + 8);
            v47 = *(_QWORD *)(a4 + 16);
            if (v46 >= v47)
            {
              v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(_QWORD *)a4) >> 3);
              v50 = v49 + 1;
              if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
              v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(_QWORD *)a4) >> 3);
              if (2 * v51 > v50)
                v50 = 2 * v51;
              if (v51 >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v50;
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
              if (v52)
                v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v52);
              else
                v53 = 0;
              v54 = v53 + v49;
              __p.__first_ = v53;
              __p.__begin_ = v54;
              __p.__end_cap_.__value_ = &v53[v52];
              v55 = *(_OWORD *)v63;
              v54->__r_.__value_.__r.__words[2] = v64;
              *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
              v63[1] = 0;
              v64 = 0;
              v63[0] = 0;
              __p.__end_ = v54 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
              v56 = *(_QWORD *)(a4 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v57 = SHIBYTE(v64);
              *(_QWORD *)(a4 + 8) = v56;
              if (v57 < 0)
                operator delete(v63[0]);
            }
            else
            {
              v48 = *(_OWORD *)v63;
              *(_QWORD *)(v46 + 16) = v64;
              *(_OWORD *)v46 = v48;
              v63[1] = 0;
              v64 = 0;
              v63[0] = 0;
              *(_QWORD *)(a4 + 8) = v46 + 24;
            }
            if (v62 < 0)
              operator delete(v61[0]);
          }
          ++v42;
          v40 = (char *)v65[0];
          v41 += 24;
        }
        while (v42 < 0xAAAAAAAAAAAAAAABLL * (((char *)v65[1] - (char *)v65[0]) >> 3));
      }
      __p.__first_ = (std::__split_buffer<std::string>::pointer)v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      a1 = v59;
LABEL_79:
      v11 = readdir(v10);
    }
    std::string::basic_string[abi:ne180100]<0>(v63, d_name);
    siri::intelligence::JoinPath(a1, (uint64_t)v63, (uint64_t)v65);
    v14 = *(_QWORD *)(a4 + 8);
    v15 = *(_QWORD *)(a4 + 16);
    if (v14 >= v15)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a4) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a4) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x555555555555555)
        v23 = 0xAAAAAAAAAAAAAAALL;
      else
        v23 = v21;
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v23)
        v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v23);
      else
        v24 = 0;
      v30 = v24 + v20;
      __p.__first_ = v24;
      __p.__begin_ = v30;
      __p.__end_cap_.__value_ = &v24[v23];
      v31 = *(_OWORD *)v65;
      v30->__r_.__value_.__r.__words[2] = v66;
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
      v65[1] = 0;
      v66 = 0;
      v65[0] = 0;
      __p.__end_ = v30 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
      v32 = *(_QWORD *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      v33 = SHIBYTE(v66);
      *(_QWORD *)(a4 + 8) = v32;
      if (v33 < 0)
        operator delete(v65[0]);
    }
    else
    {
      v16 = *(_OWORD *)v65;
      *(_QWORD *)(v14 + 16) = v66;
      *(_OWORD *)v14 = v16;
      v65[1] = 0;
      v66 = 0;
      v65[0] = 0;
      *(_QWORD *)(a4 + 8) = v14 + 24;
    }
    if ((SHIBYTE(v64) & 0x80000000) == 0)
      goto LABEL_44;
    v34 = v63[0];
    goto LABEL_43;
  }
  if (*(char *)(a1 + 23) >= 0)
    v58 = (const char *)a1;
  else
    v58 = *(const char **)a1;
  siri::intelligence::Log::Warning((siri::intelligence::Log *)"Failed to opendir for %s", v9, v58);
LABEL_85:
  std::__tree<std::string>::destroy((uint64_t)&v67, v68[0]);
}

void sub_22AF77658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, __int16 a8, char a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *__pa,uint64_t a27,uint64_t a28,void **a29,char *a30)
{
  std::__tree<std::string>::destroy((uint64_t)&a29, a30);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::CopyTree(uint64_t *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  char v6;
  __int128 v7;
  char Dir;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;
  std::string v14;
  std::string v15;
  std::string v16;
  __int128 *v17;
  __int128 *v18;
  std::string v19;

  if (siri::intelligence::DirExists(a1))
  {
    siri::intelligence::BaseName((uint64_t)a1, &v19);
    siri::intelligence::ListDir((uint64_t)a1, 0, 0, (uint64_t)&v17);
    v4 = v17;
    v5 = v18;
    v6 = 1;
    if (v17 != v18)
    {
      while (1)
      {
        if (*((char *)v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
        }
        else
        {
          v7 = *v4;
          v16.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
          *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
        }
        siri::intelligence::JoinPath((uint64_t)a1, (uint64_t)&v16, (uint64_t)&v15);
        std::string::basic_string[abi:ne180100]<0>(v12, (char *)&str_5);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
        siri::intelligence::JoinPath(a2, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)v12, (uint64_t)__p, (uint64_t)&v14);
        if (v11 < 0)
          operator delete(__p[0]);
        if (v13 < 0)
          operator delete(v12[0]);
        if (siri::intelligence::DirExists((uint64_t *)&v15))
          break;
        if (siri::intelligence::FileExists((uint64_t *)&v15))
        {
          Dir = siri::intelligence::CopyFile(&v15, &v14);
          goto LABEL_14;
        }
LABEL_15:
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        v4 = (__int128 *)((char *)v4 + 24);
        if (v4 == v5)
          goto LABEL_22;
      }
      Dir = siri::intelligence::MakeDir((uint64_t)&v14);
LABEL_14:
      v6 &= Dir;
      goto LABEL_15;
    }
LABEL_22:
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_22AF7795C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 49) < 0)
    operator delete(*(void **)(v38 - 72));
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x22E2E9ABC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_22AF77C58(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x22AF77C24);
  }
  __cxa_rethrow();
}

void sub_22AF77C9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t YAML::Load@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  YAML::Load(v5, a2);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v7);
}

void sub_22AF77E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_22AF77F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](v1);
  _Unwind_Resume(a1);
}

YAML::Scanner *YAML::Load@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  YAML::Scanner *result;
  _BYTE v4[112];
  YAML::Scanner *v5;
  uint64_t v6;

  YAML::Parser::Parser(&v5, a1);
  YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v4);
  if ((YAML::Parser::HandleNextDocument(&v5, (uint64_t)v4) & 1) != 0)
  {
    YAML::NodeBuilder::Root((YAML::NodeBuilder *)v4, a2);
  }
  else
  {
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v4);
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100](&v6, 0);
  result = v5;
  v5 = 0;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    return (YAML::Scanner *)MEMORY[0x22E2E9CCC]();
  }
  return result;
}

void sub_22AF78020(_Unwind_Exception *a1)
{
  uint64_t v1;

  YAML::Parser::~Parser((YAML::Parser *)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t YAML::Load@<X0>(YAML *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::Load(v7, a2);
  v7[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v7[2] = v4;
  v7[3] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v9);
}

void sub_22AF7810C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadFile@<X0>(uint64_t a1@<X8>)
{
  YAML::BadFile *exception;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v4);
  if ((v5[*(_QWORD *)(v4[0] - 24) + 16] & 5) != 0)
  {
    exception = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
    YAML::BadFile::BadFile(exception);
  }
  YAML::Load(v4, a1);
  v4[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2E9A98](v5);
  std::istream::~istream();
  return MEMORY[0x22E2E9C48](v6);
}

void sub_22AF78240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadAll@<X0>(const std::string *a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[13];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v5, a1, 24);
  YAML::LoadAll(v5, a2);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v5[3] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v7);
}

void sub_22AF78318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

YAML::Scanner *YAML::LoadAll@<X0>(_QWORD *a1@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  YAML::Scanner *result;
  char v30[8];
  void *__p;
  char v32;
  std::__shared_weak_count *v33;
  _BYTE v34[112];
  YAML::Scanner *v35;
  uint64_t v36;
  char *v37;
  int64x2_t v38;
  char *v39;
  int64x2_t *v40;

  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  YAML::Parser::Parser(&v35, a1);
  while (1)
  {
    YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v34);
    if ((YAML::Parser::HandleNextDocument(&v35, (uint64_t)v34) & 1) == 0)
      break;
    YAML::NodeBuilder::Root((YAML::NodeBuilder *)v34, (uint64_t)v30);
    v4 = a2->u64[1];
    v3 = a2[1].u64[0];
    if (v4 >= v3)
    {
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - a2->i64[0]) >> 3);
      v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x492492492492492)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - a2->i64[0]) >> 3);
      if (2 * v8 > v7)
        v7 = 2 * v8;
      if (v8 >= 0x249249249249249)
        v9 = 0x492492492492492;
      else
        v9 = v7;
      v40 = a2 + 1;
      if (v9)
      {
        if (v9 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v10 = (char *)operator new(56 * v9);
      }
      else
      {
        v10 = 0;
      }
      v37 = v10;
      v38.i64[0] = (uint64_t)&v10[56 * v6];
      v38.i64[1] = v38.i64[0];
      v39 = &v10[56 * v9];
      std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(v38.i64[0], (uint64_t)v30);
      v11 = v38.i64[0];
      v5 = v38.i64[1] + 56;
      v38.i64[1] += 56;
      v12 = a2->i64[0];
      v13 = a2->u64[1];
      if (v13 == a2->i64[0])
      {
        v24 = vdupq_n_s64(v13);
      }
      else
      {
        v14 = 0;
        v15 = v38.i64[0];
        v16 = a2->u64[1];
        v17 = v38.i64[0];
        do
        {
          v18 = *(_BYTE *)(v16 - 56);
          v16 -= 56;
          *(_BYTE *)(v17 - 56) = v18;
          v17 -= 56;
          v19 = (std::string *)(v17 + 8);
          if (*(char *)(v16 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)(v13 - 48), *(_QWORD *)(v13 - 40));
          }
          else
          {
            v20 = *(_OWORD *)(v16 + 8);
            *(_QWORD *)(v17 + 24) = *(_QWORD *)(v16 + 24);
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          }
          *(_QWORD *)(v15 - 24) = *(_QWORD *)(v13 - 24);
          v21 = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v15 - 16) = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          *(_QWORD *)(v15 - 8) = *(_QWORD *)(v13 - 8);
          v14 -= 56;
          v15 = v17;
          v13 = v16;
        }
        while (v16 != v12);
        v24 = *a2;
        v5 = v38.i64[1];
        v11 = v17;
      }
      a2->i64[0] = v11;
      a2->i64[1] = v5;
      v38 = v24;
      v25 = (char *)a2[1].i64[0];
      a2[1].i64[0] = (uint64_t)v39;
      v39 = v25;
      v37 = (char *)v24.i64[0];
      std::__split_buffer<YAML::Node>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(a2->i64[1], (uint64_t)v30);
      v5 = v4 + 56;
      a2->i64[1] = v4 + 56;
    }
    a2->i64[1] = v5;
    v26 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v32 < 0)
      operator delete(__p);
    YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v34);
  }
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v34);
  std::unique_ptr<YAML::Directives>::reset[abi:ne180100](&v36, 0);
  result = v35;
  v35 = 0;
  if (result)
  {
    YAML::Scanner::~Scanner(result);
    return (YAML::Scanner *)MEMORY[0x22E2E9CCC]();
  }
  return result;
}

void sub_22AF7860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadAll@<X0>(YAML *this@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  _QWORD v7[13];
  char v8;
  uint64_t v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  YAML::LoadAll(v7, a2);
  v7[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v7[2] = v4;
  v7[3] = MEMORY[0x24BEDB848] + 16;
  if (v8 < 0)
    operator delete((void *)v7[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](&v9);
}

void sub_22AF78764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t YAML::LoadAllFromFile@<X0>(int64x2_t *a1@<X8>)
{
  YAML::BadFile *exception;
  _QWORD v4[2];
  _BYTE v5[408];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v4);
  if ((v5[*(_QWORD *)(v4[0] - 24) + 16] & 5) != 0)
  {
    exception = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
    YAML::BadFile::BadFile(exception);
  }
  YAML::LoadAll(v4, a1);
  v4[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2E9A98](v5);
  std::istream::~istream();
  return MEMORY[0x22E2E9C48](v6);
}

void sub_22AF78898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

YAML::BadFile *YAML::BadFile::BadFile(YAML::BadFile *this)
{
  void *__p[2];
  char v4;
  uint64_t v5;
  int v6;

  v5 = -1;
  v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "bad file");
  YAML::Exception::Exception((uint64_t)this, &v5, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_QWORD *)this = &unk_24F543BE0;
  return this;
}

void sub_22AF7893C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22AF789C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<YAML::Node>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<YAML::Node>::destroy[abi:ne180100](uint64_t a1)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
}

uint64_t std::__split_buffer<YAML::Node>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::allocator<YAML::Node>::destroy[abi:ne180100](i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL siri::intelligence::StringStartsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  std::string *p_s1;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  void *v17;
  std::string __s1;
  char v20;

  if ((a2[23] & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  std::string::basic_string(&__s1, __str, 0, v3, (std::allocator<char> *)&v20);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v5 = a2[23];
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a2 + 1);
  if (size == v5)
  {
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v17 = (void *)__s1.__r_.__value_.__r.__words[0];
      v16 = memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_) == 0;
      goto LABEL_26;
    }
    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      return 1;
    v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      v11 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      v10 = v11;
      v13 = *v7++;
      v12 = v13;
      v15 = v8-- != 0;
      v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
  }
  else
  {
    v16 = 0;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v17 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v17);
  }
  return v16;
}

BOOL siri::intelligence::StringEndsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  _BOOL8 v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string *p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  void *v18;
  std::string __s1;
  char v21;

  v3 = a2[23];
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v3 <= size)
  {
    std::string::basic_string(&__s1, __str, size - v3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v6 = __s1.__r_.__value_.__l.__size_;
    v7 = a2[23];
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)a2 + 1);
    if (v6 == v7)
    {
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v18 = (void *)__s1.__r_.__value_.__r.__words[0];
        v5 = memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_30;
      }
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        return 1;
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v13 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v12 = v13;
        v15 = *v9++;
        v14 = v15;
        v17 = v10-- != 0;
        v5 = v12 == v14;
      }
      while (v12 == v14 && v17);
    }
    else
    {
      v5 = 0;
    }
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v5;
    v18 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v18);
    return v5;
  }
  return 0;
}

uint64_t siri::intelligence::StringContains(char **a1, char *a2)
{
  char *v2;
  char *v3;
  int v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;
  int v11;
  void *v12;
  char *v13;
  char *v14;

  v2 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 >= 0)
    v3 = (char *)a1;
  else
    v3 = *a1;
  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  if (!v6)
    return 1;
  if ((char)v2 < 0)
    v2 = a1[1];
  v7 = &v2[(_QWORD)v3];
  if ((uint64_t)v2 >= v6)
  {
    v11 = *v5;
    v12 = v3;
    do
    {
      v13 = &v2[-v6];
      if (v13 == (char *)-1)
        break;
      v14 = (char *)memchr(v12, v11, (size_t)(v13 + 1));
      if (!v14)
        break;
      v8 = v14;
      if (!memcmp(v14, v5, v6))
        return v8 != v7 && v8 - v3 != -1;
      v12 = v8 + 1;
      v2 = (char *)(v7 - (v8 + 1));
    }
    while ((uint64_t)v2 >= v6);
  }
  v8 = v7;
  return v8 != v7 && v8 - v3 != -1;
}

uint64_t siri::intelligence::VectorContains(const std::string **a1, const std::string *a2)
{
  const std::string *v3;
  const std::string *v4;
  std::string::size_type size;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  int v9;
  int v10;
  void *v12;
  int v13;
  uint64_t v14;
  std::string __p;
  std::string v17;

  siri::intelligence::StringTrim(" \t\n\r", a2, &v17);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_25:
    v14 = 0;
    goto LABEL_27;
  }
  while (1)
  {
    siri::intelligence::StringTrim(" \t\n\r", v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v6 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = v17.__r_.__value_.__l.__size_;
    if (size != v6)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_24;
    }
    v7 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v17
       : (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      break;
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
    v13 = memcmp(__p.__r_.__value_.__l.__data_, v7, __p.__r_.__value_.__l.__size_);
    operator delete(v12);
    if (!v13)
      goto LABEL_26;
LABEL_24:
    if (++v3 == v4)
      goto LABEL_25;
  }
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    v8 = 0;
    do
    {
      v9 = __p.__r_.__value_.__s.__data_[v8];
      v10 = v7->__r_.__value_.__s.__data_[v8];
    }
    while (v9 == v10 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v8++);
    if (v9 != v10)
      goto LABEL_24;
  }
LABEL_26:
  v14 = 1;
LABEL_27:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v14;
}

void sub_22AF79098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringTrim(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  size_t v9;
  const std::string *v10;
  size_t v11;
  unsigned int v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *p_p;
  std::string::size_type v16;
  size_t v17;
  char *v18;
  std::string::size_type v19;
  std::string __p;
  char v22;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = strlen(__s);
  if (!size)
    goto LABEL_14;
  v10 = v7;
  v11 = v9;
  if (v9)
  {
    while (memchr(__s, v10->__r_.__value_.__s.__data_[0], v11))
    {
      v10 = (const std::string *)((char *)v10 + 1);
      if (!--size)
        goto LABEL_14;
    }
  }
  if ((char *)v10 - (char *)v7 == -1)
  {
LABEL_14:
    v14 = 0;
    v13 = 0;
    v12 = 0;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string(&__p, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v14 = __p.__r_.__value_.__l.__size_;
    v13 = __p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v13;
  if ((v12 & 0x80u) == 0)
    v16 = v12;
  else
    v16 = v14;
  v17 = strlen(__s);
  v18 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    v19 = v16;
    if (!v16)
      break;
    if (!v17)
      break;
  }
  while (memchr(__s, v18[v16--], v17));
  std::string::basic_string(a3, &__p, 0, v19, (std::allocator<char> *)&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF79200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::SubStringCount(uint64_t a1, uint64_t a2)
{
  int v2;
  int64_t v3;
  int v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  char *v10;
  int v11;
  int64_t v12;
  void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  char *i;
  int64_t v20;
  char *v21;
  char *v22;

  v2 = *(char *)(a2 + 23);
  if (v2 >= 0)
    v3 = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(char *)(a1 + 23);
    v5 = v2 >= 0 ? (char *)a2 : *(char **)a2;
    v6 = v4 >= 0 ? (char *)a1 : *(char **)a1;
    v7 = v4 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    if (v7 >= v3)
    {
      v10 = &v6[v7];
      v11 = *v5;
      v12 = v7;
      v13 = v6;
      do
      {
        v14 = v12 - v3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v13, v11, v14 + 1);
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v5, v3))
        {
          v8 = 0;
          if (v16 != v10)
          {
            v17 = v16 - v6;
            if (v16 - v6 != -1)
            {
              LODWORD(v8) = 0;
LABEL_26:
              v8 = (v8 + 1);
              v18 = v17 + v3;
              if (v7 >= v18)
              {
                for (i = &v6[v18]; v10 - i >= v3; i = v22 + 1)
                {
                  v20 = v10 - i - v3;
                  if (v20 == -1)
                    break;
                  v21 = (char *)memchr(i, v11, v20 + 1);
                  if (!v21)
                    break;
                  v22 = v21;
                  if (!memcmp(v21, v5, v3))
                  {
                    if (v22 != v10)
                    {
                      v17 = v22 - v6;
                      if (v22 - v6 != -1)
                        goto LABEL_26;
                    }
                    return v8;
                  }
                }
              }
            }
          }
          return v8;
        }
        v13 = v16 + 1;
        v12 = v10 - (v16 + 1);
      }
      while (v12 >= v3);
    }
  }
  return 0;
}

uint64_t siri::intelligence::StringToIntegralType<int>(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[13];
  char v9;
  uint64_t v10;
  std::string v11;
  unsigned int v12;

  v12 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, &v11, 24);
  MEMORY[0x22E2E9AE0](v8, &v12);
  v3 = *(_QWORD *)(v8[0] - 24);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5 = *(_DWORD *)((_BYTE *)&v8[4] + v3) & 5;
  v8[2] = v4;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&v10);
  if (a2)
    *a2 = v5 == 0;
  if (v5)
  {
    v6 = 0;
    v12 = 0;
  }
  else
  {
    v6 = v12;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v6;
}

void sub_22AF7948C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToIntegralType<long long>(const std::string *a1, BOOL *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[13];
  char v9;
  uint64_t v10;
  std::string v11;
  uint64_t v12;

  v12 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, &v11, 24);
  MEMORY[0x22E2E9AF8](v8, &v12);
  v3 = *(_QWORD *)(v8[0] - 24);
  v8[0] = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5 = *(_DWORD *)((_BYTE *)&v8[4] + v3) & 5;
  v8[2] = v4;
  v8[3] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&v10);
  if (a2)
    *a2 = v5 == 0;
  if (v5)
  {
    v6 = 0;
    v12 = 0;
  }
  else
  {
    v6 = v12;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v6;
}

void sub_22AF795D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToUInt32(const std::string *a1, _BYTE *a2)
{
  std::string *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[13];
  char v10;
  uint64_t v11;
  std::string v12;
  unsigned int v13;

  v13 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v12.__r_.__value_.__l.__size_)
      goto LABEL_9;
    v3 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
      goto LABEL_9;
    v3 = &v12;
  }
  if (v3->__r_.__value_.__s.__data_[0] == 45)
  {
    v4 = 0;
    if (!a2)
      goto LABEL_16;
LABEL_15:
    *a2 = v4;
    goto LABEL_16;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v9, &v12, 24);
  MEMORY[0x22E2E9AEC](v9, &v13);
  v5 = (*(_DWORD *)((_BYTE *)&v9[4] + *(_QWORD *)(v9[0] - 24)) & 5) == 0;
  v9[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4 = v5;
  v9[2] = v6;
  v9[3] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&v11);
  if (a2)
    goto LABEL_15;
LABEL_16:
  if (v4)
  {
    v7 = v13;
  }
  else
  {
    v7 = 0;
    v13 = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_22AF79750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x24BEDB7F0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&a29);
  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToIntegralType<unsigned long long>(const std::string *a1, _BYTE *a2)
{
  std::string *v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[13];
  char v10;
  uint64_t v11;
  std::string v12;
  uint64_t v13;

  v13 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v12.__r_.__value_.__l.__size_)
      goto LABEL_9;
    v3 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
      goto LABEL_9;
    v3 = &v12;
  }
  if (v3->__r_.__value_.__s.__data_[0] == 45)
  {
    v4 = 0;
    if (!a2)
      goto LABEL_16;
LABEL_15:
    *a2 = v4;
    goto LABEL_16;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v9, &v12, 24);
  MEMORY[0x22E2E9B04](v9, &v13);
  v5 = (*(_DWORD *)((_BYTE *)&v9[4] + *(_QWORD *)(v9[0] - 24)) & 5) == 0;
  v9[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v4 = v5;
  v9[2] = v6;
  v9[3] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2E9C48](&v11);
  if (a2)
    goto LABEL_15;
LABEL_16:
  if (v4)
  {
    v7 = v13;
  }
  else
  {
    v7 = 0;
    v13 = 0;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_22AF79924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringIsANumber(const std::string *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::string::size_type size;
  std::string *v5;
  uint64_t v6;
  char v7;
  std::string *v8;
  std::string::size_type v9;
  std::string v11;
  std::match_results<const char *> __p;

  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_12);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_12))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_253F46450, "[0-9]", 0);
    __cxa_atexit((void (*)(void *))std::basic_regex<char,std::regex_traits<char>>::~basic_regex, &unk_253F46450, &dword_22AEC9000);
    __cxa_guard_release(&_MergedGlobals_12);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_253F46448);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253F46448))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_253F46490, "[+-]?[0-9]*(\\.[0-9]+)?([Ee][+-]?[0-9]+)?", 0);
    __cxa_atexit((void (*)(void *))std::basic_regex<char,std::regex_traits<char>>::~basic_regex, &unk_253F46490, &dword_22AEC9000);
    __cxa_guard_release(&qword_253F46448);
  }
  siri::intelligence::StringTrim(" \t\n\r", a1, &v11);
  size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v11.__r_.__value_.__l.__size_;
  if (!size)
  {
    v6 = 0;
    if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      return v6;
LABEL_24:
    operator delete(v11.__r_.__value_.__l.__data_);
    return v6;
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v11;
  else
    v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v6 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&unk_253F46450, (char *)v5, (char *)v5 + size, &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((_DWORD)v6)
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v11;
    else
      v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      v9 = v11.__r_.__value_.__l.__size_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v6 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>((char *)v8, (char *)v8 + v9, (uint64_t)&__p, (uint64_t)&unk_253F46490, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0)
    goto LABEL_24;
  return v6;
}

void sub_22AF79B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  __cxa_guard_abort(&qword_253F46448);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *a1)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a1[5]);
  std::locale::~locale(a1);
}

BOOL siri::intelligence::StringIsGUID(uint64_t a1)
{
  unint64_t v1;
  _BOOL8 result;
  unsigned __int8 v4;
  uint64_t v5;
  std::string::value_type *v6;
  uint64_t v7;
  std::string::value_type v8;
  std::string::size_type v9;
  BOOL v10;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 < 7)
    return 0;
  if ((v4 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&siri::intelligence::StringIsGUID(std::string const&)::sGuidChars, "0123456789abcdefABCDEF-");
    __cxa_atexit(MEMORY[0x24BEDACF0], &siri::intelligence::StringIsGUID(std::string const&)::sGuidChars, &dword_22AEC9000);
  }
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::string::value_type *)a1;
  else
    v6 = *(std::string::value_type **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 1;
  v7 = v5 - 1;
  do
  {
    v8 = *v6++;
    v9 = std::string::find(&siri::intelligence::StringIsGUID(std::string const&)::sGuidChars, v8, 0);
    v10 = v9 == -1;
    result = v9 != -1;
    v10 = v10 || v7-- == 0;
  }
  while (!v10);
  return result;
}

void sub_22AF79CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToBool(const std::string *a1, int a2)
{
  std::string *v3;
  std::string::size_type size;
  void *v5;
  uint64_t v9;
  std::string __p;
  std::string v15;

  siri::intelligence::StringTrim(" \t\n\r", a1, &__p);
  siri::intelligence::StringToLower((uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = v15.__r_.__value_.__l.__size_;
    switch(v15.__r_.__value_.__l.__size_)
    {
      case 1uLL:
        v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*v15.__r_.__value_.__l.__data_ == 49)
          goto LABEL_57;
        goto LABEL_50;
      case 2uLL:
        v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 28271)
          goto LABEL_57;
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 28526)
          goto LABEL_54;
        v9 = 0;
        goto LABEL_64;
      case 3uLL:
        v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 25977 || *(_BYTE *)(v15.__r_.__value_.__r.__words[0] + 2) != 115)
          goto LABEL_44;
LABEL_57:
        v9 = 1;
        goto LABEL_64;
      case 4uLL:
        v5 = (void *)v15.__r_.__value_.__r.__words[0];
        v9 = 1;
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1702195828)
          goto LABEL_64;
        break;
      case 5uLL:
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1936482662
          && *(_BYTE *)(v15.__r_.__value_.__r.__words[0] + 4) == 101)
        {
LABEL_60:
          v9 = 0;
          if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) == 0)
            return v9;
          goto LABEL_56;
        }
        if (v15.__r_.__value_.__l.__size_ == 3)
        {
LABEL_44:
          if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 26223
            && *(_BYTE *)(v15.__r_.__value_.__r.__words[0] + 2) == 102)
          {
            v9 = 0;
            goto LABEL_56;
          }
LABEL_48:
          size = v15.__r_.__value_.__l.__size_;
        }
        if (size != 1)
          goto LABEL_54;
LABEL_50:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_51:
        LODWORD(v9) = v3->__r_.__value_.__s.__data_[0] != 48;
        break;
      default:
        goto LABEL_54;
    }
  }
  else
  {
    switch(*((_BYTE *)&v15.__r_.__value_.__s + 23))
    {
      case 1:
        if (v15.__r_.__value_.__s.__data_[0] != 49)
          goto LABEL_6;
        return 1;
      case 2:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28271)
          return 1;
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28526)
          return 0;
        break;
      case 3:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 25977 && v15.__r_.__value_.__s.__data_[2] == 115)
          return 1;
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 26223 && v15.__r_.__value_.__s.__data_[2] == 102)
          goto LABEL_60;
        if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_48;
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) == 1)
        {
LABEL_6:
          v3 = &v15;
          goto LABEL_51;
        }
        break;
      case 4:
        v9 = 1;
        if (LODWORD(v15.__r_.__value_.__l.__data_) != 1702195828)
          goto LABEL_55;
        return v9;
      case 5:
        if (LODWORD(v15.__r_.__value_.__l.__data_) != 1936482662 || v15.__r_.__value_.__s.__data_[4] != 101)
          break;
        return 0;
      default:
        break;
    }
LABEL_54:
    LODWORD(v9) = 1;
  }
LABEL_55:
  v9 = v9 & a2;
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_56:
    v5 = (void *)v15.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v5);
  }
  return v9;
}

void sub_22AF79F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToLower(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t size;
  uint64_t i;
  std::string *v5;
  std::string::value_type v6;
  std::string *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    for (i = 0; i != size; ++i)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = a2;
      else
        v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v6 = __tolower(v5->__r_.__value_.__s.__data_[i]);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = a2;
      else
        v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v7->__r_.__value_.__s.__data_[i] = v6;
    }
  }
}

void sub_22AF7A044(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::intelligence::StringFromBool@<X0>(siri::intelligence *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((_DWORD)this)
    v2 = "true";
  else
    v2 = "false";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void siri::intelligence::StringToFloat(const char *a1, BOOL *a2)
{
  const char *v3;
  BOOL v4;
  uint64_t v5;
  char *v6;

  v3 = a1;
  v6 = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  strtof(a1, &v6);
  if (a2)
  {
    if (*v6)
    {
      v4 = 0;
    }
    else
    {
      v5 = *((unsigned __int8 *)v3 + 23);
      if ((v5 & 0x80u) != 0)
        v5 = *((_QWORD *)v3 + 1);
      v4 = v5 != 0;
    }
    *a2 = v4;
  }
}

uint64_t siri::intelligence::StringFromFloat@<X0>(siri::intelligence *this@<X0>, uint64_t a2@<X8>)
{
  return siri::intelligence::StringFromDouble(this, a2);
}

uint64_t siri::intelligence::StringFromDouble@<X0>(siri::intelligence *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[8];
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35[20];

  v3 = this;
  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  v35[0] = MEMORY[0x24BEDB858] + 104;
  v7 = MEMORY[0x24BEDB858] + 64;
  v8 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v30 = MEMORY[0x24BEDB858] + 64;
  v29[0] = v9;
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v9 - 24)) = v10;
  v29[1] = 0;
  v11 = (std::ios_base *)((char *)v29 + *(_QWORD *)(v29[0] - 24));
  std::ios_base::init(v11, v31);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v8[5];
  v30 = v8[4];
  *(_QWORD *)((char *)&v31[-1] + *(_QWORD *)(v30 - 24)) = v12;
  v29[0] = v8[1];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = v8[6];
  v35[0] = v6;
  v29[0] = v5 + 24;
  v30 = v7;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848];
  v31[0] = MEMORY[0x24BEDB848] + 16;
  v32 = 0u;
  v33 = 0u;
  v34 = 16;
  v14 = v30;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v30 - 24)) & 0xFFFFFEFB | 4;
  if ((v3 & 0x80000000) == 0)
    *(_QWORD *)((char *)&v31[1] + *(_QWORD *)(v14 - 24)) = v3;
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::basic_string[abi:ne180100]<0>(v27, ".");
  if (siri::intelligence::StringContains((char **)a2, (char *)v27))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e");
    v15 = siri::intelligence::StringContains((char **)a2, (char *)__p) ^ 1;
    if (v26 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v15 = 0;
  }
  if ((v28 & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_11;
    goto LABEL_24;
  }
  operator delete(v27[0]);
  if (!v15)
    goto LABEL_24;
LABEL_11:
  while ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v16 = *(unsigned __int8 *)(a2 + 23);
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_24;
    v17 = *(unsigned __int8 *)(a2 - 1 + v16);
    if (v17 != 48)
    {
      if (v17 != 46)
        goto LABEL_24;
      v22 = v16 - 1;
      *(_BYTE *)(a2 + 23) = v16 - 1;
      v19 = (char *)a2;
      goto LABEL_23;
    }
    v18 = v16 - 1;
    *(_BYTE *)(a2 + 23) = v16 - 1;
    v19 = (char *)a2;
LABEL_18:
    v19[v18] = 0;
  }
  v20 = *(_QWORD *)(a2 + 8);
  if (!v20)
    goto LABEL_24;
  v19 = *(char **)a2;
  v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v20 - 1);
  if (v21 == 48)
  {
    v18 = v20 - 1;
    *(_QWORD *)(a2 + 8) = v18;
    goto LABEL_18;
  }
  if (v21 != 46)
    goto LABEL_24;
  v22 = v20 - 1;
  *(_QWORD *)(a2 + 8) = v20 - 1;
LABEL_23:
  v19[v22] = 0;
LABEL_24:
  v29[0] = *v8;
  v23 = v8[9];
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = v8[8];
  v30 = v23;
  v31[0] = v13 + 16;
  if (SBYTE7(v33) < 0)
    operator delete((void *)v32);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2E9C48](v35);
}

void sub_22AF7A3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void siri::intelligence::StringToDouble(uint64_t a1, BOOL *a2)
{
  const char *v4;
  BOOL v5;
  uint64_t v6;
  char *v7;

  if ((siri::intelligence::StringIsANumber((const std::string *)a1) & 1) != 0)
  {
    v7 = 0;
    if (*(char *)(a1 + 23) >= 0)
      v4 = (const char *)a1;
    else
      v4 = *(const char **)a1;
    strtod(v4, &v7);
    if (a2)
    {
      if (*v7)
      {
        v5 = 0;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a1 + 23);
        if ((v6 & 0x80u) != 0)
          v6 = *(_QWORD *)(a1 + 8);
        v5 = v6 != 0;
      }
      *a2 = v5;
    }
  }
  else if (a2)
  {
    *a2 = 0;
  }
}

BOOL siri::intelligence::StringIsBool(uint64_t a1)
{
  uint64_t v1;
  std::string::size_type size;
  std::string *v3;
  int data_low;
  int v8;
  _BOOL8 v9;
  std::string __p;
  std::string v15;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  siri::intelligence::StringTrim(" \t\n\r", (const std::string *)a1, &__p);
  siri::intelligence::StringToLower((uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = v15.__r_.__value_.__l.__size_;
    switch(v15.__r_.__value_.__l.__size_)
    {
      case 1uLL:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*v15.__r_.__value_.__l.__data_ == 49)
          goto LABEL_52;
        goto LABEL_54;
      case 2uLL:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 28271)
          goto LABEL_52;
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 28526)
          goto LABEL_39;
LABEL_45:
        v9 = 1;
        if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_66;
        return v9;
      case 3uLL:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 25977 || *(_BYTE *)(v15.__r_.__value_.__r.__words[0] + 2) != 115)
          goto LABEL_54;
        goto LABEL_52;
      case 4uLL:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ != 1702195828)
          goto LABEL_54;
LABEL_52:
        v9 = 1;
        goto LABEL_67;
      default:
LABEL_39:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (v15.__r_.__value_.__l.__size_ != 5)
          goto LABEL_55;
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1936482662
          && *(_BYTE *)(v15.__r_.__value_.__r.__words[0] + 4) == 101)
        {
          goto LABEL_65;
        }
        size = v15.__r_.__value_.__l.__size_;
LABEL_54:
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_55:
        if (size != 3)
          goto LABEL_61;
        if (LOWORD(v3->__r_.__value_.__l.__data_) == 26223 && v3->__r_.__value_.__s.__data_[2] == 102)
        {
LABEL_65:
          v9 = 1;
          goto LABEL_66;
        }
        size = v15.__r_.__value_.__l.__size_;
        v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_61:
        if (size != 1)
        {
          v9 = 0;
          goto LABEL_67;
        }
        break;
    }
  }
  else
  {
    switch(*((_BYTE *)&v15.__r_.__value_.__s + 23))
    {
      case 1:
        if (v15.__r_.__value_.__s.__data_[0] == 49)
          return 1;
        goto LABEL_30;
      case 2:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28271)
          return 1;
        data_low = LOWORD(v15.__r_.__value_.__l.__data_);
        v8 = 28526;
        return data_low == v8;
      case 3:
        if (LOWORD(v15.__r_.__value_.__l.__data_) != 25977 || v15.__r_.__value_.__s.__data_[2] != 115)
          goto LABEL_25;
        return 1;
      case 4:
        data_low = (int)v15.__r_.__value_.__l.__data_;
        v8 = 1702195828;
        return data_low == v8;
      case 5:
        if (LODWORD(v15.__r_.__value_.__l.__data_) == 1936482662 && v15.__r_.__value_.__s.__data_[4] == 101)
          goto LABEL_45;
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_30;
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 3)
          return 0;
LABEL_25:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 26223 && v15.__r_.__value_.__s.__data_[2] == 102)
          goto LABEL_45;
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 1)
          return 0;
LABEL_30:
        v3 = &v15;
        break;
      default:
        return 0;
    }
  }
  v9 = v3->__r_.__value_.__s.__data_[0] == 48;
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_66:
    v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_67:
    operator delete(v3);
  }
  return v9;
}

void sub_22AF7A74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::StringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  std::string *result;
  const std::string *v10;
  size_t v11;
  char v12;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(__s);
  if (size)
  {
    v10 = v7;
    v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result)
          break;
        v10 = (const std::string *)((char *)v10 + 1);
        if (!--size)
          goto LABEL_14;
      }
    }
    if ((char *)v10 - (char *)v7 != -1)
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *siri::intelligence::StringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  size_t v9;
  uint64_t v10;
  std::string::size_type v11;
  char v14;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = strlen(__s);
  v10 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    v11 = size;
    if (!size)
      break;
    if (!v9)
      break;
  }
  while (memchr(__s, *(char *)(v10 + size--), v9));
  return std::string::basic_string(a3, a2, 0, v11, (std::allocator<char> *)&v14);
}

std::string *siri::intelligence::StringAfter@<X0>(std::string *__str@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  int64_t size;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v12;
  std::string *v13;
  int64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  char v19;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v7 = a2[23];
  v8 = *((_QWORD *)a2 + 1);
  if ((v7 & 0x80u) == 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if ((v7 & 0x80u) == 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size >= v10)
    {
      v11 = (char *)v6 + size;
      v12 = *v9;
      v13 = v6;
      while (1)
      {
        v14 = size - v10;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v13, v12, v14 + 1);
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v9, v10))
        {
          if (v16 != v11)
          {
            v17 = v16 - (char *)v6;
            if (v16 - (char *)v6 != -1)
              goto LABEL_21;
          }
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
        }
        v13 = (std::string *)(v16 + 1);
        size = v11 - (v16 + 1);
        if (size < v10)
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
      }
    }
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
  }
  v17 = 0;
LABEL_21:
  if ((v7 & 0x80) == 0)
  {
    if (!(_DWORD)v7)
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
    return std::string::basic_string(a3, __str, v7 + v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  }
  v7 = v8;
  if (v8)
    return std::string::basic_string(a3, __str, v7 + v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
}

std::string *siri::intelligence::StringBefore@<X0>(const std::string *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  char *size;
  std::string::size_type v5;
  int v6;
  char *v7;
  int64_t v8;
  char *v11;
  int v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char v17;

  size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0)
    v5 = (std::string::size_type)a1;
  else
    v5 = a1->__r_.__value_.__r.__words[0];
  v6 = a2[23];
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(char **)a2;
  if (v6 >= 0)
    v8 = a2[23];
  else
    v8 = *((_QWORD *)a2 + 1);
  if (v8)
  {
    if ((char)size < 0)
      size = (char *)a1->__r_.__value_.__l.__size_;
    if ((uint64_t)size >= v8)
    {
      v11 = &size[v5];
      v12 = *v7;
      v13 = (void *)v5;
      do
      {
        v14 = &size[-v8];
        if (v14 == (char *)-1)
          break;
        v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
        if (!v15)
          break;
        v16 = v15;
        if (!memcmp(v15, v7, v8))
        {
          if (v16 != v11 && &v16[-v5] != (char *)-1)
            return std::string::basic_string(a3, a1, 0, (std::string::size_type)&v16[-v5], (std::allocator<char> *)&v17);
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
        }
        v13 = v16 + 1;
        size = (char *)(v11 - (v16 + 1));
      }
      while ((uint64_t)size >= v8);
    }
  }
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_14_1);
}

void siri::intelligence::StringReplace(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v11;
  unint64_t size;
  int v13;
  std::string::size_type v14;
  int64_t v15;
  char *v16;
  std::string::size_type v17;
  void *v18;
  char *v19;
  int64_t v20;
  int v21;
  int64_t v22;
  char *v23;
  char *v24;
  std::string::size_type v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  std::string::size_type v31;
  BOOL v32;

  if (a2[23] >= 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (!v6)
  {
    if ((v7 & 0x80) == 0)
      goto LABEL_9;
    v11 = *(_QWORD *)(a1 + 8);
    goto LABEL_61;
  }
  LODWORD(v8) = a4;
  if ((v7 & 0x80) == 0)
  {
    if (v7 > a4)
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      goto LABEL_12;
    }
LABEL_9:
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    return;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if ((int)v11 <= a4)
  {
LABEL_61:
    std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
    return;
  }
  std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
LABEL_12:
  size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  v13 = (char)size;
  if ((size & 0x80u) != 0)
    size = a5->__r_.__value_.__l.__size_;
  if (size >= (int)v8)
  {
    v8 = (int)v8;
    v32 = a2[23] < 0;
    v14 = a2[23];
    v31 = *((_QWORD *)a2 + 1);
    if (a2[23] >= 0)
      v15 = a2[23];
    else
      v15 = *((_QWORD *)a2 + 1);
    if (a2[23] >= 0)
      v16 = a2;
    else
      v16 = *(char **)a2;
    if (v13 >= 0)
      v17 = (std::string::size_type)a5;
    else
      v17 = a5->__r_.__value_.__r.__words[0];
    while (!v15)
    {
LABEL_35:
      if (v8 != -1)
      {
        if (v32)
          v25 = v31;
        else
          v25 = v14;
        v26 = *(char *)(a3 + 23);
        if (v26 >= 0)
          v27 = (const std::string::value_type *)a3;
        else
          v27 = *(const std::string::value_type **)a3;
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(a3 + 23);
        else
          v28 = *(_QWORD *)(a3 + 8);
        std::string::replace(a5, v8, v25, v27, v28);
        v29 = *(unsigned __int8 *)(a3 + 23);
        if ((v29 & 0x80u) != 0)
          v29 = *(_QWORD *)(a3 + 8);
        v8 += v29;
        size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v17 = (std::string::size_type)a5;
        else
          v17 = a5->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = a5->__r_.__value_.__l.__size_;
        v30 = a2[23];
        v32 = v30 < 0;
        v14 = a2[23];
        v16 = v30 >= 0 ? a2 : *(char **)a2;
        v31 = *((_QWORD *)a2 + 1);
        v15 = v30 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
        if (size >= v8)
          continue;
      }
      return;
    }
    v18 = (void *)(v17 + v8);
    v19 = (char *)(v17 + size);
    v20 = size - v8;
    if (v20 >= v15)
    {
      v21 = *v16;
      do
      {
        v22 = v20 - v15;
        if (v22 == -1)
          break;
        v23 = (char *)memchr(v18, v21, v22 + 1);
        if (!v23)
          break;
        v24 = v23;
        if (!memcmp(v23, v16, v15))
        {
          if (v24 == v19)
            return;
          v8 = (std::string::size_type)&v24[-v17];
          goto LABEL_35;
        }
        v18 = v24 + 1;
        v20 = v19 - (v24 + 1);
      }
      while (v20 >= v15);
    }
  }
}

void sub_22AF7AD80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringSplit(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  int64x2_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int64x2_t *v23;
  int64x2_t *v24;
  unsigned __int8 *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  char v39;
  std::vector<std::string>::size_type v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  int64x2_t *v45;
  int64x2_t *v46;
  void *__p[2];
  char v48;
  _OWORD v49[16];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  memset(v49, 0, sizeof(v49));
  v6 = *a2;
  if (*a2)
  {
    v7 = a2 + 1;
    do
    {
      *((_BYTE *)v49 + v6) = 1;
      v8 = *v7++;
      v6 = v8;
    }
    while (v8);
  }
  v9 = (int64x2_t *)operator new(0x80uLL);
  v10 = v9;
  v11 = a1[23];
  v12 = (char)v11;
  v13 = &a1[v11];
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = (unsigned __int8 *)(*(_QWORD *)a1 + *((_QWORD *)a1 + 1));
  if (v12 >= 0)
    v15 = a1;
  else
    v15 = *(unsigned __int8 **)a1;
  if (v15 < v14)
  {
    v16 = v9 + 8;
    v17 = v9;
    while (*((_BYTE *)v49 + *v15))
    {
      v18 = v17;
LABEL_69:
      if (++v15 >= v14)
        goto LABEL_72;
    }
    if (v17 >= v16)
    {
      v19 = v17 - v10;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60)
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      if (((char *)v16 - (char *)v10) >> 3 > v20)
        v20 = ((char *)v16 - (char *)v10) >> 3;
      if ((unint64_t)((char *)v16 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        if (v21 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v22 = (char *)operator new(16 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (int64x2_t *)&v22[16 * v19];
      *v23 = vdupq_n_s64((unint64_t)v15);
      v18 = v23 + 1;
      if (v17 == v10)
      {
        v24 = v23;
      }
      else
      {
        do
        {
          v24 = v23 - 1;
          v23[-1] = v17[-1];
          --v17;
          --v23;
        }
        while (v17 != v10);
      }
      v16 = (int64x2_t *)&v22[16 * v21];
      if (v10)
        operator delete(v10);
      v10 = v24;
    }
    else
    {
      v17->i64[0] = (uint64_t)v15;
      v17->i64[1] = (uint64_t)v15;
      v18 = v17 + 1;
    }
    v25 = v15 + 1;
    v15 = v14;
    if (v25 != v14)
    {
      v45 = v16;
      v46 = v10;
      v26 = (char *)v18 - (char *)v10;
      v15 = v25;
      while (!*((_BYTE *)v49 + *v15))
      {
LABEL_64:
        if (++v15 == v14)
        {
          v15 = v14;
          v10 = v46;
          goto LABEL_67;
        }
      }
      v27 = *a3;
      v28 = a3[1];
      if (*a3 != v28)
      {
        v29 = 0;
        v30 = 0;
        v31 = v14 - v15;
        do
        {
          v32 = v27 + v29;
          v33 = *(unsigned __int8 *)(v27 + v29 + 23);
          if (*(char *)(v27 + v29 + 23) < 0)
          {
            if (!*(_QWORD *)(v32 + 8))
              goto LABEL_57;
          }
          else if (!*(_BYTE *)(v27 + v29 + 23))
          {
            goto LABEL_57;
          }
          v34 = (unsigned __int8 *)v18[-1].i64[0];
          if ((a1[23] & 0x80u) == 0)
            v35 = a1;
          else
            v35 = *(unsigned __int8 **)a1;
          if (v26 == 16)
            v34 = v35;
          v36 = (unsigned __int8 *)(v15 - v34);
          if ((v33 & 0x80) != 0)
          {
            v33 = *(_QWORD *)(v27 + v29 + 8);
            if ((uint64_t)v36 <= (int)v33 - 1)
              v37 = v34;
            else
              v37 = &v15[-(int)v33 + 1];
            v38 = v14;
            if (v31 <= (int)v33)
              goto LABEL_53;
          }
          else
          {
            if ((uint64_t)v36 <= (int)v33 - 1)
              v37 = v34;
            else
              v37 = &v15[-(int)v33 + 1];
            v38 = v14;
            if (v31 <= v33)
              goto LABEL_53;
          }
          v38 = &v15[v33];
LABEL_53:
          std::string::basic_string[abi:ne180100](__p, v37, v38 - v37);
          v39 = siri::intelligence::StringContains((char **)__p, (char *)v32);
          if (v48 < 0)
            operator delete(__p[0]);
          if ((v39 & 1) != 0)
            goto LABEL_64;
          v27 = *a3;
          v28 = a3[1];
LABEL_57:
          ++v30;
          v29 += 24;
        }
        while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 3));
      }
      v10 = v46;
LABEL_67:
      v16 = v45;
    }
    v18[-1].i64[1] = (uint64_t)v15;
    v17 = v18;
    goto LABEL_69;
  }
  v18 = v9;
LABEL_72:
  v40 = v18 - v10;
  std::vector<std::string>::vector(a4, v40);
  if (v18 == v10)
  {
    if (!v10)
      return;
  }
  else
  {
    v41 = 0;
    if (v40 <= 1)
      v42 = 1;
    else
      v42 = v40;
    v43 = (char **)&v10->i64[1];
    do
    {
      std::string::append[abi:ne180100]<char const*,0>(&a4->__begin_[v41], *(v43 - 1), *v43);
      v43 += 2;
      ++v41;
      --v42;
    }
    while (v42);
  }
  operator delete(v10);
}

void sub_22AF7B150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringSplit(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t FirstOf;
  uint64_t v10;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  std::string __p;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  unint64_t v42;
  std::__split_buffer<std::string> __v;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    do
    {
      if (*(char *)(v5 + 23) < 0)
      {
        if (*(_QWORD *)(v5 + 8))
        {
LABEL_7:
          if ((unint64_t)v7 >= v42)
          {
            v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, (__int128 *)v5);
          }
          else
          {
            if ((*(_BYTE *)(v5 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
            }
            else
            {
              v8 = *(_OWORD *)v5;
              v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
              *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
            }
            ++v7;
          }
          v41 = v7;
        }
      }
      else if (*(_BYTE *)(v5 + 23))
      {
        goto LABEL_7;
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  v39 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  FirstOf = siri::intelligence::StringFindFirstOf((uint64_t *)a1, &v40, &v39, 0);
  if (FirstOf == -1)
  {
    v11 = 0;
  }
  else
  {
    v10 = FirstOf;
    v11 = 0;
    do
    {
      std::string::basic_string(&__p, (const std::string *)a1, v11, v10 - v11, (std::allocator<char> *)&__v);
      v13 = *(_QWORD *)(a3 + 8);
      v12 = *(_QWORD *)(a3 + 16);
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a3) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v18)
          v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v18);
        else
          v19 = 0;
        v20 = v19 + v15;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v22 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v22;
        if (v23 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        *(_QWORD *)(a3 + 8) = v13 + 24;
      }
      if (*(char *)(v39 + 23) < 0)
        v24 = *(_QWORD *)(v39 + 8);
      else
        v24 = *(unsigned __int8 *)(v39 + 23);
      v11 = v24 + v10;
      v10 = siri::intelligence::StringFindFirstOf((uint64_t *)a1, &v40, &v39, v24 + v10);
    }
    while (v10 != -1);
  }
  v25 = *(unsigned __int8 *)(a1 + 23);
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(a1 + 8);
  if (v11 != v25)
  {
    std::string::basic_string(&__p, (const std::string *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
    v26 = *(_QWORD *)(a3 + 16);
    v27 = *(_QWORD *)(a3 + 8);
    if (v27 >= v26)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a3) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a3) >> 3);
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x555555555555555)
        v32 = 0xAAAAAAAAAAAAAAALL;
      else
        v32 = v30;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v32)
        v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v32);
      else
        v33 = 0;
      v34 = v33 + v29;
      __v.__first_ = v33;
      __v.__begin_ = v34;
      __v.__end_cap_.__value_ = &v33[v32];
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v34->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v34 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      v36 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v37 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a3 + 8) = v36;
      if (v37 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v27 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v27 = v28;
      *(_QWORD *)(a3 + 8) = v27 + 24;
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_22AF7B540(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, char a8, char *__pa, uint64_t a10, std::__split_buffer<std::string> *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a16);
  if (SHIBYTE(a11) < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t siri::intelligence::StringFindFirstOf(uint64_t *a1, uint64_t *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  void *v17;
  char *v18;
  int64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  BOOL v24;
  unint64_t v27;
  unint64_t v29;
  uint64_t v30;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v7 = 0;
    v8 = -1;
    v27 = a4;
    while (1)
    {
      v9 = (char **)(v5 + 24 * v7);
      v10 = *((char *)a1 + 23);
      if (v10 >= 0)
        v11 = (uint64_t)a1;
      else
        v11 = *a1;
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)a1 + 23);
      else
        v12 = a1[1];
      v13 = *((char *)v9 + 23);
      if (v13 >= 0)
        v14 = (char *)(v5 + 24 * v7);
      else
        v14 = *v9;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v9 + 23);
      else
        v15 = (int64_t)v9[1];
      if (v12 >= a4)
      {
        v16 = a4;
        if (!v15)
          goto LABEL_26;
        v17 = (void *)(v11 + a4);
        v18 = (char *)(v11 + v12);
        v19 = v12 - a4;
        if ((uint64_t)(v12 - a4) >= v15)
        {
          v29 = v8;
          v30 = v4;
          v20 = *v14;
          while (1)
          {
            v21 = v19 - v15;
            if (v21 == -1 || (v22 = (char *)memchr(v17, v20, v21 + 1)) == 0)
            {
LABEL_23:
              a4 = v27;
              v8 = v29;
              v4 = v30;
              goto LABEL_32;
            }
            v23 = v22;
            if (!memcmp(v22, v14, v15))
              break;
            v17 = v23 + 1;
            v19 = v18 - (v23 + 1);
            if (v19 < v15)
              goto LABEL_23;
          }
          v8 = v29;
          v4 = v30;
          if (v23 != v18)
          {
            v16 = (unint64_t)&v23[-v11];
            a4 = v27;
LABEL_26:
            if (v16 != -1)
            {
              v24 = v8 != -1 && v16 >= v8;
              if (!v24)
                v8 = v16;
              if (a3 && !v24)
              {
                *a3 = v9;
                v5 = *a2;
                v4 = a2[1];
                v8 = v16;
              }
            }
            goto LABEL_32;
          }
          a4 = v27;
        }
      }
LABEL_32:
      if (++v7 >= 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3))
        return v8;
    }
  }
  return -1;
}

void siri::intelligence::StringJoin(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;

  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, (char *)&str_14_1);
  }
  else if ((char *)v5 - (char *)v4 == 24)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v6 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v6;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    do
    {
      v11 = *(unsigned __int8 *)(a3 + 23);
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a3 + 8);
      if (v11)
      {
        v12 = *(char *)(a2 + 23);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)a2;
        else
          v13 = *(const std::string::value_type **)a2;
        if (v12 >= 0)
          v14 = *(unsigned __int8 *)(a2 + 23);
        else
          v14 = *(_QWORD *)(a2 + 8);
        std::string::append((std::string *)a3, v13, v14);
        v4 = *a1;
      }
      v15 = (uint64_t)v4 + v9;
      v16 = *(char *)(v15 + 23);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)v15;
      else
        v17 = *(const std::string::value_type **)v15;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(v15 + 23);
      else
        v18 = *(_QWORD *)(v15 + 8);
      std::string::append((std::string *)a3, v17, v18);
      ++v10;
      v4 = *a1;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  }
}

void sub_22AF7B8A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToUpper(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t size;
  uint64_t i;
  std::string *v5;
  std::string::value_type v6;
  std::string *v7;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    for (i = 0; i != size; ++i)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = a2;
      else
        v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v6 = __toupper(v5->__r_.__value_.__s.__data_[i]);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = a2;
      else
        v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v7->__r_.__value_.__s.__data_[i] = v6;
    }
  }
}

void sub_22AF7B95C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToCapitalized(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  uint64_t v4;
  std::string *v5;
  BOOL v6;
  uint64_t v7;
  __darwin_ct_rune_t v8;
  std::string::value_type v9;
  std::string *v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  int v14;
  std::string *v15;
  std::string::value_type v16;
  std::string *v17;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = 0;
    v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v6 = 1;
    v7 = MEMORY[0x24BDAC740];
    do
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = a2;
      v8 = v5->__r_.__value_.__s.__data_[v4];
      if (v6)
        v9 = __toupper(v8);
      else
        v9 = __tolower(v8);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = a2;
      else
        v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v10->__r_.__value_.__s.__data_[v4] = v9;
      v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
      v13 = v12->__r_.__value_.__s.__data_[v4];
      if ((v13 & 0x80000000) != 0)
      {
        v14 = __maskrune(v13, 0x4000uLL);
        LOBYTE(v11) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
        v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        v14 = *(_DWORD *)(v7 + 4 * v13 + 60) & 0x4000;
      }
      v6 = v14 != 0;
      if ((v11 & 0x80u) == 0)
        v15 = a2;
      else
        v15 = v5;
      if (v15->__r_.__value_.__s.__data_[v4 - 2] == 77 && v15->__r_.__value_.__s.__data_[v4 - 1] == 99)
      {
        v16 = __toupper(v15->__r_.__value_.__s.__data_[v4]);
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = a2;
        else
          v17 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v17->__r_.__value_.__s.__data_[v4] = v16;
        v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      ++v4;
    }
    while (size != v4);
  }
}

void sub_22AF7BAC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToPlural(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  std::string::size_type size;
  uint64_t v7;
  int v8;
  std::string *v9;
  std::string *v10;
  size_t v11;
  const void *v12;
  char v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  char v24;

  siri::intelligence::StringTrim(" \t\n\r", (const std::string *)a1, &v23);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v23.__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_11:
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  size = v23.__r_.__value_.__l.__size_;
  operator delete(v23.__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_11;
LABEL_3:
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  std::string::basic_string(&v22, (const std::string *)a1, v4 - 1, 1uLL, (std::allocator<char> *)&v21);
  siri::intelligence::StringToLower((uint64_t)&v22, &v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v22, (char *)&str_14_1);
  std::string::basic_string[abi:ne180100]<0>(&v21, (char *)&str_14_1);
  if (*(char *)(a1 + 23) < 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 <= 1)
      goto LABEL_24;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
    if (v5 <= 1)
      goto LABEL_24;
  }
  std::string::basic_string(&__p, (const std::string *)a1, v5 - 2, 1uLL, (std::allocator<char> *)&v24);
  siri::intelligence::StringToLower((uint64_t)&__p, &v20);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v22 = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  std::string::basic_string(&__p, (const std::string *)a1, v7 - 2, 2uLL, (std::allocator<char> *)&v24);
  siri::intelligence::StringToLower((uint64_t)&__p, &v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v21 = v20;
  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v23.__r_.__value_.__l.__size_ != 1)
      goto LABEL_32;
    v8 = *v23.__r_.__value_.__l.__data_;
  }
  else
  {
    if (HIBYTE(v23.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_32;
    v8 = v23.__r_.__value_.__s.__data_[0];
  }
  if (v8 == 115 || v8 == 120 || v8 == 122)
    goto LABEL_43;
LABEL_32:
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) != 2)
      goto LABEL_40;
    if (LOWORD(v21.__r_.__value_.__l.__data_) != 26723)
    {
      v9 = &v21;
      goto LABEL_39;
    }
LABEL_43:
    if (*(char *)(a1 + 23) >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    std::string::basic_string[abi:ne180100](a2, v11 + 2);
    if (*(char *)(a2 + 23) < 0)
      a2 = *(_QWORD *)a2;
    if (v11)
    {
      if (*(char *)(a1 + 23) >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      memmove((void *)a2, v12, v11);
    }
    strcpy((char *)(a2 + v11), "es");
    goto LABEL_71;
  }
  if (v21.__r_.__value_.__l.__size_ != 2)
    goto LABEL_40;
  v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (*(_WORD *)v21.__r_.__value_.__l.__data_ == 26723)
    goto LABEL_43;
LABEL_39:
  if (LOWORD(v9->__r_.__value_.__l.__data_) == 26739)
    goto LABEL_43;
LABEL_40:
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v23.__r_.__value_.__l.__size_ != 1)
      goto LABEL_60;
    v10 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v23.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_60;
    v10 = &v23;
  }
  if (v10->__r_.__value_.__s.__data_[0] == 121)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "aeiou");
    v13 = siri::intelligence::StringContains(&v20.__r_.__value_.__l.__data_, (char *)&v22);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if ((v13 & 1) == 0)
    {
      v16 = *(unsigned __int8 *)(a1 + 23);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(a1 + 8);
      std::string::basic_string(&v20, (const std::string *)a1, 0, v16 - 1, (std::allocator<char> *)&__p);
      v17 = std::string::append(&v20, "ies");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      goto LABEL_71;
    }
  }
LABEL_60:
  if (*(char *)(a1 + 23) >= 0)
    v14 = *(unsigned __int8 *)(a1 + 23);
  else
    v14 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100](a2, v14 + 1);
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  if (v14)
  {
    if (*(char *)(a1 + 23) >= 0)
      v15 = (const void *)a1;
    else
      v15 = *(const void **)a1;
    memmove((void *)a2, v15, v14);
  }
  *(_WORD *)(a2 + v14) = 115;
LABEL_71:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_22AF7BF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

void sub_22AF7BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x22AF7BF98);
  JUMPOUT(0x22AF7BF9CLL);
}

void siri::intelligence::StringAbbreviate(std::string *__str@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  unint64_t size;
  std::string *v5;
  __int128 v6;
  std::string __p;
  char v8;

  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size <= a2)
    {
      std::string::__init_copy_ctor_external(a3, __str->__r_.__value_.__l.__data_, size);
      return;
    }
  }
  else if (HIBYTE(__str->__r_.__value_.__r.__words[2]) <= (unint64_t)a2)
  {
    *a3 = *__str;
    return;
  }
  std::string::basic_string(&__p, __str, 0, a2 - 3, (std::allocator<char> *)&v8);
  v5 = std::string::append(&__p, "...");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF7C080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToId(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  uint64_t v4;
  char v5;
  uint64_t v6;
  std::string *p_p;
  char v8;
  char v9;
  __darwin_ct_rune_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  std::string __p;

  siri::intelligence::StringTrim(" \t\n\r", a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string::reserve(a2, size);
  if (size)
  {
    v4 = 0;
    v5 = 0;
    v6 = MEMORY[0x24BDAC740];
    do
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v8 = __tolower(p_p->__r_.__value_.__s.__data_[v4]);
      if (v8 == 95)
        v9 = 32;
      else
        v9 = v8;
      v10 = v9;
      if (v9 < 0)
      {
        v12 = __maskrune(v9, 0x4000uLL);
        if (v5 != 95 || !v12)
        {
          v11 = __maskrune(v10, 0x4000uLL);
LABEL_20:
          if (v11)
            v13 = 95;
          else
            v13 = v10;
          if ((v13 & 0x80000000) != 0)
          {
            if (!__maskrune(v13, 0x100uLL))
            {
              v15 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            v14 = *(_DWORD *)(v6 + 4 * v13 + 60);
            if ((v14 & 0x100) == 0)
            {
              v15 = (v14 >> 10) & 1;
LABEL_28:
              v16 = v13 != 95 && v15 == 0;
              v5 = v10;
              if (v16)
                goto LABEL_33;
            }
          }
          std::string::push_back(a2, v13);
          v5 = v13;
          goto LABEL_33;
        }
      }
      else
      {
        v11 = *(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000;
        if (v5 != 95 || !v11)
          goto LABEL_20;
      }
      v5 = 95;
LABEL_33:
      ++v4;
    }
    while (size != v4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF7C228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__split_buffer<std::string>::pointer siri::intelligence::StringVectorAppend(uint64_t a1, __int128 **a2)
{
  return std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((__int128 *)a1, *(_QWORD *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

uint64_t siri::intelligence::StringDistance(const std::string *a1, std::string *__str)
{
  std::string *v2;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;
  int v7;
  const std::string *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  int v11;
  char v12;
  int v13;
  std::string::size_type v14;
  int v15;
  char v16;
  int v17;
  std::string::size_type v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  std::string *v27;
  std::string *p_p;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  std::string __p;
  std::string v39;

  v2 = __str;
  size = a1->__r_.__value_.__l.__size_;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    v5 = a1->__r_.__value_.__l.__size_;
  v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = __str->__r_.__value_.__l.__size_;
  if (v5 != v6)
    goto LABEL_15;
  if (v7 < 0)
    __str = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v10 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
    if (memcmp(a1->__r_.__value_.__l.__data_, __str, size))
    {
LABEL_20:
      std::string::__init_copy_ctor_external(&v39, v10, size);
      if ((*((_BYTE *)&v2->__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
    return 0;
  }
  if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
    return 0;
  v8 = a1;
  v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  while (v8->__r_.__value_.__s.__data_[0] == __str->__r_.__value_.__s.__data_[0])
  {
    v8 = (const std::string *)((char *)v8 + 1);
    __str = (std::string *)((char *)__str + 1);
    if (!--v9)
      return 0;
  }
LABEL_15:
  if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v10 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
  v39 = *a1;
  if ((v7 & 0x80) == 0)
  {
LABEL_17:
    __p = *v2;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&__p, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
LABEL_22:
  v11 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  v13 = v39.__r_.__value_.__r.__words[1];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    v14 = v39.__r_.__value_.__l.__size_;
  v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v17 = __p.__r_.__value_.__r.__words[1];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v18 = __p.__r_.__value_.__l.__size_;
  if (v14 > v18)
  {
    std::string::operator=(&v39, v2);
    std::string::operator=(&__p, a1);
    v11 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    v13 = v39.__r_.__value_.__r.__words[1];
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v17 = __p.__r_.__value_.__r.__words[1];
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v12 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0)
    v13 = v11;
  if (v16 >= 0)
    v19 = v15;
  else
    v19 = v17;
  v20 = v13 < 1 || v19 < 1;
  if (v20)
  {
    v21 = 0;
    v22 = v19;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v13;
    v27 = &v39;
    if (v12 < 0)
      v27 = (std::string *)v39.__r_.__value_.__r.__words[0];
    p_p = &__p;
    if (v16 < 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    do
    {
      if (v25 + 1 > v19)
        v29 = v25 + 1;
      else
        v29 = v19;
      v30 = v29 - v25;
      v31 = (std::string *)((char *)p_p + v25++);
      while (1)
      {
        v32 = v31->__r_.__value_.__s.__data_[0];
        v31 = (std::string *)((char *)v31 + 1);
        if (v27->__r_.__value_.__s.__data_[v23] == v32)
          break;
        ++v24;
        ++v25;
        if (!--v30)
        {
          v25 = v29;
          break;
        }
      }
      ++v23;
    }
    while (v23 < v26 && v19 > v25);
    v21 = 0;
    v22 = v19 - v25 + v24;
    do
    {
      v33 = v19 + v21;
      while (1)
      {
        v34 = v19 - 1;
        if (v27->__r_.__value_.__s.__data_[v26 - 1] == p_p->__r_.__value_.__s.__data_[v19 - 1])
          break;
        ++v21;
        --v19;
        if (!v34)
        {
          v21 = v33;
          goto LABEL_63;
        }
      }
      if (v26 < 2)
        break;
      --v26;
      v20 = v19-- <= 1;
    }
    while (!v20);
    v19 = v34;
  }
LABEL_63:
  v35 = v21 + v19;
  if (v22 >= v35)
    v36 = v35;
  else
    v36 = v22;
  if (v16 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_71:
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  else if (v12 < 0)
  {
    goto LABEL_71;
  }
  return v36;
}

void sub_22AF7C538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringEscapeQuotes(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(v10, "\\");
  std::string::basic_string[abi:ne180100]<0>(v8, "\\\\");
  siri::intelligence::StringReplace(a1, (char *)v10, (uint64_t)v8, 0, &v12);
  std::string::basic_string[abi:ne180100]<0>(v6, "\"");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\"");
  siri::intelligence::StringReplace((uint64_t)&v12, (char *)v6, (uint64_t)__p, 0, a2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_22AF7C654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringUnescapeQuotes(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(v10, "\\\"");
  std::string::basic_string[abi:ne180100]<0>(v8, "\"");
  siri::intelligence::StringReplace(a1, (char *)v10, (uint64_t)v8, 0, &v12);
  std::string::basic_string[abi:ne180100]<0>(v6, "\\\\");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\");
  siri::intelligence::StringReplace((uint64_t)&v12, (char *)v6, (uint64_t)__p, 0, a2);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_22AF7C7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringUriEscape(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  char __str[4];

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *((char *)a1 + 23) < 0;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a1[1];
  if (v4)
  {
    v6 = 0;
    do
    {
      if (v3)
        v7 = (uint64_t *)*a1;
      else
        v7 = a1;
      if (*((unsigned __int8 *)v7 + v6) - 65 < 0x1A
        || *((unsigned __int8 *)v7 + v6) - 97 < 0x1A
        || *((unsigned __int8 *)v7 + v6) - 48 < 0xA
        || ((v8 = *((unsigned __int8 *)v7 + v6), (v8 - 36) <= 0x3B)
          ? (v9 = ((1 << (v8 - 36)) & 0x800000012C00785) == 0)
          : (v9 = 1),
            !v9 || v8 == 126))
      {
        std::string::push_back(a2, *((_BYTE *)v7 + v6));
      }
      else
      {
        *(_DWORD *)__str = 0;
        snprintf(__str, 4uLL, "%%%hhx", *((char *)v7 + v6));
        std::string::append(a2, __str);
      }
      ++v6;
      v3 = *((char *)a1 + 23) < 0;
      v10 = *((unsigned __int8 *)a1 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = a1[1];
    }
    while (v6 < v10);
  }
}

void sub_22AF7C96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ParseStringList(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  std::string::size_type size;
  int v22;
  std::string *p_str;
  std::string::size_type v24;
  int v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::string __str;
  char v31;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((char *)a1 + 23) >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v4)
  {
    v7 = 0;
    v8 = MEMORY[0x24BDAC740];
    while (1)
    {
      while (1)
      {
        v9 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
        v10 = *(char *)(v9 + v7);
        v11 = (v10 & 0x80000000) != 0 ? __maskrune(v10, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v10 + 60) & 0x4000;
        if (v7 >= v4 || !v11)
          break;
        ++v7;
      }
      if (v7 >= v4)
        return;
      memset(&__str, 0, sizeof(__str));
      v12 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
      v13 = *(unsigned __int8 *)(v12 + v7);
      if (v13 == 39 || v13 == 34)
        v14 = *(unsigned __int8 *)(v12 + v7);
      else
        v14 = 0;
      v15 = *(unsigned __int8 *)(v12 + v7);
      if (v15 != 44)
        break;
      ++v7;
LABEL_72:
      if (v7 >= v4)
        return;
    }
    std::string::push_back(&__str, v15);
    ++v7;
    while (v7 < v4)
    {
      if (*((char *)a1 + 23) >= 0)
        v16 = a1;
      else
        v16 = (uint64_t *)*a1;
      v17 = *((unsigned __int8 *)v16 + v7);
      if (v17 == 39 || v17 == 34)
      {
        if (v14)
          v18 = v14;
        else
          v18 = *((unsigned __int8 *)v16 + v7);
        if (v14 == *((unsigned __int8 *)v16 + v7))
          v14 = 0;
        else
          v14 = v18;
      }
      v19 = *((unsigned __int8 *)v16 + v7++);
      if (v19 == 44 && v14 == 0)
        break;
      std::string::push_back(&__str, v19);
    }
    siri::intelligence::StringTrim(" \t\n\r", &__str, &v29);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v29;
    if (a2 == 1)
    {
      LOBYTE(size) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_)
        {
          v22 = *__str.__r_.__value_.__l.__data_;
LABEL_51:
          if (v22 == 34 || v22 == 39)
          {
            std::string::basic_string(&v29, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v29;
            LOBYTE(size) = *((_BYTE *)&v29.__r_.__value_.__s + 23);
          }
          size = size;
          if ((size & 0x80u) == 0)
          {
            p_str = &__str;
          }
          else
          {
            size = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          v24 = size - 1;
          v25 = p_str->__r_.__value_.__s.__data_[size - 1];
          if (v25 == 39 || v25 == 34)
          {
            std::string::basic_string(&v29, &__str, 0, v24, (std::allocator<char> *)&v31);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v29;
          }
        }
      }
      else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
      {
        v22 = __str.__r_.__value_.__s.__data_[0];
        goto LABEL_51;
      }
    }
    v26 = a3[1];
    if (v26 >= a3[2])
    {
      v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)v26 = v27;
      }
      v28 = v26 + 24;
      a3[1] = v26 + 24;
    }
    a3[1] = v28;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_72;
  }
}

void sub_22AF7CC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v19;

  v18[1] = v19;
  if (a18 < 0)
    operator delete(__p);
  __p = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_22AF7CD50(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x22E2E9C0C]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

void sub_22AF7CDB4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24F542860;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_22AF7CF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7CF70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24F5429D8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_24F542A20;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7D610(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24F5428B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_22AF7D6A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_24F542EA0;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_24F542EE8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_22AF7DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_24F542AF8;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_24F542A68;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_22AF7E2B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7E310(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542A68;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542A68;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_24F542AB0;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542AB0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542AB0;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_22AF7E9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_22AF7EDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7F0F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7F144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_22AF7F290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22AF7F858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_22AF7F8C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_24F542D38;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_24F542D80;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7FC70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF7FDC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_62;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_62;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_62;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_62;
          v13 = -87;
LABEL_33:
          v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_62;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_62;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24F542B88;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24F542BD0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_22AF8030C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF80368(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24F542CA8;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24F542B40;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_22AF804E4(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542B40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542B40;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542B88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542B88;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542C18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542C18;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542C60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24F542C60;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_22AF80CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_22AF81058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x22E2E9CCC](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  unsigned __int8 v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  unsigned __int8 *v22;
  BOOL v23;
  int v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v28;
  _BOOL4 v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  BOOL v35;
  _BOOL4 negate;
  char v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 v40;
  std::vector<char>::pointer v41;
  unint64_t v42;
  int v43;
  std::regex_traits<char>::char_class_type v44;
  char v45;
  int v46;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v48;
  char *v49;
  std::vector<std::pair<std::string, std::string>>::pointer v50;
  std::vector<std::pair<std::string, std::string>>::pointer v51;
  unsigned int v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  size_t v56;
  const void *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  BOOL v60;
  int v61;
  size_t v62;
  char *v63;
  size_t v64;
  int v65;
  _BOOL4 v66;
  int v67;
  size_t v68;
  char *v69;
  size_t v70;
  int v71;
  BOOL v72;
  std::vector<std::string>::pointer v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  size_t v79;
  size_t v80;
  uint64_t v81;
  BOOL j;
  std::string *v83;
  std::string::size_type v84;
  int v85;
  std::string *v86;
  uint64_t v87;
  std::string *v88;
  void *v89;
  size_t v90;
  std::vector<std::string>::pointer v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  BOOL i;
  std::string *v101;
  std::string::size_type size;
  int v103;
  std::string *v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  size_t v108;
  std::regex_traits<char>::char_class_type v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  unsigned __int8 v118;
  char v119;
  BOOL v120;
  _BOOL4 v121;
  _BOOL4 v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  std::string *v126;
  void *__p;
  size_t v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  uint64_t v132;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v38 = 0;
    negate = this->__negate_;
    goto LABEL_229;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v130 = *current;
  v7 = current[1];
  v131 = v7;
  if (this->__icase_)
  {
    v130 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v131 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132, (uint64_t)&__p);
  if (((char)v129 & 0x80000000) == 0)
  {
    if (v129)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v38 = 1;
    goto LABEL_59;
  }
  v39 = v128;
  operator delete(__p);
  if (!v39)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (v130 != *(p_second - 1) || v131 != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_226;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_165;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132);
  v14 = this->__ranges_.__begin_;
  v15 = v129;
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 48;
    v118 = v129;
    if ((v129 & 0x80u) == 0)
      v19 = v129;
    else
      v19 = v128;
    if ((v129 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v18 <= 1)
      v21 = 1;
    else
      v21 = v16 / 48;
    v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    v23 = 1;
    while (1)
    {
      v24 = (char)*(v22 - 24);
      if (v24 >= 0)
        v25 = *(v22 - 24);
      else
        v25 = *(_QWORD *)(v22 - 39);
      if (v24 >= 0)
        v26 = (char *)(v22 - 47);
      else
        v26 = *(char **)(v22 - 47);
      if (v25 >= v19)
        v27 = v19;
      else
        v27 = v25;
      v28 = memcmp(p_p, v26, v27);
      v29 = v19 >= v25;
      if (v28)
        v29 = v28 >= 0;
      if (v29)
      {
        v30 = (char)*v22;
        if (v30 >= 0)
          v31 = *v22;
        else
          v31 = *(_QWORD *)(v22 - 15);
        if (v30 >= 0)
          v32 = (char *)(v22 - 23);
        else
          v32 = *(char **)(v22 - 23);
        if (v19 >= v31)
          v33 = v31;
        else
          v33 = v19;
        v34 = memcmp(v32, p_p, v33);
        v35 = v31 >= v19;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
          break;
      }
      v23 = ++v17 < v18;
      v22 += 48;
      if (v21 == v17)
      {
        negate = 0;
        v37 = 1;
        goto LABEL_159;
      }
    }
    v37 = 0;
    negate = 1;
LABEL_159:
    p_traits = &this->__traits_;
    v15 = v118;
  }
  else
  {
    v23 = 0;
    negate = 0;
    v37 = 1;
  }
  if ((v15 & 0x80) != 0)
    operator delete(__p);
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_208;
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v130, (char *)&v132, (uint64_t)&__p);
    v91 = this->__equivalences_.__begin_;
    v92 = v129;
    v93 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v93)
    {
      v94 = 0;
      v95 = v93 / 24;
      v96 = __p;
      v97 = v128;
      if ((v129 & 0x80u) == 0)
        v98 = v129;
      else
        v98 = v128;
      if (v95 <= 1)
        v99 = 1;
      else
        v99 = v93 / 24;
      for (i = 1; ; i = v94 < v95)
      {
        v101 = &v91[v94];
        size = HIBYTE(v101->__r_.__value_.__r.__words[2]);
        v103 = (char)size;
        if ((size & 0x80u) != 0)
          size = v101->__r_.__value_.__l.__size_;
        if (v98 != size)
          goto LABEL_186;
        v104 = v103 >= 0 ? &v91[v94] : (std::string *)v101->__r_.__value_.__r.__words[0];
        if ((v92 & 0x80) == 0)
          break;
        v123 = i;
        v126 = v91;
        v106 = v95;
        v107 = v96;
        v108 = v97;
        if (!memcmp(v96, v104, v97))
        {
          operator delete(__p);
          if (!v123)
          {
LABEL_207:
            negate = 1;
            goto LABEL_208;
          }
LABEL_192:
          negate = 1;
LABEL_228:
          v38 = 2;
          goto LABEL_229;
        }
        ++v94;
        v97 = v108;
        v96 = v107;
        v95 = v106;
        v91 = v126;
        if (v94 == v99)
          goto LABEL_194;
LABEL_190:
        ;
      }
      if (!(_DWORD)v92)
      {
LABEL_191:
        if (!i)
          goto LABEL_207;
        goto LABEL_192;
      }
      v105 = 0;
      while (*((unsigned __int8 *)&__p + v105) == v104->__r_.__value_.__s.__data_[v105])
      {
        if (v92 == ++v105)
          goto LABEL_191;
      }
LABEL_186:
      if (++v94 == v99)
        goto LABEL_193;
      goto LABEL_190;
    }
LABEL_193:
    if ((v92 & 0x80) != 0)
LABEL_194:
      operator delete(__p);
LABEL_208:
    if ((char)v130 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v130];
      if (((v113 & mask) != 0 || v130 == 95 && (mask & 0x80) != 0)
        && ((char)v131 & 0x80000000) == 0
        && ((tab[v131] & mask) != 0 || (mask & 0x80) != 0 && v131 == 95))
      {
        goto LABEL_226;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v113) != 0 || v130 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_225:
        v115 = negate;
LABEL_227:
        negate = v115;
        goto LABEL_228;
      }
    }
    if (((char)v131 & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[v131] & neg_mask) == 0)
      {
        v115 = 1;
        if (v131 != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_227;
      }
      goto LABEL_225;
    }
LABEL_226:
    v115 = 1;
    goto LABEL_227;
  }
  if ((v37 & 1) == 0)
    goto LABEL_228;
  v38 = 2;
LABEL_59:
  v40 = *a2->__current_;
  v130 = v40;
  if (this->__icase_)
  {
    v40 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    v130 = v40;
  }
  v41 = this->__chars_.__begin_;
  v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1)
      v42 = 1;
    while (1)
    {
      v43 = *v41++;
      if (v43 == v40)
        break;
      if (!--v42)
        goto LABEL_66;
    }
LABEL_203:
    negate = 1;
    goto LABEL_229;
  }
LABEL_66:
  v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      v46 = (v44 >> 7) & 1;
      v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      v45 = 1;
    }
    end = this->__neg_chars_.__end_;
    v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end)
      goto LABEL_203;
  }
  v50 = this->__ranges_.__begin_;
  v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131);
      v50 = this->__ranges_.__begin_;
      v51 = this->__ranges_.__end_;
      v52 = v129;
    }
    else
    {
      v52 = 1;
      v129 = 1;
      LOWORD(__p) = v40;
    }
    v53 = (char *)v51 - (char *)v50;
    if (v53)
    {
      v124 = v38;
      v121 = negate;
      v54 = 0;
      v55 = v53 / 48;
      v119 = v52;
      if ((v52 & 0x80u) == 0)
        v56 = v52;
      else
        v56 = v128;
      if ((v52 & 0x80u) == 0)
        v57 = &__p;
      else
        v57 = __p;
      if (v55 <= 1)
        v58 = 1;
      else
        v58 = v53 / 48;
      v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
      v60 = 1;
      while (1)
      {
        v61 = (char)*(v59 - 24);
        if (v61 >= 0)
          v62 = *(v59 - 24);
        else
          v62 = *(_QWORD *)(v59 - 39);
        if (v61 >= 0)
          v63 = (char *)(v59 - 47);
        else
          v63 = *(char **)(v59 - 47);
        if (v62 >= v56)
          v64 = v56;
        else
          v64 = v62;
        v65 = memcmp(v57, v63, v64);
        v66 = v56 >= v62;
        if (v65)
          v66 = v65 >= 0;
        if (v66)
        {
          v67 = (char)*v59;
          if (v67 >= 0)
            v68 = *v59;
          else
            v68 = *(_QWORD *)(v59 - 15);
          if (v67 >= 0)
            v69 = (char *)(v59 - 23);
          else
            v69 = *(char **)(v59 - 23);
          if (v56 >= v68)
            v70 = v68;
          else
            v70 = v56;
          v71 = memcmp(v69, v57, v70);
          v72 = v68 >= v56;
          if (v71)
            v72 = v71 >= 0;
          if (v72)
            break;
        }
        v60 = ++v54 < v55;
        v59 += 48;
        if (v58 == v54)
        {
          negate = v121;
          goto LABEL_124;
        }
      }
      negate = 1;
LABEL_124:
      v38 = v124;
      if ((v119 & 0x80) == 0)
        goto LABEL_126;
    }
    else
    {
      v60 = 0;
      if ((v52 & 0x80) == 0)
        goto LABEL_126;
    }
    operator delete(__p);
LABEL_126:
    if (v60)
      goto LABEL_229;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_198;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131, (uint64_t)&__p);
  v73 = this->__equivalences_.__begin_;
  v74 = v129;
  v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((v129 & 0x80) != 0)
      operator delete(__p);
LABEL_198:
    if ((char)v130 < 0)
      goto LABEL_229;
    v109 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130] & v109) == 0)
    {
      v110 = (v109 >> 7) & 1;
      if (v130 != 95)
        v110 = 0;
      if (v110 != 1)
        goto LABEL_229;
    }
    goto LABEL_203;
  }
  v125 = v38;
  v76 = 0;
  v77 = v75 / 24;
  v78 = __p;
  v79 = v128;
  if ((v129 & 0x80u) == 0)
    v80 = v129;
  else
    v80 = v128;
  if (v77 <= 1)
    v81 = 1;
  else
    v81 = v75 / 24;
  for (j = 1; ; j = v76 < v77)
  {
    v83 = &v73[v76];
    v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    v85 = (char)v84;
    if ((v84 & 0x80u) != 0)
      v84 = v83->__r_.__value_.__l.__size_;
    if (v80 == v84)
      break;
LABEL_148:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0)
LABEL_196:
        operator delete(__p);
      v38 = v125;
      goto LABEL_198;
    }
LABEL_152:
    ;
  }
  if (v85 >= 0)
    v86 = &v73[v76];
  else
    v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  if ((v74 & 0x80) == 0)
  {
    if (!(_DWORD)v74)
    {
LABEL_153:
      negate = 1;
      v38 = v125;
      if (!j)
        goto LABEL_198;
      goto LABEL_229;
    }
    v87 = 0;
    while (*((unsigned __int8 *)&__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87)
        goto LABEL_153;
    }
    goto LABEL_148;
  }
  v120 = j;
  v122 = negate;
  v88 = v73;
  v89 = v78;
  v90 = v79;
  if (memcmp(v78, v86, v79))
  {
    ++v76;
    v79 = v90;
    v78 = v89;
    v73 = v88;
    negate = v122;
    if (v76 == v81)
      goto LABEL_196;
    goto LABEL_152;
  }
  operator delete(__p);
  negate = 1;
  v38 = v125;
  if (!v120)
    goto LABEL_198;
LABEL_229:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v38;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_22AF81BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_22AF81D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_22AF81E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF81EC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_22AF82228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_22AF8242C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_22AF82C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  siri::intelligence::TestParseError::~TestParseError(&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF82F2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF82FB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_22AF83068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_22AF83404(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF83450(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_24F542DC8;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_24F542E58;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_22AF8396C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF83A68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF83AB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x22E2E9CCCLL);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x22E2E9CCCLL);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24F542E28;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x22E2E9CCCLL);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22E2E99A8](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_22AF83F5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a2);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_24F542F30;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_24F542F30;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_22AF85068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_22AF855C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_22B0C9900);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<YAML::Token *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<YAML::Token *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22AF85B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<YAML::Token *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<YAML::Token *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_22AF85EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const char *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_22AF8644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::ssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const char *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::ssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::__compressed_pair<std::ssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const char *>> *v18;
  std::sub_match<std::__wrap_iter<const char *>> *v19;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(__int128 *a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  uint64_t v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  std::string *v30;
  std::__split_buffer<std::string>::pointer begin;
  std::string *v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  __int128 v41;
  std::string *value;
  std::string *v43;
  std::__split_buffer<std::string> v45;
  _QWORD v46[3];
  char v47;
  std::string *v48;
  std::string *v49;

  v5 = a2;
  if (a5 <= 0)
    return (std::__split_buffer<std::string>::pointer)v5;
  v7 = a3;
  v10 = (uint64_t)(a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  v11 = (std::string *)*((_QWORD *)a1 + 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
  {
    v19 = (uint64_t)v11 - a2;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a2) >> 3)) >= a5)
    {
      v20 = (__int128 *)((char *)a3 + 24 * a5);
      v21 = (std::string *)*((_QWORD *)a1 + 1);
    }
    else
    {
      v20 = (__int128 *)((char *)a3 + 8 * (((uint64_t)v11 - a2) >> 3));
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 1), v20, a4, v11);
      *((_QWORD *)a1 + 1) = v21;
      if (v19 < 1)
        return (std::__split_buffer<std::string>::pointer)v5;
    }
    v22 = (std::string *)(v5 + 24 * a5);
    v23 = &v21[-a5];
    v24 = v21;
    if (v23 < v11)
    {
      v24 = v21;
      do
      {
        v25 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        ++v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        ++v23;
      }
      while (v23 < v11);
    }
    *((_QWORD *)a1 + 1) = v24;
    if (v21 != v22)
    {
      v26 = v21 - 1;
      v27 = 8 * (((char *)v21 - (char *)v22) >> 3);
      do
      {
        if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26->__r_.__value_.__l.__data_);
        v28 = (__int128 *)(v5 + v27 - 24);
        v29 = *v28;
        v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + v27 - 8);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
        --v26;
        *(_BYTE *)(v5 + v27 - 1) = 0;
        *(_BYTE *)v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if (v20 != v7)
    {
      v30 = (std::string *)v5;
      do
      {
        std::string::operator=(v30, (const std::string *)v7);
        v7 = (__int128 *)((char *)v7 + 24);
        ++v30;
      }
      while (v7 != v20);
    }
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  v12 = *(_QWORD *)a1;
  v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
  v16 = 2 * v15;
  if (2 * v15 <= v13)
    v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(_QWORD *)a1) >> 3);
  if (v15 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v16;
  v45.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1);
  if (v17)
    v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 1), v17);
  else
    v18 = 0;
  v32 = v18 + v14;
  v45.__first_ = v18;
  v45.__begin_ = v32;
  v45.__end_ = v32;
  v45.__end_cap_.__value_ = &v18[v17];
  v33 = 3 * a5;
  v34 = &v32[a5];
  v35 = 8 * v33;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v36 = *v7;
      v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v36;
    }
    ++v32;
    v7 = (__int128 *)((char *)v7 + 24);
    v35 -= 24;
  }
  while (v35);
  v45.__end_ = v34;
  begin = v45.__begin_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(v10, v5, v5, *(_QWORD *)a1, *(_QWORD *)a1, (uint64_t)v45.__begin_, (uint64_t)v45.__begin_);
  v45.__begin_ = v37;
  v38 = *((_QWORD *)a1 + 1);
  v39 = v34;
  v48 = v34;
  v49 = v34;
  v46[0] = v10;
  v46[1] = &v48;
  v46[2] = &v49;
  if (v38 != v5)
  {
    do
    {
      v40 = *(_OWORD *)v5;
      v39->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      ++v39;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)v5 = 0;
      v5 += 24;
    }
    while (v5 != v38);
    v49 = v39;
  }
  v47 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
  v41 = *a1;
  value = v45.__end_cap_.__value_;
  *(_QWORD *)a1 = v45.__begin_;
  *((_QWORD *)a1 + 1) = v39;
  *(_OWORD *)&v45.__begin_ = v41;
  v43 = (std::string *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = value;
  v45.__end_cap_.__value_ = v43;
  v45.__first_ = (std::__split_buffer<std::string>::pointer)v41;
  std::__split_buffer<std::string>::~__split_buffer(&v45);
  return begin;
}

void sub_22AF86ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

double YAML::Scanner::Scanner(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = YAML::Stream::Stream(a1, a2);
  *(_DWORD *)(v2 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  return result;
}

{
  uint64_t v2;
  double result;

  v2 = YAML::Stream::Stream(a1, a2);
  *(_DWORD *)(v2 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  return result;
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  void **v2;

  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((_QWORD *)this + 34);
  v2 = (void **)((char *)this + 248);
  std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<YAML::Scanner::IndentMarker *>::~deque[abi:ne180100]((_QWORD *)this + 25);
  std::deque<YAML::Scanner::SimpleKey>::~deque[abi:ne180100]((_QWORD *)this + 19);
  std::deque<YAML::Token>::~deque[abi:ne180100]((uint64_t)this + 96);
  YAML::Stream::~Stream(this);
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  return *((_QWORD *)this + 17) == 0;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  int64x2_t *v2;
  int v3;

  v2 = (int64x2_t *)((char *)this + 96);
  while (1)
  {
    while (1)
    {
      if (!*((_QWORD *)this + 17))
        goto LABEL_5;
      v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*((_QWORD *)this + 16) / 0x33uLL))
                     + 80 * (*((_QWORD *)this + 16) % 0x33uLL));
      if (v3 != 1)
        break;
      std::deque<YAML::Token>::pop_front(v2);
    }
    if (!v3)
      return;
LABEL_5:
    if (*((_BYTE *)this + 145))
      break;
    YAML::Scanner::ScanNextToken(this);
  }
}

void YAML::Scanner::pop(int64x2_t *this)
{
  YAML::Scanner::EnsureTokensInQueue((YAML::Scanner *)this);
  if (this[8].i64[1])
    std::deque<YAML::Token>::pop_front(this + 6);
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  if (!*((_QWORD *)this + 17))
    __assert_rtn("peek", "scanner.cpp", 37, "!m_tokens.empty()");
  return *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*((_QWORD *)this + 16) / 0x33uLL))
       + 80 * (*((_QWORD *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((_QWORD *)this + 1);
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int *ValueRegex;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD *exception;
  int v14;
  unint64_t v15;
  YAML::Scanner *v16;
  uint64_t v17;
  int v18;

  if (*((_BYTE *)this + 145))
    return;
  if (!*((_BYTE *)this + 144))
  {
    YAML::Scanner::StartStream(this);
    return;
  }
  YAML::Scanner::ScanToNextToken(this);
  YAML::Scanner::PopIndentToHere(this);
  if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
    && (!*((_QWORD *)this + 8)
     || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                 + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4))
  {
    YAML::Scanner::EndStream(this);
    return;
  }
  if (!*((_DWORD *)this + 4))
  {
    if (*((_QWORD *)this + 8)
      && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((_QWORD *)this + 7) & 0xFFFLL)) == 37)
    {
      YAML::Scanner::ScanDirective(this);
      return;
    }
    v4 = YAML::Exp::DocStart((YAML::Exp *)v2);
    v15 = 0;
    v16 = this;
    v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v4, &v15);
    if ((v2 & 0x80000000) == 0)
    {
      YAML::Scanner::ScanDocStart(this);
      return;
    }
    if (!*((_DWORD *)this + 4))
    {
      v7 = YAML::Exp::DocEnd((YAML::Exp *)v2);
      v15 = 0;
      v16 = this;
      v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v7, &v15);
      if ((v2 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanDocEnd(this);
        return;
      }
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                            + (*((_QWORD *)this + 7) & 0xFFFLL));
    if (v3 <= 0x5C)
    {
      if (v3 == 44)
      {
        YAML::Scanner::ScanFlowEntry(this);
        return;
      }
      if (v3 == 91)
        goto LABEL_14;
    }
    else
    {
      if (v3 == 93 || v3 == 125)
      {
        YAML::Scanner::ScanFlowEnd(this);
        return;
      }
      if (v3 == 123)
      {
LABEL_14:
        YAML::Scanner::ScanFlowStart(this);
        return;
      }
    }
  }
  YAML::Exp::BlockEntry((YAML::Exp *)v2);
  v15 = 0;
  v16 = this;
  v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_253F46500, &v15);
  if ((v5 & 0x80000000) == 0)
  {
    YAML::Scanner::ScanBlockEntry(this);
    return;
  }
  if (*((_QWORD *)this + 39))
  {
    YAML::Exp::KeyInFlow((YAML::Exp *)v5);
    v6 = &unk_253F46540;
  }
  else
  {
    YAML::Exp::Key((YAML::Exp *)v5);
    v6 = &unk_253F46520;
  }
  v15 = 0;
  v16 = this;
  if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v6, &v15) & 0x80000000) == 0)
  {
    YAML::Scanner::ScanKey(this);
    return;
  }
  ValueRegex = YAML::Scanner::GetValueRegex(this);
  v15 = 0;
  v16 = this;
  v9 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)ValueRegex, &v15);
  if ((v9 & 0x80000000) == 0)
  {
    YAML::Scanner::ScanValue(this);
    return;
  }
  if (*((_QWORD *)this + 8))
  {
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                             + (*((_QWORD *)this + 7) & 0xFFFLL));
    if (v10 == 33)
    {
      YAML::Scanner::ScanTag(this);
      return;
    }
    if (v10 == 42 || v10 == 38)
    {
      YAML::Scanner::ScanAnchorOrAlias((void **)this);
      return;
    }
    v12 = *((_QWORD *)this + 39);
    if (v12)
    {
      if (v10 != 39 && v10 != 34)
        goto LABEL_47;
LABEL_54:
      YAML::Scanner::ScanQuotedScalar(this);
      return;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                            + (*((_QWORD *)this + 7) & 0xFFFLL)) > 0x3Du)
    {
      if (v10 == 124 || v10 == 62)
      {
        YAML::Scanner::ScanBlockScalar(this);
        return;
      }
    }
    else if (v10 == 34 || v10 == 39)
    {
      goto LABEL_54;
    }
LABEL_47:
    if (!v12)
      goto LABEL_48;
    goto LABEL_42;
  }
  if (!*((_QWORD *)this + 39))
  {
LABEL_48:
    v11 = YAML::Exp::PlainScalar((YAML::Exp *)v9);
    goto LABEL_49;
  }
LABEL_42:
  v11 = YAML::Exp::PlainScalarInFlow((YAML::Exp *)v9);
LABEL_49:
  v15 = 0;
  v16 = this;
  if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v11, &v15) & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v14 = *((_DWORD *)this + 4);
    v17 = *((_QWORD *)this + 1);
    v18 = v14;
    std::string::basic_string[abi:ne180100]<0>(&v15, "unknown token");
    YAML::Exception::Exception((uint64_t)exception, &v17, (uint64_t)&v15);
    *exception = &unk_24F5439A0;
  }
  YAML::Scanner::ScanPlainScalar(this);
}

void sub_22AF8711C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::Scanner::StartStream(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *((_BYTE *)this + 144) = 1;
  *((_BYTE *)this + 146) = 1;
  v2 = operator new();
  *(_QWORD *)v2 = 0x2FFFFFFFFLL;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v5 = v2;
  YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back((char **)this + 31, &v5);
  v4 = *(_QWORD *)(*((_QWORD *)this + 32) - 8);
  std::deque<YAML::Scanner::IndentMarker *>::push_back((_QWORD *)this + 25, &v4);
  result = v5;
  v5 = 0;
  if (result)
    return MEMORY[0x22E2E9CCC](result, 0x1020C406E52F545);
  return result;
}

void sub_22AF871F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x22E2E9CCC](a10, 0x1020C406E52F545);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t result;
  void *v12;
  int v13;
  int v14;
  unint64_t v15;
  _QWORD v16[3];
  void **v17[3];

  while (1)
  {
    while (1)
    {
      v2 = *((_QWORD *)this + 8);
      if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
      {
        if (!v2
          || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                      + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4)
        {
          break;
        }
      }
      else if (!v2)
      {
        break;
      }
      v3 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((_QWORD *)this + 7) & 0xFFFLL));
      if (v3 != 32 && v3 != 9)
        break;
      if (!*((_QWORD *)this + 39))
      {
        {
          YAML::Exp::Tab(void)::e = 1;
          word_255B57A24 = 9;
          qword_255B57A30 = 0;
          unk_255B57A38 = 0;
          qword_255B57A28 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_22AEC9000);
        }
        v15 = 0;
        v16[0] = this;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tab(void)::e, &v15) & 0x80000000) == 0)
          *((_BYTE *)this + 146) = 0;
      }
      YAML::Stream::get(this);
    }
    {
      YAML::Exp::Comment(void)::e = 1;
      word_255B57A4C = 35;
      qword_255B57A58 = 0;
      unk_255B57A60 = 0;
      qword_255B57A50 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_22AEC9000);
    }
    LODWORD(v15) = YAML::Exp::Comment(void)::e;
    WORD2(v15) = word_255B57A4C;
    memset(v16, 0, sizeof(v16));
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v16, (int *)qword_255B57A50, (int *)qword_255B57A58, (qword_255B57A58 - qword_255B57A50) >> 5);
    v17[0] = 0;
    v17[1] = (void **)this;
    v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v15, (unint64_t *)v17);
    v17[0] = (void **)v16;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v17);
    if ((v7 & 0x80000000) == 0)
    {
      while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
           || *((_QWORD *)this + 8)
           && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                       + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
      {
        v9 = YAML::Exp::Break((YAML::Exp *)v8);
        v15 = 0;
        v16[0] = this;
        v8 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v9, &v15);
        if ((v8 & 0x80000000) == 0)
          break;
        v8 = YAML::Stream::get(this);
      }
    }
    v10 = YAML::Exp::Break((YAML::Exp *)v8);
    v15 = 0;
    v16[0] = this;
    result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v10, &v15);
    if ((result & 0x80000000) != 0)
      return result;
    v12 = YAML::Exp::Break((YAML::Exp *)result);
    v15 = 0;
    v16[0] = this;
    v13 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v12, &v15);
    if (v13 >= 1)
    {
      v14 = v13;
      do
      {
        YAML::Stream::get(this);
        --v14;
      }
      while (v14);
    }
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((_QWORD *)this + 39))
      *((_BYTE *)this + 146) = 1;
  }
}

void sub_22AF874DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5[2];

  if (!*((_QWORD *)this + 39))
  {
    v2 = *((_QWORD *)this + 30);
    if (v2)
    {
      while (1)
      {
        v3 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                    + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF));
        v4 = *((_DWORD *)this + 4);
        if (*v3 < v4)
          goto LABEL_11;
        if (*v3 == v4)
        {
          if (v3[1] != 1)
            goto LABEL_11;
          YAML::Exp::BlockEntry(this);
          v5[0] = 0;
          v5[1] = (unint64_t)this;
          if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_253F46500, v5) & 0x80000000) == 0)
            break;
        }
        YAML::Scanner::PopIndent(this);
        v2 = *((_QWORD *)this + 30);
        if (!v2)
          return;
      }
      while (1)
      {
        v2 = *((_QWORD *)this + 30);
        if (!v2)
          break;
LABEL_11:
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26)
                                               + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF))
                       + 8) != 1)
          return;
        YAML::Scanner::PopIndent(this);
      }
    }
  }
}

void YAML::Scanner::EndStream(YAML::Scanner *this)
{
  uint64_t i;

  if (*((int *)this + 4) >= 1)
    *((_DWORD *)this + 4) = 0;
  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19, 1);
  }
  *(_WORD *)((char *)this + 145) = 1;
}

void *YAML::Exp::DocStart(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  int v5;
  __int16 v6;
  _QWORD v7[3];
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  int v12;
  uint64_t v13;
  void **v14;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "---");
    v3 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v12, (char *)__p, 6);
    v4 = (int *)YAML::Exp::BlankOrBreak(v3);
    v5 = 0;
    v6 = 0;
    memset(v7, 0, sizeof(v7));
    YAML::operator|(v4, &v5, (uint64_t)&v8);
    YAML::operator+(&v12, (int *)&v8, (uint64_t)&YAML::Exp::DocStart(void)::e);
    v14 = (void **)&v9;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v14 = (void **)v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v8 = (void **)&v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (v11 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocStart(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::DocStart(void)::e;
}

void sub_22AF87764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *YAML::Exp::DocEnd(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  int v5;
  __int16 v6;
  _QWORD v7[3];
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  int v12;
  uint64_t v13;
  void **v14;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "...");
    v3 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v12, (char *)__p, 6);
    v4 = (int *)YAML::Exp::BlankOrBreak(v3);
    v5 = 0;
    v6 = 0;
    memset(v7, 0, sizeof(v7));
    YAML::operator|(v4, &v5, (uint64_t)&v8);
    YAML::operator+(&v12, (int *)&v8, (uint64_t)&YAML::Exp::DocEnd(void)::e);
    v14 = (void **)&v9;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v14 = (void **)v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v8 = (void **)&v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
    if (v11 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocEnd(void)::e, &dword_22AEC9000);
  }
  return &YAML::Exp::DocEnd(void)::e;
}

void sub_22AF878F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Exp::BlockEntry(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int *v3;
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  _QWORD v11[3];
  void **v12;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_13);
  if ((v1 & 1) == 0)
  {
    v2 = (YAML::Exp *)__cxa_guard_acquire(&_MergedGlobals_13);
    if ((_DWORD)v2)
    {
      v9 = 1;
      v10 = 45;
      memset(v11, 0, sizeof(v11));
      v3 = (int *)YAML::Exp::BlankOrBreak(v2);
      v4 = 0;
      v5 = 0;
      memset(v6, 0, sizeof(v6));
      YAML::operator|(v3, &v4, (uint64_t)&v7);
      YAML::operator+(&v9, (int *)&v7, (uint64_t)&unk_253F46500);
      v12 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
      v12 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
      v7 = (void **)v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46500, &dword_22AEC9000);
      __cxa_guard_release(&_MergedGlobals_13);
    }
  }
}

void sub_22AF87A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(_QWORD *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __cxa_guard_abort(&_MergedGlobals_13);
  _Unwind_Resume(a1);
}

void YAML::Exp::Key(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int *v3;
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;

  v1 = atomic_load((unsigned __int8 *)&qword_253F464D8);
  if ((v1 & 1) == 0)
  {
    v2 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F464D8);
    if ((_DWORD)v2)
    {
      v4 = 1;
      v5 = 63;
      memset(v6, 0, sizeof(v6));
      v3 = (int *)YAML::Exp::BlankOrBreak(v2);
      YAML::operator+(&v4, v3, (uint64_t)&unk_253F46520);
      v7 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46520, &dword_22AEC9000);
      __cxa_guard_release(&qword_253F464D8);
    }
  }
}

void sub_22AF87B64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_253F464D8);
  _Unwind_Resume(a1);
}

void YAML::Exp::KeyInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int *v3;
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;

  v1 = atomic_load((unsigned __int8 *)&qword_253F464E0);
  if ((v1 & 1) == 0)
  {
    v2 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F464E0);
    if ((_DWORD)v2)
    {
      v4 = 1;
      v5 = 63;
      memset(v6, 0, sizeof(v6));
      v3 = (int *)YAML::Exp::BlankOrBreak(v2);
      YAML::operator+(&v4, v3, (uint64_t)&unk_253F46540);
      v7 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_253F46540, &dword_22AEC9000);
      __cxa_guard_release(&qword_253F464E0);
    }
  }
}

void sub_22AF87C34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_253F464E0);
  _Unwind_Resume(a1);
}

int *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  unsigned __int8 v1;
  int *v2;
  __guard *v3;
  unsigned __int8 v4;
  YAML::Exp *v5;
  int *v6;
  unsigned __int8 v7;
  YAML::Exp *v9;
  int *v10;
  void *__p[2];
  char v12;
  int v13;
  __int16 v14;
  _QWORD v15[3];
  void **v16;
  _BYTE v17[24];
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  if (*((_QWORD *)this + 39))
  {
    if (*((_BYTE *)this + 147))
    {
      v1 = atomic_load((unsigned __int8 *)&qword_253F464F0);
      v2 = &dword_253F46580;
      if ((v1 & 1) == 0)
      {
        v3 = &qword_253F464F0;
        if (__cxa_guard_acquire(&qword_253F464F0))
        {
          dword_253F46580 = 1;
          v2 = &dword_253F46580;
          word_253F46584 = 58;
          qword_253F46590 = 0;
          unk_253F46598 = 0;
          qword_253F46588 = 0;
LABEL_15:
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, v2, &dword_22AEC9000);
          __cxa_guard_release(v3);
        }
      }
    }
    else
    {
      v7 = atomic_load((unsigned __int8 *)&qword_253F464F8);
      v2 = (int *)&unk_253F465A0;
      if ((v7 & 1) == 0)
      {
        v9 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F464F8);
        if ((_DWORD)v9)
        {
          v18 = 1;
          v19 = 58;
          v21 = 0;
          v22 = 0;
          v20 = 0;
          v10 = (int *)YAML::Exp::BlankOrBreak(v9);
          std::string::basic_string[abi:ne180100]<0>(__p, ",}");
          YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
          YAML::operator|(v10, &v13, (uint64_t)&v16);
          YAML::operator+(&v18, (int *)&v16, (uint64_t)&unk_253F465A0);
          v23 = (void **)v17;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
          v23 = (void **)v15;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
          if (v12 < 0)
            operator delete(__p[0]);
          v16 = (void **)&v20;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v16);
          v3 = &qword_253F464F8;
          v2 = (int *)&unk_253F465A0;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = atomic_load((unsigned __int8 *)&qword_253F464E8);
    v2 = (int *)&unk_253F46560;
    if ((v4 & 1) == 0)
    {
      v5 = (YAML::Exp *)__cxa_guard_acquire(&qword_253F464E8);
      if ((_DWORD)v5)
      {
        v18 = 1;
        v19 = 58;
        v21 = 0;
        v22 = 0;
        v20 = 0;
        v6 = (int *)YAML::Exp::BlankOrBreak(v5);
        v13 = 0;
        v14 = 0;
        memset(v15, 0, sizeof(v15));
        YAML::operator|(v6, &v13, (uint64_t)&v16);
        YAML::operator+(&v18, (int *)&v16, (uint64_t)&unk_253F46560);
        __p[0] = v17;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = v15;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v16 = (void **)&v20;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v16);
        v3 = &qword_253F464E8;
        v2 = (int *)&unk_253F46560;
        goto LABEL_15;
      }
    }
  }
  return v2;
}

void sub_22AF87E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  *(_QWORD *)(v20 - 40) = &a16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a14 < 0)
    operator delete(__p);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  __cxa_guard_abort(&qword_253F464F8);
  _Unwind_Resume(a1);
}

void *YAML::Exp::PlainScalar(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  YAML::Exp *v5;
  int *v6;
  int v7;
  __int16 v8;
  _QWORD v9[3];
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void **v26;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = (int *)YAML::Exp::BlankOrBreak(v3);
      YAML::RegEx::RegEx((uint64_t)&v20, (char *)v18, 3);
      YAML::operator|(v4, &v20, (uint64_t)&v22);
      std::string::basic_string[abi:ne180100]<0>(__p, "-?:");
      v5 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v14, (char *)__p, 3);
      v6 = (int *)YAML::Exp::BlankOrBreak(v5);
      v7 = 0;
      v8 = 0;
      memset(v9, 0, sizeof(v9));
      YAML::operator|(v6, &v7, (uint64_t)&v10);
      YAML::operator+(&v14, (int *)&v10, (uint64_t)&v16);
      YAML::operator|(&v22, (int *)&v16, (uint64_t)&v24);
      YAML::operator!(&v24, (uint64_t)&YAML::Exp::PlainScalar(void)::e);
      v26 = (void **)&v25;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)&v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
      v26 = (void **)v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v26);
      v10 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      if (v13 < 0)
        operator delete(__p[0]);
      v16 = (void **)&v23;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v16);
      v16 = (void **)&v21;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v16);
      if (v19 < 0)
        operator delete(v18[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalar(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::PlainScalar(void)::e;
}

void sub_22AF88120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v39 - 40) = v38 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = &a29;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = &a15;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = v37;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  a14 = &a25;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (a23 < 0)
    operator delete(__p);
  a28 = v39 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v39 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void *YAML::Exp::PlainScalarInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v3;
  int *v4;
  YAML::Exp *v5;
  int *v6;
  void *__p[2];
  char v8;
  int v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13[2];
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void **v21;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      v4 = (int *)YAML::Exp::BlankOrBreak(v3);
      YAML::RegEx::RegEx((uint64_t)&v15, (char *)v13, 3);
      YAML::operator|(v4, &v15, (uint64_t)&v17);
      std::string::basic_string[abi:ne180100]<0>(__p, "-:");
      v5 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v9, (char *)__p, 3);
      v6 = (int *)YAML::Exp::Blank(v5);
      YAML::operator+(&v9, v6, (uint64_t)&v11);
      YAML::operator|(&v17, (int *)&v11, (uint64_t)&v19);
      YAML::operator!(&v19, (uint64_t)&YAML::Exp::PlainScalarInFlow(void)::e);
      v21 = (void **)&v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      v21 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      v21 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      if (v8 < 0)
        operator delete(__p[0]);
      v11 = (void **)&v18;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v11 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      if (v14 < 0)
        operator delete(v13[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalarInFlow(void)::e, &dword_22AEC9000);
    }
  }
  return &YAML::Exp::PlainScalarInFlow(void)::e;
}

void sub_22AF883B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v32 - 40) = v31 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(_QWORD *)(v32 - 40) = &a21;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(_QWORD *)(v32 - 40) = &a17;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  if (a15 < 0)
    operator delete(__p);
  a20 = (uint64_t *)(v32 - 96);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a31;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

_QWORD *YAML::ParserException::ParserException(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)YAML::Exception::Exception(a1, a2, a3);
  *result = &unk_24F5439A0;
  return result;
}

BOOL YAML::Scanner::IsWhitespaceToBeEaten(YAML::Scanner *this, int a2)
{
  return a2 == 32 || a2 == 9;
}

uint64_t YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back(char **a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v26 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v25 = v16;
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    v9 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    v19 = *a1;
    v18 = a1[1];
    if (v18 == *a1)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)a1;
      v9 = (char *)v24.i64[1];
      v16 = v25;
    }
    *a1 = v15;
    a1[1] = v9;
    v24 = v21;
    v22 = a1[2];
    a1[2] = v16;
    v25 = v22;
    v23 = v21.i64[0];
    result = std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  uint64_t v2;

  if (!*((_QWORD *)this + 39))
  {
    while (1)
    {
      v2 = *((_QWORD *)this + 30);
      if (!v2
        || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26)
                                             + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF))
                     + 4) == 2)
      {
        break;
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  __int128 v7;
  int v8;
  void *__p[2];
  _OWORD v10[2];
  int v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = 0;
  DWORD1(v7) = a2;
  *((_QWORD *)&v7 + 1) = v3;
  v8 = v4;
  *(_OWORD *)__p = 0u;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)(a1 + 96), &v7);
  v12 = (void **)v10 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v10[0]) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a1 + 128) - 1;
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_22AF886EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2)
    return 4;
  if (a2 != 1)
  {
    if (a2 == 2)
      __assert_rtn("GetStartTokenFor", "scanner.cpp", 279, "false");
    __assert_rtn("GetStartTokenFor", "scanner.cpp", 282, "false");
  }
  return 3;
}

uint64_t YAML::Scanner::PushIndentTo(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  int StartTokenFor;
  uint64_t v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 312))
  {
    v7 = operator new();
    v8 = v7;
    *(_DWORD *)v7 = a2;
    *(_DWORD *)(v7 + 4) = a3;
    *(_DWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v14 = v7;
    v9 = *(_QWORD *)(a1 + 240) + *(_QWORD *)(a1 + 232) - 1;
    v10 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
    if (*v10 > a2 || *v10 == a2 && (a3 != 1 || v10[1]))
    {
      v3 = 0;
      v14 = 0;
    }
    else
    {
      StartTokenFor = YAML::Scanner::GetStartTokenFor(v7, a3);
      *(_QWORD *)(v8 + 16) = YAML::Scanner::PushToken(a1, StartTokenFor);
      v13 = v8;
      std::deque<YAML::Scanner::IndentMarker *>::push_back((_QWORD *)(a1 + 200), &v13);
      YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back((char **)(a1 + 248), &v14);
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 256) - 8);
      v8 = v14;
      v14 = 0;
      if (!v8)
        return v3;
    }
    MEMORY[0x22E2E9CCC](v8, 0x1020C406E52F545);
    return v3;
  }
  return 0;
}

void sub_22AF88890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2E9CCC](v1, 0x1020C406E52F545);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  int v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  int v18;
  void **v19;

  v3 = *((_QWORD *)this + 26);
  v2 = *((_QWORD *)this + 27);
  v4 = ((v2 - v3) << 6) - 1;
  if (v2 == v3)
    v4 = 0;
  v5 = *((_QWORD *)this + 30) - 1;
  v6 = v5 + *((_QWORD *)this + 29);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
  *((_QWORD *)this + 30) = v5;
  if (v4 - v6 >= 0x400)
  {
    operator delete(*(void **)(v2 - 8));
    *((_QWORD *)this + 27) -= 8;
  }
  if (*(_DWORD *)(v7 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
    return;
  }
  v8 = *(_DWORD *)(v7 + 4);
  if (v8)
  {
    if (v8 != 1)
      return;
    v9 = *((_QWORD *)this + 1);
    v10 = *((_DWORD *)this + 4);
    *(_QWORD *)&v13 = 0x500000000;
    *((_QWORD *)&v13 + 1) = v9;
    v14 = v10;
    *(_OWORD *)__p = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v12 = *((_DWORD *)this + 4);
    *(_QWORD *)&v13 = 0x600000000;
    *((_QWORD *)&v13 + 1) = v11;
    v14 = v12;
    *(_OWORD *)__p = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  }
  v19 = (void **)&v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
}

void sub_22AF88A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    return **(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                         + (((unint64_t)(v1 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + *((_QWORD *)this + 29) - 1) & 0x1FF));
  else
    return 0;
}

void YAML::Scanner::ThrowParserException(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  void *exception;
  uint64_t v6;
  int v7;

  v6 = -1;
  v7 = -1;
  if (a1[17])
  {
    v3 = *(_QWORD *)(a1[13] + 8 * (a1[16] / 0x33uLL)) + 80 * (a1[16] % 0x33uLL);
    v4 = *(_DWORD *)(v3 + 16);
    v6 = *(_QWORD *)(v3 + 8);
    v7 = v4;
  }
  exception = __cxa_allocate_exception(0x38uLL);
  YAML::ParserException::ParserException((uint64_t)exception, &v6, a2);
}

void sub_22AF88B08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<YAML::Scanner::IndentMarker *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<YAML::Scanner::SimpleKey>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 42;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 85;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<YAML::Token>::~deque[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)(a1 + 40);
  v3 = *(void ***)(a1 + 8);
  v4 = *(void ***)(a1 + 16);
  if (v4 == v3)
  {
    v4 = *(void ***)(a1 + 8);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v3[v5 / 0x33];
    v7 = (uint64_t)*v6 + 80 * (v5 % 0x33);
    v8 = (unint64_t)v3[(*(_QWORD *)(a1 + 40) + v5) / 0x33] + 80 * ((*(_QWORD *)(a1 + 40) + v5) % 0x33);
    if (v7 != v8)
    {
      do
      {
        std::allocator<YAML::Token>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 80;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)(a1 + 16);
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = *(void ***)(a1 + 16);
      v3 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 25;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 51;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v3 != v4)
  {
    do
    {
      v13 = *v3++;
      operator delete(v13);
    }
    while (v3 != v4);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<YAML::Token>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

void std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x22E2E9CCC](result, 0x1020C406E52F545);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::deque<YAML::Token>::pop_front(int64x2_t *a1)
{
  std::allocator<YAML::Token>::destroy[abi:ne180100]((uint64_t)&a1[2].i64[1], *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x33uLL)) + 80 * (a1[2].i64[0] % 0x33uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_22B0C9930);
  return std::deque<YAML::Token>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<YAML::Token>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x33)
    a2 = 1;
  if (v2 < 0x66)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 51;
  }
  return v4 ^ 1u;
}

void std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 8;
      result = *(_QWORD *)(v2 - 8);
      *(_QWORD *)(v2 - 8) = 0;
      if (result)
        result = MEMORY[0x22E2E9CCC](result, 0x1020C406E52F545);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::deque<YAML::Scanner::IndentMarker *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<YAML::Scanner::IndentMarker *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<YAML::Scanner::IndentMarker *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_22AF894B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_2()
{
  uint64_t v0;

  v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0)
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

void sub_22AF89678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AF89920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (v20 != v21)
  {

  }
  if (a14 != v17)
  {

  }
  _Unwind_Resume(a1);
}

void sub_22AF89AB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AF89C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(exception_object);
}

id ConvertTestResults(__int128 **a1, const siri::intelligence::TestResults *a2)
{
  std::string::size_type i;
  std::string::size_type size;
  __int128 v6;
  __int128 v7;
  void *v8;
  void *v9;
  std::string *v10;
  void *v11;
  void *v12;
  std::string *v13;
  void *v14;
  void *v15;
  const siri::intelligence::TestCase *j;
  std::string::size_type k;
  std::string::size_type v18;
  __int128 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  void *v25;
  void *v26;
  std::string *v27;
  void *v28;
  void *v29;
  std::string *v30;
  void *v31;
  void *v33;
  std::string::size_type v34;
  void *v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string __p;
  std::string v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  std::string v45;
  std::string v46;

  v33 = (void *)objc_opt_new();
  v35 = (void *)objc_opt_new();
  memset(&v46, 0, sizeof(v46));
  std::vector<siri::intelligence::TestParseError>::__init_with_size[abi:ne180100]<siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>(&v46, a1[3], a1[4], 0xAAAAAAAAAAAAAAABLL * (a1[4] - a1[3]));
  size = v46.__r_.__value_.__l.__size_;
  for (i = v46.__r_.__value_.__r.__words[0]; i != size; i += 48)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v6 = *(_OWORD *)i;
      v38.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
    }
    if (*(char *)(i + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 24), *(_QWORD *)(i + 32));
    }
    else
    {
      v7 = *(_OWORD *)(i + 24);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    v8 = (void *)objc_opt_new();
    v9 = (void *)MEMORY[0x24BDD17C8];
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    else
      v45 = v38;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v45;
    else
      v10 = (std::string *)v45.__r_.__value_.__r.__words[0];
    objc_msgSend(v9, "stringWithUTF8String:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setFlowId:", v11);

    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v12 = (void *)MEMORY[0x24BDD17C8];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v45;
    else
      v13 = (std::string *)v45.__r_.__value_.__r.__words[0];
    objc_msgSend(v12, "stringWithUTF8String:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setError:", v14);

    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    objc_msgSend(v35, "addObject:", v8);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v15 = (void *)objc_opt_new();
  memset(&v46, 0, sizeof(v46));
  std::vector<siri::intelligence::TestResult>::__init_with_size[abi:ne180100]<siri::intelligence::TestResult*,siri::intelligence::TestResult*>(&v46, *((__int128 ***)a2 + 1), *((siri::intelligence::TestResult **)a2 + 2), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  v34 = v46.__r_.__value_.__l.__size_;
  for (j = (const siri::intelligence::TestCase *)v46.__r_.__value_.__r.__words[0];
        j != (const siri::intelligence::TestCase *)v34;
        j = (const siri::intelligence::TestCase *)((char *)j + 184))
  {
    siri::intelligence::TestCase::TestCase(&v38, j);
    siri::intelligence::TestResult::GetDescriptions((__int128 **)j, (uint64_t)&v45);
    v18 = v45.__r_.__value_.__l.__size_;
    for (k = v45.__r_.__value_.__r.__words[0]; k != v18; k += 24)
    {
      if (*(char *)(k + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)k, *(_QWORD *)(k + 8));
      }
      else
      {
        v19 = *(_OWORD *)k;
        v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(k + 16);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
      }
      v20 = (void *)objc_opt_new();
      v21 = v20;
      v22 = (*((_DWORD *)j + 38) - 1);
      if (v22 < 3)
        v23 = v22 + 1;
      else
        v23 = 0;
      objc_msgSend(v20, "setStatus:", v23);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v37;
      else
        v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setSummary:", v25);

      v26 = (void *)MEMORY[0x24BDD17C8];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v36 = __p;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v36;
      else
        v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      objc_msgSend(v26, "stringWithUTF8String:", v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setFlowId:", v28);

      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      v29 = (void *)MEMORY[0x24BDD17C8];
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v36, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      else
        v36 = v40;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v36;
      else
        v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
      objc_msgSend(v29, "stringWithUTF8String:", v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setTestName:", v31);

      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      objc_msgSend(v15, "addObject:", v21);

      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
    }
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    if (v42 < 0)
      operator delete(v41);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<siri::intelligence::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  objc_msgSend(v33, "setParseErrors:", v35);
  objc_msgSend(v33, "setResults:", v15);

  return v33;
}

void sub_22AF8A1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  _Unwind_Resume(a1);
}

void sub_22AF8A4D4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));

  _Unwind_Resume(a1);
}

id MakeEmptyTestResults(void)
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)objc_opt_new();
  v1 = (void *)objc_opt_new();
  objc_msgSend(v0, "setParseErrors:", v1);

  v2 = (void *)objc_opt_new();
  objc_msgSend(v0, "setResults:", v2);

  return v0;
}

void sub_22AF8A5E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_22AF8A948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void *v39;
  uint64_t v40;

  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));

  _Unwind_Resume(a1);
}

void sub_22AF8AD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));

  _Unwind_Resume(a1);
}

void sub_22AF8B104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);

  _Unwind_Resume(a1);
}

void sub_22AF8B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  void *v23;

  __pa = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_22AF8B6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  void *v23;

  __pa = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_22AF8B878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_22AF8B930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_22AF8B9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_22AF8BB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);

  _Unwind_Resume(a1);
}

void sub_22AF8BD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::TestResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<siri::intelligence::TestResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::TestResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 104);
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

YAML::NodeBuilder *YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = &off_24F542F78;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (_QWORD *)operator new();
  v4 = (_QWORD *)operator new();
  v4[2] = 0;
  v4[1] = 0;
  *v4 = v4 + 1;
  std::shared_ptr<YAML::detail::memory>::shared_ptr[abi:ne180100]<YAML::detail::memory,void>(v3, (uint64_t)v4);
  std::shared_ptr<YAML::detail::memory_holder>::shared_ptr[abi:ne180100]<YAML::detail::memory_holder,void>(v2, (uint64_t)v3);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = operator new(8uLL);
  *v5 = 0;
  *((_QWORD *)this + 8) = v5 + 1;
  *((_QWORD *)this + 9) = v5 + 1;
  *((_QWORD *)this + 7) = v5;
  return this;
}

void sub_22AF8C070(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24F542F78;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  YAML::NodeBuilder::~NodeBuilder(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v3;
      *(_QWORD *)(a2 + 40) = v4;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      *(_QWORD *)(a2 + 48) = v2;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = v3;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = v2;
    }
  }
  else
  {
    *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
  }
}

void YAML::NodeBuilder::OnNull(uint64_t ****a1, uint64_t *a2, uint64_t a3)
{
  YAML::detail::node *v4;
  uint64_t v5;

  v4 = YAML::NodeBuilder::Push(a1, a2, a3);
  YAML::detail::node::mark_defined(v4);
  v5 = **(_QWORD **)v4;
  *(_BYTE *)v5 = 1;
  *(_DWORD *)(v5 + 16) = 1;
  YAML::NodeBuilder::Pop((YAML::NodeBuilder *)a1);
}

YAML::detail::node *YAML::NodeBuilder::Push(uint64_t ****a1, uint64_t *a2, uint64_t a3)
{
  YAML::detail::node *node;
  uint64_t v7;
  uint64_t v8;

  node = (YAML::detail::node *)YAML::detail::memory::create_node(*a1[1]);
  v7 = **(_QWORD **)node;
  v8 = *a2;
  *(_DWORD *)(v7 + 12) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v7 + 4) = v8;
  YAML::NodeBuilder::RegisterAnchor((YAML::NodeBuilder *)a1, a3, node);
  YAML::NodeBuilder::Push((YAML::NodeBuilder *)a1, node);
  return node;
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  char *v1;
  char *v2;
  char *v4;
  YAML::detail::node *v5;
  YAML::detail::node *v6;
  YAML::detail::node *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t ***v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  YAML::detail::node *v20;
  uint64_t ***v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  YAML::detail::node_data **v25;
  unint64_t v26;
  YAML::detail::node_data *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t ***v43;
  std::__shared_weak_count *v44;

  v2 = (char *)*((_QWORD *)this + 4);
  v1 = (char *)*((_QWORD *)this + 5);
  if (v2 == v1)
    __assert_rtn("Pop", "nodebuilder.cpp", 100, "!m_stack.empty()");
  if (v1 - v2 == 8)
  {
    *((_QWORD *)this + 3) = *(_QWORD *)v2;
    *((_QWORD *)this + 5) = v1 - 8;
    return;
  }
  v6 = (YAML::detail::node *)*((_QWORD *)v1 - 1);
  v4 = v1 - 8;
  v5 = v6;
  *((_QWORD *)this + 5) = v4;
  v7 = (YAML::detail::node *)*((_QWORD *)v4 - 1);
  v8 = *(uint64_t **)v7;
  v9 = **(_QWORD **)v7;
  if (!*(_BYTE *)v9)
    goto LABEL_62;
  v10 = *(_DWORD *)(v9 + 16);
  if (v10 != 4)
  {
    if (v10 == 3)
    {
      v11 = (uint64_t ***)*((_QWORD *)this + 1);
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = *(uint64_t **)v7;
        v41 = v12;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        v17 = *v15;
        v44 = v12;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      else
      {
        v41 = 0;
        v17 = *v8;
        v44 = 0;
      }
      v43 = v11;
      YAML::detail::node_data::push_back(v17, (uint64_t)v5);
      if (v12)
      {
        v29 = (unint64_t *)&v12->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v41)
      {
        v31 = (unint64_t *)&v41->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      YAML::detail::node::add_dependency(v5, v7);
      if (v12)
      {
        v33 = (unint64_t *)&v12->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      return;
    }
LABEL_62:
    __assert_rtn("Pop", "nodebuilder.cpp", 124, "false");
  }
  v19 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 10) == v19)
    __assert_rtn("Pop", "nodebuilder.cpp", 115, "!m_keys.empty()");
  if (*(_BYTE *)(v19 - 8))
  {
    v20 = *(YAML::detail::node **)(v19 - 16);
    v21 = (uint64_t ***)*((_QWORD *)this + 1);
    v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = *(YAML::detail::node_data ***)v7;
      v42 = v22;
      do
        v26 = __ldxr(v23);
      while (__stxr(v26 + 1, v23));
      v27 = *v25;
      v44 = v22;
      do
        v28 = __ldxr(v23);
      while (__stxr(v28 + 1, v23));
    }
    else
    {
      v42 = 0;
      v27 = (YAML::detail::node_data *)*v8;
      v44 = 0;
    }
    v43 = v21;
    YAML::detail::node_data::insert(v27, v20, v5, &v43);
    if (v22)
    {
      v35 = (unint64_t *)&v22->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v42)
    {
      v37 = (unint64_t *)&v42->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    YAML::detail::node::add_dependency(v20, v7);
    YAML::detail::node::add_dependency(v5, v7);
    if (v22)
    {
      v39 = (unint64_t *)&v22->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *((_QWORD *)this + 11) -= 16;
  }
  else
  {
    *(_BYTE *)(v19 - 8) = 1;
  }
}

void sub_22AF8C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
  YAML::NodeBuilder::Push(a1, *(YAML::detail::node **)(*((_QWORD *)a1 + 7) + 8 * a3));
  YAML::NodeBuilder::Pop(a1);
}

void YAML::NodeBuilder::Push(YAML::NodeBuilder *this, YAML::detail::node *a2)
{
  _QWORD *v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = (void **)((char *)this + 32);
  if (v4 == v6 || (v7 = **(_QWORD **)*(v6 - 1), !*(_BYTE *)v7) || *(_DWORD *)(v7 + 16) != 4)
  {
    v14 = (char *)this + 48;
    v15 = *((_QWORD *)this + 6);
    if ((unint64_t)v6 >= v15)
    {
      v17 = v6 - v4;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_57;
      v18 = v15 - (_QWORD)v4;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v14, v20);
      else
        v21 = 0;
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = a2;
      v16 = v22 + 8;
      v25 = (char *)*((_QWORD *)this + 4);
      v24 = (char *)*((_QWORD *)this + 5);
      if (v24 != v25)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)*v5;
      }
      *((_QWORD *)this + 4) = v22;
      *((_QWORD *)this + 5) = v16;
      *((_QWORD *)this + 6) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v6 = a2;
      v16 = v6 + 1;
    }
    *((_QWORD *)this + 5) = v16;
    return;
  }
  v8 = (char *)this + 48;
  v9 = *((_QWORD *)this + 6);
  v11 = *((_QWORD *)this + 10);
  v10 = *((_QWORD *)this + 11);
  v12 = *((_QWORD *)this + 13);
  if ((unint64_t)v6 >= v9)
  {
    v27 = v6 - v4;
    if (!((unint64_t)(v27 + 1) >> 61))
    {
      v28 = v9 - (_QWORD)v4;
      v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v8, v30);
      else
        v31 = 0;
      v32 = &v31[8 * v27];
      v33 = &v31[8 * v30];
      *(_QWORD *)v32 = a2;
      v13 = v32 + 8;
      v35 = (char *)*((_QWORD *)this + 4);
      v34 = (char *)*((_QWORD *)this + 5);
      if (v34 != v35)
      {
        do
        {
          v36 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v34 != v35);
        v34 = (char *)*v5;
      }
      *((_QWORD *)this + 4) = v32;
      *((_QWORD *)this + 5) = v13;
      *((_QWORD *)this + 6) = v33;
      if (v34)
        operator delete(v34);
      goto LABEL_38;
    }
LABEL_57:
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  *v6 = a2;
  v13 = v6 + 1;
LABEL_38:
  *((_QWORD *)this + 5) = v13;
  if ((v10 - v11) >> 4 < v12)
  {
    v38 = (_BYTE *)*((_QWORD *)this + 11);
    v37 = *((_QWORD *)this + 12);
    if ((unint64_t)v38 >= v37)
    {
      v40 = (_BYTE *)*((_QWORD *)this + 10);
      v41 = (v38 - v40) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v43 = v37 - (_QWORD)v40;
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = (char *)operator new(16 * v44);
      }
      else
      {
        v45 = 0;
      }
      v46 = &v45[16 * v41];
      *(_QWORD *)v46 = a2;
      v46[8] = 0;
      v39 = v46 + 16;
      if (v38 != v40)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v38 - 1);
          v46 -= 16;
          v38 -= 16;
        }
        while (v38 != v40);
        v38 = (_BYTE *)*((_QWORD *)this + 10);
      }
      *((_QWORD *)this + 10) = v46;
      *((_QWORD *)this + 11) = v39;
      *((_QWORD *)this + 12) = &v45[16 * v44];
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v38 = a2;
      v38[8] = 0;
      v39 = v38 + 16;
    }
    *((_QWORD *)this + 11) = v39;
  }
}

void YAML::NodeBuilder::OnScalar(uint64_t ****a1, uint64_t *a2, const std::string *a3, uint64_t a4, const std::string *a5)
{
  YAML::detail::node *v8;
  uint64_t v9;

  v8 = YAML::NodeBuilder::Push(a1, a2, a4);
  YAML::detail::node::mark_defined(v8);
  v9 = **(_QWORD **)v8;
  *(_BYTE *)v9 = 1;
  *(_DWORD *)(v9 + 16) = 2;
  std::string::operator=((std::string *)(v9 + 56), a5);
  YAML::detail::node::mark_defined(v8);
  std::string::operator=((std::string *)(**(_QWORD **)v8 + 24), a3);
  YAML::NodeBuilder::Pop((YAML::NodeBuilder *)a1);
}

void YAML::NodeBuilder::OnSequenceStart(uint64_t ****a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  YAML::detail::node *v7;
  uint64_t v8;

  v7 = YAML::NodeBuilder::Push(a1, a2, a4);
  YAML::detail::node::mark_defined(v7);
  std::string::operator=((std::string *)(**(_QWORD **)v7 + 24), a3);
  YAML::detail::node::mark_defined(v7);
  v8 = **(_QWORD **)v7;
  *(_BYTE *)v8 = 1;
  if (*(_DWORD *)(v8 + 16) != 3)
  {
    *(_DWORD *)(v8 + 16) = 3;
    *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(v8 + 104) = 0;
  }
  YAML::detail::node::mark_defined(v7);
  *(_DWORD *)(**(_QWORD **)v7 + 48) = a5;
}

void YAML::NodeBuilder::OnMapStart(uint64_t a1, uint64_t *a2, const std::string *a3, uint64_t a4, int a5)
{
  YAML::detail::node *v8;
  uint64_t v9;

  v8 = YAML::NodeBuilder::Push((uint64_t ****)a1, a2, a4);
  YAML::detail::node::mark_defined(v8);
  v9 = **(_QWORD **)v8;
  *(_BYTE *)v9 = 1;
  if (*(_DWORD *)(v9 + 16) != 4)
  {
    *(_DWORD *)(v9 + 16) = 4;
    *(_QWORD *)(v9 + 120) = *(_QWORD *)(v9 + 112);
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(v9 + 136));
  }
  YAML::detail::node::mark_defined(v8);
  std::string::operator=((std::string *)(**(_QWORD **)v8 + 24), a3);
  YAML::detail::node::mark_defined(v8);
  *(_DWORD *)(**(_QWORD **)v8 + 48) = a5;
  ++*(_QWORD *)(a1 + 104);
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    __assert_rtn("OnMapEnd", "nodebuilder.cpp", 76, "m_mapDepth > 0");
  *((_QWORD *)this + 13) = v1 - 1;
  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::RegisterAnchor(YAML::NodeBuilder *this, uint64_t a2, YAML::detail::node *a3)
{
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a2)
  {
    v5 = *((_QWORD *)this + 7);
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    v6 = (void **)((char *)this + 56);
    if (a2 != ((uint64_t)v7 - v5) >> 3)
      __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
    v9 = (char *)this + 72;
    v10 = *((_QWORD *)this + 9);
    if ((unint64_t)v7 >= v10)
    {
      if ((unint64_t)(a2 + 1) >> 61)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      v12 = v10 - v5;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(a2 + 1))
        v13 = a2 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v9, v14);
      else
        v15 = 0;
      v16 = &v15[8 * a2];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a3;
      v11 = v16 + 8;
      v19 = (char *)*((_QWORD *)this + 7);
      v18 = (char *)*((_QWORD *)this + 8);
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = (char *)*v6;
      }
      *((_QWORD *)this + 7) = v16;
      *((_QWORD *)this + 8) = v11;
      *((_QWORD *)this + 9) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v7 = a3;
      v11 = v7 + 1;
    }
    *((_QWORD *)this + 8) = v11;
  }
}

void YAML::detail::node::add_dependency(YAML::detail::node *this, YAML::detail::node *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  if (***(_BYTE ***)this)
  {
    YAML::detail::node::mark_defined(a2);
  }
  else
  {
    v5 = (uint64_t **)((char *)this + 24);
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v7 <= (unint64_t)a2)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_11;
        }
        if (v7 >= (unint64_t)a2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      v6 = (uint64_t **)((char *)this + 24);
LABEL_11:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = (uint64_t)a2;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      v9 = **((_QWORD **)this + 2);
      if (v9)
      {
        *((_QWORD *)this + 2) = v9;
        v10 = *v5;
      }
      else
      {
        v10 = v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 3), v10);
      ++*((_QWORD *)this + 4);
    }
  }
}

siri::intelligence::Variable *siri::intelligence::Variable::Variable(siri::intelligence::Variable *this)
{
  *(_QWORD *)this = &off_24F543000;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, siri::intelligence::TYPE_UNKNOWN);
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  return this;
}

void sub_22AF8CD98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Variable::Variable(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v5;

  *(_QWORD *)a1 = &off_24F543000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_WORD *)(a1 + 64) = 0;
  v5 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v5, a3);
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_22AF8CE24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::Variable::SetKey(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

std::string *siri::intelligence::Variable::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t siri::intelligence::Variable::SetParent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

void siri::intelligence::Variable::~Variable(void **this)
{
  *this = &off_24F543000;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  siri::intelligence::Variable::~Variable(this);
  JUMPOUT(0x22E2E9CCCLL);
}

void siri::intelligence::Variable::GetKey(siri::intelligence::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void siri::intelligence::Variable::GetType(siri::intelligence::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

uint64_t siri::intelligence::Variable::IsPersistent(siri::intelligence::Variable *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t siri::intelligence::Variable::SetPersistent(uint64_t this, char a2)
{
  *(_BYTE *)(this + 65) = a2;
  return this;
}

uint64_t siri::intelligence::Variable::IsDefined(siri::intelligence::Variable *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t siri::intelligence::Variable::GetParent(siri::intelligence::Variable *this)
{
  return *((_QWORD *)this + 7);
}

void siri::intelligence::Variable::GetFullKey(siri::intelligence::Variable *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  std::string v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
  }
  for (i = *((_QWORD *)this + 7); i; i = *(_QWORD *)(i + 56))
  {
    if (*(char *)(i + 31) < 0)
    {
      if (!*(_QWORD *)(i + 16))
        return;
    }
    else if (!*(_BYTE *)(i + 31))
    {
      return;
    }
    if (*(char *)(i + 31) >= 0)
      v5 = *(unsigned __int8 *)(i + 31);
    else
      v5 = *(_QWORD *)(i + 16);
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v5 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v14;
    else
      v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if (v5)
    {
      if (*(char *)(i + 31) >= 0)
        v7 = (const void *)(i + 8);
      else
        v7 = *(const void **)(i + 8);
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::string::append(&v14, v9, v10);
    v12 = v11->__r_.__value_.__r.__words[0];
    v15[0] = v11->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v15[0];
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v13;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_22AF8D0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Variable::SetValueFromString()
{
  return 0;
}

uint64_t siri::intelligence::Variable::SetUndefined(uint64_t this)
{
  *(_BYTE *)(this + 64) = 0;
  return this;
}

uint64_t siri::intelligence::Variable::IsEmpty(siri::intelligence::Variable *this)
{
  return 1;
}

_QWORD *siri::intelligence::Variable::AsString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t siri::intelligence::Variable::AsQuotedString(siri::intelligence::Variable *this)
{
  return (*(uint64_t (**)(siri::intelligence::Variable *))(*(_QWORD *)this + 56))(this);
}

double siri::intelligence::Variable::AsNumber(siri::intelligence::Variable *this)
{
  return 0.0;
}

uint64_t siri::intelligence::Variable::AsBoolean(siri::intelligence::Variable *this)
{
  return 0;
}

std::string *siri::intelligence::Variable::GetExpanded@<X0>(siri::intelligence::Variable *this@<X0>, siri::intelligence::Variable **a2@<X8>)
{
  char *v5;
  std::string *result;

  v5 = (char *)operator new(0x60uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24F543078;
  *a2 = siri::intelligence::Variable::Variable((siri::intelligence::Variable *)(v5 + 24));
  a2[1] = (siri::intelligence::Variable *)v5;
  std::string::operator=((std::string *)(v5 + 32), (const std::string *)((char *)this + 8));
  result = std::string::operator=((std::string *)(v5 + 56), (const std::string *)((char *)this + 32));
  *((_QWORD *)v5 + 10) = *((_QWORD *)this + 7);
  v5[88] = *((_BYTE *)this + 64);
  return result;
}

void sub_22AF8D1E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *siri::intelligence::Variable::GetExpandedType@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, siri::intelligence::TYPE_UNKNOWN);
}

void siri::intelligence::Variable::FromProtobuf(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  const protobuf::Intelligence_KeyValueParameter **v7;
  protobuf::Intelligence_KeyValueParameter *v8;
  const protobuf::Intelligence_KeyValueParameter *v9;
  uint64_t v10;
  const std::string *v11;
  std::string *v12;
  uint64_t v13;
  const protobuf::Intelligence_KeyValueParameter **v14;
  protobuf::Intelligence_KeyValueParameter *v15;
  const protobuf::Intelligence_KeyValueParameter *v16;
  uint64_t v17;
  const std::string *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const std::string *v26;
  char v27;
  double v28;
  int v29;
  protobuf::Intelligence_KeyValueParameter *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  protobuf::Intelligence_KeyValueParameter *v39[2];
  unint64_t v40;

  v6 = *(_DWORD *)(a2 + 16);
  if ((v6 & 8) != 0)
  {
    v11 = *(const std::string **)(a2 + 144);
    v12 = (std::string *)operator new(0x78uLL);
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F5425E8;
    v12->__r_.__value_.__l.__size_ = 0;
    v13 = (uint64_t)siri::intelligence::VariableReference::VariableReference(v12 + 1, a1, v11);
LABEL_21:
    *a3 = v13;
    a3[1] = (uint64_t)v12;
    return;
  }
  if ((v6 & 0x10) != 0)
  {
    v39[0] = 0;
    v39[1] = 0;
    v40 = 0;
    v37 = 0uLL;
    v38 = 0;
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&v37, a2 + 96);
    if (DWORD2(v37))
    {
      if (v38)
        v14 = (const protobuf::Intelligence_KeyValueParameter **)(v38 + 8);
      else
        v14 = 0;
      v15 = v39[1];
      do
      {
        v16 = *v14;
        if ((unint64_t)v15 >= v40)
        {
          v15 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)v39, v16);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v15, v16);
          v15 = (protobuf::Intelligence_KeyValueParameter *)((char *)v15 + 192);
        }
        v39[1] = v15;
        ++v14;
        if (v38)
          v17 = v38 + 8;
        else
          v17 = 0;
      }
      while (v14 != (const protobuf::Intelligence_KeyValueParameter **)(v17 + 8 * SDWORD2(v37)));
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v37);
    v18 = *(const std::string **)(a2 + 152);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)v39, &v36);
    v19 = operator new(0x88uLL);
    v19[2] = 0;
    *v19 = &unk_24F542638;
    v19[1] = 0;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    v37 = v36;
    v36 = 0uLL;
    siri::intelligence::VariableFunction::VariableFunction((uint64_t)(v19 + 3), a1, v18, (uint64_t *)&v37);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *a3 = (uint64_t)(v19 + 3);
    a3[1] = (uint64_t)v19;
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *(_QWORD *)&v37 = v39;
    goto LABEL_45;
  }
  if ((v6 & 2) != 0)
  {
    v26 = *(const std::string **)(a2 + 128);
    v12 = (std::string *)operator new(0x78uLL);
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F540920;
    v12->__r_.__value_.__l.__size_ = 0;
    v13 = (uint64_t)siri::intelligence::VariableString::VariableString(v12 + 1, a1, v26);
    goto LABEL_21;
  }
  if ((v6 & 0x100) != 0)
  {
    v27 = *(_BYTE *)(a2 + 184);
    v12 = (std::string *)operator new(0x60uLL);
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F542548;
    v12->__r_.__value_.__l.__size_ = 0;
    v13 = siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)&v12[1], a1, v27);
    goto LABEL_21;
  }
  if ((v6 & 0x80) != 0)
  {
    v28 = *(double *)(a2 + 176);
    v12 = (std::string *)operator new(0x68uLL);
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24F542598;
    v12->__r_.__value_.__l.__size_ = 0;
    v13 = siri::intelligence::VariableNumber::VariableNumber((uint64_t)&v12[1], a1, v28);
    goto LABEL_21;
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    v39[0] = 0;
    v39[1] = 0;
    v40 = 0;
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::RepeatedPtrField((uint64_t)&v37, a2 + 72);
    if (DWORD2(v37))
    {
      if (v38)
        v7 = (const protobuf::Intelligence_KeyValueParameter **)(v38 + 8);
      else
        v7 = 0;
      v8 = v39[1];
      do
      {
        v9 = *v7;
        if ((unint64_t)v8 >= v40)
        {
          v8 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)v39, v9);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v8, v9);
          v8 = (protobuf::Intelligence_KeyValueParameter *)((char *)v8 + 192);
        }
        v39[1] = v8;
        ++v7;
        if (v38)
          v10 = v38 + 8;
        else
          v10 = 0;
      }
      while (v7 != (const protobuf::Intelligence_KeyValueParameter **)(v10 + 8 * SDWORD2(v37)));
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v37);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string const&,std::vector<protobuf::Intelligence_KeyValueParameter> &,void>(&v37, a1, (uint64_t *)v39);
    *(_OWORD *)a3 = v37;
    v37 = 0uLL;
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&v37);
    *(_QWORD *)&v37 = v39;
LABEL_45:
    std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    return;
  }
  if (*(int *)(a2 + 56) < 1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>(a1, v39);
    if (*(int *)(a2 + 56) >= 1)
    {
      v29 = 0;
      do
      {
        v30 = v39[0];
        v31 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 48, v29);
        siri::intelligence::Variable::FromProtobuf(&v35, a1, v31);
        if ((_QWORD)v35)
        {
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((char **)v30 + 9, &v35);
          *((_BYTE *)v30 + 64) = 1;
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
        if (*((_QWORD *)&v35 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        ++v29;
      }
      while (v29 < *(_DWORD *)(a2 + 56));
    }
    *(_OWORD *)a3 = *(_OWORD *)v39;
    v39[0] = 0;
    v39[1] = 0;
    std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)v39);
  }
}

void sub_22AF8D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::RepeatedPtrField(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)a1, a2);
  return a1;
}

void sub_22AF8D780(_Unwind_Exception *a1)
{
  google::protobuf::internal::ArenaImpl **v1;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F543078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F543078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::Variable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 192;
      v7 = v4 - 192;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 192;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>(uint64_t a1, const protobuf::Intelligence_KeyValueParameter *a2)
{
  protobuf::Intelligence_KeyValueParameter *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  protobuf::Intelligence_KeyValueParameter *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(protobuf::Intelligence_KeyValueParameter **)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v17 = a1 + 16;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::Intelligence_KeyValueParameter>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (protobuf::Intelligence_KeyValueParameter *)&v10[192 * v4];
  v16 = &v10[192 * v9];
  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v14, a2);
  v15 = (char *)v14 + 192;
  std::vector<protobuf::Intelligence_KeyValueParameter>::__swap_out_circular_buffer((protobuf::Intelligence_KeyValueParameter **)a1, &v13);
  v11 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_22AF8D960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_KeyValueParameter *std::vector<protobuf::Intelligence_KeyValueParameter>::__swap_out_circular_buffer(protobuf::Intelligence_KeyValueParameter **a1, _QWORD *a2)
{
  protobuf::Intelligence_KeyValueParameter *v4;
  protobuf::Intelligence_KeyValueParameter *v5;
  protobuf::Intelligence_KeyValueParameter *result;
  protobuf::Intelligence_KeyValueParameter *v7;
  protobuf::Intelligence_KeyValueParameter *v8;
  protobuf::Intelligence_KeyValueParameter *v9;

  v5 = *a1;
  v4 = a1[1];
  result = (protobuf::Intelligence_KeyValueParameter *)a2[1];
  while (v4 != v5)
  {
    v4 = (protobuf::Intelligence_KeyValueParameter *)((char *)v4 - 192);
    result = protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)((char *)result - 192), v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (protobuf::Intelligence_KeyValueParameter *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (protobuf::Intelligence_KeyValueParameter *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::Intelligence_KeyValueParameter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a2);
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(protobuf::Intelligence_KeyValueParameter *a1, protobuf::Intelligence_KeyValueParameter *a2)
{
  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(a1);
  if (a1 != a2)
    protobuf::Intelligence_KeyValueParameter::InternalSwap(a1, a2);
  return a1;
}

uint64_t std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 192);
    *(_QWORD *)(a1 + 16) = i - 192;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>@<X0>(char *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,std::allocator<siri::intelligence::VariableDictionary>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22AF8DB1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,std::allocator<siri::intelligence::VariableDictionary>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24F5426D8;
  a1[1] = 0;
  std::allocator<siri::intelligence::VariableDictionary>::construct[abi:ne180100]<siri::intelligence::VariableDictionary,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &>((int)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_22AF8DB80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableDictionary>::construct[abi:ne180100]<siri::intelligence::VariableDictionary,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &>(int a1, _QWORD *a2, char *__s, uint64_t *a4)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableDictionary::VariableDictionary(a2, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22AF8DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string const&,std::vector<protobuf::Intelligence_KeyValueParameter> &,void>(_QWORD *a1, const std::string *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x78uLL);
  v6[2] = 0;
  *v6 = &unk_24F5426D8;
  v6[1] = 0;
  result = siri::intelligence::VariableDictionary::VariableDictionary(v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = v6;
  return result;
}

void sub_22AF8DC60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::intelligence::Loader::LoadFile(std::string *a1@<X0>, int a2@<W1>, int a3@<W2>, __int128 *a4@<X8>)
{
  const char *v8;
  char *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  _ZNSt3__115allocate_sharedB8ne180100IN8protobuf12IntelligenceENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v14);
  if (a2 == 1)
  {
    if (!siri::intelligence::ProtobufIO::FromFile(v14, a1))
    {
      v9 = "Failed to load binary file: %s";
      goto LABEL_9;
    }
  }
  else
  {
    if (a2 != 2)
    {
      v9 = "Unsupported source format for loader: %s";
      goto LABEL_9;
    }
    if ((siri::intelligence::YamlIO::FromFile((siri::intelligence *)v14, (char *)a1, a3) & 1) == 0)
    {
      v9 = "Failed to load YAML file: %s";
LABEL_9:
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = (uint64_t *)a1;
      else
        v10 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
      siri::intelligence::Log::Error((siri::intelligence::Log *)v9, v8, v10);
      goto LABEL_13;
    }
  }
  *a4 = v14;
  a4 = &v14;
LABEL_13:
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_22AF8DD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::Loader::LoadFile(std::string *a1@<X0>, int a2@<W1>, __int128 *a3@<X8>)
{
  int FormatForFilename;

  FormatForFilename = siri::intelligence::GetFormatForFilename((uint64_t)a1);
  siri::intelligence::Loader::LoadFile(a1, FormatForFilename, a2, a3);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN8protobuf12IntelligenceENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x248uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN8protobuf12IntelligenceENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_22AF8DDFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN8protobuf12IntelligenceENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24F5430D8;
  protobuf::Intelligence::Intelligence((protobuf::Intelligence *)(a1 + 3));
  return a1;
}

void sub_22AF8DE44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<protobuf::Intelligence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F5430D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<protobuf::Intelligence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F5430D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t std::__shared_ptr_emplace<protobuf::Intelligence>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void siri::intelligence::Validator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _BOOL4 v7;
  _BOOL4 v8;
  std::string::size_type size;
  std::string::size_type v10;
  __int128 v11;
  _BOOL4 v12;
  int v13;
  unsigned __int8 *v14;
  BOOL v15;
  BOOL v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int LineNumFromUnknownField;
  siri::intelligence::ValidationData *v25;
  siri::intelligence::ValidationData *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  const void ***v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  siri::intelligence **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  siri::intelligence **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  siri::intelligence **v119;
  uint64_t v120;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  const void ***v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  siri::intelligence **v136;
  uint64_t v137;
  uint64_t v138;
  siri::intelligence *v139;
  _BOOL8 v140;
  siri::intelligence::ValidationData *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  const void ***v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  const void ***v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  const void ***v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  siri::intelligence *v180;
  std::string *v181;
  std::string *v182;
  siri::intelligence *v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  siri::intelligence *v189;
  std::string *v190;
  std::string *v191;
  siri::intelligence *v192;
  int *v193;
  std::string *v194;
  std::string *v195;
  uint64_t v196;
  const void ***v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  siri::intelligence **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const void ***v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  std::string *v218;
  std::string *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const void ***v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  siri::intelligence **v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  std::string *v245;
  std::string *v246;
  uint64_t v247;
  siri::intelligence **v248;
  uint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  std::string *v258;
  std::__shared_weak_count *v259;
  unint64_t *p_shared_owners;
  unint64_t v261;
  void *v262;
  std::string *v263;
  std::string *v264;
  void *v265;
  uint64_t v266;
  unint64_t *p_size;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *begin;
  unint64_t *v273;
  unint64_t v274;
  siri::intelligence::ValidationResults *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  _BOOL4 v283;
  unsigned __int8 *v284;
  std::string::size_type i;
  std::string::size_type v286;
  __int128 v287;
  _OWORD *v288;
  __int128 v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  std::string *v293;
  std::string *v294;
  __int128 v295;
  std::string::size_type v296;
  uint64_t *v297;
  siri::intelligence::ValidationResults *v298;
  uint64_t *v300;
  __int128 v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  std::string v304;
  std::string v305[3];
  uint64_t *v306;
  _QWORD v307[2];
  uint64_t *v308;
  _QWORD v309[2];
  uint64_t *v310;
  _QWORD v311[2];
  uint64_t *v312;
  _QWORD v313[2];
  uint64_t *v314;
  _QWORD v315[2];
  uint64_t *v316;
  _QWORD v317[2];
  uint64_t *v318;
  _QWORD v319[2];
  uint64_t *v320;
  _QWORD v321[2];
  uint64_t *v322;
  _QWORD v323[2];
  uint64_t *v324;
  _QWORD v325[2];
  void **v326[3];
  _QWORD v327[4];
  _QWORD v328[2];
  void *__p[2];
  char v330;
  std::string v331;
  std::string v332;
  std::string v333;
  std::string v334;
  std::__split_buffer<std::string> v335;
  char v336;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<siri::intelligence::ValidationResult>::__init_with_size[abi:ne180100]<siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(a4, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 6);
  v298 = (siri::intelligence::ValidationResults *)a4;
  std::set<std::string>::set[abi:ne180100](a4 + 3, (const void ***)(a3 + 24));
  v307[0] = 0;
  v307[1] = 0;
  memset(v305, 0, sizeof(v305));
  v306 = v307;
  v308 = v309;
  v309[0] = 0;
  v311[0] = 0;
  v311[1] = 0;
  v309[1] = 0;
  v310 = v311;
  v312 = v313;
  v313[0] = 0;
  v315[0] = 0;
  v315[1] = 0;
  v313[1] = 0;
  v314 = v315;
  v316 = v317;
  v317[0] = 0;
  v319[0] = 0;
  v319[1] = 0;
  v317[1] = 0;
  v318 = v319;
  v320 = v321;
  v321[0] = 0;
  v323[0] = 0;
  v323[1] = 0;
  v321[1] = 0;
  v322 = v323;
  v324 = v325;
  v325[0] = 0;
  v325[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v326);
  memset(v327, 0, 24);
  v326[2] = (void **)v327;
  v328[1] = 0;
  v328[0] = 0;
  v327[3] = v328;
  std::string::operator=(v305, *(const std::string **)(a2 + 528));
  std::string::operator=(&v305[1], (const std::string *)a1);
  std::string::basic_string[abi:ne180100]<0>(&v335, "dialog");
  siri::intelligence::JoinPath(a1, (uint64_t)&v335, (uint64_t)&v334);
  v7 = siri::intelligence::DirExists((uint64_t *)&v334);
  v8 = v7;
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v334.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_3:
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v304 = *(std::string *)a1;
      goto LABEL_25;
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  siri::intelligence::ListDir(a1, 1, 1, (uint64_t)&v334);
  size = v334.__r_.__value_.__l.__size_;
  v10 = v334.__r_.__value_.__r.__words[0];
  if (v334.__r_.__value_.__r.__words[0] == v334.__r_.__value_.__l.__size_)
  {
LABEL_20:
    v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
    std::string::basic_string[abi:ne180100]<0>(&v304, "");
  }
  else
  {
    while (1)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v333, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v10;
        v333.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
        *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v11;
      }
      std::string::basic_string[abi:ne180100]<0>(&v331, "");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      siri::intelligence::JoinPath(a1, (uint64_t)&v333, (uint64_t)&v335, (uint64_t)&v331, (uint64_t)__p, (uint64_t)&v332);
      v12 = siri::intelligence::DirExists((uint64_t *)&v332);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      if (v330 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v331.__r_.__value_.__l.__data_);
      if (v12)
        break;
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      v10 += 24;
      if (v10 == size)
        goto LABEL_20;
    }
    siri::intelligence::JoinPath(a1, (uint64_t)&v333, (uint64_t)&v304);
    if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v333.__r_.__value_.__l.__data_);
    v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v333);
  }
LABEL_25:
  if (SHIBYTE(v335.__end_) < 0)
    operator delete(v335.__first_);
  if (SHIBYTE(v305[2].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v305[2].__r_.__value_.__l.__data_);
  v305[2] = v304;
  v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 1) != 0)
  {
    v14 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v335, "2.0.7");
    v15 = siri::intelligence::Utils::VersionLessThan(v14, *(unsigned __int8 **)(a2 + 528));
    v16 = v15;
    if (SHIBYTE(v335.__end_) < 0)
    {
      operator delete(v335.__first_);
      if (v16)
        goto LABEL_32;
    }
    else if (v15)
    {
LABEL_32:
      siri::intelligence::ValidationResults::Clear(v298);
      std::operator+<char>();
      v17 = std::string::append(&v332, " is newer than validation code ");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v333.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v333.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v333, "2.0.7");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v334.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v334, ". Skipping file.");
      *(_OWORD *)&v335.__first_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v335.__end_ = (std::__split_buffer<std::string>::pointer)v21->__r_.__value_.__r.__words[2];
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v22 = *(_QWORD *)(a2 + 8);
      if ((v22 & 1) != 0)
      {
        v23 = (unsigned __int8 *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v21);
        v23 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v331, "formatVersion");
      LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v23, (uint64_t)&v331, -1);
      siri::intelligence::ValidationResults::AddNote(v298, (__int128 *)siri::intelligence::CODE_FUTURE_VERSION, (__int128 *)&v335, LineNumFromUnknownField);
      if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v331.__r_.__value_.__l.__data_);
      if (SHIBYTE(v335.__end_) < 0)
        operator delete(v335.__first_);
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v334.__r_.__value_.__l.__data_);
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v333.__r_.__value_.__l.__data_);
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      goto LABEL_539;
    }
    v13 = *(_DWORD *)(a2 + 16);
  }
  if ((v13 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v335, "File does not define a formatVersion value");
    siri::intelligence::ValidationResults::AddWarning(v298, (__int128 *)siri::intelligence::CODE_NO_VERSION, (__int128 *)&v335, 1);
    if (SHIBYTE(v335.__end_) < 0)
      operator delete(v335.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v335, "2.0.7");
  siri::intelligence::Updater::UpdateToVersion(a2, (uint64_t)&v335);
  if (SHIBYTE(v335.__end_) < 0)
    operator delete(v335.__first_);
  if (*(int *)(a2 + 56) >= 1)
  {
    v27 = 0;
    do
    {
      v28 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(a2 + 48, v27);
      v29 = v28;
      if ((*(_BYTE *)(v28 + 16) & 1) != 0)
      {
        v30 = *(_QWORD *)(v28 + 8);
        if ((v30 & 1) != 0)
        {
          v31 = (unsigned __int8 *)(v30 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v28);
          v31 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v32 = siri::intelligence::GetLineNumFromUnknownField(v31, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v33 = std::__tree<std::string>::find<std::string>((uint64_t)&v306, *(const void ***)(v29 + 120));
        if (v307 == (_QWORD *)v33)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v29 + 120);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v306, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v32;
        }
        else
        {
          v34 = *(_DWORD *)(v33 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v32);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v34);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v27;
    }
    while (v27 < *(_DWORD *)(a2 + 56));
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    v35 = 0;
    do
    {
      v36 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(a2 + 72, v35);
      v37 = v36;
      if ((*(_BYTE *)(v36 + 16) & 1) != 0)
      {
        v38 = *(_QWORD *)(v36 + 8);
        if ((v38 & 1) != 0)
        {
          v39 = (unsigned __int8 *)(v38 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v36);
          v39 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v40 = siri::intelligence::GetLineNumFromUnknownField(v39, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v41 = std::__tree<std::string>::find<std::string>((uint64_t)&v306, *(const void ***)(v37 + 72));
        if (v307 == (_QWORD *)v41)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v37 + 72);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v306, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v40;
        }
        else
        {
          v42 = *(_DWORD *)(v41 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v40);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v42);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v35;
    }
    while (v35 < *(_DWORD *)(a2 + 80));
  }
  if (*(int *)(a2 + 104) >= 1)
  {
    v43 = 0;
    do
    {
      v44 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(a2 + 96, v43);
      v45 = v44;
      if ((*(_BYTE *)(v44 + 16) & 1) != 0)
      {
        v46 = *(_QWORD *)(v44 + 8);
        if ((v46 & 1) != 0)
        {
          v47 = (unsigned __int8 *)(v46 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v44);
          v47 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v48 = siri::intelligence::GetLineNumFromUnknownField(v47, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v49 = std::__tree<std::string>::find<std::string>((uint64_t)&v306, *(const void ***)(v45 + 48));
        if (v307 == (_QWORD *)v49)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v45 + 48);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v306, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v48;
        }
        else
        {
          v50 = *(_DWORD *)(v49 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v48);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v50);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v43;
    }
    while (v43 < *(_DWORD *)(a2 + 104));
  }
  if (*(int *)(a2 + 416) >= 1)
  {
    v51 = 0;
    do
    {
      v52 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(a2 + 408, v51);
      v53 = v52;
      if ((*(_BYTE *)(v52 + 16) & 1) != 0)
      {
        v54 = *(_QWORD *)(v52 + 8);
        if ((v54 & 1) != 0)
        {
          v55 = (unsigned __int8 *)(v54 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v52);
          v55 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v56 = siri::intelligence::GetLineNumFromUnknownField(v55, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v57 = std::__tree<std::string>::find<std::string>((uint64_t)&v306, *(const void ***)(v53 + 48));
        if (v307 == (_QWORD *)v57)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v53 + 48);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v306, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v56;
        }
        else
        {
          v58 = *(_DWORD *)(v57 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v56);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v58);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v51;
    }
    while (v51 < *(_DWORD *)(a2 + 416));
  }
  if (*(int *)(a2 + 440) >= 1)
  {
    v59 = 0;
    do
    {
      v60 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(a2 + 432, v59);
      v61 = v60;
      if ((*(_BYTE *)(v60 + 16) & 1) != 0)
      {
        v62 = *(_QWORD *)(v60 + 8);
        if ((v62 & 1) != 0)
        {
          v63 = (unsigned __int8 *)(v62 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v60);
          v63 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v64 = siri::intelligence::GetLineNumFromUnknownField(v63, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v65 = std::__tree<std::string>::find<std::string>((uint64_t)&v308, *(const void ***)(v61 + 144));
        if (v309 == (_QWORD *)v65)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v61 + 144);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v308, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v64;
        }
        else
        {
          v66 = *(_DWORD *)(v65 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v64);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v66);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v59;
    }
    while (v59 < *(_DWORD *)(a2 + 440));
  }
  if (*(int *)(a2 + 512) >= 1)
  {
    v67 = 0;
    do
    {
      v68 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(a2 + 504, v67);
      v69 = v68;
      if ((*(_BYTE *)(v68 + 16) & 1) != 0)
      {
        v70 = *(_QWORD *)(v68 + 8);
        if ((v70 & 1) != 0)
        {
          v71 = (unsigned __int8 *)(v70 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v68);
          v71 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v72 = siri::intelligence::GetLineNumFromUnknownField(v71, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v73 = std::__tree<std::string>::find<std::string>((uint64_t)&v312, *(const void ***)(v69 + 120));
        if (v313 == (_QWORD *)v73)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v69 + 120);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v312, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v72;
        }
        else
        {
          v74 = *(_DWORD *)(v73 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v72);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v74);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v67;
    }
    while (v67 < *(_DWORD *)(a2 + 512));
  }
  if (*(int *)(a2 + 272) >= 1)
  {
    v75 = 0;
    do
    {
      v76 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(a2 + 264, v75);
      v77 = v76;
      if ((*(_BYTE *)(v76 + 16) & 1) != 0)
      {
        v78 = *(_QWORD *)(v76 + 8);
        if ((v78 & 1) != 0)
        {
          v79 = (unsigned __int8 *)(v78 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v76);
          v79 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v80 = siri::intelligence::GetLineNumFromUnknownField(v79, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v81 = std::__tree<std::string>::find<std::string>((uint64_t)&v314, *(const void ***)(v77 + 24));
        if (v315 == (_QWORD *)v81)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v77 + 24);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v314, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v80;
        }
        else
        {
          v82 = *(_DWORD *)(v81 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v80);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v82);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v75;
    }
    while (v75 < *(_DWORD *)(a2 + 272));
  }
  if (*(int *)(a2 + 176) >= 1)
  {
    v83 = 0;
    do
    {
      v84 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(a2 + 168, v83);
      v85 = v84;
      if ((*(_BYTE *)(v84 + 16) & 2) != 0)
      {
        v86 = *(_QWORD *)(v84 + 8);
        if ((v86 & 1) != 0)
        {
          v87 = (unsigned __int8 *)(v86 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v84);
          v87 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "id");
        v88 = siri::intelligence::GetLineNumFromUnknownField(v87, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v89 = std::__tree<std::string>::find<std::string>((uint64_t)&v316, *(const void ***)(v85 + 56));
        if (v317 == (_QWORD *)v89)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v85 + 56);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v316, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v88;
        }
        else
        {
          v90 = *(_DWORD *)(v89 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v88);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v90);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v83;
    }
    while (v83 < *(_DWORD *)(a2 + 176));
  }
  if (*(int *)(a2 + 392) >= 1)
  {
    v91 = 0;
    do
    {
      v92 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(a2 + 384, v91);
      v93 = v92;
      if ((*(_BYTE *)(v92 + 16) & 1) != 0)
      {
        v94 = *(_QWORD *)(v92 + 8);
        if ((v94 & 1) != 0)
        {
          v95 = (unsigned __int8 *)(v94 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v92);
          v95 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v335, "name");
        v96 = siri::intelligence::GetLineNumFromUnknownField(v95, (uint64_t)&v335, -1);
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        v97 = std::__tree<std::string>::find<std::string>((uint64_t)&v310, *(const void ***)(v93 + 72));
        if (v311 == (_QWORD *)v97)
        {
          v335.__first_ = *(std::__split_buffer<std::string>::pointer *)(v93 + 72);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v310, (const void **)&v335.__first_->__r_.__value_.__l.__data_, (__int128 **)&v335)+ 14) = v96;
        }
        else
        {
          v98 = *(_DWORD *)(v97 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v96);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v298, (__int128 *)siri::intelligence::CODE_DUPE_ID, (__int128 *)&v335, v98);
          if (SHIBYTE(v335.__end_) < 0)
            operator delete(v335.__first_);
        }
      }
      ++v91;
    }
    while (v91 < *(_DWORD *)(a2 + 392));
  }
  v99 = *(_QWORD *)(a2 + 64);
  if (v99)
    v100 = (uint64_t *)(v99 + 8);
  else
    v100 = 0;
  v101 = *(int *)(a2 + 56);
  if ((_DWORD)v101)
  {
    v102 = &v100[v101];
    while (1)
    {
      v103 = *v100;
      v104 = *(_QWORD *)(*v100 + 88);
      if (v104)
        v105 = (const void ***)(v104 + 8);
      else
        v105 = 0;
      v106 = *(int *)(v103 + 80);
      if ((_DWORD)v106)
      {
        v107 = 8 * v106;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v105, (uint64_t)*v105);
          ++v105;
          v107 -= 8;
        }
        while (v107);
      }
      v108 = *(_QWORD *)(v103 + 216);
      if (*(char *)(v108 + 23) < 0)
        break;
      if (*(_BYTE *)(v108 + 23))
        goto LABEL_210;
LABEL_211:
      v109 = *(_QWORD *)(v103 + 208);
      if ((*(char *)(v109 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v109 + 23))
          goto LABEL_216;
LABEL_215:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v322, (const void **)v109, *(_QWORD *)(v103 + 208));
        goto LABEL_216;
      }
      if (*(_QWORD *)(v109 + 8))
        goto LABEL_215;
LABEL_216:
      v110 = *(_QWORD *)(v103 + 40);
      if (v110)
        v111 = (siri::intelligence **)(v110 + 8);
      else
        v111 = 0;
      v112 = *(int *)(v103 + 32);
      if ((_DWORD)v112)
      {
        v113 = 8 * v112;
        do
        {
          siri::intelligence::CollectVariableReferences(*v111++, 0, (_BOOL8)v305, v26);
          v113 -= 8;
        }
        while (v113);
      }
      v114 = *(_QWORD *)(v103 + 64);
      if (v114)
        v115 = (siri::intelligence **)(v114 + 8);
      else
        v115 = 0;
      v116 = *(int *)(v103 + 56);
      if ((_DWORD)v116)
      {
        v117 = 8 * v116;
        do
        {
          siri::intelligence::CollectVariableReferences(*v115++, 0, (_BOOL8)v305, v26);
          v117 -= 8;
        }
        while (v117);
      }
      v118 = *(_QWORD *)(v103 + 112);
      if (v118)
        v119 = (siri::intelligence **)(v118 + 8);
      else
        v119 = 0;
      v120 = *(int *)(v103 + 104);
      if ((_DWORD)v120)
      {
        v121 = 8 * v120;
        do
        {
          siri::intelligence::CollectVariableReferences(*v119++, 0, (_BOOL8)v305, v26);
          v121 -= 8;
        }
        while (v121);
      }
      if ((*(_BYTE *)(v103 + 16) & 0x80) != 0)
      {
        v122 = *(__int128 **)(v103 + 176);
        if (*((char *)v122 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v335, *(const std::string::value_type **)v122, *((_QWORD *)v122 + 1));
        }
        else
        {
          v123 = *v122;
          v335.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v122 + 2);
          *(_OWORD *)&v335.__first_ = v123;
        }
        v335.__end_cap_.__value_ = 0;
        v335.__end_cap_.__value_ = 0;
        v336 = 0;
        while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v335))
        {
          siri::intelligence::Entity::GetName((siri::intelligence::Entity *)&v335, &v334);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v324, (const void **)&v334.__r_.__value_.__l.__data_, (uint64_t)&v334);
          if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v334.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
      }
      if (++v100 == v102)
        goto LABEL_245;
    }
    if (!*(_QWORD *)(v108 + 8))
      goto LABEL_211;
LABEL_210:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v318, (const void **)v108, *(_QWORD *)(v103 + 216));
    goto LABEL_211;
  }
LABEL_245:
  v124 = *(_QWORD *)(a2 + 88);
  if (v124)
    v125 = (uint64_t *)(v124 + 8);
  else
    v125 = 0;
  v126 = *(int *)(a2 + 80);
  if ((_DWORD)v126)
  {
    v127 = &v125[v126];
    while (1)
    {
      v128 = *v125;
      v129 = *(_QWORD *)(*v125 + 64);
      if (v129)
        v130 = (const void ***)(v129 + 8);
      else
        v130 = 0;
      v131 = *(int *)(v128 + 56);
      if ((_DWORD)v131)
      {
        v132 = 8 * v131;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v130, (uint64_t)*v130);
          ++v130;
          v132 -= 8;
        }
        while (v132);
      }
      v133 = *(_QWORD *)(v128 + 144);
      if (*(char *)(v133 + 23) < 0)
        break;
      if (*(_BYTE *)(v133 + 23))
        goto LABEL_260;
LABEL_261:
      v134 = *(_QWORD *)(v128 + 136);
      if ((*(char *)(v134 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v134 + 23))
          goto LABEL_266;
LABEL_265:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v322, (const void **)v134, *(_QWORD *)(v128 + 136));
        goto LABEL_266;
      }
      if (*(_QWORD *)(v134 + 8))
        goto LABEL_265;
LABEL_266:
      v135 = *(_QWORD *)(v128 + 40);
      if (v135)
        v136 = (siri::intelligence **)(v135 + 8);
      else
        v136 = 0;
      v137 = *(int *)(v128 + 32);
      if ((_DWORD)v137)
      {
        v138 = 8 * v137;
        do
        {
          v139 = *v136;
          v140 = siri::intelligence::BehaviorHandler::AreKeysVariableNames((uint64_t)&v335, *(const void ***)(v128 + 128));
          siri::intelligence::CollectVariableReferences(v139, (const protobuf::Intelligence_KeyValueParameter *)v140, (_BOOL8)v305, v141);
          ++v136;
          v138 -= 8;
        }
        while (v138);
      }
      if (++v125 == v127)
        goto LABEL_273;
    }
    if (!*(_QWORD *)(v133 + 8))
      goto LABEL_261;
LABEL_260:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v318, (const void **)v133, *(_QWORD *)(v128 + 144));
    goto LABEL_261;
  }
LABEL_273:
  v142 = *(_QWORD *)(a2 + 112);
  if (v142)
    v143 = (uint64_t *)(v142 + 8);
  else
    v143 = 0;
  v144 = *(int *)(a2 + 104);
  if ((_DWORD)v144)
  {
    v145 = &v143[v144];
    while (1)
    {
      v146 = *v143;
      v147 = *(_QWORD *)(*v143 + 40);
      if (v147)
        v148 = (const void ***)(v147 + 8);
      else
        v148 = 0;
      v149 = *(int *)(v146 + 32);
      if ((_DWORD)v149)
      {
        v150 = 8 * v149;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v148, (uint64_t)*v148);
          ++v148;
          v150 -= 8;
        }
        while (v150);
      }
      v151 = *(_QWORD *)(v146 + 104);
      if (*(char *)(v151 + 23) < 0)
        break;
      if (*(_BYTE *)(v151 + 23))
        goto LABEL_288;
LABEL_289:
      v152 = *(_QWORD *)(v146 + 128);
      if (*(char *)(v152 + 23) < 0)
      {
        if (!*(_QWORD *)(v152 + 8))
          goto LABEL_294;
LABEL_293:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v318, (const void **)v152, *(_QWORD *)(v146 + 128));
        goto LABEL_294;
      }
      if (*(_BYTE *)(v152 + 23))
        goto LABEL_293;
LABEL_294:
      v153 = *(_QWORD *)(v146 + 120);
      if ((*(char *)(v153 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v153 + 23))
          goto LABEL_299;
LABEL_298:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v322, (const void **)v153, *(_QWORD *)(v146 + 120));
        goto LABEL_299;
      }
      if (*(_QWORD *)(v153 + 8))
        goto LABEL_298;
LABEL_299:
      if (++v143 == v145)
        goto LABEL_300;
    }
    if (!*(_QWORD *)(v151 + 8))
      goto LABEL_289;
LABEL_288:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, (const void **)v151, *(_QWORD *)(v146 + 104));
    goto LABEL_289;
  }
LABEL_300:
  v154 = *(_QWORD *)(a2 + 424);
  if (v154)
    v155 = (uint64_t *)(v154 + 8);
  else
    v155 = 0;
  v156 = *(int *)(a2 + 416);
  if ((_DWORD)v156)
  {
    v157 = &v155[v156];
    while (1)
    {
      v158 = *v155;
      v159 = *(_QWORD *)(*v155 + 40);
      if (v159)
        v160 = (const void ***)(v159 + 8);
      else
        v160 = 0;
      v161 = *(int *)(v158 + 32);
      if ((_DWORD)v161)
      {
        v162 = 8 * v161;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v160, (uint64_t)*v160);
          ++v160;
          v162 -= 8;
        }
        while (v162);
      }
      v163 = *(_QWORD *)(v158 + 112);
      if (*(char *)(v163 + 23) < 0)
        break;
      if (*(_BYTE *)(v163 + 23))
        goto LABEL_315;
LABEL_316:
      v164 = *(_QWORD *)(v158 + 104);
      if ((*(char *)(v164 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v164 + 23))
          goto LABEL_321;
LABEL_320:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v322, (const void **)v164, *(_QWORD *)(v158 + 104));
        goto LABEL_321;
      }
      if (*(_QWORD *)(v164 + 8))
        goto LABEL_320;
LABEL_321:
      if (++v155 == v157)
        goto LABEL_322;
    }
    if (!*(_QWORD *)(v163 + 8))
      goto LABEL_316;
LABEL_315:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v318, (const void **)v163, *(_QWORD *)(v158 + 112));
    goto LABEL_316;
  }
LABEL_322:
  v165 = *(_QWORD *)(a2 + 184);
  if (v165)
    v166 = (uint64_t *)(v165 + 8);
  else
    v166 = 0;
  v167 = *(int *)(a2 + 176);
  if ((_DWORD)v167)
  {
    v168 = &v166[v167];
    while (1)
    {
      v169 = *v166;
      v170 = *(_QWORD *)(*v166 + 40);
      if (v170)
        v171 = (const void ***)(v170 + 8);
      else
        v171 = 0;
      v172 = *(int *)(v169 + 32);
      if ((_DWORD)v172)
      {
        v173 = 8 * v172;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v171, (uint64_t)*v171);
          ++v171;
          v173 -= 8;
        }
        while (v173);
      }
      v174 = *(_QWORD *)(v169 + 80);
      if ((*(char *)(v174 + 23) & 0x80000000) == 0)
        break;
      if (*(_QWORD *)(v174 + 8))
        goto LABEL_337;
LABEL_338:
      if (++v166 == v168)
        goto LABEL_339;
    }
    if (!*(_BYTE *)(v174 + 23))
      goto LABEL_338;
LABEL_337:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v318, (const void **)v174, *(_QWORD *)(v169 + 80));
    goto LABEL_338;
  }
LABEL_339:
  v175 = *(_QWORD *)(a2 + 400);
  if (v175)
    v176 = (uint64_t *)(v175 + 8);
  else
    v176 = 0;
  v177 = *(int *)(a2 + 392);
  if ((_DWORD)v177)
  {
    v178 = 8 * v177;
    do
    {
      v179 = *v176;
      if ((*(_DWORD *)(*v176 + 16) & 0x10) != 0)
      {
        v180 = *(siri::intelligence **)(v179 + 104);
        if (!v180)
        {
          v181 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17713);
          v182 = google::protobuf::internal::LogMessage::operator<<(v181, "CHECK failed: !value || default_value_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v182->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
          v180 = *(siri::intelligence **)(v179 + 104);
        }
        if (v180)
          v183 = v180;
        else
          v183 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
        siri::intelligence::CollectVariableReferences(v183, 0, (_BOOL8)v305, v26);
      }
      ++v176;
      v178 -= 8;
    }
    while (v178);
  }
  v184 = *(_QWORD *)(a2 + 280);
  if (v184)
    v185 = (uint64_t *)(v184 + 8);
  else
    v185 = 0;
  v186 = *(int *)(a2 + 272);
  if ((_DWORD)v186)
  {
    v187 = 8 * v186;
    do
    {
      v188 = *v185;
      if ((*(_DWORD *)(*v185 + 16) & 2) != 0)
      {
        v189 = *(siri::intelligence **)(v188 + 32);
        if (!v189)
        {
          v190 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21745);
          v191 = google::protobuf::internal::LogMessage::operator<<(v190, "CHECK failed: !value || condition_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v191->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
          v189 = *(siri::intelligence **)(v188 + 32);
        }
        if (v189)
          v192 = v189;
        else
          v192 = (siri::intelligence *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        siri::intelligence::CollectVariableReferencesInCondition(v192, (const protobuf::Intelligence_Condition_ConditionEntry *)v305, v25, v26);
      }
      ++v185;
      v187 -= 8;
    }
    while (v187);
  }
  if ((*(_DWORD *)(a2 + 16) & 2) != 0)
  {
    v193 = *(int **)(a2 + 536);
    if (!v193)
    {
      v194 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22067);
      v195 = google::protobuf::internal::LogMessage::operator<<(v194, "CHECK failed: !value || start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v195->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
      v193 = *(int **)(a2 + 536);
    }
    if (!v193)
      v193 = (int *)&protobuf::_Intelligence_Start_default_instance_;
    v196 = *((_QWORD *)v193 + 5);
    if (v196)
      v197 = (const void ***)(v196 + 8);
    else
      v197 = 0;
    v198 = v193[8];
    if ((_DWORD)v198)
    {
      v199 = 8 * v198;
      do
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v197, (uint64_t)*v197);
        ++v197;
        v199 -= 8;
      }
      while (v199);
    }
  }
  v200 = *(_QWORD *)(a2 + 448);
  if (v200)
    v201 = (uint64_t *)(v200 + 8);
  else
    v201 = 0;
  v202 = *(int *)(a2 + 440);
  if ((_DWORD)v202)
  {
    v297 = &v201[v202];
    while (1)
    {
      v203 = *v201;
      v204 = *(_QWORD *)(*v201 + 112);
      if (v204)
        v205 = (siri::intelligence **)(v204 + 8);
      else
        v205 = 0;
      v206 = *(int *)(v203 + 104);
      if ((_DWORD)v206)
      {
        v207 = 8 * v206;
        do
        {
          siri::intelligence::CollectVariableReferences(*v205++, 0, (_BOOL8)v305, v26);
          v207 -= 8;
        }
        while (v207);
      }
      v208 = *(_QWORD *)(v203 + 136);
      v209 = v208 ? v208 + 8 : 0;
      v210 = *(int *)(v203 + 128);
      if ((_DWORD)v210)
        break;
LABEL_417:
      v223 = *(_QWORD *)(v203 + 64);
      if (v223)
        v224 = v223 + 8;
      else
        v224 = 0;
      v225 = *(int *)(v203 + 56);
      if ((_DWORD)v225)
      {
        v226 = v224 + 8 * v225;
        do
        {
          v227 = *(_QWORD *)(*(_QWORD *)v224 + 64);
          if (v227)
            v228 = (const void ***)(v227 + 8);
          else
            v228 = 0;
          v229 = *(int *)(*(_QWORD *)v224 + 56);
          if ((_DWORD)v229)
          {
            v230 = 8 * v229;
            do
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v228, (uint64_t)*v228);
              ++v228;
              v230 -= 8;
            }
            while (v230);
          }
          v224 += 8;
        }
        while (v224 != v226);
      }
      if (++v201 == v297)
        goto LABEL_430;
    }
    v211 = v209 + 8 * v210;
    while (1)
    {
      v212 = *(_QWORD *)v209;
      v213 = *(_QWORD *)(*(_QWORD *)v209 + 40);
      if (v213)
        v214 = (const void ***)(v213 + 8);
      else
        v214 = 0;
      v215 = *(int *)(v212 + 32);
      if ((_DWORD)v215)
      {
        v216 = 8 * v215;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, *v214, (uint64_t)*v214);
          ++v214;
          v216 -= 8;
        }
        while (v216);
      }
      if ((*(_DWORD *)(v212 + 16) & 8) == 0)
        goto LABEL_416;
      v217 = *(_QWORD **)(v212 + 72);
      if (!v217)
      {
        v218 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 15045);
        v219 = google::protobuf::internal::LogMessage::operator<<(v218, "CHECK failed: !value || interjection_settings_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v219->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
        v217 = *(_QWORD **)(v212 + 72);
      }
      v220 = v217 ? v217 : &protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
      v221 = v220[4];
      if (*(char *)(v221 + 23) < 0)
        break;
      if (*(_BYTE *)(v221 + 23))
        goto LABEL_408;
LABEL_409:
      if (!v217)
        v217 = &protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
      v222 = v217[3];
      if ((*(char *)(v222 + 23) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v222 + 23))
          goto LABEL_416;
LABEL_415:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, (const void **)v222, v222);
        goto LABEL_416;
      }
      if (*(_QWORD *)(v222 + 8))
        goto LABEL_415;
LABEL_416:
      v209 += 8;
      if (v209 == v211)
        goto LABEL_417;
    }
    if (!*(_QWORD *)(v221 + 8))
      goto LABEL_409;
LABEL_408:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v320, (const void **)v221, v221);
    v217 = *(_QWORD **)(v212 + 72);
    goto LABEL_409;
  }
LABEL_430:
  v231 = *(_QWORD *)(a2 + 520);
  if (v231)
    v232 = (uint64_t *)(v231 + 8);
  else
    v232 = 0;
  v233 = *(int *)(a2 + 512);
  if ((_DWORD)v233)
  {
    v234 = &v232[v233];
    do
    {
      v235 = *v232;
      v236 = *(_QWORD *)(*v232 + 40);
      if (v236)
        v237 = v236 + 8;
      else
        v237 = 0;
      v238 = *(int *)(v235 + 32);
      if ((_DWORD)v238)
      {
        v239 = v237 + 8 * v238;
        do
        {
          v240 = *(_QWORD *)(*(_QWORD *)v237 + 40);
          if (v240)
            v241 = (siri::intelligence **)(v240 + 8);
          else
            v241 = 0;
          v242 = *(int *)(*(_QWORD *)v237 + 32);
          if ((_DWORD)v242)
          {
            v243 = 8 * v242;
            do
            {
              siri::intelligence::CollectVariableReferences(*v241++, 0, (_BOOL8)v305, v26);
              v243 -= 8;
            }
            while (v243);
          }
          v237 += 8;
        }
        while (v237 != v239);
      }
      if ((*(_DWORD *)(v235 + 16) & 0x20) != 0)
      {
        v244 = *(int **)(v235 + 160);
        if (!v244)
        {
          v245 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18861);
          v246 = google::protobuf::internal::LogMessage::operator<<(v245, "CHECK failed: !value || nl_producer_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v246->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
          v244 = *(int **)(v235 + 160);
        }
        if (!v244)
          v244 = (int *)&protobuf::_Intelligence_NLParameters_default_instance_;
        v247 = *((_QWORD *)v244 + 5);
        if (v247)
          v248 = (siri::intelligence **)(v247 + 8);
        else
          v248 = 0;
        v249 = v244[8];
        if ((_DWORD)v249)
        {
          v250 = 8 * v249;
          do
          {
            siri::intelligence::CollectVariableReferences(*v248++, 0, (_BOOL8)v305, v26);
            v250 -= 8;
          }
          while (v250);
        }
      }
      ++v232;
    }
    while (v232 != v234);
  }
  siri::intelligence::Intelligence::Intelligence((siri::intelligence::Intelligence *)&v334);
  siri::intelligence::Intelligence::GetGlobalVariables((uint64_t *)&v335);
  siri::intelligence::Memory::SetGlobalVariables((uint64_t)v326, &v335);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v335, v335.__begin_->__r_.__value_.__r.__words);
  v251 = (std::__shared_weak_count *)v334.__r_.__value_.__l.__size_;
  if (v334.__r_.__value_.__l.__size_)
  {
    v252 = (unint64_t *)(v334.__r_.__value_.__l.__size_ + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  if (*(int *)(a2 + 392) >= 1)
  {
    v254 = 0;
    do
    {
      v255 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(a2 + 384, v254);
      v256 = v255;
      if ((~*(_DWORD *)(v255 + 16) & 3) == 0)
      {
        v257 = *(_QWORD *)(v255 + 72);
        v258 = *(std::string **)(v255 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v335, "");
        siri::intelligence::Memory::CreateVariable(v326, v257, v258, (uint64_t)&v335, &v302);
        v259 = v303;
        if (v303)
        {
          p_shared_owners = (unint64_t *)&v303->__shared_owners_;
          do
            v261 = __ldaxr(p_shared_owners);
          while (__stlxr(v261 - 1, p_shared_owners));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
        }
        if (SHIBYTE(v335.__end_) < 0)
          operator delete(v335.__first_);
        if ((*(_DWORD *)(v256 + 16) & 0x10) != 0)
        {
          v262 = *(void **)(v256 + 104);
          if (!v262)
          {
            v263 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v335, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17713);
            v264 = google::protobuf::internal::LogMessage::operator<<(v263, "CHECK failed: !value || default_value_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v334, (const char **)&v264->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v335.__first_);
            v262 = *(void **)(v256 + 104);
          }
          if (v262)
            v265 = v262;
          else
            v265 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          siri::intelligence::Variable::FromProtobuf(*(const std::string **)(v256 + 72), (uint64_t)v265, (uint64_t *)&v335);
          v266 = *(_QWORD *)(v256 + 72);
          v301 = *(_OWORD *)&v335.__first_;
          if (v335.__begin_)
          {
            p_size = &v335.__begin_->__r_.__value_.__l.__size_;
            do
              v268 = __ldxr(p_size);
            while (__stxr(v268 + 1, p_size));
          }
          siri::intelligence::Memory::SetVariable((uint64_t)v326, v266, &v301);
          v269 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
          if (*((_QWORD *)&v301 + 1))
          {
            v270 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
            do
              v271 = __ldaxr(v270);
            while (__stlxr(v271 - 1, v270));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
              std::__shared_weak_count::__release_weak(v269);
            }
          }
          begin = (std::__shared_weak_count *)v335.__begin_;
          if (v335.__begin_)
          {
            v273 = &v335.__begin_->__r_.__value_.__l.__size_;
            do
              v274 = __ldaxr(v273);
            while (__stlxr(v274 - 1, v273));
            if (!v274)
            {
              ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
              std::__shared_weak_count::__release_weak(begin);
            }
          }
        }
      }
      ++v254;
    }
    while (v254 < *(_DWORD *)(a2 + 392));
  }
  v335.__first_ = (std::__split_buffer<std::string>::pointer)&siri::intelligence::IE_RECOVER_FROM_DEAD_END;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v312, (const void **)&siri::intelligence::IE_RECOVER_FROM_DEAD_END, (__int128 **)&v335)+ 14) = 0;
  siri::intelligence::ValidateAll((siri::intelligence *)a2, (const protobuf::Intelligence *)v305, v298, v275);
  v276 = *(_QWORD *)(a2 + 40);
  if (v276)
    v277 = (uint64_t *)(v276 + 8);
  else
    v277 = 0;
  v278 = *(int *)(a2 + 32);
  if ((_DWORD)v278)
  {
    v279 = &v277[v278];
    v300 = v279;
    do
    {
      v280 = *v277;
      siri::intelligence::StringToLower(*(_QWORD *)(*v277 + 24), (std::string *)&v335);
      if (SHIBYTE(v335.__end_) < 0)
      {
        if (v335.__begin_ == (std::__split_buffer<std::string>::pointer)12)
        {
          v283 = v335.__first_->__r_.__value_.__r.__words[0] != 0x726565726F6E6769
              || LODWORD(v335.__first_->__r_.__value_.__r.__words[1]) != 1936879474;
          operator delete(v335.__first_);
          if (!v283)
          {
LABEL_515:
            memset(&v334, 0, sizeof(v334));
            v284 = *(unsigned __int8 **)(v280 + 32);
            memset(&v335, 0, 24);
            siri::intelligence::StringSplit(v284, ",", (uint64_t *)&v335, (std::vector<std::string> *)&v333);
            v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v335;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
            v286 = v333.__r_.__value_.__l.__size_;
            for (i = v333.__r_.__value_.__r.__words[0]; i != v286; i += 24)
            {
              if (*(char *)(i + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
              }
              else
              {
                v287 = *(_OWORD *)i;
                v332.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
                *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v287;
              }
              siri::intelligence::StringTrim(" \t\n\r", &v332, &v331);
              v288 = (_OWORD *)v334.__r_.__value_.__l.__size_;
              if (v334.__r_.__value_.__l.__size_ >= v334.__r_.__value_.__r.__words[2])
              {
                v290 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v334.__r_.__value_.__l.__size_ - v334.__r_.__value_.__r.__words[0]) >> 3);
                v291 = v290 + 1;
                if (v290 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556
                   * ((uint64_t)(v334.__r_.__value_.__r.__words[2] - v334.__r_.__value_.__r.__words[0]) >> 3) > v291)
                  v291 = 0x5555555555555556
                       * ((uint64_t)(v334.__r_.__value_.__r.__words[2] - v334.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v334.__r_.__value_.__r.__words[2] - v334.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  v292 = 0xAAAAAAAAAAAAAAALL;
                else
                  v292 = v291;
                v335.__end_cap_.__value_ = (std::allocator<std::string> *)&v334.__r_.__value_.__r.__words[2];
                if (v292)
                  v293 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v334.__r_.__value_.__r.__words[2], v292);
                else
                  v293 = 0;
                v294 = v293 + v290;
                v335.__first_ = v293;
                v335.__begin_ = v294;
                v335.__end_cap_.__value_ = &v293[v292];
                v295 = *(_OWORD *)&v331.__r_.__value_.__l.__data_;
                v294->__r_.__value_.__r.__words[2] = v331.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v294->__r_.__value_.__l.__data_ = v295;
                memset(&v331, 0, sizeof(v331));
                v335.__end_ = v294 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v334, &v335);
                v296 = v334.__r_.__value_.__l.__size_;
                std::__split_buffer<std::string>::~__split_buffer(&v335);
                v334.__r_.__value_.__l.__size_ = v296;
                if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v331.__r_.__value_.__l.__data_);
              }
              else
              {
                v289 = *(_OWORD *)&v331.__r_.__value_.__l.__data_;
                *(_QWORD *)(v334.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v331.__r_.__value_.__l + 2);
                *v288 = v289;
                v334.__r_.__value_.__l.__size_ = (std::string::size_type)v288 + 24;
              }
              if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v332.__r_.__value_.__l.__data_);
            }
            v335.__first_ = &v333;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v335);
            siri::intelligence::ValidationResults::FilterOutCodes((int64x2_t *)v298, (uint64_t *)&v334);
            v279 = v300;
            v335.__first_ = &v334;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v335);
          }
        }
        else
        {
          operator delete(v335.__first_);
        }
      }
      else if (SHIBYTE(v335.__end_) == 12
             && v335.__first_ == (std::__split_buffer<std::string>::pointer)0x726565726F6E6769
             && LODWORD(v335.__begin_) == 1936879474)
      {
        goto LABEL_515;
      }
      ++v277;
    }
    while (v277 != v279);
  }
LABEL_539:
  siri::intelligence::ValidationData::~ValidationData((siri::intelligence::ValidationData *)v305);
}

void sub_22AF8FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  uint64_t v33;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v33 - 144));
  siri::intelligence::ValidationData::~ValidationData((siri::intelligence::ValidationData *)&a33);
  std::__tree<std::string>::destroy(a9, a23[4]);
  a33 = a23;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidateAll(siri::intelligence *this, const protobuf::Intelligence *a2, siri::intelligence::ValidationData *a3, siri::intelligence::ValidationResults *a4)
{
  siri::intelligence *v4;
  _BYTE *v5;
  std::string *v6;
  _BYTE *v7;
  google::protobuf::internal *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int LineNumFromUnknownField;
  int v12;
  const void **v13;
  google::protobuf::internal *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  __int128 *v18;
  __int128 v19;
  google::protobuf::internal *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  google::protobuf::internal *v24;
  std::string *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  google::protobuf::internal *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type size;
  size_t v43;
  google::protobuf::internal *v44;
  std::string *v45;
  std::string *p_p;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  const protobuf::Intelligence *v50;
  size_t v51;
  google::protobuf::internal *v52;
  std::string *v53;
  std::string *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  const void **v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  size_t v65;
  google::protobuf::internal *v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  size_t v72;
  google::protobuf::internal *v73;
  std::string *v74;
  std::string *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  const void **v80;
  size_t v81;
  std::string *v82;
  std::string *v83;
  uint64_t v84;
  int v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  std::string *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  uint64_t v92;
  size_t v93;
  std::string *v94;
  std::string *v95;
  uint64_t v96;
  int v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  std::string *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  size_t v105;
  std::string *v106;
  std::string *v107;
  uint64_t v108;
  int v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  std::string *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  int v115;
  int v116;
  size_t v117;
  google::protobuf::internal *v118;
  std::string *v119;
  std::string *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  int v127;
  size_t v128;
  google::protobuf::internal *v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  size_t v135;
  google::protobuf::internal *v136;
  std::string *v137;
  std::string *v138;
  uint64_t v139;
  unsigned __int8 *v140;
  int v141;
  char **v142;
  uint64_t v143;
  _BOOL4 v144;
  std::string::size_type v145;
  size_t v146;
  std::string *v147;
  std::string *v148;
  uint64_t v149;
  int v150;
  const std::string::value_type *v151;
  std::string::size_type v152;
  std::string *v153;
  uint64_t v154;
  unsigned __int8 *v155;
  int v156;
  char **v157;
  uint64_t v158;
  _BOOL4 v159;
  std::string::size_type v160;
  size_t v161;
  std::string *v162;
  std::string *v163;
  uint64_t v164;
  int v165;
  const std::string::value_type *v166;
  std::string::size_type v167;
  std::string *v168;
  uint64_t v169;
  unsigned __int8 *v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int i;
  uint64_t v179;
  int v180;
  std::string *v181;
  __int128 v182;
  std::string *v183;
  std::string::size_type v184;
  size_t v185;
  google::protobuf::internal *v186;
  std::string *v187;
  std::string *v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  size_t v192;
  google::protobuf::internal *v193;
  std::string *v194;
  std::string *v195;
  uint64_t v196;
  unsigned __int8 *v197;
  int v198;
  const void **v199;
  unsigned __int8 *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  size_t v206;
  google::protobuf::internal *v207;
  std::string *v208;
  std::string *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  int v212;
  size_t v213;
  google::protobuf::internal *v214;
  std::string *v215;
  std::string *v216;
  uint64_t v217;
  unsigned __int8 *v218;
  int v219;
  int v220;
  const void **v221;
  size_t v222;
  std::string *v223;
  std::string *v224;
  uint64_t v225;
  int v226;
  const std::string::value_type *v227;
  std::string::size_type v228;
  std::string *v229;
  uint64_t v230;
  unsigned __int8 *v231;
  int v232;
  uint64_t v233;
  size_t v234;
  std::string *v235;
  std::string *v236;
  uint64_t v237;
  int v238;
  const std::string::value_type *v239;
  std::string::size_type v240;
  std::string *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  int v244;
  uint64_t v245;
  size_t v246;
  std::string *v247;
  std::string *v248;
  uint64_t v249;
  int v250;
  const std::string::value_type *v251;
  std::string::size_type v252;
  std::string *v253;
  uint64_t v254;
  unsigned __int8 *v255;
  int v256;
  int v257;
  size_t v258;
  google::protobuf::internal *v259;
  std::string *v260;
  std::string *v261;
  uint64_t v262;
  unsigned __int8 *v263;
  int v264;
  size_t v265;
  google::protobuf::internal *v266;
  std::string *v267;
  std::string *v268;
  uint64_t v269;
  unsigned __int8 *v270;
  int v271;
  int v272;
  uint64_t v273;
  const protobuf::Intelligence_KeyValueParameter **v274;
  protobuf::Intelligence_KeyValueParameter *v275;
  const protobuf::Intelligence_KeyValueParameter *v276;
  std::string::size_type v277;
  uint64_t v278;
  google::protobuf::internal *v279;
  uint64_t v280;
  unsigned __int8 *v281;
  int v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  int j;
  uint64_t v287;
  int v288;
  std::string *v289;
  __int128 v290;
  std::string *v291;
  std::string::size_type v292;
  size_t v293;
  google::protobuf::internal *v294;
  std::string *v295;
  std::string *v296;
  uint64_t v297;
  unsigned __int8 *v298;
  int v299;
  size_t v300;
  google::protobuf::internal *v301;
  std::string *v302;
  std::string *v303;
  uint64_t v304;
  unsigned __int8 *v305;
  int v306;
  const void **v307;
  unsigned __int8 *v308;
  uint64_t v309;
  unsigned __int8 *v310;
  int v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  size_t v314;
  google::protobuf::internal *v315;
  std::string *v316;
  std::string *v317;
  uint64_t v318;
  unsigned __int8 *v319;
  int v320;
  size_t v321;
  google::protobuf::internal *v322;
  std::string *v323;
  std::string *v324;
  uint64_t v325;
  unsigned __int8 *v326;
  int v327;
  int v328;
  const void **v329;
  size_t v330;
  std::string *v331;
  std::string *v332;
  uint64_t v333;
  int v334;
  const std::string::value_type *v335;
  std::string::size_type v336;
  std::string *v337;
  uint64_t v338;
  unsigned __int8 *v339;
  int v340;
  uint64_t v341;
  size_t v342;
  std::string *v343;
  std::string *v344;
  uint64_t v345;
  int v346;
  const std::string::value_type *v347;
  std::string::size_type v348;
  std::string *v349;
  uint64_t v350;
  unsigned __int8 *v351;
  int v352;
  uint64_t v353;
  size_t v354;
  std::string *v355;
  std::string *v356;
  uint64_t v357;
  int v358;
  const std::string::value_type *v359;
  std::string::size_type v360;
  std::string *v361;
  uint64_t v362;
  unsigned __int8 *v363;
  int v364;
  int v365;
  size_t v366;
  google::protobuf::internal *v367;
  std::string *v368;
  std::string *v369;
  uint64_t v370;
  unsigned __int8 *v371;
  int v372;
  size_t v373;
  google::protobuf::internal *v374;
  std::string *v375;
  std::string *v376;
  uint64_t v377;
  unsigned __int8 *v378;
  int v379;
  int k;
  uint64_t v381;
  int v382;
  std::string *v383;
  __int128 v384;
  std::string *v385;
  std::string::size_type v386;
  size_t v387;
  google::protobuf::internal *v388;
  std::string *v389;
  std::string *v390;
  uint64_t v391;
  unsigned __int8 *v392;
  int v393;
  size_t v394;
  google::protobuf::internal *v395;
  std::string *v396;
  std::string *v397;
  uint64_t v398;
  unsigned __int8 *v399;
  int v400;
  const void **v401;
  unsigned __int8 *v402;
  uint64_t v403;
  unsigned __int8 *v404;
  int v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  size_t v408;
  google::protobuf::internal *v409;
  std::string *v410;
  std::string *v411;
  uint64_t v412;
  unsigned __int8 *v413;
  int v414;
  size_t v415;
  google::protobuf::internal *v416;
  std::string *v417;
  std::string *v418;
  uint64_t v419;
  unsigned __int8 *v420;
  int v421;
  int v422;
  const void **v423;
  size_t v424;
  std::string *v425;
  std::string *v426;
  uint64_t v427;
  int v428;
  const std::string::value_type *v429;
  std::string::size_type v430;
  std::string *v431;
  uint64_t v432;
  unsigned __int8 *v433;
  int v434;
  uint64_t v435;
  size_t v436;
  std::string *v437;
  std::string *v438;
  uint64_t v439;
  int v440;
  const std::string::value_type *v441;
  std::string::size_type v442;
  std::string *v443;
  uint64_t v444;
  unsigned __int8 *v445;
  int v446;
  uint64_t v447;
  size_t v448;
  std::string *v449;
  std::string *v450;
  uint64_t v451;
  int v452;
  const std::string::value_type *v453;
  std::string::size_type v454;
  std::string *v455;
  uint64_t v456;
  unsigned __int8 *v457;
  int v458;
  int v459;
  size_t v460;
  google::protobuf::internal *v461;
  std::string *v462;
  std::string *v463;
  uint64_t v464;
  unsigned __int8 *v465;
  int v466;
  size_t v467;
  google::protobuf::internal *v468;
  std::string *v469;
  std::string *v470;
  uint64_t v471;
  unsigned __int8 *v472;
  int v473;
  int v474;
  char *v475;
  char *v476;
  uint64_t v477;
  int v478;
  std::string *v479;
  __int128 v480;
  std::string *v481;
  std::string::size_type v482;
  size_t v483;
  google::protobuf::internal *v484;
  std::string *v485;
  std::string *v486;
  uint64_t v487;
  unsigned __int8 *v488;
  int v489;
  size_t v490;
  google::protobuf::internal *v491;
  std::string *v492;
  std::string *v493;
  uint64_t v494;
  unsigned __int8 *v495;
  int v496;
  size_t v497;
  google::protobuf::internal *v498;
  std::string *v499;
  std::string *v500;
  uint64_t v501;
  unsigned __int8 *v502;
  int v503;
  google::protobuf::internal *v504;
  std::string *v505;
  uint64_t v506;
  unsigned __int8 *v507;
  int v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  int m;
  uint64_t v514;
  std::string *v515;
  __int128 v516;
  std::string *v517;
  std::string::size_type v518;
  size_t v519;
  google::protobuf::internal *v520;
  std::string *v521;
  std::string *v522;
  uint64_t v523;
  unsigned __int8 *v524;
  int v525;
  uint64_t v526;
  size_t v527;
  std::string *v528;
  std::string *v529;
  uint64_t v530;
  int v531;
  const std::string::value_type *v532;
  std::string::size_type v533;
  std::string *v534;
  uint64_t v535;
  unsigned __int8 *v536;
  int v537;
  size_t v538;
  std::string *v539;
  std::string *v540;
  uint64_t v541;
  int v542;
  const std::string::value_type *v543;
  std::string::size_type v544;
  std::string *v545;
  uint64_t v546;
  unsigned __int8 *v547;
  int v548;
  int v549;
  uint64_t v550;
  __int128 v551;
  size_t v552;
  std::string *p_s1;
  std::string *v554;
  std::string *v555;
  std::string::size_type v556;
  std::string *v557;
  uint64_t v558;
  unsigned __int8 *v559;
  int v560;
  int v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  __int128 v565;
  size_t v566;
  std::string *v567;
  std::string *v568;
  std::string *v569;
  std::string::size_type v570;
  std::string *v571;
  uint64_t v572;
  unsigned __int8 *v573;
  int v574;
  int v575;
  uint64_t v576;
  int v577;
  std::string *v578;
  __int128 v579;
  std::string *v580;
  std::string::size_type v581;
  std::string *v582;
  __int128 v583;
  size_t v584;
  google::protobuf::internal *v585;
  std::string *v586;
  std::string *v587;
  uint64_t v588;
  unsigned __int8 *v589;
  int v590;
  size_t v591;
  google::protobuf::internal *v592;
  std::string *v593;
  std::string *v594;
  uint64_t v595;
  unsigned __int8 *v596;
  int v597;
  int v598;
  size_t v599;
  google::protobuf::internal *v600;
  std::string *v601;
  std::string *v602;
  uint64_t v603;
  unsigned __int8 *v604;
  int v605;
  size_t v606;
  google::protobuf::internal *v607;
  std::string *v608;
  std::string *v609;
  uint64_t v610;
  unsigned __int8 *v611;
  int v612;
  size_t v613;
  google::protobuf::internal *v614;
  std::string *v615;
  std::string *v616;
  uint64_t v617;
  unsigned __int8 *v618;
  int v619;
  std::string *v620;
  size_t v621;
  google::protobuf::internal *v622;
  std::string *v623;
  std::string *v624;
  uint64_t v625;
  unsigned __int8 *v626;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t *v633;
  uint64_t v634;
  uint64_t v635;
  int *v636;
  std::string *v637;
  uint64_t v638;
  uint64_t *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  const std::string **v644;
  uint64_t v645;
  const std::string *v646;
  std::string::size_type v647;
  size_t v648;
  std::string *v649;
  std::string *v650;
  int v651;
  const std::string::value_type *v652;
  std::string::size_type v653;
  std::string *v654;
  __int128 v655;
  std::string *v656;
  uint64_t v657;
  unsigned __int8 *v658;
  int v659;
  size_t v660;
  std::string *v661;
  std::string *v662;
  int v663;
  const std::string::value_type *v664;
  std::string::size_type v665;
  std::string *v666;
  __int128 v667;
  std::string *v668;
  uint64_t v669;
  unsigned __int8 *v670;
  int v671;
  _OWORD *v672;
  __int128 v673;
  std::string::size_type v674;
  int v675;
  size_t v676;
  std::string *v677;
  std::string *v678;
  std::string *v679;
  std::string::size_type v680;
  std::string *v681;
  __int128 v682;
  std::string *v683;
  uint64_t v684;
  unsigned __int8 *v685;
  int v686;
  size_t v687;
  std::string *v688;
  std::string *v689;
  std::string *v690;
  std::string::size_type v691;
  std::string *v692;
  __int128 v693;
  std::string *v694;
  uint64_t v695;
  unsigned __int8 *v696;
  int v697;
  siri::intelligence *v698;
  int v699;
  char *v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  int v704;
  std::string *v705;
  __int128 v706;
  std::string *v707;
  std::string::size_type v708;
  size_t v709;
  google::protobuf::internal *v710;
  std::string *v711;
  std::string *v712;
  uint64_t v713;
  unsigned __int8 *v714;
  int v715;
  size_t v716;
  google::protobuf::internal *v717;
  std::string *v718;
  std::string *v719;
  uint64_t v720;
  unsigned __int8 *v721;
  int v722;
  size_t v723;
  google::protobuf::internal *v724;
  std::string *v725;
  std::string *v726;
  uint64_t v727;
  unsigned __int8 *v728;
  int v729;
  void *v730;
  size_t v731;
  std::string *v732;
  std::string *v733;
  uint64_t v734;
  int v735;
  const std::string::value_type *v736;
  std::string::size_type v737;
  std::string *v738;
  uint64_t v739;
  unsigned __int8 *v740;
  int v741;
  size_t v742;
  google::protobuf::internal *v743;
  std::string *v744;
  std::string *v745;
  uint64_t v746;
  unsigned __int8 *v747;
  int v748;
  int v749;
  _DWORD *v750;
  std::string *v751;
  _DWORD *v752;
  __int128 *v753;
  __int128 v754;
  int v755;
  int v756;
  char *v757;
  char *v758;
  uint64_t v759;
  int v760;
  char v761;
  char IsEquivalentType;
  size_t v763;
  std::string *v764;
  std::string *v765;
  uint64_t v766;
  int v767;
  const std::string::value_type *v768;
  std::string::size_type v769;
  std::string *v770;
  uint64_t v771;
  unsigned __int8 *v772;
  int v773;
  int v774;
  void *v775;
  google::protobuf::internal *v776;
  unint64_t *p_shared_owners;
  unint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unsigned __int8 *v781;
  unsigned __int8 *v782;
  std::__shared_weak_count *v783;
  unint64_t *v784;
  unint64_t v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  const protobuf::Intelligence_KeyValueParameter **v789;
  protobuf::Intelligence_KeyValueParameter *v790;
  const protobuf::Intelligence_KeyValueParameter *v791;
  std::string::size_type v792;
  const void **v793;
  std::__shared_weak_count *v794;
  unint64_t *v795;
  unint64_t v796;
  size_t v797;
  std::string::size_type v798;
  std::string *v799;
  std::string::size_type v800;
  std::string::size_type v801;
  uint64_t v802;
  std::string *v803;
  int v804;
  int v805;
  int v806;
  _BOOL4 v807;
  void *v809;
  std::string::size_type v810;
  std::string::size_type v811;
  std::string *v812;
  uint64_t v813;
  void *v814;
  void *v815;
  int v816;
  std::__shared_weak_count *v817;
  unint64_t *v818;
  unint64_t v819;
  int n;
  uint64_t v821;
  int v822;
  std::string *v823;
  __int128 v824;
  std::string *v825;
  std::string::size_type v826;
  size_t v827;
  google::protobuf::internal *v828;
  std::string *v829;
  std::string *v830;
  uint64_t v831;
  unsigned __int8 *v832;
  int v833;
  size_t v834;
  google::protobuf::internal *v835;
  std::string *v836;
  std::string *v837;
  uint64_t v838;
  unsigned __int8 *v839;
  int v840;
  size_t v841;
  google::protobuf::internal *v842;
  std::string *v843;
  std::string *v844;
  uint64_t v845;
  unsigned __int8 *v846;
  int v847;
  void *v848;
  std::string *v849;
  void *v850;
  int v851;
  uint64_t v852;
  int v853;
  std::string *v854;
  __int128 v855;
  std::string *v856;
  std::string::size_type v857;
  google::protobuf::internal *v858;
  uint64_t v859;
  unsigned __int8 *v860;
  int v861;
  int v862;
  const void **v863;
  google::protobuf::internal *v864;
  uint64_t v865;
  unsigned __int8 *v866;
  int v867;
  int v868;
  uint64_t *v870;
  char *v871;
  uint64_t v872;
  int v873;
  uint64_t v874;
  void *v877;
  std::__shared_weak_count *v878;
  char v879;
  std::string __p;
  _QWORD v881[4];
  _QWORD v882[3];
  void *v883;
  std::__shared_weak_count *v884;
  void *v885[2];
  char v886;
  void *v887[2];
  char v888;
  std::string v889;
  std::string v890;
  std::string __s1;
  std::string v892;
  std::string v893;

  v4 = this;
  if ((*((_DWORD *)this + 4) & 2) != 0)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 67);
    if (!v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22067);
      v6 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v893, (const char **)&v6->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
      v5 = (_BYTE *)*((_QWORD *)v4 + 67);
    }
    if (v5)
      v7 = v5;
    else
      v7 = &protobuf::_Intelligence_Start_default_instance_;
    if (*((int *)v7 + 8) >= 1)
    {
      if ((v7[16] & 1) == 0)
        goto LABEL_16;
      v8 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&__p, "start definition contains both responseIds and an activityId");
      v9 = *((_QWORD *)v7 + 1);
      if ((v9 & 1) != 0)
      {
        v10 = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v8);
        v10 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v893, "");
      LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v10, (uint64_t)&v893, -1);
      siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&__p, LineNumFromUnknownField);
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*((int *)v7 + 8) >= 1)
      {
LABEL_16:
        v12 = 0;
        do
        {
          v13 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(v7 + 24), v12);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v13))
          {
            v14 = (google::protobuf::internal *)std::operator+<char>();
            v15 = *((_QWORD *)v7 + 1);
            if ((v15 & 1) != 0)
            {
              v16 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v14);
              v16 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v893, "responseIds");
            v17 = siri::intelligence::GetLineNumFromUnknownField(v16, (uint64_t)&v893, v12);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&__p, v17);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v12;
        }
        while (v12 < *((_DWORD *)v7 + 8));
      }
    }
    v4 = this;
    if ((v7[16] & 1) != 0)
    {
      v18 = (__int128 *)*((_QWORD *)v7 + 6);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v19 = *v18;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 200) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 192, (const void **)&__p.__r_.__value_.__l.__data_))
      {
        v20 = (google::protobuf::internal *)std::operator+<char>();
        v21 = *((_QWORD *)v7 + 1);
        if ((v21 & 1) != 0)
        {
          v22 = (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v20);
          v22 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "activityId");
        v23 = siri::intelligence::GetLineNumFromUnknownField(v22, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v23);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)v4 + 62) >= 1
    && !siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)a2, (unsigned __int8 *)siri::intelligence::sIntentRenameChange))
  {
    v24 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&v893, "Deprecated 'intents' field found in flow file: use 'events' instead.");
    if (*((int *)v4 + 62) <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
      v25 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
    }
    v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 32) + 8) + 8);
    if ((v26 & 1) != 0)
    {
      v27 = (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v24);
      v27 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v28 = siri::intelligence::GetLineNumFromUnknownField(v27, (uint64_t)&__p, -1);
    siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_DEPRECATED, (__int128 *)&v893, v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v893.__r_.__value_.__l.__data_);
  }
  if (*((int *)v4 + 8) >= 1)
  {
    v29 = 0;
    do
    {
      v30 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>((uint64_t)this + 24, v29);
      if ((*(_BYTE *)(v30 + 16) & 1) == 0)
      {
        v31 = v30;
        v32 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&__p, "Meta element has no name");
        v33 = *(_QWORD *)(v31 + 8);
        if ((v33 & 1) != 0)
        {
          v34 = (unsigned __int8 *)(v33 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v32);
          v34 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v893, "");
        v35 = siri::intelligence::GetLineNumFromUnknownField(v34, (uint64_t)&v893, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_NO_META_NAME, (__int128 *)&__p, v35);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v29;
    }
    while (v29 < *((_DWORD *)this + 8));
  }
  if (*((int *)this + 14) >= 1)
  {
    v36 = 0;
    v870 = (uint64_t *)((char *)a2 + 48);
    do
    {
      v37 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, v36);
      std::string::basic_string[abi:ne180100]<0>(&__p, "dialog response ");
      v38 = *(_DWORD *)(v37 + 16);
      if ((v38 & 1) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v892, "' ");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v893;
        else
          v41 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          size = v893.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v41, size);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v38 = *(_DWORD *)(v37 + 16);
      }
      if ((v38 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v43 = __p.__r_.__value_.__l.__size_;
        v44 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v43 + 21);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v893;
        else
          v45 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v43)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v44 = (google::protobuf::internal *)memmove(v45, p_p, v43);
        }
        strcpy((char *)v45 + v43, "does not define an id");
        v47 = *(_QWORD *)(v37 + 8);
        if ((v47 & 1) != 0)
        {
          v48 = (unsigned __int8 *)(v47 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v44);
          v48 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v49 = siri::intelligence::GetLineNumFromUnknownField(v48, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v49);
        goto LABEL_158;
      }
      if ((siri::intelligence::IsValidId(*(_QWORD *)(v37 + 120)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v51 = __p.__r_.__value_.__l.__size_;
        v52 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v51 + 32);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v893;
        else
          v53 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v51)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &__p;
          else
            v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v52 = (google::protobuf::internal *)memmove(v53, v54, v51);
        }
        strcpy((char *)v53 + v51, "has invalid characters in the ID");
        v55 = *(_QWORD *)(v37 + 8);
        if ((v55 & 1) != 0)
        {
          v56 = (unsigned __int8 *)(v55 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v52);
          v56 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "id");
        v57 = siri::intelligence::GetLineNumFromUnknownField(v56, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v893, v57);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      v58 = *(const void ***)(v37 + 120);
      if (*(_DWORD *)(v37 + 80) == 1)
      {
        v59 = *(unsigned __int8 **)(*(_QWORD *)(v37 + 88) + 8);
        v60 = v59[23];
        v61 = (unsigned __int8 *)v58[1];
        v62 = *((char *)v58 + 23);
        if ((v60 & 0x80u) == 0)
          v63 = (unsigned __int8 *)v59[23];
        else
          v63 = (unsigned __int8 *)*((_QWORD *)v59 + 1);
        if (v62 >= 0)
          v61 = (unsigned __int8 *)*((unsigned __int8 *)v58 + 23);
        if (v63 == v61)
        {
          if (v62 >= 0)
            v64 = *(unsigned __int8 **)(v37 + 120);
          else
            v64 = (unsigned __int8 *)*v58;
          if ((v60 & 0x80) == 0)
          {
            if (v59[23])
            {
              while (*v59 == *v64)
              {
                ++v59;
                ++v64;
                if (!--v60)
                  goto LABEL_125;
              }
              goto LABEL_143;
            }
LABEL_125:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v65 = __p.__r_.__value_.__l.__size_;
            v66 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v65 + 42);
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v67 = &v893;
            else
              v67 = (std::string *)v893.__r_.__value_.__r.__words[0];
            if (v65)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v68 = &__p;
              else
                v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v66 = (google::protobuf::internal *)memmove(v67, v68, v65);
            }
            strcpy((char *)v67 + v65, "has a single next id that refers to itself");
            v69 = *(_QWORD *)(v37 + 8);
            if ((v69 & 1) != 0)
            {
              v70 = (unsigned __int8 *)(v69 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v66);
              v70 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v892, "nextIds");
            v71 = siri::intelligence::GetLineNumFromUnknownField(v70, (uint64_t)&v892, 0);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INFINITE_LOOP, (__int128 *)&v893, v71);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            v58 = *(const void ***)(v37 + 120);
            goto LABEL_143;
          }
          if (!memcmp(*(const void **)v59, v64, *((_QWORD *)v59 + 1)))
            goto LABEL_125;
        }
      }
LABEL_143:
      v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v58);
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != v50)
        goto LABEL_162;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v72 = __p.__r_.__value_.__l.__size_;
      v73 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v72 + 12);
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v893;
      else
        v74 = (std::string *)v893.__r_.__value_.__r.__words[0];
      if (v72)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &__p;
        else
          v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v73 = (google::protobuf::internal *)memmove(v74, v75, v72);
      }
      strcpy((char *)v74 + v72, "is not used.");
      v76 = *(_QWORD *)(v37 + 8);
      if ((v76 & 1) != 0)
      {
        v77 = (unsigned __int8 *)(v76 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v73);
        v77 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v78 = siri::intelligence::GetLineNumFromUnknownField(v77, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&v893, v78);
LABEL_158:
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
LABEL_162:
      if (*(int *)(v37 + 80) >= 1)
      {
        v79 = 0;
        do
        {
          v80 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v37 + 72, v79);
          v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v80);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == v50)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v81 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v81 + 29);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v82 = &v892;
            else
              v82 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v81)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v83 = &__p;
              else
                v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v82, v83, v81);
            }
            strcpy((char *)v82 + v81, "refers to undefined next id: ");
            v84 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v37 + 72, v79);
            v85 = *(char *)(v84 + 23);
            if (v85 >= 0)
              v86 = (const std::string::value_type *)v84;
            else
              v86 = *(const std::string::value_type **)v84;
            if (v85 >= 0)
              v87 = *(unsigned __int8 *)(v84 + 23);
            else
              v87 = *(_QWORD *)(v84 + 8);
            v88 = std::string::append(&v892, v86, v87);
            v893 = *v88;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            v89 = *(_QWORD *)(v37 + 8);
            if ((v89 & 1) != 0)
            {
              v90 = (unsigned __int8 *)(v89 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v88);
              v90 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            v91 = siri::intelligence::GetLineNumFromUnknownField(v90, (uint64_t)&__s1, v79);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v91);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
          ++v79;
        }
        while (v79 < *(_DWORD *)(v37 + 80));
      }
      v92 = *(_QWORD *)(v37 + 216);
      if (*(char *)(v92 + 23) < 0)
      {
        if (!*(_QWORD *)(v92 + 8))
          goto LABEL_223;
      }
      else if (!*(_BYTE *)(v92 + 23))
      {
        goto LABEL_223;
      }
      v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v92);
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == v50)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v93 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v93 + 33);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &v892;
        else
          v94 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v93)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v95 = &__p;
          else
            v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v94, v95, v93);
        }
        strcpy((char *)v94 + v93, "refers to undefined input group: ");
        v96 = *(_QWORD *)(v37 + 216);
        v97 = *(char *)(v96 + 23);
        if (v97 >= 0)
          v98 = *(const std::string::value_type **)(v37 + 216);
        else
          v98 = *(const std::string::value_type **)v96;
        if (v97 >= 0)
          v99 = *(unsigned __int8 *)(v96 + 23);
        else
          v99 = *(_QWORD *)(v96 + 8);
        v100 = std::string::append(&v892, v98, v99);
        v893 = *v100;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        v101 = *(_QWORD *)(v37 + 8);
        if ((v101 & 1) != 0)
        {
          v102 = (unsigned __int8 *)(v101 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v100);
          v102 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        v103 = siri::intelligence::GetLineNumFromUnknownField(v102, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INPUT, (__int128 *)&v893, v103);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_223:
      v104 = *(_QWORD *)(v37 + 208);
      if (*(char *)(v104 + 23) < 0)
      {
        if (!*(_QWORD *)(v104 + 8))
          goto LABEL_253;
      }
      else if (!*(_BYTE *)(v104 + 23))
      {
        goto LABEL_253;
      }
      v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v104);
      if ((const protobuf::Intelligence *)((char *)a2 + 176) == v50)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v105 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v105 + 31);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = &v892;
        else
          v106 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v105)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &__p;
          else
            v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v106, v107, v105);
        }
        strcpy((char *)v106 + v105, "refers to undefined condition: ");
        v108 = *(_QWORD *)(v37 + 208);
        v109 = *(char *)(v108 + 23);
        if (v109 >= 0)
          v110 = *(const std::string::value_type **)(v37 + 208);
        else
          v110 = *(const std::string::value_type **)v108;
        if (v109 >= 0)
          v111 = *(unsigned __int8 *)(v108 + 23);
        else
          v111 = *(_QWORD *)(v108 + 8);
        v112 = std::string::append(&v892, v110, v111);
        v893 = *v112;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        v113 = *(_QWORD *)(v37 + 8);
        if ((v113 & 1) != 0)
        {
          v114 = (unsigned __int8 *)(v113 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v112);
          v114 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
        v115 = siri::intelligence::GetLineNumFromUnknownField(v114, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_CONDITION, (__int128 *)&v893, v115);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_253:
      v116 = *(_DWORD *)(v37 + 16);
      if (*(int *)(v37 + 80) >= 1 && (v116 & 0x1000) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v117 = __p.__r_.__value_.__l.__size_;
        v118 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v117 + 38);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v119 = &v893;
        else
          v119 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v117)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v120 = &__p;
          else
            v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v118 = (google::protobuf::internal *)memmove(v119, v120, v117);
        }
        strcpy((char *)v119 + v117, "contains both nextIds and inputGroupId");
        v121 = *(_QWORD *)(v37 + 8);
        if ((v121 & 1) != 0)
        {
          v122 = (unsigned __int8 *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v118);
          v122 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v123 = siri::intelligence::GetLineNumFromUnknownField(v122, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&v893, v123);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v116 = *(_DWORD *)(v37 + 16);
      }
      if ((v116 & 0x80) != 0)
      {
        v124 = *(_QWORD *)(v37 + 176);
        v125 = *(_QWORD *)(v37 + 8);
        if ((v125 & 1) != 0)
        {
          v126 = (unsigned __int8 *)(v125 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v50);
          v126 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v893, "text");
        v127 = siri::intelligence::GetLineNumFromUnknownField(v126, (uint64_t)&v893, -1);
        siri::intelligence::ValidateVariableReferencesInText((const void **)&__p.__r_.__value_.__l.__data_, v124, (uint64_t)a2, a3, v127);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v116 = *(_DWORD *)(v37 + 16);
      }
      if (*(int *)(v37 + 32) >= 1 && (v116 & 0x200) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v128 = __p.__r_.__value_.__l.__size_;
        v129 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v128 + 36);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = &v893;
        else
          v130 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v128)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v131 = &__p;
          else
            v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v129 = (google::protobuf::internal *)memmove(v130, v131, v128);
        }
        strcpy((char *)v130 + v128, "defines CAT parameters but no CAT ID");
        v132 = *(_QWORD *)(v37 + 8);
        if ((v132 & 1) != 0)
        {
          v133 = (unsigned __int8 *)(v132 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v129);
          v133 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "catParameters");
        v134 = siri::intelligence::GetLineNumFromUnknownField(v133, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_CAT_ID, (__int128 *)&v893, v134);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v116 = *(_DWORD *)(v37 + 16);
      }
      if (*(int *)(v37 + 56) >= 1 && (v116 & 0x400) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v135 = __p.__r_.__value_.__l.__size_;
        v136 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v135 + 44);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &v893;
        else
          v137 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v135)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v138 = &__p;
          else
            v138 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v136 = (google::protobuf::internal *)memmove(v137, v138, v135);
        }
        strcpy((char *)v137 + v135, "defines Pattern parameters but no Pattern ID");
        v139 = *(_QWORD *)(v37 + 8);
        if ((v139 & 1) != 0)
        {
          v140 = (unsigned __int8 *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v136);
          v140 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "patternParameters");
        v141 = siri::intelligence::GetLineNumFromUnknownField(v140, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_PATTERN_ID, (__int128 *)&v893, v141);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v116 = *(_DWORD *)(v37 + 16);
      }
      if ((v116 & 0x200) != 0)
      {
        v142 = *(char ***)(v37 + 192);
        std::string::basic_string[abi:ne180100]<0>(&v893, "#");
        if (siri::intelligence::StringContains(v142, (char *)&v893))
        {
          if (*((char *)a2 + 47) < 0)
            v143 = *((_QWORD *)a2 + 4);
          else
            v143 = *((unsigned __int8 *)a2 + 47);
          v144 = v143 != 0;
        }
        else
        {
          v144 = 0;
        }
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v893.__r_.__value_.__l.__data_);
          if (!v144)
            goto LABEL_363;
        }
        else if (!v144)
        {
          goto LABEL_363;
        }
        if (!siri::intelligence::DirExists(v870))
          goto LABEL_363;
        siri::intelligence::FindPathForCatId((uint64_t)v870, *(unsigned __int8 **)(v37 + 192), &v893);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v145 = v893.__r_.__value_.__l.__size_;
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v893.__r_.__value_.__l.__data_);
          if (v145)
            goto LABEL_363;
        }
        else if (v145)
        {
          goto LABEL_363;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v146 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v146 + 38);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = &v892;
        else
          v147 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v146)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v148 = &__p;
          else
            v148 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v147, v148, v146);
        }
        strcpy((char *)v147 + v146, "defines a CAT ID that does not exist: ");
        v149 = *(_QWORD *)(v37 + 192);
        v150 = *(char *)(v149 + 23);
        if (v150 >= 0)
          v151 = *(const std::string::value_type **)(v37 + 192);
        else
          v151 = *(const std::string::value_type **)v149;
        if (v150 >= 0)
          v152 = *(unsigned __int8 *)(v149 + 23);
        else
          v152 = *(_QWORD *)(v149 + 8);
        v153 = std::string::append(&v892, v151, v152);
        v893 = *v153;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        v154 = *(_QWORD *)(v37 + 8);
        if ((v154 & 1) != 0)
        {
          v155 = (unsigned __int8 *)(v154 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v153);
          v155 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "catId");
        v156 = siri::intelligence::GetLineNumFromUnknownField(v155, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_CAT_ID, (__int128 *)&v893, v156);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_363:
      if ((*(_BYTE *)(v37 + 17) & 4) != 0)
      {
        v157 = *(char ***)(v37 + 200);
        std::string::basic_string[abi:ne180100]<0>(&v893, "#");
        if (siri::intelligence::StringContains(v157, (char *)&v893))
        {
          if (*((char *)a2 + 47) < 0)
            v158 = *((_QWORD *)a2 + 4);
          else
            v158 = *((unsigned __int8 *)a2 + 47);
          v159 = v158 != 0;
        }
        else
        {
          v159 = 0;
        }
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v893.__r_.__value_.__l.__data_);
          if (!v159)
            goto LABEL_407;
        }
        else if (!v159)
        {
          goto LABEL_407;
        }
        if (siri::intelligence::DirExists(v870))
        {
          siri::intelligence::FindFileForPatternId((uint64_t)v870, *(unsigned __int8 **)(v37 + 200), (uint64_t)&v893);
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v160 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
          else
            v160 = v893.__r_.__value_.__l.__size_;
          if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v893.__r_.__value_.__l.__data_);
            if (!v160)
            {
LABEL_382:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v161 = __p.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v892, v161 + 42);
              if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v162 = &v892;
              else
                v162 = (std::string *)v892.__r_.__value_.__r.__words[0];
              if (v161)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v163 = &__p;
                else
                  v163 = (std::string *)__p.__r_.__value_.__r.__words[0];
                memmove(v162, v163, v161);
              }
              strcpy((char *)v162 + v161, "defines a Pattern ID that does not exist: ");
              v164 = *(_QWORD *)(v37 + 200);
              v165 = *(char *)(v164 + 23);
              if (v165 >= 0)
                v166 = *(const std::string::value_type **)(v37 + 200);
              else
                v166 = *(const std::string::value_type **)v164;
              if (v165 >= 0)
                v167 = *(unsigned __int8 *)(v164 + 23);
              else
                v167 = *(_QWORD *)(v164 + 8);
              v168 = std::string::append(&v892, v166, v167);
              v893 = *v168;
              v168->__r_.__value_.__l.__size_ = 0;
              v168->__r_.__value_.__r.__words[2] = 0;
              v168->__r_.__value_.__r.__words[0] = 0;
              v169 = *(_QWORD *)(v37 + 8);
              if ((v169 & 1) != 0)
              {
                v170 = (unsigned __int8 *)(v169 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v168);
                v170 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
              }
              std::string::basic_string[abi:ne180100]<0>(&__s1, "patternId");
              v171 = siri::intelligence::GetLineNumFromUnknownField(v170, (uint64_t)&__s1, -1);
              siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_PATTERN_ID, (__int128 *)&v893, v171);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s1.__r_.__value_.__l.__data_);
              if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v893.__r_.__value_.__l.__data_);
              if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v892.__r_.__value_.__l.__data_);
            }
          }
          else if (!v160)
          {
            goto LABEL_382;
          }
        }
      }
LABEL_407:
      if (*(int *)(v37 + 32) >= 1)
      {
        v172 = 0;
        do
        {
          v173 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 24, v172);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v173, (uint64_t)a2, a3);
          ++v172;
        }
        while (v172 < *(_DWORD *)(v37 + 32));
      }
      if (*(int *)(v37 + 104) >= 1)
      {
        v174 = 0;
        do
        {
          v175 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 96, v174);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v175, (uint64_t)a2, a3);
          ++v174;
        }
        while (v174 < *(_DWORD *)(v37 + 104));
      }
      if (*(int *)(v37 + 56) >= 1)
      {
        v176 = 0;
        do
        {
          v177 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 48, v176);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v177, (uint64_t)a2, a3);
          ++v176;
        }
        while (v176 < *(_DWORD *)(v37 + 56));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v36;
    }
    while (v36 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    for (i = 0; i < *((_DWORD *)this + 20); ++i)
    {
      v179 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, i);
      std::string::basic_string[abi:ne180100]<0>(&__p, "behavior response ");
      v180 = *(_DWORD *)(v179 + 16);
      if ((v180 & 1) != 0)
      {
        std::operator+<char>();
        v181 = std::string::append(&v892, "' ");
        v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v182;
        v181->__r_.__value_.__l.__size_ = 0;
        v181->__r_.__value_.__r.__words[2] = 0;
        v181->__r_.__value_.__r.__words[0] = 0;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v183 = &v893;
        else
          v183 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v184 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v184 = v893.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v183, v184);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v180 = *(_DWORD *)(v179 + 16);
      }
      if ((v180 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v185 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v185 = __p.__r_.__value_.__l.__size_;
        v186 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v185 + 21);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v187 = &v893;
        else
          v187 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v185)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v188 = &__p;
          else
            v188 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v186 = (google::protobuf::internal *)memmove(v187, v188, v185);
        }
        strcpy((char *)v187 + v185, "does not define an id");
        v189 = *(_QWORD *)(v179 + 8);
        if ((v189 & 1) != 0)
        {
          v190 = (unsigned __int8 *)(v189 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v186);
          v190 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v191 = siri::intelligence::GetLineNumFromUnknownField(v190, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v191);
        goto LABEL_528;
      }
      if ((siri::intelligence::IsValidId(*(_QWORD *)(v179 + 72)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v192 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v192 = __p.__r_.__value_.__l.__size_;
        v193 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v192 + 32);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v194 = &v893;
        else
          v194 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v192)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v195 = &__p;
          else
            v195 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v193 = (google::protobuf::internal *)memmove(v194, v195, v192);
        }
        strcpy((char *)v194 + v192, "has invalid characters in the ID");
        v196 = *(_QWORD *)(v179 + 8);
        if ((v196 & 1) != 0)
        {
          v197 = (unsigned __int8 *)(v196 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v193);
          v197 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "id");
        v198 = siri::intelligence::GetLineNumFromUnknownField(v197, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v893, v198);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      v199 = *(const void ***)(v179 + 72);
      if (*(_DWORD *)(v179 + 56) == 1)
      {
        v200 = *(unsigned __int8 **)(*(_QWORD *)(v179 + 64) + 8);
        v201 = v200[23];
        v202 = (unsigned __int8 *)v199[1];
        v203 = *((char *)v199 + 23);
        if ((v201 & 0x80u) == 0)
          v204 = (unsigned __int8 *)v200[23];
        else
          v204 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
        if (v203 >= 0)
          v202 = (unsigned __int8 *)*((unsigned __int8 *)v199 + 23);
        if (v204 == v202)
        {
          if (v203 >= 0)
            v205 = *(unsigned __int8 **)(v179 + 72);
          else
            v205 = (unsigned __int8 *)*v199;
          if ((v201 & 0x80) == 0)
          {
            if (v200[23])
            {
              while (*v200 == *v205)
              {
                ++v200;
                ++v205;
                if (!--v201)
                  goto LABEL_495;
              }
              goto LABEL_513;
            }
LABEL_495:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v206 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v206 = __p.__r_.__value_.__l.__size_;
            v207 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v206 + 42);
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v208 = &v893;
            else
              v208 = (std::string *)v893.__r_.__value_.__r.__words[0];
            if (v206)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v209 = &__p;
              else
                v209 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v207 = (google::protobuf::internal *)memmove(v208, v209, v206);
            }
            strcpy((char *)v208 + v206, "has a single next id that refers to itself");
            v210 = *(_QWORD *)(v179 + 8);
            if ((v210 & 1) != 0)
            {
              v211 = (unsigned __int8 *)(v210 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v207);
              v211 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v892, "nextIds");
            v212 = siri::intelligence::GetLineNumFromUnknownField(v211, (uint64_t)&v892, 0);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INFINITE_LOOP, (__int128 *)&v893, v212);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            v199 = *(const void ***)(v179 + 72);
            goto LABEL_513;
          }
          if (!memcmp(*(const void **)v200, v205, *((_QWORD *)v200 + 1)))
            goto LABEL_495;
        }
      }
LABEL_513:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v199))goto LABEL_532;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v213 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v213 = __p.__r_.__value_.__l.__size_;
      v214 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v213 + 12);
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v215 = &v893;
      else
        v215 = (std::string *)v893.__r_.__value_.__r.__words[0];
      if (v213)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v216 = &__p;
        else
          v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v214 = (google::protobuf::internal *)memmove(v215, v216, v213);
      }
      strcpy((char *)v215 + v213, "is not used.");
      v217 = *(_QWORD *)(v179 + 8);
      if ((v217 & 1) != 0)
      {
        v218 = (unsigned __int8 *)(v217 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v214);
        v218 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v219 = siri::intelligence::GetLineNumFromUnknownField(v218, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&v893, v219);
LABEL_528:
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
LABEL_532:
      if (*(int *)(v179 + 56) >= 1)
      {
        v220 = 0;
        do
        {
          v221 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v179 + 48, v220);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v221))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v222 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v222 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v222 + 29);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v223 = &v892;
            else
              v223 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v222)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v224 = &__p;
              else
                v224 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v223, v224, v222);
            }
            strcpy((char *)v223 + v222, "refers to undefined next id: ");
            v225 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v179 + 48, v220);
            v226 = *(char *)(v225 + 23);
            if (v226 >= 0)
              v227 = (const std::string::value_type *)v225;
            else
              v227 = *(const std::string::value_type **)v225;
            if (v226 >= 0)
              v228 = *(unsigned __int8 *)(v225 + 23);
            else
              v228 = *(_QWORD *)(v225 + 8);
            v229 = std::string::append(&v892, v227, v228);
            v893 = *v229;
            v229->__r_.__value_.__l.__size_ = 0;
            v229->__r_.__value_.__r.__words[2] = 0;
            v229->__r_.__value_.__r.__words[0] = 0;
            v230 = *(_QWORD *)(v179 + 8);
            if ((v230 & 1) != 0)
            {
              v231 = (unsigned __int8 *)(v230 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v229);
              v231 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            v232 = siri::intelligence::GetLineNumFromUnknownField(v231, (uint64_t)&__s1, v220);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v232);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
          ++v220;
        }
        while (v220 < *(_DWORD *)(v179 + 56));
      }
      v233 = *(_QWORD *)(v179 + 144);
      if (*(char *)(v233 + 23) < 0)
      {
        if (!*(_QWORD *)(v233 + 8))
          goto LABEL_593;
      }
      else if (!*(_BYTE *)(v233 + 23))
      {
        goto LABEL_593;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v233))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v234 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v234 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v234 + 33);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v235 = &v892;
        else
          v235 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v234)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v236 = &__p;
          else
            v236 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v235, v236, v234);
        }
        strcpy((char *)v235 + v234, "refers to undefined input group: ");
        v237 = *(_QWORD *)(v179 + 144);
        v238 = *(char *)(v237 + 23);
        if (v238 >= 0)
          v239 = *(const std::string::value_type **)(v179 + 144);
        else
          v239 = *(const std::string::value_type **)v237;
        if (v238 >= 0)
          v240 = *(unsigned __int8 *)(v237 + 23);
        else
          v240 = *(_QWORD *)(v237 + 8);
        v241 = std::string::append(&v892, v239, v240);
        v893 = *v241;
        v241->__r_.__value_.__l.__size_ = 0;
        v241->__r_.__value_.__r.__words[2] = 0;
        v241->__r_.__value_.__r.__words[0] = 0;
        v242 = *(_QWORD *)(v179 + 8);
        if ((v242 & 1) != 0)
        {
          v243 = (unsigned __int8 *)(v242 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v241);
          v243 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        v244 = siri::intelligence::GetLineNumFromUnknownField(v243, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INPUT, (__int128 *)&v893, v244);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_593:
      v245 = *(_QWORD *)(v179 + 136);
      if (*(char *)(v245 + 23) < 0)
      {
        if (*(_QWORD *)(v245 + 8))
        {
LABEL_597:
          if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v245))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v246 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v246 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v246 + 31);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v247 = &v892;
            else
              v247 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v246)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v248 = &__p;
              else
                v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v247, v248, v246);
            }
            strcpy((char *)v247 + v246, "refers to undefined condition: ");
            v249 = *(_QWORD *)(v179 + 136);
            v250 = *(char *)(v249 + 23);
            if (v250 >= 0)
              v251 = *(const std::string::value_type **)(v179 + 136);
            else
              v251 = *(const std::string::value_type **)v249;
            if (v250 >= 0)
              v252 = *(unsigned __int8 *)(v249 + 23);
            else
              v252 = *(_QWORD *)(v249 + 8);
            v253 = std::string::append(&v892, v251, v252);
            v893 = *v253;
            v253->__r_.__value_.__l.__size_ = 0;
            v253->__r_.__value_.__r.__words[2] = 0;
            v253->__r_.__value_.__r.__words[0] = 0;
            v254 = *(_QWORD *)(v179 + 8);
            if ((v254 & 1) != 0)
            {
              v255 = (unsigned __int8 *)(v254 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v253);
              v255 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
            v256 = siri::intelligence::GetLineNumFromUnknownField(v255, (uint64_t)&__s1, -1);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_CONDITION, (__int128 *)&v893, v256);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (*(_BYTE *)(v245 + 23))
      {
        goto LABEL_597;
      }
      v257 = *(_DWORD *)(v179 + 16);
      if (*(int *)(v179 + 56) >= 1 && (v257 & 0x200) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v258 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v258 = __p.__r_.__value_.__l.__size_;
        v259 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v258 + 38);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v260 = &v893;
        else
          v260 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v258)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v261 = &__p;
          else
            v261 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v259 = (google::protobuf::internal *)memmove(v260, v261, v258);
        }
        strcpy((char *)v260 + v258, "contains both nextIds and inputGroupId");
        v262 = *(_QWORD *)(v179 + 8);
        if ((v262 & 1) != 0)
        {
          v263 = (unsigned __int8 *)(v262 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v259);
          v263 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v264 = siri::intelligence::GetLineNumFromUnknownField(v263, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&v893, v264);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v257 = *(_DWORD *)(v179 + 16);
      }
      if ((v257 & 0x80) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v265 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v265 = __p.__r_.__value_.__l.__size_;
        v266 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v265 + 22);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v267 = &v893;
        else
          v267 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v265)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v268 = &__p;
          else
            v268 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v266 = (google::protobuf::internal *)memmove(v267, v268, v265);
        }
        strcpy((char *)v267 + v265, "does not define a name");
        v269 = *(_QWORD *)(v179 + 8);
        if ((v269 & 1) != 0)
        {
          v270 = (unsigned __int8 *)(v269 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v266);
          v270 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v271 = siri::intelligence::GetLineNumFromUnknownField(v270, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v271);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      if (*(int *)(v179 + 32) >= 1)
      {
        v272 = 0;
        do
        {
          v273 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v179 + 24, v272);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v273, (uint64_t)a2, a3);
          ++v272;
        }
        while (v272 < *(_DWORD *)(v179 + 32));
      }
      memset(&v893, 0, sizeof(v893));
      memset(&v892, 0, sizeof(v892));
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&v892, v179 + 24);
      if (LODWORD(v892.__r_.__value_.__r.__words[1]))
      {
        if (v892.__r_.__value_.__r.__words[2])
          v274 = (const protobuf::Intelligence_KeyValueParameter **)(v892.__r_.__value_.__r.__words[2] + 8);
        else
          v274 = 0;
        v275 = (protobuf::Intelligence_KeyValueParameter *)v893.__r_.__value_.__l.__size_;
        do
        {
          v276 = *v274;
          if ((unint64_t)v275 >= v893.__r_.__value_.__r.__words[2])
          {
            v275 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&v893, v276);
          }
          else
          {
            protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v275, v276);
            v275 = (protobuf::Intelligence_KeyValueParameter *)((char *)v275 + 192);
          }
          v893.__r_.__value_.__l.__size_ = (std::string::size_type)v275;
          ++v274;
          if (v892.__r_.__value_.__r.__words[2])
            v277 = v892.__r_.__value_.__r.__words[2] + 8;
          else
            v277 = 0;
        }
        while (v274 != (const protobuf::Intelligence_KeyValueParameter **)(v277
                                                                          + 8
                                                                          * SLODWORD(v892.__r_.__value_.__r.__words[1])));
      }
      google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v892);
      v278 = *(_QWORD *)(v179 + 128);
      v279 = (google::protobuf::internal *)std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&v893, &__s1);
      v280 = *(_QWORD *)(v179 + 8);
      if ((v280 & 1) != 0)
      {
        v281 = (unsigned __int8 *)(v280 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v279);
        v281 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v282 = siri::intelligence::GetLineNumFromUnknownField(v281, (uint64_t)&v892, -1);
      siri::intelligence::BehaviorHandler::Validate((uint64_t)&v889, (const void **)&__p.__r_.__value_.__l.__data_, a3, v278, (uint64_t *)&__s1, (uint64_t)a2, v282);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      v283 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        v284 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
      }
      v892.__r_.__value_.__r.__words[0] = (std::string::size_type)&v893;
      std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v892);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)this + 26) >= 1)
  {
    for (j = 0; j < *((_DWORD *)this + 26); ++j)
    {
      v287 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((uint64_t)this + 96, j);
      std::string::basic_string[abi:ne180100]<0>(&__p, "reference response ");
      v288 = *(_DWORD *)(v287 + 16);
      if ((v288 & 1) != 0)
      {
        std::operator+<char>();
        v289 = std::string::append(&v892, "' ");
        v290 = *(_OWORD *)&v289->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v289->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v290;
        v289->__r_.__value_.__l.__size_ = 0;
        v289->__r_.__value_.__r.__words[2] = 0;
        v289->__r_.__value_.__r.__words[0] = 0;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v291 = &v893;
        else
          v291 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v292 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v292 = v893.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v291, v292);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v288 = *(_DWORD *)(v287 + 16);
      }
      if ((v288 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v293 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v293 = __p.__r_.__value_.__l.__size_;
        v294 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v293 + 21);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v295 = &v893;
        else
          v295 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v293)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v296 = &__p;
          else
            v296 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v294 = (google::protobuf::internal *)memmove(v295, v296, v293);
        }
        strcpy((char *)v295 + v293, "does not define an id");
        v297 = *(_QWORD *)(v287 + 8);
        if ((v297 & 1) != 0)
        {
          v298 = (unsigned __int8 *)(v297 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v294);
          v298 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v299 = siri::intelligence::GetLineNumFromUnknownField(v298, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v299);
        goto LABEL_794;
      }
      if ((siri::intelligence::IsValidId(*(_QWORD *)(v287 + 48)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v300 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v300 = __p.__r_.__value_.__l.__size_;
        v301 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v300 + 32);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v302 = &v893;
        else
          v302 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v300)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v303 = &__p;
          else
            v303 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v301 = (google::protobuf::internal *)memmove(v302, v303, v300);
        }
        strcpy((char *)v302 + v300, "has invalid characters in the ID");
        v304 = *(_QWORD *)(v287 + 8);
        if ((v304 & 1) != 0)
        {
          v305 = (unsigned __int8 *)(v304 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v301);
          v305 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "id");
        v306 = siri::intelligence::GetLineNumFromUnknownField(v305, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v893, v306);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      v307 = *(const void ***)(v287 + 48);
      if (*(_DWORD *)(v287 + 32) == 1)
      {
        v308 = *(unsigned __int8 **)(*(_QWORD *)(v287 + 40) + 8);
        v309 = v308[23];
        v310 = (unsigned __int8 *)v307[1];
        v311 = *((char *)v307 + 23);
        if ((v309 & 0x80u) == 0)
          v312 = (unsigned __int8 *)v308[23];
        else
          v312 = (unsigned __int8 *)*((_QWORD *)v308 + 1);
        if (v311 >= 0)
          v310 = (unsigned __int8 *)*((unsigned __int8 *)v307 + 23);
        if (v312 == v310)
        {
          if (v311 >= 0)
            v313 = *(unsigned __int8 **)(v287 + 48);
          else
            v313 = (unsigned __int8 *)*v307;
          if ((v309 & 0x80) == 0)
          {
            if (v308[23])
            {
              while (*v308 == *v313)
              {
                ++v308;
                ++v313;
                if (!--v309)
                  goto LABEL_761;
              }
              goto LABEL_779;
            }
LABEL_761:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v314 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v314 = __p.__r_.__value_.__l.__size_;
            v315 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v314 + 42);
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v316 = &v893;
            else
              v316 = (std::string *)v893.__r_.__value_.__r.__words[0];
            if (v314)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v317 = &__p;
              else
                v317 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v315 = (google::protobuf::internal *)memmove(v316, v317, v314);
            }
            strcpy((char *)v316 + v314, "has a single next id that refers to itself");
            v318 = *(_QWORD *)(v287 + 8);
            if ((v318 & 1) != 0)
            {
              v319 = (unsigned __int8 *)(v318 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v315);
              v319 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v892, "nextIds");
            v320 = siri::intelligence::GetLineNumFromUnknownField(v319, (uint64_t)&v892, 0);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INFINITE_LOOP, (__int128 *)&v893, v320);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            v307 = *(const void ***)(v287 + 48);
            goto LABEL_779;
          }
          if (!memcmp(*(const void **)v308, v313, *((_QWORD *)v308 + 1)))
            goto LABEL_761;
        }
      }
LABEL_779:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v307))goto LABEL_798;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v321 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v321 = __p.__r_.__value_.__l.__size_;
      v322 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v321 + 12);
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v323 = &v893;
      else
        v323 = (std::string *)v893.__r_.__value_.__r.__words[0];
      if (v321)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v324 = &__p;
        else
          v324 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v322 = (google::protobuf::internal *)memmove(v323, v324, v321);
      }
      strcpy((char *)v323 + v321, "is not used.");
      v325 = *(_QWORD *)(v287 + 8);
      if ((v325 & 1) != 0)
      {
        v326 = (unsigned __int8 *)(v325 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v322);
        v326 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v327 = siri::intelligence::GetLineNumFromUnknownField(v326, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&v893, v327);
LABEL_794:
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
LABEL_798:
      if (*(int *)(v287 + 32) >= 1)
      {
        v328 = 0;
        do
        {
          v329 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v287 + 24, v328);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v329))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v330 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v330 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v330 + 29);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v331 = &v892;
            else
              v331 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v330)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v332 = &__p;
              else
                v332 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v331, v332, v330);
            }
            strcpy((char *)v331 + v330, "refers to undefined next id: ");
            v333 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v287 + 24, v328);
            v334 = *(char *)(v333 + 23);
            if (v334 >= 0)
              v335 = (const std::string::value_type *)v333;
            else
              v335 = *(const std::string::value_type **)v333;
            if (v334 >= 0)
              v336 = *(unsigned __int8 *)(v333 + 23);
            else
              v336 = *(_QWORD *)(v333 + 8);
            v337 = std::string::append(&v892, v335, v336);
            v893 = *v337;
            v337->__r_.__value_.__l.__size_ = 0;
            v337->__r_.__value_.__r.__words[2] = 0;
            v337->__r_.__value_.__r.__words[0] = 0;
            v338 = *(_QWORD *)(v287 + 8);
            if ((v338 & 1) != 0)
            {
              v339 = (unsigned __int8 *)(v338 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v337);
              v339 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            v340 = siri::intelligence::GetLineNumFromUnknownField(v339, (uint64_t)&__s1, v328);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v340);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
          ++v328;
        }
        while (v328 < *(_DWORD *)(v287 + 32));
      }
      v341 = *(_QWORD *)(v287 + 128);
      if (*(char *)(v341 + 23) < 0)
      {
        if (!*(_QWORD *)(v341 + 8))
          goto LABEL_859;
      }
      else if (!*(_BYTE *)(v341 + 23))
      {
        goto LABEL_859;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v341))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v342 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v342 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v342 + 33);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v343 = &v892;
        else
          v343 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v342)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v344 = &__p;
          else
            v344 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v343, v344, v342);
        }
        strcpy((char *)v343 + v342, "refers to undefined input group: ");
        v345 = *(_QWORD *)(v287 + 128);
        v346 = *(char *)(v345 + 23);
        if (v346 >= 0)
          v347 = *(const std::string::value_type **)(v287 + 128);
        else
          v347 = *(const std::string::value_type **)v345;
        if (v346 >= 0)
          v348 = *(unsigned __int8 *)(v345 + 23);
        else
          v348 = *(_QWORD *)(v345 + 8);
        v349 = std::string::append(&v892, v347, v348);
        v893 = *v349;
        v349->__r_.__value_.__l.__size_ = 0;
        v349->__r_.__value_.__r.__words[2] = 0;
        v349->__r_.__value_.__r.__words[0] = 0;
        v350 = *(_QWORD *)(v287 + 8);
        if ((v350 & 1) != 0)
        {
          v351 = (unsigned __int8 *)(v350 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v349);
          v351 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        v352 = siri::intelligence::GetLineNumFromUnknownField(v351, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INPUT, (__int128 *)&v893, v352);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_859:
      v353 = *(_QWORD *)(v287 + 120);
      if (*(char *)(v353 + 23) < 0)
      {
        if (*(_QWORD *)(v353 + 8))
        {
LABEL_863:
          if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v353))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v354 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v354 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v354 + 31);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v355 = &v892;
            else
              v355 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v354)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v356 = &__p;
              else
                v356 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v355, v356, v354);
            }
            strcpy((char *)v355 + v354, "refers to undefined condition: ");
            v357 = *(_QWORD *)(v287 + 120);
            v358 = *(char *)(v357 + 23);
            if (v358 >= 0)
              v359 = *(const std::string::value_type **)(v287 + 120);
            else
              v359 = *(const std::string::value_type **)v357;
            if (v358 >= 0)
              v360 = *(unsigned __int8 *)(v357 + 23);
            else
              v360 = *(_QWORD *)(v357 + 8);
            v361 = std::string::append(&v892, v359, v360);
            v893 = *v361;
            v361->__r_.__value_.__l.__size_ = 0;
            v361->__r_.__value_.__r.__words[2] = 0;
            v361->__r_.__value_.__r.__words[0] = 0;
            v362 = *(_QWORD *)(v287 + 8);
            if ((v362 & 1) != 0)
            {
              v363 = (unsigned __int8 *)(v362 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v361);
              v363 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
            v364 = siri::intelligence::GetLineNumFromUnknownField(v363, (uint64_t)&__s1, -1);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_CONDITION, (__int128 *)&v893, v364);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (*(_BYTE *)(v353 + 23))
      {
        goto LABEL_863;
      }
      v365 = *(_DWORD *)(v287 + 16);
      if (*(int *)(v287 + 32) >= 1 && (v365 & 0x400) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v366 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v366 = __p.__r_.__value_.__l.__size_;
        v367 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v366 + 38);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v368 = &v893;
        else
          v368 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v366)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v369 = &__p;
          else
            v369 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v367 = (google::protobuf::internal *)memmove(v368, v369, v366);
        }
        strcpy((char *)v368 + v366, "contains both nextIds and inputGroupId");
        v370 = *(_QWORD *)(v287 + 8);
        if ((v370 & 1) != 0)
        {
          v371 = (unsigned __int8 *)(v370 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v367);
          v371 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v372 = siri::intelligence::GetLineNumFromUnknownField(v371, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&v893, v372);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v365 = *(_DWORD *)(v287 + 16);
      }
      if ((v365 & 0x80) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v373 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v373 = __p.__r_.__value_.__l.__size_;
        v374 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v373 + 23);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v375 = &v893;
        else
          v375 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v373)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v376 = &__p;
          else
            v376 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v374 = (google::protobuf::internal *)memmove(v375, v376, v373);
        }
        strcpy((char *)v375 + v373, "does not define a refId");
        v377 = *(_QWORD *)(v287 + 8);
        if ((v377 & 1) != 0)
        {
          v378 = (unsigned __int8 *)(v377 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v374);
          v378 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v379 = siri::intelligence::GetLineNumFromUnknownField(v378, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v379);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)this + 104) >= 1)
  {
    for (k = 0; k < *((_DWORD *)this + 104); ++k)
    {
      v381 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408, k);
      std::string::basic_string[abi:ne180100]<0>(&__p, "response group ");
      v382 = *(_DWORD *)(v381 + 16);
      if ((v382 & 1) != 0)
      {
        std::operator+<char>();
        v383 = std::string::append(&v892, "' ");
        v384 = *(_OWORD *)&v383->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v383->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v384;
        v383->__r_.__value_.__l.__size_ = 0;
        v383->__r_.__value_.__r.__words[2] = 0;
        v383->__r_.__value_.__r.__words[0] = 0;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v385 = &v893;
        else
          v385 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v386 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v386 = v893.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v385, v386);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v382 = *(_DWORD *)(v381 + 16);
      }
      if ((v382 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v387 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v387 = __p.__r_.__value_.__l.__size_;
        v388 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v387 + 21);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v389 = &v893;
        else
          v389 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v387)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v390 = &__p;
          else
            v390 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v388 = (google::protobuf::internal *)memmove(v389, v390, v387);
        }
        strcpy((char *)v389 + v387, "does not define an id");
        v391 = *(_QWORD *)(v381 + 8);
        if ((v391 & 1) != 0)
        {
          v392 = (unsigned __int8 *)(v391 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v388);
          v392 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v393 = siri::intelligence::GetLineNumFromUnknownField(v392, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&v893, v393);
        goto LABEL_1035;
      }
      if ((siri::intelligence::IsValidId(*(_QWORD *)(v381 + 48)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v394 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v394 = __p.__r_.__value_.__l.__size_;
        v395 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v394 + 32);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v396 = &v893;
        else
          v396 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v394)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v397 = &__p;
          else
            v397 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v395 = (google::protobuf::internal *)memmove(v396, v397, v394);
        }
        strcpy((char *)v396 + v394, "has invalid characters in the ID");
        v398 = *(_QWORD *)(v381 + 8);
        if ((v398 & 1) != 0)
        {
          v399 = (unsigned __int8 *)(v398 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v395);
          v399 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "id");
        v400 = siri::intelligence::GetLineNumFromUnknownField(v399, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v893, v400);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      v401 = *(const void ***)(v381 + 48);
      if (*(_DWORD *)(v381 + 32) == 1)
      {
        v402 = *(unsigned __int8 **)(*(_QWORD *)(v381 + 40) + 8);
        v403 = v402[23];
        v404 = (unsigned __int8 *)v401[1];
        v405 = *((char *)v401 + 23);
        if ((v403 & 0x80u) == 0)
          v406 = (unsigned __int8 *)v402[23];
        else
          v406 = (unsigned __int8 *)*((_QWORD *)v402 + 1);
        if (v405 >= 0)
          v404 = (unsigned __int8 *)*((unsigned __int8 *)v401 + 23);
        if (v406 == v404)
        {
          if (v405 >= 0)
            v407 = *(unsigned __int8 **)(v381 + 48);
          else
            v407 = (unsigned __int8 *)*v401;
          if ((v403 & 0x80) == 0)
          {
            if (v402[23])
            {
              while (*v402 == *v407)
              {
                ++v402;
                ++v407;
                if (!--v403)
                  goto LABEL_1002;
              }
              goto LABEL_1020;
            }
LABEL_1002:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v408 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v408 = __p.__r_.__value_.__l.__size_;
            v409 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v408 + 42);
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v410 = &v893;
            else
              v410 = (std::string *)v893.__r_.__value_.__r.__words[0];
            if (v408)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v411 = &__p;
              else
                v411 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v409 = (google::protobuf::internal *)memmove(v410, v411, v408);
            }
            strcpy((char *)v410 + v408, "has a single next id that refers to itself");
            v412 = *(_QWORD *)(v381 + 8);
            if ((v412 & 1) != 0)
            {
              v413 = (unsigned __int8 *)(v412 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v409);
              v413 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v892, "nextIds");
            v414 = siri::intelligence::GetLineNumFromUnknownField(v413, (uint64_t)&v892, 0);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INFINITE_LOOP, (__int128 *)&v893, v414);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            v401 = *(const void ***)(v381 + 48);
            goto LABEL_1020;
          }
          if (!memcmp(*(const void **)v402, v407, *((_QWORD *)v402 + 1)))
            goto LABEL_1002;
        }
      }
LABEL_1020:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v401))goto LABEL_1039;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v415 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v415 = __p.__r_.__value_.__l.__size_;
      v416 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v415 + 12);
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v417 = &v893;
      else
        v417 = (std::string *)v893.__r_.__value_.__r.__words[0];
      if (v415)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v418 = &__p;
        else
          v418 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v416 = (google::protobuf::internal *)memmove(v417, v418, v415);
      }
      strcpy((char *)v417 + v415, "is not used.");
      v419 = *(_QWORD *)(v381 + 8);
      if ((v419 & 1) != 0)
      {
        v420 = (unsigned __int8 *)(v419 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v416);
        v420 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v421 = siri::intelligence::GetLineNumFromUnknownField(v420, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&v893, v421);
LABEL_1035:
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
LABEL_1039:
      if (*(int *)(v381 + 32) >= 1)
      {
        v422 = 0;
        do
        {
          v423 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v381 + 24, v422);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v423))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v424 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v424 = __p.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v892, v424 + 29);
            if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v425 = &v892;
            else
              v425 = (std::string *)v892.__r_.__value_.__r.__words[0];
            if (v424)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v426 = &__p;
              else
                v426 = (std::string *)__p.__r_.__value_.__r.__words[0];
              memmove(v425, v426, v424);
            }
            strcpy((char *)v425 + v424, "refers to undefined next id: ");
            v427 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v381 + 24, v422);
            v428 = *(char *)(v427 + 23);
            if (v428 >= 0)
              v429 = (const std::string::value_type *)v427;
            else
              v429 = *(const std::string::value_type **)v427;
            if (v428 >= 0)
              v430 = *(unsigned __int8 *)(v427 + 23);
            else
              v430 = *(_QWORD *)(v427 + 8);
            v431 = std::string::append(&v892, v429, v430);
            v893 = *v431;
            v431->__r_.__value_.__l.__size_ = 0;
            v431->__r_.__value_.__r.__words[2] = 0;
            v431->__r_.__value_.__r.__words[0] = 0;
            v432 = *(_QWORD *)(v381 + 8);
            if ((v432 & 1) != 0)
            {
              v433 = (unsigned __int8 *)(v432 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v431);
              v433 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            v434 = siri::intelligence::GetLineNumFromUnknownField(v433, (uint64_t)&__s1, v422);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v434);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
          }
          ++v422;
        }
        while (v422 < *(_DWORD *)(v381 + 32));
      }
      v435 = *(_QWORD *)(v381 + 112);
      if (*(char *)(v435 + 23) < 0)
      {
        if (!*(_QWORD *)(v435 + 8))
          goto LABEL_1100;
      }
      else if (!*(_BYTE *)(v435 + 23))
      {
        goto LABEL_1100;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v435))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v436 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v436 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v436 + 33);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v437 = &v892;
        else
          v437 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v436)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v438 = &__p;
          else
            v438 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v437, v438, v436);
        }
        strcpy((char *)v437 + v436, "refers to undefined input group: ");
        v439 = *(_QWORD *)(v381 + 112);
        v440 = *(char *)(v439 + 23);
        if (v440 >= 0)
          v441 = *(const std::string::value_type **)(v381 + 112);
        else
          v441 = *(const std::string::value_type **)v439;
        if (v440 >= 0)
          v442 = *(unsigned __int8 *)(v439 + 23);
        else
          v442 = *(_QWORD *)(v439 + 8);
        v443 = std::string::append(&v892, v441, v442);
        v893 = *v443;
        v443->__r_.__value_.__l.__size_ = 0;
        v443->__r_.__value_.__r.__words[2] = 0;
        v443->__r_.__value_.__r.__words[0] = 0;
        v444 = *(_QWORD *)(v381 + 8);
        if ((v444 & 1) != 0)
        {
          v445 = (unsigned __int8 *)(v444 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v443);
          v445 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        v446 = siri::intelligence::GetLineNumFromUnknownField(v445, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INPUT, (__int128 *)&v893, v446);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_1100:
      v447 = *(_QWORD *)(v381 + 104);
      if (*(char *)(v447 + 23) < 0)
      {
        if (!*(_QWORD *)(v447 + 8))
          goto LABEL_1130;
      }
      else if (!*(_BYTE *)(v447 + 23))
      {
        goto LABEL_1130;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v447))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v448 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v448 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v892, v448 + 31);
        if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v449 = &v892;
        else
          v449 = (std::string *)v892.__r_.__value_.__r.__words[0];
        if (v448)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v450 = &__p;
          else
            v450 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v449, v450, v448);
        }
        strcpy((char *)v449 + v448, "refers to undefined condition: ");
        v451 = *(_QWORD *)(v381 + 104);
        v452 = *(char *)(v451 + 23);
        if (v452 >= 0)
          v453 = *(const std::string::value_type **)(v381 + 104);
        else
          v453 = *(const std::string::value_type **)v451;
        if (v452 >= 0)
          v454 = *(unsigned __int8 *)(v451 + 23);
        else
          v454 = *(_QWORD *)(v451 + 8);
        v455 = std::string::append(&v892, v453, v454);
        v893 = *v455;
        v455->__r_.__value_.__l.__size_ = 0;
        v455->__r_.__value_.__r.__words[2] = 0;
        v455->__r_.__value_.__r.__words[0] = 0;
        v456 = *(_QWORD *)(v381 + 8);
        if ((v456 & 1) != 0)
        {
          v457 = (unsigned __int8 *)(v456 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v455);
          v457 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
        v458 = siri::intelligence::GetLineNumFromUnknownField(v457, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_CONDITION, (__int128 *)&v893, v458);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
      }
LABEL_1130:
      v459 = *(_DWORD *)(v381 + 32);
      if (v459 < 1)
        goto LABEL_1150;
      if ((*(_BYTE *)(v381 + 17) & 1) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v460 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v460 = __p.__r_.__value_.__l.__size_;
        v461 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v460 + 38);
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v462 = &v893;
        else
          v462 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if (v460)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v463 = &__p;
          else
            v463 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v461 = (google::protobuf::internal *)memmove(v462, v463, v460);
        }
        strcpy((char *)v462 + v460, "contains both nextIds and inputGroupId");
        v464 = *(_QWORD *)(v381 + 8);
        if ((v464 & 1) != 0)
        {
          v465 = (unsigned __int8 *)(v464 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v461);
          v465 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v466 = siri::intelligence::GetLineNumFromUnknownField(v465, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&v893, v466);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v459 = *(_DWORD *)(v381 + 32);
LABEL_1150:
        if (!v459 && (*(_BYTE *)(v381 + 17) & 1) == 0)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v467 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v467 = __p.__r_.__value_.__l.__size_;
          v468 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v467 + 51);
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v469 = &v893;
          else
            v469 = (std::string *)v893.__r_.__value_.__r.__words[0];
          if (v467)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v470 = &__p;
            else
              v470 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v468 = (google::protobuf::internal *)memmove(v469, v470, v467);
          }
          strcpy((char *)v469 + v467, "has not effect: no nextIds and inputGroupId defined");
          v471 = *(_QWORD *)(v381 + 8);
          if ((v471 & 1) != 0)
          {
            v472 = (unsigned __int8 *)(v471 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults(v468);
            v472 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&v892, "");
          v473 = siri::intelligence::GetLineNumFromUnknownField(v472, (uint64_t)&v892, -1);
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_EFFECT, (__int128 *)&v893, v473);
          if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v892.__r_.__value_.__l.__data_);
          if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v893.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)this + 110) >= 1)
  {
    v474 = 0;
    v475 = (char *)a2 + 72;
    v476 = (char *)a2 + 80;
    while (1)
    {
      v868 = v474;
      v477 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 432, v474);
      std::string::basic_string[abi:ne180100]<0>(&v889, "input group ");
      v872 = v477;
      v478 = *(_DWORD *)(v477 + 16);
      if ((v478 & 1) != 0)
      {
        std::operator+<char>();
        v479 = std::string::append(&v893, "' ");
        v480 = *(_OWORD *)&v479->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v479->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v480;
        v479->__r_.__value_.__l.__size_ = 0;
        v479->__r_.__value_.__r.__words[2] = 0;
        v479->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v481 = &__p;
        else
          v481 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v482 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v482 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v889, (const std::string::value_type *)v481, v482);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        v478 = *(_DWORD *)(v477 + 16);
      }
      if ((v478 & 1) == 0)
        break;
      if ((siri::intelligence::IsValidId(*(_QWORD *)(v477 + 144)) & 1) == 0)
      {
        if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v490 = HIBYTE(v889.__r_.__value_.__r.__words[2]);
        else
          v490 = v889.__r_.__value_.__l.__size_;
        v491 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v490 + 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v492 = &__p;
        else
          v492 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v490)
        {
          if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v493 = &v889;
          else
            v493 = (std::string *)v889.__r_.__value_.__r.__words[0];
          v491 = (google::protobuf::internal *)memmove(v492, v493, v490);
        }
        strcpy((char *)v492 + v490, "has invalid characters in the ID");
        v494 = *(_QWORD *)(v872 + 8);
        if ((v494 & 1) != 0)
        {
          v495 = (unsigned __int8 *)(v494 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v491);
          v495 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v893, "id");
        v496 = siri::intelligence::GetLineNumFromUnknownField(v495, (uint64_t)&v893, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&__p, v496);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 224) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 216, *(const void ***)(v872 + 144))&& !*(_BYTE *)(v872 + 168))
      {
        if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v497 = HIBYTE(v889.__r_.__value_.__r.__words[2]);
        else
          v497 = v889.__r_.__value_.__l.__size_;
        v498 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v497 + 74);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v499 = &__p;
        else
          v499 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v497)
        {
          if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v500 = &v889;
          else
            v500 = (std::string *)v889.__r_.__value_.__r.__words[0];
          v498 = (google::protobuf::internal *)memmove(v499, v500, v497);
        }
        strcpy((char *)v499 + v497, "is not referenced. Did you mean to set 'toplevel: true' to make it global?");
        v501 = *(_QWORD *)(v872 + 8);
        if ((v501 & 1) != 0)
        {
          v502 = (unsigned __int8 *)(v501 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v498);
          v502 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v893, "");
        v503 = siri::intelligence::GetLineNumFromUnknownField(v502, (uint64_t)&v893, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&__p, v503);
        goto LABEL_1244;
      }
LABEL_1248:
      if (*(int *)(v872 + 32) >= 1
        && !siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)a2, (unsigned __int8 *)siri::intelligence::sIntentRenameChange))
      {
        v504 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&v893, "Deprecated 'intents' field found in flow file: use 'events' instead.");
        if (*(int *)(v872 + 32) <= 0)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
          v505 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v505->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        }
        v506 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v872 + 40) + 8) + 8);
        if ((v506 & 1) != 0)
        {
          v507 = (unsigned __int8 *)(v506 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v504);
          v507 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        v508 = siri::intelligence::GetLineNumFromUnknownField(v507, (uint64_t)&__p, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_DEPRECATED, (__int128 *)&v893, v508);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      v509 = *(_QWORD *)(v872 + 112);
      if (v509)
        v510 = (uint64_t *)(v509 + 8);
      else
        v510 = 0;
      v511 = *(int *)(v872 + 104);
      if ((_DWORD)v511)
      {
        v512 = 8 * v511;
        do
        {
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&v889, *v510++, (uint64_t)a2, a3);
          v512 -= 8;
        }
        while (v512);
      }
      if (*(int *)(v872 + 128) >= 1)
      {
        for (m = 0; m < *(_DWORD *)(v872 + 128); ++m)
        {
          v514 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(v872 + 120, m);
          std::string::basic_string[abi:ne180100]<0>(&__p, "input group event ");
          if ((*(_BYTE *)(v514 + 16) & 1) != 0)
          {
            std::operator+<char>();
            v515 = std::string::append(&v892, "' ");
            v516 = *(_OWORD *)&v515->__r_.__value_.__l.__data_;
            v893.__r_.__value_.__r.__words[2] = v515->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v516;
            v515->__r_.__value_.__l.__size_ = 0;
            v515->__r_.__value_.__r.__words[2] = 0;
            v515->__r_.__value_.__r.__words[0] = 0;
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v517 = &v893;
            else
              v517 = (std::string *)v893.__r_.__value_.__r.__words[0];
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v518 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
            else
              v518 = v893.__r_.__value_.__l.__size_;
            std::string::append(&__p, (const std::string::value_type *)v517, v518);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if ((*(_BYTE *)(v514 + 16) & 1) != 0 && (siri::intelligence::IsValidId(*(_QWORD *)(v514 + 48)) & 1) == 0)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v519 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v519 = __p.__r_.__value_.__l.__size_;
              v520 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v893, v519 + 32);
              if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v521 = &v893;
              else
                v521 = (std::string *)v893.__r_.__value_.__r.__words[0];
              if (v519)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v522 = &__p;
                else
                  v522 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v520 = (google::protobuf::internal *)memmove(v521, v522, v519);
              }
              strcpy((char *)v521 + v519, "has invalid characters in the ID");
              v523 = *(_QWORD *)(v514 + 8);
              if ((v523 & 1) != 0)
              {
                v524 = (unsigned __int8 *)(v523 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                google::protobuf::internal::InitProtobufDefaults(v520);
                v524 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
              }
              std::string::basic_string[abi:ne180100]<0>(&v892, "id");
              v525 = siri::intelligence::GetLineNumFromUnknownField(v524, (uint64_t)&v892, -1);
              siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&v893, v525);
              if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v892.__r_.__value_.__l.__data_);
              if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v893.__r_.__value_.__l.__data_);
            }
          }
          v526 = *(_QWORD *)(v514 + 64);
          if (*(char *)(v526 + 23) < 0)
          {
            if (*(_QWORD *)(v526 + 8))
            {
LABEL_1300:
              if ((const protobuf::Intelligence *)((char *)a2 + 152) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 144, (const void **)v526))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v527 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v527 = __p.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&v892, v527 + 27);
                if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v528 = &v892;
                else
                  v528 = (std::string *)v892.__r_.__value_.__r.__words[0];
                if (v527)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v529 = &__p;
                  else
                    v529 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  memmove(v528, v529, v527);
                }
                strcpy((char *)v528 + v527, "refers to undefined event: ");
                v530 = *(_QWORD *)(v514 + 64);
                v531 = *(char *)(v530 + 23);
                if (v531 >= 0)
                  v532 = *(const std::string::value_type **)(v514 + 64);
                else
                  v532 = *(const std::string::value_type **)v530;
                if (v531 >= 0)
                  v533 = *(unsigned __int8 *)(v530 + 23);
                else
                  v533 = *(_QWORD *)(v530 + 8);
                v534 = std::string::append(&v892, v532, v533);
                v893 = *v534;
                v534->__r_.__value_.__l.__size_ = 0;
                v534->__r_.__value_.__r.__words[2] = 0;
                v534->__r_.__value_.__r.__words[0] = 0;
                v535 = *(_QWORD *)(v514 + 8);
                if ((v535 & 1) != 0)
                {
                  v536 = (unsigned __int8 *)(v535 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v534);
                  v536 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&__s1, "eventId");
                v537 = siri::intelligence::GetLineNumFromUnknownField(v536, (uint64_t)&__s1, -1);
                siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INTENT, (__int128 *)&v893, v537);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
                if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v893.__r_.__value_.__l.__data_);
                if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v892.__r_.__value_.__l.__data_);
              }
              if (!*(_DWORD *)(v514 + 32))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v538 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v538 = __p.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&v892, v538 + 48);
                if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v539 = &v892;
                else
                  v539 = (std::string *)v892.__r_.__value_.__r.__words[0];
                if (v538)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v540 = &__p;
                  else
                    v540 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  memmove(v539, v540, v538);
                }
                strcpy((char *)v539 + v538, "defines no responses to be triggered for event: ");
                v541 = *(_QWORD *)(v514 + 64);
                v542 = *(char *)(v541 + 23);
                if (v542 >= 0)
                  v543 = *(const std::string::value_type **)(v514 + 64);
                else
                  v543 = *(const std::string::value_type **)v541;
                if (v542 >= 0)
                  v544 = *(unsigned __int8 *)(v541 + 23);
                else
                  v544 = *(_QWORD *)(v541 + 8);
                v545 = std::string::append(&v892, v543, v544);
                v893 = *v545;
                v545->__r_.__value_.__l.__size_ = 0;
                v545->__r_.__value_.__r.__words[2] = 0;
                v545->__r_.__value_.__r.__words[0] = 0;
                v546 = *(_QWORD *)(v514 + 8);
                if ((v546 & 1) != 0)
                {
                  v547 = (unsigned __int8 *)(v546 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v545);
                  v547 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&__s1, "eventId");
                v548 = siri::intelligence::GetLineNumFromUnknownField(v547, (uint64_t)&__s1, -1);
                siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_NO_RESPONSE_ID, (__int128 *)&v893, v548);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
                if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v893.__r_.__value_.__l.__data_);
                if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v892.__r_.__value_.__l.__data_);
              }
            }
          }
          else if (*(_BYTE *)(v526 + 23))
          {
            goto LABEL_1300;
          }
          if (*(int *)(v514 + 32) >= 1)
          {
            v549 = 0;
            do
            {
              v550 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v514 + 24, v549);
              if (*(char *)(v550 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v893, *(const std::string::value_type **)v550, *(_QWORD *)(v550 + 8));
              }
              else
              {
                v551 = *(_OWORD *)v550;
                v893.__r_.__value_.__r.__words[2] = *(_QWORD *)(v550 + 16);
                *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v551;
              }
              if (v476 == (char *)std::__tree<std::string>::find<std::string>((uint64_t)v475, (const void **)&v893.__r_.__value_.__l.__data_))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v552 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v552 = __p.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v552 + 33);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_s1 = &__s1;
                else
                  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                if (v552)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v554 = &__p;
                  else
                    v554 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  memmove(p_s1, v554, v552);
                }
                strcpy((char *)p_s1 + v552, "refers to undefined response id: ");
                if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v555 = &v893;
                else
                  v555 = (std::string *)v893.__r_.__value_.__r.__words[0];
                if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v556 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
                else
                  v556 = v893.__r_.__value_.__l.__size_;
                v557 = std::string::append(&__s1, (const std::string::value_type *)v555, v556);
                v892 = *v557;
                v557->__r_.__value_.__l.__size_ = 0;
                v557->__r_.__value_.__r.__words[2] = 0;
                v557->__r_.__value_.__r.__words[0] = 0;
                v558 = *(_QWORD *)(v514 + 8);
                if ((v558 & 1) != 0)
                {
                  v559 = (unsigned __int8 *)(v558 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v557);
                  v559 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&v890, "responseIds");
                v560 = siri::intelligence::GetLineNumFromUnknownField(v559, (uint64_t)&v890, v549);
                siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v892, v560);
                if (SHIBYTE(v890.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v890.__r_.__value_.__l.__data_);
                if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v892.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v893.__r_.__value_.__l.__data_);
              ++v549;
            }
            while (v549 < *(_DWORD *)(v514 + 32));
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (*(int *)(v872 + 56) >= 1)
      {
        v561 = 0;
        do
        {
          v562 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(v872 + 48, v561);
          std::string::basic_string[abi:ne180100]<0>(&__p, "input group fallback ");
          if (*(int *)(v562 + 56) >= 1)
          {
            v563 = 0;
            do
            {
              v564 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v562 + 48, v563);
              if (*(char *)(v564 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v893, *(const std::string::value_type **)v564, *(_QWORD *)(v564 + 8));
              }
              else
              {
                v565 = *(_OWORD *)v564;
                v893.__r_.__value_.__r.__words[2] = *(_QWORD *)(v564 + 16);
                *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v565;
              }
              if (v476 == (char *)std::__tree<std::string>::find<std::string>((uint64_t)v475, (const void **)&v893.__r_.__value_.__l.__data_))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v566 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v566 = __p.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v566 + 33);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v567 = &__s1;
                else
                  v567 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                if (v566)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v568 = &__p;
                  else
                    v568 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  memmove(v567, v568, v566);
                }
                strcpy((char *)v567 + v566, "refers to undefined response id: ");
                if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v569 = &v893;
                else
                  v569 = (std::string *)v893.__r_.__value_.__r.__words[0];
                if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v570 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
                else
                  v570 = v893.__r_.__value_.__l.__size_;
                v571 = std::string::append(&__s1, (const std::string::value_type *)v569, v570);
                v892 = *v571;
                v571->__r_.__value_.__l.__size_ = 0;
                v571->__r_.__value_.__r.__words[2] = 0;
                v571->__r_.__value_.__r.__words[0] = 0;
                v572 = *(_QWORD *)(v562 + 8);
                if ((v572 & 1) != 0)
                {
                  v573 = (unsigned __int8 *)(v572 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v571);
                  v573 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&v890, "responseIds");
                v574 = siri::intelligence::GetLineNumFromUnknownField(v573, (uint64_t)&v890, v563);
                siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v892, v574);
                if (SHIBYTE(v890.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v890.__r_.__value_.__l.__data_);
                if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v892.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v893.__r_.__value_.__l.__data_);
              ++v563;
            }
            while (v563 < *(_DWORD *)(v562 + 56));
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v561;
        }
        while (v561 < *(_DWORD *)(v872 + 56));
      }
      if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v889.__r_.__value_.__l.__data_);
      v474 = v868 + 1;
      if (v868 + 1 >= *((_DWORD *)this + 110))
        goto LABEL_1444;
    }
    if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v483 = HIBYTE(v889.__r_.__value_.__r.__words[2]);
    else
      v483 = v889.__r_.__value_.__l.__size_;
    v484 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v483 + 21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v485 = &__p;
    else
      v485 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v483)
    {
      if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v486 = &v889;
      else
        v486 = (std::string *)v889.__r_.__value_.__r.__words[0];
      v484 = (google::protobuf::internal *)memmove(v485, v486, v483);
    }
    strcpy((char *)v485 + v483, "does not define an id");
    v487 = *(_QWORD *)(v872 + 8);
    if ((v487 & 1) != 0)
    {
      v488 = (unsigned __int8 *)(v487 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v484);
      v488 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&v893, "");
    v489 = siri::intelligence::GetLineNumFromUnknownField(v488, (uint64_t)&v893, -1);
    siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&__p, v489);
LABEL_1244:
    if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v893.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_1248;
  }
LABEL_1444:
  if (*((int *)this + 128) < 1)
    goto LABEL_1733;
  v575 = 0;
  do
  {
    v576 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((uint64_t)this + 504, v575);
    std::string::basic_string[abi:ne180100]<0>(&v893, "event ");
    v577 = *(_DWORD *)(v576 + 16);
    if ((v577 & 1) != 0)
    {
      std::operator+<char>();
      v582 = std::string::append(&v892, "' ");
      v583 = *(_OWORD *)&v582->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v582->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v583;
      v582->__r_.__value_.__l.__size_ = 0;
      v582->__r_.__value_.__r.__words[2] = 0;
      v582->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v580 = &__p;
      else
        v580 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v581 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v581 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      if ((v577 & 2) == 0)
        goto LABEL_1464;
      std::operator+<char>();
      v578 = std::string::append(&v892, "' ");
      v579 = *(_OWORD *)&v578->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v578->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v579;
      v578->__r_.__value_.__l.__size_ = 0;
      v578->__r_.__value_.__r.__words[2] = 0;
      v578->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v580 = &__p;
      else
        v580 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v581 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v581 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v893, (const std::string::value_type *)v580, v581);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v892.__r_.__value_.__l.__data_);
LABEL_1464:
    if ((*(_BYTE *)(v576 + 16) & 1) == 0)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v584 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v584 = v893.__r_.__value_.__l.__size_;
      v585 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v584 + 21);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v586 = &__p;
      else
        v586 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v584)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v587 = &v893;
        else
          v587 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v585 = (google::protobuf::internal *)memmove(v586, v587, v584);
      }
      strcpy((char *)v586 + v584, "does not define an id");
      v588 = *(_QWORD *)(v576 + 8);
      if ((v588 & 1) != 0)
      {
        v589 = (unsigned __int8 *)(v588 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v585);
        v589 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v590 = siri::intelligence::GetLineNumFromUnknownField(v589, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&__p, v590);
LABEL_1494:
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_1498;
    }
    if ((siri::intelligence::IsValidId(*(_QWORD *)(v576 + 120)) & 1) == 0)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v591 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v591 = v893.__r_.__value_.__l.__size_;
      v592 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v591 + 32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v593 = &__p;
      else
        v593 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v591)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v594 = &v893;
        else
          v594 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v592 = (google::protobuf::internal *)memmove(v593, v594, v591);
      }
      strcpy((char *)v593 + v591, "has invalid characters in the ID");
      v595 = *(_QWORD *)(v576 + 8);
      if ((v595 & 1) != 0)
      {
        v596 = (unsigned __int8 *)(v595 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v592);
        v596 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "id");
      v597 = siri::intelligence::GetLineNumFromUnknownField(v596, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&__p, v597);
      goto LABEL_1494;
    }
LABEL_1498:
    v598 = *(_DWORD *)(v576 + 16);
    if ((v598 & 0xC) == 8)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v599 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v599 = v893.__r_.__value_.__l.__size_;
      v600 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v599 + 54);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v601 = &__p;
      else
        v601 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v599)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v602 = &v893;
        else
          v602 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v600 = (google::protobuf::internal *)memmove(v601, v602, v599);
      }
      strcpy((char *)v601 + v599, "defines a CATI intent GUID but not a CATI intent name.");
      v603 = *(_QWORD *)(v576 + 8);
      if ((v603 & 1) != 0)
      {
        v604 = (unsigned __int8 *)(v603 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v600);
        v604 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v605 = siri::intelligence::GetLineNumFromUnknownField(v604, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_NO_CATI_NAME, (__int128 *)&__p, v605);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v598 = *(_DWORD *)(v576 + 16);
    }
    if ((v598 & 0x14) == 0x10)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v606 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v606 = v893.__r_.__value_.__l.__size_;
      v607 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v606 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v608 = &__p;
      else
        v608 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v606)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v609 = &v893;
        else
          v609 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v607 = (google::protobuf::internal *)memmove(v608, v609, v606);
      }
      strcpy((char *)v608 + v606, "defines a CATI ensemble but not a CATI intent name.");
      v610 = *(_QWORD *)(v576 + 8);
      if ((v610 & 1) != 0)
      {
        v611 = (unsigned __int8 *)(v610 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v607);
        v611 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v612 = siri::intelligence::GetLineNumFromUnknownField(v611, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_NO_CATI_NAME, (__int128 *)&__p, v612);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v598 = *(_DWORD *)(v576 + 16);
    }
    if ((v598 & 0x1C) == 4)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v613 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v613 = v893.__r_.__value_.__l.__size_;
      v614 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v613 + 59);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v615 = &__p;
      else
        v615 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v613)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v616 = &v893;
        else
          v616 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v614 = (google::protobuf::internal *)memmove(v615, v616, v613);
      }
      strcpy((char *)v615 + v613, "defines a CATI intent name but not a CATI ensemble or GUID.");
      v617 = *(_QWORD *)(v576 + 8);
      if ((v617 & 1) != 0)
      {
        v618 = (unsigned __int8 *)(v617 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v614);
        v618 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v619 = siri::intelligence::GetLineNumFromUnknownField(v618, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_NO_CATI_GUID, (__int128 *)&__p, v619);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v598 = *(_DWORD *)(v576 + 16);
    }
    if ((v598 & 8) != 0 && (v598 & 0x20) != 0)
    {
      if (!*(_QWORD *)(v576 + 160))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18861);
        v620 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || nl_producer_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v620->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
      }
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v621 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v621 = v893.__r_.__value_.__l.__size_;
      v622 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v621 + 88);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v623 = &__p;
      else
        v623 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v621)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v624 = &v893;
        else
          v624 = (std::string *)v893.__r_.__value_.__r.__words[0];
        v622 = (google::protobuf::internal *)memmove(v623, v624, v621);
      }
      strcpy((char *)v623 + v621, "defines a CATI intent GUID and a custom producer. The CATI GUID definition will be used.");
      v625 = *(_QWORD *)(v576 + 8);
      if ((v625 & 1) != 0)
      {
        v626 = (unsigned __int8 *)(v625 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v622);
        v626 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v892, "");
      v627 = siri::intelligence::GetLineNumFromUnknownField(v626, (uint64_t)&v892, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_DUPE_PRODUCER, (__int128 *)&__p, v627);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v628 = *(_QWORD *)(v576 + 40);
    if (v628)
      v629 = v628 + 8;
    else
      v629 = 0;
    v630 = *(int *)(v576 + 32);
    if ((_DWORD)v630)
    {
      v631 = v629 + 8 * v630;
      do
      {
        v632 = *(_QWORD *)(*(_QWORD *)v629 + 40);
        if (v632)
          v633 = (uint64_t *)(v632 + 8);
        else
          v633 = 0;
        v634 = *(int *)(*(_QWORD *)v629 + 32);
        if ((_DWORD)v634)
        {
          v635 = 8 * v634;
          do
          {
            siri::intelligence::ValidateKeyValueParameter((uint64_t)&v893, *v633++, (uint64_t)a2, a3);
            v635 -= 8;
          }
          while (v635);
        }
        v629 += 8;
      }
      while (v629 != v631);
    }
    if ((*(_DWORD *)(v576 + 16) & 0x20) != 0)
    {
      v636 = *(int **)(v576 + 160);
      if (!v636)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18861);
        v637 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || nl_producer_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v637->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        v636 = *(int **)(v576 + 160);
      }
      if (!v636)
        v636 = (int *)&protobuf::_Intelligence_NLParameters_default_instance_;
      v638 = *((_QWORD *)v636 + 5);
      if (v638)
        v639 = (uint64_t *)(v638 + 8);
      else
        v639 = 0;
      v640 = v636[8];
      if ((_DWORD)v640)
      {
        v641 = 8 * v640;
        do
        {
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&v893, *v639++, (uint64_t)a2, a3);
          v641 -= 8;
        }
        while (v641);
      }
    }
    v642 = *(unsigned int *)(v576 + 104);
    if ((int)v642 < 1)
      goto LABEL_1721;
    v873 = v575;
    memset(&__p, 0, sizeof(__p));
    v643 = *(_QWORD *)(v576 + 112);
    if (v643)
      v644 = (const std::string **)(v643 + 8);
    else
      v644 = 0;
    v645 = 8 * v642;
    do
    {
      v646 = *v644;
      siri::intelligence::Utterances::GetNormalizedText(*v644, (uint64_t)&v892);
      v647 = HIBYTE(v892.__r_.__value_.__r.__words[2]);
      if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v647 = v892.__r_.__value_.__l.__size_;
      if (v647)
      {
        if (!siri::intelligence::VectorContains((const std::string **)&__p, &v892))
          goto LABEL_1656;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v648 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v648 = v893.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v889, v648 + 39);
        if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v649 = &v889;
        else
          v649 = (std::string *)v889.__r_.__value_.__r.__words[0];
        if (v648)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v650 = &v893;
          else
            v650 = (std::string *)v893.__r_.__value_.__r.__words[0];
          memmove(v649, v650, v648);
        }
        strcpy((char *)v649 + v648, "has a duplicate normalized utterance: '");
        v651 = SHIBYTE(v646->__r_.__value_.__r.__words[2]);
        if (v651 >= 0)
          v652 = (const std::string::value_type *)v646;
        else
          v652 = (const std::string::value_type *)v646->__r_.__value_.__r.__words[0];
        if (v651 >= 0)
          v653 = HIBYTE(v646->__r_.__value_.__r.__words[2]);
        else
          v653 = v646->__r_.__value_.__l.__size_;
        v654 = std::string::append(&v889, v652, v653);
        v655 = *(_OWORD *)&v654->__r_.__value_.__l.__data_;
        v890.__r_.__value_.__r.__words[2] = v654->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v890.__r_.__value_.__l.__data_ = v655;
        v654->__r_.__value_.__l.__size_ = 0;
        v654->__r_.__value_.__r.__words[2] = 0;
        v654->__r_.__value_.__r.__words[0] = 0;
        v656 = std::string::append(&v890, "'");
        __s1 = *v656;
        v656->__r_.__value_.__l.__size_ = 0;
        v656->__r_.__value_.__r.__words[2] = 0;
        v656->__r_.__value_.__r.__words[0] = 0;
        v657 = *(_QWORD *)(v576 + 8);
        if ((v657 & 1) != 0)
        {
          v658 = (unsigned __int8 *)(v657 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v656);
          v658 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v887, "");
        v659 = siri::intelligence::GetLineNumFromUnknownField(v658, (uint64_t)v887, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UTTER_DUPE, (__int128 *)&__s1, v659);
      }
      else
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v660 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v660 = v893.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v889, v660 + 50);
        if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v661 = &v889;
        else
          v661 = (std::string *)v889.__r_.__value_.__r.__words[0];
        if (v660)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v662 = &v893;
          else
            v662 = (std::string *)v893.__r_.__value_.__r.__words[0];
          memmove(v661, v662, v660);
        }
        strcpy((char *)v661 + v660, "has an empty / ineffectual normalized utterance: '");
        v663 = SHIBYTE(v646->__r_.__value_.__r.__words[2]);
        if (v663 >= 0)
          v664 = (const std::string::value_type *)v646;
        else
          v664 = (const std::string::value_type *)v646->__r_.__value_.__r.__words[0];
        if (v663 >= 0)
          v665 = HIBYTE(v646->__r_.__value_.__r.__words[2]);
        else
          v665 = v646->__r_.__value_.__l.__size_;
        v666 = std::string::append(&v889, v664, v665);
        v667 = *(_OWORD *)&v666->__r_.__value_.__l.__data_;
        v890.__r_.__value_.__r.__words[2] = v666->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v890.__r_.__value_.__l.__data_ = v667;
        v666->__r_.__value_.__l.__size_ = 0;
        v666->__r_.__value_.__r.__words[2] = 0;
        v666->__r_.__value_.__r.__words[0] = 0;
        v668 = std::string::append(&v890, "'");
        __s1 = *v668;
        v668->__r_.__value_.__l.__size_ = 0;
        v668->__r_.__value_.__r.__words[2] = 0;
        v668->__r_.__value_.__r.__words[0] = 0;
        v669 = *(_QWORD *)(v576 + 8);
        if ((v669 & 1) != 0)
        {
          v670 = (unsigned __int8 *)(v669 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v668);
          v670 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v887, "");
        v671 = siri::intelligence::GetLineNumFromUnknownField(v670, (uint64_t)v887, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UTTER_EMPTY, (__int128 *)&__s1, v671);
      }
      if (v888 < 0)
        operator delete(v887[0]);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v890.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v890.__r_.__value_.__l.__data_);
      if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v889.__r_.__value_.__l.__data_);
LABEL_1656:
      v672 = (_OWORD *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v674 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)&v892);
      }
      else
      {
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, v892.__r_.__value_.__l.__data_, v892.__r_.__value_.__l.__size_);
        }
        else
        {
          v673 = *(_OWORD *)&v892.__r_.__value_.__l.__data_;
          *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v892.__r_.__value_.__l + 2);
          *v672 = v673;
        }
        v674 = (std::string::size_type)v672 + 24;
      }
      __p.__r_.__value_.__l.__size_ = v674;
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      ++v644;
      v645 -= 8;
    }
    while (v645);
    v675 = *(_DWORD *)(v576 + 104);
    if (v675 >= 25)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v676 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v676 = v893.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v890, v676 + 14);
      v575 = v873;
      if ((v890.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v677 = &v890;
      else
        v677 = (std::string *)v890.__r_.__value_.__r.__words[0];
      if (v676)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v678 = &v893;
        else
          v678 = (std::string *)v893.__r_.__value_.__r.__words[0];
        memmove(v677, v678, v676);
      }
      strcpy((char *)v677 + v676, "has more than ");
      std::to_string(&v889, 24);
      if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v679 = &v889;
      else
        v679 = (std::string *)v889.__r_.__value_.__r.__words[0];
      if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v680 = HIBYTE(v889.__r_.__value_.__r.__words[2]);
      else
        v680 = v889.__r_.__value_.__l.__size_;
      v681 = std::string::append(&v890, (const std::string::value_type *)v679, v680);
      v682 = *(_OWORD *)&v681->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v681->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v682;
      v681->__r_.__value_.__l.__size_ = 0;
      v681->__r_.__value_.__r.__words[2] = 0;
      v681->__r_.__value_.__r.__words[0] = 0;
      v683 = std::string::append(&__s1, " utterances. This feature is meant for prototyping only. It is not a production NL system.");
      v892 = *v683;
      v683->__r_.__value_.__l.__size_ = 0;
      v683->__r_.__value_.__r.__words[2] = 0;
      v683->__r_.__value_.__r.__words[0] = 0;
      v684 = *(_QWORD *)(v576 + 8);
      if ((v684 & 1) != 0)
      {
        v685 = (unsigned __int8 *)(v684 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v683);
        v685 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v887, "");
      v686 = siri::intelligence::GetLineNumFromUnknownField(v685, (uint64_t)v887, -1);
      siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UTTER_NUM, (__int128 *)&v892, v686);
      goto LABEL_1710;
    }
    v575 = v873;
    if (v675 >= 13)
    {
      if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v687 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
      else
        v687 = v893.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v890, v687 + 14);
      if ((v890.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v688 = &v890;
      else
        v688 = (std::string *)v890.__r_.__value_.__r.__words[0];
      if (v687)
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v689 = &v893;
        else
          v689 = (std::string *)v893.__r_.__value_.__r.__words[0];
        memmove(v688, v689, v687);
      }
      strcpy((char *)v688 + v687, "has more than ");
      std::to_string(&v889, 12);
      if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v690 = &v889;
      else
        v690 = (std::string *)v889.__r_.__value_.__r.__words[0];
      if ((v889.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v691 = HIBYTE(v889.__r_.__value_.__r.__words[2]);
      else
        v691 = v889.__r_.__value_.__l.__size_;
      v692 = std::string::append(&v890, (const std::string::value_type *)v690, v691);
      v693 = *(_OWORD *)&v692->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v692->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v693;
      v692->__r_.__value_.__l.__size_ = 0;
      v692->__r_.__value_.__r.__words[2] = 0;
      v692->__r_.__value_.__r.__words[0] = 0;
      v694 = std::string::append(&__s1, " utterances. This feature is meant for prototyping only. It is not a production NL system.");
      v892 = *v694;
      v694->__r_.__value_.__l.__size_ = 0;
      v694->__r_.__value_.__r.__words[2] = 0;
      v694->__r_.__value_.__r.__words[0] = 0;
      v695 = *(_QWORD *)(v576 + 8);
      if ((v695 & 1) != 0)
      {
        v696 = (unsigned __int8 *)(v695 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v694);
        v696 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v887, "");
      v697 = siri::intelligence::GetLineNumFromUnknownField(v696, (uint64_t)v887, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UTTER_NUM, (__int128 *)&v892, v697);
LABEL_1710:
      if (v888 < 0)
        operator delete(v887[0]);
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v889.__r_.__value_.__l.__data_);
      if (SHIBYTE(v890.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v890.__r_.__value_.__l.__data_);
    }
    v892.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v892);
LABEL_1721:
    if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v893.__r_.__value_.__l.__data_);
    ++v575;
  }
  while (v575 < *((_DWORD *)this + 128));
LABEL_1733:
  v698 = this;
  if (*((int *)this + 98) >= 1)
  {
    v699 = 0;
    v700 = (char *)this + 384;
    v701 = (uint64_t)a2 + 288;
    v702 = (char *)a2 + 296;
    v871 = (char *)a2 + 312;
    do
    {
      v703 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)v700, v699);
      std::string::basic_string[abi:ne180100]<0>(&v893, "variable ");
      v704 = *(_DWORD *)(v703 + 16);
      if ((v704 & 1) != 0)
      {
        std::operator+<char>();
        v705 = std::string::append(&v892, "' ");
        v706 = *(_OWORD *)&v705->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v705->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v706;
        v705->__r_.__value_.__l.__size_ = 0;
        v705->__r_.__value_.__r.__words[2] = 0;
        v705->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v707 = &__p;
        else
          v707 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v708 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v708 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v893, (const std::string::value_type *)v707, v708);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v704 = *(_DWORD *)(v703 + 16);
      }
      if ((v704 & 1) != 0)
      {
        if (v702 != (char *)std::__tree<std::string>::find<std::string>(v701, *(const void ***)(v703 + 72)))
          goto LABEL_1781;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v716 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v716 = v893.__r_.__value_.__l.__size_;
        v717 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v716 + 12);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v718 = &__p;
        else
          v718 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v716)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v719 = &v893;
          else
            v719 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v717 = (google::protobuf::internal *)memmove(v718, v719, v716);
        }
        strcpy((char *)v718 + v716, "is not used.");
        v720 = *(_QWORD *)(v703 + 8);
        if ((v720 & 1) != 0)
        {
          v721 = (unsigned __int8 *)(v720 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v717);
          v721 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v722 = siri::intelligence::GetLineNumFromUnknownField(v721, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&__p, v722);
      }
      else
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v709 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v709 = v893.__r_.__value_.__l.__size_;
        v710 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v709 + 22);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v711 = &__p;
        else
          v711 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v709)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v712 = &v893;
          else
            v712 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v710 = (google::protobuf::internal *)memmove(v711, v712, v709);
        }
        strcpy((char *)v711 + v709, "does not define a name");
        v713 = *(_QWORD *)(v703 + 8);
        if ((v713 & 1) != 0)
        {
          v714 = (unsigned __int8 *)(v713 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v710);
          v714 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v715 = siri::intelligence::GetLineNumFromUnknownField(v714, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_VAR_NAME, (__int128 *)&__p, v715);
      }
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_1781:
      if ((*(_BYTE *)(v703 + 16) & 2) != 0)
      {
        if (!siri::intelligence::IsValidTypeName(*(_QWORD *)(v703 + 80)))
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v731 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
          else
            v731 = v893.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v892, v731 + 26);
          if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v732 = &v892;
          else
            v732 = (std::string *)v892.__r_.__value_.__r.__words[0];
          if (v731)
          {
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v733 = &v893;
            else
              v733 = (std::string *)v893.__r_.__value_.__r.__words[0];
            memmove(v732, v733, v731);
          }
          strcpy((char *)v732 + v731, "has an invalid type name: ");
          v734 = *(_QWORD *)(v703 + 80);
          v735 = *(char *)(v734 + 23);
          if (v735 >= 0)
            v736 = *(const std::string::value_type **)(v703 + 80);
          else
            v736 = *(const std::string::value_type **)v734;
          if (v735 >= 0)
            v737 = *(unsigned __int8 *)(v734 + 23);
          else
            v737 = *(_QWORD *)(v734 + 8);
          v738 = std::string::append(&v892, v736, v737);
          __p = *v738;
          v738->__r_.__value_.__l.__size_ = 0;
          v738->__r_.__value_.__r.__words[2] = 0;
          v738->__r_.__value_.__r.__words[0] = 0;
          v739 = *(_QWORD *)(v703 + 8);
          if ((v739 & 1) != 0)
          {
            v740 = (unsigned __int8 *)(v739 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v738);
            v740 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&__s1, "type");
          v741 = siri::intelligence::GetLineNumFromUnknownField(v740, (uint64_t)&__s1, -1);
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_TYPE, (__int128 *)&__p, v741);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          {
            v730 = (void *)v892.__r_.__value_.__r.__words[0];
            goto LABEL_1825;
          }
        }
      }
      else
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v723 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v723 = v893.__r_.__value_.__l.__size_;
        v724 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v723 + 22);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v725 = &__p;
        else
          v725 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v723)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v726 = &v893;
          else
            v726 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v724 = (google::protobuf::internal *)memmove(v725, v726, v723);
        }
        strcpy((char *)v725 + v723, "does not define a type");
        v727 = *(_QWORD *)(v703 + 8);
        if ((v727 & 1) != 0)
        {
          v728 = (unsigned __int8 *)(v727 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v724);
          v728 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v729 = siri::intelligence::GetLineNumFromUnknownField(v728, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_VAR_TYPE, (__int128 *)&__p, v729);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v730 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_1825:
          operator delete(v730);
        }
      }
      if ((*(_BYTE *)(v703 + 16) & 1) != 0 && !siri::intelligence::IsValidVariableName(*(_QWORD *)(v703 + 72)))
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v742 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v742 = v893.__r_.__value_.__l.__size_;
        v743 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v742 + 34);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v744 = &__p;
        else
          v744 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v742)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v745 = &v893;
          else
            v745 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v743 = (google::protobuf::internal *)memmove(v744, v745, v742);
        }
        strcpy((char *)v744 + v742, "has invalid characters in the name");
        v746 = *(_QWORD *)(v703 + 8);
        if ((v746 & 1) != 0)
        {
          v747 = (unsigned __int8 *)(v746 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v743);
          v747 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "name");
        v748 = siri::intelligence::GetLineNumFromUnknownField(v747, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_NAME, (__int128 *)&__p, v748);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v749 = *(_DWORD *)(v703 + 16);
      if ((v749 & 0x10) == 0)
        goto LABEL_2019;
      v750 = *(_DWORD **)(v703 + 104);
      if (v750)
      {
        if ((v749 & 2) != 0)
          goto LABEL_1850;
      }
      else
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17713);
        v751 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || default_value_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v751->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        v750 = *(_DWORD **)(v703 + 104);
        if ((*(_DWORD *)(v703 + 16) & 2) != 0)
        {
LABEL_1850:
          if (v750)
            v752 = v750;
          else
            v752 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          v753 = *(__int128 **)(v703 + 80);
          if (*((char *)v753 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v892, *(const std::string::value_type **)v753, *((_QWORD *)v753 + 1));
          }
          else
          {
            v754 = *v753;
            v892.__r_.__value_.__r.__words[2] = *((_QWORD *)v753 + 2);
            *(_OWORD *)&v892.__r_.__value_.__l.__data_ = v754;
          }
          v874 = (uint64_t)v752;
          v755 = v752[4];
          LOWORD(v756) = v755;
          if ((v755 & 2) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v890, siri::intelligence::TYPE_STRING[0]);
            if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v892, (unsigned __int8 *)&v890))
            {
              v756 = v752[4];
              goto LABEL_1859;
            }
            v761 = 1;
LABEL_1890:
            if (SHIBYTE(v890.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v890.__r_.__value_.__l.__data_);
              if ((v761 & 1) == 0)
                goto LABEL_1918;
              goto LABEL_1892;
            }
LABEL_1891:
            if ((v761 & 1) != 0)
              goto LABEL_1892;
LABEL_1918:
            v774 = *(_DWORD *)(v874 + 16);
            if ((v774 & 0x10) == 0)
            {
              if ((v774 & 8) == 0)
              {
                if (siri::intelligence::DialogTypes::IsDialogType((siri::intelligence *)&v892))
                {
                  if (*(_QWORD *)(v703 + 104))
                    v775 = *(void **)(v703 + 104);
                  else
                    v775 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
                  siri::intelligence::Variable::FromProtobuf(*(const std::string **)(v703 + 72), (uint64_t)v775, (uint64_t *)&v877);
                  v776 = (google::protobuf::internal *)_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
                  memset(v881, 0, 24);
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v881;
                  v882[0] = 0;
                  v882[1] = 0;
                  v881[3] = v882;
                  v883 = v877;
                  v884 = v878;
                  if (v878)
                  {
                    p_shared_owners = (unint64_t *)&v878->__shared_owners_;
                    do
                      v778 = __ldxr(p_shared_owners);
                    while (__stxr(v778 + 1, p_shared_owners));
                  }
                  v779 = *(_QWORD *)(v703 + 80);
                  v780 = *(_QWORD *)(v703 + 8);
                  if ((v780 & 1) != 0)
                  {
                    v781 = (unsigned __int8 *)(v780 & 0xFFFFFFFFFFFFFFFELL);
                  }
                  else
                  {
                    google::protobuf::internal::InitProtobufDefaults(v776);
                    v781 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__s1, "defaultValue");
                  v782 = siri::intelligence::GetLineNumFromUnknownField(v781, (uint64_t)&__s1, -1);
                  siri::intelligence::Memory::ValidateVariableReference((uint64_t)&__p, (uint64_t)&v883, v779, (const void **)&v893.__r_.__value_.__l.__data_, a3, (uint64_t)v782);
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__s1.__r_.__value_.__l.__data_);
                  v783 = v884;
                  if (v884)
                  {
                    v784 = (unint64_t *)&v884->__shared_owners_;
                    do
                      v785 = __ldaxr(v784);
                    while (__stlxr(v785 - 1, v784));
                    if (!v785)
                    {
                      ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
                      std::__shared_weak_count::__release_weak(v783);
                    }
                  }
                  siri::intelligence::Memory::~Memory(&__p.__r_.__value_.__l.__data_);
                  v786 = v878;
                  if (v878)
                  {
                    v787 = (unint64_t *)&v878->__shared_owners_;
                    do
                      v788 = __ldaxr(v787);
                    while (__stlxr(v788 - 1, v787));
                    if (!v788)
                    {
                      ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
                      std::__shared_weak_count::__release_weak(v786);
                    }
                  }
                }
                goto LABEL_2017;
              }
              siri::intelligence::Memory::GetVariable((uint64_t)v871, *(_QWORD *)(v874 + 144), &__s1);
              if (!__s1.__r_.__value_.__r.__words[0])
                goto LABEL_2003;
              (*(void (**)(std::string *__return_ptr, std::string::size_type, char *))(*(_QWORD *)__s1.__r_.__value_.__l.__data_
                                                                                                + 96))(&__p, __s1.__r_.__value_.__r.__words[0], v871);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v800 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v800 = __p.__r_.__value_.__l.__size_;
              v801 = HIBYTE(v892.__r_.__value_.__r.__words[2]);
              if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v801 = v892.__r_.__value_.__l.__size_;
              if (v800 != v801)
              {
                v807 = 1;
                if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
                  goto LABEL_2005;
                goto LABEL_2012;
              }
              if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v799 = &v892;
              else
                v799 = (std::string *)v892.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
                {
                  v802 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
                  v803 = &__p;
                  do
                  {
                    v805 = v803->__r_.__value_.__s.__data_[0];
                    v803 = (std::string *)((char *)v803 + 1);
                    v804 = v805;
                    v806 = v799->__r_.__value_.__s.__data_[0];
                    v799 = (std::string *)((char *)v799 + 1);
                    v807 = v804 != v806;
                  }
                  while (v804 == v806 && v802-- != 0);
                  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
LABEL_2005:
                    v814 = (void *)__p.__r_.__value_.__r.__words[0];
                    goto LABEL_2011;
                  }
                  goto LABEL_2012;
                }
LABEL_2003:
                v807 = 0;
                goto LABEL_2012;
              }
              v814 = (void *)__p.__r_.__value_.__r.__words[0];
              v807 = memcmp(__p.__r_.__value_.__l.__data_, v799, __p.__r_.__value_.__l.__size_) != 0;
LABEL_2011:
              operator delete(v814);
LABEL_2012:
              v817 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
              if (!__s1.__r_.__value_.__l.__size_)
                goto LABEL_2016;
              v818 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
              do
                v819 = __ldaxr(v818);
              while (__stlxr(v819 - 1, v818));
              if (v819)
              {
LABEL_2016:
                if (!v807)
                  goto LABEL_2017;
LABEL_1892:
                if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v763 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
                else
                  v763 = v893.__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v763 + 51);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v764 = &__s1;
                else
                  v764 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                if (v763)
                {
                  if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v765 = &v893;
                  else
                    v765 = (std::string *)v893.__r_.__value_.__r.__words[0];
                  memmove(v764, v765, v763);
                }
                strcpy((char *)v764 + v763, "has a default value that doesn't match the type of ");
                v766 = *(_QWORD *)(v703 + 80);
                v767 = *(char *)(v766 + 23);
                if (v767 >= 0)
                  v768 = *(const std::string::value_type **)(v703 + 80);
                else
                  v768 = *(const std::string::value_type **)v766;
                if (v767 >= 0)
                  v769 = *(unsigned __int8 *)(v766 + 23);
                else
                  v769 = *(_QWORD *)(v766 + 8);
                v770 = std::string::append(&__s1, v768, v769);
                __p = *v770;
                v770->__r_.__value_.__l.__size_ = 0;
                v770->__r_.__value_.__r.__words[2] = 0;
                v770->__r_.__value_.__r.__words[0] = 0;
                v771 = *(_QWORD *)(v703 + 8);
                if ((v771 & 1) != 0)
                {
                  v772 = (unsigned __int8 *)(v771 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v770);
                  v772 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&v877, "defaultValue");
                v773 = siri::intelligence::GetLineNumFromUnknownField(v772, (uint64_t)&v877, -1);
                siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_TYPE_MISMATCH, (__int128 *)&__p, v773);
                if (v879 < 0)
                  operator delete(v877);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
                goto LABEL_2017;
              }
              ((void (*)(std::__shared_weak_count *, std::string *))v817->__on_zero_shared)(v817, v799);
              std::__shared_weak_count::__release_weak(v817);
              if (v807)
                goto LABEL_1892;
LABEL_2017:
              siri::intelligence::ValidateKeyValueParameter((uint64_t)&v893, v874, (uint64_t)a2, a3);
              if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v892.__r_.__value_.__l.__data_);
              goto LABEL_2019;
            }
            memset(&__p, 0, sizeof(__p));
            memset(&__s1, 0, sizeof(__s1));
            google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&__s1, v874 + 96);
            if (LODWORD(__s1.__r_.__value_.__r.__words[1]))
            {
              if (__s1.__r_.__value_.__r.__words[2])
                v789 = (const protobuf::Intelligence_KeyValueParameter **)(__s1.__r_.__value_.__r.__words[2] + 8);
              else
                v789 = 0;
              v790 = (protobuf::Intelligence_KeyValueParameter *)__p.__r_.__value_.__l.__size_;
              do
              {
                v791 = *v789;
                if ((unint64_t)v790 >= __p.__r_.__value_.__r.__words[2])
                {
                  v790 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&__p, v791);
                }
                else
                {
                  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v790, v791);
                  v790 = (protobuf::Intelligence_KeyValueParameter *)((char *)v790 + 192);
                }
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v790;
                ++v789;
                if (__s1.__r_.__value_.__r.__words[2])
                  v792 = __s1.__r_.__value_.__r.__words[2] + 8;
                else
                  v792 = 0;
              }
              while (v789 != (const protobuf::Intelligence_KeyValueParameter **)(v792
                                                                                + 8
                                                                                * SLODWORD(__s1.__r_.__value_.__r.__words[1])));
            }
            google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&__s1);
            v793 = *(const void ***)(v874 + 152);
            std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&__p, &v883);
            siri::intelligence::FunctionHandler::GetReturnType(v793, (uint64_t *)&v883, &__s1);
            v794 = v884;
            if (v884)
            {
              v795 = (unint64_t *)&v884->__shared_owners_;
              do
                v796 = __ldaxr(v795);
              while (__stlxr(v796 - 1, v795));
              if (!v796)
              {
                ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
                std::__shared_weak_count::__release_weak(v794);
              }
            }
            v797 = strlen(siri::intelligence::TYPE_UNKNOWN);
            v798 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v797 != __s1.__r_.__value_.__l.__size_)
                goto LABEL_1985;
              if (v797 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v809 = (void *)__s1.__r_.__value_.__r.__words[0];
              if (memcmp(__s1.__r_.__value_.__l.__data_, siri::intelligence::TYPE_UNKNOWN, v797))
                goto LABEL_1985;
              operator delete(v809);
            }
            else
            {
              if (v797 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
                && !memcmp(&__s1, siri::intelligence::TYPE_UNKNOWN, v797))
              {
                goto LABEL_2009;
              }
LABEL_1985:
              if ((v798 & 0x80u) == 0)
                v810 = v798;
              else
                v810 = __s1.__r_.__value_.__l.__size_;
              v811 = HIBYTE(v892.__r_.__value_.__r.__words[2]);
              if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v811 = v892.__r_.__value_.__l.__size_;
              if (v810 != v811)
              {
LABEL_2000:
                if ((v798 & 0x80) != 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                goto LABEL_1892;
              }
              if ((v892.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v812 = &v892;
              else
                v812 = (std::string *)v892.__r_.__value_.__r.__words[0];
              if ((v798 & 0x80) != 0)
              {
                v815 = (void *)__s1.__r_.__value_.__r.__words[0];
                v816 = memcmp(__s1.__r_.__value_.__l.__data_, v812, __s1.__r_.__value_.__l.__size_);
                operator delete(v815);
                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                if (v816)
                  goto LABEL_1892;
                goto LABEL_2017;
              }
              if ((_DWORD)v798)
              {
                v813 = 0;
                while (__s1.__r_.__value_.__s.__data_[v813] == v812->__r_.__value_.__s.__data_[v813])
                {
                  if (v798 == ++v813)
                    goto LABEL_2009;
                }
                goto LABEL_2000;
              }
            }
LABEL_2009:
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
            goto LABEL_2017;
          }
LABEL_1859:
          v757 = v702;
          v758 = v700;
          v759 = v701;
          LOBYTE(v701) = v756;
          if ((v756 & 0x100) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v889, siri::intelligence::TYPE_BOOLEAN[0]);
            if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v892, (unsigned __int8 *)&v889))
            {
              LODWORD(v701) = v752[4];
              goto LABEL_1862;
            }
            v701 = v759;
            v761 = 1;
LABEL_1887:
            v700 = v758;
            if (SHIBYTE(v889.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v889.__r_.__value_.__l.__data_);
            goto LABEL_1889;
          }
LABEL_1862:
          if ((v701 & 0x80) != 0
            && (std::string::basic_string[abi:ne180100]<0>(v887, siri::intelligence::TYPE_NUMBER[0]),
                !siri::intelligence::IsEquivalentType((unsigned __int8 *)&v892, (unsigned __int8 *)v887)))
          {
            v761 = 1;
          }
          else
          {
            v760 = v752[14];
            if (v760 < 1)
            {
              if ((int)v752[20] >= 1)
                goto LABEL_1871;
              v761 = 0;
LABEL_1882:
              v698 = this;
              if ((v701 & 0x80) == 0)
                goto LABEL_1885;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v885, siri::intelligence::TYPE_ARRAY[0]);
              if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v892, (unsigned __int8 *)v885))
              {
                if ((int)v752[20] <= 0)
                {
                  v761 = 0;
                  goto LABEL_1877;
                }
LABEL_1871:
                std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_DICTIONARY[0]);
                IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v892, (unsigned __int8 *)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v761 = IsEquivalentType ^ 1;
                if (v760 < 1)
                  goto LABEL_1882;
              }
              else
              {
                v761 = 1;
              }
LABEL_1877:
              v698 = this;
              if (v886 < 0)
                operator delete(v885[0]);
              if ((v701 & 0x80) == 0)
              {
LABEL_1885:
                v701 = v759;
                if ((v756 & 0x100) != 0)
                  goto LABEL_1887;
                v700 = v758;
LABEL_1889:
                v702 = v757;
                if ((v755 & 2) != 0)
                  goto LABEL_1890;
                goto LABEL_1891;
              }
            }
          }
          if (v888 < 0)
            operator delete(v887[0]);
          goto LABEL_1885;
        }
      }
LABEL_2019:
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
      ++v699;
    }
    while (v699 < *((_DWORD *)v698 + 98));
  }
  if (*((int *)v698 + 68) >= 1)
  {
    for (n = 0; n < *((_DWORD *)this + 68); ++n)
    {
      v821 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((uint64_t)this + 264, n);
      std::string::basic_string[abi:ne180100]<0>(&v893, "condition ");
      v822 = *(_DWORD *)(v821 + 16);
      if ((v822 & 1) != 0)
      {
        std::operator+<char>();
        v823 = std::string::append(&v892, "' ");
        v824 = *(_OWORD *)&v823->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v823->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v824;
        v823->__r_.__value_.__l.__size_ = 0;
        v823->__r_.__value_.__r.__words[2] = 0;
        v823->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v825 = &__p;
        else
          v825 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v826 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v826 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v893, (const std::string::value_type *)v825, v826);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v822 = *(_DWORD *)(v821 + 16);
      }
      if ((v822 & 1) != 0)
      {
        if ((siri::intelligence::IsValidId(*(_QWORD *)(v821 + 24)) & 1) == 0)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v834 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
          else
            v834 = v893.__r_.__value_.__l.__size_;
          v835 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v834 + 32);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v836 = &__p;
          else
            v836 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v834)
          {
            if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v837 = &v893;
            else
              v837 = (std::string *)v893.__r_.__value_.__r.__words[0];
            v835 = (google::protobuf::internal *)memmove(v836, v837, v834);
          }
          strcpy((char *)v836 + v834, "has invalid characters in the ID");
          v838 = *(_QWORD *)(v821 + 8);
          if ((v838 & 1) != 0)
          {
            v839 = (unsigned __int8 *)(v838 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults(v835);
            v839 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&v892, "id");
          v840 = siri::intelligence::GetLineNumFromUnknownField(v839, (uint64_t)&v892, -1);
          siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_INVALID_ID, (__int128 *)&__p, v840);
          if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v892.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((const protobuf::Intelligence *)((char *)a2 + 272) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 264, *(const void ***)(v821 + 24)))goto LABEL_2098;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v841 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v841 = v893.__r_.__value_.__l.__size_;
        v842 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v841 + 12);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v843 = &__p;
        else
          v843 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v841)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v844 = &v893;
          else
            v844 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v842 = (google::protobuf::internal *)memmove(v843, v844, v841);
        }
        strcpy((char *)v843 + v841, "is not used.");
        v845 = *(_QWORD *)(v821 + 8);
        if ((v845 & 1) != 0)
        {
          v846 = (unsigned __int8 *)(v845 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v842);
          v846 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v847 = siri::intelligence::GetLineNumFromUnknownField(v846, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (__int128 *)siri::intelligence::CODE_UNUSED, (__int128 *)&__p, v847);
      }
      else
      {
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v827 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v827 = v893.__r_.__value_.__l.__size_;
        v828 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v827 + 21);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v829 = &__p;
        else
          v829 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v827)
        {
          if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v830 = &v893;
          else
            v830 = (std::string *)v893.__r_.__value_.__r.__words[0];
          v828 = (google::protobuf::internal *)memmove(v829, v830, v827);
        }
        strcpy((char *)v829 + v827, "does not define an id");
        v831 = *(_QWORD *)(v821 + 8);
        if ((v831 & 1) != 0)
        {
          v832 = (unsigned __int8 *)(v831 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v828);
          v832 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "");
        v833 = siri::intelligence::GetLineNumFromUnknownField(v832, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_NO_ID, (__int128 *)&__p, v833);
      }
      if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v892.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_2098:
      if ((*(_DWORD *)(v821 + 16) & 2) != 0)
      {
        v848 = *(void **)(v821 + 32);
        if (!v848)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21745);
          v849 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || condition_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v892, (const char **)&v849->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          v848 = *(void **)(v821 + 32);
        }
        if (v848)
          v850 = v848;
        else
          v850 = &protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        siri::intelligence::ValidateConditionEntry((const void **)&v893.__r_.__value_.__l.__data_, (uint64_t)v850, (uint64_t)a2, a3);
      }
      if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v893.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)this + 44) >= 1)
  {
    v851 = 0;
    do
    {
      v852 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, v851);
      std::string::basic_string[abi:ne180100]<0>(&__p, "activity ");
      v853 = *(_DWORD *)(v852 + 16);
      if ((v853 & 2) != 0)
      {
        std::operator+<char>();
        v854 = std::string::append(&v892, "' ");
        v855 = *(_OWORD *)&v854->__r_.__value_.__l.__data_;
        v893.__r_.__value_.__r.__words[2] = v854->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v893.__r_.__value_.__l.__data_ = v855;
        v854->__r_.__value_.__l.__size_ = 0;
        v854->__r_.__value_.__r.__words[2] = 0;
        v854->__r_.__value_.__r.__words[0] = 0;
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v856 = &v893;
        else
          v856 = (std::string *)v893.__r_.__value_.__r.__words[0];
        if ((v893.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v857 = HIBYTE(v893.__r_.__value_.__r.__words[2]);
        else
          v857 = v893.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v856, v857);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        v853 = *(_DWORD *)(v852 + 16);
      }
      if ((v853 & 0x10) != 0
        && (const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, *(const void ***)(v852 + 80)))
      {
        v858 = (google::protobuf::internal *)std::operator+<char>();
        v859 = *(_QWORD *)(v852 + 8);
        if ((v859 & 1) != 0)
        {
          v860 = (unsigned __int8 *)(v859 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v858);
          v860 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v892, "inputGroupId");
        v861 = siri::intelligence::GetLineNumFromUnknownField(v860, (uint64_t)&v892, -1);
        siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_INPUT, (__int128 *)&v893, v861);
        if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v892.__r_.__value_.__l.__data_);
        if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v893.__r_.__value_.__l.__data_);
      }
      if (*(int *)(v852 + 32) >= 1)
      {
        v862 = 0;
        do
        {
          v863 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v852 + 24, v862);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v863))
          {
            v864 = (google::protobuf::internal *)std::operator+<char>();
            v865 = *(_QWORD *)(v852 + 8);
            if ((v865 & 1) != 0)
            {
              v866 = (unsigned __int8 *)(v865 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v864);
              v866 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v892, "responseIds");
            v867 = siri::intelligence::GetLineNumFromUnknownField(v866, (uint64_t)&v892, v862);
            siri::intelligence::ValidationResults::AddError(a3, (__int128 *)siri::intelligence::CODE_UNDEF_RESPONSE, (__int128 *)&v893, v867);
            if (SHIBYTE(v892.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v892.__r_.__value_.__l.__data_);
            if (SHIBYTE(v893.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v893.__r_.__value_.__l.__data_);
          }
          ++v862;
        }
        while (v862 < *(_DWORD *)(v852 + 32));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v851;
    }
    while (v851 < *((_DWORD *)this + 44));
  }
}

void sub_22AF97224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 105) < 0)
    operator delete(*(void **)(v53 - 128));
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Validator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int FormatForFilename;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  unint64_t v11;
  BOOL v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char **v30;
  char *v31;
  uint64_t v32;

  v28 = 0uLL;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  v30 = &v31;
  if (siri::intelligence::HasFormatExtension(a1, 2))
    siri::intelligence::YamlIO::Validate((siri::intelligence::ValidationResults *)&v28, (uint64_t *)a1);
  FormatForFilename = siri::intelligence::GetFormatForFilename(a1);
  siri::intelligence::Loader::LoadFile((std::string *)a1, FormatForFilename, 1, &v27);
  v8 = v27;
  if ((_QWORD)v27)
  {
    siri::intelligence::Configuration::GetTemplateDirFromPath(a2, (uint64_t)__p);
    v10 = (void *)HIBYTE(v26);
    LOBYTE(v11) = HIBYTE(v26);
    if (v26 < 0)
      v10 = __p[1];
    if (!v10)
    {
      siri::intelligence::Configuration::GetTemplateDirFromPath(a1, (uint64_t)&v23);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      v26 = v24;
      *(_OWORD *)__p = v23;
      v11 = HIBYTE(v24);
    }
    v12 = (v11 & 0x80u) != 0;
    v13 = __p;
    if (v12)
      v13 = (void **)__p[0];
    siri::intelligence::Log::Debug((siri::intelligence::Log *)"Template dir for validation is: %s", v9, v13);
    siri::intelligence::Validator::Validate((uint64_t)__p, v8, (uint64_t)&v28, a3);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unable to load file for validation: %s", v7, v14);
    *(_OWORD *)a3 = v28;
    v15 = v29;
    v16 = v30;
    v29 = 0;
    v28 = 0uLL;
    a3[2] = v15;
    a3[3] = (uint64_t)v16;
    v17 = v31;
    v18 = v32;
    a3[4] = (uint64_t)v31;
    v19 = a3 + 4;
    a3[5] = v18;
    if (v18)
    {
      *((_QWORD *)v17 + 2) = v19;
      v30 = &v31;
      v31 = 0;
      v32 = 0;
    }
    else
    {
      a3[3] = (uint64_t)v19;
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v30, v31);
  __p[0] = &v28;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_22AF97F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char *a22)
{
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  siri::intelligence::ValidationResults::~ValidationResults(&a22);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<siri::intelligence::ValidationResult>::__init_with_size[abi:ne180100]<siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::intelligence::ValidationResult>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22AF98004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ValidationResult>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<siri::intelligence::ValidationResult>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void std::vector<siri::intelligence::ValidationResult>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<siri::intelligence::ValidationResult>::construct[abi:ne180100]<siri::intelligence::ValidationResult,siri::intelligence::ValidationResult&>(a1, v4, v6);
      v6 += 64;
      v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22AF98140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::ValidationResult>::construct[abi:ne180100]<siri::intelligence::ValidationResult,siri::intelligence::ValidationResult&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
}

void sub_22AF981E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 64;
      std::allocator<siri::intelligence::ValidationResult>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void siri::intelligence::CollectVariableReferences(siri::intelligence *this, const protobuf::Intelligence_KeyValueParameter *a2, _BOOL8 a3, siri::intelligence::ValidationData *a4)
{
  const void **v7;
  const void **i;
  const void **v9;
  const void **j;
  uint64_t v11;
  siri::intelligence **v12;
  uint64_t v13;
  uint64_t v14;
  siri::intelligence *v15;
  uint64_t v16;
  siri::intelligence **v17;
  uint64_t v18;
  uint64_t v19;
  siri::intelligence *v20;
  uint64_t v21;
  siri::intelligence **v22;
  uint64_t v23;
  uint64_t v24;
  siri::intelligence *v25;
  const void **v26;
  const void **v27;
  const void ***v28;

  if ((*((_BYTE *)this + 16) & 8) != 0)
  {
    siri::intelligence::GetVariableNames(*((_QWORD *)this + 18), (uint64_t *)&v26);
    v7 = v26;
    for (i = v27; v7 != i; v7 += 3)
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a3 + 288), v7, (uint64_t)v7);
    v28 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  if ((_DWORD)a2 && (*((_BYTE *)this + 16) & 1) != 0)
  {
    siri::intelligence::GetVariableNames(*((_QWORD *)this + 15), (uint64_t *)&v26);
    v9 = v26;
    for (j = v27; v9 != j; v9 += 3)
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a3 + 288), v9, (uint64_t)v9);
    v28 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  v11 = *((_QWORD *)this + 8);
  if (v11)
    v12 = (siri::intelligence **)(v11 + 8);
  else
    v12 = 0;
  v13 = *((int *)this + 14);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    do
    {
      v15 = *v12++;
      siri::intelligence::CollectVariableReferences(v15, a2, a3, a4);
      v14 -= 8;
    }
    while (v14);
  }
  v16 = *((_QWORD *)this + 11);
  if (v16)
    v17 = (siri::intelligence **)(v16 + 8);
  else
    v17 = 0;
  v18 = *((int *)this + 20);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    do
    {
      v20 = *v17++;
      siri::intelligence::CollectVariableReferences(v20, a2, a3, a4);
      v19 -= 8;
    }
    while (v19);
  }
  v21 = *((_QWORD *)this + 14);
  if (v21)
    v22 = (siri::intelligence **)(v21 + 8);
  else
    v22 = 0;
  v23 = *((int *)this + 26);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    do
    {
      v25 = *v22++;
      siri::intelligence::CollectVariableReferences(v25, a2, a3, a4);
      v24 -= 8;
    }
    while (v24);
  }
}

void sub_22AF9840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::intelligence::CollectVariableReferencesInCondition(siri::intelligence *this, const protobuf::Intelligence_Condition_ConditionEntry *a2, siri::intelligence::ValidationData *a3, siri::intelligence::ValidationData *a4)
{
  int v6;
  siri::intelligence *v7;
  std::string *v8;
  siri::intelligence *v9;
  siri::intelligence *v10;
  std::string *v11;
  siri::intelligence *v12;
  uint64_t v13;
  siri::intelligence **v14;
  uint64_t v15;
  uint64_t v16;
  siri::intelligence *v17;
  uint64_t v18;
  siri::intelligence **v19;
  uint64_t v20;
  uint64_t v21;
  siri::intelligence *v22;
  siri::intelligence *v23;
  std::string *v24;
  siri::intelligence *v25;
  char v26;
  std::string v27[2];

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x10) != 0)
  {
    v7 = (siri::intelligence *)*((_QWORD *)this + 13);
    if (!v7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
      v8 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      v7 = (siri::intelligence *)*((_QWORD *)this + 13);
    }
    if (v7)
      v9 = v7;
    else
      v9 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
    siri::intelligence::CollectVariableReferences(v9, 0, (_BOOL8)a2, a4);
    v6 = *((_DWORD *)this + 4);
  }
  if ((v6 & 0x20) != 0)
  {
    v10 = (siri::intelligence *)*((_QWORD *)this + 14);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
      v11 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      v10 = (siri::intelligence *)*((_QWORD *)this + 14);
    }
    if (v10)
      v12 = v10;
    else
      v12 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
    siri::intelligence::CollectVariableReferences(v12, 0, (_BOOL8)a2, a4);
  }
  v13 = *((_QWORD *)this + 5);
  if (v13)
    v14 = (siri::intelligence **)(v13 + 8);
  else
    v14 = 0;
  v15 = *((int *)this + 8);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      v17 = *v14++;
      siri::intelligence::CollectVariableReferencesInCondition(v17, a2, a3);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *((_QWORD *)this + 8);
  if (v18)
    v19 = (siri::intelligence **)(v18 + 8);
  else
    v19 = 0;
  v20 = *((int *)this + 14);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    do
    {
      v22 = *v19++;
      siri::intelligence::CollectVariableReferencesInCondition(v22, a2, a3);
      v21 -= 8;
    }
    while (v21);
  }
  if ((*((_DWORD *)this + 4) & 8) != 0)
  {
    v23 = (siri::intelligence *)*((_QWORD *)this + 12);
    if (!v23)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
      v24 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v24->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      v23 = (siri::intelligence *)*((_QWORD *)this + 12);
    }
    if (v23)
      v25 = v23;
    else
      v25 = (siri::intelligence *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
    siri::intelligence::CollectVariableReferencesInCondition(v25, a2, a3);
  }
}

void sub_22AF985FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidateVariableReferencesInText(const void **a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4, int a5)
{
  uint64_t *v9;
  std::string __p;
  std::string v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v12 = 0;
  v13 = 0;
  v9 = (uint64_t *)(a3 + 312);
  v14 = 0;
  while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v11))
  {
    siri::intelligence::Entity::GetName((siri::intelligence::Entity *)&v11, &__p);
    siri::intelligence::Memory::ValidateVariableReference(v9, (uint64_t)&__p, a1, a4, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_22AF986E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ValidateKeyValueParameter(uint64_t a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int LineNumFromUnknownField;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  std::string::size_type *p_size;
  protobuf::Intelligence_KeyValueParameter *begin;
  const protobuf::Intelligence_KeyValueParameter *v19;
  std::string::size_type *v20;
  google::protobuf::internal *v21;
  const void **v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  std::vector<std::string>::pointer end;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::vector<std::string>::pointer v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::vector<std::string>::pointer v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::string *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::vector<std::string>::pointer v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::string *v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  std::vector<std::string>::pointer v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  std::string *v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  int v79;
  std::vector<std::string>::pointer v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  std::string *v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  std::vector<std::string>::pointer v89;
  __int128 v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  std::string *v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  size_t v98;
  std::string *v99;
  const void *v100;
  void **v101;
  std::string::size_type v102;
  std::string *v103;
  uint64_t v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117[2];
  unsigned __int8 v118;
  std::string v119;
  __int128 v120;
  std::vector<std::string> __p;
  std::__split_buffer<std::string> __v;

  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 8);
    if ((v10 & 1) != 0)
    {
      v11 = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)a1);
      v11 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "key");
    LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v11, (uint64_t)&__v, -1);
    siri::intelligence::ValidateVariableReferencesInText((const void **)a1, v9, a3, a4, LineNumFromUnknownField);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 8) != 0)
  {
    v13 = *(_QWORD *)(a2 + 144);
    v14 = *(_QWORD *)(a2 + 8);
    if ((v14 & 1) != 0)
    {
      v15 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)a1);
      v15 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "var");
    v16 = siri::intelligence::GetLineNumFromUnknownField(v15, (uint64_t)&__v, -1);
    siri::intelligence::Memory::ValidateVariableReference((uint64_t *)(a3 + 312), v13, (const void **)a1, a4, v16);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x10) != 0)
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&__p, a2 + 96);
    if (LODWORD(__p.__end_))
    {
      if (__p.__end_cap_.__value_)
        p_size = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
      else
        p_size = 0;
      begin = (protobuf::Intelligence_KeyValueParameter *)__v.__begin_;
      do
      {
        v19 = (const protobuf::Intelligence_KeyValueParameter *)*p_size;
        if ((std::__split_buffer<std::string>::pointer)begin >= __v.__end_)
        {
          begin = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&__v, v19);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(begin, v19);
          begin = (protobuf::Intelligence_KeyValueParameter *)((char *)begin + 192);
        }
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)begin;
        ++p_size;
        if (__p.__end_cap_.__value_)
          v20 = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
        else
          v20 = 0;
      }
      while (p_size != &v20[SLODWORD(__p.__end_)]);
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&__p);
    v21 = (google::protobuf::internal *)std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&__v, &v119);
    v22 = *(const void ***)(a2 + 152);
    v120 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
    if (v119.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = *(_QWORD *)(a2 + 8);
    if ((v25 & 1) != 0)
    {
      v26 = (unsigned __int8 *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v21);
      v26 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v27 = siri::intelligence::GetLineNumFromUnknownField(v26, (uint64_t)&__p, -1);
    siri::intelligence::FunctionHandler::Validate((uint64_t)v117, (const void **)a1, a4, v22, (uint64_t *)&v120, a3, v27);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
    if (*((_QWORD *)&v120 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    size = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
    if (v119.__r_.__value_.__l.__size_)
    {
      v32 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    __p.__begin_ = (std::vector<std::string>::pointer)&__v;
    std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v8 = *(_DWORD *)(a2 + 16);
  }
  memset(&__p, 0, sizeof(__p));
  if ((v8 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "valueString");
    end = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v37 = v36 + 1;
      if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v37)
        v37 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v38 = 0xAAAAAAAAAAAAAAALL;
      else
        v38 = v37;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v38)
        v39 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v38);
      else
        v39 = 0;
      v40 = v39 + v36;
      __v.__first_ = v39;
      __v.__begin_ = v40;
      __v.__end_cap_.__value_ = &v39[v38];
      v41 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v40->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v40 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v42 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v42;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v35 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v35;
      __p.__end_ = end + 1;
    }
    v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x80) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "valueNumber");
    v43 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v46)
        v46 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v47)
        v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v47);
      else
        v48 = 0;
      v49 = v48 + v45;
      __v.__first_ = v48;
      __v.__begin_ = v49;
      __v.__end_cap_.__value_ = &v48[v47];
      v50 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v49->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v49 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v51 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v51;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v44 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
      __p.__end_ = v43 + 1;
    }
    v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x100) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "valueBoolean");
    v52 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v55)
        v55 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v55;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v56)
        v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v56);
      else
        v57 = 0;
      v58 = v57 + v54;
      __v.__first_ = v57;
      __v.__begin_ = v58;
      __v.__end_cap_.__value_ = &v57[v56];
      v59 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v58->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v58 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v60 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v60;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v53 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
      __p.__end_ = v52 + 1;
    }
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "valueArray");
    v61 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v64 = v63 + 1;
      if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v64)
        v64 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v65 = 0xAAAAAAAAAAAAAAALL;
      else
        v65 = v64;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v65)
        v66 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v65);
      else
        v66 = 0;
      v67 = v66 + v63;
      __v.__first_ = v66;
      __v.__begin_ = v67;
      __v.__end_cap_.__value_ = &v66[v65];
      v68 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v67->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v67 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v69 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v69;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v62 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
      __p.__end_ = v61 + 1;
    }
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "valueDictionary");
    v70 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v72 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v73 = v72 + 1;
      if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v73)
        v73 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v74 = 0xAAAAAAAAAAAAAAALL;
      else
        v74 = v73;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v74)
        v75 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v74);
      else
        v75 = 0;
      v76 = v75 + v72;
      __v.__first_ = v75;
      __v.__begin_ = v76;
      __v.__end_cap_.__value_ = &v75[v74];
      v77 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v76->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v76 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v78 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v78;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v71 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
      __p.__end_ = v70 + 1;
    }
  }
  v79 = *(_DWORD *)(a2 + 16);
  if ((v79 & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "function");
    v80 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v83 = v82 + 1;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v83)
        v83 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v84 = 0xAAAAAAAAAAAAAAALL;
      else
        v84 = v83;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v84)
        v85 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v84);
      else
        v85 = 0;
      v86 = v85 + v82;
      __v.__first_ = v85;
      __v.__begin_ = v86;
      __v.__end_cap_.__value_ = &v85[v84];
      v87 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v86->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v86 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v88 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v88;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v81 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
      __p.__end_ = v80 + 1;
    }
    v79 = *(_DWORD *)(a2 + 16);
  }
  if ((v79 & 8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v119, "var");
    v89 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      v92 = v91 + 1;
      if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v92)
        v92 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
        v93 = 0xAAAAAAAAAAAAAAALL;
      else
        v93 = v92;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v93)
        v94 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v93);
      else
        v94 = 0;
      v95 = v94 + v91;
      __v.__first_ = v94;
      __v.__begin_ = v95;
      __v.__end_cap_.__value_ = &v94[v93];
      v96 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      v95->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
      memset(&v119, 0, sizeof(v119));
      __v.__end_ = v95 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      v97 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v97;
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else
    {
      v90 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v119.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
      __p.__end_ = v89 + 1;
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3) >= 2)
  {
    if (*(char *)(a1 + 23) >= 0)
      v98 = *(unsigned __int8 *)(a1 + 23);
    else
      v98 = *(_QWORD *)(a1 + 8);
    v99 = &v119;
    std::string::basic_string[abi:ne180100]((uint64_t)&v119, v98 + 42);
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = (std::string *)v119.__r_.__value_.__r.__words[0];
    if (v98)
    {
      if (*(char *)(a1 + 23) >= 0)
        v100 = (const void *)a1;
      else
        v100 = *(const void **)a1;
      memmove(v99, v100, v98);
    }
    strcpy((char *)v99 + v98, "defines a parameter with multiple values: ");
    std::string::basic_string[abi:ne180100]<0>(v115, ", ");
    siri::intelligence::StringJoin((__int128 **)&__p, (uint64_t)v115, (uint64_t)v117);
    if ((v118 & 0x80u) == 0)
      v101 = v117;
    else
      v101 = (void **)v117[0];
    if ((v118 & 0x80u) == 0)
      v102 = v118;
    else
      v102 = (std::string::size_type)v117[1];
    v103 = std::string::append(&v119, (const std::string::value_type *)v101, v102);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)v103->__r_.__value_.__r.__words[2];
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    v104 = *(_QWORD *)(a2 + 8);
    if ((v104 & 1) != 0)
    {
      v105 = (unsigned __int8 *)(v104 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v103);
      v105 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(v113, "");
    v106 = siri::intelligence::GetLineNumFromUnknownField(v105, (uint64_t)v113, -1);
    siri::intelligence::ValidationResults::AddError(a4, (__int128 *)siri::intelligence::CODE_MULTI_DEFS, (__int128 *)&__v, v106);
    if (v114 < 0)
      operator delete(v113[0]);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if ((char)v118 < 0)
      operator delete(v117[0]);
    if (v116 < 0)
      operator delete(v115[0]);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    v107 = 0;
    do
    {
      v108 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 48, v107);
      siri::intelligence::ValidateKeyValueParameter(a1, v108, a3, a4);
      ++v107;
    }
    while (v107 < *(_DWORD *)(a2 + 56));
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    v109 = 0;
    do
    {
      v110 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 72, v109);
      siri::intelligence::ValidateKeyValueParameter(a1, v110, a3, a4);
      ++v109;
    }
    while (v109 < *(_DWORD *)(a2 + 80));
  }
  if (*(int *)(a2 + 104) >= 1)
  {
    v111 = 0;
    do
    {
      v112 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 96, v111);
      siri::intelligence::ValidateKeyValueParameter(a1, v112, a3, a4);
      ++v111;
    }
    while (v111 < *(_DWORD *)(a2 + 104));
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_22AF993F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void **__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v41 - 112));
  if (a33 < 0)
    operator delete(__p);
  __p = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::~Memory(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::string>::destroy((uint64_t)(this + 2), this[3]);
  std::shared_ptr<YAML::detail::memory_holder>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void siri::intelligence::ValidateConditionEntry(const void **a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  void *v13;
  std::string *v14;
  void *v15;
  void *v16;
  std::string *v17;
  void *v18;
  void *v19;
  std::string *v20;
  void *v21;
  char v22;
  std::string v23[2];

  siri::intelligence::ConditionEntry::Validate(a1, a2, a4);
  if (*(int *)(a2 + 32) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(a2 + 24, v8);
      siri::intelligence::ValidateConditionEntry(a1, v9, a3, a4);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a2 + 32));
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(a2 + 48, v10);
      siri::intelligence::ValidateConditionEntry(a1, v11, a3, a4);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a2 + 56));
  }
  v12 = *(_DWORD *)(a2 + 16);
  if ((v12 & 8) != 0)
  {
    v13 = *(void **)(a2 + 96);
    if (!v13)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21468);
      v14 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      v13 = *(void **)(a2 + 96);
    }
    if (v13)
      v15 = v13;
    else
      v15 = &protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
    siri::intelligence::ValidateConditionEntry(a1, v15, a3, a4);
    v12 = *(_DWORD *)(a2 + 16);
  }
  if ((v12 & 0x10) != 0)
  {
    v16 = *(void **)(a2 + 104);
    if (!v16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21199);
      v17 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      v16 = *(void **)(a2 + 104);
    }
    if (v16)
      v18 = v16;
    else
      v18 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
    siri::intelligence::ValidateKeyValueParameter((uint64_t)a1, (uint64_t)v18, a3, a4);
    v12 = *(_DWORD *)(a2 + 16);
  }
  if ((v12 & 0x20) != 0)
  {
    v19 = *(void **)(a2 + 112);
    if (!v19)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21330);
      v20 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      v19 = *(void **)(a2 + 112);
    }
    if (v19)
      v21 = v19;
    else
      v21 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
    siri::intelligence::ValidateKeyValueParameter((uint64_t)a1, (uint64_t)v21, a3, a4);
  }
}

void sub_22AF997E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidationData::~ValidationData(siri::intelligence::ValidationData *this)
{
  siri::intelligence::Memory::~Memory((char **)this + 39);
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  std::__tree<std::string>::destroy((uint64_t)this + 264, *((char **)this + 34));
  std::__tree<std::string>::destroy((uint64_t)this + 240, *((char **)this + 31));
  std::__tree<std::string>::destroy((uint64_t)this + 216, *((char **)this + 28));
  std::__tree<std::string>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  std::__tree<std::string>::destroy((uint64_t)this + 120, *((char **)this + 16));
  std::__tree<std::string>::destroy((uint64_t)this + 96, *((char **)this + 13));
  std::__tree<std::string>::destroy((uint64_t)this + 72, *((char **)this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v8 = *a3;
    v6 = (char *)operator new(0x40uLL);
    v9 = (std::string *)(v6 + 32);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_22AF99978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_FlowTest_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest::FlowTest((protobuf::FlowTest *)&protobuf::_FlowTest_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_AssertCondition_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_AssertCondition::FlowTest_AssertCondition((protobuf::FlowTest_AssertCondition *)&protobuf::_FlowTest_AssertCondition_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_AssertCondition_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_AssertResponse_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse((protobuf::FlowTest_AssertResponse *)&protobuf::_FlowTest_AssertResponse_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_AssertResponse_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_KeyValueParameter_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&protobuf::_FlowTest_KeyValueParameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_KeyValueParameter_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_SendIntent_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_SendIntent::FlowTest_SendIntent((protobuf::FlowTest_SendIntent *)&protobuf::_FlowTest_SendIntent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_SendIntent_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_StartFrom_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_StartFrom::FlowTest_StartFrom((protobuf::FlowTest_StartFrom *)&protobuf::_FlowTest_StartFrom_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_StartFrom_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_Step_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)&protobuf::_FlowTest_Step_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_Step_default_instance_, v4);
  qword_255B59340 = (uint64_t)&protobuf::_FlowTest_StartFrom_default_instance_;
  unk_255B59348 = &protobuf::_FlowTest_SendIntent_default_instance_;
  qword_255B59350 = (uint64_t)&protobuf::_FlowTest_AssertResponse_default_instance_;
  unk_255B59358 = &protobuf::_FlowTest_AssertCondition_default_instance_;
}

void InitDefaultsscc_info_FlowTest_Test_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)&protobuf::_FlowTest_Test_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_Test_default_instance_, v4);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this)
{
  *(_QWORD *)this = &off_24F543128;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  return this;
}

void sub_22AF99CBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 48));
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this, const protobuf::FlowTest_KeyValueParameter *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24F543128;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
  }
  v9 = *((_QWORD *)a2 + 11);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_QWORD *)this + 11) = v9;
  return this;
}

void sub_22AF99DDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;
  google::protobuf::internal::ArenaImpl **v3;

  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F543128;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::FlowTest_KeyValueParameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::FlowTest_KeyValueParameter::default_instance(protobuf::FlowTest_KeyValueParameter *this)
{
  if (atomic_load(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto);
  return &protobuf::_FlowTest_KeyValueParameter_default_instance_;
}

void protobuf::FlowTest_KeyValueParameter::Clear(protobuf::FlowTest_KeyValueParameter *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 9);
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v2 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v4 = *((_QWORD *)this + 10);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0xC) != 0)
  {
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v6 = *((_BYTE *)this + 8);
  v5 = (protobuf::FlowTest_KeyValueParameter *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

char *protobuf::FlowTest_KeyValueParameter::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  char *TagFallback;
  const char *v8;
  std::string *v9;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  protobuf::FlowTest_KeyValueParameter *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  google::protobuf::internal *v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  protobuf::FlowTest_KeyValueParameter *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  google::protobuf::internal *v33;
  uint64_t v34;
  google::protobuf::internal *v35;

  v35 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v35, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (2)
    {
      TagFallback = (char *)v35 + 1;
      LODWORD(v8) = *(unsigned __int8 *)v35;
      if (*(char *)v35 < 0)
      {
        v8 = (const char *)(v8 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v35, v8);
          v35 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_50;
              *(_DWORD *)(a1 + 16) |= 1u;
              v9 = *(std::string **)(a1 + 72);
              if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_23;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v9 = *(std::string **)(a1 + 72);
              goto LABEL_22;
            case 2u:
              if (v8 != 17)
                goto LABEL_50;
              v5 |= 4u;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)TagFallback;
              v35 = (google::protobuf::internal *)(TagFallback + 8);
              goto LABEL_56;
            case 3u:
              if (v8 != 24)
                goto LABEL_50;
              v5 |= 8u;
              v10 = (google::protobuf::internal *)(TagFallback + 1);
              v11 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0)
                goto LABEL_18;
              v12 = *(char *)v10;
              v11 = v11 + (v12 << 7) - 128;
              if (v12 < 0)
              {
                v33 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v11);
                v35 = v33;
                *(_BYTE *)(a1 + 96) = v34 != 0;
                if (!v33)
                  goto LABEL_61;
              }
              else
              {
                v10 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_18:
                v35 = v10;
                *(_BYTE *)(a1 + 96) = v11 != 0;
              }
              goto LABEL_56;
            case 4u:
              if (v8 != 34)
                goto LABEL_50;
              *(_DWORD *)(a1 + 16) |= 2u;
              v9 = *(std::string **)(a1 + 80);
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 80), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v9 = *(std::string **)(a1 + 80);
LABEL_22:
                TagFallback = (char *)v35;
              }
LABEL_23:
              v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, TagFallback, (uint64_t)this);
              goto LABEL_55;
            case 5u:
              if (v8 != 42)
                goto LABEL_50;
              v14 = (unint64_t)(TagFallback - 1);
              while (1)
              {
                v15 = (google::protobuf::internal *)(v14 + 1);
                v35 = (google::protobuf::internal *)(v14 + 1);
                v16 = *(int **)(a1 + 40);
                if (!v16)
                  break;
                v17 = *(int *)(a1 + 32);
                v18 = *v16;
                if ((int)v17 >= *v16)
                {
                  if (v18 == *(_DWORD *)(a1 + 36))
                  {
LABEL_31:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v18 + 1);
                    v16 = *(int **)(a1 + 40);
                    v18 = *v16;
                  }
                  *v16 = v18 + 1;
                  v20 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  LODWORD(v19) = (_DWORD)v20;
                  v21 = *(_QWORD *)(a1 + 40);
                  v22 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v22 + 1;
                  *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
                  v15 = v35;
                  goto LABEL_33;
                }
                *(_DWORD *)(a1 + 32) = v17 + 1;
                v19 = *(_QWORD *)&v16[2 * v17 + 2];
LABEL_33:
                v14 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, v19, v15);
                v35 = (google::protobuf::internal *)v14;
                if (!v14)
                  goto LABEL_61;
                if (*(_QWORD *)this <= v14 || *(_BYTE *)v14 != 42)
                  goto LABEL_56;
              }
              v18 = *(_DWORD *)(a1 + 36);
              goto LABEL_31;
            case 6u:
              if (v8 != 50)
                goto LABEL_50;
              v23 = (unint64_t)(TagFallback - 1);
              break;
            default:
LABEL_50:
              if ((_DWORD)v8)
                v32 = (v8 & 7) == 4;
              else
                v32 = 1;
              if (v32)
              {
                *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
                goto LABEL_3;
              }
              v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_55:
              v35 = v13;
              if (!v13)
              {
LABEL_61:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_56:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v35, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v24 = (google::protobuf::internal *)(v23 + 1);
            v35 = (google::protobuf::internal *)(v23 + 1);
            v25 = *(int **)(a1 + 64);
            if (!v25)
              break;
            v26 = *(int *)(a1 + 56);
            v27 = *v25;
            if ((int)v26 >= *v25)
            {
              if (v27 == *(_DWORD *)(a1 + 60))
              {
LABEL_44:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v27 + 1);
                v25 = *(int **)(a1 + 64);
                v27 = *v25;
              }
              *v25 = v27 + 1;
              v29 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
              LODWORD(v28) = (_DWORD)v29;
              v30 = *(_QWORD *)(a1 + 64);
              v31 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v31 + 1;
              *(_QWORD *)(v30 + 8 * v31 + 8) = v29;
              v24 = v35;
              goto LABEL_46;
            }
            *(_DWORD *)(a1 + 56) = v26 + 1;
            v28 = *(_QWORD *)&v25[2 * v26 + 2];
LABEL_46:
            v23 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, v28, v24);
            v35 = (google::protobuf::internal *)v23;
            if (!v23)
              goto LABEL_61;
            if (*(_QWORD *)this <= v23 || *(_BYTE *)v23 != 50)
              goto LABEL_56;
          }
          v27 = *(_DWORD *)(a1 + 60);
          goto LABEL_44;
        }
        TagFallback = (char *)v35 + 2;
      }
      break;
    }
    v35 = (google::protobuf::internal *)TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallback = (char *)v35;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = protobuf::FlowTest_KeyValueParameter::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_KeyValueParameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::FlowTest_KeyValueParameter *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  protobuf::FlowTest_KeyValueParameter *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9), a2);
    if ((v6 & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v25 = *((_QWORD *)this + 11);
  *v4 = 17;
  *(_QWORD *)(v4 + 1) = v25;
  v4 += 9;
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_36:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v26 = *((_BYTE *)this + 96);
  *v4 = 24;
  v4[1] = v26;
  v4 += 2;
  if ((v6 & 2) != 0)
LABEL_5:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 10), v4);
LABEL_6:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 42;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        v11 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v17 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 50;
      v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        v20 = v18 >> 7;
        if (v18 >> 14)
        {
          v19 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v19 - 1) = v20 | 0x80;
            v21 = v20 >> 7;
            ++v19;
            v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          v19 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v18;
        v19 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) == 0)
    return (unsigned __int8 *)v4;
  v27 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v27 + 23) < 0)
  {
    v29 = *(void **)v27;
    v28 = *(_QWORD *)(v27 + 8);
  }
  else
  {
    LODWORD(v28) = *(unsigned __int8 *)(v27 + 23);
    v29 = (void *)v27;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v28)
  {
    v30 = (int)v28;
    memcpy(v4, v29, (int)v28);
    v4 += v30;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v29, v28, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_KeyValueParameter::ByteSizeLong(protobuf::FlowTest_KeyValueParameter *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::FlowTest_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::FlowTest_KeyValueParameter *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  protobuf::FlowTest_KeyValueParameter **v11;
  uint64_t v12;
  protobuf::FlowTest_KeyValueParameter *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::FlowTest_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (protobuf::FlowTest_KeyValueParameter **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((_DWORD *)this + 4);
  if ((v15 & 0xF) != 0)
  {
    if ((v15 & 1) != 0)
    {
      v16 = *((_QWORD *)this + 9);
      v17 = *(unsigned __int8 *)(v16 + 23);
      v18 = *(_QWORD *)(v16 + 8);
      if ((v17 & 0x80u) == 0)
        v18 = v17;
      v9 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v15 & 2) != 0)
    {
      v19 = *((_QWORD *)this + 10);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v21 = *(_QWORD *)(v19 + 8);
      if ((v20 & 0x80u) == 0)
        v21 = v20;
      v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v22 = v9 + 9;
    if ((v15 & 4) == 0)
      v22 = v9;
    if ((v15 & 8) != 0)
      v9 = v22 + 2;
    else
      v9 = v22;
  }
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
  {
    v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v9 += v26;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

void protobuf::FlowTest_KeyValueParameter::CheckTypeAndMergeFrom(protobuf::FlowTest_KeyValueParameter *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_KeyValueParameter::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_KeyValueParameter::MergeFrom(protobuf::FlowTest_KeyValueParameter *this, const protobuf::FlowTest_KeyValueParameter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 481);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((protobuf::FlowTest_KeyValueParameter *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((protobuf::FlowTest_KeyValueParameter *)((char *)this + 48));
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 10);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 10);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
            *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
          if ((v6 & 8) != 0)
            *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
          *((_DWORD *)this + 4) |= v6;
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_22AF9AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_KeyValueParameter::CopyFrom(protobuf::FlowTest_KeyValueParameter *this, const protobuf::FlowTest_KeyValueParameter *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_KeyValueParameter::Clear(this);
    protobuf::FlowTest_KeyValueParameter::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_KeyValueParameter::IsInitialized(protobuf::FlowTest_KeyValueParameter *this)
{
  return 1;
}

double protobuf::FlowTest_KeyValueParameter::InternalSwap(protobuf::FlowTest_KeyValueParameter *this, protobuf::FlowTest_KeyValueParameter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  double result;
  char v26;
  unint64_t v27;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v27;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_KeyValueParameter *)((char *)this + 24), (protobuf::FlowTest_KeyValueParameter *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_KeyValueParameter *)((char *)this + 48), (protobuf::FlowTest_KeyValueParameter *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  result = *((double *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((double *)a2 + 11) = result;
  v26 = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v26;
  return result;
}

_QWORD *protobuf::FlowTest_KeyValueParameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.KeyValueParameter");
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this)
{
  *(_QWORD *)this = &off_24F5431B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_FlowTest_StartFrom_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_StartFrom_flowtest_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF9ADB0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_24F5431B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  return this;
}

void sub_22AF9AE6C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_StartFrom::~FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F5431B8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::FlowTest_StartFrom::~FlowTest_StartFrom(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::FlowTest_StartFrom::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::FlowTest_StartFrom::default_instance(protobuf::FlowTest_StartFrom *this)
{
  if (atomic_load(scc_info_FlowTest_StartFrom_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_StartFrom_flowtest_2eproto);
  return &protobuf::_FlowTest_StartFrom_default_instance_;
}

void protobuf::FlowTest_StartFrom::Clear(protobuf::FlowTest_StartFrom *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (protobuf::FlowTest_StartFrom *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

google::protobuf::internal *protobuf::FlowTest_StartFrom::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  google::protobuf::internal *result;
  std::string::value_type *v7;
  const char *v8;
  std::string *v10;
  int v11;
  google::protobuf::internal *v12;

  v12 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
  result = v12;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
        goto LABEL_5;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      v12 = result;
      if (!result)
        return result;
      v7 = (std::string::value_type *)result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v10 = *(std::string **)(a1 + 32);
          if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 32), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v10 = *(std::string **)(a1 + 32);
            goto LABEL_19;
          }
LABEL_20:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, v7, (uint64_t)this);
          goto LABEL_21;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 24), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v10 = *(std::string **)(a1 + 24);
LABEL_19:
          v7 = (std::string::value_type *)v12;
        }
        goto LABEL_20;
      }
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_21:
      v12 = result;
      if (result)
      {
        v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
        result = v12;
        if (!v11)
          continue;
      }
      return result;
    }
    v7 = (char *)result + 2;
LABEL_5:
    v12 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest_StartFrom::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_StartFrom *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

uint64_t protobuf::FlowTest_StartFrom::ByteSizeLong(protobuf::FlowTest_StartFrom *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_StartFrom::CheckTypeAndMergeFrom(protobuf::FlowTest_StartFrom *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_StartFrom::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_StartFrom::MergeFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 729);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 4);
    v10 = (std::string **)((char *)this + 32);
    v9 = v11;
    *((_DWORD *)v10 - 4) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_22AF9B4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_StartFrom::CopyFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_StartFrom::Clear(this);
    protobuf::FlowTest_StartFrom::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_StartFrom::IsInitialized(protobuf::FlowTest_StartFrom *this)
{
  return 1;
}

__n128 protobuf::FlowTest_StartFrom::InternalSwap(protobuf::FlowTest_StartFrom *this, protobuf::FlowTest_StartFrom *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v25;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

_QWORD *protobuf::FlowTest_StartFrom::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.StartFrom");
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24F543248;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_FlowTest_SendIntent_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_SendIntent_flowtest_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22AF9B754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_24F543248;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
  }
  return this;
}

void sub_22AF9B840(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_SendIntent::~FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_24F543248;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x22E2E9CCC](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::FlowTest_SendIntent::~FlowTest_SendIntent(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::FlowTest_SendIntent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::FlowTest_SendIntent::default_instance(protobuf::FlowTest_SendIntent *this)
{
  if (atomic_load(scc_info_FlowTest_SendIntent_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_SendIntent_flowtest_2eproto);
  return &protobuf::_FlowTest_SendIntent_default_instance_;
}

void protobuf::FlowTest_SendIntent::Clear(protobuf::FlowTest_SendIntent *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_11;
  if ((v2 & 1) == 0)
  {
LABEL_5:
    if ((v2 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = *((_QWORD *)this + 6);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if ((v2 & 2) != 0)
  {
LABEL_6:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  v6 = *((_BYTE *)this + 8);
  v5 = (protobuf::FlowTest_SendIntent *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

std::string::value_type *protobuf::FlowTest_SendIntent::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char v5;
  std::string::value_type *result;
  std::string::value_type *v7;
  const char *v8;
  unsigned int v9;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  protobuf::FlowTest_KeyValueParameter *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  int v19;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  result = (std::string::value_type *)v20;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      v7 = result + 1;
      LODWORD(v8) = *result;
      if ((*result & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0)
        break;
      result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
      v20 = (google::protobuf::internal *)result;
      if (!result)
        return result;
      v7 = result;
LABEL_7:
      v9 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 26)
          goto LABEL_13;
        result = v7 - 1;
        while (2)
        {
          v11 = (google::protobuf::internal *)(result + 1);
          v20 = (google::protobuf::internal *)(result + 1);
          v12 = *(int **)(a1 + 40);
          if (v12)
          {
            v13 = *(int *)(a1 + 32);
            v14 = *v12;
            if ((int)v13 < *v12)
            {
              *(_DWORD *)(a1 + 32) = v13 + 1;
              v15 = *(protobuf::FlowTest_KeyValueParameter **)&v12[2 * v13 + 2];
              goto LABEL_25;
            }
            if (v14 == *(_DWORD *)(a1 + 36))
            {
LABEL_23:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
              v12 = *(int **)(a1 + 40);
              v14 = *v12;
            }
            *v12 = v14 + 1;
            v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            v16 = *(_QWORD *)(a1 + 40);
            v17 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v17 + 1;
            *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
            v11 = v20;
LABEL_25:
            result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, (uint64_t)v15, v11);
            v20 = (google::protobuf::internal *)result;
            if (!result)
              return result;
            if (*(_QWORD *)this <= (unint64_t)result || *result != 26)
              goto LABEL_37;
            continue;
          }
          break;
        }
        v14 = *(_DWORD *)(a1 + 36);
        goto LABEL_23;
      }
      if (v9 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v18 = *(std::string **)(a1 + 56);
          if (v18 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 56), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
            v18 = *(std::string **)(a1 + 56);
            goto LABEL_34;
          }
LABEL_35:
          result = google::protobuf::internal::InlineGreedyStringParser(v18, v7, (uint64_t)this);
          goto LABEL_36;
        }
      }
      else if (v9 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v18 = *(std::string **)(a1 + 48);
        if (v18 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 48), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *(std::string **)(a1 + 48);
LABEL_34:
          v7 = (std::string::value_type *)v20;
        }
        goto LABEL_35;
      }
LABEL_13:
      if (!(_DWORD)v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
        return v7;
      }
      result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (uint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_36:
      v20 = (google::protobuf::internal *)result;
      if (!result)
        return result;
LABEL_37:
      v19 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
      result = (std::string::value_type *)v20;
      if (v19)
        return result;
    }
    v7 = result + 2;
LABEL_6:
    v20 = (google::protobuf::internal *)v7;
    goto LABEL_7;
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest_SendIntent::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_SendIntent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  protobuf::FlowTest_KeyValueParameter *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 26;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) == 0)
    return (unsigned __int8 *)v4;
  v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v17 + 23) < 0)
  {
    v19 = *(void **)v17;
    v18 = *(_QWORD *)(v17 + 8);
  }
  else
  {
    LODWORD(v18) = *(unsigned __int8 *)(v17 + 23);
    v19 = (void *)v17;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v18)
  {
    v20 = (int)v18;
    memcpy(v4, v19, (int)v18);
    v4 += v20;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v18, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_SendIntent::ByteSizeLong(protobuf::FlowTest_SendIntent *this)
{
  uint64_t v2;
  uint64_t v3;
  protobuf::FlowTest_KeyValueParameter **v4;
  uint64_t v5;
  protobuf::FlowTest_KeyValueParameter *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (protobuf::FlowTest_KeyValueParameter **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 3) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v9 = *((_QWORD *)this + 6);
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      v12 = *((_QWORD *)this + 7);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v2 += v18;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_SendIntent::CheckTypeAndMergeFrom(protobuf::FlowTest_SendIntent *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_SendIntent::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_SendIntent::MergeFrom(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 993);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 7);
    v10 = (std::string **)((char *)this + 56);
    v9 = v11;
    *((_DWORD *)v10 - 10) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 7);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_22AF9C10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_SendIntent::CopyFrom(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_SendIntent::Clear(this);
    protobuf::FlowTest_SendIntent::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_SendIntent::IsInitialized(protobuf::FlowTest_SendIntent *this)
{
  return 1;
}

__n128 protobuf::FlowTest_SendIntent::InternalSwap(protobuf::FlowTest_SendIntent *this, protobuf::FlowTest_SendIntent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string **v19;
  std::string *v20;
  uint64_t *v21;
  std::string **v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_SendIntent *)((char *)this + 24), (protobuf::FlowTest_SendIntent *)((char *)a2 + 24));
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v21 = (uint64_t *)*((_QWORD *)this + 7);
  v19 = (std::string **)((char *)this + 56);
  v20 = (std::string *)v21;
  v22 = (std::string **)((char *)a2 + 56);
  if (v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v23 = *v22;
  if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v23 = *v22;
  }
  v24 = v20->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v20->__r_.__value_.__l.__data_;
  v25 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v20->__r_.__value_.__r.__words[2] = v25;
  *(__n128 *)&v23->__r_.__value_.__l.__data_ = result;
  v23->__r_.__value_.__r.__words[2] = v24;
  return result;
}

_QWORD *protobuf::FlowTest_SendIntent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.SendIntent");
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this)
{
  *(_QWORD *)this = &off_24F5432D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_FlowTest_AssertResponse_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertResponse_flowtest_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_22AF9C3AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this, const protobuf::FlowTest_AssertResponse *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)this = &off_24F5432D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v6);
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  return this;
}

void sub_22AF9C4A4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_AssertResponse::~FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24F5432D8;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x22E2E9CCC](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  protobuf::FlowTest_AssertResponse::~FlowTest_AssertResponse(this);
  JUMPOUT(0x22E2E9CCCLL);
}

uint64_t protobuf::FlowTest_AssertResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *protobuf::FlowTest_AssertResponse::default_instance(protobuf::FlowTest_AssertResponse *this)
{
  if (atomic_load(scc_info_FlowTest_AssertResponse_flowtest_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertResponse_flowtest_2eproto);
  return &protobuf::_FlowTest_AssertResponse_default_instance_;
}

void protobuf::FlowTest_AssertResponse::Clear(protobuf::FlowTest_AssertResponse *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArenaLite *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 9);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (protobuf::FlowTest_AssertResponse *)((char *)this + 8);
  *((_DWORD *)v3 + 18) = 0;
  *((_DWORD *)v3 + 2) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
}

google::protobuf::internal *protobuf::FlowTest_AssertResponse::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v5;
  google::protobuf::internal *TagFallback;
  uint64_t *v8;
  uint64_t *v9;
  const char *v10;
  std::string *v11;
  google::protobuf::internal *v12;
  char *v13;
  std::string::value_type *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  std::string::value_type *v23;
  int *v24;
  uint64_t v25;
  int v26;
  std::string *v27;
  google::protobuf::internal::ArenaImpl *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  google::protobuf::internal *v32;
  int v33;
  BOOL v34;
  google::protobuf::internal *v35;
  int v36;
  google::protobuf::internal *v37;

  v37 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)) & 1) == 0)
  {
    v8 = (uint64_t *)(a1 + 48);
    v9 = (uint64_t *)(a1 + 24);
    while (2)
    {
      TagFallback = (google::protobuf::internal *)((char *)v37 + 1);
      LODWORD(v10) = *(unsigned __int8 *)v37;
      if (*(char *)v37 < 0)
      {
        v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v10);
          v37 = TagFallback;
          if (!TagFallback)
            goto LABEL_3;
LABEL_9:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10)
                goto LABEL_55;
              *(_DWORD *)(a1 + 16) |= 1u;
              v11 = *(std::string **)(a1 + 72);
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v11 = *(std::string **)(a1 + 72);
                TagFallback = v37;
              }
              v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_60;
            case 2u:
              if (v10 != 18)
                goto LABEL_55;
              v13 = (char *)TagFallback - 1;
              while (1)
              {
                v14 = v13 + 1;
                v37 = (google::protobuf::internal *)(v13 + 1);
                v15 = *(int **)(a1 + 40);
                if (!v15)
                  break;
                v16 = *(int *)(a1 + 32);
                v17 = *v15;
                if ((int)v16 >= *v15)
                {
                  if (v17 == *(_DWORD *)(a1 + 36))
                  {
LABEL_21:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v17 + 1);
                    v15 = *(int **)(a1 + 40);
                    v17 = *v15;
                  }
                  *v15 = v17 + 1;
                  v19 = (google::protobuf::internal::ArenaImpl *)*v9;
                  if (*v9)
                  {
                    if (*((_QWORD *)v19 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v19, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v20 = *(_QWORD *)(a1 + 40);
                  v21 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v21 + 1;
                  *(_QWORD *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
                  v14 = (std::string::value_type *)v37;
                  goto LABEL_28;
                }
                *(_DWORD *)(a1 + 32) = v16 + 1;
                AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
LABEL_28:
                v13 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)this);
                v37 = (google::protobuf::internal *)v13;
                if (!v13)
                  goto LABEL_66;
                if (*(_QWORD *)this <= (unint64_t)v13 || *v13 != 18)
                  goto LABEL_61;
              }
              v17 = *(_DWORD *)(a1 + 36);
              goto LABEL_21;
            case 3u:
              if (v10 != 26)
                goto LABEL_55;
              v22 = (char *)TagFallback - 1;
              break;
            case 4u:
              if (v10 != 32)
                goto LABEL_55;
              v5 |= 2u;
              v32 = (google::protobuf::internal *)((char *)TagFallback + 1);
              LODWORD(v31) = *(unsigned __int8 *)TagFallback;
              if ((v31 & 0x80) == 0)
                goto LABEL_54;
              v33 = *(char *)v32;
              v31 = v31 + (v33 << 7) - 128;
              if (v33 < 0)
              {
                v35 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v31);
                v37 = v35;
                *(_DWORD *)(a1 + 80) = v36;
                if (!v35)
                  goto LABEL_66;
              }
              else
              {
                v32 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_54:
                v37 = v32;
                *(_DWORD *)(a1 + 80) = v31;
              }
              goto LABEL_61;
            default:
LABEL_55:
              if ((_DWORD)v10)
                v34 = (v10 & 7) == 4;
              else
                v34 = 1;
              if (v34)
              {
                *((_DWORD *)this + 20) = (_DWORD)v10 - 1;
                goto LABEL_3;
              }
              v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, (uint64_t *)(a1 + 8), TagFallback, this);
LABEL_60:
              v37 = v12;
              if (!v12)
              {
LABEL_66:
                TagFallback = 0;
                goto LABEL_3;
              }
LABEL_61:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)))goto LABEL_2;
              continue;
          }
          while (1)
          {
            v23 = v22 + 1;
            v37 = (google::protobuf::internal *)(v22 + 1);
            v24 = *(int **)(a1 + 64);
            if (!v24)
              break;
            v25 = *(int *)(a1 + 56);
            v26 = *v24;
            if ((int)v25 >= *v24)
            {
              if (v26 == *(_DWORD *)(a1 + 60))
              {
LABEL_39:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v26 + 1);
                v24 = *(int **)(a1 + 64);
                v26 = *v24;
              }
              *v24 = v26 + 1;
              v28 = (google::protobuf::internal::ArenaImpl *)*v8;
              if (*v8)
              {
                if (*((_QWORD *)v28 + 14))
                v27 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v28, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                v27 = (std::string *)operator new();
              }
              v27->__r_.__value_.__r.__words[0] = 0;
              v27->__r_.__value_.__l.__size_ = 0;
              v27->__r_.__value_.__r.__words[2] = 0;
              v29 = *(_QWORD *)(a1 + 64);
              v30 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v30 + 1;
              *(_QWORD *)(v29 + 8 * v30 + 8) = v27;
              v23 = (std::string::value_type *)v37;
              goto LABEL_46;
            }
            *(_DWORD *)(a1 + 56) = v25 + 1;
            v27 = *(std::string **)&v24[2 * v25 + 2];
LABEL_46:
            v22 = google::protobuf::internal::InlineGreedyStringParser(v27, v23, (uint64_t)this);
            v37 = (google::protobuf::internal *)v22;
            if (!v22)
              goto LABEL_66;
            if (*(_QWORD *)this <= (unint64_t)v22 || *v22 != 26)
              goto LABEL_61;
          }
          v26 = *(_DWORD *)(a1 + 60);
          goto LABEL_39;
        }
        TagFallback = (google::protobuf::internal *)((char *)v37 + 2);
      }
      break;
    }
    v37 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallback = v37;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

